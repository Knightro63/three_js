// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// https://www.khronos.org/registry/OpenGL/index_es.php#headers3
class LibEGL {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  LibEGL(ffi.DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

  int eglChooseConfig(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Int32> attrib_list,
    ffi.Pointer<ffi.Pointer<ffi.Void>> configs,
    int config_size,
    ffi.Pointer<ffi.Int32> num_config,
  ) {
    return (_eglChooseConfig ??=
        _dylib.lookupFunction<_c_eglChooseConfig, _dart_eglChooseConfig>(
            'eglChooseConfig'))(
      dpy,
      attrib_list,
      configs,
      config_size,
      num_config,
    );
  }

  _dart_eglChooseConfig? _eglChooseConfig;

  int eglCopyBuffers(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> surface,
    int target,
  ) {
    return (_eglCopyBuffers ??=
        _dylib.lookupFunction<_c_eglCopyBuffers, _dart_eglCopyBuffers>(
            'eglCopyBuffers'))(
      dpy,
      surface,
      target,
    );
  }

  _dart_eglCopyBuffers? _eglCopyBuffers;

  ffi.Pointer<ffi.Void> eglCreateContext(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> config,
    ffi.Pointer<ffi.Void> share_context,
    ffi.Pointer<ffi.Int32> attrib_list,
  ) {
    return (_eglCreateContext ??=
        _dylib.lookupFunction<_c_eglCreateContext, _dart_eglCreateContext>(
            'eglCreateContext'))(
      dpy,
      config,
      share_context,
      attrib_list,
    );
  }

  _dart_eglCreateContext? _eglCreateContext;

  ffi.Pointer<ffi.Void> eglCreatePbufferSurface(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> config,
    ffi.Pointer<ffi.Int32> attrib_list,
  ) {
    return (_eglCreatePbufferSurface ??= _dylib.lookupFunction<
        _c_eglCreatePbufferSurface,
        _dart_eglCreatePbufferSurface>('eglCreatePbufferSurface'))(
      dpy,
      config,
      attrib_list,
    );
  }

  _dart_eglCreatePbufferSurface? _eglCreatePbufferSurface;

  ffi.Pointer<ffi.Void> eglCreatePixmapSurface(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> config,
    int pixmap,
    ffi.Pointer<ffi.Int32> attrib_list,
  ) {
    return (_eglCreatePixmapSurface ??= _dylib.lookupFunction<
        _c_eglCreatePixmapSurface,
        _dart_eglCreatePixmapSurface>('eglCreatePixmapSurface'))(
      dpy,
      config,
      pixmap,
      attrib_list,
    );
  }

  _dart_eglCreatePixmapSurface? _eglCreatePixmapSurface;

  ffi.Pointer<ffi.Void> eglCreateWindowSurface(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> config,
    ffi.Pointer<ffi.Void> win,
    ffi.Pointer<ffi.Int32> attrib_list,
  ) {
    return (_eglCreateWindowSurface ??= _dylib.lookupFunction<
        _c_eglCreateWindowSurface,
        _dart_eglCreateWindowSurface>('eglCreateWindowSurface'))(
      dpy,
      config,
      win,
      attrib_list,
    );
  }

  _dart_eglCreateWindowSurface? _eglCreateWindowSurface;

  int eglDestroyContext(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> ctx,
  ) {
    return (_eglDestroyContext ??=
        _dylib.lookupFunction<_c_eglDestroyContext, _dart_eglDestroyContext>(
            'eglDestroyContext'))(
      dpy,
      ctx,
    );
  }

  _dart_eglDestroyContext? _eglDestroyContext;

  int eglDestroySurface(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> surface,
  ) {
    return (_eglDestroySurface ??=
        _dylib.lookupFunction<_c_eglDestroySurface, _dart_eglDestroySurface>(
            'eglDestroySurface'))(
      dpy,
      surface,
    );
  }

  _dart_eglDestroySurface? _eglDestroySurface;

  int eglGetConfigAttrib(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> config,
    int attribute,
    ffi.Pointer<ffi.Int32> value,
  ) {
    return (_eglGetConfigAttrib ??=
        _dylib.lookupFunction<_c_eglGetConfigAttrib, _dart_eglGetConfigAttrib>(
            'eglGetConfigAttrib'))(
      dpy,
      config,
      attribute,
      value,
    );
  }

  _dart_eglGetConfigAttrib? _eglGetConfigAttrib;

  int eglGetConfigs(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Pointer<ffi.Void>> configs,
    int config_size,
    ffi.Pointer<ffi.Int32> num_config,
  ) {
    return (_eglGetConfigs ??=
        _dylib.lookupFunction<_c_eglGetConfigs, _dart_eglGetConfigs>(
            'eglGetConfigs'))(
      dpy,
      configs,
      config_size,
      num_config,
    );
  }

  _dart_eglGetConfigs? _eglGetConfigs;

  ffi.Pointer<ffi.Void> eglGetCurrentDisplay() {
    return (_eglGetCurrentDisplay ??= _dylib.lookupFunction<
        _c_eglGetCurrentDisplay,
        _dart_eglGetCurrentDisplay>('eglGetCurrentDisplay'))();
  }

  _dart_eglGetCurrentDisplay? _eglGetCurrentDisplay;

  ffi.Pointer<ffi.Void> eglGetCurrentSurface(
    int readdraw,
  ) {
    return (_eglGetCurrentSurface ??= _dylib.lookupFunction<
        _c_eglGetCurrentSurface,
        _dart_eglGetCurrentSurface>('eglGetCurrentSurface'))(
      readdraw,
    );
  }

  _dart_eglGetCurrentSurface? _eglGetCurrentSurface;

  ffi.Pointer<ffi.Void> eglGetDisplay(
    ffi.Pointer<ffi.Void> display_id,
  ) {
    return (_eglGetDisplay ??=
        _dylib.lookupFunction<_c_eglGetDisplay, _dart_eglGetDisplay>(
            'eglGetDisplay'))(
      display_id,
    );
  }

  _dart_eglGetDisplay? _eglGetDisplay;

  int eglGetError() {
    return (_eglGetError ??= _dylib
        .lookupFunction<_c_eglGetError, _dart_eglGetError>('eglGetError'))();
  }

  _dart_eglGetError? _eglGetError;

  ffi.Pointer<ffi.NativeFunction<__eglMustCastToProperFunctionPointerType>>
      eglGetProcAddress(
    ffi.Pointer<ffi.Int8> procname,
  ) {
    return (_eglGetProcAddress ??=
        _dylib.lookupFunction<_c_eglGetProcAddress, _dart_eglGetProcAddress>(
            'eglGetProcAddress'))(
      procname,
    );
  }

  _dart_eglGetProcAddress? _eglGetProcAddress;

  int eglInitialize(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Int32> major,
    ffi.Pointer<ffi.Int32> minor,
  ) {
    return (_eglInitialize ??=
        _dylib.lookupFunction<_c_eglInitialize, _dart_eglInitialize>(
            'eglInitialize'))(
      dpy,
      major,
      minor,
    );
  }

  _dart_eglInitialize? _eglInitialize;

  int eglMakeCurrent(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> draw,
    ffi.Pointer<ffi.Void> read,
    ffi.Pointer<ffi.Void> ctx,
  ) {
    return (_eglMakeCurrent ??=
        _dylib.lookupFunction<_c_eglMakeCurrent, _dart_eglMakeCurrent>(
            'eglMakeCurrent'))(
      dpy,
      draw,
      read,
      ctx,
    );
  }

  _dart_eglMakeCurrent? _eglMakeCurrent;

  int eglQueryContext(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> ctx,
    int attribute,
    ffi.Pointer<ffi.Int32> value,
  ) {
    return (_eglQueryContext ??=
        _dylib.lookupFunction<_c_eglQueryContext, _dart_eglQueryContext>(
            'eglQueryContext'))(
      dpy,
      ctx,
      attribute,
      value,
    );
  }

  _dart_eglQueryContext? _eglQueryContext;

  ffi.Pointer<ffi.Int8> eglQueryString(
    ffi.Pointer<ffi.Void> dpy,
    int name,
  ) {
    return (_eglQueryString ??=
        _dylib.lookupFunction<_c_eglQueryString, _dart_eglQueryString>(
            'eglQueryString'))(
      dpy,
      name,
    );
  }

  _dart_eglQueryString? _eglQueryString;

  int eglQuerySurface(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> surface,
    int attribute,
    ffi.Pointer<ffi.Int32> value,
  ) {
    return (_eglQuerySurface ??=
        _dylib.lookupFunction<_c_eglQuerySurface, _dart_eglQuerySurface>(
            'eglQuerySurface'))(
      dpy,
      surface,
      attribute,
      value,
    );
  }

  _dart_eglQuerySurface? _eglQuerySurface;

  int eglSwapBuffers(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> surface,
  ) {
    return (_eglSwapBuffers ??=
        _dylib.lookupFunction<_c_eglSwapBuffers, _dart_eglSwapBuffers>(
            'eglSwapBuffers'))(
      dpy,
      surface,
    );
  }

  _dart_eglSwapBuffers? _eglSwapBuffers;

  int eglTerminate(
    ffi.Pointer<ffi.Void> dpy,
  ) {
    return (_eglTerminate ??= _dylib
        .lookupFunction<_c_eglTerminate, _dart_eglTerminate>('eglTerminate'))(
      dpy,
    );
  }

  _dart_eglTerminate? _eglTerminate;

  int eglWaitGL() {
    return (_eglWaitGL ??=
        _dylib.lookupFunction<_c_eglWaitGL, _dart_eglWaitGL>('eglWaitGL'))();
  }

  _dart_eglWaitGL? _eglWaitGL;

  int eglWaitNative(
    int engine,
  ) {
    return (_eglWaitNative ??=
        _dylib.lookupFunction<_c_eglWaitNative, _dart_eglWaitNative>(
            'eglWaitNative'))(
      engine,
    );
  }

  _dart_eglWaitNative? _eglWaitNative;

  int eglBindTexImage(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> surface,
    int buffer,
  ) {
    return (_eglBindTexImage ??=
        _dylib.lookupFunction<_c_eglBindTexImage, _dart_eglBindTexImage>(
            'eglBindTexImage'))(
      dpy,
      surface,
      buffer,
    );
  }

  _dart_eglBindTexImage? _eglBindTexImage;

  int eglReleaseTexImage(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> surface,
    int buffer,
  ) {
    return (_eglReleaseTexImage ??=
        _dylib.lookupFunction<_c_eglReleaseTexImage, _dart_eglReleaseTexImage>(
            'eglReleaseTexImage'))(
      dpy,
      surface,
      buffer,
    );
  }

  _dart_eglReleaseTexImage? _eglReleaseTexImage;

  int eglSurfaceAttrib(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> surface,
    int attribute,
    int value,
  ) {
    return (_eglSurfaceAttrib ??=
        _dylib.lookupFunction<_c_eglSurfaceAttrib, _dart_eglSurfaceAttrib>(
            'eglSurfaceAttrib'))(
      dpy,
      surface,
      attribute,
      value,
    );
  }

  _dart_eglSurfaceAttrib? _eglSurfaceAttrib;

  int eglSwapInterval(
    ffi.Pointer<ffi.Void> dpy,
    int interval,
  ) {
    return (_eglSwapInterval ??=
        _dylib.lookupFunction<_c_eglSwapInterval, _dart_eglSwapInterval>(
            'eglSwapInterval'))(
      dpy,
      interval,
    );
  }

  _dart_eglSwapInterval? _eglSwapInterval;

  int eglBindAPI(
    int api,
  ) {
    return (_eglBindAPI ??=
        _dylib.lookupFunction<_c_eglBindAPI, _dart_eglBindAPI>('eglBindAPI'))(
      api,
    );
  }

  _dart_eglBindAPI? _eglBindAPI;

  int eglQueryAPI() {
    return (_eglQueryAPI ??= _dylib
        .lookupFunction<_c_eglQueryAPI, _dart_eglQueryAPI>('eglQueryAPI'))();
  }

  _dart_eglQueryAPI? _eglQueryAPI;

  ffi.Pointer<ffi.Void> eglCreatePbufferFromClientBuffer(
    ffi.Pointer<ffi.Void> dpy,
    int buftype,
    ffi.Pointer<ffi.Void> buffer,
    ffi.Pointer<ffi.Void> config,
    ffi.Pointer<ffi.Int32> attrib_list,
  ) {
    return (_eglCreatePbufferFromClientBuffer ??= _dylib.lookupFunction<
            _c_eglCreatePbufferFromClientBuffer,
            _dart_eglCreatePbufferFromClientBuffer>(
        'eglCreatePbufferFromClientBuffer'))(
      dpy,
      buftype,
      buffer,
      config,
      attrib_list,
    );
  }

  _dart_eglCreatePbufferFromClientBuffer? _eglCreatePbufferFromClientBuffer;

  int eglReleaseThread() {
    return (_eglReleaseThread ??=
        _dylib.lookupFunction<_c_eglReleaseThread, _dart_eglReleaseThread>(
            'eglReleaseThread'))();
  }

  _dart_eglReleaseThread? _eglReleaseThread;

  int eglWaitClient() {
    return (_eglWaitClient ??=
        _dylib.lookupFunction<_c_eglWaitClient, _dart_eglWaitClient>(
            'eglWaitClient'))();
  }

  _dart_eglWaitClient? _eglWaitClient;

  ffi.Pointer<ffi.Void> eglGetCurrentContext() {
    return (_eglGetCurrentContext ??= _dylib.lookupFunction<
        _c_eglGetCurrentContext,
        _dart_eglGetCurrentContext>('eglGetCurrentContext'))();
  }

  _dart_eglGetCurrentContext? _eglGetCurrentContext;

  ffi.Pointer<ffi.Void> eglCreateSync(
    ffi.Pointer<ffi.Void> dpy,
    int type,
    ffi.Pointer<ffi.Int32> attrib_list,
  ) {
    return (_eglCreateSync ??=
        _dylib.lookupFunction<_c_eglCreateSync, _dart_eglCreateSync>(
            'eglCreateSync'))(
      dpy,
      type,
      attrib_list,
    );
  }

  _dart_eglCreateSync? _eglCreateSync;

  int eglDestroySync(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> sync_1,
  ) {
    return (_eglDestroySync ??=
        _dylib.lookupFunction<_c_eglDestroySync, _dart_eglDestroySync>(
            'eglDestroySync'))(
      dpy,
      sync_1,
    );
  }

  _dart_eglDestroySync? _eglDestroySync;

  int eglClientWaitSync(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> sync_1,
    int flags,
    int timeout,
  ) {
    return (_eglClientWaitSync ??=
        _dylib.lookupFunction<_c_eglClientWaitSync, _dart_eglClientWaitSync>(
            'eglClientWaitSync'))(
      dpy,
      sync_1,
      flags,
      timeout,
    );
  }

  _dart_eglClientWaitSync? _eglClientWaitSync;

  int eglGetSyncAttrib(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> sync_1,
    int attribute,
    ffi.Pointer<ffi.Int32> value,
  ) {
    return (_eglGetSyncAttrib ??=
        _dylib.lookupFunction<_c_eglGetSyncAttrib, _dart_eglGetSyncAttrib>(
            'eglGetSyncAttrib'))(
      dpy,
      sync_1,
      attribute,
      value,
    );
  }

  _dart_eglGetSyncAttrib? _eglGetSyncAttrib;

  ffi.Pointer<ffi.Void> eglCreateImage(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> ctx,
    int target,
    ffi.Pointer<ffi.Void> buffer,
    ffi.Pointer<ffi.Int32> attrib_list,
  ) {
    return (_eglCreateImage ??=
        _dylib.lookupFunction<_c_eglCreateImage, _dart_eglCreateImage>(
            'eglCreateImage'))(
      dpy,
      ctx,
      target,
      buffer,
      attrib_list,
    );
  }

  _dart_eglCreateImage? _eglCreateImage;

  int eglDestroyImage(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> image,
  ) {
    return (_eglDestroyImage ??=
        _dylib.lookupFunction<_c_eglDestroyImage, _dart_eglDestroyImage>(
            'eglDestroyImage'))(
      dpy,
      image,
    );
  }

  _dart_eglDestroyImage? _eglDestroyImage;

  ffi.Pointer<ffi.Void> eglGetPlatformDisplay(
    int platform,
    ffi.Pointer<ffi.Void> native_display,
    ffi.Pointer<ffi.Int32> attrib_list,
  ) {
    return (_eglGetPlatformDisplay ??= _dylib.lookupFunction<
        _c_eglGetPlatformDisplay,
        _dart_eglGetPlatformDisplay>('eglGetPlatformDisplay'))(
      platform,
      native_display,
      attrib_list,
    );
  }

  _dart_eglGetPlatformDisplay? _eglGetPlatformDisplay;

  ffi.Pointer<ffi.Void> eglCreatePlatformWindowSurface(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> config,
    ffi.Pointer<ffi.Void> native_window,
    ffi.Pointer<ffi.Int32> attrib_list,
  ) {
    return (_eglCreatePlatformWindowSurface ??= _dylib.lookupFunction<
            _c_eglCreatePlatformWindowSurface,
            _dart_eglCreatePlatformWindowSurface>(
        'eglCreatePlatformWindowSurface'))(
      dpy,
      config,
      native_window,
      attrib_list,
    );
  }

  _dart_eglCreatePlatformWindowSurface? _eglCreatePlatformWindowSurface;

  ffi.Pointer<ffi.Void> eglCreatePlatformPixmapSurface(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> config,
    ffi.Pointer<ffi.Void> native_pixmap,
    ffi.Pointer<ffi.Int32> attrib_list,
  ) {
    return (_eglCreatePlatformPixmapSurface ??= _dylib.lookupFunction<
            _c_eglCreatePlatformPixmapSurface,
            _dart_eglCreatePlatformPixmapSurface>(
        'eglCreatePlatformPixmapSurface'))(
      dpy,
      config,
      native_pixmap,
      attrib_list,
    );
  }

  _dart_eglCreatePlatformPixmapSurface? _eglCreatePlatformPixmapSurface;

  int eglWaitSync(
    ffi.Pointer<ffi.Void> dpy,
    ffi.Pointer<ffi.Void> sync_1,
    int flags,
  ) {
    return (_eglWaitSync ??= _dylib
        .lookupFunction<_c_eglWaitSync, _dart_eglWaitSync>('eglWaitSync'))(
      dpy,
      sync_1,
      flags,
    );
  }

  _dart_eglWaitSync? _eglWaitSync;

  void __va_start(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ) {
    return (___va_start ??=
        _dylib.lookupFunction<_c___va_start, _dart___va_start>('__va_start'))(
      arg0,
    );
  }

  _dart___va_start? ___va_start;

  void __security_init_cookie() {
    return (___security_init_cookie ??= _dylib.lookupFunction<
        _c___security_init_cookie,
        _dart___security_init_cookie>('__security_init_cookie'))();
  }

  _dart___security_init_cookie? ___security_init_cookie;

  void __security_check_cookie(
    int _StackCookie,
  ) {
    return (___security_check_cookie ??= _dylib.lookupFunction<
        _c___security_check_cookie,
        _dart___security_check_cookie>('__security_check_cookie'))(
      _StackCookie,
    );
  }

  _dart___security_check_cookie? ___security_check_cookie;

  void __report_gsfailure(
    int _StackCookie,
  ) {
    return (___report_gsfailure ??=
        _dylib.lookupFunction<_c___report_gsfailure, _dart___report_gsfailure>(
            '__report_gsfailure'))(
      _StackCookie,
    );
  }

  _dart___report_gsfailure? ___report_gsfailure;

  int __C_specific_handler(
    ffi.Pointer<EXCEPTION_RECORD> ExceptionRecord,
    ffi.Pointer<ffi.Void> EstablisherFrame,
    ffi.Pointer<PCONTEXT> ContextRecord,
    ffi.Pointer<PDISPATCHER_CONTEXT> DispatcherContext,
  ) {
    return (___C_specific_handler ??= _dylib.lookupFunction<
        _c___C_specific_handler,
        _dart___C_specific_handler>('__C_specific_handler'))(
      ExceptionRecord,
      EstablisherFrame,
      ContextRecord,
      DispatcherContext,
    );
  }

  _dart___C_specific_handler? ___C_specific_handler;

  int _exception_code() {
    return (__exception_code ??=
        _dylib.lookupFunction<_c__exception_code, _dart__exception_code>(
            '_exception_code'))();
  }

  _dart__exception_code? __exception_code;

  ffi.Pointer<ffi.Void> _exception_info() {
    return (__exception_info ??=
        _dylib.lookupFunction<_c__exception_info, _dart__exception_info>(
            '_exception_info'))();
  }

  _dart__exception_info? __exception_info;

  int _abnormal_termination() {
    return (__abnormal_termination ??= _dylib.lookupFunction<
        _c__abnormal_termination,
        _dart__abnormal_termination>('_abnormal_termination'))();
  }

  _dart__abnormal_termination? __abnormal_termination;

  void _invalid_parameter_noinfo() {
    return (__invalid_parameter_noinfo ??= _dylib.lookupFunction<
        _c__invalid_parameter_noinfo,
        _dart__invalid_parameter_noinfo>('_invalid_parameter_noinfo'))();
  }

  _dart__invalid_parameter_noinfo? __invalid_parameter_noinfo;

  void _invalid_parameter_noinfo_noreturn() {
    return (__invalid_parameter_noinfo_noreturn ??= _dylib.lookupFunction<
            _c__invalid_parameter_noinfo_noreturn,
            _dart__invalid_parameter_noinfo_noreturn>(
        '_invalid_parameter_noinfo_noreturn'))();
  }

  _dart__invalid_parameter_noinfo_noreturn? __invalid_parameter_noinfo_noreturn;

  void _invoke_watson(
    ffi.Pointer<ffi.Uint16> _Expression,
    ffi.Pointer<ffi.Uint16> _FunctionName,
    ffi.Pointer<ffi.Uint16> _FileName,
    int _LineNo,
    int _Reserved,
  ) {
    return (__invoke_watson ??=
        _dylib.lookupFunction<_c__invoke_watson, _dart__invoke_watson>(
            '_invoke_watson'))(
      _Expression,
      _FunctionName,
      _FileName,
      _LineNo,
      _Reserved,
    );
  }

  _dart__invoke_watson? __invoke_watson;

  ffi.Pointer<ffi.Uint16> __pctype_func() {
    return (___pctype_func ??=
        _dylib.lookupFunction<_c___pctype_func, _dart___pctype_func>(
            '__pctype_func'))();
  }

  _dart___pctype_func? ___pctype_func;

  ffi.Pointer<ffi.Uint16> __pwctype_func() {
    return (___pwctype_func ??=
        _dylib.lookupFunction<_c___pwctype_func, _dart___pwctype_func>(
            '__pwctype_func'))();
  }

  _dart___pwctype_func? ___pwctype_func;

  int iswalnum(
    int _C,
  ) {
    return (_iswalnum ??=
        _dylib.lookupFunction<_c_iswalnum, _dart_iswalnum>('iswalnum'))(
      _C,
    );
  }

  _dart_iswalnum? _iswalnum;

  int iswalpha(
    int _C,
  ) {
    return (_iswalpha ??=
        _dylib.lookupFunction<_c_iswalpha, _dart_iswalpha>('iswalpha'))(
      _C,
    );
  }

  _dart_iswalpha? _iswalpha;

  int iswascii(
    int _C,
  ) {
    return (_iswascii ??=
        _dylib.lookupFunction<_c_iswascii, _dart_iswascii>('iswascii'))(
      _C,
    );
  }

  _dart_iswascii? _iswascii;

  int iswblank(
    int _C,
  ) {
    return (_iswblank ??=
        _dylib.lookupFunction<_c_iswblank, _dart_iswblank>('iswblank'))(
      _C,
    );
  }

  _dart_iswblank? _iswblank;

  int iswcntrl(
    int _C,
  ) {
    return (_iswcntrl ??=
        _dylib.lookupFunction<_c_iswcntrl, _dart_iswcntrl>('iswcntrl'))(
      _C,
    );
  }

  _dart_iswcntrl? _iswcntrl;

  int iswdigit(
    int _C,
  ) {
    return (_iswdigit ??=
        _dylib.lookupFunction<_c_iswdigit, _dart_iswdigit>('iswdigit'))(
      _C,
    );
  }

  _dart_iswdigit? _iswdigit;

  int iswgraph(
    int _C,
  ) {
    return (_iswgraph ??=
        _dylib.lookupFunction<_c_iswgraph, _dart_iswgraph>('iswgraph'))(
      _C,
    );
  }

  _dart_iswgraph? _iswgraph;

  int iswlower(
    int _C,
  ) {
    return (_iswlower ??=
        _dylib.lookupFunction<_c_iswlower, _dart_iswlower>('iswlower'))(
      _C,
    );
  }

  _dart_iswlower? _iswlower;

  int iswprint(
    int _C,
  ) {
    return (_iswprint ??=
        _dylib.lookupFunction<_c_iswprint, _dart_iswprint>('iswprint'))(
      _C,
    );
  }

  _dart_iswprint? _iswprint;

  int iswpunct(
    int _C,
  ) {
    return (_iswpunct ??=
        _dylib.lookupFunction<_c_iswpunct, _dart_iswpunct>('iswpunct'))(
      _C,
    );
  }

  _dart_iswpunct? _iswpunct;

  int iswspace(
    int _C,
  ) {
    return (_iswspace ??=
        _dylib.lookupFunction<_c_iswspace, _dart_iswspace>('iswspace'))(
      _C,
    );
  }

  _dart_iswspace? _iswspace;

  int iswupper(
    int _C,
  ) {
    return (_iswupper ??=
        _dylib.lookupFunction<_c_iswupper, _dart_iswupper>('iswupper'))(
      _C,
    );
  }

  _dart_iswupper? _iswupper;

  int iswxdigit(
    int _C,
  ) {
    return (_iswxdigit ??=
        _dylib.lookupFunction<_c_iswxdigit, _dart_iswxdigit>('iswxdigit'))(
      _C,
    );
  }

  _dart_iswxdigit? _iswxdigit;

  int __iswcsymf(
    int _C,
  ) {
    return (___iswcsymf ??=
        _dylib.lookupFunction<_c___iswcsymf, _dart___iswcsymf>('__iswcsymf'))(
      _C,
    );
  }

  _dart___iswcsymf? ___iswcsymf;

  int __iswcsym(
    int _C,
  ) {
    return (___iswcsym ??=
        _dylib.lookupFunction<_c___iswcsym, _dart___iswcsym>('__iswcsym'))(
      _C,
    );
  }

  _dart___iswcsym? ___iswcsym;

  int _iswalnum_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__iswalnum_l ??= _dylib
        .lookupFunction<_c__iswalnum_l, _dart__iswalnum_l>('_iswalnum_l'))(
      _C,
      _Locale,
    );
  }

  _dart__iswalnum_l? __iswalnum_l;

  int _iswalpha_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__iswalpha_l ??= _dylib
        .lookupFunction<_c__iswalpha_l, _dart__iswalpha_l>('_iswalpha_l'))(
      _C,
      _Locale,
    );
  }

  _dart__iswalpha_l? __iswalpha_l;

  int _iswblank_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__iswblank_l ??= _dylib
        .lookupFunction<_c__iswblank_l, _dart__iswblank_l>('_iswblank_l'))(
      _C,
      _Locale,
    );
  }

  _dart__iswblank_l? __iswblank_l;

  int _iswcntrl_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__iswcntrl_l ??= _dylib
        .lookupFunction<_c__iswcntrl_l, _dart__iswcntrl_l>('_iswcntrl_l'))(
      _C,
      _Locale,
    );
  }

  _dart__iswcntrl_l? __iswcntrl_l;

  int _iswdigit_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__iswdigit_l ??= _dylib
        .lookupFunction<_c__iswdigit_l, _dart__iswdigit_l>('_iswdigit_l'))(
      _C,
      _Locale,
    );
  }

  _dart__iswdigit_l? __iswdigit_l;

  int _iswgraph_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__iswgraph_l ??= _dylib
        .lookupFunction<_c__iswgraph_l, _dart__iswgraph_l>('_iswgraph_l'))(
      _C,
      _Locale,
    );
  }

  _dart__iswgraph_l? __iswgraph_l;

  int _iswlower_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__iswlower_l ??= _dylib
        .lookupFunction<_c__iswlower_l, _dart__iswlower_l>('_iswlower_l'))(
      _C,
      _Locale,
    );
  }

  _dart__iswlower_l? __iswlower_l;

  int _iswprint_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__iswprint_l ??= _dylib
        .lookupFunction<_c__iswprint_l, _dart__iswprint_l>('_iswprint_l'))(
      _C,
      _Locale,
    );
  }

  _dart__iswprint_l? __iswprint_l;

  int _iswpunct_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__iswpunct_l ??= _dylib
        .lookupFunction<_c__iswpunct_l, _dart__iswpunct_l>('_iswpunct_l'))(
      _C,
      _Locale,
    );
  }

  _dart__iswpunct_l? __iswpunct_l;

  int _iswspace_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__iswspace_l ??= _dylib
        .lookupFunction<_c__iswspace_l, _dart__iswspace_l>('_iswspace_l'))(
      _C,
      _Locale,
    );
  }

  _dart__iswspace_l? __iswspace_l;

  int _iswupper_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__iswupper_l ??= _dylib
        .lookupFunction<_c__iswupper_l, _dart__iswupper_l>('_iswupper_l'))(
      _C,
      _Locale,
    );
  }

  _dart__iswupper_l? __iswupper_l;

  int _iswxdigit_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__iswxdigit_l ??= _dylib
        .lookupFunction<_c__iswxdigit_l, _dart__iswxdigit_l>('_iswxdigit_l'))(
      _C,
      _Locale,
    );
  }

  _dart__iswxdigit_l? __iswxdigit_l;

  int _iswcsymf_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__iswcsymf_l ??= _dylib
        .lookupFunction<_c__iswcsymf_l, _dart__iswcsymf_l>('_iswcsymf_l'))(
      _C,
      _Locale,
    );
  }

  _dart__iswcsymf_l? __iswcsymf_l;

  int _iswcsym_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__iswcsym_l ??=
        _dylib.lookupFunction<_c__iswcsym_l, _dart__iswcsym_l>('_iswcsym_l'))(
      _C,
      _Locale,
    );
  }

  _dart__iswcsym_l? __iswcsym_l;

  int towupper(
    int _C,
  ) {
    return (_towupper ??=
        _dylib.lookupFunction<_c_towupper, _dart_towupper>('towupper'))(
      _C,
    );
  }

  _dart_towupper? _towupper;

  int towlower(
    int _C,
  ) {
    return (_towlower ??=
        _dylib.lookupFunction<_c_towlower, _dart_towlower>('towlower'))(
      _C,
    );
  }

  _dart_towlower? _towlower;

  int iswctype(
    int _C,
    int _Type,
  ) {
    return (_iswctype ??=
        _dylib.lookupFunction<_c_iswctype, _dart_iswctype>('iswctype'))(
      _C,
      _Type,
    );
  }

  _dart_iswctype? _iswctype;

  int _towupper_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__towupper_l ??= _dylib
        .lookupFunction<_c__towupper_l, _dart__towupper_l>('_towupper_l'))(
      _C,
      _Locale,
    );
  }

  _dart__towupper_l? __towupper_l;

  int _towlower_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__towlower_l ??= _dylib
        .lookupFunction<_c__towlower_l, _dart__towlower_l>('_towlower_l'))(
      _C,
      _Locale,
    );
  }

  _dart__towlower_l? __towlower_l;

  int _iswctype_l(
    int _C,
    int _Type,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__iswctype_l ??= _dylib
        .lookupFunction<_c__iswctype_l, _dart__iswctype_l>('_iswctype_l'))(
      _C,
      _Type,
      _Locale,
    );
  }

  _dart__iswctype_l? __iswctype_l;

  int isleadbyte(
    int _C,
  ) {
    return (_isleadbyte ??=
        _dylib.lookupFunction<_c_isleadbyte, _dart_isleadbyte>('isleadbyte'))(
      _C,
    );
  }

  _dart_isleadbyte? _isleadbyte;

  int _isleadbyte_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__isleadbyte_l ??=
        _dylib.lookupFunction<_c__isleadbyte_l, _dart__isleadbyte_l>(
            '_isleadbyte_l'))(
      _C,
      _Locale,
    );
  }

  _dart__isleadbyte_l? __isleadbyte_l;

  int is_wctype(
    int _C,
    int _Type,
  ) {
    return (_is_wctype ??=
        _dylib.lookupFunction<_c_is_wctype, _dart_is_wctype>('is_wctype'))(
      _C,
      _Type,
    );
  }

  _dart_is_wctype? _is_wctype;

  int _isctype(
    int _C,
    int _Type,
  ) {
    return (__isctype ??=
        _dylib.lookupFunction<_c__isctype, _dart__isctype>('_isctype'))(
      _C,
      _Type,
    );
  }

  _dart__isctype? __isctype;

  int _isctype_l(
    int _C,
    int _Type,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__isctype_l ??=
        _dylib.lookupFunction<_c__isctype_l, _dart__isctype_l>('_isctype_l'))(
      _C,
      _Type,
      _Locale,
    );
  }

  _dart__isctype_l? __isctype_l;

  int isalpha(
    int _C,
  ) {
    return (_isalpha ??=
        _dylib.lookupFunction<_c_isalpha, _dart_isalpha>('isalpha'))(
      _C,
    );
  }

  _dart_isalpha? _isalpha;

  int _isalpha_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__isalpha_l ??=
        _dylib.lookupFunction<_c__isalpha_l, _dart__isalpha_l>('_isalpha_l'))(
      _C,
      _Locale,
    );
  }

  _dart__isalpha_l? __isalpha_l;

  int isupper(
    int _C,
  ) {
    return (_isupper ??=
        _dylib.lookupFunction<_c_isupper, _dart_isupper>('isupper'))(
      _C,
    );
  }

  _dart_isupper? _isupper;

  int _isupper_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__isupper_l ??=
        _dylib.lookupFunction<_c__isupper_l, _dart__isupper_l>('_isupper_l'))(
      _C,
      _Locale,
    );
  }

  _dart__isupper_l? __isupper_l;

  int islower(
    int _C,
  ) {
    return (_islower ??=
        _dylib.lookupFunction<_c_islower, _dart_islower>('islower'))(
      _C,
    );
  }

  _dart_islower? _islower;

  int _islower_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__islower_l ??=
        _dylib.lookupFunction<_c__islower_l, _dart__islower_l>('_islower_l'))(
      _C,
      _Locale,
    );
  }

  _dart__islower_l? __islower_l;

  int isdigit(
    int _C,
  ) {
    return (_isdigit ??=
        _dylib.lookupFunction<_c_isdigit, _dart_isdigit>('isdigit'))(
      _C,
    );
  }

  _dart_isdigit? _isdigit;

  int _isdigit_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__isdigit_l ??=
        _dylib.lookupFunction<_c__isdigit_l, _dart__isdigit_l>('_isdigit_l'))(
      _C,
      _Locale,
    );
  }

  _dart__isdigit_l? __isdigit_l;

  int isxdigit(
    int _C,
  ) {
    return (_isxdigit ??=
        _dylib.lookupFunction<_c_isxdigit, _dart_isxdigit>('isxdigit'))(
      _C,
    );
  }

  _dart_isxdigit? _isxdigit;

  int _isxdigit_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__isxdigit_l ??= _dylib
        .lookupFunction<_c__isxdigit_l, _dart__isxdigit_l>('_isxdigit_l'))(
      _C,
      _Locale,
    );
  }

  _dart__isxdigit_l? __isxdigit_l;

  int isspace(
    int _C,
  ) {
    return (_isspace ??=
        _dylib.lookupFunction<_c_isspace, _dart_isspace>('isspace'))(
      _C,
    );
  }

  _dart_isspace? _isspace;

  int _isspace_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__isspace_l ??=
        _dylib.lookupFunction<_c__isspace_l, _dart__isspace_l>('_isspace_l'))(
      _C,
      _Locale,
    );
  }

  _dart__isspace_l? __isspace_l;

  int ispunct(
    int _C,
  ) {
    return (_ispunct ??=
        _dylib.lookupFunction<_c_ispunct, _dart_ispunct>('ispunct'))(
      _C,
    );
  }

  _dart_ispunct? _ispunct;

  int _ispunct_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__ispunct_l ??=
        _dylib.lookupFunction<_c__ispunct_l, _dart__ispunct_l>('_ispunct_l'))(
      _C,
      _Locale,
    );
  }

  _dart__ispunct_l? __ispunct_l;

  int isblank(
    int _C,
  ) {
    return (_isblank ??=
        _dylib.lookupFunction<_c_isblank, _dart_isblank>('isblank'))(
      _C,
    );
  }

  _dart_isblank? _isblank;

  int _isblank_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__isblank_l ??=
        _dylib.lookupFunction<_c__isblank_l, _dart__isblank_l>('_isblank_l'))(
      _C,
      _Locale,
    );
  }

  _dart__isblank_l? __isblank_l;

  int isalnum(
    int _C,
  ) {
    return (_isalnum ??=
        _dylib.lookupFunction<_c_isalnum, _dart_isalnum>('isalnum'))(
      _C,
    );
  }

  _dart_isalnum? _isalnum;

  int _isalnum_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__isalnum_l ??=
        _dylib.lookupFunction<_c__isalnum_l, _dart__isalnum_l>('_isalnum_l'))(
      _C,
      _Locale,
    );
  }

  _dart__isalnum_l? __isalnum_l;

  int isprint(
    int _C,
  ) {
    return (_isprint ??=
        _dylib.lookupFunction<_c_isprint, _dart_isprint>('isprint'))(
      _C,
    );
  }

  _dart_isprint? _isprint;

  int _isprint_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__isprint_l ??=
        _dylib.lookupFunction<_c__isprint_l, _dart__isprint_l>('_isprint_l'))(
      _C,
      _Locale,
    );
  }

  _dart__isprint_l? __isprint_l;

  int isgraph(
    int _C,
  ) {
    return (_isgraph ??=
        _dylib.lookupFunction<_c_isgraph, _dart_isgraph>('isgraph'))(
      _C,
    );
  }

  _dart_isgraph? _isgraph;

  int _isgraph_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__isgraph_l ??=
        _dylib.lookupFunction<_c__isgraph_l, _dart__isgraph_l>('_isgraph_l'))(
      _C,
      _Locale,
    );
  }

  _dart__isgraph_l? __isgraph_l;

  int iscntrl(
    int _C,
  ) {
    return (_iscntrl ??=
        _dylib.lookupFunction<_c_iscntrl, _dart_iscntrl>('iscntrl'))(
      _C,
    );
  }

  _dart_iscntrl? _iscntrl;

  int _iscntrl_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__iscntrl_l ??=
        _dylib.lookupFunction<_c__iscntrl_l, _dart__iscntrl_l>('_iscntrl_l'))(
      _C,
      _Locale,
    );
  }

  _dart__iscntrl_l? __iscntrl_l;

  int toupper(
    int _C,
  ) {
    return (_toupper_1 ??=
        _dylib.lookupFunction<_c_toupper, _dart_toupper>('toupper'))(
      _C,
    );
  }

  _dart_toupper? _toupper_1;

  int tolower(
    int _C,
  ) {
    return (_tolower_1 ??=
        _dylib.lookupFunction<_c_tolower, _dart_tolower>('tolower'))(
      _C,
    );
  }

  _dart_tolower? _tolower_1;

  int _tolower(
    int _C,
  ) {
    return (__tolower ??=
        _dylib.lookupFunction<_c__tolower, _dart__tolower>('_tolower'))(
      _C,
    );
  }

  _dart__tolower? __tolower;

  int _tolower_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__tolower_l ??=
        _dylib.lookupFunction<_c__tolower_l, _dart__tolower_l>('_tolower_l'))(
      _C,
      _Locale,
    );
  }

  _dart__tolower_l? __tolower_l;

  int _toupper(
    int _C,
  ) {
    return (__toupper ??=
        _dylib.lookupFunction<_c__toupper, _dart__toupper>('_toupper'))(
      _C,
    );
  }

  _dart__toupper? __toupper;

  int _toupper_l(
    int _C,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__toupper_l ??=
        _dylib.lookupFunction<_c__toupper_l, _dart__toupper_l>('_toupper_l'))(
      _C,
      _Locale,
    );
  }

  _dart__toupper_l? __toupper_l;

  int __isascii(
    int _C,
  ) {
    return (___isascii ??=
        _dylib.lookupFunction<_c___isascii, _dart___isascii>('__isascii'))(
      _C,
    );
  }

  _dart___isascii? ___isascii;

  int __toascii(
    int _C,
  ) {
    return (___toascii ??=
        _dylib.lookupFunction<_c___toascii, _dart___toascii>('__toascii'))(
      _C,
    );
  }

  _dart___toascii? ___toascii;

  int __iscsymf(
    int _C,
  ) {
    return (___iscsymf ??=
        _dylib.lookupFunction<_c___iscsymf, _dart___iscsymf>('__iscsymf'))(
      _C,
    );
  }

  _dart___iscsymf? ___iscsymf;

  int __iscsym(
    int _C,
  ) {
    return (___iscsym ??=
        _dylib.lookupFunction<_c___iscsym, _dart___iscsym>('__iscsym'))(
      _C,
    );
  }

  _dart___iscsym? ___iscsym;

  int __acrt_locale_get_ctype_array_value(
    ffi.Pointer<ffi.Uint16> _Locale_pctype_array,
    int _Char_value,
    int _Mask,
  ) {
    return (___acrt_locale_get_ctype_array_value ??= _dylib.lookupFunction<
            _c___acrt_locale_get_ctype_array_value,
            _dart___acrt_locale_get_ctype_array_value>(
        '__acrt_locale_get_ctype_array_value'))(
      _Locale_pctype_array,
      _Char_value,
      _Mask,
    );
  }

  _dart___acrt_locale_get_ctype_array_value?
      ___acrt_locale_get_ctype_array_value;

  int ___mb_cur_max_func() {
    return (____mb_cur_max_func ??=
        _dylib.lookupFunction<_c____mb_cur_max_func, _dart____mb_cur_max_func>(
            '___mb_cur_max_func'))();
  }

  _dart____mb_cur_max_func? ____mb_cur_max_func;

  int ___mb_cur_max_l_func(
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (____mb_cur_max_l_func ??= _dylib.lookupFunction<
        _c____mb_cur_max_l_func,
        _dart____mb_cur_max_l_func>('___mb_cur_max_l_func'))(
      _Locale,
    );
  }

  _dart____mb_cur_max_l_func? ____mb_cur_max_l_func;

  int __ascii_tolower(
    int _C,
  ) {
    return (___ascii_tolower ??=
        _dylib.lookupFunction<_c___ascii_tolower, _dart___ascii_tolower>(
            '__ascii_tolower'))(
      _C,
    );
  }

  _dart___ascii_tolower? ___ascii_tolower;

  int __ascii_toupper(
    int _C,
  ) {
    return (___ascii_toupper ??=
        _dylib.lookupFunction<_c___ascii_toupper, _dart___ascii_toupper>(
            '__ascii_toupper'))(
      _C,
    );
  }

  _dart___ascii_toupper? ___ascii_toupper;

  int __ascii_iswalpha(
    int _C,
  ) {
    return (___ascii_iswalpha ??=
        _dylib.lookupFunction<_c___ascii_iswalpha, _dart___ascii_iswalpha>(
            '__ascii_iswalpha'))(
      _C,
    );
  }

  _dart___ascii_iswalpha? ___ascii_iswalpha;

  int __ascii_iswdigit(
    int _C,
  ) {
    return (___ascii_iswdigit ??=
        _dylib.lookupFunction<_c___ascii_iswdigit, _dart___ascii_iswdigit>(
            '__ascii_iswdigit'))(
      _C,
    );
  }

  _dart___ascii_iswdigit? ___ascii_iswdigit;

  int __ascii_towlower(
    int _C,
  ) {
    return (___ascii_towlower ??=
        _dylib.lookupFunction<_c___ascii_towlower, _dart___ascii_towlower>(
            '__ascii_towlower'))(
      _C,
    );
  }

  _dart___ascii_towlower? ___ascii_towlower;

  int __ascii_towupper(
    int _C,
  ) {
    return (___ascii_towupper ??=
        _dylib.lookupFunction<_c___ascii_towupper, _dart___ascii_towupper>(
            '__ascii_towupper'))(
      _C,
    );
  }

  _dart___ascii_towupper? ___ascii_towupper;

  ffi.Pointer<__crt_locale_data_public> __acrt_get_locale_data_prefix(
    ffi.Pointer<ffi.Void> _LocalePointers,
  ) {
    return (___acrt_get_locale_data_prefix ??= _dylib.lookupFunction<
        _c___acrt_get_locale_data_prefix,
        _dart___acrt_get_locale_data_prefix>('__acrt_get_locale_data_prefix'))(
      _LocalePointers,
    );
  }

  _dart___acrt_get_locale_data_prefix? ___acrt_get_locale_data_prefix;

  int _chvalidchk_l(
    int _C,
    int _Mask,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__chvalidchk_l ??=
        _dylib.lookupFunction<_c__chvalidchk_l, _dart__chvalidchk_l>(
            '_chvalidchk_l'))(
      _C,
      _Mask,
      _Locale,
    );
  }

  _dart__chvalidchk_l? __chvalidchk_l;

  int _ischartype_l(
    int _C,
    int _Mask,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__ischartype_l ??=
        _dylib.lookupFunction<_c__ischartype_l, _dart__ischartype_l>(
            '_ischartype_l'))(
      _C,
      _Mask,
      _Locale,
    );
  }

  _dart__ischartype_l? __ischartype_l;

  int HandleToULong(
    ffi.Pointer<ffi.Void> h,
  ) {
    return (_HandleToULong ??=
        _dylib.lookupFunction<_c_HandleToULong, _dart_HandleToULong>(
            'HandleToULong'))(
      h,
    );
  }

  _dart_HandleToULong? _HandleToULong;

  int HandleToLong(
    ffi.Pointer<ffi.Void> h,
  ) {
    return (_HandleToLong ??= _dylib
        .lookupFunction<_c_HandleToLong, _dart_HandleToLong>('HandleToLong'))(
      h,
    );
  }

  _dart_HandleToLong? _HandleToLong;

  ffi.Pointer<ffi.Void> ULongToHandle(
    int h,
  ) {
    return (_ULongToHandle ??=
        _dylib.lookupFunction<_c_ULongToHandle, _dart_ULongToHandle>(
            'ULongToHandle'))(
      h,
    );
  }

  _dart_ULongToHandle? _ULongToHandle;

  ffi.Pointer<ffi.Void> LongToHandle(
    int h,
  ) {
    return (_LongToHandle ??= _dylib
        .lookupFunction<_c_LongToHandle, _dart_LongToHandle>('LongToHandle'))(
      h,
    );
  }

  _dart_LongToHandle? _LongToHandle;

  int PtrToUlong(
    ffi.Pointer<ffi.Void> p,
  ) {
    return (_PtrToUlong ??=
        _dylib.lookupFunction<_c_PtrToUlong, _dart_PtrToUlong>('PtrToUlong'))(
      p,
    );
  }

  _dart_PtrToUlong? _PtrToUlong;

  int PtrToUint(
    ffi.Pointer<ffi.Void> p,
  ) {
    return (_PtrToUint ??=
        _dylib.lookupFunction<_c_PtrToUint, _dart_PtrToUint>('PtrToUint'))(
      p,
    );
  }

  _dart_PtrToUint? _PtrToUint;

  int PtrToUshort(
    ffi.Pointer<ffi.Void> p,
  ) {
    return (_PtrToUshort ??= _dylib
        .lookupFunction<_c_PtrToUshort, _dart_PtrToUshort>('PtrToUshort'))(
      p,
    );
  }

  _dart_PtrToUshort? _PtrToUshort;

  int PtrToLong(
    ffi.Pointer<ffi.Void> p,
  ) {
    return (_PtrToLong ??=
        _dylib.lookupFunction<_c_PtrToLong, _dart_PtrToLong>('PtrToLong'))(
      p,
    );
  }

  _dart_PtrToLong? _PtrToLong;

  int PtrToInt(
    ffi.Pointer<ffi.Void> p,
  ) {
    return (_PtrToInt ??=
        _dylib.lookupFunction<_c_PtrToInt, _dart_PtrToInt>('PtrToInt'))(
      p,
    );
  }

  _dart_PtrToInt? _PtrToInt;

  int PtrToShort(
    ffi.Pointer<ffi.Void> p,
  ) {
    return (_PtrToShort ??=
        _dylib.lookupFunction<_c_PtrToShort, _dart_PtrToShort>('PtrToShort'))(
      p,
    );
  }

  _dart_PtrToShort? _PtrToShort;

  ffi.Pointer<ffi.Void> IntToPtr(
    int i,
  ) {
    return (_IntToPtr ??=
        _dylib.lookupFunction<_c_IntToPtr, _dart_IntToPtr>('IntToPtr'))(
      i,
    );
  }

  _dart_IntToPtr? _IntToPtr;

  ffi.Pointer<ffi.Void> UIntToPtr(
    int ui,
  ) {
    return (_UIntToPtr ??=
        _dylib.lookupFunction<_c_UIntToPtr, _dart_UIntToPtr>('UIntToPtr'))(
      ui,
    );
  }

  _dart_UIntToPtr? _UIntToPtr;

  ffi.Pointer<ffi.Void> LongToPtr(
    int l,
  ) {
    return (_LongToPtr ??=
        _dylib.lookupFunction<_c_LongToPtr, _dart_LongToPtr>('LongToPtr'))(
      l,
    );
  }

  _dart_LongToPtr? _LongToPtr;

  ffi.Pointer<ffi.Void> ULongToPtr(
    int ul,
  ) {
    return (_ULongToPtr ??=
        _dylib.lookupFunction<_c_ULongToPtr, _dart_ULongToPtr>('ULongToPtr'))(
      ul,
    );
  }

  _dart_ULongToPtr? _ULongToPtr;

  ffi.Pointer<ffi.Void> Ptr32ToPtr(
    ffi.Pointer<ffi.Void> p,
  ) {
    return (_Ptr32ToPtr ??=
        _dylib.lookupFunction<_c_Ptr32ToPtr, _dart_Ptr32ToPtr>('Ptr32ToPtr'))(
      p,
    );
  }

  _dart_Ptr32ToPtr? _Ptr32ToPtr;

  ffi.Pointer<ffi.Void> Handle32ToHandle(
    ffi.Pointer<ffi.Void> h,
  ) {
    return (_Handle32ToHandle ??=
        _dylib.lookupFunction<_c_Handle32ToHandle, _dart_Handle32ToHandle>(
            'Handle32ToHandle'))(
      h,
    );
  }

  _dart_Handle32ToHandle? _Handle32ToHandle;

  ffi.Pointer<ffi.Void> PtrToPtr32(
    ffi.Pointer<ffi.Void> p,
  ) {
    return (_PtrToPtr32 ??=
        _dylib.lookupFunction<_c_PtrToPtr32, _dart_PtrToPtr32>('PtrToPtr32'))(
      p,
    );
  }

  _dart_PtrToPtr32? _PtrToPtr32;

  int _rotl8(
    int Value,
    int Shift,
  ) {
    return (__rotl8 ??=
        _dylib.lookupFunction<_c__rotl8, _dart__rotl8>('_rotl8'))(
      Value,
      Shift,
    );
  }

  _dart__rotl8? __rotl8;

  int _rotl16(
    int Value,
    int Shift,
  ) {
    return (__rotl16 ??=
        _dylib.lookupFunction<_c__rotl16, _dart__rotl16>('_rotl16'))(
      Value,
      Shift,
    );
  }

  _dart__rotl16? __rotl16;

  int _rotr8(
    int Value,
    int Shift,
  ) {
    return (__rotr8 ??=
        _dylib.lookupFunction<_c__rotr8, _dart__rotr8>('_rotr8'))(
      Value,
      Shift,
    );
  }

  _dart__rotr8? __rotr8;

  int _rotr16(
    int Value,
    int Shift,
  ) {
    return (__rotr16 ??=
        _dylib.lookupFunction<_c__rotr16, _dart__rotr16>('_rotr16'))(
      Value,
      Shift,
    );
  }

  _dart__rotr16? __rotr16;

  int _rotl(
    int Value,
    int Shift,
  ) {
    return (__rotl ??= _dylib.lookupFunction<_c__rotl, _dart__rotl>('_rotl'))(
      Value,
      Shift,
    );
  }

  _dart__rotl? __rotl;

  int _rotl64(
    int Value,
    int Shift,
  ) {
    return (__rotl64 ??=
        _dylib.lookupFunction<_c__rotl64, _dart__rotl64>('_rotl64'))(
      Value,
      Shift,
    );
  }

  _dart__rotl64? __rotl64;

  int _rotr(
    int Value,
    int Shift,
  ) {
    return (__rotr ??= _dylib.lookupFunction<_c__rotr, _dart__rotr>('_rotr'))(
      Value,
      Shift,
    );
  }

  _dart__rotr? __rotr;

  int _rotr64(
    int Value,
    int Shift,
  ) {
    return (__rotr64 ??=
        _dylib.lookupFunction<_c__rotr64, _dart__rotr64>('_rotr64'))(
      Value,
      Shift,
    );
  }

  _dart__rotr64? __rotr64;

  ffi.Pointer<ffi.Int32> _errno() {
    return (__errno ??=
        _dylib.lookupFunction<_c__errno, _dart__errno>('_errno'))();
  }

  _dart__errno? __errno;

  int _set_errno(
    int _Value,
  ) {
    return (__set_errno ??=
        _dylib.lookupFunction<_c__set_errno, _dart__set_errno>('_set_errno'))(
      _Value,
    );
  }

  _dart__set_errno? __set_errno;

  int _get_errno(
    ffi.Pointer<ffi.Int32> _Value,
  ) {
    return (__get_errno ??=
        _dylib.lookupFunction<_c__get_errno, _dart__get_errno>('_get_errno'))(
      _Value,
    );
  }

  _dart__get_errno? __get_errno;

  ffi.Pointer<ffi.Uint64> __doserrno() {
    return (___doserrno ??=
        _dylib.lookupFunction<_c___doserrno, _dart___doserrno>('__doserrno'))();
  }

  _dart___doserrno? ___doserrno;

  int _set_doserrno(
    int _Value,
  ) {
    return (__set_doserrno ??=
        _dylib.lookupFunction<_c__set_doserrno, _dart__set_doserrno>(
            '_set_doserrno'))(
      _Value,
    );
  }

  _dart__set_doserrno? __set_doserrno;

  int _get_doserrno(
    ffi.Pointer<ffi.Uint64> _Value,
  ) {
    return (__get_doserrno ??=
        _dylib.lookupFunction<_c__get_doserrno, _dart__get_doserrno>(
            '_get_doserrno'))(
      _Value,
    );
  }

  _dart__get_doserrno? __get_doserrno;

  ffi.Pointer<ffi.Void> memchr(
    ffi.Pointer<ffi.Void> _Buf,
    int _Val,
    int _MaxCount,
  ) {
    return (_memchr ??=
        _dylib.lookupFunction<_c_memchr, _dart_memchr>('memchr'))(
      _Buf,
      _Val,
      _MaxCount,
    );
  }

  _dart_memchr? _memchr;

  int memcmp(
    ffi.Pointer<ffi.Void> _Buf1,
    ffi.Pointer<ffi.Void> _Buf2,
    int _Size,
  ) {
    return (_memcmp ??=
        _dylib.lookupFunction<_c_memcmp, _dart_memcmp>('memcmp'))(
      _Buf1,
      _Buf2,
      _Size,
    );
  }

  _dart_memcmp? _memcmp;

  ffi.Pointer<ffi.Void> memcpy(
    ffi.Pointer<ffi.Void> _Dst,
    ffi.Pointer<ffi.Void> _Src,
    int _Size,
  ) {
    return (_memcpy ??=
        _dylib.lookupFunction<_c_memcpy, _dart_memcpy>('memcpy'))(
      _Dst,
      _Src,
      _Size,
    );
  }

  _dart_memcpy? _memcpy;

  ffi.Pointer<ffi.Void> memmove(
    ffi.Pointer<ffi.Void> _Dst,
    ffi.Pointer<ffi.Void> _Src,
    int _Size,
  ) {
    return (_memmove ??=
        _dylib.lookupFunction<_c_memmove, _dart_memmove>('memmove'))(
      _Dst,
      _Src,
      _Size,
    );
  }

  _dart_memmove? _memmove;

  ffi.Pointer<ffi.Void> memset(
    ffi.Pointer<ffi.Void> _Dst,
    int _Val,
    int _Size,
  ) {
    return (_memset ??=
        _dylib.lookupFunction<_c_memset, _dart_memset>('memset'))(
      _Dst,
      _Val,
      _Size,
    );
  }

  _dart_memset? _memset;

  ffi.Pointer<ffi.Int8> strchr(
    ffi.Pointer<ffi.Int8> _Str,
    int _Val,
  ) {
    return (_strchr ??=
        _dylib.lookupFunction<_c_strchr, _dart_strchr>('strchr'))(
      _Str,
      _Val,
    );
  }

  _dart_strchr? _strchr;

  ffi.Pointer<ffi.Int8> strrchr(
    ffi.Pointer<ffi.Int8> _Str,
    int _Ch,
  ) {
    return (_strrchr ??=
        _dylib.lookupFunction<_c_strrchr, _dart_strrchr>('strrchr'))(
      _Str,
      _Ch,
    );
  }

  _dart_strrchr? _strrchr;

  ffi.Pointer<ffi.Int8> strstr(
    ffi.Pointer<ffi.Int8> _Str,
    ffi.Pointer<ffi.Int8> _SubStr,
  ) {
    return (_strstr ??=
        _dylib.lookupFunction<_c_strstr, _dart_strstr>('strstr'))(
      _Str,
      _SubStr,
    );
  }

  _dart_strstr? _strstr;

  ffi.Pointer<ffi.Uint16> wcschr(
    ffi.Pointer<ffi.Uint16> _Str,
    int _Ch,
  ) {
    return (_wcschr ??=
        _dylib.lookupFunction<_c_wcschr, _dart_wcschr>('wcschr'))(
      _Str,
      _Ch,
    );
  }

  _dart_wcschr? _wcschr;

  ffi.Pointer<ffi.Uint16> wcsrchr(
    ffi.Pointer<ffi.Uint16> _Str,
    int _Ch,
  ) {
    return (_wcsrchr ??=
        _dylib.lookupFunction<_c_wcsrchr, _dart_wcsrchr>('wcsrchr'))(
      _Str,
      _Ch,
    );
  }

  _dart_wcsrchr? _wcsrchr;

  ffi.Pointer<ffi.Uint16> wcsstr(
    ffi.Pointer<ffi.Uint16> _Str,
    ffi.Pointer<ffi.Uint16> _SubStr,
  ) {
    return (_wcsstr ??=
        _dylib.lookupFunction<_c_wcsstr, _dart_wcsstr>('wcsstr'))(
      _Str,
      _SubStr,
    );
  }

  _dart_wcsstr? _wcsstr;

  int memcpy_s(
    ffi.Pointer<ffi.Void> _Destination,
    int _DestinationSize,
    ffi.Pointer<ffi.Void> _Source,
    int _SourceSize,
  ) {
    return (_memcpy_s ??=
        _dylib.lookupFunction<_c_memcpy_s, _dart_memcpy_s>('memcpy_s'))(
      _Destination,
      _DestinationSize,
      _Source,
      _SourceSize,
    );
  }

  _dart_memcpy_s? _memcpy_s;

  int memmove_s(
    ffi.Pointer<ffi.Void> _Destination,
    int _DestinationSize,
    ffi.Pointer<ffi.Void> _Source,
    int _SourceSize,
  ) {
    return (_memmove_s ??=
        _dylib.lookupFunction<_c_memmove_s, _dart_memmove_s>('memmove_s'))(
      _Destination,
      _DestinationSize,
      _Source,
      _SourceSize,
    );
  }

  _dart_memmove_s? _memmove_s;

  int _memicmp(
    ffi.Pointer<ffi.Void> _Buf1,
    ffi.Pointer<ffi.Void> _Buf2,
    int _Size,
  ) {
    return (__memicmp ??=
        _dylib.lookupFunction<_c__memicmp, _dart__memicmp>('_memicmp'))(
      _Buf1,
      _Buf2,
      _Size,
    );
  }

  _dart__memicmp? __memicmp;

  int _memicmp_l(
    ffi.Pointer<ffi.Void> _Buf1,
    ffi.Pointer<ffi.Void> _Buf2,
    int _Size,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__memicmp_l ??=
        _dylib.lookupFunction<_c__memicmp_l, _dart__memicmp_l>('_memicmp_l'))(
      _Buf1,
      _Buf2,
      _Size,
      _Locale,
    );
  }

  _dart__memicmp_l? __memicmp_l;

  ffi.Pointer<ffi.Void> memccpy(
    ffi.Pointer<ffi.Void> _Dst,
    ffi.Pointer<ffi.Void> _Src,
    int _Val,
    int _Size,
  ) {
    return (_memccpy_1 ??=
        _dylib.lookupFunction<_c_memccpy, _dart_memccpy>('memccpy'))(
      _Dst,
      _Src,
      _Val,
      _Size,
    );
  }

  _dart_memccpy? _memccpy_1;

  int memicmp(
    ffi.Pointer<ffi.Void> _Buf1,
    ffi.Pointer<ffi.Void> _Buf2,
    int _Size,
  ) {
    return (_memicmp_1 ??=
        _dylib.lookupFunction<_c_memicmp, _dart_memicmp>('memicmp'))(
      _Buf1,
      _Buf2,
      _Size,
    );
  }

  _dart_memicmp? _memicmp_1;

  int wcscat_s(
    ffi.Pointer<ffi.Uint16> _Destination,
    int _SizeInWords,
    ffi.Pointer<ffi.Uint16> _Source,
  ) {
    return (_wcscat_s ??=
        _dylib.lookupFunction<_c_wcscat_s, _dart_wcscat_s>('wcscat_s'))(
      _Destination,
      _SizeInWords,
      _Source,
    );
  }

  _dart_wcscat_s? _wcscat_s;

  int wcscpy_s(
    ffi.Pointer<ffi.Uint16> _Destination,
    int _SizeInWords,
    ffi.Pointer<ffi.Uint16> _Source,
  ) {
    return (_wcscpy_s ??=
        _dylib.lookupFunction<_c_wcscpy_s, _dart_wcscpy_s>('wcscpy_s'))(
      _Destination,
      _SizeInWords,
      _Source,
    );
  }

  _dart_wcscpy_s? _wcscpy_s;

  int wcsncat_s(
    ffi.Pointer<ffi.Uint16> _Destination,
    int _SizeInWords,
    ffi.Pointer<ffi.Uint16> _Source,
    int _MaxCount,
  ) {
    return (_wcsncat_s ??=
        _dylib.lookupFunction<_c_wcsncat_s, _dart_wcsncat_s>('wcsncat_s'))(
      _Destination,
      _SizeInWords,
      _Source,
      _MaxCount,
    );
  }

  _dart_wcsncat_s? _wcsncat_s;

  int wcsncpy_s(
    ffi.Pointer<ffi.Uint16> _Destination,
    int _SizeInWords,
    ffi.Pointer<ffi.Uint16> _Source,
    int _MaxCount,
  ) {
    return (_wcsncpy_s ??=
        _dylib.lookupFunction<_c_wcsncpy_s, _dart_wcsncpy_s>('wcsncpy_s'))(
      _Destination,
      _SizeInWords,
      _Source,
      _MaxCount,
    );
  }

  _dart_wcsncpy_s? _wcsncpy_s;

  ffi.Pointer<ffi.Uint16> wcstok_s(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Uint16> _Delimiter,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Context,
  ) {
    return (_wcstok_s ??=
        _dylib.lookupFunction<_c_wcstok_s, _dart_wcstok_s>('wcstok_s'))(
      _String,
      _Delimiter,
      _Context,
    );
  }

  _dart_wcstok_s? _wcstok_s;

  ffi.Pointer<ffi.Uint16> _wcsdup(
    ffi.Pointer<ffi.Uint16> _String,
  ) {
    return (__wcsdup ??=
        _dylib.lookupFunction<_c__wcsdup, _dart__wcsdup>('_wcsdup'))(
      _String,
    );
  }

  _dart__wcsdup? __wcsdup;

  ffi.Pointer<ffi.Uint16> wcscat(
    ffi.Pointer<ffi.Uint16> _Destination,
    ffi.Pointer<ffi.Uint16> _Source,
  ) {
    return (_wcscat ??=
        _dylib.lookupFunction<_c_wcscat, _dart_wcscat>('wcscat'))(
      _Destination,
      _Source,
    );
  }

  _dart_wcscat? _wcscat;

  int wcscmp(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
  ) {
    return (_wcscmp ??=
        _dylib.lookupFunction<_c_wcscmp, _dart_wcscmp>('wcscmp'))(
      _String1,
      _String2,
    );
  }

  _dart_wcscmp? _wcscmp;

  ffi.Pointer<ffi.Uint16> wcscpy(
    ffi.Pointer<ffi.Uint16> _Destination,
    ffi.Pointer<ffi.Uint16> _Source,
  ) {
    return (_wcscpy ??=
        _dylib.lookupFunction<_c_wcscpy, _dart_wcscpy>('wcscpy'))(
      _Destination,
      _Source,
    );
  }

  _dart_wcscpy? _wcscpy;

  int wcscspn(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Uint16> _Control,
  ) {
    return (_wcscspn ??=
        _dylib.lookupFunction<_c_wcscspn, _dart_wcscspn>('wcscspn'))(
      _String,
      _Control,
    );
  }

  _dart_wcscspn? _wcscspn;

  int wcslen(
    ffi.Pointer<ffi.Uint16> _String,
  ) {
    return (_wcslen ??=
        _dylib.lookupFunction<_c_wcslen, _dart_wcslen>('wcslen'))(
      _String,
    );
  }

  _dart_wcslen? _wcslen;

  int wcsnlen(
    ffi.Pointer<ffi.Uint16> _Source,
    int _MaxCount,
  ) {
    return (_wcsnlen ??=
        _dylib.lookupFunction<_c_wcsnlen, _dart_wcsnlen>('wcsnlen'))(
      _Source,
      _MaxCount,
    );
  }

  _dart_wcsnlen? _wcsnlen;

  int wcsnlen_s(
    ffi.Pointer<ffi.Uint16> _Source,
    int _MaxCount,
  ) {
    return (_wcsnlen_s ??=
        _dylib.lookupFunction<_c_wcsnlen_s, _dart_wcsnlen_s>('wcsnlen_s'))(
      _Source,
      _MaxCount,
    );
  }

  _dart_wcsnlen_s? _wcsnlen_s;

  ffi.Pointer<ffi.Uint16> wcsncat(
    ffi.Pointer<ffi.Uint16> _Destination,
    ffi.Pointer<ffi.Uint16> _Source,
    int _Count,
  ) {
    return (_wcsncat ??=
        _dylib.lookupFunction<_c_wcsncat, _dart_wcsncat>('wcsncat'))(
      _Destination,
      _Source,
      _Count,
    );
  }

  _dart_wcsncat? _wcsncat;

  int wcsncmp(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
    int _MaxCount,
  ) {
    return (_wcsncmp ??=
        _dylib.lookupFunction<_c_wcsncmp, _dart_wcsncmp>('wcsncmp'))(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  _dart_wcsncmp? _wcsncmp;

  ffi.Pointer<ffi.Uint16> wcsncpy(
    ffi.Pointer<ffi.Uint16> _Destination,
    ffi.Pointer<ffi.Uint16> _Source,
    int _Count,
  ) {
    return (_wcsncpy ??=
        _dylib.lookupFunction<_c_wcsncpy, _dart_wcsncpy>('wcsncpy'))(
      _Destination,
      _Source,
      _Count,
    );
  }

  _dart_wcsncpy? _wcsncpy;

  ffi.Pointer<ffi.Uint16> wcspbrk(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Uint16> _Control,
  ) {
    return (_wcspbrk ??=
        _dylib.lookupFunction<_c_wcspbrk, _dart_wcspbrk>('wcspbrk'))(
      _String,
      _Control,
    );
  }

  _dart_wcspbrk? _wcspbrk;

  int wcsspn(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Uint16> _Control,
  ) {
    return (_wcsspn ??=
        _dylib.lookupFunction<_c_wcsspn, _dart_wcsspn>('wcsspn'))(
      _String,
      _Control,
    );
  }

  _dart_wcsspn? _wcsspn;

  ffi.Pointer<ffi.Uint16> wcstok(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Uint16> _Delimiter,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Context,
  ) {
    return (_wcstok_1 ??=
        _dylib.lookupFunction<_c_wcstok, _dart_wcstok>('wcstok'))(
      _String,
      _Delimiter,
      _Context,
    );
  }

  _dart_wcstok? _wcstok_1;

  ffi.Pointer<ffi.Uint16> _wcstok(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Uint16> _Delimiter,
  ) {
    return (__wcstok ??=
        _dylib.lookupFunction<_c__wcstok, _dart__wcstok>('_wcstok'))(
      _String,
      _Delimiter,
    );
  }

  _dart__wcstok? __wcstok;

  ffi.Pointer<ffi.Uint16> _wcserror(
    int _ErrorNumber,
  ) {
    return (__wcserror_1 ??=
        _dylib.lookupFunction<_c__wcserror, _dart__wcserror>('_wcserror'))(
      _ErrorNumber,
    );
  }

  _dart__wcserror? __wcserror_1;

  int _wcserror_s(
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _SizeInWords,
    int _ErrorNumber,
  ) {
    return (__wcserror_s_1 ??= _dylib
        .lookupFunction<_c__wcserror_s, _dart__wcserror_s>('_wcserror_s'))(
      _Buffer,
      _SizeInWords,
      _ErrorNumber,
    );
  }

  _dart__wcserror_s? __wcserror_s_1;

  ffi.Pointer<ffi.Uint16> __wcserror(
    ffi.Pointer<ffi.Uint16> _String,
  ) {
    return (___wcserror ??=
        _dylib.lookupFunction<_c___wcserror, _dart___wcserror>('__wcserror'))(
      _String,
    );
  }

  _dart___wcserror? ___wcserror;

  int __wcserror_s(
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _SizeInWords,
    ffi.Pointer<ffi.Uint16> _ErrorMessage,
  ) {
    return (___wcserror_s ??= _dylib
        .lookupFunction<_c___wcserror_s, _dart___wcserror_s>('__wcserror_s'))(
      _Buffer,
      _SizeInWords,
      _ErrorMessage,
    );
  }

  _dart___wcserror_s? ___wcserror_s;

  int _wcsicmp(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
  ) {
    return (__wcsicmp ??=
        _dylib.lookupFunction<_c__wcsicmp, _dart__wcsicmp>('_wcsicmp'))(
      _String1,
      _String2,
    );
  }

  _dart__wcsicmp? __wcsicmp;

  int _wcsicmp_l(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__wcsicmp_l ??=
        _dylib.lookupFunction<_c__wcsicmp_l, _dart__wcsicmp_l>('_wcsicmp_l'))(
      _String1,
      _String2,
      _Locale,
    );
  }

  _dart__wcsicmp_l? __wcsicmp_l;

  int _wcsnicmp(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
    int _MaxCount,
  ) {
    return (__wcsnicmp ??=
        _dylib.lookupFunction<_c__wcsnicmp, _dart__wcsnicmp>('_wcsnicmp'))(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  _dart__wcsnicmp? __wcsnicmp;

  int _wcsnicmp_l(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
    int _MaxCount,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__wcsnicmp_l ??= _dylib
        .lookupFunction<_c__wcsnicmp_l, _dart__wcsnicmp_l>('_wcsnicmp_l'))(
      _String1,
      _String2,
      _MaxCount,
      _Locale,
    );
  }

  _dart__wcsnicmp_l? __wcsnicmp_l;

  int _wcsnset_s(
    ffi.Pointer<ffi.Uint16> _Destination,
    int _SizeInWords,
    int _Value,
    int _MaxCount,
  ) {
    return (__wcsnset_s ??=
        _dylib.lookupFunction<_c__wcsnset_s, _dart__wcsnset_s>('_wcsnset_s'))(
      _Destination,
      _SizeInWords,
      _Value,
      _MaxCount,
    );
  }

  _dart__wcsnset_s? __wcsnset_s;

  ffi.Pointer<ffi.Uint16> _wcsnset(
    ffi.Pointer<ffi.Uint16> _String,
    int _Value,
    int _MaxCount,
  ) {
    return (__wcsnset ??=
        _dylib.lookupFunction<_c__wcsnset, _dart__wcsnset>('_wcsnset'))(
      _String,
      _Value,
      _MaxCount,
    );
  }

  _dart__wcsnset? __wcsnset;

  ffi.Pointer<ffi.Uint16> _wcsrev(
    ffi.Pointer<ffi.Uint16> _String,
  ) {
    return (__wcsrev ??=
        _dylib.lookupFunction<_c__wcsrev, _dart__wcsrev>('_wcsrev'))(
      _String,
    );
  }

  _dart__wcsrev? __wcsrev;

  int _wcsset_s(
    ffi.Pointer<ffi.Uint16> _Destination,
    int _SizeInWords,
    int _Value,
  ) {
    return (__wcsset_s ??=
        _dylib.lookupFunction<_c__wcsset_s, _dart__wcsset_s>('_wcsset_s'))(
      _Destination,
      _SizeInWords,
      _Value,
    );
  }

  _dart__wcsset_s? __wcsset_s;

  ffi.Pointer<ffi.Uint16> _wcsset(
    ffi.Pointer<ffi.Uint16> _String,
    int _Value,
  ) {
    return (__wcsset ??=
        _dylib.lookupFunction<_c__wcsset, _dart__wcsset>('_wcsset'))(
      _String,
      _Value,
    );
  }

  _dart__wcsset? __wcsset;

  int _wcslwr_s(
    ffi.Pointer<ffi.Uint16> _String,
    int _SizeInWords,
  ) {
    return (__wcslwr_s ??=
        _dylib.lookupFunction<_c__wcslwr_s, _dart__wcslwr_s>('_wcslwr_s'))(
      _String,
      _SizeInWords,
    );
  }

  _dart__wcslwr_s? __wcslwr_s;

  ffi.Pointer<ffi.Uint16> _wcslwr(
    ffi.Pointer<ffi.Uint16> _String,
  ) {
    return (__wcslwr ??=
        _dylib.lookupFunction<_c__wcslwr, _dart__wcslwr>('_wcslwr'))(
      _String,
    );
  }

  _dart__wcslwr? __wcslwr;

  int _wcslwr_s_l(
    ffi.Pointer<ffi.Uint16> _String,
    int _SizeInWords,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__wcslwr_s_l ??= _dylib
        .lookupFunction<_c__wcslwr_s_l, _dart__wcslwr_s_l>('_wcslwr_s_l'))(
      _String,
      _SizeInWords,
      _Locale,
    );
  }

  _dart__wcslwr_s_l? __wcslwr_s_l;

  ffi.Pointer<ffi.Uint16> _wcslwr_l(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__wcslwr_l ??=
        _dylib.lookupFunction<_c__wcslwr_l, _dart__wcslwr_l>('_wcslwr_l'))(
      _String,
      _Locale,
    );
  }

  _dart__wcslwr_l? __wcslwr_l;

  int _wcsupr_s(
    ffi.Pointer<ffi.Uint16> _String,
    int _Size,
  ) {
    return (__wcsupr_s ??=
        _dylib.lookupFunction<_c__wcsupr_s, _dart__wcsupr_s>('_wcsupr_s'))(
      _String,
      _Size,
    );
  }

  _dart__wcsupr_s? __wcsupr_s;

  ffi.Pointer<ffi.Uint16> _wcsupr(
    ffi.Pointer<ffi.Uint16> _String,
  ) {
    return (__wcsupr ??=
        _dylib.lookupFunction<_c__wcsupr, _dart__wcsupr>('_wcsupr'))(
      _String,
    );
  }

  _dart__wcsupr? __wcsupr;

  int _wcsupr_s_l(
    ffi.Pointer<ffi.Uint16> _String,
    int _Size,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__wcsupr_s_l ??= _dylib
        .lookupFunction<_c__wcsupr_s_l, _dart__wcsupr_s_l>('_wcsupr_s_l'))(
      _String,
      _Size,
      _Locale,
    );
  }

  _dart__wcsupr_s_l? __wcsupr_s_l;

  ffi.Pointer<ffi.Uint16> _wcsupr_l(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__wcsupr_l ??=
        _dylib.lookupFunction<_c__wcsupr_l, _dart__wcsupr_l>('_wcsupr_l'))(
      _String,
      _Locale,
    );
  }

  _dart__wcsupr_l? __wcsupr_l;

  int wcsxfrm(
    ffi.Pointer<ffi.Uint16> _Destination,
    ffi.Pointer<ffi.Uint16> _Source,
    int _MaxCount,
  ) {
    return (_wcsxfrm ??=
        _dylib.lookupFunction<_c_wcsxfrm, _dart_wcsxfrm>('wcsxfrm'))(
      _Destination,
      _Source,
      _MaxCount,
    );
  }

  _dart_wcsxfrm? _wcsxfrm;

  int _wcsxfrm_l(
    ffi.Pointer<ffi.Uint16> _Destination,
    ffi.Pointer<ffi.Uint16> _Source,
    int _MaxCount,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__wcsxfrm_l ??=
        _dylib.lookupFunction<_c__wcsxfrm_l, _dart__wcsxfrm_l>('_wcsxfrm_l'))(
      _Destination,
      _Source,
      _MaxCount,
      _Locale,
    );
  }

  _dart__wcsxfrm_l? __wcsxfrm_l;

  int wcscoll(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
  ) {
    return (_wcscoll ??=
        _dylib.lookupFunction<_c_wcscoll, _dart_wcscoll>('wcscoll'))(
      _String1,
      _String2,
    );
  }

  _dart_wcscoll? _wcscoll;

  int _wcscoll_l(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__wcscoll_l ??=
        _dylib.lookupFunction<_c__wcscoll_l, _dart__wcscoll_l>('_wcscoll_l'))(
      _String1,
      _String2,
      _Locale,
    );
  }

  _dart__wcscoll_l? __wcscoll_l;

  int _wcsicoll(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
  ) {
    return (__wcsicoll ??=
        _dylib.lookupFunction<_c__wcsicoll, _dart__wcsicoll>('_wcsicoll'))(
      _String1,
      _String2,
    );
  }

  _dart__wcsicoll? __wcsicoll;

  int _wcsicoll_l(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__wcsicoll_l ??= _dylib
        .lookupFunction<_c__wcsicoll_l, _dart__wcsicoll_l>('_wcsicoll_l'))(
      _String1,
      _String2,
      _Locale,
    );
  }

  _dart__wcsicoll_l? __wcsicoll_l;

  int _wcsncoll(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
    int _MaxCount,
  ) {
    return (__wcsncoll ??=
        _dylib.lookupFunction<_c__wcsncoll, _dart__wcsncoll>('_wcsncoll'))(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  _dart__wcsncoll? __wcsncoll;

  int _wcsncoll_l(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
    int _MaxCount,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__wcsncoll_l ??= _dylib
        .lookupFunction<_c__wcsncoll_l, _dart__wcsncoll_l>('_wcsncoll_l'))(
      _String1,
      _String2,
      _MaxCount,
      _Locale,
    );
  }

  _dart__wcsncoll_l? __wcsncoll_l;

  int _wcsnicoll(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
    int _MaxCount,
  ) {
    return (__wcsnicoll ??=
        _dylib.lookupFunction<_c__wcsnicoll, _dart__wcsnicoll>('_wcsnicoll'))(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  _dart__wcsnicoll? __wcsnicoll;

  int _wcsnicoll_l(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
    int _MaxCount,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__wcsnicoll_l ??= _dylib
        .lookupFunction<_c__wcsnicoll_l, _dart__wcsnicoll_l>('_wcsnicoll_l'))(
      _String1,
      _String2,
      _MaxCount,
      _Locale,
    );
  }

  _dart__wcsnicoll_l? __wcsnicoll_l;

  ffi.Pointer<ffi.Uint16> wcsdup(
    ffi.Pointer<ffi.Uint16> _String,
  ) {
    return (_wcsdup_1 ??=
        _dylib.lookupFunction<_c_wcsdup, _dart_wcsdup>('wcsdup'))(
      _String,
    );
  }

  _dart_wcsdup? _wcsdup_1;

  int wcsicmp(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
  ) {
    return (_wcsicmp_1 ??=
        _dylib.lookupFunction<_c_wcsicmp, _dart_wcsicmp>('wcsicmp'))(
      _String1,
      _String2,
    );
  }

  _dart_wcsicmp? _wcsicmp_1;

  int wcsnicmp(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
    int _MaxCount,
  ) {
    return (_wcsnicmp_1 ??=
        _dylib.lookupFunction<_c_wcsnicmp, _dart_wcsnicmp>('wcsnicmp'))(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  _dart_wcsnicmp? _wcsnicmp_1;

  ffi.Pointer<ffi.Uint16> wcsnset(
    ffi.Pointer<ffi.Uint16> _String,
    int _Value,
    int _MaxCount,
  ) {
    return (_wcsnset_1 ??=
        _dylib.lookupFunction<_c_wcsnset, _dart_wcsnset>('wcsnset'))(
      _String,
      _Value,
      _MaxCount,
    );
  }

  _dart_wcsnset? _wcsnset_1;

  ffi.Pointer<ffi.Uint16> wcsrev(
    ffi.Pointer<ffi.Uint16> _String,
  ) {
    return (_wcsrev_1 ??=
        _dylib.lookupFunction<_c_wcsrev, _dart_wcsrev>('wcsrev'))(
      _String,
    );
  }

  _dart_wcsrev? _wcsrev_1;

  ffi.Pointer<ffi.Uint16> wcsset(
    ffi.Pointer<ffi.Uint16> _String,
    int _Value,
  ) {
    return (_wcsset_1 ??=
        _dylib.lookupFunction<_c_wcsset, _dart_wcsset>('wcsset'))(
      _String,
      _Value,
    );
  }

  _dart_wcsset? _wcsset_1;

  ffi.Pointer<ffi.Uint16> wcslwr(
    ffi.Pointer<ffi.Uint16> _String,
  ) {
    return (_wcslwr_1 ??=
        _dylib.lookupFunction<_c_wcslwr, _dart_wcslwr>('wcslwr'))(
      _String,
    );
  }

  _dart_wcslwr? _wcslwr_1;

  ffi.Pointer<ffi.Uint16> wcsupr(
    ffi.Pointer<ffi.Uint16> _String,
  ) {
    return (_wcsupr_1 ??=
        _dylib.lookupFunction<_c_wcsupr, _dart_wcsupr>('wcsupr'))(
      _String,
    );
  }

  _dart_wcsupr? _wcsupr_1;

  int wcsicoll(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
  ) {
    return (_wcsicoll_1 ??=
        _dylib.lookupFunction<_c_wcsicoll, _dart_wcsicoll>('wcsicoll'))(
      _String1,
      _String2,
    );
  }

  _dart_wcsicoll? _wcsicoll_1;

  int strcpy_s(
    ffi.Pointer<ffi.Int8> _Destination,
    int _SizeInBytes,
    ffi.Pointer<ffi.Int8> _Source,
  ) {
    return (_strcpy_s ??=
        _dylib.lookupFunction<_c_strcpy_s, _dart_strcpy_s>('strcpy_s'))(
      _Destination,
      _SizeInBytes,
      _Source,
    );
  }

  _dart_strcpy_s? _strcpy_s;

  int strcat_s(
    ffi.Pointer<ffi.Int8> _Destination,
    int _SizeInBytes,
    ffi.Pointer<ffi.Int8> _Source,
  ) {
    return (_strcat_s ??=
        _dylib.lookupFunction<_c_strcat_s, _dart_strcat_s>('strcat_s'))(
      _Destination,
      _SizeInBytes,
      _Source,
    );
  }

  _dart_strcat_s? _strcat_s;

  int strerror_s(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _SizeInBytes,
    int _ErrorNumber,
  ) {
    return (_strerror_s_1 ??=
        _dylib.lookupFunction<_c_strerror_s, _dart_strerror_s>('strerror_s'))(
      _Buffer,
      _SizeInBytes,
      _ErrorNumber,
    );
  }

  _dart_strerror_s? _strerror_s_1;

  int strncat_s(
    ffi.Pointer<ffi.Int8> _Destination,
    int _SizeInBytes,
    ffi.Pointer<ffi.Int8> _Source,
    int _MaxCount,
  ) {
    return (_strncat_s ??=
        _dylib.lookupFunction<_c_strncat_s, _dart_strncat_s>('strncat_s'))(
      _Destination,
      _SizeInBytes,
      _Source,
      _MaxCount,
    );
  }

  _dart_strncat_s? _strncat_s;

  int strncpy_s(
    ffi.Pointer<ffi.Int8> _Destination,
    int _SizeInBytes,
    ffi.Pointer<ffi.Int8> _Source,
    int _MaxCount,
  ) {
    return (_strncpy_s ??=
        _dylib.lookupFunction<_c_strncpy_s, _dart_strncpy_s>('strncpy_s'))(
      _Destination,
      _SizeInBytes,
      _Source,
      _MaxCount,
    );
  }

  _dart_strncpy_s? _strncpy_s;

  ffi.Pointer<ffi.Int8> strtok_s(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Int8> _Delimiter,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _Context,
  ) {
    return (_strtok_s ??=
        _dylib.lookupFunction<_c_strtok_s, _dart_strtok_s>('strtok_s'))(
      _String,
      _Delimiter,
      _Context,
    );
  }

  _dart_strtok_s? _strtok_s;

  ffi.Pointer<ffi.Void> _memccpy(
    ffi.Pointer<ffi.Void> _Dst,
    ffi.Pointer<ffi.Void> _Src,
    int _Val,
    int _MaxCount,
  ) {
    return (__memccpy ??=
        _dylib.lookupFunction<_c__memccpy, _dart__memccpy>('_memccpy'))(
      _Dst,
      _Src,
      _Val,
      _MaxCount,
    );
  }

  _dart__memccpy? __memccpy;

  ffi.Pointer<ffi.Int8> strcat(
    ffi.Pointer<ffi.Int8> _Destination,
    ffi.Pointer<ffi.Int8> _Source,
  ) {
    return (_strcat ??=
        _dylib.lookupFunction<_c_strcat, _dart_strcat>('strcat'))(
      _Destination,
      _Source,
    );
  }

  _dart_strcat? _strcat;

  int strcmp(
    ffi.Pointer<ffi.Int8> _Str1,
    ffi.Pointer<ffi.Int8> _Str2,
  ) {
    return (_strcmp ??=
        _dylib.lookupFunction<_c_strcmp, _dart_strcmp>('strcmp'))(
      _Str1,
      _Str2,
    );
  }

  _dart_strcmp? _strcmp;

  int _strcmpi(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
  ) {
    return (__strcmpi ??=
        _dylib.lookupFunction<_c__strcmpi, _dart__strcmpi>('_strcmpi'))(
      _String1,
      _String2,
    );
  }

  _dart__strcmpi? __strcmpi;

  int strcoll(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
  ) {
    return (_strcoll ??=
        _dylib.lookupFunction<_c_strcoll, _dart_strcoll>('strcoll'))(
      _String1,
      _String2,
    );
  }

  _dart_strcoll? _strcoll;

  int _strcoll_l(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__strcoll_l ??=
        _dylib.lookupFunction<_c__strcoll_l, _dart__strcoll_l>('_strcoll_l'))(
      _String1,
      _String2,
      _Locale,
    );
  }

  _dart__strcoll_l? __strcoll_l;

  ffi.Pointer<ffi.Int8> strcpy(
    ffi.Pointer<ffi.Int8> _Destination,
    ffi.Pointer<ffi.Int8> _Source,
  ) {
    return (_strcpy ??=
        _dylib.lookupFunction<_c_strcpy, _dart_strcpy>('strcpy'))(
      _Destination,
      _Source,
    );
  }

  _dart_strcpy? _strcpy;

  int strcspn(
    ffi.Pointer<ffi.Int8> _Str,
    ffi.Pointer<ffi.Int8> _Control,
  ) {
    return (_strcspn ??=
        _dylib.lookupFunction<_c_strcspn, _dart_strcspn>('strcspn'))(
      _Str,
      _Control,
    );
  }

  _dart_strcspn? _strcspn;

  ffi.Pointer<ffi.Int8> _strdup(
    ffi.Pointer<ffi.Int8> _Source,
  ) {
    return (__strdup ??=
        _dylib.lookupFunction<_c__strdup, _dart__strdup>('_strdup'))(
      _Source,
    );
  }

  _dart__strdup? __strdup;

  ffi.Pointer<ffi.Int8> _strerror(
    ffi.Pointer<ffi.Int8> _ErrorMessage,
  ) {
    return (__strerror ??=
        _dylib.lookupFunction<_c__strerror, _dart__strerror>('_strerror'))(
      _ErrorMessage,
    );
  }

  _dart__strerror? __strerror;

  int _strerror_s(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _SizeInBytes,
    ffi.Pointer<ffi.Int8> _ErrorMessage,
  ) {
    return (__strerror_s ??= _dylib
        .lookupFunction<_c__strerror_s, _dart__strerror_s>('_strerror_s'))(
      _Buffer,
      _SizeInBytes,
      _ErrorMessage,
    );
  }

  _dart__strerror_s? __strerror_s;

  ffi.Pointer<ffi.Int8> strerror(
    int _ErrorMessage,
  ) {
    return (_strerror_1 ??=
        _dylib.lookupFunction<_c_strerror, _dart_strerror>('strerror'))(
      _ErrorMessage,
    );
  }

  _dart_strerror? _strerror_1;

  int _stricmp(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
  ) {
    return (__stricmp ??=
        _dylib.lookupFunction<_c__stricmp, _dart__stricmp>('_stricmp'))(
      _String1,
      _String2,
    );
  }

  _dart__stricmp? __stricmp;

  int _stricoll(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
  ) {
    return (__stricoll ??=
        _dylib.lookupFunction<_c__stricoll, _dart__stricoll>('_stricoll'))(
      _String1,
      _String2,
    );
  }

  _dart__stricoll? __stricoll;

  int _stricoll_l(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__stricoll_l ??= _dylib
        .lookupFunction<_c__stricoll_l, _dart__stricoll_l>('_stricoll_l'))(
      _String1,
      _String2,
      _Locale,
    );
  }

  _dart__stricoll_l? __stricoll_l;

  int _stricmp_l(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__stricmp_l ??=
        _dylib.lookupFunction<_c__stricmp_l, _dart__stricmp_l>('_stricmp_l'))(
      _String1,
      _String2,
      _Locale,
    );
  }

  _dart__stricmp_l? __stricmp_l;

  int strlen(
    ffi.Pointer<ffi.Int8> _Str,
  ) {
    return (_strlen ??=
        _dylib.lookupFunction<_c_strlen, _dart_strlen>('strlen'))(
      _Str,
    );
  }

  _dart_strlen? _strlen;

  int _strlwr_s(
    ffi.Pointer<ffi.Int8> _String,
    int _Size,
  ) {
    return (__strlwr_s ??=
        _dylib.lookupFunction<_c__strlwr_s, _dart__strlwr_s>('_strlwr_s'))(
      _String,
      _Size,
    );
  }

  _dart__strlwr_s? __strlwr_s;

  ffi.Pointer<ffi.Int8> _strlwr(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return (__strlwr ??=
        _dylib.lookupFunction<_c__strlwr, _dart__strlwr>('_strlwr'))(
      _String,
    );
  }

  _dart__strlwr? __strlwr;

  int _strlwr_s_l(
    ffi.Pointer<ffi.Int8> _String,
    int _Size,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__strlwr_s_l ??= _dylib
        .lookupFunction<_c__strlwr_s_l, _dart__strlwr_s_l>('_strlwr_s_l'))(
      _String,
      _Size,
      _Locale,
    );
  }

  _dart__strlwr_s_l? __strlwr_s_l;

  ffi.Pointer<ffi.Int8> _strlwr_l(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__strlwr_l ??=
        _dylib.lookupFunction<_c__strlwr_l, _dart__strlwr_l>('_strlwr_l'))(
      _String,
      _Locale,
    );
  }

  _dart__strlwr_l? __strlwr_l;

  ffi.Pointer<ffi.Int8> strncat(
    ffi.Pointer<ffi.Int8> _Destination,
    ffi.Pointer<ffi.Int8> _Source,
    int _Count,
  ) {
    return (_strncat ??=
        _dylib.lookupFunction<_c_strncat, _dart_strncat>('strncat'))(
      _Destination,
      _Source,
      _Count,
    );
  }

  _dart_strncat? _strncat;

  int strncmp(
    ffi.Pointer<ffi.Int8> _Str1,
    ffi.Pointer<ffi.Int8> _Str2,
    int _MaxCount,
  ) {
    return (_strncmp ??=
        _dylib.lookupFunction<_c_strncmp, _dart_strncmp>('strncmp'))(
      _Str1,
      _Str2,
      _MaxCount,
    );
  }

  _dart_strncmp? _strncmp;

  int _strnicmp(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
    int _MaxCount,
  ) {
    return (__strnicmp ??=
        _dylib.lookupFunction<_c__strnicmp, _dart__strnicmp>('_strnicmp'))(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  _dart__strnicmp? __strnicmp;

  int _strnicmp_l(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
    int _MaxCount,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__strnicmp_l ??= _dylib
        .lookupFunction<_c__strnicmp_l, _dart__strnicmp_l>('_strnicmp_l'))(
      _String1,
      _String2,
      _MaxCount,
      _Locale,
    );
  }

  _dart__strnicmp_l? __strnicmp_l;

  int _strnicoll(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
    int _MaxCount,
  ) {
    return (__strnicoll ??=
        _dylib.lookupFunction<_c__strnicoll, _dart__strnicoll>('_strnicoll'))(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  _dart__strnicoll? __strnicoll;

  int _strnicoll_l(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
    int _MaxCount,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__strnicoll_l ??= _dylib
        .lookupFunction<_c__strnicoll_l, _dart__strnicoll_l>('_strnicoll_l'))(
      _String1,
      _String2,
      _MaxCount,
      _Locale,
    );
  }

  _dart__strnicoll_l? __strnicoll_l;

  int _strncoll(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
    int _MaxCount,
  ) {
    return (__strncoll ??=
        _dylib.lookupFunction<_c__strncoll, _dart__strncoll>('_strncoll'))(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  _dart__strncoll? __strncoll;

  int _strncoll_l(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
    int _MaxCount,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__strncoll_l ??= _dylib
        .lookupFunction<_c__strncoll_l, _dart__strncoll_l>('_strncoll_l'))(
      _String1,
      _String2,
      _MaxCount,
      _Locale,
    );
  }

  _dart__strncoll_l? __strncoll_l;

  int __strncnt(
    ffi.Pointer<ffi.Int8> _String,
    int _Count,
  ) {
    return (___strncnt ??=
        _dylib.lookupFunction<_c___strncnt, _dart___strncnt>('__strncnt'))(
      _String,
      _Count,
    );
  }

  _dart___strncnt? ___strncnt;

  ffi.Pointer<ffi.Int8> strncpy(
    ffi.Pointer<ffi.Int8> _Destination,
    ffi.Pointer<ffi.Int8> _Source,
    int _Count,
  ) {
    return (_strncpy ??=
        _dylib.lookupFunction<_c_strncpy, _dart_strncpy>('strncpy'))(
      _Destination,
      _Source,
      _Count,
    );
  }

  _dart_strncpy? _strncpy;

  int strnlen(
    ffi.Pointer<ffi.Int8> _String,
    int _MaxCount,
  ) {
    return (_strnlen ??=
        _dylib.lookupFunction<_c_strnlen, _dart_strnlen>('strnlen'))(
      _String,
      _MaxCount,
    );
  }

  _dart_strnlen? _strnlen;

  int strnlen_s(
    ffi.Pointer<ffi.Int8> _String,
    int _MaxCount,
  ) {
    return (_strnlen_s ??=
        _dylib.lookupFunction<_c_strnlen_s, _dart_strnlen_s>('strnlen_s'))(
      _String,
      _MaxCount,
    );
  }

  _dart_strnlen_s? _strnlen_s;

  int _strnset_s(
    ffi.Pointer<ffi.Int8> _String,
    int _SizeInBytes,
    int _Value,
    int _MaxCount,
  ) {
    return (__strnset_s ??=
        _dylib.lookupFunction<_c__strnset_s, _dart__strnset_s>('_strnset_s'))(
      _String,
      _SizeInBytes,
      _Value,
      _MaxCount,
    );
  }

  _dart__strnset_s? __strnset_s;

  ffi.Pointer<ffi.Int8> _strnset(
    ffi.Pointer<ffi.Int8> _Destination,
    int _Value,
    int _Count,
  ) {
    return (__strnset ??=
        _dylib.lookupFunction<_c__strnset, _dart__strnset>('_strnset'))(
      _Destination,
      _Value,
      _Count,
    );
  }

  _dart__strnset? __strnset;

  ffi.Pointer<ffi.Int8> strpbrk(
    ffi.Pointer<ffi.Int8> _Str,
    ffi.Pointer<ffi.Int8> _Control,
  ) {
    return (_strpbrk ??=
        _dylib.lookupFunction<_c_strpbrk, _dart_strpbrk>('strpbrk'))(
      _Str,
      _Control,
    );
  }

  _dart_strpbrk? _strpbrk;

  ffi.Pointer<ffi.Int8> _strrev(
    ffi.Pointer<ffi.Int8> _Str,
  ) {
    return (__strrev ??=
        _dylib.lookupFunction<_c__strrev, _dart__strrev>('_strrev'))(
      _Str,
    );
  }

  _dart__strrev? __strrev;

  int _strset_s(
    ffi.Pointer<ffi.Int8> _Destination,
    int _DestinationSize,
    int _Value,
  ) {
    return (__strset_s ??=
        _dylib.lookupFunction<_c__strset_s, _dart__strset_s>('_strset_s'))(
      _Destination,
      _DestinationSize,
      _Value,
    );
  }

  _dart__strset_s? __strset_s;

  ffi.Pointer<ffi.Int8> _strset(
    ffi.Pointer<ffi.Int8> _Destination,
    int _Value,
  ) {
    return (__strset ??=
        _dylib.lookupFunction<_c__strset, _dart__strset>('_strset'))(
      _Destination,
      _Value,
    );
  }

  _dart__strset? __strset;

  int strspn(
    ffi.Pointer<ffi.Int8> _Str,
    ffi.Pointer<ffi.Int8> _Control,
  ) {
    return (_strspn ??=
        _dylib.lookupFunction<_c_strspn, _dart_strspn>('strspn'))(
      _Str,
      _Control,
    );
  }

  _dart_strspn? _strspn;

  ffi.Pointer<ffi.Int8> strtok(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Int8> _Delimiter,
  ) {
    return (_strtok ??=
        _dylib.lookupFunction<_c_strtok, _dart_strtok>('strtok'))(
      _String,
      _Delimiter,
    );
  }

  _dart_strtok? _strtok;

  int _strupr_s(
    ffi.Pointer<ffi.Int8> _String,
    int _Size,
  ) {
    return (__strupr_s ??=
        _dylib.lookupFunction<_c__strupr_s, _dart__strupr_s>('_strupr_s'))(
      _String,
      _Size,
    );
  }

  _dart__strupr_s? __strupr_s;

  ffi.Pointer<ffi.Int8> _strupr(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return (__strupr ??=
        _dylib.lookupFunction<_c__strupr, _dart__strupr>('_strupr'))(
      _String,
    );
  }

  _dart__strupr? __strupr;

  int _strupr_s_l(
    ffi.Pointer<ffi.Int8> _String,
    int _Size,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__strupr_s_l ??= _dylib
        .lookupFunction<_c__strupr_s_l, _dart__strupr_s_l>('_strupr_s_l'))(
      _String,
      _Size,
      _Locale,
    );
  }

  _dart__strupr_s_l? __strupr_s_l;

  ffi.Pointer<ffi.Int8> _strupr_l(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__strupr_l ??=
        _dylib.lookupFunction<_c__strupr_l, _dart__strupr_l>('_strupr_l'))(
      _String,
      _Locale,
    );
  }

  _dart__strupr_l? __strupr_l;

  int strxfrm(
    ffi.Pointer<ffi.Int8> _Destination,
    ffi.Pointer<ffi.Int8> _Source,
    int _MaxCount,
  ) {
    return (_strxfrm ??=
        _dylib.lookupFunction<_c_strxfrm, _dart_strxfrm>('strxfrm'))(
      _Destination,
      _Source,
      _MaxCount,
    );
  }

  _dart_strxfrm? _strxfrm;

  int _strxfrm_l(
    ffi.Pointer<ffi.Int8> _Destination,
    ffi.Pointer<ffi.Int8> _Source,
    int _MaxCount,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__strxfrm_l ??=
        _dylib.lookupFunction<_c__strxfrm_l, _dart__strxfrm_l>('_strxfrm_l'))(
      _Destination,
      _Source,
      _MaxCount,
      _Locale,
    );
  }

  _dart__strxfrm_l? __strxfrm_l;

  ffi.Pointer<ffi.Int8> strdup(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return (_strdup_1 ??=
        _dylib.lookupFunction<_c_strdup, _dart_strdup>('strdup'))(
      _String,
    );
  }

  _dart_strdup? _strdup_1;

  int strcmpi(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
  ) {
    return (_strcmpi_1 ??=
        _dylib.lookupFunction<_c_strcmpi, _dart_strcmpi>('strcmpi'))(
      _String1,
      _String2,
    );
  }

  _dart_strcmpi? _strcmpi_1;

  int stricmp(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
  ) {
    return (_stricmp_1 ??=
        _dylib.lookupFunction<_c_stricmp, _dart_stricmp>('stricmp'))(
      _String1,
      _String2,
    );
  }

  _dart_stricmp? _stricmp_1;

  ffi.Pointer<ffi.Int8> strlwr(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return (_strlwr_1 ??=
        _dylib.lookupFunction<_c_strlwr, _dart_strlwr>('strlwr'))(
      _String,
    );
  }

  _dart_strlwr? _strlwr_1;

  int strnicmp(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
    int _MaxCount,
  ) {
    return (_strnicmp_1 ??=
        _dylib.lookupFunction<_c_strnicmp, _dart_strnicmp>('strnicmp'))(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  _dart_strnicmp? _strnicmp_1;

  ffi.Pointer<ffi.Int8> strnset(
    ffi.Pointer<ffi.Int8> _String,
    int _Value,
    int _MaxCount,
  ) {
    return (_strnset_1 ??=
        _dylib.lookupFunction<_c_strnset, _dart_strnset>('strnset'))(
      _String,
      _Value,
      _MaxCount,
    );
  }

  _dart_strnset? _strnset_1;

  ffi.Pointer<ffi.Int8> strrev(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return (_strrev_1 ??=
        _dylib.lookupFunction<_c_strrev, _dart_strrev>('strrev'))(
      _String,
    );
  }

  _dart_strrev? _strrev_1;

  ffi.Pointer<ffi.Int8> strset(
    ffi.Pointer<ffi.Int8> _String,
    int _Value,
  ) {
    return (_strset_1 ??=
        _dylib.lookupFunction<_c_strset, _dart_strset>('strset'))(
      _String,
      _Value,
    );
  }

  _dart_strset? _strset_1;

  ffi.Pointer<ffi.Int8> strupr(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return (_strupr_1 ??=
        _dylib.lookupFunction<_c_strupr, _dart_strupr>('strupr'))(
      _String,
    );
  }

  _dart_strupr? _strupr_1;

  int _bittest(
    ffi.Pointer<ffi.Int64> Base,
    int Offset,
  ) {
    return (__bittest ??=
        _dylib.lookupFunction<_c__bittest, _dart__bittest>('_bittest'))(
      Base,
      Offset,
    );
  }

  _dart__bittest? __bittest;

  int _bittestandcomplement(
    ffi.Pointer<ffi.Int64> Base,
    int Offset,
  ) {
    return (__bittestandcomplement ??= _dylib.lookupFunction<
        _c__bittestandcomplement,
        _dart__bittestandcomplement>('_bittestandcomplement'))(
      Base,
      Offset,
    );
  }

  _dart__bittestandcomplement? __bittestandcomplement;

  int _bittestandset(
    ffi.Pointer<ffi.Int64> Base,
    int Offset,
  ) {
    return (__bittestandset ??=
        _dylib.lookupFunction<_c__bittestandset, _dart__bittestandset>(
            '_bittestandset'))(
      Base,
      Offset,
    );
  }

  _dart__bittestandset? __bittestandset;

  int _bittestandreset(
    ffi.Pointer<ffi.Int64> Base,
    int Offset,
  ) {
    return (__bittestandreset ??=
        _dylib.lookupFunction<_c__bittestandreset, _dart__bittestandreset>(
            '_bittestandreset'))(
      Base,
      Offset,
    );
  }

  _dart__bittestandreset? __bittestandreset;

  int _interlockedbittestandset(
    ffi.Pointer<ffi.Int64> Base,
    int Offset,
  ) {
    return (__interlockedbittestandset ??= _dylib.lookupFunction<
        _c__interlockedbittestandset,
        _dart__interlockedbittestandset>('_interlockedbittestandset'))(
      Base,
      Offset,
    );
  }

  _dart__interlockedbittestandset? __interlockedbittestandset;

  int _interlockedbittestandreset(
    ffi.Pointer<ffi.Int64> Base,
    int Offset,
  ) {
    return (__interlockedbittestandreset ??= _dylib.lookupFunction<
        _c__interlockedbittestandreset,
        _dart__interlockedbittestandreset>('_interlockedbittestandreset'))(
      Base,
      Offset,
    );
  }

  _dart__interlockedbittestandreset? __interlockedbittestandreset;

  int _bittest64(
    ffi.Pointer<ffi.Int64> Base,
    int Offset,
  ) {
    return (__bittest64 ??=
        _dylib.lookupFunction<_c__bittest64, _dart__bittest64>('_bittest64'))(
      Base,
      Offset,
    );
  }

  _dart__bittest64? __bittest64;

  int _bittestandcomplement64(
    ffi.Pointer<ffi.Int64> Base,
    int Offset,
  ) {
    return (__bittestandcomplement64 ??= _dylib.lookupFunction<
        _c__bittestandcomplement64,
        _dart__bittestandcomplement64>('_bittestandcomplement64'))(
      Base,
      Offset,
    );
  }

  _dart__bittestandcomplement64? __bittestandcomplement64;

  int _bittestandset64(
    ffi.Pointer<ffi.Int64> Base,
    int Offset,
  ) {
    return (__bittestandset64 ??=
        _dylib.lookupFunction<_c__bittestandset64, _dart__bittestandset64>(
            '_bittestandset64'))(
      Base,
      Offset,
    );
  }

  _dart__bittestandset64? __bittestandset64;

  int _bittestandreset64(
    ffi.Pointer<ffi.Int64> Base,
    int Offset,
  ) {
    return (__bittestandreset64 ??=
        _dylib.lookupFunction<_c__bittestandreset64, _dart__bittestandreset64>(
            '_bittestandreset64'))(
      Base,
      Offset,
    );
  }

  _dart__bittestandreset64? __bittestandreset64;

  int _interlockedbittestandset64(
    ffi.Pointer<ffi.Int64> Base,
    int Offset,
  ) {
    return (__interlockedbittestandset64 ??= _dylib.lookupFunction<
        _c__interlockedbittestandset64,
        _dart__interlockedbittestandset64>('_interlockedbittestandset64'))(
      Base,
      Offset,
    );
  }

  _dart__interlockedbittestandset64? __interlockedbittestandset64;

  int _interlockedbittestandreset64(
    ffi.Pointer<ffi.Int64> Base,
    int Offset,
  ) {
    return (__interlockedbittestandreset64 ??= _dylib.lookupFunction<
        _c__interlockedbittestandreset64,
        _dart__interlockedbittestandreset64>('_interlockedbittestandreset64'))(
      Base,
      Offset,
    );
  }

  _dart__interlockedbittestandreset64? __interlockedbittestandreset64;

  int _BitScanForward(
    ffi.Pointer<ffi.Uint64> Index,
    int Mask,
  ) {
    return (__BitScanForward ??=
        _dylib.lookupFunction<_c__BitScanForward, _dart__BitScanForward>(
            '_BitScanForward'))(
      Index,
      Mask,
    );
  }

  _dart__BitScanForward? __BitScanForward;

  int _BitScanReverse(
    ffi.Pointer<ffi.Uint64> Index,
    int Mask,
  ) {
    return (__BitScanReverse ??=
        _dylib.lookupFunction<_c__BitScanReverse, _dart__BitScanReverse>(
            '_BitScanReverse'))(
      Index,
      Mask,
    );
  }

  _dart__BitScanReverse? __BitScanReverse;

  int _BitScanForward64(
    ffi.Pointer<ffi.Uint64> Index,
    int Mask,
  ) {
    return (__BitScanForward64 ??=
        _dylib.lookupFunction<_c__BitScanForward64, _dart__BitScanForward64>(
            '_BitScanForward64'))(
      Index,
      Mask,
    );
  }

  _dart__BitScanForward64? __BitScanForward64;

  int _BitScanReverse64(
    ffi.Pointer<ffi.Uint64> Index,
    int Mask,
  ) {
    return (__BitScanReverse64 ??=
        _dylib.lookupFunction<_c__BitScanReverse64, _dart__BitScanReverse64>(
            '_BitScanReverse64'))(
      Index,
      Mask,
    );
  }

  _dart__BitScanReverse64? __BitScanReverse64;

  int _InterlockedIncrement16(
    ffi.Pointer<ffi.Int16> Addend,
  ) {
    return (__InterlockedIncrement16 ??= _dylib.lookupFunction<
        _c__InterlockedIncrement16,
        _dart__InterlockedIncrement16>('_InterlockedIncrement16'))(
      Addend,
    );
  }

  _dart__InterlockedIncrement16? __InterlockedIncrement16;

  int _InterlockedDecrement16(
    ffi.Pointer<ffi.Int16> Addend,
  ) {
    return (__InterlockedDecrement16 ??= _dylib.lookupFunction<
        _c__InterlockedDecrement16,
        _dart__InterlockedDecrement16>('_InterlockedDecrement16'))(
      Addend,
    );
  }

  _dart__InterlockedDecrement16? __InterlockedDecrement16;

  int _InterlockedCompareExchange16(
    ffi.Pointer<ffi.Int16> Destination,
    int ExChange,
    int Comperand,
  ) {
    return (__InterlockedCompareExchange16 ??= _dylib.lookupFunction<
        _c__InterlockedCompareExchange16,
        _dart__InterlockedCompareExchange16>('_InterlockedCompareExchange16'))(
      Destination,
      ExChange,
      Comperand,
    );
  }

  _dart__InterlockedCompareExchange16? __InterlockedCompareExchange16;

  int _InterlockedAnd(
    ffi.Pointer<ffi.Int64> Destination,
    int Value,
  ) {
    return (__InterlockedAnd ??=
        _dylib.lookupFunction<_c__InterlockedAnd, _dart__InterlockedAnd>(
            '_InterlockedAnd'))(
      Destination,
      Value,
    );
  }

  _dart__InterlockedAnd? __InterlockedAnd;

  int _InterlockedOr(
    ffi.Pointer<ffi.Int64> Destination,
    int Value,
  ) {
    return (__InterlockedOr ??=
        _dylib.lookupFunction<_c__InterlockedOr, _dart__InterlockedOr>(
            '_InterlockedOr'))(
      Destination,
      Value,
    );
  }

  _dart__InterlockedOr? __InterlockedOr;

  int _InterlockedXor(
    ffi.Pointer<ffi.Int64> Destination,
    int Value,
  ) {
    return (__InterlockedXor ??=
        _dylib.lookupFunction<_c__InterlockedXor, _dart__InterlockedXor>(
            '_InterlockedXor'))(
      Destination,
      Value,
    );
  }

  _dart__InterlockedXor? __InterlockedXor;

  int _InterlockedAnd64(
    ffi.Pointer<ffi.Int64> Destination,
    int Value,
  ) {
    return (__InterlockedAnd64 ??=
        _dylib.lookupFunction<_c__InterlockedAnd64, _dart__InterlockedAnd64>(
            '_InterlockedAnd64'))(
      Destination,
      Value,
    );
  }

  _dart__InterlockedAnd64? __InterlockedAnd64;

  int _InterlockedOr64(
    ffi.Pointer<ffi.Int64> Destination,
    int Value,
  ) {
    return (__InterlockedOr64 ??=
        _dylib.lookupFunction<_c__InterlockedOr64, _dart__InterlockedOr64>(
            '_InterlockedOr64'))(
      Destination,
      Value,
    );
  }

  _dart__InterlockedOr64? __InterlockedOr64;

  int _InterlockedXor64(
    ffi.Pointer<ffi.Int64> Destination,
    int Value,
  ) {
    return (__InterlockedXor64 ??=
        _dylib.lookupFunction<_c__InterlockedXor64, _dart__InterlockedXor64>(
            '_InterlockedXor64'))(
      Destination,
      Value,
    );
  }

  _dart__InterlockedXor64? __InterlockedXor64;

  int _InterlockedIncrement(
    ffi.Pointer<ffi.Int64> Addend,
  ) {
    return (__InterlockedIncrement ??= _dylib.lookupFunction<
        _c__InterlockedIncrement,
        _dart__InterlockedIncrement>('_InterlockedIncrement'))(
      Addend,
    );
  }

  _dart__InterlockedIncrement? __InterlockedIncrement;

  int _InterlockedDecrement(
    ffi.Pointer<ffi.Int64> Addend,
  ) {
    return (__InterlockedDecrement ??= _dylib.lookupFunction<
        _c__InterlockedDecrement,
        _dart__InterlockedDecrement>('_InterlockedDecrement'))(
      Addend,
    );
  }

  _dart__InterlockedDecrement? __InterlockedDecrement;

  int _InterlockedExchange(
    ffi.Pointer<ffi.Int64> Target,
    int Value,
  ) {
    return (__InterlockedExchange ??= _dylib.lookupFunction<
        _c__InterlockedExchange,
        _dart__InterlockedExchange>('_InterlockedExchange'))(
      Target,
      Value,
    );
  }

  _dart__InterlockedExchange? __InterlockedExchange;

  int _InterlockedExchangeAdd(
    ffi.Pointer<ffi.Int64> Addend,
    int Value,
  ) {
    return (__InterlockedExchangeAdd ??= _dylib.lookupFunction<
        _c__InterlockedExchangeAdd,
        _dart__InterlockedExchangeAdd>('_InterlockedExchangeAdd'))(
      Addend,
      Value,
    );
  }

  _dart__InterlockedExchangeAdd? __InterlockedExchangeAdd;

  int _InlineInterlockedAdd(
    ffi.Pointer<ffi.Int64> Addend,
    int Value,
  ) {
    return (__InlineInterlockedAdd ??= _dylib.lookupFunction<
        _c__InlineInterlockedAdd,
        _dart__InlineInterlockedAdd>('_InlineInterlockedAdd'))(
      Addend,
      Value,
    );
  }

  _dart__InlineInterlockedAdd? __InlineInterlockedAdd;

  int _InterlockedCompareExchange(
    ffi.Pointer<ffi.Int64> Destination,
    int ExChange,
    int Comperand,
  ) {
    return (__InterlockedCompareExchange ??= _dylib.lookupFunction<
        _c__InterlockedCompareExchange,
        _dart__InterlockedCompareExchange>('_InterlockedCompareExchange'))(
      Destination,
      ExChange,
      Comperand,
    );
  }

  _dart__InterlockedCompareExchange? __InterlockedCompareExchange;

  int _InterlockedIncrement64(
    ffi.Pointer<ffi.Int64> Addend,
  ) {
    return (__InterlockedIncrement64 ??= _dylib.lookupFunction<
        _c__InterlockedIncrement64,
        _dart__InterlockedIncrement64>('_InterlockedIncrement64'))(
      Addend,
    );
  }

  _dart__InterlockedIncrement64? __InterlockedIncrement64;

  int _InterlockedDecrement64(
    ffi.Pointer<ffi.Int64> Addend,
  ) {
    return (__InterlockedDecrement64 ??= _dylib.lookupFunction<
        _c__InterlockedDecrement64,
        _dart__InterlockedDecrement64>('_InterlockedDecrement64'))(
      Addend,
    );
  }

  _dart__InterlockedDecrement64? __InterlockedDecrement64;

  int _InterlockedExchange64(
    ffi.Pointer<ffi.Int64> Target,
    int Value,
  ) {
    return (__InterlockedExchange64 ??= _dylib.lookupFunction<
        _c__InterlockedExchange64,
        _dart__InterlockedExchange64>('_InterlockedExchange64'))(
      Target,
      Value,
    );
  }

  _dart__InterlockedExchange64? __InterlockedExchange64;

  int _InterlockedExchangeAdd64(
    ffi.Pointer<ffi.Int64> Addend,
    int Value,
  ) {
    return (__InterlockedExchangeAdd64 ??= _dylib.lookupFunction<
        _c__InterlockedExchangeAdd64,
        _dart__InterlockedExchangeAdd64>('_InterlockedExchangeAdd64'))(
      Addend,
      Value,
    );
  }

  _dart__InterlockedExchangeAdd64? __InterlockedExchangeAdd64;

  int _InlineInterlockedAdd64(
    ffi.Pointer<ffi.Int64> Addend,
    int Value,
  ) {
    return (__InlineInterlockedAdd64 ??= _dylib.lookupFunction<
        _c__InlineInterlockedAdd64,
        _dart__InlineInterlockedAdd64>('_InlineInterlockedAdd64'))(
      Addend,
      Value,
    );
  }

  _dart__InlineInterlockedAdd64? __InlineInterlockedAdd64;

  int _InterlockedCompareExchange64(
    ffi.Pointer<ffi.Int64> Destination,
    int ExChange,
    int Comperand,
  ) {
    return (__InterlockedCompareExchange64 ??= _dylib.lookupFunction<
        _c__InterlockedCompareExchange64,
        _dart__InterlockedCompareExchange64>('_InterlockedCompareExchange64'))(
      Destination,
      ExChange,
      Comperand,
    );
  }

  _dart__InterlockedCompareExchange64? __InterlockedCompareExchange64;

  int _InterlockedCompareExchange128(
    ffi.Pointer<ffi.Int64> Destination,
    int ExchangeHigh,
    int ExchangeLow,
    ffi.Pointer<ffi.Int64> ComparandResult,
  ) {
    return (__InterlockedCompareExchange128 ??= _dylib.lookupFunction<
            _c__InterlockedCompareExchange128,
            _dart__InterlockedCompareExchange128>(
        '_InterlockedCompareExchange128'))(
      Destination,
      ExchangeHigh,
      ExchangeLow,
      ComparandResult,
    );
  }

  _dart__InterlockedCompareExchange128? __InterlockedCompareExchange128;

  ffi.Pointer<ffi.Void> _InterlockedCompareExchangePointer(
    ffi.Pointer<ffi.Pointer<ffi.Void>> Destination,
    ffi.Pointer<ffi.Void> Exchange,
    ffi.Pointer<ffi.Void> Comperand,
  ) {
    return (__InterlockedCompareExchangePointer ??= _dylib.lookupFunction<
            _c__InterlockedCompareExchangePointer,
            _dart__InterlockedCompareExchangePointer>(
        '_InterlockedCompareExchangePointer'))(
      Destination,
      Exchange,
      Comperand,
    );
  }

  _dart__InterlockedCompareExchangePointer? __InterlockedCompareExchangePointer;

  ffi.Pointer<ffi.Void> _InterlockedExchangePointer(
    ffi.Pointer<ffi.Pointer<ffi.Void>> Target,
    ffi.Pointer<ffi.Void> Value,
  ) {
    return (__InterlockedExchangePointer ??= _dylib.lookupFunction<
        _c__InterlockedExchangePointer,
        _dart__InterlockedExchangePointer>('_InterlockedExchangePointer'))(
      Target,
      Value,
    );
  }

  _dart__InterlockedExchangePointer? __InterlockedExchangePointer;

  int _InterlockedExchange8(
    ffi.Pointer<ffi.Int8> Target,
    int Value,
  ) {
    return (__InterlockedExchange8 ??= _dylib.lookupFunction<
        _c__InterlockedExchange8,
        _dart__InterlockedExchange8>('_InterlockedExchange8'))(
      Target,
      Value,
    );
  }

  _dart__InterlockedExchange8? __InterlockedExchange8;

  int _InterlockedExchange16(
    ffi.Pointer<ffi.Int16> Destination,
    int ExChange,
  ) {
    return (__InterlockedExchange16 ??= _dylib.lookupFunction<
        _c__InterlockedExchange16,
        _dart__InterlockedExchange16>('_InterlockedExchange16'))(
      Destination,
      ExChange,
    );
  }

  _dart__InterlockedExchange16? __InterlockedExchange16;

  int _InterlockedExchangeAdd8(
    ffi.Pointer<ffi.Int8> _Addend,
    int _Value,
  ) {
    return (__InterlockedExchangeAdd8 ??= _dylib.lookupFunction<
        _c__InterlockedExchangeAdd8,
        _dart__InterlockedExchangeAdd8>('_InterlockedExchangeAdd8'))(
      _Addend,
      _Value,
    );
  }

  _dart__InterlockedExchangeAdd8? __InterlockedExchangeAdd8;

  int _InterlockedAnd8(
    ffi.Pointer<ffi.Int8> Destination,
    int Value,
  ) {
    return (__InterlockedAnd8 ??=
        _dylib.lookupFunction<_c__InterlockedAnd8, _dart__InterlockedAnd8>(
            '_InterlockedAnd8'))(
      Destination,
      Value,
    );
  }

  _dart__InterlockedAnd8? __InterlockedAnd8;

  int _InterlockedOr8(
    ffi.Pointer<ffi.Int8> Destination,
    int Value,
  ) {
    return (__InterlockedOr8 ??=
        _dylib.lookupFunction<_c__InterlockedOr8, _dart__InterlockedOr8>(
            '_InterlockedOr8'))(
      Destination,
      Value,
    );
  }

  _dart__InterlockedOr8? __InterlockedOr8;

  int _InterlockedXor8(
    ffi.Pointer<ffi.Int8> Destination,
    int Value,
  ) {
    return (__InterlockedXor8 ??=
        _dylib.lookupFunction<_c__InterlockedXor8, _dart__InterlockedXor8>(
            '_InterlockedXor8'))(
      Destination,
      Value,
    );
  }

  _dart__InterlockedXor8? __InterlockedXor8;

  int _InterlockedAnd16(
    ffi.Pointer<ffi.Int16> Destination,
    int Value,
  ) {
    return (__InterlockedAnd16 ??=
        _dylib.lookupFunction<_c__InterlockedAnd16, _dart__InterlockedAnd16>(
            '_InterlockedAnd16'))(
      Destination,
      Value,
    );
  }

  _dart__InterlockedAnd16? __InterlockedAnd16;

  int _InterlockedOr16(
    ffi.Pointer<ffi.Int16> Destination,
    int Value,
  ) {
    return (__InterlockedOr16 ??=
        _dylib.lookupFunction<_c__InterlockedOr16, _dart__InterlockedOr16>(
            '_InterlockedOr16'))(
      Destination,
      Value,
    );
  }

  _dart__InterlockedOr16? __InterlockedOr16;

  int _InterlockedXor16(
    ffi.Pointer<ffi.Int16> Destination,
    int Value,
  ) {
    return (__InterlockedXor16 ??=
        _dylib.lookupFunction<_c__InterlockedXor16, _dart__InterlockedXor16>(
            '_InterlockedXor16'))(
      Destination,
      Value,
    );
  }

  _dart__InterlockedXor16? __InterlockedXor16;

  void __cpuidex(
    ffi.Pointer<ffi.Int32> CPUInfo,
    int Function_1,
    int SubLeaf,
  ) {
    return (___cpuidex ??=
        _dylib.lookupFunction<_c___cpuidex, _dart___cpuidex>('__cpuidex'))(
      CPUInfo,
      Function_1,
      SubLeaf,
    );
  }

  _dart___cpuidex? ___cpuidex;

  void _mm_clflush(
    ffi.Pointer<ffi.Void> Address,
  ) {
    return (__mm_clflush ??= _dylib
        .lookupFunction<_c__mm_clflush, _dart__mm_clflush>('_mm_clflush'))(
      Address,
    );
  }

  _dart__mm_clflush? __mm_clflush;

  void _ReadWriteBarrier() {
    return (__ReadWriteBarrier ??=
        _dylib.lookupFunction<_c__ReadWriteBarrier, _dart__ReadWriteBarrier>(
            '_ReadWriteBarrier'))();
  }

  _dart__ReadWriteBarrier? __ReadWriteBarrier;

  void __faststorefence() {
    return (___faststorefence ??=
        _dylib.lookupFunction<_c___faststorefence, _dart___faststorefence>(
            '__faststorefence'))();
  }

  _dart___faststorefence? ___faststorefence;

  void _mm_lfence() {
    return (__mm_lfence ??=
        _dylib.lookupFunction<_c__mm_lfence, _dart__mm_lfence>('_mm_lfence'))();
  }

  _dart__mm_lfence? __mm_lfence;

  void _mm_mfence() {
    return (__mm_mfence ??=
        _dylib.lookupFunction<_c__mm_mfence, _dart__mm_mfence>('_mm_mfence'))();
  }

  _dart__mm_mfence? __mm_mfence;

  void _mm_sfence() {
    return (__mm_sfence ??=
        _dylib.lookupFunction<_c__mm_sfence, _dart__mm_sfence>('_mm_sfence'))();
  }

  _dart__mm_sfence? __mm_sfence;

  void _mm_pause() {
    return (__mm_pause ??=
        _dylib.lookupFunction<_c__mm_pause, _dart__mm_pause>('_mm_pause'))();
  }

  _dart__mm_pause? __mm_pause;

  void _mm_prefetch(
    ffi.Pointer<ffi.Int8> a,
    int sel,
  ) {
    return (__mm_prefetch ??= _dylib
        .lookupFunction<_c__mm_prefetch, _dart__mm_prefetch>('_mm_prefetch'))(
      a,
      sel,
    );
  }

  _dart__mm_prefetch? __mm_prefetch;

  void _m_prefetchw(
    ffi.Pointer<ffi.Void> Source,
  ) {
    return (__m_prefetchw ??= _dylib
        .lookupFunction<_c__m_prefetchw, _dart__m_prefetchw>('_m_prefetchw'))(
      Source,
    );
  }

  _dart__m_prefetchw? __m_prefetchw;

  int _mm_getcsr() {
    return (__mm_getcsr ??=
        _dylib.lookupFunction<_c__mm_getcsr, _dart__mm_getcsr>('_mm_getcsr'))();
  }

  _dart__mm_getcsr? __mm_getcsr;

  void _mm_setcsr(
    int MxCsr,
  ) {
    return (__mm_setcsr ??=
        _dylib.lookupFunction<_c__mm_setcsr, _dart__mm_setcsr>('_mm_setcsr'))(
      MxCsr,
    );
  }

  _dart__mm_setcsr? __mm_setcsr;

  int __getcallerseflags() {
    return (___getcallerseflags ??=
        _dylib.lookupFunction<_c___getcallerseflags, _dart___getcallerseflags>(
            '__getcallerseflags'))();
  }

  _dart___getcallerseflags? ___getcallerseflags;

  int __segmentlimit(
    int Selector,
  ) {
    return (___segmentlimit ??=
        _dylib.lookupFunction<_c___segmentlimit, _dart___segmentlimit>(
            '__segmentlimit'))(
      Selector,
    );
  }

  _dart___segmentlimit? ___segmentlimit;

  int __readpmc(
    int Counter,
  ) {
    return (___readpmc ??=
        _dylib.lookupFunction<_c___readpmc, _dart___readpmc>('__readpmc'))(
      Counter,
    );
  }

  _dart___readpmc? ___readpmc;

  int __rdtsc() {
    return (___rdtsc ??=
        _dylib.lookupFunction<_c___rdtsc, _dart___rdtsc>('__rdtsc'))();
  }

  _dart___rdtsc? ___rdtsc;

  void __movsb(
    ffi.Pointer<ffi.Uint8> Destination,
    ffi.Pointer<ffi.Uint8> Source,
    int Count,
  ) {
    return (___movsb ??=
        _dylib.lookupFunction<_c___movsb, _dart___movsb>('__movsb'))(
      Destination,
      Source,
      Count,
    );
  }

  _dart___movsb? ___movsb;

  void __movsw(
    ffi.Pointer<ffi.Uint16> Destination,
    ffi.Pointer<ffi.Uint16> Source,
    int Count,
  ) {
    return (___movsw ??=
        _dylib.lookupFunction<_c___movsw, _dart___movsw>('__movsw'))(
      Destination,
      Source,
      Count,
    );
  }

  _dart___movsw? ___movsw;

  void __movsd(
    ffi.Pointer<ffi.Uint64> Destination,
    ffi.Pointer<ffi.Uint64> Source,
    int Count,
  ) {
    return (___movsd ??=
        _dylib.lookupFunction<_c___movsd, _dart___movsd>('__movsd'))(
      Destination,
      Source,
      Count,
    );
  }

  _dart___movsd? ___movsd;

  void __movsq(
    ffi.Pointer<ffi.Uint64> Destination,
    ffi.Pointer<ffi.Uint64> Source,
    int Count,
  ) {
    return (___movsq ??=
        _dylib.lookupFunction<_c___movsq, _dart___movsq>('__movsq'))(
      Destination,
      Source,
      Count,
    );
  }

  _dart___movsq? ___movsq;

  void __stosb(
    ffi.Pointer<ffi.Uint8> Destination,
    int Value,
    int Count,
  ) {
    return (___stosb ??=
        _dylib.lookupFunction<_c___stosb, _dart___stosb>('__stosb'))(
      Destination,
      Value,
      Count,
    );
  }

  _dart___stosb? ___stosb;

  void __stosw(
    ffi.Pointer<ffi.Uint16> Destination,
    int Value,
    int Count,
  ) {
    return (___stosw ??=
        _dylib.lookupFunction<_c___stosw, _dart___stosw>('__stosw'))(
      Destination,
      Value,
      Count,
    );
  }

  _dart___stosw? ___stosw;

  void __stosd(
    ffi.Pointer<ffi.Uint64> Destination,
    int Value,
    int Count,
  ) {
    return (___stosd ??=
        _dylib.lookupFunction<_c___stosd, _dart___stosd>('__stosd'))(
      Destination,
      Value,
      Count,
    );
  }

  _dart___stosd? ___stosd;

  void __stosq(
    ffi.Pointer<ffi.Uint64> Destination,
    int Value,
    int Count,
  ) {
    return (___stosq ??=
        _dylib.lookupFunction<_c___stosq, _dart___stosq>('__stosq'))(
      Destination,
      Value,
      Count,
    );
  }

  _dart___stosq? ___stosq;

  int __mulh(
    int Multiplier,
    int Multiplicand,
  ) {
    return (___mulh ??=
        _dylib.lookupFunction<_c___mulh, _dart___mulh>('__mulh'))(
      Multiplier,
      Multiplicand,
    );
  }

  _dart___mulh? ___mulh;

  int __umulh(
    int Multiplier,
    int Multiplicand,
  ) {
    return (___umulh ??=
        _dylib.lookupFunction<_c___umulh, _dart___umulh>('__umulh'))(
      Multiplier,
      Multiplicand,
    );
  }

  _dart___umulh? ___umulh;

  int __popcnt64(
    int operand,
  ) {
    return (___popcnt64 ??=
        _dylib.lookupFunction<_c___popcnt64, _dart___popcnt64>('__popcnt64'))(
      operand,
    );
  }

  _dart___popcnt64? ___popcnt64;

  int __shiftleft128(
    int LowPart,
    int HighPart,
    int Shift,
  ) {
    return (___shiftleft128 ??=
        _dylib.lookupFunction<_c___shiftleft128, _dart___shiftleft128>(
            '__shiftleft128'))(
      LowPart,
      HighPart,
      Shift,
    );
  }

  _dart___shiftleft128? ___shiftleft128;

  int __shiftright128(
    int LowPart,
    int HighPart,
    int Shift,
  ) {
    return (___shiftright128 ??=
        _dylib.lookupFunction<_c___shiftright128, _dart___shiftright128>(
            '__shiftright128'))(
      LowPart,
      HighPart,
      Shift,
    );
  }

  _dart___shiftright128? ___shiftright128;

  int _mul128(
    int Multiplier,
    int Multiplicand,
    ffi.Pointer<ffi.Int64> HighProduct,
  ) {
    return (__mul128 ??=
        _dylib.lookupFunction<_c__mul128, _dart__mul128>('_mul128'))(
      Multiplier,
      Multiplicand,
      HighProduct,
    );
  }

  _dart__mul128? __mul128;

  int _umul128(
    int Multiplier,
    int Multiplicand,
    ffi.Pointer<ffi.Uint64> HighProduct,
  ) {
    return (__umul128 ??=
        _dylib.lookupFunction<_c__umul128, _dart__umul128>('_umul128'))(
      Multiplier,
      Multiplicand,
      HighProduct,
    );
  }

  _dart__umul128? __umul128;

  int MultiplyExtract128(
    int Multiplier,
    int Multiplicand,
    int Shift,
  ) {
    return (_MultiplyExtract128 ??=
        _dylib.lookupFunction<_c_MultiplyExtract128, _dart_MultiplyExtract128>(
            'MultiplyExtract128'))(
      Multiplier,
      Multiplicand,
      Shift,
    );
  }

  _dart_MultiplyExtract128? _MultiplyExtract128;

  int UnsignedMultiplyExtract128(
    int Multiplier,
    int Multiplicand,
    int Shift,
  ) {
    return (_UnsignedMultiplyExtract128 ??= _dylib.lookupFunction<
        _c_UnsignedMultiplyExtract128,
        _dart_UnsignedMultiplyExtract128>('UnsignedMultiplyExtract128'))(
      Multiplier,
      Multiplicand,
      Shift,
    );
  }

  _dart_UnsignedMultiplyExtract128? _UnsignedMultiplyExtract128;

  int __readgsbyte(
    int Offset,
  ) {
    return (___readgsbyte ??= _dylib
        .lookupFunction<_c___readgsbyte, _dart___readgsbyte>('__readgsbyte'))(
      Offset,
    );
  }

  _dart___readgsbyte? ___readgsbyte;

  int __readgsword(
    int Offset,
  ) {
    return (___readgsword ??= _dylib
        .lookupFunction<_c___readgsword, _dart___readgsword>('__readgsword'))(
      Offset,
    );
  }

  _dart___readgsword? ___readgsword;

  int __readgsdword(
    int Offset,
  ) {
    return (___readgsdword ??=
        _dylib.lookupFunction<_c___readgsdword, _dart___readgsdword>(
            '__readgsdword'))(
      Offset,
    );
  }

  _dart___readgsdword? ___readgsdword;

  int __readgsqword(
    int Offset,
  ) {
    return (___readgsqword ??=
        _dylib.lookupFunction<_c___readgsqword, _dart___readgsqword>(
            '__readgsqword'))(
      Offset,
    );
  }

  _dart___readgsqword? ___readgsqword;

  void __writegsbyte(
    int Offset,
    int Data,
  ) {
    return (___writegsbyte ??=
        _dylib.lookupFunction<_c___writegsbyte, _dart___writegsbyte>(
            '__writegsbyte'))(
      Offset,
      Data,
    );
  }

  _dart___writegsbyte? ___writegsbyte;

  void __writegsword(
    int Offset,
    int Data,
  ) {
    return (___writegsword ??=
        _dylib.lookupFunction<_c___writegsword, _dart___writegsword>(
            '__writegsword'))(
      Offset,
      Data,
    );
  }

  _dart___writegsword? ___writegsword;

  void __writegsdword(
    int Offset,
    int Data,
  ) {
    return (___writegsdword ??=
        _dylib.lookupFunction<_c___writegsdword, _dart___writegsdword>(
            '__writegsdword'))(
      Offset,
      Data,
    );
  }

  _dart___writegsdword? ___writegsdword;

  void __writegsqword(
    int Offset,
    int Data,
  ) {
    return (___writegsqword ??=
        _dylib.lookupFunction<_c___writegsqword, _dart___writegsqword>(
            '__writegsqword'))(
      Offset,
      Data,
    );
  }

  _dart___writegsqword? ___writegsqword;

  void __incgsbyte(
    int Offset,
  ) {
    return (___incgsbyte ??= _dylib
        .lookupFunction<_c___incgsbyte, _dart___incgsbyte>('__incgsbyte'))(
      Offset,
    );
  }

  _dart___incgsbyte? ___incgsbyte;

  void __addgsbyte(
    int Offset,
    int Value,
  ) {
    return (___addgsbyte ??= _dylib
        .lookupFunction<_c___addgsbyte, _dart___addgsbyte>('__addgsbyte'))(
      Offset,
      Value,
    );
  }

  _dart___addgsbyte? ___addgsbyte;

  void __incgsword(
    int Offset,
  ) {
    return (___incgsword ??= _dylib
        .lookupFunction<_c___incgsword, _dart___incgsword>('__incgsword'))(
      Offset,
    );
  }

  _dart___incgsword? ___incgsword;

  void __addgsword(
    int Offset,
    int Value,
  ) {
    return (___addgsword ??= _dylib
        .lookupFunction<_c___addgsword, _dart___addgsword>('__addgsword'))(
      Offset,
      Value,
    );
  }

  _dart___addgsword? ___addgsword;

  void __incgsdword(
    int Offset,
  ) {
    return (___incgsdword ??= _dylib
        .lookupFunction<_c___incgsdword, _dart___incgsdword>('__incgsdword'))(
      Offset,
    );
  }

  _dart___incgsdword? ___incgsdword;

  void __addgsdword(
    int Offset,
    int Value,
  ) {
    return (___addgsdword ??= _dylib
        .lookupFunction<_c___addgsdword, _dart___addgsdword>('__addgsdword'))(
      Offset,
      Value,
    );
  }

  _dart___addgsdword? ___addgsdword;

  void __incgsqword(
    int Offset,
  ) {
    return (___incgsqword ??= _dylib
        .lookupFunction<_c___incgsqword, _dart___incgsqword>('__incgsqword'))(
      Offset,
    );
  }

  _dart___incgsqword? ___incgsqword;

  void __addgsqword(
    int Offset,
    int Value,
  ) {
    return (___addgsqword ??= _dylib
        .lookupFunction<_c___addgsqword, _dart___addgsqword>('__addgsqword'))(
      Offset,
      Value,
    );
  }

  _dart___addgsqword? ___addgsqword;

  void __int2c() {
    return (___int2c ??=
        _dylib.lookupFunction<_c___int2c, _dart___int2c>('__int2c'))();
  }

  _dart___int2c? ___int2c;

  int ReadAcquire8(
    ffi.Pointer<ffi.Int8> Source,
  ) {
    return (_ReadAcquire8 ??= _dylib
        .lookupFunction<_c_ReadAcquire8, _dart_ReadAcquire8>('ReadAcquire8'))(
      Source,
    );
  }

  _dart_ReadAcquire8? _ReadAcquire8;

  int ReadNoFence8(
    ffi.Pointer<ffi.Int8> Source,
  ) {
    return (_ReadNoFence8 ??= _dylib
        .lookupFunction<_c_ReadNoFence8, _dart_ReadNoFence8>('ReadNoFence8'))(
      Source,
    );
  }

  _dart_ReadNoFence8? _ReadNoFence8;

  void WriteRelease8(
    ffi.Pointer<ffi.Int8> Destination,
    int Value,
  ) {
    return (_WriteRelease8 ??=
        _dylib.lookupFunction<_c_WriteRelease8, _dart_WriteRelease8>(
            'WriteRelease8'))(
      Destination,
      Value,
    );
  }

  _dart_WriteRelease8? _WriteRelease8;

  void WriteNoFence8(
    ffi.Pointer<ffi.Int8> Destination,
    int Value,
  ) {
    return (_WriteNoFence8 ??=
        _dylib.lookupFunction<_c_WriteNoFence8, _dart_WriteNoFence8>(
            'WriteNoFence8'))(
      Destination,
      Value,
    );
  }

  _dart_WriteNoFence8? _WriteNoFence8;

  int ReadAcquire16(
    ffi.Pointer<ffi.Int16> Source,
  ) {
    return (_ReadAcquire16 ??=
        _dylib.lookupFunction<_c_ReadAcquire16, _dart_ReadAcquire16>(
            'ReadAcquire16'))(
      Source,
    );
  }

  _dart_ReadAcquire16? _ReadAcquire16;

  int ReadNoFence16(
    ffi.Pointer<ffi.Int16> Source,
  ) {
    return (_ReadNoFence16 ??=
        _dylib.lookupFunction<_c_ReadNoFence16, _dart_ReadNoFence16>(
            'ReadNoFence16'))(
      Source,
    );
  }

  _dart_ReadNoFence16? _ReadNoFence16;

  void WriteRelease16(
    ffi.Pointer<ffi.Int16> Destination,
    int Value,
  ) {
    return (_WriteRelease16 ??=
        _dylib.lookupFunction<_c_WriteRelease16, _dart_WriteRelease16>(
            'WriteRelease16'))(
      Destination,
      Value,
    );
  }

  _dart_WriteRelease16? _WriteRelease16;

  void WriteNoFence16(
    ffi.Pointer<ffi.Int16> Destination,
    int Value,
  ) {
    return (_WriteNoFence16 ??=
        _dylib.lookupFunction<_c_WriteNoFence16, _dart_WriteNoFence16>(
            'WriteNoFence16'))(
      Destination,
      Value,
    );
  }

  _dart_WriteNoFence16? _WriteNoFence16;

  int ReadAcquire(
    ffi.Pointer<ffi.Int64> Source,
  ) {
    return (_ReadAcquire ??= _dylib
        .lookupFunction<_c_ReadAcquire, _dart_ReadAcquire>('ReadAcquire'))(
      Source,
    );
  }

  _dart_ReadAcquire? _ReadAcquire;

  int ReadNoFence(
    ffi.Pointer<ffi.Int64> Source,
  ) {
    return (_ReadNoFence ??= _dylib
        .lookupFunction<_c_ReadNoFence, _dart_ReadNoFence>('ReadNoFence'))(
      Source,
    );
  }

  _dart_ReadNoFence? _ReadNoFence;

  void WriteRelease(
    ffi.Pointer<ffi.Int64> Destination,
    int Value,
  ) {
    return (_WriteRelease ??= _dylib
        .lookupFunction<_c_WriteRelease, _dart_WriteRelease>('WriteRelease'))(
      Destination,
      Value,
    );
  }

  _dart_WriteRelease? _WriteRelease;

  void WriteNoFence(
    ffi.Pointer<ffi.Int64> Destination,
    int Value,
  ) {
    return (_WriteNoFence ??= _dylib
        .lookupFunction<_c_WriteNoFence, _dart_WriteNoFence>('WriteNoFence'))(
      Destination,
      Value,
    );
  }

  _dart_WriteNoFence? _WriteNoFence;

  int ReadAcquire64(
    ffi.Pointer<ffi.Int64> Source,
  ) {
    return (_ReadAcquire64 ??=
        _dylib.lookupFunction<_c_ReadAcquire64, _dart_ReadAcquire64>(
            'ReadAcquire64'))(
      Source,
    );
  }

  _dart_ReadAcquire64? _ReadAcquire64;

  int ReadNoFence64(
    ffi.Pointer<ffi.Int64> Source,
  ) {
    return (_ReadNoFence64 ??=
        _dylib.lookupFunction<_c_ReadNoFence64, _dart_ReadNoFence64>(
            'ReadNoFence64'))(
      Source,
    );
  }

  _dart_ReadNoFence64? _ReadNoFence64;

  void WriteRelease64(
    ffi.Pointer<ffi.Int64> Destination,
    int Value,
  ) {
    return (_WriteRelease64 ??=
        _dylib.lookupFunction<_c_WriteRelease64, _dart_WriteRelease64>(
            'WriteRelease64'))(
      Destination,
      Value,
    );
  }

  _dart_WriteRelease64? _WriteRelease64;

  void WriteNoFence64(
    ffi.Pointer<ffi.Int64> Destination,
    int Value,
  ) {
    return (_WriteNoFence64 ??=
        _dylib.lookupFunction<_c_WriteNoFence64, _dart_WriteNoFence64>(
            'WriteNoFence64'))(
      Destination,
      Value,
    );
  }

  _dart_WriteNoFence64? _WriteNoFence64;

  int ReadRaw8(
    ffi.Pointer<ffi.Int8> Source,
  ) {
    return (_ReadRaw8 ??=
        _dylib.lookupFunction<_c_ReadRaw8, _dart_ReadRaw8>('ReadRaw8'))(
      Source,
    );
  }

  _dart_ReadRaw8? _ReadRaw8;

  void WriteRaw8(
    ffi.Pointer<ffi.Int8> Destination,
    int Value,
  ) {
    return (_WriteRaw8 ??=
        _dylib.lookupFunction<_c_WriteRaw8, _dart_WriteRaw8>('WriteRaw8'))(
      Destination,
      Value,
    );
  }

  _dart_WriteRaw8? _WriteRaw8;

  int ReadRaw16(
    ffi.Pointer<ffi.Int16> Source,
  ) {
    return (_ReadRaw16 ??=
        _dylib.lookupFunction<_c_ReadRaw16, _dart_ReadRaw16>('ReadRaw16'))(
      Source,
    );
  }

  _dart_ReadRaw16? _ReadRaw16;

  void WriteRaw16(
    ffi.Pointer<ffi.Int16> Destination,
    int Value,
  ) {
    return (_WriteRaw16 ??=
        _dylib.lookupFunction<_c_WriteRaw16, _dart_WriteRaw16>('WriteRaw16'))(
      Destination,
      Value,
    );
  }

  _dart_WriteRaw16? _WriteRaw16;

  int ReadRaw(
    ffi.Pointer<ffi.Int64> Source,
  ) {
    return (_ReadRaw ??=
        _dylib.lookupFunction<_c_ReadRaw, _dart_ReadRaw>('ReadRaw'))(
      Source,
    );
  }

  _dart_ReadRaw? _ReadRaw;

  void WriteRaw(
    ffi.Pointer<ffi.Int64> Destination,
    int Value,
  ) {
    return (_WriteRaw ??=
        _dylib.lookupFunction<_c_WriteRaw, _dart_WriteRaw>('WriteRaw'))(
      Destination,
      Value,
    );
  }

  _dart_WriteRaw? _WriteRaw;

  int ReadRaw64(
    ffi.Pointer<ffi.Int64> Source,
  ) {
    return (_ReadRaw64 ??=
        _dylib.lookupFunction<_c_ReadRaw64, _dart_ReadRaw64>('ReadRaw64'))(
      Source,
    );
  }

  _dart_ReadRaw64? _ReadRaw64;

  void WriteRaw64(
    ffi.Pointer<ffi.Int64> Destination,
    int Value,
  ) {
    return (_WriteRaw64 ??=
        _dylib.lookupFunction<_c_WriteRaw64, _dart_WriteRaw64>('WriteRaw64'))(
      Destination,
      Value,
    );
  }

  _dart_WriteRaw64? _WriteRaw64;

  int ReadUCharAcquire(
    ffi.Pointer<ffi.Uint8> Source,
  ) {
    return (_ReadUCharAcquire ??=
        _dylib.lookupFunction<_c_ReadUCharAcquire, _dart_ReadUCharAcquire>(
            'ReadUCharAcquire'))(
      Source,
    );
  }

  _dart_ReadUCharAcquire? _ReadUCharAcquire;

  int ReadUCharNoFence(
    ffi.Pointer<ffi.Uint8> Source,
  ) {
    return (_ReadUCharNoFence ??=
        _dylib.lookupFunction<_c_ReadUCharNoFence, _dart_ReadUCharNoFence>(
            'ReadUCharNoFence'))(
      Source,
    );
  }

  _dart_ReadUCharNoFence? _ReadUCharNoFence;

  int ReadBooleanAcquire(
    ffi.Pointer<ffi.Uint8> Source,
  ) {
    return (_ReadBooleanAcquire ??=
        _dylib.lookupFunction<_c_ReadBooleanAcquire, _dart_ReadBooleanAcquire>(
            'ReadBooleanAcquire'))(
      Source,
    );
  }

  _dart_ReadBooleanAcquire? _ReadBooleanAcquire;

  int ReadBooleanNoFence(
    ffi.Pointer<ffi.Uint8> Source,
  ) {
    return (_ReadBooleanNoFence ??=
        _dylib.lookupFunction<_c_ReadBooleanNoFence, _dart_ReadBooleanNoFence>(
            'ReadBooleanNoFence'))(
      Source,
    );
  }

  _dart_ReadBooleanNoFence? _ReadBooleanNoFence;

  int ReadUCharRaw(
    ffi.Pointer<ffi.Uint8> Source,
  ) {
    return (_ReadUCharRaw ??= _dylib
        .lookupFunction<_c_ReadUCharRaw, _dart_ReadUCharRaw>('ReadUCharRaw'))(
      Source,
    );
  }

  _dart_ReadUCharRaw? _ReadUCharRaw;

  void WriteUCharRelease(
    ffi.Pointer<ffi.Uint8> Destination,
    int Value,
  ) {
    return (_WriteUCharRelease ??=
        _dylib.lookupFunction<_c_WriteUCharRelease, _dart_WriteUCharRelease>(
            'WriteUCharRelease'))(
      Destination,
      Value,
    );
  }

  _dart_WriteUCharRelease? _WriteUCharRelease;

  void WriteUCharNoFence(
    ffi.Pointer<ffi.Uint8> Destination,
    int Value,
  ) {
    return (_WriteUCharNoFence ??=
        _dylib.lookupFunction<_c_WriteUCharNoFence, _dart_WriteUCharNoFence>(
            'WriteUCharNoFence'))(
      Destination,
      Value,
    );
  }

  _dart_WriteUCharNoFence? _WriteUCharNoFence;

  void WriteBooleanRelease(
    ffi.Pointer<ffi.Uint8> Destination,
    int Value,
  ) {
    return (_WriteBooleanRelease ??= _dylib.lookupFunction<
        _c_WriteBooleanRelease,
        _dart_WriteBooleanRelease>('WriteBooleanRelease'))(
      Destination,
      Value,
    );
  }

  _dart_WriteBooleanRelease? _WriteBooleanRelease;

  void WriteBooleanNoFence(
    ffi.Pointer<ffi.Uint8> Destination,
    int Value,
  ) {
    return (_WriteBooleanNoFence ??= _dylib.lookupFunction<
        _c_WriteBooleanNoFence,
        _dart_WriteBooleanNoFence>('WriteBooleanNoFence'))(
      Destination,
      Value,
    );
  }

  _dart_WriteBooleanNoFence? _WriteBooleanNoFence;

  void WriteUCharRaw(
    ffi.Pointer<ffi.Uint8> Destination,
    int Value,
  ) {
    return (_WriteUCharRaw ??=
        _dylib.lookupFunction<_c_WriteUCharRaw, _dart_WriteUCharRaw>(
            'WriteUCharRaw'))(
      Destination,
      Value,
    );
  }

  _dart_WriteUCharRaw? _WriteUCharRaw;

  int ReadUShortAcquire(
    ffi.Pointer<ffi.Uint16> Source,
  ) {
    return (_ReadUShortAcquire ??=
        _dylib.lookupFunction<_c_ReadUShortAcquire, _dart_ReadUShortAcquire>(
            'ReadUShortAcquire'))(
      Source,
    );
  }

  _dart_ReadUShortAcquire? _ReadUShortAcquire;

  int ReadUShortNoFence(
    ffi.Pointer<ffi.Uint16> Source,
  ) {
    return (_ReadUShortNoFence ??=
        _dylib.lookupFunction<_c_ReadUShortNoFence, _dart_ReadUShortNoFence>(
            'ReadUShortNoFence'))(
      Source,
    );
  }

  _dart_ReadUShortNoFence? _ReadUShortNoFence;

  int ReadUShortRaw(
    ffi.Pointer<ffi.Uint16> Source,
  ) {
    return (_ReadUShortRaw ??=
        _dylib.lookupFunction<_c_ReadUShortRaw, _dart_ReadUShortRaw>(
            'ReadUShortRaw'))(
      Source,
    );
  }

  _dart_ReadUShortRaw? _ReadUShortRaw;

  void WriteUShortRelease(
    ffi.Pointer<ffi.Uint16> Destination,
    int Value,
  ) {
    return (_WriteUShortRelease ??=
        _dylib.lookupFunction<_c_WriteUShortRelease, _dart_WriteUShortRelease>(
            'WriteUShortRelease'))(
      Destination,
      Value,
    );
  }

  _dart_WriteUShortRelease? _WriteUShortRelease;

  void WriteUShortNoFence(
    ffi.Pointer<ffi.Uint16> Destination,
    int Value,
  ) {
    return (_WriteUShortNoFence ??=
        _dylib.lookupFunction<_c_WriteUShortNoFence, _dart_WriteUShortNoFence>(
            'WriteUShortNoFence'))(
      Destination,
      Value,
    );
  }

  _dart_WriteUShortNoFence? _WriteUShortNoFence;

  void WriteUShortRaw(
    ffi.Pointer<ffi.Uint16> Destination,
    int Value,
  ) {
    return (_WriteUShortRaw ??=
        _dylib.lookupFunction<_c_WriteUShortRaw, _dart_WriteUShortRaw>(
            'WriteUShortRaw'))(
      Destination,
      Value,
    );
  }

  _dart_WriteUShortRaw? _WriteUShortRaw;

  int ReadULongAcquire(
    ffi.Pointer<ffi.Uint64> Source,
  ) {
    return (_ReadULongAcquire ??=
        _dylib.lookupFunction<_c_ReadULongAcquire, _dart_ReadULongAcquire>(
            'ReadULongAcquire'))(
      Source,
    );
  }

  _dart_ReadULongAcquire? _ReadULongAcquire;

  int ReadULongNoFence(
    ffi.Pointer<ffi.Uint64> Source,
  ) {
    return (_ReadULongNoFence ??=
        _dylib.lookupFunction<_c_ReadULongNoFence, _dart_ReadULongNoFence>(
            'ReadULongNoFence'))(
      Source,
    );
  }

  _dart_ReadULongNoFence? _ReadULongNoFence;

  int ReadULongRaw(
    ffi.Pointer<ffi.Uint64> Source,
  ) {
    return (_ReadULongRaw ??= _dylib
        .lookupFunction<_c_ReadULongRaw, _dart_ReadULongRaw>('ReadULongRaw'))(
      Source,
    );
  }

  _dart_ReadULongRaw? _ReadULongRaw;

  void WriteULongRelease(
    ffi.Pointer<ffi.Uint64> Destination,
    int Value,
  ) {
    return (_WriteULongRelease ??=
        _dylib.lookupFunction<_c_WriteULongRelease, _dart_WriteULongRelease>(
            'WriteULongRelease'))(
      Destination,
      Value,
    );
  }

  _dart_WriteULongRelease? _WriteULongRelease;

  void WriteULongNoFence(
    ffi.Pointer<ffi.Uint64> Destination,
    int Value,
  ) {
    return (_WriteULongNoFence ??=
        _dylib.lookupFunction<_c_WriteULongNoFence, _dart_WriteULongNoFence>(
            'WriteULongNoFence'))(
      Destination,
      Value,
    );
  }

  _dart_WriteULongNoFence? _WriteULongNoFence;

  void WriteULongRaw(
    ffi.Pointer<ffi.Uint64> Destination,
    int Value,
  ) {
    return (_WriteULongRaw ??=
        _dylib.lookupFunction<_c_WriteULongRaw, _dart_WriteULongRaw>(
            'WriteULongRaw'))(
      Destination,
      Value,
    );
  }

  _dart_WriteULongRaw? _WriteULongRaw;

  int ReadULong64Acquire(
    ffi.Pointer<ffi.Uint64> Source,
  ) {
    return (_ReadULong64Acquire ??=
        _dylib.lookupFunction<_c_ReadULong64Acquire, _dart_ReadULong64Acquire>(
            'ReadULong64Acquire'))(
      Source,
    );
  }

  _dart_ReadULong64Acquire? _ReadULong64Acquire;

  int ReadULong64NoFence(
    ffi.Pointer<ffi.Uint64> Source,
  ) {
    return (_ReadULong64NoFence ??=
        _dylib.lookupFunction<_c_ReadULong64NoFence, _dart_ReadULong64NoFence>(
            'ReadULong64NoFence'))(
      Source,
    );
  }

  _dart_ReadULong64NoFence? _ReadULong64NoFence;

  int ReadULong64Raw(
    ffi.Pointer<ffi.Uint64> Source,
  ) {
    return (_ReadULong64Raw ??=
        _dylib.lookupFunction<_c_ReadULong64Raw, _dart_ReadULong64Raw>(
            'ReadULong64Raw'))(
      Source,
    );
  }

  _dart_ReadULong64Raw? _ReadULong64Raw;

  void WriteULong64Release(
    ffi.Pointer<ffi.Uint64> Destination,
    int Value,
  ) {
    return (_WriteULong64Release ??= _dylib.lookupFunction<
        _c_WriteULong64Release,
        _dart_WriteULong64Release>('WriteULong64Release'))(
      Destination,
      Value,
    );
  }

  _dart_WriteULong64Release? _WriteULong64Release;

  void WriteULong64NoFence(
    ffi.Pointer<ffi.Uint64> Destination,
    int Value,
  ) {
    return (_WriteULong64NoFence ??= _dylib.lookupFunction<
        _c_WriteULong64NoFence,
        _dart_WriteULong64NoFence>('WriteULong64NoFence'))(
      Destination,
      Value,
    );
  }

  _dart_WriteULong64NoFence? _WriteULong64NoFence;

  void WriteULong64Raw(
    ffi.Pointer<ffi.Uint64> Destination,
    int Value,
  ) {
    return (_WriteULong64Raw ??=
        _dylib.lookupFunction<_c_WriteULong64Raw, _dart_WriteULong64Raw>(
            'WriteULong64Raw'))(
      Destination,
      Value,
    );
  }

  _dart_WriteULong64Raw? _WriteULong64Raw;

  ffi.Pointer<ffi.Void> ReadPointerAcquire(
    ffi.Pointer<ffi.Pointer<ffi.Void>> Source,
  ) {
    return (_ReadPointerAcquire ??=
        _dylib.lookupFunction<_c_ReadPointerAcquire, _dart_ReadPointerAcquire>(
            'ReadPointerAcquire'))(
      Source,
    );
  }

  _dart_ReadPointerAcquire? _ReadPointerAcquire;

  ffi.Pointer<ffi.Void> ReadPointerNoFence(
    ffi.Pointer<ffi.Pointer<ffi.Void>> Source,
  ) {
    return (_ReadPointerNoFence ??=
        _dylib.lookupFunction<_c_ReadPointerNoFence, _dart_ReadPointerNoFence>(
            'ReadPointerNoFence'))(
      Source,
    );
  }

  _dart_ReadPointerNoFence? _ReadPointerNoFence;

  ffi.Pointer<ffi.Void> ReadPointerRaw(
    ffi.Pointer<ffi.Pointer<ffi.Void>> Source,
  ) {
    return (_ReadPointerRaw ??=
        _dylib.lookupFunction<_c_ReadPointerRaw, _dart_ReadPointerRaw>(
            'ReadPointerRaw'))(
      Source,
    );
  }

  _dart_ReadPointerRaw? _ReadPointerRaw;

  void WritePointerRelease(
    ffi.Pointer<ffi.Pointer<ffi.Void>> Destination,
    ffi.Pointer<ffi.Void> Value,
  ) {
    return (_WritePointerRelease ??= _dylib.lookupFunction<
        _c_WritePointerRelease,
        _dart_WritePointerRelease>('WritePointerRelease'))(
      Destination,
      Value,
    );
  }

  _dart_WritePointerRelease? _WritePointerRelease;

  void WritePointerNoFence(
    ffi.Pointer<ffi.Pointer<ffi.Void>> Destination,
    ffi.Pointer<ffi.Void> Value,
  ) {
    return (_WritePointerNoFence ??= _dylib.lookupFunction<
        _c_WritePointerNoFence,
        _dart_WritePointerNoFence>('WritePointerNoFence'))(
      Destination,
      Value,
    );
  }

  _dart_WritePointerNoFence? _WritePointerNoFence;

  void WritePointerRaw(
    ffi.Pointer<ffi.Pointer<ffi.Void>> Destination,
    ffi.Pointer<ffi.Void> Value,
  ) {
    return (_WritePointerRaw ??=
        _dylib.lookupFunction<_c_WritePointerRaw, _dart_WritePointerRaw>(
            'WritePointerRaw'))(
      Destination,
      Value,
    );
  }

  _dart_WritePointerRaw? _WritePointerRaw;

  int RtlCaptureStackBackTrace(
    int FramesToSkip,
    int FramesToCapture,
    ffi.Pointer<ffi.Pointer<ffi.Void>> BackTrace,
    ffi.Pointer<ffi.Uint64> BackTraceHash,
  ) {
    return (_RtlCaptureStackBackTrace ??= _dylib.lookupFunction<
        _c_RtlCaptureStackBackTrace,
        _dart_RtlCaptureStackBackTrace>('RtlCaptureStackBackTrace'))(
      FramesToSkip,
      FramesToCapture,
      BackTrace,
      BackTraceHash,
    );
  }

  _dart_RtlCaptureStackBackTrace? _RtlCaptureStackBackTrace;

  void RtlCaptureContext(
    ffi.Pointer<PCONTEXT> ContextRecord,
  ) {
    return (_RtlCaptureContext ??=
        _dylib.lookupFunction<_c_RtlCaptureContext, _dart_RtlCaptureContext>(
            'RtlCaptureContext'))(
      ContextRecord,
    );
  }

  _dart_RtlCaptureContext? _RtlCaptureContext;

  void RtlCaptureContext2(
    ffi.Pointer<PCONTEXT> ContextRecord,
  ) {
    return (_RtlCaptureContext2 ??=
        _dylib.lookupFunction<_c_RtlCaptureContext2, _dart_RtlCaptureContext2>(
            'RtlCaptureContext2'))(
      ContextRecord,
    );
  }

  _dart_RtlCaptureContext2? _RtlCaptureContext2;

  void RtlUnwind(
    ffi.Pointer<ffi.Void> TargetFrame,
    ffi.Pointer<ffi.Void> TargetIp,
    ffi.Pointer<EXCEPTION_RECORD> ExceptionRecord,
    ffi.Pointer<ffi.Void> ReturnValue,
  ) {
    return (_RtlUnwind ??=
        _dylib.lookupFunction<_c_RtlUnwind, _dart_RtlUnwind>('RtlUnwind'))(
      TargetFrame,
      TargetIp,
      ExceptionRecord,
      ReturnValue,
    );
  }

  _dart_RtlUnwind? _RtlUnwind;

  int RtlAddFunctionTable(
    ffi.Pointer<_PIMAGE_RUNTIME_FUNCTION_ENTRY> FunctionTable,
    int EntryCount,
    int BaseAddress,
  ) {
    return (_RtlAddFunctionTable ??= _dylib.lookupFunction<
        _c_RtlAddFunctionTable,
        _dart_RtlAddFunctionTable>('RtlAddFunctionTable'))(
      FunctionTable,
      EntryCount,
      BaseAddress,
    );
  }

  _dart_RtlAddFunctionTable? _RtlAddFunctionTable;

  int RtlDeleteFunctionTable(
    ffi.Pointer<_PIMAGE_RUNTIME_FUNCTION_ENTRY> FunctionTable,
  ) {
    return (_RtlDeleteFunctionTable ??= _dylib.lookupFunction<
        _c_RtlDeleteFunctionTable,
        _dart_RtlDeleteFunctionTable>('RtlDeleteFunctionTable'))(
      FunctionTable,
    );
  }

  _dart_RtlDeleteFunctionTable? _RtlDeleteFunctionTable;

  int RtlInstallFunctionTableCallback(
    int TableIdentifier,
    int BaseAddress,
    int Length,
    ffi.Pointer<ffi.NativeFunction<PGET_RUNTIME_FUNCTION_CALLBACK>> Callback,
    ffi.Pointer<ffi.Void> Context,
    ffi.Pointer<ffi.Uint16> OutOfProcessCallbackDll,
  ) {
    return (_RtlInstallFunctionTableCallback ??= _dylib.lookupFunction<
            _c_RtlInstallFunctionTableCallback,
            _dart_RtlInstallFunctionTableCallback>(
        'RtlInstallFunctionTableCallback'))(
      TableIdentifier,
      BaseAddress,
      Length,
      Callback,
      Context,
      OutOfProcessCallbackDll,
    );
  }

  _dart_RtlInstallFunctionTableCallback? _RtlInstallFunctionTableCallback;

  int RtlAddGrowableFunctionTable(
    ffi.Pointer<ffi.Pointer<ffi.Void>> DynamicTable,
    ffi.Pointer<_PIMAGE_RUNTIME_FUNCTION_ENTRY> FunctionTable,
    int EntryCount,
    int MaximumEntryCount,
    int RangeBase,
    int RangeEnd,
  ) {
    return (_RtlAddGrowableFunctionTable ??= _dylib.lookupFunction<
        _c_RtlAddGrowableFunctionTable,
        _dart_RtlAddGrowableFunctionTable>('RtlAddGrowableFunctionTable'))(
      DynamicTable,
      FunctionTable,
      EntryCount,
      MaximumEntryCount,
      RangeBase,
      RangeEnd,
    );
  }

  _dart_RtlAddGrowableFunctionTable? _RtlAddGrowableFunctionTable;

  void RtlGrowFunctionTable(
    ffi.Pointer<ffi.Void> DynamicTable,
    int NewEntryCount,
  ) {
    return (_RtlGrowFunctionTable ??= _dylib.lookupFunction<
        _c_RtlGrowFunctionTable,
        _dart_RtlGrowFunctionTable>('RtlGrowFunctionTable'))(
      DynamicTable,
      NewEntryCount,
    );
  }

  _dart_RtlGrowFunctionTable? _RtlGrowFunctionTable;

  void RtlDeleteGrowableFunctionTable(
    ffi.Pointer<ffi.Void> DynamicTable,
  ) {
    return (_RtlDeleteGrowableFunctionTable ??= _dylib.lookupFunction<
            _c_RtlDeleteGrowableFunctionTable,
            _dart_RtlDeleteGrowableFunctionTable>(
        'RtlDeleteGrowableFunctionTable'))(
      DynamicTable,
    );
  }

  _dart_RtlDeleteGrowableFunctionTable? _RtlDeleteGrowableFunctionTable;

  ffi.Pointer<_PIMAGE_RUNTIME_FUNCTION_ENTRY> RtlLookupFunctionEntry(
    int ControlPc,
    ffi.Pointer<ffi.Uint64> ImageBase,
    ffi.Pointer<PUNWIND_HISTORY_TABLE> HistoryTable,
  ) {
    return (_RtlLookupFunctionEntry ??= _dylib.lookupFunction<
        _c_RtlLookupFunctionEntry,
        _dart_RtlLookupFunctionEntry>('RtlLookupFunctionEntry'))(
      ControlPc,
      ImageBase,
      HistoryTable,
    );
  }

  _dart_RtlLookupFunctionEntry? _RtlLookupFunctionEntry;

  void RtlRestoreContext(
    ffi.Pointer<PCONTEXT> ContextRecord,
    ffi.Pointer<EXCEPTION_RECORD> ExceptionRecord,
  ) {
    return (_RtlRestoreContext ??=
        _dylib.lookupFunction<_c_RtlRestoreContext, _dart_RtlRestoreContext>(
            'RtlRestoreContext'))(
      ContextRecord,
      ExceptionRecord,
    );
  }

  _dart_RtlRestoreContext? _RtlRestoreContext;

  void RtlUnwindEx(
    ffi.Pointer<ffi.Void> TargetFrame,
    ffi.Pointer<ffi.Void> TargetIp,
    ffi.Pointer<EXCEPTION_RECORD> ExceptionRecord,
    ffi.Pointer<ffi.Void> ReturnValue,
    ffi.Pointer<PCONTEXT> ContextRecord,
    ffi.Pointer<PUNWIND_HISTORY_TABLE> HistoryTable,
  ) {
    return (_RtlUnwindEx ??= _dylib
        .lookupFunction<_c_RtlUnwindEx, _dart_RtlUnwindEx>('RtlUnwindEx'))(
      TargetFrame,
      TargetIp,
      ExceptionRecord,
      ReturnValue,
      ContextRecord,
      HistoryTable,
    );
  }

  _dart_RtlUnwindEx? _RtlUnwindEx;

  ffi.Pointer<ffi.NativeFunction<PEXCEPTION_ROUTINE>> RtlVirtualUnwind(
    int HandlerType,
    int ImageBase,
    int ControlPc,
    ffi.Pointer<_PIMAGE_RUNTIME_FUNCTION_ENTRY> FunctionEntry,
    ffi.Pointer<PCONTEXT> ContextRecord,
    ffi.Pointer<ffi.Pointer<ffi.Void>> HandlerData,
    ffi.Pointer<ffi.Uint64> EstablisherFrame,
    ffi.Pointer<PKNONVOLATILE_CONTEXT_POINTERS> ContextPointers,
  ) {
    return (_RtlVirtualUnwind ??=
        _dylib.lookupFunction<_c_RtlVirtualUnwind, _dart_RtlVirtualUnwind>(
            'RtlVirtualUnwind'))(
      HandlerType,
      ImageBase,
      ControlPc,
      FunctionEntry,
      ContextRecord,
      HandlerData,
      EstablisherFrame,
      ContextPointers,
    );
  }

  _dart_RtlVirtualUnwind? _RtlVirtualUnwind;

  void RtlRaiseException(
    ffi.Pointer<EXCEPTION_RECORD> ExceptionRecord,
  ) {
    return (_RtlRaiseException ??=
        _dylib.lookupFunction<_c_RtlRaiseException, _dart_RtlRaiseException>(
            'RtlRaiseException'))(
      ExceptionRecord,
    );
  }

  _dart_RtlRaiseException? _RtlRaiseException;

  ffi.Pointer<ffi.Void> RtlPcToFileHeader(
    ffi.Pointer<ffi.Void> PcValue,
    ffi.Pointer<ffi.Pointer<ffi.Void>> BaseOfImage,
  ) {
    return (_RtlPcToFileHeader ??=
        _dylib.lookupFunction<_c_RtlPcToFileHeader, _dart_RtlPcToFileHeader>(
            'RtlPcToFileHeader'))(
      PcValue,
      BaseOfImage,
    );
  }

  _dart_RtlPcToFileHeader? _RtlPcToFileHeader;

  int RtlCompareMemory(
    ffi.Pointer<ffi.Void> Source1,
    ffi.Pointer<ffi.Void> Source2,
    int Length,
  ) {
    return (_RtlCompareMemory ??=
        _dylib.lookupFunction<_c_RtlCompareMemory, _dart_RtlCompareMemory>(
            'RtlCompareMemory'))(
      Source1,
      Source2,
      Length,
    );
  }

  _dart_RtlCompareMemory? _RtlCompareMemory;

  int RtlGetReturnAddressHijackTarget() {
    return (_RtlGetReturnAddressHijackTarget ??= _dylib.lookupFunction<
            _c_RtlGetReturnAddressHijackTarget,
            _dart_RtlGetReturnAddressHijackTarget>(
        'RtlGetReturnAddressHijackTarget'))();
  }

  _dart_RtlGetReturnAddressHijackTarget? _RtlGetReturnAddressHijackTarget;

  void __fastfail(
    int Code,
  ) {
    return (___fastfail ??=
        _dylib.lookupFunction<_c___fastfail, _dart___fastfail>('__fastfail'))(
      Code,
    );
  }

  _dart___fastfail? ___fastfail;

  int HEAP_MAKE_TAG_FLAGS(
    int TagBase,
    int Tag,
  ) {
    return (_HEAP_MAKE_TAG_FLAGS ??= _dylib.lookupFunction<
        _c_HEAP_MAKE_TAG_FLAGS,
        _dart_HEAP_MAKE_TAG_FLAGS>('HEAP_MAKE_TAG_FLAGS'))(
      TagBase,
      Tag,
    );
  }

  _dart_HEAP_MAKE_TAG_FLAGS? _HEAP_MAKE_TAG_FLAGS;

  ffi.Pointer<ffi.Void> RtlSecureZeroMemory(
    ffi.Pointer<ffi.Void> ptr,
    int cnt,
  ) {
    return (_RtlSecureZeroMemory ??= _dylib.lookupFunction<
        _c_RtlSecureZeroMemory,
        _dart_RtlSecureZeroMemory>('RtlSecureZeroMemory'))(
      ptr,
      cnt,
    );
  }

  _dart_RtlSecureZeroMemory? _RtlSecureZeroMemory;

  int VerSetConditionMask(
    int ConditionMask,
    int TypeMask,
    int Condition,
  ) {
    return (_VerSetConditionMask ??= _dylib.lookupFunction<
        _c_VerSetConditionMask,
        _dart_VerSetConditionMask>('VerSetConditionMask'))(
      ConditionMask,
      TypeMask,
      Condition,
    );
  }

  _dart_VerSetConditionMask? _VerSetConditionMask;

  int RtlGetProductInfo(
    int OSMajorVersion,
    int OSMinorVersion,
    int SpMajorVersion,
    int SpMinorVersion,
    ffi.Pointer<ffi.Uint64> ReturnedProductType,
  ) {
    return (_RtlGetProductInfo ??=
        _dylib.lookupFunction<_c_RtlGetProductInfo, _dart_RtlGetProductInfo>(
            'RtlGetProductInfo'))(
      OSMajorVersion,
      OSMinorVersion,
      SpMajorVersion,
      SpMinorVersion,
      ReturnedProductType,
    );
  }

  _dart_RtlGetProductInfo? _RtlGetProductInfo;

  int RtlCrc32(
    ffi.Pointer<ffi.Void> Buffer,
    int Size,
    int InitialCrc,
  ) {
    return (_RtlCrc32 ??=
        _dylib.lookupFunction<_c_RtlCrc32, _dart_RtlCrc32>('RtlCrc32'))(
      Buffer,
      Size,
      InitialCrc,
    );
  }

  _dart_RtlCrc32? _RtlCrc32;

  int RtlCrc64(
    ffi.Pointer<ffi.Void> Buffer,
    int Size,
    int InitialCrc,
  ) {
    return (_RtlCrc64 ??=
        _dylib.lookupFunction<_c_RtlCrc64, _dart_RtlCrc64>('RtlCrc64'))(
      Buffer,
      Size,
      InitialCrc,
    );
  }

  _dart_RtlCrc64? _RtlCrc64;

  int RtlOsDeploymentState(
    int Flags,
  ) {
    return (_RtlOsDeploymentState ??= _dylib.lookupFunction<
        _c_RtlOsDeploymentState,
        _dart_RtlOsDeploymentState>('RtlOsDeploymentState'))(
      Flags,
    );
  }

  _dart_RtlOsDeploymentState? _RtlOsDeploymentState;

  int RtlGetNonVolatileToken(
    ffi.Pointer<ffi.Void> NvBuffer,
    int Size,
    ffi.Pointer<ffi.Pointer<ffi.Void>> NvToken,
  ) {
    return (_RtlGetNonVolatileToken ??= _dylib.lookupFunction<
        _c_RtlGetNonVolatileToken,
        _dart_RtlGetNonVolatileToken>('RtlGetNonVolatileToken'))(
      NvBuffer,
      Size,
      NvToken,
    );
  }

  _dart_RtlGetNonVolatileToken? _RtlGetNonVolatileToken;

  int RtlFreeNonVolatileToken(
    ffi.Pointer<ffi.Void> NvToken,
  ) {
    return (_RtlFreeNonVolatileToken ??= _dylib.lookupFunction<
        _c_RtlFreeNonVolatileToken,
        _dart_RtlFreeNonVolatileToken>('RtlFreeNonVolatileToken'))(
      NvToken,
    );
  }

  _dart_RtlFreeNonVolatileToken? _RtlFreeNonVolatileToken;

  int RtlFlushNonVolatileMemory(
    ffi.Pointer<ffi.Void> NvToken,
    ffi.Pointer<ffi.Void> NvBuffer,
    int Size,
    int Flags,
  ) {
    return (_RtlFlushNonVolatileMemory ??= _dylib.lookupFunction<
        _c_RtlFlushNonVolatileMemory,
        _dart_RtlFlushNonVolatileMemory>('RtlFlushNonVolatileMemory'))(
      NvToken,
      NvBuffer,
      Size,
      Flags,
    );
  }

  _dart_RtlFlushNonVolatileMemory? _RtlFlushNonVolatileMemory;

  int RtlDrainNonVolatileFlush(
    ffi.Pointer<ffi.Void> NvToken,
  ) {
    return (_RtlDrainNonVolatileFlush ??= _dylib.lookupFunction<
        _c_RtlDrainNonVolatileFlush,
        _dart_RtlDrainNonVolatileFlush>('RtlDrainNonVolatileFlush'))(
      NvToken,
    );
  }

  _dart_RtlDrainNonVolatileFlush? _RtlDrainNonVolatileFlush;

  int RtlWriteNonVolatileMemory(
    ffi.Pointer<ffi.Void> NvToken,
    ffi.Pointer<ffi.Void> NvDestination,
    ffi.Pointer<ffi.Void> Source,
    int Size,
    int Flags,
  ) {
    return (_RtlWriteNonVolatileMemory ??= _dylib.lookupFunction<
        _c_RtlWriteNonVolatileMemory,
        _dart_RtlWriteNonVolatileMemory>('RtlWriteNonVolatileMemory'))(
      NvToken,
      NvDestination,
      Source,
      Size,
      Flags,
    );
  }

  _dart_RtlWriteNonVolatileMemory? _RtlWriteNonVolatileMemory;

  int RtlFillNonVolatileMemory(
    ffi.Pointer<ffi.Void> NvToken,
    ffi.Pointer<ffi.Void> NvDestination,
    int Size,
    int Value,
    int Flags,
  ) {
    return (_RtlFillNonVolatileMemory ??= _dylib.lookupFunction<
        _c_RtlFillNonVolatileMemory,
        _dart_RtlFillNonVolatileMemory>('RtlFillNonVolatileMemory'))(
      NvToken,
      NvDestination,
      Size,
      Value,
      Flags,
    );
  }

  _dart_RtlFillNonVolatileMemory? _RtlFillNonVolatileMemory;

  int RtlFlushNonVolatileMemoryRanges(
    ffi.Pointer<ffi.Void> NvToken,
    ffi.Pointer<PNV_MEMORY_RANGE> NvRanges,
    int NumRanges,
    int Flags,
  ) {
    return (_RtlFlushNonVolatileMemoryRanges ??= _dylib.lookupFunction<
            _c_RtlFlushNonVolatileMemoryRanges,
            _dart_RtlFlushNonVolatileMemoryRanges>(
        'RtlFlushNonVolatileMemoryRanges'))(
      NvToken,
      NvRanges,
      NumRanges,
      Flags,
    );
  }

  _dart_RtlFlushNonVolatileMemoryRanges? _RtlFlushNonVolatileMemoryRanges;

  int RtlInitializeCorrelationVector(
    ffi.Pointer<CORRELATION_VECTOR> CorrelationVector,
    int Version,
    ffi.Pointer<GUID> Guid,
  ) {
    return (_RtlInitializeCorrelationVector ??= _dylib.lookupFunction<
            _c_RtlInitializeCorrelationVector,
            _dart_RtlInitializeCorrelationVector>(
        'RtlInitializeCorrelationVector'))(
      CorrelationVector,
      Version,
      Guid,
    );
  }

  _dart_RtlInitializeCorrelationVector? _RtlInitializeCorrelationVector;

  int RtlIncrementCorrelationVector(
    ffi.Pointer<CORRELATION_VECTOR> CorrelationVector,
  ) {
    return (_RtlIncrementCorrelationVector ??= _dylib.lookupFunction<
        _c_RtlIncrementCorrelationVector,
        _dart_RtlIncrementCorrelationVector>('RtlIncrementCorrelationVector'))(
      CorrelationVector,
    );
  }

  _dart_RtlIncrementCorrelationVector? _RtlIncrementCorrelationVector;

  int RtlExtendCorrelationVector(
    ffi.Pointer<CORRELATION_VECTOR> CorrelationVector,
  ) {
    return (_RtlExtendCorrelationVector ??= _dylib.lookupFunction<
        _c_RtlExtendCorrelationVector,
        _dart_RtlExtendCorrelationVector>('RtlExtendCorrelationVector'))(
      CorrelationVector,
    );
  }

  _dart_RtlExtendCorrelationVector? _RtlExtendCorrelationVector;

  int RtlValidateCorrelationVector(
    ffi.Pointer<CORRELATION_VECTOR> Vector,
  ) {
    return (_RtlValidateCorrelationVector ??= _dylib.lookupFunction<
        _c_RtlValidateCorrelationVector,
        _dart_RtlValidateCorrelationVector>('RtlValidateCorrelationVector'))(
      Vector,
    );
  }

  _dart_RtlValidateCorrelationVector? _RtlValidateCorrelationVector;

  void CUSTOM_SYSTEM_EVENT_TRIGGER_INIT(
    ffi.Pointer<PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG> Config,
    ffi.Pointer<ffi.Uint16> TriggerId,
  ) {
    return (_CUSTOM_SYSTEM_EVENT_TRIGGER_INIT ??= _dylib.lookupFunction<
            _c_CUSTOM_SYSTEM_EVENT_TRIGGER_INIT,
            _dart_CUSTOM_SYSTEM_EVENT_TRIGGER_INIT>(
        'CUSTOM_SYSTEM_EVENT_TRIGGER_INIT'))(
      Config,
      TriggerId,
    );
  }

  _dart_CUSTOM_SYSTEM_EVENT_TRIGGER_INIT? _CUSTOM_SYSTEM_EVENT_TRIGGER_INIT;

  int RtlRaiseCustomSystemEventTrigger(
    ffi.Pointer<PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG> TriggerConfig,
  ) {
    return (_RtlRaiseCustomSystemEventTrigger ??= _dylib.lookupFunction<
            _c_RtlRaiseCustomSystemEventTrigger,
            _dart_RtlRaiseCustomSystemEventTrigger>(
        'RtlRaiseCustomSystemEventTrigger'))(
      TriggerConfig,
    );
  }

  _dart_RtlRaiseCustomSystemEventTrigger? _RtlRaiseCustomSystemEventTrigger;

  int RtlIsZeroMemory(
    ffi.Pointer<ffi.Void> Buffer,
    int Length,
  ) {
    return (_RtlIsZeroMemory ??=
        _dylib.lookupFunction<_c_RtlIsZeroMemory, _dart_RtlIsZeroMemory>(
            'RtlIsZeroMemory'))(
      Buffer,
      Length,
    );
  }

  _dart_RtlIsZeroMemory? _RtlIsZeroMemory;

  int RtlNormalizeSecurityDescriptor(
    ffi.Pointer<ffi.Pointer<ffi.Void>> SecurityDescriptor,
    int SecurityDescriptorLength,
    ffi.Pointer<ffi.Pointer<ffi.Void>> NewSecurityDescriptor,
    ffi.Pointer<ffi.Uint64> NewSecurityDescriptorLength,
    int CheckOnly,
  ) {
    return (_RtlNormalizeSecurityDescriptor ??= _dylib.lookupFunction<
            _c_RtlNormalizeSecurityDescriptor,
            _dart_RtlNormalizeSecurityDescriptor>(
        'RtlNormalizeSecurityDescriptor'))(
      SecurityDescriptor,
      SecurityDescriptorLength,
      NewSecurityDescriptor,
      NewSecurityDescriptorLength,
      CheckOnly,
    );
  }

  _dart_RtlNormalizeSecurityDescriptor? _RtlNormalizeSecurityDescriptor;

  void RtlGetDeviceFamilyInfoEnum(
    ffi.Pointer<ffi.Uint64> pullUAPInfo,
    ffi.Pointer<ffi.Uint64> pulDeviceFamily,
    ffi.Pointer<ffi.Uint64> pulDeviceForm,
  ) {
    return (_RtlGetDeviceFamilyInfoEnum ??= _dylib.lookupFunction<
        _c_RtlGetDeviceFamilyInfoEnum,
        _dart_RtlGetDeviceFamilyInfoEnum>('RtlGetDeviceFamilyInfoEnum'))(
      pullUAPInfo,
      pulDeviceFamily,
      pulDeviceForm,
    );
  }

  _dart_RtlGetDeviceFamilyInfoEnum? _RtlGetDeviceFamilyInfoEnum;

  int RtlConvertDeviceFamilyInfoToString(
    ffi.Pointer<ffi.Uint64> pulDeviceFamilyBufferSize,
    ffi.Pointer<ffi.Uint64> pulDeviceFormBufferSize,
    ffi.Pointer<ffi.Uint16> DeviceFamily,
    ffi.Pointer<ffi.Uint16> DeviceForm,
  ) {
    return (_RtlConvertDeviceFamilyInfoToString ??= _dylib.lookupFunction<
            _c_RtlConvertDeviceFamilyInfoToString,
            _dart_RtlConvertDeviceFamilyInfoToString>(
        'RtlConvertDeviceFamilyInfoToString'))(
      pulDeviceFamilyBufferSize,
      pulDeviceFormBufferSize,
      DeviceFamily,
      DeviceForm,
    );
  }

  _dart_RtlConvertDeviceFamilyInfoToString? _RtlConvertDeviceFamilyInfoToString;

  int RtlSwitchedVVI(
    ffi.Pointer<PRTL_OSVERSIONINFOEXW> VersionInfo,
    int TypeMask,
    int ConditionMask,
  ) {
    return (_RtlSwitchedVVI ??=
        _dylib.lookupFunction<_c_RtlSwitchedVVI, _dart_RtlSwitchedVVI>(
            'RtlSwitchedVVI'))(
      VersionInfo,
      TypeMask,
      ConditionMask,
    );
  }

  _dart_RtlSwitchedVVI? _RtlSwitchedVVI;

  void TpInitializeCallbackEnviron(
    ffi.Pointer<TP_CALLBACK_ENVIRON_V3> CallbackEnviron,
  ) {
    return (_TpInitializeCallbackEnviron ??= _dylib.lookupFunction<
        _c_TpInitializeCallbackEnviron,
        _dart_TpInitializeCallbackEnviron>('TpInitializeCallbackEnviron'))(
      CallbackEnviron,
    );
  }

  _dart_TpInitializeCallbackEnviron? _TpInitializeCallbackEnviron;

  void TpSetCallbackThreadpool(
    ffi.Pointer<TP_CALLBACK_ENVIRON_V3> CallbackEnviron,
    ffi.Pointer<_TP_POOL> Pool,
  ) {
    return (_TpSetCallbackThreadpool ??= _dylib.lookupFunction<
        _c_TpSetCallbackThreadpool,
        _dart_TpSetCallbackThreadpool>('TpSetCallbackThreadpool'))(
      CallbackEnviron,
      Pool,
    );
  }

  _dart_TpSetCallbackThreadpool? _TpSetCallbackThreadpool;

  void TpSetCallbackCleanupGroup(
    ffi.Pointer<TP_CALLBACK_ENVIRON_V3> CallbackEnviron,
    ffi.Pointer<_TP_CLEANUP_GROUP> CleanupGroup,
    ffi.Pointer<ffi.NativeFunction<PTP_CLEANUP_GROUP_CANCEL_CALLBACK>>
        CleanupGroupCancelCallback,
  ) {
    return (_TpSetCallbackCleanupGroup ??= _dylib.lookupFunction<
        _c_TpSetCallbackCleanupGroup,
        _dart_TpSetCallbackCleanupGroup>('TpSetCallbackCleanupGroup'))(
      CallbackEnviron,
      CleanupGroup,
      CleanupGroupCancelCallback,
    );
  }

  _dart_TpSetCallbackCleanupGroup? _TpSetCallbackCleanupGroup;

  void TpSetCallbackActivationContext(
    ffi.Pointer<TP_CALLBACK_ENVIRON_V3> CallbackEnviron,
    ffi.Pointer<_ACTIVATION_CONTEXT> ActivationContext,
  ) {
    return (_TpSetCallbackActivationContext ??= _dylib.lookupFunction<
            _c_TpSetCallbackActivationContext,
            _dart_TpSetCallbackActivationContext>(
        'TpSetCallbackActivationContext'))(
      CallbackEnviron,
      ActivationContext,
    );
  }

  _dart_TpSetCallbackActivationContext? _TpSetCallbackActivationContext;

  void TpSetCallbackNoActivationContext(
    ffi.Pointer<TP_CALLBACK_ENVIRON_V3> CallbackEnviron,
  ) {
    return (_TpSetCallbackNoActivationContext ??= _dylib.lookupFunction<
            _c_TpSetCallbackNoActivationContext,
            _dart_TpSetCallbackNoActivationContext>(
        'TpSetCallbackNoActivationContext'))(
      CallbackEnviron,
    );
  }

  _dart_TpSetCallbackNoActivationContext? _TpSetCallbackNoActivationContext;

  void TpSetCallbackLongFunction(
    ffi.Pointer<TP_CALLBACK_ENVIRON_V3> CallbackEnviron,
  ) {
    return (_TpSetCallbackLongFunction ??= _dylib.lookupFunction<
        _c_TpSetCallbackLongFunction,
        _dart_TpSetCallbackLongFunction>('TpSetCallbackLongFunction'))(
      CallbackEnviron,
    );
  }

  _dart_TpSetCallbackLongFunction? _TpSetCallbackLongFunction;

  void TpSetCallbackRaceWithDll(
    ffi.Pointer<TP_CALLBACK_ENVIRON_V3> CallbackEnviron,
    ffi.Pointer<ffi.Void> DllHandle,
  ) {
    return (_TpSetCallbackRaceWithDll ??= _dylib.lookupFunction<
        _c_TpSetCallbackRaceWithDll,
        _dart_TpSetCallbackRaceWithDll>('TpSetCallbackRaceWithDll'))(
      CallbackEnviron,
      DllHandle,
    );
  }

  _dart_TpSetCallbackRaceWithDll? _TpSetCallbackRaceWithDll;

  void TpSetCallbackFinalizationCallback(
    ffi.Pointer<TP_CALLBACK_ENVIRON_V3> CallbackEnviron,
    ffi.Pointer<ffi.NativeFunction<PTP_SIMPLE_CALLBACK>> FinalizationCallback,
  ) {
    return (_TpSetCallbackFinalizationCallback ??= _dylib.lookupFunction<
            _c_TpSetCallbackFinalizationCallback,
            _dart_TpSetCallbackFinalizationCallback>(
        'TpSetCallbackFinalizationCallback'))(
      CallbackEnviron,
      FinalizationCallback,
    );
  }

  _dart_TpSetCallbackFinalizationCallback? _TpSetCallbackFinalizationCallback;

  void TpSetCallbackPriority(
    ffi.Pointer<TP_CALLBACK_ENVIRON_V3> CallbackEnviron,
    int Priority,
  ) {
    return (_TpSetCallbackPriority ??= _dylib.lookupFunction<
        _c_TpSetCallbackPriority,
        _dart_TpSetCallbackPriority>('TpSetCallbackPriority'))(
      CallbackEnviron,
      Priority,
    );
  }

  _dart_TpSetCallbackPriority? _TpSetCallbackPriority;

  void TpSetCallbackPersistent(
    ffi.Pointer<TP_CALLBACK_ENVIRON_V3> CallbackEnviron,
  ) {
    return (_TpSetCallbackPersistent ??= _dylib.lookupFunction<
        _c_TpSetCallbackPersistent,
        _dart_TpSetCallbackPersistent>('TpSetCallbackPersistent'))(
      CallbackEnviron,
    );
  }

  _dart_TpSetCallbackPersistent? _TpSetCallbackPersistent;

  void TpDestroyCallbackEnviron(
    ffi.Pointer<TP_CALLBACK_ENVIRON_V3> CallbackEnviron,
  ) {
    return (_TpDestroyCallbackEnviron ??= _dylib.lookupFunction<
        _c_TpDestroyCallbackEnviron,
        _dart_TpDestroyCallbackEnviron>('TpDestroyCallbackEnviron'))(
      CallbackEnviron,
    );
  }

  _dart_TpDestroyCallbackEnviron? _TpDestroyCallbackEnviron;

  ffi.Pointer<_TEB> NtCurrentTeb() {
    return (_NtCurrentTeb ??= _dylib
        .lookupFunction<_c_NtCurrentTeb, _dart_NtCurrentTeb>('NtCurrentTeb'))();
  }

  _dart_NtCurrentTeb? _NtCurrentTeb;

  ffi.Pointer<ffi.Void> GetCurrentFiber() {
    return (_GetCurrentFiber ??=
        _dylib.lookupFunction<_c_GetCurrentFiber, _dart_GetCurrentFiber>(
            'GetCurrentFiber'))();
  }

  _dart_GetCurrentFiber? _GetCurrentFiber;

  ffi.Pointer<ffi.Void> GetFiberData() {
    return (_GetFiberData ??= _dylib
        .lookupFunction<_c_GetFiberData, _dart_GetFiberData>('GetFiberData'))();
  }

  _dart_GetFiberData? _GetFiberData;

  int IsApiSetImplemented(
    ffi.Pointer<ffi.Int8> Contract,
  ) {
    return (_IsApiSetImplemented ??= _dylib.lookupFunction<
        _c_IsApiSetImplemented,
        _dart_IsApiSetImplemented>('IsApiSetImplemented'))(
      Contract,
    );
  }

  _dart_IsApiSetImplemented? _IsApiSetImplemented;

  int SetEnvironmentStringsW(
    ffi.Pointer<ffi.Uint16> NewEnvironment,
  ) {
    return (_SetEnvironmentStringsW ??= _dylib.lookupFunction<
        _c_SetEnvironmentStringsW,
        _dart_SetEnvironmentStringsW>('SetEnvironmentStringsW'))(
      NewEnvironment,
    );
  }

  _dart_SetEnvironmentStringsW? _SetEnvironmentStringsW;

  ffi.Pointer<ffi.Void> GetStdHandle(
    int nStdHandle,
  ) {
    return (_GetStdHandle ??= _dylib
        .lookupFunction<_c_GetStdHandle, _dart_GetStdHandle>('GetStdHandle'))(
      nStdHandle,
    );
  }

  _dart_GetStdHandle? _GetStdHandle;

  int SetStdHandle(
    int nStdHandle,
    ffi.Pointer<ffi.Void> hHandle,
  ) {
    return (_SetStdHandle ??= _dylib
        .lookupFunction<_c_SetStdHandle, _dart_SetStdHandle>('SetStdHandle'))(
      nStdHandle,
      hHandle,
    );
  }

  _dart_SetStdHandle? _SetStdHandle;

  int SetStdHandleEx(
    int nStdHandle,
    ffi.Pointer<ffi.Void> hHandle,
    ffi.Pointer<ffi.Pointer<ffi.Void>> phPrevValue,
  ) {
    return (_SetStdHandleEx ??=
        _dylib.lookupFunction<_c_SetStdHandleEx, _dart_SetStdHandleEx>(
            'SetStdHandleEx'))(
      nStdHandle,
      hHandle,
      phPrevValue,
    );
  }

  _dart_SetStdHandleEx? _SetStdHandleEx;

  ffi.Pointer<ffi.Int8> GetCommandLineA() {
    return (_GetCommandLineA ??=
        _dylib.lookupFunction<_c_GetCommandLineA, _dart_GetCommandLineA>(
            'GetCommandLineA'))();
  }

  _dart_GetCommandLineA? _GetCommandLineA;

  ffi.Pointer<ffi.Uint16> GetCommandLineW() {
    return (_GetCommandLineW ??=
        _dylib.lookupFunction<_c_GetCommandLineW, _dart_GetCommandLineW>(
            'GetCommandLineW'))();
  }

  _dart_GetCommandLineW? _GetCommandLineW;

  ffi.Pointer<ffi.Int8> GetEnvironmentStrings() {
    return (_GetEnvironmentStrings ??= _dylib.lookupFunction<
        _c_GetEnvironmentStrings,
        _dart_GetEnvironmentStrings>('GetEnvironmentStrings'))();
  }

  _dart_GetEnvironmentStrings? _GetEnvironmentStrings;

  ffi.Pointer<ffi.Uint16> GetEnvironmentStringsW() {
    return (_GetEnvironmentStringsW ??= _dylib.lookupFunction<
        _c_GetEnvironmentStringsW,
        _dart_GetEnvironmentStringsW>('GetEnvironmentStringsW'))();
  }

  _dart_GetEnvironmentStringsW? _GetEnvironmentStringsW;

  int FreeEnvironmentStringsA(
    ffi.Pointer<ffi.Int8> penv,
  ) {
    return (_FreeEnvironmentStringsA ??= _dylib.lookupFunction<
        _c_FreeEnvironmentStringsA,
        _dart_FreeEnvironmentStringsA>('FreeEnvironmentStringsA'))(
      penv,
    );
  }

  _dart_FreeEnvironmentStringsA? _FreeEnvironmentStringsA;

  int FreeEnvironmentStringsW(
    ffi.Pointer<ffi.Uint16> penv,
  ) {
    return (_FreeEnvironmentStringsW ??= _dylib.lookupFunction<
        _c_FreeEnvironmentStringsW,
        _dart_FreeEnvironmentStringsW>('FreeEnvironmentStringsW'))(
      penv,
    );
  }

  _dart_FreeEnvironmentStringsW? _FreeEnvironmentStringsW;

  int GetEnvironmentVariableA(
    ffi.Pointer<ffi.Int8> lpName,
    ffi.Pointer<ffi.Int8> lpBuffer,
    int nSize,
  ) {
    return (_GetEnvironmentVariableA ??= _dylib.lookupFunction<
        _c_GetEnvironmentVariableA,
        _dart_GetEnvironmentVariableA>('GetEnvironmentVariableA'))(
      lpName,
      lpBuffer,
      nSize,
    );
  }

  _dart_GetEnvironmentVariableA? _GetEnvironmentVariableA;

  int GetEnvironmentVariableW(
    ffi.Pointer<ffi.Uint16> lpName,
    ffi.Pointer<ffi.Uint16> lpBuffer,
    int nSize,
  ) {
    return (_GetEnvironmentVariableW ??= _dylib.lookupFunction<
        _c_GetEnvironmentVariableW,
        _dart_GetEnvironmentVariableW>('GetEnvironmentVariableW'))(
      lpName,
      lpBuffer,
      nSize,
    );
  }

  _dart_GetEnvironmentVariableW? _GetEnvironmentVariableW;

  int SetEnvironmentVariableA(
    ffi.Pointer<ffi.Int8> lpName,
    ffi.Pointer<ffi.Int8> lpValue,
  ) {
    return (_SetEnvironmentVariableA ??= _dylib.lookupFunction<
        _c_SetEnvironmentVariableA,
        _dart_SetEnvironmentVariableA>('SetEnvironmentVariableA'))(
      lpName,
      lpValue,
    );
  }

  _dart_SetEnvironmentVariableA? _SetEnvironmentVariableA;

  int SetEnvironmentVariableW(
    ffi.Pointer<ffi.Uint16> lpName,
    ffi.Pointer<ffi.Uint16> lpValue,
  ) {
    return (_SetEnvironmentVariableW ??= _dylib.lookupFunction<
        _c_SetEnvironmentVariableW,
        _dart_SetEnvironmentVariableW>('SetEnvironmentVariableW'))(
      lpName,
      lpValue,
    );
  }

  _dart_SetEnvironmentVariableW? _SetEnvironmentVariableW;

  int ExpandEnvironmentStringsA(
    ffi.Pointer<ffi.Int8> lpSrc,
    ffi.Pointer<ffi.Int8> lpDst,
    int nSize,
  ) {
    return (_ExpandEnvironmentStringsA ??= _dylib.lookupFunction<
        _c_ExpandEnvironmentStringsA,
        _dart_ExpandEnvironmentStringsA>('ExpandEnvironmentStringsA'))(
      lpSrc,
      lpDst,
      nSize,
    );
  }

  _dart_ExpandEnvironmentStringsA? _ExpandEnvironmentStringsA;

  int ExpandEnvironmentStringsW(
    ffi.Pointer<ffi.Uint16> lpSrc,
    ffi.Pointer<ffi.Uint16> lpDst,
    int nSize,
  ) {
    return (_ExpandEnvironmentStringsW ??= _dylib.lookupFunction<
        _c_ExpandEnvironmentStringsW,
        _dart_ExpandEnvironmentStringsW>('ExpandEnvironmentStringsW'))(
      lpSrc,
      lpDst,
      nSize,
    );
  }

  _dart_ExpandEnvironmentStringsW? _ExpandEnvironmentStringsW;

  int SetCurrentDirectoryA(
    ffi.Pointer<ffi.Int8> lpPathName,
  ) {
    return (_SetCurrentDirectoryA ??= _dylib.lookupFunction<
        _c_SetCurrentDirectoryA,
        _dart_SetCurrentDirectoryA>('SetCurrentDirectoryA'))(
      lpPathName,
    );
  }

  _dart_SetCurrentDirectoryA? _SetCurrentDirectoryA;

  int SetCurrentDirectoryW(
    ffi.Pointer<ffi.Uint16> lpPathName,
  ) {
    return (_SetCurrentDirectoryW ??= _dylib.lookupFunction<
        _c_SetCurrentDirectoryW,
        _dart_SetCurrentDirectoryW>('SetCurrentDirectoryW'))(
      lpPathName,
    );
  }

  _dart_SetCurrentDirectoryW? _SetCurrentDirectoryW;

  int GetCurrentDirectoryA(
    int nBufferLength,
    ffi.Pointer<ffi.Int8> lpBuffer,
  ) {
    return (_GetCurrentDirectoryA ??= _dylib.lookupFunction<
        _c_GetCurrentDirectoryA,
        _dart_GetCurrentDirectoryA>('GetCurrentDirectoryA'))(
      nBufferLength,
      lpBuffer,
    );
  }

  _dart_GetCurrentDirectoryA? _GetCurrentDirectoryA;

  int GetCurrentDirectoryW(
    int nBufferLength,
    ffi.Pointer<ffi.Uint16> lpBuffer,
  ) {
    return (_GetCurrentDirectoryW ??= _dylib.lookupFunction<
        _c_GetCurrentDirectoryW,
        _dart_GetCurrentDirectoryW>('GetCurrentDirectoryW'))(
      nBufferLength,
      lpBuffer,
    );
  }

  _dart_GetCurrentDirectoryW? _GetCurrentDirectoryW;

  int SearchPathW(
    ffi.Pointer<ffi.Uint16> lpPath,
    ffi.Pointer<ffi.Uint16> lpFileName,
    ffi.Pointer<ffi.Uint16> lpExtension,
    int nBufferLength,
    ffi.Pointer<ffi.Uint16> lpBuffer,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> lpFilePart,
  ) {
    return (_SearchPathW ??= _dylib
        .lookupFunction<_c_SearchPathW, _dart_SearchPathW>('SearchPathW'))(
      lpPath,
      lpFileName,
      lpExtension,
      nBufferLength,
      lpBuffer,
      lpFilePart,
    );
  }

  _dart_SearchPathW? _SearchPathW;

  int SearchPathA(
    ffi.Pointer<ffi.Int8> lpPath,
    ffi.Pointer<ffi.Int8> lpFileName,
    ffi.Pointer<ffi.Int8> lpExtension,
    int nBufferLength,
    ffi.Pointer<ffi.Int8> lpBuffer,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> lpFilePart,
  ) {
    return (_SearchPathA ??= _dylib
        .lookupFunction<_c_SearchPathA, _dart_SearchPathA>('SearchPathA'))(
      lpPath,
      lpFileName,
      lpExtension,
      nBufferLength,
      lpBuffer,
      lpFilePart,
    );
  }

  _dart_SearchPathA? _SearchPathA;

  int NeedCurrentDirectoryForExePathA(
    ffi.Pointer<ffi.Int8> ExeName,
  ) {
    return (_NeedCurrentDirectoryForExePathA ??= _dylib.lookupFunction<
            _c_NeedCurrentDirectoryForExePathA,
            _dart_NeedCurrentDirectoryForExePathA>(
        'NeedCurrentDirectoryForExePathA'))(
      ExeName,
    );
  }

  _dart_NeedCurrentDirectoryForExePathA? _NeedCurrentDirectoryForExePathA;

  int NeedCurrentDirectoryForExePathW(
    ffi.Pointer<ffi.Uint16> ExeName,
  ) {
    return (_NeedCurrentDirectoryForExePathW ??= _dylib.lookupFunction<
            _c_NeedCurrentDirectoryForExePathW,
            _dart_NeedCurrentDirectoryForExePathW>(
        'NeedCurrentDirectoryForExePathW'))(
      ExeName,
    );
  }

  _dart_NeedCurrentDirectoryForExePathW? _NeedCurrentDirectoryForExePathW;

  int CompareFileTime(
    ffi.Pointer<LPFILETIME> lpFileTime1,
    ffi.Pointer<LPFILETIME> lpFileTime2,
  ) {
    return (_CompareFileTime ??=
        _dylib.lookupFunction<_c_CompareFileTime, _dart_CompareFileTime>(
            'CompareFileTime'))(
      lpFileTime1,
      lpFileTime2,
    );
  }

  _dart_CompareFileTime? _CompareFileTime;

  int CreateDirectoryA(
    ffi.Pointer<ffi.Int8> lpPathName,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  ) {
    return (_CreateDirectoryA ??=
        _dylib.lookupFunction<_c_CreateDirectoryA, _dart_CreateDirectoryA>(
            'CreateDirectoryA'))(
      lpPathName,
      lpSecurityAttributes,
    );
  }

  _dart_CreateDirectoryA? _CreateDirectoryA;

  int CreateDirectoryW(
    ffi.Pointer<ffi.Uint16> lpPathName,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  ) {
    return (_CreateDirectoryW ??=
        _dylib.lookupFunction<_c_CreateDirectoryW, _dart_CreateDirectoryW>(
            'CreateDirectoryW'))(
      lpPathName,
      lpSecurityAttributes,
    );
  }

  _dart_CreateDirectoryW? _CreateDirectoryW;

  ffi.Pointer<ffi.Void> CreateFileA(
    ffi.Pointer<ffi.Int8> lpFileName,
    int dwDesiredAccess,
    int dwShareMode,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
    int dwCreationDisposition,
    int dwFlagsAndAttributes,
    ffi.Pointer<ffi.Void> hTemplateFile,
  ) {
    return (_CreateFileA ??= _dylib
        .lookupFunction<_c_CreateFileA, _dart_CreateFileA>('CreateFileA'))(
      lpFileName,
      dwDesiredAccess,
      dwShareMode,
      lpSecurityAttributes,
      dwCreationDisposition,
      dwFlagsAndAttributes,
      hTemplateFile,
    );
  }

  _dart_CreateFileA? _CreateFileA;

  ffi.Pointer<ffi.Void> CreateFileW(
    ffi.Pointer<ffi.Uint16> lpFileName,
    int dwDesiredAccess,
    int dwShareMode,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
    int dwCreationDisposition,
    int dwFlagsAndAttributes,
    ffi.Pointer<ffi.Void> hTemplateFile,
  ) {
    return (_CreateFileW ??= _dylib
        .lookupFunction<_c_CreateFileW, _dart_CreateFileW>('CreateFileW'))(
      lpFileName,
      dwDesiredAccess,
      dwShareMode,
      lpSecurityAttributes,
      dwCreationDisposition,
      dwFlagsAndAttributes,
      hTemplateFile,
    );
  }

  _dart_CreateFileW? _CreateFileW;

  int DefineDosDeviceW(
    int dwFlags,
    ffi.Pointer<ffi.Uint16> lpDeviceName,
    ffi.Pointer<ffi.Uint16> lpTargetPath,
  ) {
    return (_DefineDosDeviceW ??=
        _dylib.lookupFunction<_c_DefineDosDeviceW, _dart_DefineDosDeviceW>(
            'DefineDosDeviceW'))(
      dwFlags,
      lpDeviceName,
      lpTargetPath,
    );
  }

  _dart_DefineDosDeviceW? _DefineDosDeviceW;

  int DeleteFileA(
    ffi.Pointer<ffi.Int8> lpFileName,
  ) {
    return (_DeleteFileA ??= _dylib
        .lookupFunction<_c_DeleteFileA, _dart_DeleteFileA>('DeleteFileA'))(
      lpFileName,
    );
  }

  _dart_DeleteFileA? _DeleteFileA;

  int DeleteFileW(
    ffi.Pointer<ffi.Uint16> lpFileName,
  ) {
    return (_DeleteFileW ??= _dylib
        .lookupFunction<_c_DeleteFileW, _dart_DeleteFileW>('DeleteFileW'))(
      lpFileName,
    );
  }

  _dart_DeleteFileW? _DeleteFileW;

  int DeleteVolumeMountPointW(
    ffi.Pointer<ffi.Uint16> lpszVolumeMountPoint,
  ) {
    return (_DeleteVolumeMountPointW ??= _dylib.lookupFunction<
        _c_DeleteVolumeMountPointW,
        _dart_DeleteVolumeMountPointW>('DeleteVolumeMountPointW'))(
      lpszVolumeMountPoint,
    );
  }

  _dart_DeleteVolumeMountPointW? _DeleteVolumeMountPointW;

  int FileTimeToLocalFileTime(
    ffi.Pointer<LPFILETIME> lpFileTime,
    ffi.Pointer<LPFILETIME> lpLocalFileTime,
  ) {
    return (_FileTimeToLocalFileTime ??= _dylib.lookupFunction<
        _c_FileTimeToLocalFileTime,
        _dart_FileTimeToLocalFileTime>('FileTimeToLocalFileTime'))(
      lpFileTime,
      lpLocalFileTime,
    );
  }

  _dart_FileTimeToLocalFileTime? _FileTimeToLocalFileTime;

  int FindClose(
    ffi.Pointer<ffi.Void> hFindFile,
  ) {
    return (_FindClose ??=
        _dylib.lookupFunction<_c_FindClose, _dart_FindClose>('FindClose'))(
      hFindFile,
    );
  }

  _dart_FindClose? _FindClose;

  int FindCloseChangeNotification(
    ffi.Pointer<ffi.Void> hChangeHandle,
  ) {
    return (_FindCloseChangeNotification ??= _dylib.lookupFunction<
        _c_FindCloseChangeNotification,
        _dart_FindCloseChangeNotification>('FindCloseChangeNotification'))(
      hChangeHandle,
    );
  }

  _dart_FindCloseChangeNotification? _FindCloseChangeNotification;

  ffi.Pointer<ffi.Void> FindFirstChangeNotificationA(
    ffi.Pointer<ffi.Int8> lpPathName,
    int bWatchSubtree,
    int dwNotifyFilter,
  ) {
    return (_FindFirstChangeNotificationA ??= _dylib.lookupFunction<
        _c_FindFirstChangeNotificationA,
        _dart_FindFirstChangeNotificationA>('FindFirstChangeNotificationA'))(
      lpPathName,
      bWatchSubtree,
      dwNotifyFilter,
    );
  }

  _dart_FindFirstChangeNotificationA? _FindFirstChangeNotificationA;

  ffi.Pointer<ffi.Void> FindFirstChangeNotificationW(
    ffi.Pointer<ffi.Uint16> lpPathName,
    int bWatchSubtree,
    int dwNotifyFilter,
  ) {
    return (_FindFirstChangeNotificationW ??= _dylib.lookupFunction<
        _c_FindFirstChangeNotificationW,
        _dart_FindFirstChangeNotificationW>('FindFirstChangeNotificationW'))(
      lpPathName,
      bWatchSubtree,
      dwNotifyFilter,
    );
  }

  _dart_FindFirstChangeNotificationW? _FindFirstChangeNotificationW;

  ffi.Pointer<ffi.Void> FindFirstFileA(
    ffi.Pointer<ffi.Int8> lpFileName,
    ffi.Pointer<LPWIN32_FIND_DATAA> lpFindFileData,
  ) {
    return (_FindFirstFileA ??=
        _dylib.lookupFunction<_c_FindFirstFileA, _dart_FindFirstFileA>(
            'FindFirstFileA'))(
      lpFileName,
      lpFindFileData,
    );
  }

  _dart_FindFirstFileA? _FindFirstFileA;

  ffi.Pointer<ffi.Void> FindFirstFileW(
    ffi.Pointer<ffi.Uint16> lpFileName,
    ffi.Pointer<LPWIN32_FIND_DATAW> lpFindFileData,
  ) {
    return (_FindFirstFileW ??=
        _dylib.lookupFunction<_c_FindFirstFileW, _dart_FindFirstFileW>(
            'FindFirstFileW'))(
      lpFileName,
      lpFindFileData,
    );
  }

  _dart_FindFirstFileW? _FindFirstFileW;

  ffi.Pointer<ffi.Void> FindFirstFileExA(
    ffi.Pointer<ffi.Int8> lpFileName,
    int fInfoLevelId,
    ffi.Pointer<ffi.Void> lpFindFileData,
    int fSearchOp,
    ffi.Pointer<ffi.Void> lpSearchFilter,
    int dwAdditionalFlags,
  ) {
    return (_FindFirstFileExA ??=
        _dylib.lookupFunction<_c_FindFirstFileExA, _dart_FindFirstFileExA>(
            'FindFirstFileExA'))(
      lpFileName,
      fInfoLevelId,
      lpFindFileData,
      fSearchOp,
      lpSearchFilter,
      dwAdditionalFlags,
    );
  }

  _dart_FindFirstFileExA? _FindFirstFileExA;

  ffi.Pointer<ffi.Void> FindFirstFileExW(
    ffi.Pointer<ffi.Uint16> lpFileName,
    int fInfoLevelId,
    ffi.Pointer<ffi.Void> lpFindFileData,
    int fSearchOp,
    ffi.Pointer<ffi.Void> lpSearchFilter,
    int dwAdditionalFlags,
  ) {
    return (_FindFirstFileExW ??=
        _dylib.lookupFunction<_c_FindFirstFileExW, _dart_FindFirstFileExW>(
            'FindFirstFileExW'))(
      lpFileName,
      fInfoLevelId,
      lpFindFileData,
      fSearchOp,
      lpSearchFilter,
      dwAdditionalFlags,
    );
  }

  _dart_FindFirstFileExW? _FindFirstFileExW;

  ffi.Pointer<ffi.Void> FindFirstVolumeW(
    ffi.Pointer<ffi.Uint16> lpszVolumeName,
    int cchBufferLength,
  ) {
    return (_FindFirstVolumeW ??=
        _dylib.lookupFunction<_c_FindFirstVolumeW, _dart_FindFirstVolumeW>(
            'FindFirstVolumeW'))(
      lpszVolumeName,
      cchBufferLength,
    );
  }

  _dart_FindFirstVolumeW? _FindFirstVolumeW;

  int FindNextChangeNotification(
    ffi.Pointer<ffi.Void> hChangeHandle,
  ) {
    return (_FindNextChangeNotification ??= _dylib.lookupFunction<
        _c_FindNextChangeNotification,
        _dart_FindNextChangeNotification>('FindNextChangeNotification'))(
      hChangeHandle,
    );
  }

  _dart_FindNextChangeNotification? _FindNextChangeNotification;

  int FindNextFileA(
    ffi.Pointer<ffi.Void> hFindFile,
    ffi.Pointer<LPWIN32_FIND_DATAA> lpFindFileData,
  ) {
    return (_FindNextFileA ??=
        _dylib.lookupFunction<_c_FindNextFileA, _dart_FindNextFileA>(
            'FindNextFileA'))(
      hFindFile,
      lpFindFileData,
    );
  }

  _dart_FindNextFileA? _FindNextFileA;

  int FindNextFileW(
    ffi.Pointer<ffi.Void> hFindFile,
    ffi.Pointer<LPWIN32_FIND_DATAW> lpFindFileData,
  ) {
    return (_FindNextFileW ??=
        _dylib.lookupFunction<_c_FindNextFileW, _dart_FindNextFileW>(
            'FindNextFileW'))(
      hFindFile,
      lpFindFileData,
    );
  }

  _dart_FindNextFileW? _FindNextFileW;

  int FindNextVolumeW(
    ffi.Pointer<ffi.Void> hFindVolume,
    ffi.Pointer<ffi.Uint16> lpszVolumeName,
    int cchBufferLength,
  ) {
    return (_FindNextVolumeW ??=
        _dylib.lookupFunction<_c_FindNextVolumeW, _dart_FindNextVolumeW>(
            'FindNextVolumeW'))(
      hFindVolume,
      lpszVolumeName,
      cchBufferLength,
    );
  }

  _dart_FindNextVolumeW? _FindNextVolumeW;

  int FindVolumeClose(
    ffi.Pointer<ffi.Void> hFindVolume,
  ) {
    return (_FindVolumeClose ??=
        _dylib.lookupFunction<_c_FindVolumeClose, _dart_FindVolumeClose>(
            'FindVolumeClose'))(
      hFindVolume,
    );
  }

  _dart_FindVolumeClose? _FindVolumeClose;

  int FlushFileBuffers(
    ffi.Pointer<ffi.Void> hFile,
  ) {
    return (_FlushFileBuffers ??=
        _dylib.lookupFunction<_c_FlushFileBuffers, _dart_FlushFileBuffers>(
            'FlushFileBuffers'))(
      hFile,
    );
  }

  _dart_FlushFileBuffers? _FlushFileBuffers;

  int GetDiskFreeSpaceA(
    ffi.Pointer<ffi.Int8> lpRootPathName,
    ffi.Pointer<ffi.Uint64> lpSectorsPerCluster,
    ffi.Pointer<ffi.Uint64> lpBytesPerSector,
    ffi.Pointer<ffi.Uint64> lpNumberOfFreeClusters,
    ffi.Pointer<ffi.Uint64> lpTotalNumberOfClusters,
  ) {
    return (_GetDiskFreeSpaceA ??=
        _dylib.lookupFunction<_c_GetDiskFreeSpaceA, _dart_GetDiskFreeSpaceA>(
            'GetDiskFreeSpaceA'))(
      lpRootPathName,
      lpSectorsPerCluster,
      lpBytesPerSector,
      lpNumberOfFreeClusters,
      lpTotalNumberOfClusters,
    );
  }

  _dart_GetDiskFreeSpaceA? _GetDiskFreeSpaceA;

  int GetDiskFreeSpaceW(
    ffi.Pointer<ffi.Uint16> lpRootPathName,
    ffi.Pointer<ffi.Uint64> lpSectorsPerCluster,
    ffi.Pointer<ffi.Uint64> lpBytesPerSector,
    ffi.Pointer<ffi.Uint64> lpNumberOfFreeClusters,
    ffi.Pointer<ffi.Uint64> lpTotalNumberOfClusters,
  ) {
    return (_GetDiskFreeSpaceW ??=
        _dylib.lookupFunction<_c_GetDiskFreeSpaceW, _dart_GetDiskFreeSpaceW>(
            'GetDiskFreeSpaceW'))(
      lpRootPathName,
      lpSectorsPerCluster,
      lpBytesPerSector,
      lpNumberOfFreeClusters,
      lpTotalNumberOfClusters,
    );
  }

  _dart_GetDiskFreeSpaceW? _GetDiskFreeSpaceW;

  int GetDiskSpaceInformationA(
    ffi.Pointer<ffi.Int8> rootPath,
    ffi.Pointer<DISK_SPACE_INFORMATION> diskSpaceInfo,
  ) {
    return (_GetDiskSpaceInformationA ??= _dylib.lookupFunction<
        _c_GetDiskSpaceInformationA,
        _dart_GetDiskSpaceInformationA>('GetDiskSpaceInformationA'))(
      rootPath,
      diskSpaceInfo,
    );
  }

  _dart_GetDiskSpaceInformationA? _GetDiskSpaceInformationA;

  int GetDiskSpaceInformationW(
    ffi.Pointer<ffi.Uint16> rootPath,
    ffi.Pointer<DISK_SPACE_INFORMATION> diskSpaceInfo,
  ) {
    return (_GetDiskSpaceInformationW ??= _dylib.lookupFunction<
        _c_GetDiskSpaceInformationW,
        _dart_GetDiskSpaceInformationW>('GetDiskSpaceInformationW'))(
      rootPath,
      diskSpaceInfo,
    );
  }

  _dart_GetDiskSpaceInformationW? _GetDiskSpaceInformationW;

  int GetDriveTypeA(
    ffi.Pointer<ffi.Int8> lpRootPathName,
  ) {
    return (_GetDriveTypeA ??=
        _dylib.lookupFunction<_c_GetDriveTypeA, _dart_GetDriveTypeA>(
            'GetDriveTypeA'))(
      lpRootPathName,
    );
  }

  _dart_GetDriveTypeA? _GetDriveTypeA;

  int GetDriveTypeW(
    ffi.Pointer<ffi.Uint16> lpRootPathName,
  ) {
    return (_GetDriveTypeW ??=
        _dylib.lookupFunction<_c_GetDriveTypeW, _dart_GetDriveTypeW>(
            'GetDriveTypeW'))(
      lpRootPathName,
    );
  }

  _dart_GetDriveTypeW? _GetDriveTypeW;

  int GetFileAttributesA(
    ffi.Pointer<ffi.Int8> lpFileName,
  ) {
    return (_GetFileAttributesA ??=
        _dylib.lookupFunction<_c_GetFileAttributesA, _dart_GetFileAttributesA>(
            'GetFileAttributesA'))(
      lpFileName,
    );
  }

  _dart_GetFileAttributesA? _GetFileAttributesA;

  int GetFileAttributesW(
    ffi.Pointer<ffi.Uint16> lpFileName,
  ) {
    return (_GetFileAttributesW ??=
        _dylib.lookupFunction<_c_GetFileAttributesW, _dart_GetFileAttributesW>(
            'GetFileAttributesW'))(
      lpFileName,
    );
  }

  _dart_GetFileAttributesW? _GetFileAttributesW;

  int GetFileAttributesExA(
    ffi.Pointer<ffi.Int8> lpFileName,
    int fInfoLevelId,
    ffi.Pointer<ffi.Void> lpFileInformation,
  ) {
    return (_GetFileAttributesExA ??= _dylib.lookupFunction<
        _c_GetFileAttributesExA,
        _dart_GetFileAttributesExA>('GetFileAttributesExA'))(
      lpFileName,
      fInfoLevelId,
      lpFileInformation,
    );
  }

  _dart_GetFileAttributesExA? _GetFileAttributesExA;

  int GetFileAttributesExW(
    ffi.Pointer<ffi.Uint16> lpFileName,
    int fInfoLevelId,
    ffi.Pointer<ffi.Void> lpFileInformation,
  ) {
    return (_GetFileAttributesExW ??= _dylib.lookupFunction<
        _c_GetFileAttributesExW,
        _dart_GetFileAttributesExW>('GetFileAttributesExW'))(
      lpFileName,
      fInfoLevelId,
      lpFileInformation,
    );
  }

  _dart_GetFileAttributesExW? _GetFileAttributesExW;

  int GetFileInformationByHandle(
    ffi.Pointer<ffi.Void> hFile,
    ffi.Pointer<LPBY_HANDLE_FILE_INFORMATION> lpFileInformation,
  ) {
    return (_GetFileInformationByHandle ??= _dylib.lookupFunction<
        _c_GetFileInformationByHandle,
        _dart_GetFileInformationByHandle>('GetFileInformationByHandle'))(
      hFile,
      lpFileInformation,
    );
  }

  _dart_GetFileInformationByHandle? _GetFileInformationByHandle;

  int GetFileSize(
    ffi.Pointer<ffi.Void> hFile,
    ffi.Pointer<ffi.Uint64> lpFileSizeHigh,
  ) {
    return (_GetFileSize ??= _dylib
        .lookupFunction<_c_GetFileSize, _dart_GetFileSize>('GetFileSize'))(
      hFile,
      lpFileSizeHigh,
    );
  }

  _dart_GetFileSize? _GetFileSize;

  int GetFileType(
    ffi.Pointer<ffi.Void> hFile,
  ) {
    return (_GetFileType ??= _dylib
        .lookupFunction<_c_GetFileType, _dart_GetFileType>('GetFileType'))(
      hFile,
    );
  }

  _dart_GetFileType? _GetFileType;

  int GetFinalPathNameByHandleA(
    ffi.Pointer<ffi.Void> hFile,
    ffi.Pointer<ffi.Int8> lpszFilePath,
    int cchFilePath,
    int dwFlags,
  ) {
    return (_GetFinalPathNameByHandleA ??= _dylib.lookupFunction<
        _c_GetFinalPathNameByHandleA,
        _dart_GetFinalPathNameByHandleA>('GetFinalPathNameByHandleA'))(
      hFile,
      lpszFilePath,
      cchFilePath,
      dwFlags,
    );
  }

  _dart_GetFinalPathNameByHandleA? _GetFinalPathNameByHandleA;

  int GetFinalPathNameByHandleW(
    ffi.Pointer<ffi.Void> hFile,
    ffi.Pointer<ffi.Uint16> lpszFilePath,
    int cchFilePath,
    int dwFlags,
  ) {
    return (_GetFinalPathNameByHandleW ??= _dylib.lookupFunction<
        _c_GetFinalPathNameByHandleW,
        _dart_GetFinalPathNameByHandleW>('GetFinalPathNameByHandleW'))(
      hFile,
      lpszFilePath,
      cchFilePath,
      dwFlags,
    );
  }

  _dart_GetFinalPathNameByHandleW? _GetFinalPathNameByHandleW;

  int GetFileTime(
    ffi.Pointer<ffi.Void> hFile,
    ffi.Pointer<LPFILETIME> lpCreationTime,
    ffi.Pointer<LPFILETIME> lpLastAccessTime,
    ffi.Pointer<LPFILETIME> lpLastWriteTime,
  ) {
    return (_GetFileTime ??= _dylib
        .lookupFunction<_c_GetFileTime, _dart_GetFileTime>('GetFileTime'))(
      hFile,
      lpCreationTime,
      lpLastAccessTime,
      lpLastWriteTime,
    );
  }

  _dart_GetFileTime? _GetFileTime;

  int GetFullPathNameW(
    ffi.Pointer<ffi.Uint16> lpFileName,
    int nBufferLength,
    ffi.Pointer<ffi.Uint16> lpBuffer,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> lpFilePart,
  ) {
    return (_GetFullPathNameW ??=
        _dylib.lookupFunction<_c_GetFullPathNameW, _dart_GetFullPathNameW>(
            'GetFullPathNameW'))(
      lpFileName,
      nBufferLength,
      lpBuffer,
      lpFilePart,
    );
  }

  _dart_GetFullPathNameW? _GetFullPathNameW;

  int GetFullPathNameA(
    ffi.Pointer<ffi.Int8> lpFileName,
    int nBufferLength,
    ffi.Pointer<ffi.Int8> lpBuffer,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> lpFilePart,
  ) {
    return (_GetFullPathNameA ??=
        _dylib.lookupFunction<_c_GetFullPathNameA, _dart_GetFullPathNameA>(
            'GetFullPathNameA'))(
      lpFileName,
      nBufferLength,
      lpBuffer,
      lpFilePart,
    );
  }

  _dart_GetFullPathNameA? _GetFullPathNameA;

  int GetLogicalDrives() {
    return (_GetLogicalDrives ??=
        _dylib.lookupFunction<_c_GetLogicalDrives, _dart_GetLogicalDrives>(
            'GetLogicalDrives'))();
  }

  _dart_GetLogicalDrives? _GetLogicalDrives;

  int GetLogicalDriveStringsW(
    int nBufferLength,
    ffi.Pointer<ffi.Uint16> lpBuffer,
  ) {
    return (_GetLogicalDriveStringsW ??= _dylib.lookupFunction<
        _c_GetLogicalDriveStringsW,
        _dart_GetLogicalDriveStringsW>('GetLogicalDriveStringsW'))(
      nBufferLength,
      lpBuffer,
    );
  }

  _dart_GetLogicalDriveStringsW? _GetLogicalDriveStringsW;

  int GetLongPathNameA(
    ffi.Pointer<ffi.Int8> lpszShortPath,
    ffi.Pointer<ffi.Int8> lpszLongPath,
    int cchBuffer,
  ) {
    return (_GetLongPathNameA ??=
        _dylib.lookupFunction<_c_GetLongPathNameA, _dart_GetLongPathNameA>(
            'GetLongPathNameA'))(
      lpszShortPath,
      lpszLongPath,
      cchBuffer,
    );
  }

  _dart_GetLongPathNameA? _GetLongPathNameA;

  int GetLongPathNameW(
    ffi.Pointer<ffi.Uint16> lpszShortPath,
    ffi.Pointer<ffi.Uint16> lpszLongPath,
    int cchBuffer,
  ) {
    return (_GetLongPathNameW ??=
        _dylib.lookupFunction<_c_GetLongPathNameW, _dart_GetLongPathNameW>(
            'GetLongPathNameW'))(
      lpszShortPath,
      lpszLongPath,
      cchBuffer,
    );
  }

  _dart_GetLongPathNameW? _GetLongPathNameW;

  int GetShortPathNameW(
    ffi.Pointer<ffi.Uint16> lpszLongPath,
    ffi.Pointer<ffi.Uint16> lpszShortPath,
    int cchBuffer,
  ) {
    return (_GetShortPathNameW ??=
        _dylib.lookupFunction<_c_GetShortPathNameW, _dart_GetShortPathNameW>(
            'GetShortPathNameW'))(
      lpszLongPath,
      lpszShortPath,
      cchBuffer,
    );
  }

  _dart_GetShortPathNameW? _GetShortPathNameW;

  int GetTempFileNameW(
    ffi.Pointer<ffi.Uint16> lpPathName,
    ffi.Pointer<ffi.Uint16> lpPrefixString,
    int uUnique,
    ffi.Pointer<ffi.Uint16> lpTempFileName,
  ) {
    return (_GetTempFileNameW ??=
        _dylib.lookupFunction<_c_GetTempFileNameW, _dart_GetTempFileNameW>(
            'GetTempFileNameW'))(
      lpPathName,
      lpPrefixString,
      uUnique,
      lpTempFileName,
    );
  }

  _dart_GetTempFileNameW? _GetTempFileNameW;

  int GetVolumeInformationByHandleW(
    ffi.Pointer<ffi.Void> hFile,
    ffi.Pointer<ffi.Uint16> lpVolumeNameBuffer,
    int nVolumeNameSize,
    ffi.Pointer<ffi.Uint64> lpVolumeSerialNumber,
    ffi.Pointer<ffi.Uint64> lpMaximumComponentLength,
    ffi.Pointer<ffi.Uint64> lpFileSystemFlags,
    ffi.Pointer<ffi.Uint16> lpFileSystemNameBuffer,
    int nFileSystemNameSize,
  ) {
    return (_GetVolumeInformationByHandleW ??= _dylib.lookupFunction<
        _c_GetVolumeInformationByHandleW,
        _dart_GetVolumeInformationByHandleW>('GetVolumeInformationByHandleW'))(
      hFile,
      lpVolumeNameBuffer,
      nVolumeNameSize,
      lpVolumeSerialNumber,
      lpMaximumComponentLength,
      lpFileSystemFlags,
      lpFileSystemNameBuffer,
      nFileSystemNameSize,
    );
  }

  _dart_GetVolumeInformationByHandleW? _GetVolumeInformationByHandleW;

  int GetVolumeInformationW(
    ffi.Pointer<ffi.Uint16> lpRootPathName,
    ffi.Pointer<ffi.Uint16> lpVolumeNameBuffer,
    int nVolumeNameSize,
    ffi.Pointer<ffi.Uint64> lpVolumeSerialNumber,
    ffi.Pointer<ffi.Uint64> lpMaximumComponentLength,
    ffi.Pointer<ffi.Uint64> lpFileSystemFlags,
    ffi.Pointer<ffi.Uint16> lpFileSystemNameBuffer,
    int nFileSystemNameSize,
  ) {
    return (_GetVolumeInformationW ??= _dylib.lookupFunction<
        _c_GetVolumeInformationW,
        _dart_GetVolumeInformationW>('GetVolumeInformationW'))(
      lpRootPathName,
      lpVolumeNameBuffer,
      nVolumeNameSize,
      lpVolumeSerialNumber,
      lpMaximumComponentLength,
      lpFileSystemFlags,
      lpFileSystemNameBuffer,
      nFileSystemNameSize,
    );
  }

  _dart_GetVolumeInformationW? _GetVolumeInformationW;

  int GetVolumePathNameW(
    ffi.Pointer<ffi.Uint16> lpszFileName,
    ffi.Pointer<ffi.Uint16> lpszVolumePathName,
    int cchBufferLength,
  ) {
    return (_GetVolumePathNameW ??=
        _dylib.lookupFunction<_c_GetVolumePathNameW, _dart_GetVolumePathNameW>(
            'GetVolumePathNameW'))(
      lpszFileName,
      lpszVolumePathName,
      cchBufferLength,
    );
  }

  _dart_GetVolumePathNameW? _GetVolumePathNameW;

  int LocalFileTimeToFileTime(
    ffi.Pointer<LPFILETIME> lpLocalFileTime,
    ffi.Pointer<LPFILETIME> lpFileTime,
  ) {
    return (_LocalFileTimeToFileTime ??= _dylib.lookupFunction<
        _c_LocalFileTimeToFileTime,
        _dart_LocalFileTimeToFileTime>('LocalFileTimeToFileTime'))(
      lpLocalFileTime,
      lpFileTime,
    );
  }

  _dart_LocalFileTimeToFileTime? _LocalFileTimeToFileTime;

  int LockFile(
    ffi.Pointer<ffi.Void> hFile,
    int dwFileOffsetLow,
    int dwFileOffsetHigh,
    int nNumberOfBytesToLockLow,
    int nNumberOfBytesToLockHigh,
  ) {
    return (_LockFile ??=
        _dylib.lookupFunction<_c_LockFile, _dart_LockFile>('LockFile'))(
      hFile,
      dwFileOffsetLow,
      dwFileOffsetHigh,
      nNumberOfBytesToLockLow,
      nNumberOfBytesToLockHigh,
    );
  }

  _dart_LockFile? _LockFile;

  int LockFileEx(
    ffi.Pointer<ffi.Void> hFile,
    int dwFlags,
    int dwReserved,
    int nNumberOfBytesToLockLow,
    int nNumberOfBytesToLockHigh,
    ffi.Pointer<LPOVERLAPPED> lpOverlapped,
  ) {
    return (_LockFileEx ??=
        _dylib.lookupFunction<_c_LockFileEx, _dart_LockFileEx>('LockFileEx'))(
      hFile,
      dwFlags,
      dwReserved,
      nNumberOfBytesToLockLow,
      nNumberOfBytesToLockHigh,
      lpOverlapped,
    );
  }

  _dart_LockFileEx? _LockFileEx;

  int QueryDosDeviceW(
    ffi.Pointer<ffi.Uint16> lpDeviceName,
    ffi.Pointer<ffi.Uint16> lpTargetPath,
    int ucchMax,
  ) {
    return (_QueryDosDeviceW ??=
        _dylib.lookupFunction<_c_QueryDosDeviceW, _dart_QueryDosDeviceW>(
            'QueryDosDeviceW'))(
      lpDeviceName,
      lpTargetPath,
      ucchMax,
    );
  }

  _dart_QueryDosDeviceW? _QueryDosDeviceW;

  int ReadFile(
    ffi.Pointer<ffi.Void> hFile,
    ffi.Pointer<ffi.Void> lpBuffer,
    int nNumberOfBytesToRead,
    ffi.Pointer<ffi.Uint64> lpNumberOfBytesRead,
    ffi.Pointer<LPOVERLAPPED> lpOverlapped,
  ) {
    return (_ReadFile ??=
        _dylib.lookupFunction<_c_ReadFile, _dart_ReadFile>('ReadFile'))(
      hFile,
      lpBuffer,
      nNumberOfBytesToRead,
      lpNumberOfBytesRead,
      lpOverlapped,
    );
  }

  _dart_ReadFile? _ReadFile;

  int ReadFileEx(
    ffi.Pointer<ffi.Void> hFile,
    ffi.Pointer<ffi.Void> lpBuffer,
    int nNumberOfBytesToRead,
    ffi.Pointer<LPOVERLAPPED> lpOverlapped,
    ffi.Pointer<ffi.NativeFunction<LPOVERLAPPED_COMPLETION_ROUTINE>>
        lpCompletionRoutine,
  ) {
    return (_ReadFileEx ??=
        _dylib.lookupFunction<_c_ReadFileEx, _dart_ReadFileEx>('ReadFileEx'))(
      hFile,
      lpBuffer,
      nNumberOfBytesToRead,
      lpOverlapped,
      lpCompletionRoutine,
    );
  }

  _dart_ReadFileEx? _ReadFileEx;

  int RemoveDirectoryA(
    ffi.Pointer<ffi.Int8> lpPathName,
  ) {
    return (_RemoveDirectoryA ??=
        _dylib.lookupFunction<_c_RemoveDirectoryA, _dart_RemoveDirectoryA>(
            'RemoveDirectoryA'))(
      lpPathName,
    );
  }

  _dart_RemoveDirectoryA? _RemoveDirectoryA;

  int RemoveDirectoryW(
    ffi.Pointer<ffi.Uint16> lpPathName,
  ) {
    return (_RemoveDirectoryW ??=
        _dylib.lookupFunction<_c_RemoveDirectoryW, _dart_RemoveDirectoryW>(
            'RemoveDirectoryW'))(
      lpPathName,
    );
  }

  _dart_RemoveDirectoryW? _RemoveDirectoryW;

  int SetEndOfFile(
    ffi.Pointer<ffi.Void> hFile,
  ) {
    return (_SetEndOfFile ??= _dylib
        .lookupFunction<_c_SetEndOfFile, _dart_SetEndOfFile>('SetEndOfFile'))(
      hFile,
    );
  }

  _dart_SetEndOfFile? _SetEndOfFile;

  int SetFileAttributesA(
    ffi.Pointer<ffi.Int8> lpFileName,
    int dwFileAttributes,
  ) {
    return (_SetFileAttributesA ??=
        _dylib.lookupFunction<_c_SetFileAttributesA, _dart_SetFileAttributesA>(
            'SetFileAttributesA'))(
      lpFileName,
      dwFileAttributes,
    );
  }

  _dart_SetFileAttributesA? _SetFileAttributesA;

  int SetFileAttributesW(
    ffi.Pointer<ffi.Uint16> lpFileName,
    int dwFileAttributes,
  ) {
    return (_SetFileAttributesW ??=
        _dylib.lookupFunction<_c_SetFileAttributesW, _dart_SetFileAttributesW>(
            'SetFileAttributesW'))(
      lpFileName,
      dwFileAttributes,
    );
  }

  _dart_SetFileAttributesW? _SetFileAttributesW;

  int SetFileInformationByHandle(
    ffi.Pointer<ffi.Void> hFile,
    int FileInformationClass,
    ffi.Pointer<ffi.Void> lpFileInformation,
    int dwBufferSize,
  ) {
    return (_SetFileInformationByHandle ??= _dylib.lookupFunction<
        _c_SetFileInformationByHandle,
        _dart_SetFileInformationByHandle>('SetFileInformationByHandle'))(
      hFile,
      FileInformationClass,
      lpFileInformation,
      dwBufferSize,
    );
  }

  _dart_SetFileInformationByHandle? _SetFileInformationByHandle;

  int SetFilePointer(
    ffi.Pointer<ffi.Void> hFile,
    int lDistanceToMove,
    ffi.Pointer<ffi.Int64> lpDistanceToMoveHigh,
    int dwMoveMethod,
  ) {
    return (_SetFilePointer ??=
        _dylib.lookupFunction<_c_SetFilePointer, _dart_SetFilePointer>(
            'SetFilePointer'))(
      hFile,
      lDistanceToMove,
      lpDistanceToMoveHigh,
      dwMoveMethod,
    );
  }

  _dart_SetFilePointer? _SetFilePointer;

  int SetFileTime(
    ffi.Pointer<ffi.Void> hFile,
    ffi.Pointer<LPFILETIME> lpCreationTime,
    ffi.Pointer<LPFILETIME> lpLastAccessTime,
    ffi.Pointer<LPFILETIME> lpLastWriteTime,
  ) {
    return (_SetFileTime ??= _dylib
        .lookupFunction<_c_SetFileTime, _dart_SetFileTime>('SetFileTime'))(
      hFile,
      lpCreationTime,
      lpLastAccessTime,
      lpLastWriteTime,
    );
  }

  _dart_SetFileTime? _SetFileTime;

  int SetFileValidData(
    ffi.Pointer<ffi.Void> hFile,
    int ValidDataLength,
  ) {
    return (_SetFileValidData ??=
        _dylib.lookupFunction<_c_SetFileValidData, _dart_SetFileValidData>(
            'SetFileValidData'))(
      hFile,
      ValidDataLength,
    );
  }

  _dart_SetFileValidData? _SetFileValidData;

  int UnlockFile(
    ffi.Pointer<ffi.Void> hFile,
    int dwFileOffsetLow,
    int dwFileOffsetHigh,
    int nNumberOfBytesToUnlockLow,
    int nNumberOfBytesToUnlockHigh,
  ) {
    return (_UnlockFile ??=
        _dylib.lookupFunction<_c_UnlockFile, _dart_UnlockFile>('UnlockFile'))(
      hFile,
      dwFileOffsetLow,
      dwFileOffsetHigh,
      nNumberOfBytesToUnlockLow,
      nNumberOfBytesToUnlockHigh,
    );
  }

  _dart_UnlockFile? _UnlockFile;

  int UnlockFileEx(
    ffi.Pointer<ffi.Void> hFile,
    int dwReserved,
    int nNumberOfBytesToUnlockLow,
    int nNumberOfBytesToUnlockHigh,
    ffi.Pointer<LPOVERLAPPED> lpOverlapped,
  ) {
    return (_UnlockFileEx ??= _dylib
        .lookupFunction<_c_UnlockFileEx, _dart_UnlockFileEx>('UnlockFileEx'))(
      hFile,
      dwReserved,
      nNumberOfBytesToUnlockLow,
      nNumberOfBytesToUnlockHigh,
      lpOverlapped,
    );
  }

  _dart_UnlockFileEx? _UnlockFileEx;

  int WriteFile(
    ffi.Pointer<ffi.Void> hFile,
    ffi.Pointer<ffi.Void> lpBuffer,
    int nNumberOfBytesToWrite,
    ffi.Pointer<ffi.Uint64> lpNumberOfBytesWritten,
    ffi.Pointer<LPOVERLAPPED> lpOverlapped,
  ) {
    return (_WriteFile ??=
        _dylib.lookupFunction<_c_WriteFile, _dart_WriteFile>('WriteFile'))(
      hFile,
      lpBuffer,
      nNumberOfBytesToWrite,
      lpNumberOfBytesWritten,
      lpOverlapped,
    );
  }

  _dart_WriteFile? _WriteFile;

  int WriteFileEx(
    ffi.Pointer<ffi.Void> hFile,
    ffi.Pointer<ffi.Void> lpBuffer,
    int nNumberOfBytesToWrite,
    ffi.Pointer<LPOVERLAPPED> lpOverlapped,
    ffi.Pointer<ffi.NativeFunction<LPOVERLAPPED_COMPLETION_ROUTINE>>
        lpCompletionRoutine,
  ) {
    return (_WriteFileEx ??= _dylib
        .lookupFunction<_c_WriteFileEx, _dart_WriteFileEx>('WriteFileEx'))(
      hFile,
      lpBuffer,
      nNumberOfBytesToWrite,
      lpOverlapped,
      lpCompletionRoutine,
    );
  }

  _dart_WriteFileEx? _WriteFileEx;

  int GetTempPathW(
    int nBufferLength,
    ffi.Pointer<ffi.Uint16> lpBuffer,
  ) {
    return (_GetTempPathW ??= _dylib
        .lookupFunction<_c_GetTempPathW, _dart_GetTempPathW>('GetTempPathW'))(
      nBufferLength,
      lpBuffer,
    );
  }

  _dart_GetTempPathW? _GetTempPathW;

  int GetVolumeNameForVolumeMountPointW(
    ffi.Pointer<ffi.Uint16> lpszVolumeMountPoint,
    ffi.Pointer<ffi.Uint16> lpszVolumeName,
    int cchBufferLength,
  ) {
    return (_GetVolumeNameForVolumeMountPointW ??= _dylib.lookupFunction<
            _c_GetVolumeNameForVolumeMountPointW,
            _dart_GetVolumeNameForVolumeMountPointW>(
        'GetVolumeNameForVolumeMountPointW'))(
      lpszVolumeMountPoint,
      lpszVolumeName,
      cchBufferLength,
    );
  }

  _dart_GetVolumeNameForVolumeMountPointW? _GetVolumeNameForVolumeMountPointW;

  int GetVolumePathNamesForVolumeNameW(
    ffi.Pointer<ffi.Uint16> lpszVolumeName,
    ffi.Pointer<ffi.Uint16> lpszVolumePathNames,
    int cchBufferLength,
    ffi.Pointer<ffi.Uint64> lpcchReturnLength,
  ) {
    return (_GetVolumePathNamesForVolumeNameW ??= _dylib.lookupFunction<
            _c_GetVolumePathNamesForVolumeNameW,
            _dart_GetVolumePathNamesForVolumeNameW>(
        'GetVolumePathNamesForVolumeNameW'))(
      lpszVolumeName,
      lpszVolumePathNames,
      cchBufferLength,
      lpcchReturnLength,
    );
  }

  _dart_GetVolumePathNamesForVolumeNameW? _GetVolumePathNamesForVolumeNameW;

  ffi.Pointer<ffi.Void> CreateFile2(
    ffi.Pointer<ffi.Uint16> lpFileName,
    int dwDesiredAccess,
    int dwShareMode,
    int dwCreationDisposition,
    ffi.Pointer<LPCREATEFILE2_EXTENDED_PARAMETERS> pCreateExParams,
  ) {
    return (_CreateFile2 ??= _dylib
        .lookupFunction<_c_CreateFile2, _dart_CreateFile2>('CreateFile2'))(
      lpFileName,
      dwDesiredAccess,
      dwShareMode,
      dwCreationDisposition,
      pCreateExParams,
    );
  }

  _dart_CreateFile2? _CreateFile2;

  int SetFileIoOverlappedRange(
    ffi.Pointer<ffi.Void> FileHandle,
    ffi.Pointer<ffi.Uint8> OverlappedRangeStart,
    int Length,
  ) {
    return (_SetFileIoOverlappedRange ??= _dylib.lookupFunction<
        _c_SetFileIoOverlappedRange,
        _dart_SetFileIoOverlappedRange>('SetFileIoOverlappedRange'))(
      FileHandle,
      OverlappedRangeStart,
      Length,
    );
  }

  _dart_SetFileIoOverlappedRange? _SetFileIoOverlappedRange;

  int GetCompressedFileSizeA(
    ffi.Pointer<ffi.Int8> lpFileName,
    ffi.Pointer<ffi.Uint64> lpFileSizeHigh,
  ) {
    return (_GetCompressedFileSizeA ??= _dylib.lookupFunction<
        _c_GetCompressedFileSizeA,
        _dart_GetCompressedFileSizeA>('GetCompressedFileSizeA'))(
      lpFileName,
      lpFileSizeHigh,
    );
  }

  _dart_GetCompressedFileSizeA? _GetCompressedFileSizeA;

  int GetCompressedFileSizeW(
    ffi.Pointer<ffi.Uint16> lpFileName,
    ffi.Pointer<ffi.Uint64> lpFileSizeHigh,
  ) {
    return (_GetCompressedFileSizeW ??= _dylib.lookupFunction<
        _c_GetCompressedFileSizeW,
        _dart_GetCompressedFileSizeW>('GetCompressedFileSizeW'))(
      lpFileName,
      lpFileSizeHigh,
    );
  }

  _dart_GetCompressedFileSizeW? _GetCompressedFileSizeW;

  ffi.Pointer<ffi.Void> FindFirstStreamW(
    ffi.Pointer<ffi.Uint16> lpFileName,
    int InfoLevel,
    ffi.Pointer<ffi.Void> lpFindStreamData,
    int dwFlags,
  ) {
    return (_FindFirstStreamW ??=
        _dylib.lookupFunction<_c_FindFirstStreamW, _dart_FindFirstStreamW>(
            'FindFirstStreamW'))(
      lpFileName,
      InfoLevel,
      lpFindStreamData,
      dwFlags,
    );
  }

  _dart_FindFirstStreamW? _FindFirstStreamW;

  int FindNextStreamW(
    ffi.Pointer<ffi.Void> hFindStream,
    ffi.Pointer<ffi.Void> lpFindStreamData,
  ) {
    return (_FindNextStreamW ??=
        _dylib.lookupFunction<_c_FindNextStreamW, _dart_FindNextStreamW>(
            'FindNextStreamW'))(
      hFindStream,
      lpFindStreamData,
    );
  }

  _dart_FindNextStreamW? _FindNextStreamW;

  int AreFileApisANSI() {
    return (_AreFileApisANSI ??=
        _dylib.lookupFunction<_c_AreFileApisANSI, _dart_AreFileApisANSI>(
            'AreFileApisANSI'))();
  }

  _dart_AreFileApisANSI? _AreFileApisANSI;

  int GetTempPathA(
    int nBufferLength,
    ffi.Pointer<ffi.Int8> lpBuffer,
  ) {
    return (_GetTempPathA ??= _dylib
        .lookupFunction<_c_GetTempPathA, _dart_GetTempPathA>('GetTempPathA'))(
      nBufferLength,
      lpBuffer,
    );
  }

  _dart_GetTempPathA? _GetTempPathA;

  ffi.Pointer<ffi.Void> FindFirstFileNameW(
    ffi.Pointer<ffi.Uint16> lpFileName,
    int dwFlags,
    ffi.Pointer<ffi.Uint64> StringLength,
    ffi.Pointer<ffi.Uint16> LinkName,
  ) {
    return (_FindFirstFileNameW ??=
        _dylib.lookupFunction<_c_FindFirstFileNameW, _dart_FindFirstFileNameW>(
            'FindFirstFileNameW'))(
      lpFileName,
      dwFlags,
      StringLength,
      LinkName,
    );
  }

  _dart_FindFirstFileNameW? _FindFirstFileNameW;

  int FindNextFileNameW(
    ffi.Pointer<ffi.Void> hFindStream,
    ffi.Pointer<ffi.Uint64> StringLength,
    ffi.Pointer<ffi.Uint16> LinkName,
  ) {
    return (_FindNextFileNameW ??=
        _dylib.lookupFunction<_c_FindNextFileNameW, _dart_FindNextFileNameW>(
            'FindNextFileNameW'))(
      hFindStream,
      StringLength,
      LinkName,
    );
  }

  _dart_FindNextFileNameW? _FindNextFileNameW;

  int GetVolumeInformationA(
    ffi.Pointer<ffi.Int8> lpRootPathName,
    ffi.Pointer<ffi.Int8> lpVolumeNameBuffer,
    int nVolumeNameSize,
    ffi.Pointer<ffi.Uint64> lpVolumeSerialNumber,
    ffi.Pointer<ffi.Uint64> lpMaximumComponentLength,
    ffi.Pointer<ffi.Uint64> lpFileSystemFlags,
    ffi.Pointer<ffi.Int8> lpFileSystemNameBuffer,
    int nFileSystemNameSize,
  ) {
    return (_GetVolumeInformationA ??= _dylib.lookupFunction<
        _c_GetVolumeInformationA,
        _dart_GetVolumeInformationA>('GetVolumeInformationA'))(
      lpRootPathName,
      lpVolumeNameBuffer,
      nVolumeNameSize,
      lpVolumeSerialNumber,
      lpMaximumComponentLength,
      lpFileSystemFlags,
      lpFileSystemNameBuffer,
      nFileSystemNameSize,
    );
  }

  _dart_GetVolumeInformationA? _GetVolumeInformationA;

  int GetTempFileNameA(
    ffi.Pointer<ffi.Int8> lpPathName,
    ffi.Pointer<ffi.Int8> lpPrefixString,
    int uUnique,
    ffi.Pointer<ffi.Int8> lpTempFileName,
  ) {
    return (_GetTempFileNameA ??=
        _dylib.lookupFunction<_c_GetTempFileNameA, _dart_GetTempFileNameA>(
            'GetTempFileNameA'))(
      lpPathName,
      lpPrefixString,
      uUnique,
      lpTempFileName,
    );
  }

  _dart_GetTempFileNameA? _GetTempFileNameA;

  void SetFileApisToOEM() {
    return (_SetFileApisToOEM ??=
        _dylib.lookupFunction<_c_SetFileApisToOEM, _dart_SetFileApisToOEM>(
            'SetFileApisToOEM'))();
  }

  _dart_SetFileApisToOEM? _SetFileApisToOEM;

  void SetFileApisToANSI() {
    return (_SetFileApisToANSI ??=
        _dylib.lookupFunction<_c_SetFileApisToANSI, _dart_SetFileApisToANSI>(
            'SetFileApisToANSI'))();
  }

  _dart_SetFileApisToANSI? _SetFileApisToANSI;

  int CopyFileFromAppW(
    ffi.Pointer<ffi.Uint16> lpExistingFileName,
    ffi.Pointer<ffi.Uint16> lpNewFileName,
    int bFailIfExists,
  ) {
    return (_CopyFileFromAppW ??=
        _dylib.lookupFunction<_c_CopyFileFromAppW, _dart_CopyFileFromAppW>(
            'CopyFileFromAppW'))(
      lpExistingFileName,
      lpNewFileName,
      bFailIfExists,
    );
  }

  _dart_CopyFileFromAppW? _CopyFileFromAppW;

  int CreateDirectoryFromAppW(
    ffi.Pointer<ffi.Uint16> lpPathName,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  ) {
    return (_CreateDirectoryFromAppW ??= _dylib.lookupFunction<
        _c_CreateDirectoryFromAppW,
        _dart_CreateDirectoryFromAppW>('CreateDirectoryFromAppW'))(
      lpPathName,
      lpSecurityAttributes,
    );
  }

  _dart_CreateDirectoryFromAppW? _CreateDirectoryFromAppW;

  ffi.Pointer<ffi.Void> CreateFileFromAppW(
    ffi.Pointer<ffi.Uint16> lpFileName,
    int dwDesiredAccess,
    int dwShareMode,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
    int dwCreationDisposition,
    int dwFlagsAndAttributes,
    ffi.Pointer<ffi.Void> hTemplateFile,
  ) {
    return (_CreateFileFromAppW ??=
        _dylib.lookupFunction<_c_CreateFileFromAppW, _dart_CreateFileFromAppW>(
            'CreateFileFromAppW'))(
      lpFileName,
      dwDesiredAccess,
      dwShareMode,
      lpSecurityAttributes,
      dwCreationDisposition,
      dwFlagsAndAttributes,
      hTemplateFile,
    );
  }

  _dart_CreateFileFromAppW? _CreateFileFromAppW;

  ffi.Pointer<ffi.Void> CreateFile2FromAppW(
    ffi.Pointer<ffi.Uint16> lpFileName,
    int dwDesiredAccess,
    int dwShareMode,
    int dwCreationDisposition,
    ffi.Pointer<LPCREATEFILE2_EXTENDED_PARAMETERS> pCreateExParams,
  ) {
    return (_CreateFile2FromAppW ??= _dylib.lookupFunction<
        _c_CreateFile2FromAppW,
        _dart_CreateFile2FromAppW>('CreateFile2FromAppW'))(
      lpFileName,
      dwDesiredAccess,
      dwShareMode,
      dwCreationDisposition,
      pCreateExParams,
    );
  }

  _dart_CreateFile2FromAppW? _CreateFile2FromAppW;

  int DeleteFileFromAppW(
    ffi.Pointer<ffi.Uint16> lpFileName,
  ) {
    return (_DeleteFileFromAppW ??=
        _dylib.lookupFunction<_c_DeleteFileFromAppW, _dart_DeleteFileFromAppW>(
            'DeleteFileFromAppW'))(
      lpFileName,
    );
  }

  _dart_DeleteFileFromAppW? _DeleteFileFromAppW;

  ffi.Pointer<ffi.Void> FindFirstFileExFromAppW(
    ffi.Pointer<ffi.Uint16> lpFileName,
    int fInfoLevelId,
    ffi.Pointer<ffi.Void> lpFindFileData,
    int fSearchOp,
    ffi.Pointer<ffi.Void> lpSearchFilter,
    int dwAdditionalFlags,
  ) {
    return (_FindFirstFileExFromAppW ??= _dylib.lookupFunction<
        _c_FindFirstFileExFromAppW,
        _dart_FindFirstFileExFromAppW>('FindFirstFileExFromAppW'))(
      lpFileName,
      fInfoLevelId,
      lpFindFileData,
      fSearchOp,
      lpSearchFilter,
      dwAdditionalFlags,
    );
  }

  _dart_FindFirstFileExFromAppW? _FindFirstFileExFromAppW;

  int GetFileAttributesExFromAppW(
    ffi.Pointer<ffi.Uint16> lpFileName,
    int fInfoLevelId,
    ffi.Pointer<ffi.Void> lpFileInformation,
  ) {
    return (_GetFileAttributesExFromAppW ??= _dylib.lookupFunction<
        _c_GetFileAttributesExFromAppW,
        _dart_GetFileAttributesExFromAppW>('GetFileAttributesExFromAppW'))(
      lpFileName,
      fInfoLevelId,
      lpFileInformation,
    );
  }

  _dart_GetFileAttributesExFromAppW? _GetFileAttributesExFromAppW;

  int MoveFileFromAppW(
    ffi.Pointer<ffi.Uint16> lpExistingFileName,
    ffi.Pointer<ffi.Uint16> lpNewFileName,
  ) {
    return (_MoveFileFromAppW ??=
        _dylib.lookupFunction<_c_MoveFileFromAppW, _dart_MoveFileFromAppW>(
            'MoveFileFromAppW'))(
      lpExistingFileName,
      lpNewFileName,
    );
  }

  _dart_MoveFileFromAppW? _MoveFileFromAppW;

  int RemoveDirectoryFromAppW(
    ffi.Pointer<ffi.Uint16> lpPathName,
  ) {
    return (_RemoveDirectoryFromAppW ??= _dylib.lookupFunction<
        _c_RemoveDirectoryFromAppW,
        _dart_RemoveDirectoryFromAppW>('RemoveDirectoryFromAppW'))(
      lpPathName,
    );
  }

  _dart_RemoveDirectoryFromAppW? _RemoveDirectoryFromAppW;

  int ReplaceFileFromAppW(
    ffi.Pointer<ffi.Uint16> lpReplacedFileName,
    ffi.Pointer<ffi.Uint16> lpReplacementFileName,
    ffi.Pointer<ffi.Uint16> lpBackupFileName,
    int dwReplaceFlags,
    ffi.Pointer<ffi.Void> lpExclude,
    ffi.Pointer<ffi.Void> lpReserved,
  ) {
    return (_ReplaceFileFromAppW ??= _dylib.lookupFunction<
        _c_ReplaceFileFromAppW,
        _dart_ReplaceFileFromAppW>('ReplaceFileFromAppW'))(
      lpReplacedFileName,
      lpReplacementFileName,
      lpBackupFileName,
      dwReplaceFlags,
      lpExclude,
      lpReserved,
    );
  }

  _dart_ReplaceFileFromAppW? _ReplaceFileFromAppW;

  int SetFileAttributesFromAppW(
    ffi.Pointer<ffi.Uint16> lpFileName,
    int dwFileAttributes,
  ) {
    return (_SetFileAttributesFromAppW ??= _dylib.lookupFunction<
        _c_SetFileAttributesFromAppW,
        _dart_SetFileAttributesFromAppW>('SetFileAttributesFromAppW'))(
      lpFileName,
      dwFileAttributes,
    );
  }

  _dart_SetFileAttributesFromAppW? _SetFileAttributesFromAppW;

  int IsDebuggerPresent() {
    return (_IsDebuggerPresent ??=
        _dylib.lookupFunction<_c_IsDebuggerPresent, _dart_IsDebuggerPresent>(
            'IsDebuggerPresent'))();
  }

  _dart_IsDebuggerPresent? _IsDebuggerPresent;

  void DebugBreak() {
    return (_DebugBreak ??=
        _dylib.lookupFunction<_c_DebugBreak, _dart_DebugBreak>('DebugBreak'))();
  }

  _dart_DebugBreak? _DebugBreak;

  void OutputDebugStringA(
    ffi.Pointer<ffi.Int8> lpOutputString,
  ) {
    return (_OutputDebugStringA ??=
        _dylib.lookupFunction<_c_OutputDebugStringA, _dart_OutputDebugStringA>(
            'OutputDebugStringA'))(
      lpOutputString,
    );
  }

  _dart_OutputDebugStringA? _OutputDebugStringA;

  void OutputDebugStringW(
    ffi.Pointer<ffi.Uint16> lpOutputString,
  ) {
    return (_OutputDebugStringW ??=
        _dylib.lookupFunction<_c_OutputDebugStringW, _dart_OutputDebugStringW>(
            'OutputDebugStringW'))(
      lpOutputString,
    );
  }

  _dart_OutputDebugStringW? _OutputDebugStringW;

  int ContinueDebugEvent(
    int dwProcessId,
    int dwThreadId,
    int dwContinueStatus,
  ) {
    return (_ContinueDebugEvent ??=
        _dylib.lookupFunction<_c_ContinueDebugEvent, _dart_ContinueDebugEvent>(
            'ContinueDebugEvent'))(
      dwProcessId,
      dwThreadId,
      dwContinueStatus,
    );
  }

  _dart_ContinueDebugEvent? _ContinueDebugEvent;

  int WaitForDebugEvent(
    ffi.Pointer<LPDEBUG_EVENT> lpDebugEvent,
    int dwMilliseconds,
  ) {
    return (_WaitForDebugEvent ??=
        _dylib.lookupFunction<_c_WaitForDebugEvent, _dart_WaitForDebugEvent>(
            'WaitForDebugEvent'))(
      lpDebugEvent,
      dwMilliseconds,
    );
  }

  _dart_WaitForDebugEvent? _WaitForDebugEvent;

  int DebugActiveProcess(
    int dwProcessId,
  ) {
    return (_DebugActiveProcess ??=
        _dylib.lookupFunction<_c_DebugActiveProcess, _dart_DebugActiveProcess>(
            'DebugActiveProcess'))(
      dwProcessId,
    );
  }

  _dart_DebugActiveProcess? _DebugActiveProcess;

  int DebugActiveProcessStop(
    int dwProcessId,
  ) {
    return (_DebugActiveProcessStop ??= _dylib.lookupFunction<
        _c_DebugActiveProcessStop,
        _dart_DebugActiveProcessStop>('DebugActiveProcessStop'))(
      dwProcessId,
    );
  }

  _dart_DebugActiveProcessStop? _DebugActiveProcessStop;

  int CheckRemoteDebuggerPresent(
    ffi.Pointer<ffi.Void> hProcess,
    ffi.Pointer<ffi.Int32> pbDebuggerPresent,
  ) {
    return (_CheckRemoteDebuggerPresent ??= _dylib.lookupFunction<
        _c_CheckRemoteDebuggerPresent,
        _dart_CheckRemoteDebuggerPresent>('CheckRemoteDebuggerPresent'))(
      hProcess,
      pbDebuggerPresent,
    );
  }

  _dart_CheckRemoteDebuggerPresent? _CheckRemoteDebuggerPresent;

  int WaitForDebugEventEx(
    ffi.Pointer<LPDEBUG_EVENT> lpDebugEvent,
    int dwMilliseconds,
  ) {
    return (_WaitForDebugEventEx ??= _dylib.lookupFunction<
        _c_WaitForDebugEventEx,
        _dart_WaitForDebugEventEx>('WaitForDebugEventEx'))(
      lpDebugEvent,
      dwMilliseconds,
    );
  }

  _dart_WaitForDebugEventEx? _WaitForDebugEventEx;

  ffi.Pointer<ffi.Void> EncodePointer(
    ffi.Pointer<ffi.Void> Ptr,
  ) {
    return (_EncodePointer ??=
        _dylib.lookupFunction<_c_EncodePointer, _dart_EncodePointer>(
            'EncodePointer'))(
      Ptr,
    );
  }

  _dart_EncodePointer? _EncodePointer;

  ffi.Pointer<ffi.Void> DecodePointer(
    ffi.Pointer<ffi.Void> Ptr,
  ) {
    return (_DecodePointer ??=
        _dylib.lookupFunction<_c_DecodePointer, _dart_DecodePointer>(
            'DecodePointer'))(
      Ptr,
    );
  }

  _dart_DecodePointer? _DecodePointer;

  ffi.Pointer<ffi.Void> EncodeSystemPointer(
    ffi.Pointer<ffi.Void> Ptr,
  ) {
    return (_EncodeSystemPointer ??= _dylib.lookupFunction<
        _c_EncodeSystemPointer,
        _dart_EncodeSystemPointer>('EncodeSystemPointer'))(
      Ptr,
    );
  }

  _dart_EncodeSystemPointer? _EncodeSystemPointer;

  ffi.Pointer<ffi.Void> DecodeSystemPointer(
    ffi.Pointer<ffi.Void> Ptr,
  ) {
    return (_DecodeSystemPointer ??= _dylib.lookupFunction<
        _c_DecodeSystemPointer,
        _dart_DecodeSystemPointer>('DecodeSystemPointer'))(
      Ptr,
    );
  }

  _dart_DecodeSystemPointer? _DecodeSystemPointer;

  int EncodeRemotePointer(
    ffi.Pointer<ffi.Void> ProcessHandle,
    ffi.Pointer<ffi.Void> Ptr,
    ffi.Pointer<ffi.Pointer<ffi.Void>> EncodedPtr,
  ) {
    return (_EncodeRemotePointer ??= _dylib.lookupFunction<
        _c_EncodeRemotePointer,
        _dart_EncodeRemotePointer>('EncodeRemotePointer'))(
      ProcessHandle,
      Ptr,
      EncodedPtr,
    );
  }

  _dart_EncodeRemotePointer? _EncodeRemotePointer;

  int DecodeRemotePointer(
    ffi.Pointer<ffi.Void> ProcessHandle,
    ffi.Pointer<ffi.Void> Ptr,
    ffi.Pointer<ffi.Pointer<ffi.Void>> DecodedPtr,
  ) {
    return (_DecodeRemotePointer ??= _dylib.lookupFunction<
        _c_DecodeRemotePointer,
        _dart_DecodeRemotePointer>('DecodeRemotePointer'))(
      ProcessHandle,
      Ptr,
      DecodedPtr,
    );
  }

  _dart_DecodeRemotePointer? _DecodeRemotePointer;

  int Beep(
    int dwFreq,
    int dwDuration,
  ) {
    return (_Beep ??= _dylib.lookupFunction<_c_Beep, _dart_Beep>('Beep'))(
      dwFreq,
      dwDuration,
    );
  }

  _dart_Beep? _Beep;

  int CloseHandle(
    ffi.Pointer<ffi.Void> hObject,
  ) {
    return (_CloseHandle ??= _dylib
        .lookupFunction<_c_CloseHandle, _dart_CloseHandle>('CloseHandle'))(
      hObject,
    );
  }

  _dart_CloseHandle? _CloseHandle;

  int DuplicateHandle(
    ffi.Pointer<ffi.Void> hSourceProcessHandle,
    ffi.Pointer<ffi.Void> hSourceHandle,
    ffi.Pointer<ffi.Void> hTargetProcessHandle,
    ffi.Pointer<ffi.Pointer<ffi.Void>> lpTargetHandle,
    int dwDesiredAccess,
    int bInheritHandle,
    int dwOptions,
  ) {
    return (_DuplicateHandle ??=
        _dylib.lookupFunction<_c_DuplicateHandle, _dart_DuplicateHandle>(
            'DuplicateHandle'))(
      hSourceProcessHandle,
      hSourceHandle,
      hTargetProcessHandle,
      lpTargetHandle,
      dwDesiredAccess,
      bInheritHandle,
      dwOptions,
    );
  }

  _dart_DuplicateHandle? _DuplicateHandle;

  int CompareObjectHandles(
    ffi.Pointer<ffi.Void> hFirstObjectHandle,
    ffi.Pointer<ffi.Void> hSecondObjectHandle,
  ) {
    return (_CompareObjectHandles ??= _dylib.lookupFunction<
        _c_CompareObjectHandles,
        _dart_CompareObjectHandles>('CompareObjectHandles'))(
      hFirstObjectHandle,
      hSecondObjectHandle,
    );
  }

  _dart_CompareObjectHandles? _CompareObjectHandles;

  int GetHandleInformation(
    ffi.Pointer<ffi.Void> hObject,
    ffi.Pointer<ffi.Uint64> lpdwFlags,
  ) {
    return (_GetHandleInformation ??= _dylib.lookupFunction<
        _c_GetHandleInformation,
        _dart_GetHandleInformation>('GetHandleInformation'))(
      hObject,
      lpdwFlags,
    );
  }

  _dart_GetHandleInformation? _GetHandleInformation;

  int SetHandleInformation(
    ffi.Pointer<ffi.Void> hObject,
    int dwMask,
    int dwFlags,
  ) {
    return (_SetHandleInformation ??= _dylib.lookupFunction<
        _c_SetHandleInformation,
        _dart_SetHandleInformation>('SetHandleInformation'))(
      hObject,
      dwMask,
      dwFlags,
    );
  }

  _dart_SetHandleInformation? _SetHandleInformation;

  void RaiseException(
    int dwExceptionCode,
    int dwExceptionFlags,
    int nNumberOfArguments,
    ffi.Pointer<ffi.Uint64> lpArguments,
  ) {
    return (_RaiseException ??=
        _dylib.lookupFunction<_c_RaiseException, _dart_RaiseException>(
            'RaiseException'))(
      dwExceptionCode,
      dwExceptionFlags,
      nNumberOfArguments,
      lpArguments,
    );
  }

  _dart_RaiseException? _RaiseException;

  int UnhandledExceptionFilter(
    ffi.Pointer<PEXCEPTION_POINTERS> ExceptionInfo,
  ) {
    return (_UnhandledExceptionFilter ??= _dylib.lookupFunction<
        _c_UnhandledExceptionFilter,
        _dart_UnhandledExceptionFilter>('UnhandledExceptionFilter'))(
      ExceptionInfo,
    );
  }

  _dart_UnhandledExceptionFilter? _UnhandledExceptionFilter;

  ffi.Pointer<ffi.NativeFunction<LPTOP_LEVEL_EXCEPTION_FILTER>>
      SetUnhandledExceptionFilter(
    ffi.Pointer<ffi.NativeFunction<LPTOP_LEVEL_EXCEPTION_FILTER>>
        lpTopLevelExceptionFilter,
  ) {
    return (_SetUnhandledExceptionFilter ??= _dylib.lookupFunction<
        _c_SetUnhandledExceptionFilter,
        _dart_SetUnhandledExceptionFilter>('SetUnhandledExceptionFilter'))(
      lpTopLevelExceptionFilter,
    );
  }

  _dart_SetUnhandledExceptionFilter? _SetUnhandledExceptionFilter;

  int GetLastError() {
    return (_GetLastError ??= _dylib
        .lookupFunction<_c_GetLastError, _dart_GetLastError>('GetLastError'))();
  }

  _dart_GetLastError? _GetLastError;

  void SetLastError(
    int dwErrCode,
  ) {
    return (_SetLastError ??= _dylib
        .lookupFunction<_c_SetLastError, _dart_SetLastError>('SetLastError'))(
      dwErrCode,
    );
  }

  _dart_SetLastError? _SetLastError;

  int GetErrorMode() {
    return (_GetErrorMode ??= _dylib
        .lookupFunction<_c_GetErrorMode, _dart_GetErrorMode>('GetErrorMode'))();
  }

  _dart_GetErrorMode? _GetErrorMode;

  int SetErrorMode(
    int uMode,
  ) {
    return (_SetErrorMode ??= _dylib
        .lookupFunction<_c_SetErrorMode, _dart_SetErrorMode>('SetErrorMode'))(
      uMode,
    );
  }

  _dart_SetErrorMode? _SetErrorMode;

  ffi.Pointer<ffi.Void> AddVectoredExceptionHandler(
    int First,
    ffi.Pointer<ffi.NativeFunction<PVECTORED_EXCEPTION_HANDLER>> Handler,
  ) {
    return (_AddVectoredExceptionHandler ??= _dylib.lookupFunction<
        _c_AddVectoredExceptionHandler,
        _dart_AddVectoredExceptionHandler>('AddVectoredExceptionHandler'))(
      First,
      Handler,
    );
  }

  _dart_AddVectoredExceptionHandler? _AddVectoredExceptionHandler;

  int RemoveVectoredExceptionHandler(
    ffi.Pointer<ffi.Void> Handle,
  ) {
    return (_RemoveVectoredExceptionHandler ??= _dylib.lookupFunction<
            _c_RemoveVectoredExceptionHandler,
            _dart_RemoveVectoredExceptionHandler>(
        'RemoveVectoredExceptionHandler'))(
      Handle,
    );
  }

  _dart_RemoveVectoredExceptionHandler? _RemoveVectoredExceptionHandler;

  ffi.Pointer<ffi.Void> AddVectoredContinueHandler(
    int First,
    ffi.Pointer<ffi.NativeFunction<PVECTORED_EXCEPTION_HANDLER>> Handler,
  ) {
    return (_AddVectoredContinueHandler ??= _dylib.lookupFunction<
        _c_AddVectoredContinueHandler,
        _dart_AddVectoredContinueHandler>('AddVectoredContinueHandler'))(
      First,
      Handler,
    );
  }

  _dart_AddVectoredContinueHandler? _AddVectoredContinueHandler;

  int RemoveVectoredContinueHandler(
    ffi.Pointer<ffi.Void> Handle,
  ) {
    return (_RemoveVectoredContinueHandler ??= _dylib.lookupFunction<
        _c_RemoveVectoredContinueHandler,
        _dart_RemoveVectoredContinueHandler>('RemoveVectoredContinueHandler'))(
      Handle,
    );
  }

  _dart_RemoveVectoredContinueHandler? _RemoveVectoredContinueHandler;

  void RaiseFailFastException(
    ffi.Pointer<EXCEPTION_RECORD> pExceptionRecord,
    ffi.Pointer<PCONTEXT> pContextRecord,
    int dwFlags,
  ) {
    return (_RaiseFailFastException ??= _dylib.lookupFunction<
        _c_RaiseFailFastException,
        _dart_RaiseFailFastException>('RaiseFailFastException'))(
      pExceptionRecord,
      pContextRecord,
      dwFlags,
    );
  }

  _dart_RaiseFailFastException? _RaiseFailFastException;

  void FatalAppExitA(
    int uAction,
    ffi.Pointer<ffi.Int8> lpMessageText,
  ) {
    return (_FatalAppExitA ??=
        _dylib.lookupFunction<_c_FatalAppExitA, _dart_FatalAppExitA>(
            'FatalAppExitA'))(
      uAction,
      lpMessageText,
    );
  }

  _dart_FatalAppExitA? _FatalAppExitA;

  void FatalAppExitW(
    int uAction,
    ffi.Pointer<ffi.Uint16> lpMessageText,
  ) {
    return (_FatalAppExitW ??=
        _dylib.lookupFunction<_c_FatalAppExitW, _dart_FatalAppExitW>(
            'FatalAppExitW'))(
      uAction,
      lpMessageText,
    );
  }

  _dart_FatalAppExitW? _FatalAppExitW;

  int GetThreadErrorMode() {
    return (_GetThreadErrorMode ??=
        _dylib.lookupFunction<_c_GetThreadErrorMode, _dart_GetThreadErrorMode>(
            'GetThreadErrorMode'))();
  }

  _dart_GetThreadErrorMode? _GetThreadErrorMode;

  int SetThreadErrorMode(
    int dwNewMode,
    ffi.Pointer<ffi.Uint64> lpOldMode,
  ) {
    return (_SetThreadErrorMode ??=
        _dylib.lookupFunction<_c_SetThreadErrorMode, _dart_SetThreadErrorMode>(
            'SetThreadErrorMode'))(
      dwNewMode,
      lpOldMode,
    );
  }

  _dart_SetThreadErrorMode? _SetThreadErrorMode;

  void TerminateProcessOnMemoryExhaustion(
    int FailedAllocationSize,
  ) {
    return (_TerminateProcessOnMemoryExhaustion ??= _dylib.lookupFunction<
            _c_TerminateProcessOnMemoryExhaustion,
            _dart_TerminateProcessOnMemoryExhaustion>(
        'TerminateProcessOnMemoryExhaustion'))(
      FailedAllocationSize,
    );
  }

  _dart_TerminateProcessOnMemoryExhaustion? _TerminateProcessOnMemoryExhaustion;

  int FlsAlloc(
    ffi.Pointer<ffi.NativeFunction<PFLS_CALLBACK_FUNCTION>> lpCallback,
  ) {
    return (_FlsAlloc ??=
        _dylib.lookupFunction<_c_FlsAlloc, _dart_FlsAlloc>('FlsAlloc'))(
      lpCallback,
    );
  }

  _dart_FlsAlloc? _FlsAlloc;

  ffi.Pointer<ffi.Void> FlsGetValue(
    int dwFlsIndex,
  ) {
    return (_FlsGetValue ??= _dylib
        .lookupFunction<_c_FlsGetValue, _dart_FlsGetValue>('FlsGetValue'))(
      dwFlsIndex,
    );
  }

  _dart_FlsGetValue? _FlsGetValue;

  int FlsSetValue(
    int dwFlsIndex,
    ffi.Pointer<ffi.Void> lpFlsData,
  ) {
    return (_FlsSetValue ??= _dylib
        .lookupFunction<_c_FlsSetValue, _dart_FlsSetValue>('FlsSetValue'))(
      dwFlsIndex,
      lpFlsData,
    );
  }

  _dart_FlsSetValue? _FlsSetValue;

  int FlsFree(
    int dwFlsIndex,
  ) {
    return (_FlsFree ??=
        _dylib.lookupFunction<_c_FlsFree, _dart_FlsFree>('FlsFree'))(
      dwFlsIndex,
    );
  }

  _dart_FlsFree? _FlsFree;

  int IsThreadAFiber() {
    return (_IsThreadAFiber ??=
        _dylib.lookupFunction<_c_IsThreadAFiber, _dart_IsThreadAFiber>(
            'IsThreadAFiber'))();
  }

  _dart_IsThreadAFiber? _IsThreadAFiber;

  int CreatePipe(
    ffi.Pointer<ffi.Pointer<ffi.Void>> hReadPipe,
    ffi.Pointer<ffi.Pointer<ffi.Void>> hWritePipe,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpPipeAttributes,
    int nSize,
  ) {
    return (_CreatePipe ??=
        _dylib.lookupFunction<_c_CreatePipe, _dart_CreatePipe>('CreatePipe'))(
      hReadPipe,
      hWritePipe,
      lpPipeAttributes,
      nSize,
    );
  }

  _dart_CreatePipe? _CreatePipe;

  int ConnectNamedPipe(
    ffi.Pointer<ffi.Void> hNamedPipe,
    ffi.Pointer<LPOVERLAPPED> lpOverlapped,
  ) {
    return (_ConnectNamedPipe ??=
        _dylib.lookupFunction<_c_ConnectNamedPipe, _dart_ConnectNamedPipe>(
            'ConnectNamedPipe'))(
      hNamedPipe,
      lpOverlapped,
    );
  }

  _dart_ConnectNamedPipe? _ConnectNamedPipe;

  int DisconnectNamedPipe(
    ffi.Pointer<ffi.Void> hNamedPipe,
  ) {
    return (_DisconnectNamedPipe ??= _dylib.lookupFunction<
        _c_DisconnectNamedPipe,
        _dart_DisconnectNamedPipe>('DisconnectNamedPipe'))(
      hNamedPipe,
    );
  }

  _dart_DisconnectNamedPipe? _DisconnectNamedPipe;

  int SetNamedPipeHandleState(
    ffi.Pointer<ffi.Void> hNamedPipe,
    ffi.Pointer<ffi.Uint64> lpMode,
    ffi.Pointer<ffi.Uint64> lpMaxCollectionCount,
    ffi.Pointer<ffi.Uint64> lpCollectDataTimeout,
  ) {
    return (_SetNamedPipeHandleState ??= _dylib.lookupFunction<
        _c_SetNamedPipeHandleState,
        _dart_SetNamedPipeHandleState>('SetNamedPipeHandleState'))(
      hNamedPipe,
      lpMode,
      lpMaxCollectionCount,
      lpCollectDataTimeout,
    );
  }

  _dart_SetNamedPipeHandleState? _SetNamedPipeHandleState;

  int PeekNamedPipe(
    ffi.Pointer<ffi.Void> hNamedPipe,
    ffi.Pointer<ffi.Void> lpBuffer,
    int nBufferSize,
    ffi.Pointer<ffi.Uint64> lpBytesRead,
    ffi.Pointer<ffi.Uint64> lpTotalBytesAvail,
    ffi.Pointer<ffi.Uint64> lpBytesLeftThisMessage,
  ) {
    return (_PeekNamedPipe ??=
        _dylib.lookupFunction<_c_PeekNamedPipe, _dart_PeekNamedPipe>(
            'PeekNamedPipe'))(
      hNamedPipe,
      lpBuffer,
      nBufferSize,
      lpBytesRead,
      lpTotalBytesAvail,
      lpBytesLeftThisMessage,
    );
  }

  _dart_PeekNamedPipe? _PeekNamedPipe;

  int TransactNamedPipe(
    ffi.Pointer<ffi.Void> hNamedPipe,
    ffi.Pointer<ffi.Void> lpInBuffer,
    int nInBufferSize,
    ffi.Pointer<ffi.Void> lpOutBuffer,
    int nOutBufferSize,
    ffi.Pointer<ffi.Uint64> lpBytesRead,
    ffi.Pointer<LPOVERLAPPED> lpOverlapped,
  ) {
    return (_TransactNamedPipe ??=
        _dylib.lookupFunction<_c_TransactNamedPipe, _dart_TransactNamedPipe>(
            'TransactNamedPipe'))(
      hNamedPipe,
      lpInBuffer,
      nInBufferSize,
      lpOutBuffer,
      nOutBufferSize,
      lpBytesRead,
      lpOverlapped,
    );
  }

  _dart_TransactNamedPipe? _TransactNamedPipe;

  ffi.Pointer<ffi.Void> CreateNamedPipeW(
    ffi.Pointer<ffi.Uint16> lpName,
    int dwOpenMode,
    int dwPipeMode,
    int nMaxInstances,
    int nOutBufferSize,
    int nInBufferSize,
    int nDefaultTimeOut,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  ) {
    return (_CreateNamedPipeW ??=
        _dylib.lookupFunction<_c_CreateNamedPipeW, _dart_CreateNamedPipeW>(
            'CreateNamedPipeW'))(
      lpName,
      dwOpenMode,
      dwPipeMode,
      nMaxInstances,
      nOutBufferSize,
      nInBufferSize,
      nDefaultTimeOut,
      lpSecurityAttributes,
    );
  }

  _dart_CreateNamedPipeW? _CreateNamedPipeW;

  int WaitNamedPipeW(
    ffi.Pointer<ffi.Uint16> lpNamedPipeName,
    int nTimeOut,
  ) {
    return (_WaitNamedPipeW ??=
        _dylib.lookupFunction<_c_WaitNamedPipeW, _dart_WaitNamedPipeW>(
            'WaitNamedPipeW'))(
      lpNamedPipeName,
      nTimeOut,
    );
  }

  _dart_WaitNamedPipeW? _WaitNamedPipeW;

  int GetNamedPipeClientComputerNameW(
    ffi.Pointer<ffi.Void> Pipe,
    ffi.Pointer<ffi.Uint16> ClientComputerName,
    int ClientComputerNameLength,
  ) {
    return (_GetNamedPipeClientComputerNameW ??= _dylib.lookupFunction<
            _c_GetNamedPipeClientComputerNameW,
            _dart_GetNamedPipeClientComputerNameW>(
        'GetNamedPipeClientComputerNameW'))(
      Pipe,
      ClientComputerName,
      ClientComputerNameLength,
    );
  }

  _dart_GetNamedPipeClientComputerNameW? _GetNamedPipeClientComputerNameW;

  int ImpersonateNamedPipeClient(
    ffi.Pointer<ffi.Void> hNamedPipe,
  ) {
    return (_ImpersonateNamedPipeClient ??= _dylib.lookupFunction<
        _c_ImpersonateNamedPipeClient,
        _dart_ImpersonateNamedPipeClient>('ImpersonateNamedPipeClient'))(
      hNamedPipe,
    );
  }

  _dart_ImpersonateNamedPipeClient? _ImpersonateNamedPipeClient;

  int GetNamedPipeInfo(
    ffi.Pointer<ffi.Void> hNamedPipe,
    ffi.Pointer<ffi.Uint64> lpFlags,
    ffi.Pointer<ffi.Uint64> lpOutBufferSize,
    ffi.Pointer<ffi.Uint64> lpInBufferSize,
    ffi.Pointer<ffi.Uint64> lpMaxInstances,
  ) {
    return (_GetNamedPipeInfo ??=
        _dylib.lookupFunction<_c_GetNamedPipeInfo, _dart_GetNamedPipeInfo>(
            'GetNamedPipeInfo'))(
      hNamedPipe,
      lpFlags,
      lpOutBufferSize,
      lpInBufferSize,
      lpMaxInstances,
    );
  }

  _dart_GetNamedPipeInfo? _GetNamedPipeInfo;

  int GetNamedPipeHandleStateW(
    ffi.Pointer<ffi.Void> hNamedPipe,
    ffi.Pointer<ffi.Uint64> lpState,
    ffi.Pointer<ffi.Uint64> lpCurInstances,
    ffi.Pointer<ffi.Uint64> lpMaxCollectionCount,
    ffi.Pointer<ffi.Uint64> lpCollectDataTimeout,
    ffi.Pointer<ffi.Uint16> lpUserName,
    int nMaxUserNameSize,
  ) {
    return (_GetNamedPipeHandleStateW ??= _dylib.lookupFunction<
        _c_GetNamedPipeHandleStateW,
        _dart_GetNamedPipeHandleStateW>('GetNamedPipeHandleStateW'))(
      hNamedPipe,
      lpState,
      lpCurInstances,
      lpMaxCollectionCount,
      lpCollectDataTimeout,
      lpUserName,
      nMaxUserNameSize,
    );
  }

  _dart_GetNamedPipeHandleStateW? _GetNamedPipeHandleStateW;

  int CallNamedPipeW(
    ffi.Pointer<ffi.Uint16> lpNamedPipeName,
    ffi.Pointer<ffi.Void> lpInBuffer,
    int nInBufferSize,
    ffi.Pointer<ffi.Void> lpOutBuffer,
    int nOutBufferSize,
    ffi.Pointer<ffi.Uint64> lpBytesRead,
    int nTimeOut,
  ) {
    return (_CallNamedPipeW ??=
        _dylib.lookupFunction<_c_CallNamedPipeW, _dart_CallNamedPipeW>(
            'CallNamedPipeW'))(
      lpNamedPipeName,
      lpInBuffer,
      nInBufferSize,
      lpOutBuffer,
      nOutBufferSize,
      lpBytesRead,
      nTimeOut,
    );
  }

  _dart_CallNamedPipeW? _CallNamedPipeW;

  ffi.Pointer<ffi.Void> HeapCreate(
    int flOptions,
    int dwInitialSize,
    int dwMaximumSize,
  ) {
    return (_HeapCreate ??=
        _dylib.lookupFunction<_c_HeapCreate, _dart_HeapCreate>('HeapCreate'))(
      flOptions,
      dwInitialSize,
      dwMaximumSize,
    );
  }

  _dart_HeapCreate? _HeapCreate;

  int HeapDestroy(
    ffi.Pointer<ffi.Void> hHeap,
  ) {
    return (_HeapDestroy ??= _dylib
        .lookupFunction<_c_HeapDestroy, _dart_HeapDestroy>('HeapDestroy'))(
      hHeap,
    );
  }

  _dart_HeapDestroy? _HeapDestroy;

  ffi.Pointer<ffi.Void> HeapAlloc(
    ffi.Pointer<ffi.Void> hHeap,
    int dwFlags,
    int dwBytes,
  ) {
    return (_HeapAlloc ??=
        _dylib.lookupFunction<_c_HeapAlloc, _dart_HeapAlloc>('HeapAlloc'))(
      hHeap,
      dwFlags,
      dwBytes,
    );
  }

  _dart_HeapAlloc? _HeapAlloc;

  ffi.Pointer<ffi.Void> HeapReAlloc(
    ffi.Pointer<ffi.Void> hHeap,
    int dwFlags,
    ffi.Pointer<ffi.Void> lpMem,
    int dwBytes,
  ) {
    return (_HeapReAlloc ??= _dylib
        .lookupFunction<_c_HeapReAlloc, _dart_HeapReAlloc>('HeapReAlloc'))(
      hHeap,
      dwFlags,
      lpMem,
      dwBytes,
    );
  }

  _dart_HeapReAlloc? _HeapReAlloc;

  int HeapFree(
    ffi.Pointer<ffi.Void> hHeap,
    int dwFlags,
    ffi.Pointer<ffi.Void> lpMem,
  ) {
    return (_HeapFree ??=
        _dylib.lookupFunction<_c_HeapFree, _dart_HeapFree>('HeapFree'))(
      hHeap,
      dwFlags,
      lpMem,
    );
  }

  _dart_HeapFree? _HeapFree;

  int HeapSize(
    ffi.Pointer<ffi.Void> hHeap,
    int dwFlags,
    ffi.Pointer<ffi.Void> lpMem,
  ) {
    return (_HeapSize ??=
        _dylib.lookupFunction<_c_HeapSize, _dart_HeapSize>('HeapSize'))(
      hHeap,
      dwFlags,
      lpMem,
    );
  }

  _dart_HeapSize? _HeapSize;

  ffi.Pointer<ffi.Void> GetProcessHeap() {
    return (_GetProcessHeap ??=
        _dylib.lookupFunction<_c_GetProcessHeap, _dart_GetProcessHeap>(
            'GetProcessHeap'))();
  }

  _dart_GetProcessHeap? _GetProcessHeap;

  int HeapCompact(
    ffi.Pointer<ffi.Void> hHeap,
    int dwFlags,
  ) {
    return (_HeapCompact ??= _dylib
        .lookupFunction<_c_HeapCompact, _dart_HeapCompact>('HeapCompact'))(
      hHeap,
      dwFlags,
    );
  }

  _dart_HeapCompact? _HeapCompact;

  int HeapSetInformation(
    ffi.Pointer<ffi.Void> HeapHandle,
    int HeapInformationClass,
    ffi.Pointer<ffi.Void> HeapInformation,
    int HeapInformationLength,
  ) {
    return (_HeapSetInformation ??=
        _dylib.lookupFunction<_c_HeapSetInformation, _dart_HeapSetInformation>(
            'HeapSetInformation'))(
      HeapHandle,
      HeapInformationClass,
      HeapInformation,
      HeapInformationLength,
    );
  }

  _dart_HeapSetInformation? _HeapSetInformation;

  int HeapValidate(
    ffi.Pointer<ffi.Void> hHeap,
    int dwFlags,
    ffi.Pointer<ffi.Void> lpMem,
  ) {
    return (_HeapValidate ??= _dylib
        .lookupFunction<_c_HeapValidate, _dart_HeapValidate>('HeapValidate'))(
      hHeap,
      dwFlags,
      lpMem,
    );
  }

  _dart_HeapValidate? _HeapValidate;

  int HeapSummary(
    ffi.Pointer<ffi.Void> hHeap,
    int dwFlags,
    ffi.Pointer<PHEAP_SUMMARY> lpSummary,
  ) {
    return (_HeapSummary ??= _dylib
        .lookupFunction<_c_HeapSummary, _dart_HeapSummary>('HeapSummary'))(
      hHeap,
      dwFlags,
      lpSummary,
    );
  }

  _dart_HeapSummary? _HeapSummary;

  int GetProcessHeaps(
    int NumberOfHeaps,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ProcessHeaps,
  ) {
    return (_GetProcessHeaps ??=
        _dylib.lookupFunction<_c_GetProcessHeaps, _dart_GetProcessHeaps>(
            'GetProcessHeaps'))(
      NumberOfHeaps,
      ProcessHeaps,
    );
  }

  _dart_GetProcessHeaps? _GetProcessHeaps;

  int HeapLock(
    ffi.Pointer<ffi.Void> hHeap,
  ) {
    return (_HeapLock ??=
        _dylib.lookupFunction<_c_HeapLock, _dart_HeapLock>('HeapLock'))(
      hHeap,
    );
  }

  _dart_HeapLock? _HeapLock;

  int HeapUnlock(
    ffi.Pointer<ffi.Void> hHeap,
  ) {
    return (_HeapUnlock ??=
        _dylib.lookupFunction<_c_HeapUnlock, _dart_HeapUnlock>('HeapUnlock'))(
      hHeap,
    );
  }

  _dart_HeapUnlock? _HeapUnlock;

  int HeapWalk(
    ffi.Pointer<ffi.Void> hHeap,
    ffi.Pointer<PPROCESS_HEAP_ENTRY> lpEntry,
  ) {
    return (_HeapWalk ??=
        _dylib.lookupFunction<_c_HeapWalk, _dart_HeapWalk>('HeapWalk'))(
      hHeap,
      lpEntry,
    );
  }

  _dart_HeapWalk? _HeapWalk;

  int HeapQueryInformation(
    ffi.Pointer<ffi.Void> HeapHandle,
    int HeapInformationClass,
    ffi.Pointer<ffi.Void> HeapInformation,
    int HeapInformationLength,
    ffi.Pointer<ffi.Uint64> ReturnLength,
  ) {
    return (_HeapQueryInformation ??= _dylib.lookupFunction<
        _c_HeapQueryInformation,
        _dart_HeapQueryInformation>('HeapQueryInformation'))(
      HeapHandle,
      HeapInformationClass,
      HeapInformation,
      HeapInformationLength,
      ReturnLength,
    );
  }

  _dart_HeapQueryInformation? _HeapQueryInformation;

  ffi.Pointer<ffi.Void> CreateIoCompletionPort(
    ffi.Pointer<ffi.Void> FileHandle,
    ffi.Pointer<ffi.Void> ExistingCompletionPort,
    int CompletionKey,
    int NumberOfConcurrentThreads,
  ) {
    return (_CreateIoCompletionPort ??= _dylib.lookupFunction<
        _c_CreateIoCompletionPort,
        _dart_CreateIoCompletionPort>('CreateIoCompletionPort'))(
      FileHandle,
      ExistingCompletionPort,
      CompletionKey,
      NumberOfConcurrentThreads,
    );
  }

  _dart_CreateIoCompletionPort? _CreateIoCompletionPort;

  int GetQueuedCompletionStatus(
    ffi.Pointer<ffi.Void> CompletionPort,
    ffi.Pointer<ffi.Uint64> lpNumberOfBytesTransferred,
    ffi.Pointer<ffi.Uint64> lpCompletionKey,
    ffi.Pointer<ffi.Pointer<LPOVERLAPPED>> lpOverlapped,
    int dwMilliseconds,
  ) {
    return (_GetQueuedCompletionStatus ??= _dylib.lookupFunction<
        _c_GetQueuedCompletionStatus,
        _dart_GetQueuedCompletionStatus>('GetQueuedCompletionStatus'))(
      CompletionPort,
      lpNumberOfBytesTransferred,
      lpCompletionKey,
      lpOverlapped,
      dwMilliseconds,
    );
  }

  _dart_GetQueuedCompletionStatus? _GetQueuedCompletionStatus;

  int GetQueuedCompletionStatusEx(
    ffi.Pointer<ffi.Void> CompletionPort,
    ffi.Pointer<LPOVERLAPPED_ENTRY> lpCompletionPortEntries,
    int ulCount,
    ffi.Pointer<ffi.Uint64> ulNumEntriesRemoved,
    int dwMilliseconds,
    int fAlertable,
  ) {
    return (_GetQueuedCompletionStatusEx ??= _dylib.lookupFunction<
        _c_GetQueuedCompletionStatusEx,
        _dart_GetQueuedCompletionStatusEx>('GetQueuedCompletionStatusEx'))(
      CompletionPort,
      lpCompletionPortEntries,
      ulCount,
      ulNumEntriesRemoved,
      dwMilliseconds,
      fAlertable,
    );
  }

  _dart_GetQueuedCompletionStatusEx? _GetQueuedCompletionStatusEx;

  int PostQueuedCompletionStatus(
    ffi.Pointer<ffi.Void> CompletionPort,
    int dwNumberOfBytesTransferred,
    int dwCompletionKey,
    ffi.Pointer<LPOVERLAPPED> lpOverlapped,
  ) {
    return (_PostQueuedCompletionStatus ??= _dylib.lookupFunction<
        _c_PostQueuedCompletionStatus,
        _dart_PostQueuedCompletionStatus>('PostQueuedCompletionStatus'))(
      CompletionPort,
      dwNumberOfBytesTransferred,
      dwCompletionKey,
      lpOverlapped,
    );
  }

  _dart_PostQueuedCompletionStatus? _PostQueuedCompletionStatus;

  int DeviceIoControl(
    ffi.Pointer<ffi.Void> hDevice,
    int dwIoControlCode,
    ffi.Pointer<ffi.Void> lpInBuffer,
    int nInBufferSize,
    ffi.Pointer<ffi.Void> lpOutBuffer,
    int nOutBufferSize,
    ffi.Pointer<ffi.Uint64> lpBytesReturned,
    ffi.Pointer<LPOVERLAPPED> lpOverlapped,
  ) {
    return (_DeviceIoControl ??=
        _dylib.lookupFunction<_c_DeviceIoControl, _dart_DeviceIoControl>(
            'DeviceIoControl'))(
      hDevice,
      dwIoControlCode,
      lpInBuffer,
      nInBufferSize,
      lpOutBuffer,
      nOutBufferSize,
      lpBytesReturned,
      lpOverlapped,
    );
  }

  _dart_DeviceIoControl? _DeviceIoControl;

  int GetOverlappedResult(
    ffi.Pointer<ffi.Void> hFile,
    ffi.Pointer<LPOVERLAPPED> lpOverlapped,
    ffi.Pointer<ffi.Uint64> lpNumberOfBytesTransferred,
    int bWait,
  ) {
    return (_GetOverlappedResult ??= _dylib.lookupFunction<
        _c_GetOverlappedResult,
        _dart_GetOverlappedResult>('GetOverlappedResult'))(
      hFile,
      lpOverlapped,
      lpNumberOfBytesTransferred,
      bWait,
    );
  }

  _dart_GetOverlappedResult? _GetOverlappedResult;

  int CancelIoEx(
    ffi.Pointer<ffi.Void> hFile,
    ffi.Pointer<LPOVERLAPPED> lpOverlapped,
  ) {
    return (_CancelIoEx ??=
        _dylib.lookupFunction<_c_CancelIoEx, _dart_CancelIoEx>('CancelIoEx'))(
      hFile,
      lpOverlapped,
    );
  }

  _dart_CancelIoEx? _CancelIoEx;

  int CancelIo(
    ffi.Pointer<ffi.Void> hFile,
  ) {
    return (_CancelIo ??=
        _dylib.lookupFunction<_c_CancelIo, _dart_CancelIo>('CancelIo'))(
      hFile,
    );
  }

  _dart_CancelIo? _CancelIo;

  int GetOverlappedResultEx(
    ffi.Pointer<ffi.Void> hFile,
    ffi.Pointer<LPOVERLAPPED> lpOverlapped,
    ffi.Pointer<ffi.Uint64> lpNumberOfBytesTransferred,
    int dwMilliseconds,
    int bAlertable,
  ) {
    return (_GetOverlappedResultEx ??= _dylib.lookupFunction<
        _c_GetOverlappedResultEx,
        _dart_GetOverlappedResultEx>('GetOverlappedResultEx'))(
      hFile,
      lpOverlapped,
      lpNumberOfBytesTransferred,
      dwMilliseconds,
      bAlertable,
    );
  }

  _dart_GetOverlappedResultEx? _GetOverlappedResultEx;

  int CancelSynchronousIo(
    ffi.Pointer<ffi.Void> hThread,
  ) {
    return (_CancelSynchronousIo ??= _dylib.lookupFunction<
        _c_CancelSynchronousIo,
        _dart_CancelSynchronousIo>('CancelSynchronousIo'))(
      hThread,
    );
  }

  _dart_CancelSynchronousIo? _CancelSynchronousIo;

  void InitializeSRWLock(
    ffi.Pointer<PRTL_SRWLOCK> SRWLock,
  ) {
    return (_InitializeSRWLock ??=
        _dylib.lookupFunction<_c_InitializeSRWLock, _dart_InitializeSRWLock>(
            'InitializeSRWLock'))(
      SRWLock,
    );
  }

  _dart_InitializeSRWLock? _InitializeSRWLock;

  void ReleaseSRWLockExclusive(
    ffi.Pointer<PRTL_SRWLOCK> SRWLock,
  ) {
    return (_ReleaseSRWLockExclusive ??= _dylib.lookupFunction<
        _c_ReleaseSRWLockExclusive,
        _dart_ReleaseSRWLockExclusive>('ReleaseSRWLockExclusive'))(
      SRWLock,
    );
  }

  _dart_ReleaseSRWLockExclusive? _ReleaseSRWLockExclusive;

  void ReleaseSRWLockShared(
    ffi.Pointer<PRTL_SRWLOCK> SRWLock,
  ) {
    return (_ReleaseSRWLockShared ??= _dylib.lookupFunction<
        _c_ReleaseSRWLockShared,
        _dart_ReleaseSRWLockShared>('ReleaseSRWLockShared'))(
      SRWLock,
    );
  }

  _dart_ReleaseSRWLockShared? _ReleaseSRWLockShared;

  void AcquireSRWLockExclusive(
    ffi.Pointer<PRTL_SRWLOCK> SRWLock,
  ) {
    return (_AcquireSRWLockExclusive ??= _dylib.lookupFunction<
        _c_AcquireSRWLockExclusive,
        _dart_AcquireSRWLockExclusive>('AcquireSRWLockExclusive'))(
      SRWLock,
    );
  }

  _dart_AcquireSRWLockExclusive? _AcquireSRWLockExclusive;

  void AcquireSRWLockShared(
    ffi.Pointer<PRTL_SRWLOCK> SRWLock,
  ) {
    return (_AcquireSRWLockShared ??= _dylib.lookupFunction<
        _c_AcquireSRWLockShared,
        _dart_AcquireSRWLockShared>('AcquireSRWLockShared'))(
      SRWLock,
    );
  }

  _dart_AcquireSRWLockShared? _AcquireSRWLockShared;

  int TryAcquireSRWLockExclusive(
    ffi.Pointer<PRTL_SRWLOCK> SRWLock,
  ) {
    return (_TryAcquireSRWLockExclusive ??= _dylib.lookupFunction<
        _c_TryAcquireSRWLockExclusive,
        _dart_TryAcquireSRWLockExclusive>('TryAcquireSRWLockExclusive'))(
      SRWLock,
    );
  }

  _dart_TryAcquireSRWLockExclusive? _TryAcquireSRWLockExclusive;

  int TryAcquireSRWLockShared(
    ffi.Pointer<PRTL_SRWLOCK> SRWLock,
  ) {
    return (_TryAcquireSRWLockShared ??= _dylib.lookupFunction<
        _c_TryAcquireSRWLockShared,
        _dart_TryAcquireSRWLockShared>('TryAcquireSRWLockShared'))(
      SRWLock,
    );
  }

  _dart_TryAcquireSRWLockShared? _TryAcquireSRWLockShared;

  void InitializeCriticalSection(
    ffi.Pointer<PRTL_CRITICAL_SECTION> lpCriticalSection,
  ) {
    return (_InitializeCriticalSection ??= _dylib.lookupFunction<
        _c_InitializeCriticalSection,
        _dart_InitializeCriticalSection>('InitializeCriticalSection'))(
      lpCriticalSection,
    );
  }

  _dart_InitializeCriticalSection? _InitializeCriticalSection;

  void EnterCriticalSection(
    ffi.Pointer<PRTL_CRITICAL_SECTION> lpCriticalSection,
  ) {
    return (_EnterCriticalSection ??= _dylib.lookupFunction<
        _c_EnterCriticalSection,
        _dart_EnterCriticalSection>('EnterCriticalSection'))(
      lpCriticalSection,
    );
  }

  _dart_EnterCriticalSection? _EnterCriticalSection;

  void LeaveCriticalSection(
    ffi.Pointer<PRTL_CRITICAL_SECTION> lpCriticalSection,
  ) {
    return (_LeaveCriticalSection ??= _dylib.lookupFunction<
        _c_LeaveCriticalSection,
        _dart_LeaveCriticalSection>('LeaveCriticalSection'))(
      lpCriticalSection,
    );
  }

  _dart_LeaveCriticalSection? _LeaveCriticalSection;

  int InitializeCriticalSectionAndSpinCount(
    ffi.Pointer<PRTL_CRITICAL_SECTION> lpCriticalSection,
    int dwSpinCount,
  ) {
    return (_InitializeCriticalSectionAndSpinCount ??= _dylib.lookupFunction<
            _c_InitializeCriticalSectionAndSpinCount,
            _dart_InitializeCriticalSectionAndSpinCount>(
        'InitializeCriticalSectionAndSpinCount'))(
      lpCriticalSection,
      dwSpinCount,
    );
  }

  _dart_InitializeCriticalSectionAndSpinCount?
      _InitializeCriticalSectionAndSpinCount;

  int InitializeCriticalSectionEx(
    ffi.Pointer<PRTL_CRITICAL_SECTION> lpCriticalSection,
    int dwSpinCount,
    int Flags,
  ) {
    return (_InitializeCriticalSectionEx ??= _dylib.lookupFunction<
        _c_InitializeCriticalSectionEx,
        _dart_InitializeCriticalSectionEx>('InitializeCriticalSectionEx'))(
      lpCriticalSection,
      dwSpinCount,
      Flags,
    );
  }

  _dart_InitializeCriticalSectionEx? _InitializeCriticalSectionEx;

  int SetCriticalSectionSpinCount(
    ffi.Pointer<PRTL_CRITICAL_SECTION> lpCriticalSection,
    int dwSpinCount,
  ) {
    return (_SetCriticalSectionSpinCount ??= _dylib.lookupFunction<
        _c_SetCriticalSectionSpinCount,
        _dart_SetCriticalSectionSpinCount>('SetCriticalSectionSpinCount'))(
      lpCriticalSection,
      dwSpinCount,
    );
  }

  _dart_SetCriticalSectionSpinCount? _SetCriticalSectionSpinCount;

  int TryEnterCriticalSection(
    ffi.Pointer<PRTL_CRITICAL_SECTION> lpCriticalSection,
  ) {
    return (_TryEnterCriticalSection ??= _dylib.lookupFunction<
        _c_TryEnterCriticalSection,
        _dart_TryEnterCriticalSection>('TryEnterCriticalSection'))(
      lpCriticalSection,
    );
  }

  _dart_TryEnterCriticalSection? _TryEnterCriticalSection;

  void DeleteCriticalSection(
    ffi.Pointer<PRTL_CRITICAL_SECTION> lpCriticalSection,
  ) {
    return (_DeleteCriticalSection ??= _dylib.lookupFunction<
        _c_DeleteCriticalSection,
        _dart_DeleteCriticalSection>('DeleteCriticalSection'))(
      lpCriticalSection,
    );
  }

  _dart_DeleteCriticalSection? _DeleteCriticalSection;

  void InitializeConditionVariable(
    ffi.Pointer<PRTL_CONDITION_VARIABLE> ConditionVariable,
  ) {
    return (_InitializeConditionVariable ??= _dylib.lookupFunction<
        _c_InitializeConditionVariable,
        _dart_InitializeConditionVariable>('InitializeConditionVariable'))(
      ConditionVariable,
    );
  }

  _dart_InitializeConditionVariable? _InitializeConditionVariable;

  void WakeConditionVariable(
    ffi.Pointer<PRTL_CONDITION_VARIABLE> ConditionVariable,
  ) {
    return (_WakeConditionVariable ??= _dylib.lookupFunction<
        _c_WakeConditionVariable,
        _dart_WakeConditionVariable>('WakeConditionVariable'))(
      ConditionVariable,
    );
  }

  _dart_WakeConditionVariable? _WakeConditionVariable;

  void WakeAllConditionVariable(
    ffi.Pointer<PRTL_CONDITION_VARIABLE> ConditionVariable,
  ) {
    return (_WakeAllConditionVariable ??= _dylib.lookupFunction<
        _c_WakeAllConditionVariable,
        _dart_WakeAllConditionVariable>('WakeAllConditionVariable'))(
      ConditionVariable,
    );
  }

  _dart_WakeAllConditionVariable? _WakeAllConditionVariable;

  int SleepConditionVariableCS(
    ffi.Pointer<PRTL_CONDITION_VARIABLE> ConditionVariable,
    ffi.Pointer<PRTL_CRITICAL_SECTION> CriticalSection,
    int dwMilliseconds,
  ) {
    return (_SleepConditionVariableCS ??= _dylib.lookupFunction<
        _c_SleepConditionVariableCS,
        _dart_SleepConditionVariableCS>('SleepConditionVariableCS'))(
      ConditionVariable,
      CriticalSection,
      dwMilliseconds,
    );
  }

  _dart_SleepConditionVariableCS? _SleepConditionVariableCS;

  int SleepConditionVariableSRW(
    ffi.Pointer<PRTL_CONDITION_VARIABLE> ConditionVariable,
    ffi.Pointer<PRTL_SRWLOCK> SRWLock,
    int dwMilliseconds,
    int Flags,
  ) {
    return (_SleepConditionVariableSRW ??= _dylib.lookupFunction<
        _c_SleepConditionVariableSRW,
        _dart_SleepConditionVariableSRW>('SleepConditionVariableSRW'))(
      ConditionVariable,
      SRWLock,
      dwMilliseconds,
      Flags,
    );
  }

  _dart_SleepConditionVariableSRW? _SleepConditionVariableSRW;

  int SetEvent(
    ffi.Pointer<ffi.Void> hEvent,
  ) {
    return (_SetEvent ??=
        _dylib.lookupFunction<_c_SetEvent, _dart_SetEvent>('SetEvent'))(
      hEvent,
    );
  }

  _dart_SetEvent? _SetEvent;

  int ResetEvent(
    ffi.Pointer<ffi.Void> hEvent,
  ) {
    return (_ResetEvent ??=
        _dylib.lookupFunction<_c_ResetEvent, _dart_ResetEvent>('ResetEvent'))(
      hEvent,
    );
  }

  _dart_ResetEvent? _ResetEvent;

  int ReleaseSemaphore(
    ffi.Pointer<ffi.Void> hSemaphore,
    int lReleaseCount,
    ffi.Pointer<ffi.Int64> lpPreviousCount,
  ) {
    return (_ReleaseSemaphore ??=
        _dylib.lookupFunction<_c_ReleaseSemaphore, _dart_ReleaseSemaphore>(
            'ReleaseSemaphore'))(
      hSemaphore,
      lReleaseCount,
      lpPreviousCount,
    );
  }

  _dart_ReleaseSemaphore? _ReleaseSemaphore;

  int ReleaseMutex(
    ffi.Pointer<ffi.Void> hMutex,
  ) {
    return (_ReleaseMutex ??= _dylib
        .lookupFunction<_c_ReleaseMutex, _dart_ReleaseMutex>('ReleaseMutex'))(
      hMutex,
    );
  }

  _dart_ReleaseMutex? _ReleaseMutex;

  int WaitForSingleObject(
    ffi.Pointer<ffi.Void> hHandle,
    int dwMilliseconds,
  ) {
    return (_WaitForSingleObject ??= _dylib.lookupFunction<
        _c_WaitForSingleObject,
        _dart_WaitForSingleObject>('WaitForSingleObject'))(
      hHandle,
      dwMilliseconds,
    );
  }

  _dart_WaitForSingleObject? _WaitForSingleObject;

  int SleepEx(
    int dwMilliseconds,
    int bAlertable,
  ) {
    return (_SleepEx ??=
        _dylib.lookupFunction<_c_SleepEx, _dart_SleepEx>('SleepEx'))(
      dwMilliseconds,
      bAlertable,
    );
  }

  _dart_SleepEx? _SleepEx;

  int WaitForSingleObjectEx(
    ffi.Pointer<ffi.Void> hHandle,
    int dwMilliseconds,
    int bAlertable,
  ) {
    return (_WaitForSingleObjectEx ??= _dylib.lookupFunction<
        _c_WaitForSingleObjectEx,
        _dart_WaitForSingleObjectEx>('WaitForSingleObjectEx'))(
      hHandle,
      dwMilliseconds,
      bAlertable,
    );
  }

  _dart_WaitForSingleObjectEx? _WaitForSingleObjectEx;

  int WaitForMultipleObjectsEx(
    int nCount,
    ffi.Pointer<ffi.Pointer<ffi.Void>> lpHandles,
    int bWaitAll,
    int dwMilliseconds,
    int bAlertable,
  ) {
    return (_WaitForMultipleObjectsEx ??= _dylib.lookupFunction<
        _c_WaitForMultipleObjectsEx,
        _dart_WaitForMultipleObjectsEx>('WaitForMultipleObjectsEx'))(
      nCount,
      lpHandles,
      bWaitAll,
      dwMilliseconds,
      bAlertable,
    );
  }

  _dart_WaitForMultipleObjectsEx? _WaitForMultipleObjectsEx;

  ffi.Pointer<ffi.Void> CreateMutexA(
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpMutexAttributes,
    int bInitialOwner,
    ffi.Pointer<ffi.Int8> lpName,
  ) {
    return (_CreateMutexA ??= _dylib
        .lookupFunction<_c_CreateMutexA, _dart_CreateMutexA>('CreateMutexA'))(
      lpMutexAttributes,
      bInitialOwner,
      lpName,
    );
  }

  _dart_CreateMutexA? _CreateMutexA;

  ffi.Pointer<ffi.Void> CreateMutexW(
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpMutexAttributes,
    int bInitialOwner,
    ffi.Pointer<ffi.Uint16> lpName,
  ) {
    return (_CreateMutexW ??= _dylib
        .lookupFunction<_c_CreateMutexW, _dart_CreateMutexW>('CreateMutexW'))(
      lpMutexAttributes,
      bInitialOwner,
      lpName,
    );
  }

  _dart_CreateMutexW? _CreateMutexW;

  ffi.Pointer<ffi.Void> OpenMutexW(
    int dwDesiredAccess,
    int bInheritHandle,
    ffi.Pointer<ffi.Uint16> lpName,
  ) {
    return (_OpenMutexW ??=
        _dylib.lookupFunction<_c_OpenMutexW, _dart_OpenMutexW>('OpenMutexW'))(
      dwDesiredAccess,
      bInheritHandle,
      lpName,
    );
  }

  _dart_OpenMutexW? _OpenMutexW;

  ffi.Pointer<ffi.Void> CreateEventA(
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpEventAttributes,
    int bManualReset,
    int bInitialState,
    ffi.Pointer<ffi.Int8> lpName,
  ) {
    return (_CreateEventA ??= _dylib
        .lookupFunction<_c_CreateEventA, _dart_CreateEventA>('CreateEventA'))(
      lpEventAttributes,
      bManualReset,
      bInitialState,
      lpName,
    );
  }

  _dart_CreateEventA? _CreateEventA;

  ffi.Pointer<ffi.Void> CreateEventW(
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpEventAttributes,
    int bManualReset,
    int bInitialState,
    ffi.Pointer<ffi.Uint16> lpName,
  ) {
    return (_CreateEventW ??= _dylib
        .lookupFunction<_c_CreateEventW, _dart_CreateEventW>('CreateEventW'))(
      lpEventAttributes,
      bManualReset,
      bInitialState,
      lpName,
    );
  }

  _dart_CreateEventW? _CreateEventW;

  ffi.Pointer<ffi.Void> OpenEventA(
    int dwDesiredAccess,
    int bInheritHandle,
    ffi.Pointer<ffi.Int8> lpName,
  ) {
    return (_OpenEventA ??=
        _dylib.lookupFunction<_c_OpenEventA, _dart_OpenEventA>('OpenEventA'))(
      dwDesiredAccess,
      bInheritHandle,
      lpName,
    );
  }

  _dart_OpenEventA? _OpenEventA;

  ffi.Pointer<ffi.Void> OpenEventW(
    int dwDesiredAccess,
    int bInheritHandle,
    ffi.Pointer<ffi.Uint16> lpName,
  ) {
    return (_OpenEventW ??=
        _dylib.lookupFunction<_c_OpenEventW, _dart_OpenEventW>('OpenEventW'))(
      dwDesiredAccess,
      bInheritHandle,
      lpName,
    );
  }

  _dart_OpenEventW? _OpenEventW;

  ffi.Pointer<ffi.Void> OpenSemaphoreW(
    int dwDesiredAccess,
    int bInheritHandle,
    ffi.Pointer<ffi.Uint16> lpName,
  ) {
    return (_OpenSemaphoreW ??=
        _dylib.lookupFunction<_c_OpenSemaphoreW, _dart_OpenSemaphoreW>(
            'OpenSemaphoreW'))(
      dwDesiredAccess,
      bInheritHandle,
      lpName,
    );
  }

  _dart_OpenSemaphoreW? _OpenSemaphoreW;

  ffi.Pointer<ffi.Void> OpenWaitableTimerW(
    int dwDesiredAccess,
    int bInheritHandle,
    ffi.Pointer<ffi.Uint16> lpTimerName,
  ) {
    return (_OpenWaitableTimerW ??=
        _dylib.lookupFunction<_c_OpenWaitableTimerW, _dart_OpenWaitableTimerW>(
            'OpenWaitableTimerW'))(
      dwDesiredAccess,
      bInheritHandle,
      lpTimerName,
    );
  }

  _dart_OpenWaitableTimerW? _OpenWaitableTimerW;

  int CancelWaitableTimer(
    ffi.Pointer<ffi.Void> hTimer,
  ) {
    return (_CancelWaitableTimer ??= _dylib.lookupFunction<
        _c_CancelWaitableTimer,
        _dart_CancelWaitableTimer>('CancelWaitableTimer'))(
      hTimer,
    );
  }

  _dart_CancelWaitableTimer? _CancelWaitableTimer;

  ffi.Pointer<ffi.Void> CreateMutexExA(
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpMutexAttributes,
    ffi.Pointer<ffi.Int8> lpName,
    int dwFlags,
    int dwDesiredAccess,
  ) {
    return (_CreateMutexExA ??=
        _dylib.lookupFunction<_c_CreateMutexExA, _dart_CreateMutexExA>(
            'CreateMutexExA'))(
      lpMutexAttributes,
      lpName,
      dwFlags,
      dwDesiredAccess,
    );
  }

  _dart_CreateMutexExA? _CreateMutexExA;

  ffi.Pointer<ffi.Void> CreateMutexExW(
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpMutexAttributes,
    ffi.Pointer<ffi.Uint16> lpName,
    int dwFlags,
    int dwDesiredAccess,
  ) {
    return (_CreateMutexExW ??=
        _dylib.lookupFunction<_c_CreateMutexExW, _dart_CreateMutexExW>(
            'CreateMutexExW'))(
      lpMutexAttributes,
      lpName,
      dwFlags,
      dwDesiredAccess,
    );
  }

  _dart_CreateMutexExW? _CreateMutexExW;

  ffi.Pointer<ffi.Void> CreateEventExA(
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpEventAttributes,
    ffi.Pointer<ffi.Int8> lpName,
    int dwFlags,
    int dwDesiredAccess,
  ) {
    return (_CreateEventExA ??=
        _dylib.lookupFunction<_c_CreateEventExA, _dart_CreateEventExA>(
            'CreateEventExA'))(
      lpEventAttributes,
      lpName,
      dwFlags,
      dwDesiredAccess,
    );
  }

  _dart_CreateEventExA? _CreateEventExA;

  ffi.Pointer<ffi.Void> CreateEventExW(
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpEventAttributes,
    ffi.Pointer<ffi.Uint16> lpName,
    int dwFlags,
    int dwDesiredAccess,
  ) {
    return (_CreateEventExW ??=
        _dylib.lookupFunction<_c_CreateEventExW, _dart_CreateEventExW>(
            'CreateEventExW'))(
      lpEventAttributes,
      lpName,
      dwFlags,
      dwDesiredAccess,
    );
  }

  _dart_CreateEventExW? _CreateEventExW;

  ffi.Pointer<ffi.Void> CreateSemaphoreExW(
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSemaphoreAttributes,
    int lInitialCount,
    int lMaximumCount,
    ffi.Pointer<ffi.Uint16> lpName,
    int dwFlags,
    int dwDesiredAccess,
  ) {
    return (_CreateSemaphoreExW ??=
        _dylib.lookupFunction<_c_CreateSemaphoreExW, _dart_CreateSemaphoreExW>(
            'CreateSemaphoreExW'))(
      lpSemaphoreAttributes,
      lInitialCount,
      lMaximumCount,
      lpName,
      dwFlags,
      dwDesiredAccess,
    );
  }

  _dart_CreateSemaphoreExW? _CreateSemaphoreExW;

  ffi.Pointer<ffi.Void> CreateWaitableTimerExW(
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpTimerAttributes,
    ffi.Pointer<ffi.Uint16> lpTimerName,
    int dwFlags,
    int dwDesiredAccess,
  ) {
    return (_CreateWaitableTimerExW ??= _dylib.lookupFunction<
        _c_CreateWaitableTimerExW,
        _dart_CreateWaitableTimerExW>('CreateWaitableTimerExW'))(
      lpTimerAttributes,
      lpTimerName,
      dwFlags,
      dwDesiredAccess,
    );
  }

  _dart_CreateWaitableTimerExW? _CreateWaitableTimerExW;

  int EnterSynchronizationBarrier(
    ffi.Pointer<PRTL_BARRIER> lpBarrier,
    int dwFlags,
  ) {
    return (_EnterSynchronizationBarrier ??= _dylib.lookupFunction<
        _c_EnterSynchronizationBarrier,
        _dart_EnterSynchronizationBarrier>('EnterSynchronizationBarrier'))(
      lpBarrier,
      dwFlags,
    );
  }

  _dart_EnterSynchronizationBarrier? _EnterSynchronizationBarrier;

  int InitializeSynchronizationBarrier(
    ffi.Pointer<PRTL_BARRIER> lpBarrier,
    int lTotalThreads,
    int lSpinCount,
  ) {
    return (_InitializeSynchronizationBarrier ??= _dylib.lookupFunction<
            _c_InitializeSynchronizationBarrier,
            _dart_InitializeSynchronizationBarrier>(
        'InitializeSynchronizationBarrier'))(
      lpBarrier,
      lTotalThreads,
      lSpinCount,
    );
  }

  _dart_InitializeSynchronizationBarrier? _InitializeSynchronizationBarrier;

  int DeleteSynchronizationBarrier(
    ffi.Pointer<PRTL_BARRIER> lpBarrier,
  ) {
    return (_DeleteSynchronizationBarrier ??= _dylib.lookupFunction<
        _c_DeleteSynchronizationBarrier,
        _dart_DeleteSynchronizationBarrier>('DeleteSynchronizationBarrier'))(
      lpBarrier,
    );
  }

  _dart_DeleteSynchronizationBarrier? _DeleteSynchronizationBarrier;

  void Sleep(
    int dwMilliseconds,
  ) {
    return (_Sleep ??= _dylib.lookupFunction<_c_Sleep, _dart_Sleep>('Sleep'))(
      dwMilliseconds,
    );
  }

  _dart_Sleep? _Sleep;

  int WaitOnAddress(
    ffi.Pointer<ffi.Void> Address,
    ffi.Pointer<ffi.Void> CompareAddress,
    int AddressSize,
    int dwMilliseconds,
  ) {
    return (_WaitOnAddress ??=
        _dylib.lookupFunction<_c_WaitOnAddress, _dart_WaitOnAddress>(
            'WaitOnAddress'))(
      Address,
      CompareAddress,
      AddressSize,
      dwMilliseconds,
    );
  }

  _dart_WaitOnAddress? _WaitOnAddress;

  void WakeByAddressSingle(
    ffi.Pointer<ffi.Void> Address,
  ) {
    return (_WakeByAddressSingle ??= _dylib.lookupFunction<
        _c_WakeByAddressSingle,
        _dart_WakeByAddressSingle>('WakeByAddressSingle'))(
      Address,
    );
  }

  _dart_WakeByAddressSingle? _WakeByAddressSingle;

  void WakeByAddressAll(
    ffi.Pointer<ffi.Void> Address,
  ) {
    return (_WakeByAddressAll ??=
        _dylib.lookupFunction<_c_WakeByAddressAll, _dart_WakeByAddressAll>(
            'WakeByAddressAll'))(
      Address,
    );
  }

  _dart_WakeByAddressAll? _WakeByAddressAll;

  int SignalObjectAndWait(
    ffi.Pointer<ffi.Void> hObjectToSignal,
    ffi.Pointer<ffi.Void> hObjectToWaitOn,
    int dwMilliseconds,
    int bAlertable,
  ) {
    return (_SignalObjectAndWait ??= _dylib.lookupFunction<
        _c_SignalObjectAndWait,
        _dart_SignalObjectAndWait>('SignalObjectAndWait'))(
      hObjectToSignal,
      hObjectToWaitOn,
      dwMilliseconds,
      bAlertable,
    );
  }

  _dart_SignalObjectAndWait? _SignalObjectAndWait;

  int WaitForMultipleObjects(
    int nCount,
    ffi.Pointer<ffi.Pointer<ffi.Void>> lpHandles,
    int bWaitAll,
    int dwMilliseconds,
  ) {
    return (_WaitForMultipleObjects ??= _dylib.lookupFunction<
        _c_WaitForMultipleObjects,
        _dart_WaitForMultipleObjects>('WaitForMultipleObjects'))(
      nCount,
      lpHandles,
      bWaitAll,
      dwMilliseconds,
    );
  }

  _dart_WaitForMultipleObjects? _WaitForMultipleObjects;

  ffi.Pointer<ffi.Void> CreateSemaphoreW(
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSemaphoreAttributes,
    int lInitialCount,
    int lMaximumCount,
    ffi.Pointer<ffi.Uint16> lpName,
  ) {
    return (_CreateSemaphoreW ??=
        _dylib.lookupFunction<_c_CreateSemaphoreW, _dart_CreateSemaphoreW>(
            'CreateSemaphoreW'))(
      lpSemaphoreAttributes,
      lInitialCount,
      lMaximumCount,
      lpName,
    );
  }

  _dart_CreateSemaphoreW? _CreateSemaphoreW;

  ffi.Pointer<ffi.Void> CreateWaitableTimerW(
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpTimerAttributes,
    int bManualReset,
    ffi.Pointer<ffi.Uint16> lpTimerName,
  ) {
    return (_CreateWaitableTimerW ??= _dylib.lookupFunction<
        _c_CreateWaitableTimerW,
        _dart_CreateWaitableTimerW>('CreateWaitableTimerW'))(
      lpTimerAttributes,
      bManualReset,
      lpTimerName,
    );
  }

  _dart_CreateWaitableTimerW? _CreateWaitableTimerW;

  int QueueUserAPC(
    ffi.Pointer<ffi.NativeFunction<PAPCFUNC>> pfnAPC,
    ffi.Pointer<ffi.Void> hThread,
    int dwData,
  ) {
    return (_QueueUserAPC ??= _dylib
        .lookupFunction<_c_QueueUserAPC, _dart_QueueUserAPC>('QueueUserAPC'))(
      pfnAPC,
      hThread,
      dwData,
    );
  }

  _dart_QueueUserAPC? _QueueUserAPC;

  int GetProcessTimes(
    ffi.Pointer<ffi.Void> hProcess,
    ffi.Pointer<LPFILETIME> lpCreationTime,
    ffi.Pointer<LPFILETIME> lpExitTime,
    ffi.Pointer<LPFILETIME> lpKernelTime,
    ffi.Pointer<LPFILETIME> lpUserTime,
  ) {
    return (_GetProcessTimes ??=
        _dylib.lookupFunction<_c_GetProcessTimes, _dart_GetProcessTimes>(
            'GetProcessTimes'))(
      hProcess,
      lpCreationTime,
      lpExitTime,
      lpKernelTime,
      lpUserTime,
    );
  }

  _dart_GetProcessTimes? _GetProcessTimes;

  ffi.Pointer<ffi.Void> GetCurrentProcess() {
    return (_GetCurrentProcess ??=
        _dylib.lookupFunction<_c_GetCurrentProcess, _dart_GetCurrentProcess>(
            'GetCurrentProcess'))();
  }

  _dart_GetCurrentProcess? _GetCurrentProcess;

  int GetCurrentProcessId() {
    return (_GetCurrentProcessId ??= _dylib.lookupFunction<
        _c_GetCurrentProcessId,
        _dart_GetCurrentProcessId>('GetCurrentProcessId'))();
  }

  _dart_GetCurrentProcessId? _GetCurrentProcessId;

  void ExitProcess(
    int uExitCode,
  ) {
    return (_ExitProcess ??= _dylib
        .lookupFunction<_c_ExitProcess, _dart_ExitProcess>('ExitProcess'))(
      uExitCode,
    );
  }

  _dart_ExitProcess? _ExitProcess;

  int TerminateProcess(
    ffi.Pointer<ffi.Void> hProcess,
    int uExitCode,
  ) {
    return (_TerminateProcess ??=
        _dylib.lookupFunction<_c_TerminateProcess, _dart_TerminateProcess>(
            'TerminateProcess'))(
      hProcess,
      uExitCode,
    );
  }

  _dart_TerminateProcess? _TerminateProcess;

  int GetExitCodeProcess(
    ffi.Pointer<ffi.Void> hProcess,
    ffi.Pointer<ffi.Uint64> lpExitCode,
  ) {
    return (_GetExitCodeProcess ??=
        _dylib.lookupFunction<_c_GetExitCodeProcess, _dart_GetExitCodeProcess>(
            'GetExitCodeProcess'))(
      hProcess,
      lpExitCode,
    );
  }

  _dart_GetExitCodeProcess? _GetExitCodeProcess;

  int SwitchToThread() {
    return (_SwitchToThread ??=
        _dylib.lookupFunction<_c_SwitchToThread, _dart_SwitchToThread>(
            'SwitchToThread'))();
  }

  _dart_SwitchToThread? _SwitchToThread;

  ffi.Pointer<ffi.Void> CreateThread(
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpThreadAttributes,
    int dwStackSize,
    ffi.Pointer<ffi.NativeFunction<LPTHREAD_START_ROUTINE>> lpStartAddress,
    ffi.Pointer<ffi.Void> lpParameter,
    int dwCreationFlags,
    ffi.Pointer<ffi.Uint64> lpThreadId,
  ) {
    return (_CreateThread ??= _dylib
        .lookupFunction<_c_CreateThread, _dart_CreateThread>('CreateThread'))(
      lpThreadAttributes,
      dwStackSize,
      lpStartAddress,
      lpParameter,
      dwCreationFlags,
      lpThreadId,
    );
  }

  _dart_CreateThread? _CreateThread;

  ffi.Pointer<ffi.Void> CreateRemoteThread(
    ffi.Pointer<ffi.Void> hProcess,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpThreadAttributes,
    int dwStackSize,
    ffi.Pointer<ffi.NativeFunction<LPTHREAD_START_ROUTINE>> lpStartAddress,
    ffi.Pointer<ffi.Void> lpParameter,
    int dwCreationFlags,
    ffi.Pointer<ffi.Uint64> lpThreadId,
  ) {
    return (_CreateRemoteThread ??=
        _dylib.lookupFunction<_c_CreateRemoteThread, _dart_CreateRemoteThread>(
            'CreateRemoteThread'))(
      hProcess,
      lpThreadAttributes,
      dwStackSize,
      lpStartAddress,
      lpParameter,
      dwCreationFlags,
      lpThreadId,
    );
  }

  _dart_CreateRemoteThread? _CreateRemoteThread;

  ffi.Pointer<ffi.Void> GetCurrentThread() {
    return (_GetCurrentThread ??=
        _dylib.lookupFunction<_c_GetCurrentThread, _dart_GetCurrentThread>(
            'GetCurrentThread'))();
  }

  _dart_GetCurrentThread? _GetCurrentThread;

  int GetCurrentThreadId() {
    return (_GetCurrentThreadId ??=
        _dylib.lookupFunction<_c_GetCurrentThreadId, _dart_GetCurrentThreadId>(
            'GetCurrentThreadId'))();
  }

  _dart_GetCurrentThreadId? _GetCurrentThreadId;

  ffi.Pointer<ffi.Void> OpenThread(
    int dwDesiredAccess,
    int bInheritHandle,
    int dwThreadId,
  ) {
    return (_OpenThread ??=
        _dylib.lookupFunction<_c_OpenThread, _dart_OpenThread>('OpenThread'))(
      dwDesiredAccess,
      bInheritHandle,
      dwThreadId,
    );
  }

  _dart_OpenThread? _OpenThread;

  int SetThreadPriority(
    ffi.Pointer<ffi.Void> hThread,
    int nPriority,
  ) {
    return (_SetThreadPriority ??=
        _dylib.lookupFunction<_c_SetThreadPriority, _dart_SetThreadPriority>(
            'SetThreadPriority'))(
      hThread,
      nPriority,
    );
  }

  _dart_SetThreadPriority? _SetThreadPriority;

  int SetThreadPriorityBoost(
    ffi.Pointer<ffi.Void> hThread,
    int bDisablePriorityBoost,
  ) {
    return (_SetThreadPriorityBoost ??= _dylib.lookupFunction<
        _c_SetThreadPriorityBoost,
        _dart_SetThreadPriorityBoost>('SetThreadPriorityBoost'))(
      hThread,
      bDisablePriorityBoost,
    );
  }

  _dart_SetThreadPriorityBoost? _SetThreadPriorityBoost;

  int GetThreadPriorityBoost(
    ffi.Pointer<ffi.Void> hThread,
    ffi.Pointer<ffi.Int32> pDisablePriorityBoost,
  ) {
    return (_GetThreadPriorityBoost ??= _dylib.lookupFunction<
        _c_GetThreadPriorityBoost,
        _dart_GetThreadPriorityBoost>('GetThreadPriorityBoost'))(
      hThread,
      pDisablePriorityBoost,
    );
  }

  _dart_GetThreadPriorityBoost? _GetThreadPriorityBoost;

  int GetThreadPriority(
    ffi.Pointer<ffi.Void> hThread,
  ) {
    return (_GetThreadPriority ??=
        _dylib.lookupFunction<_c_GetThreadPriority, _dart_GetThreadPriority>(
            'GetThreadPriority'))(
      hThread,
    );
  }

  _dart_GetThreadPriority? _GetThreadPriority;

  void ExitThread(
    int dwExitCode,
  ) {
    return (_ExitThread ??=
        _dylib.lookupFunction<_c_ExitThread, _dart_ExitThread>('ExitThread'))(
      dwExitCode,
    );
  }

  _dart_ExitThread? _ExitThread;

  int TerminateThread(
    ffi.Pointer<ffi.Void> hThread,
    int dwExitCode,
  ) {
    return (_TerminateThread ??=
        _dylib.lookupFunction<_c_TerminateThread, _dart_TerminateThread>(
            'TerminateThread'))(
      hThread,
      dwExitCode,
    );
  }

  _dart_TerminateThread? _TerminateThread;

  int GetExitCodeThread(
    ffi.Pointer<ffi.Void> hThread,
    ffi.Pointer<ffi.Uint64> lpExitCode,
  ) {
    return (_GetExitCodeThread ??=
        _dylib.lookupFunction<_c_GetExitCodeThread, _dart_GetExitCodeThread>(
            'GetExitCodeThread'))(
      hThread,
      lpExitCode,
    );
  }

  _dart_GetExitCodeThread? _GetExitCodeThread;

  int SuspendThread(
    ffi.Pointer<ffi.Void> hThread,
  ) {
    return (_SuspendThread ??=
        _dylib.lookupFunction<_c_SuspendThread, _dart_SuspendThread>(
            'SuspendThread'))(
      hThread,
    );
  }

  _dart_SuspendThread? _SuspendThread;

  int ResumeThread(
    ffi.Pointer<ffi.Void> hThread,
  ) {
    return (_ResumeThread ??= _dylib
        .lookupFunction<_c_ResumeThread, _dart_ResumeThread>('ResumeThread'))(
      hThread,
    );
  }

  _dart_ResumeThread? _ResumeThread;

  int TlsAlloc() {
    return (_TlsAlloc ??=
        _dylib.lookupFunction<_c_TlsAlloc, _dart_TlsAlloc>('TlsAlloc'))();
  }

  _dart_TlsAlloc? _TlsAlloc;

  ffi.Pointer<ffi.Void> TlsGetValue(
    int dwTlsIndex,
  ) {
    return (_TlsGetValue ??= _dylib
        .lookupFunction<_c_TlsGetValue, _dart_TlsGetValue>('TlsGetValue'))(
      dwTlsIndex,
    );
  }

  _dart_TlsGetValue? _TlsGetValue;

  int TlsSetValue(
    int dwTlsIndex,
    ffi.Pointer<ffi.Void> lpTlsValue,
  ) {
    return (_TlsSetValue ??= _dylib
        .lookupFunction<_c_TlsSetValue, _dart_TlsSetValue>('TlsSetValue'))(
      dwTlsIndex,
      lpTlsValue,
    );
  }

  _dart_TlsSetValue? _TlsSetValue;

  int TlsFree(
    int dwTlsIndex,
  ) {
    return (_TlsFree ??=
        _dylib.lookupFunction<_c_TlsFree, _dart_TlsFree>('TlsFree'))(
      dwTlsIndex,
    );
  }

  _dart_TlsFree? _TlsFree;

  int CreateProcessA(
    ffi.Pointer<ffi.Int8> lpApplicationName,
    ffi.Pointer<ffi.Int8> lpCommandLine,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpProcessAttributes,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpThreadAttributes,
    int bInheritHandles,
    int dwCreationFlags,
    ffi.Pointer<ffi.Void> lpEnvironment,
    ffi.Pointer<ffi.Int8> lpCurrentDirectory,
    ffi.Pointer<LPSTARTUPINFOA> lpStartupInfo,
    ffi.Pointer<LPPROCESS_INFORMATION> lpProcessInformation,
  ) {
    return (_CreateProcessA ??=
        _dylib.lookupFunction<_c_CreateProcessA, _dart_CreateProcessA>(
            'CreateProcessA'))(
      lpApplicationName,
      lpCommandLine,
      lpProcessAttributes,
      lpThreadAttributes,
      bInheritHandles,
      dwCreationFlags,
      lpEnvironment,
      lpCurrentDirectory,
      lpStartupInfo,
      lpProcessInformation,
    );
  }

  _dart_CreateProcessA? _CreateProcessA;

  int CreateProcessW(
    ffi.Pointer<ffi.Uint16> lpApplicationName,
    ffi.Pointer<ffi.Uint16> lpCommandLine,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpProcessAttributes,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpThreadAttributes,
    int bInheritHandles,
    int dwCreationFlags,
    ffi.Pointer<ffi.Void> lpEnvironment,
    ffi.Pointer<ffi.Uint16> lpCurrentDirectory,
    ffi.Pointer<LPSTARTUPINFOW> lpStartupInfo,
    ffi.Pointer<LPPROCESS_INFORMATION> lpProcessInformation,
  ) {
    return (_CreateProcessW ??=
        _dylib.lookupFunction<_c_CreateProcessW, _dart_CreateProcessW>(
            'CreateProcessW'))(
      lpApplicationName,
      lpCommandLine,
      lpProcessAttributes,
      lpThreadAttributes,
      bInheritHandles,
      dwCreationFlags,
      lpEnvironment,
      lpCurrentDirectory,
      lpStartupInfo,
      lpProcessInformation,
    );
  }

  _dart_CreateProcessW? _CreateProcessW;

  int SetProcessShutdownParameters(
    int dwLevel,
    int dwFlags,
  ) {
    return (_SetProcessShutdownParameters ??= _dylib.lookupFunction<
        _c_SetProcessShutdownParameters,
        _dart_SetProcessShutdownParameters>('SetProcessShutdownParameters'))(
      dwLevel,
      dwFlags,
    );
  }

  _dart_SetProcessShutdownParameters? _SetProcessShutdownParameters;

  int GetProcessVersion(
    int ProcessId,
  ) {
    return (_GetProcessVersion ??=
        _dylib.lookupFunction<_c_GetProcessVersion, _dart_GetProcessVersion>(
            'GetProcessVersion'))(
      ProcessId,
    );
  }

  _dart_GetProcessVersion? _GetProcessVersion;

  void GetStartupInfoW(
    ffi.Pointer<LPSTARTUPINFOW> lpStartupInfo,
  ) {
    return (_GetStartupInfoW ??=
        _dylib.lookupFunction<_c_GetStartupInfoW, _dart_GetStartupInfoW>(
            'GetStartupInfoW'))(
      lpStartupInfo,
    );
  }

  _dart_GetStartupInfoW? _GetStartupInfoW;

  int CreateProcessAsUserW(
    ffi.Pointer<ffi.Void> hToken,
    ffi.Pointer<ffi.Uint16> lpApplicationName,
    ffi.Pointer<ffi.Uint16> lpCommandLine,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpProcessAttributes,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpThreadAttributes,
    int bInheritHandles,
    int dwCreationFlags,
    ffi.Pointer<ffi.Void> lpEnvironment,
    ffi.Pointer<ffi.Uint16> lpCurrentDirectory,
    ffi.Pointer<LPSTARTUPINFOW> lpStartupInfo,
    ffi.Pointer<LPPROCESS_INFORMATION> lpProcessInformation,
  ) {
    return (_CreateProcessAsUserW ??= _dylib.lookupFunction<
        _c_CreateProcessAsUserW,
        _dart_CreateProcessAsUserW>('CreateProcessAsUserW'))(
      hToken,
      lpApplicationName,
      lpCommandLine,
      lpProcessAttributes,
      lpThreadAttributes,
      bInheritHandles,
      dwCreationFlags,
      lpEnvironment,
      lpCurrentDirectory,
      lpStartupInfo,
      lpProcessInformation,
    );
  }

  _dart_CreateProcessAsUserW? _CreateProcessAsUserW;

  ffi.Pointer<ffi.Void> GetCurrentProcessToken() {
    return (_GetCurrentProcessToken ??= _dylib.lookupFunction<
        _c_GetCurrentProcessToken,
        _dart_GetCurrentProcessToken>('GetCurrentProcessToken'))();
  }

  _dart_GetCurrentProcessToken? _GetCurrentProcessToken;

  ffi.Pointer<ffi.Void> GetCurrentThreadToken() {
    return (_GetCurrentThreadToken ??= _dylib.lookupFunction<
        _c_GetCurrentThreadToken,
        _dart_GetCurrentThreadToken>('GetCurrentThreadToken'))();
  }

  _dart_GetCurrentThreadToken? _GetCurrentThreadToken;

  ffi.Pointer<ffi.Void> GetCurrentThreadEffectiveToken() {
    return (_GetCurrentThreadEffectiveToken ??= _dylib.lookupFunction<
            _c_GetCurrentThreadEffectiveToken,
            _dart_GetCurrentThreadEffectiveToken>(
        'GetCurrentThreadEffectiveToken'))();
  }

  _dart_GetCurrentThreadEffectiveToken? _GetCurrentThreadEffectiveToken;

  int SetThreadToken(
    ffi.Pointer<ffi.Pointer<ffi.Void>> Thread,
    ffi.Pointer<ffi.Void> Token,
  ) {
    return (_SetThreadToken ??=
        _dylib.lookupFunction<_c_SetThreadToken, _dart_SetThreadToken>(
            'SetThreadToken'))(
      Thread,
      Token,
    );
  }

  _dart_SetThreadToken? _SetThreadToken;

  int OpenProcessToken(
    ffi.Pointer<ffi.Void> ProcessHandle,
    int DesiredAccess,
    ffi.Pointer<ffi.Pointer<ffi.Void>> TokenHandle,
  ) {
    return (_OpenProcessToken ??=
        _dylib.lookupFunction<_c_OpenProcessToken, _dart_OpenProcessToken>(
            'OpenProcessToken'))(
      ProcessHandle,
      DesiredAccess,
      TokenHandle,
    );
  }

  _dart_OpenProcessToken? _OpenProcessToken;

  int OpenThreadToken(
    ffi.Pointer<ffi.Void> ThreadHandle,
    int DesiredAccess,
    int OpenAsSelf,
    ffi.Pointer<ffi.Pointer<ffi.Void>> TokenHandle,
  ) {
    return (_OpenThreadToken ??=
        _dylib.lookupFunction<_c_OpenThreadToken, _dart_OpenThreadToken>(
            'OpenThreadToken'))(
      ThreadHandle,
      DesiredAccess,
      OpenAsSelf,
      TokenHandle,
    );
  }

  _dart_OpenThreadToken? _OpenThreadToken;

  int SetPriorityClass(
    ffi.Pointer<ffi.Void> hProcess,
    int dwPriorityClass,
  ) {
    return (_SetPriorityClass ??=
        _dylib.lookupFunction<_c_SetPriorityClass, _dart_SetPriorityClass>(
            'SetPriorityClass'))(
      hProcess,
      dwPriorityClass,
    );
  }

  _dart_SetPriorityClass? _SetPriorityClass;

  int GetPriorityClass(
    ffi.Pointer<ffi.Void> hProcess,
  ) {
    return (_GetPriorityClass ??=
        _dylib.lookupFunction<_c_GetPriorityClass, _dart_GetPriorityClass>(
            'GetPriorityClass'))(
      hProcess,
    );
  }

  _dart_GetPriorityClass? _GetPriorityClass;

  int SetThreadStackGuarantee(
    ffi.Pointer<ffi.Uint64> StackSizeInBytes,
  ) {
    return (_SetThreadStackGuarantee ??= _dylib.lookupFunction<
        _c_SetThreadStackGuarantee,
        _dart_SetThreadStackGuarantee>('SetThreadStackGuarantee'))(
      StackSizeInBytes,
    );
  }

  _dart_SetThreadStackGuarantee? _SetThreadStackGuarantee;

  int ProcessIdToSessionId(
    int dwProcessId,
    ffi.Pointer<ffi.Uint64> pSessionId,
  ) {
    return (_ProcessIdToSessionId ??= _dylib.lookupFunction<
        _c_ProcessIdToSessionId,
        _dart_ProcessIdToSessionId>('ProcessIdToSessionId'))(
      dwProcessId,
      pSessionId,
    );
  }

  _dart_ProcessIdToSessionId? _ProcessIdToSessionId;

  int GetProcessId(
    ffi.Pointer<ffi.Void> Process,
  ) {
    return (_GetProcessId ??= _dylib
        .lookupFunction<_c_GetProcessId, _dart_GetProcessId>('GetProcessId'))(
      Process,
    );
  }

  _dart_GetProcessId? _GetProcessId;

  int GetThreadId(
    ffi.Pointer<ffi.Void> Thread,
  ) {
    return (_GetThreadId ??= _dylib
        .lookupFunction<_c_GetThreadId, _dart_GetThreadId>('GetThreadId'))(
      Thread,
    );
  }

  _dart_GetThreadId? _GetThreadId;

  void FlushProcessWriteBuffers() {
    return (_FlushProcessWriteBuffers ??= _dylib.lookupFunction<
        _c_FlushProcessWriteBuffers,
        _dart_FlushProcessWriteBuffers>('FlushProcessWriteBuffers'))();
  }

  _dart_FlushProcessWriteBuffers? _FlushProcessWriteBuffers;

  int GetProcessIdOfThread(
    ffi.Pointer<ffi.Void> Thread,
  ) {
    return (_GetProcessIdOfThread ??= _dylib.lookupFunction<
        _c_GetProcessIdOfThread,
        _dart_GetProcessIdOfThread>('GetProcessIdOfThread'))(
      Thread,
    );
  }

  _dart_GetProcessIdOfThread? _GetProcessIdOfThread;

  int InitializeProcThreadAttributeList(
    ffi.Pointer<_PROC_THREAD_ATTRIBUTE_LIST> lpAttributeList,
    int dwAttributeCount,
    int dwFlags,
    ffi.Pointer<ffi.Uint64> lpSize,
  ) {
    return (_InitializeProcThreadAttributeList ??= _dylib.lookupFunction<
            _c_InitializeProcThreadAttributeList,
            _dart_InitializeProcThreadAttributeList>(
        'InitializeProcThreadAttributeList'))(
      lpAttributeList,
      dwAttributeCount,
      dwFlags,
      lpSize,
    );
  }

  _dart_InitializeProcThreadAttributeList? _InitializeProcThreadAttributeList;

  void DeleteProcThreadAttributeList(
    ffi.Pointer<_PROC_THREAD_ATTRIBUTE_LIST> lpAttributeList,
  ) {
    return (_DeleteProcThreadAttributeList ??= _dylib.lookupFunction<
        _c_DeleteProcThreadAttributeList,
        _dart_DeleteProcThreadAttributeList>('DeleteProcThreadAttributeList'))(
      lpAttributeList,
    );
  }

  _dart_DeleteProcThreadAttributeList? _DeleteProcThreadAttributeList;

  int UpdateProcThreadAttribute(
    ffi.Pointer<_PROC_THREAD_ATTRIBUTE_LIST> lpAttributeList,
    int dwFlags,
    int Attribute,
    ffi.Pointer<ffi.Void> lpValue,
    int cbSize,
    ffi.Pointer<ffi.Void> lpPreviousValue,
    ffi.Pointer<ffi.Uint64> lpReturnSize,
  ) {
    return (_UpdateProcThreadAttribute ??= _dylib.lookupFunction<
        _c_UpdateProcThreadAttribute,
        _dart_UpdateProcThreadAttribute>('UpdateProcThreadAttribute'))(
      lpAttributeList,
      dwFlags,
      Attribute,
      lpValue,
      cbSize,
      lpPreviousValue,
      lpReturnSize,
    );
  }

  _dart_UpdateProcThreadAttribute? _UpdateProcThreadAttribute;

  int SetProcessDynamicEHContinuationTargets(
    ffi.Pointer<ffi.Void> Process,
    int NumberOfTargets,
    ffi.Pointer<PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET> Targets,
  ) {
    return (_SetProcessDynamicEHContinuationTargets ??= _dylib.lookupFunction<
            _c_SetProcessDynamicEHContinuationTargets,
            _dart_SetProcessDynamicEHContinuationTargets>(
        'SetProcessDynamicEHContinuationTargets'))(
      Process,
      NumberOfTargets,
      Targets,
    );
  }

  _dart_SetProcessDynamicEHContinuationTargets?
      _SetProcessDynamicEHContinuationTargets;

  int SetProcessDynamicEnforcedCetCompatibleRanges(
    ffi.Pointer<ffi.Void> Process,
    int NumberOfRanges,
    ffi.Pointer<PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE> Ranges,
  ) {
    return (_SetProcessDynamicEnforcedCetCompatibleRanges ??=
        _dylib.lookupFunction<_c_SetProcessDynamicEnforcedCetCompatibleRanges,
                _dart_SetProcessDynamicEnforcedCetCompatibleRanges>(
            'SetProcessDynamicEnforcedCetCompatibleRanges'))(
      Process,
      NumberOfRanges,
      Ranges,
    );
  }

  _dart_SetProcessDynamicEnforcedCetCompatibleRanges?
      _SetProcessDynamicEnforcedCetCompatibleRanges;

  int SetProcessAffinityUpdateMode(
    ffi.Pointer<ffi.Void> hProcess,
    int dwFlags,
  ) {
    return (_SetProcessAffinityUpdateMode ??= _dylib.lookupFunction<
        _c_SetProcessAffinityUpdateMode,
        _dart_SetProcessAffinityUpdateMode>('SetProcessAffinityUpdateMode'))(
      hProcess,
      dwFlags,
    );
  }

  _dart_SetProcessAffinityUpdateMode? _SetProcessAffinityUpdateMode;

  int QueryProcessAffinityUpdateMode(
    ffi.Pointer<ffi.Void> hProcess,
    ffi.Pointer<ffi.Uint64> lpdwFlags,
  ) {
    return (_QueryProcessAffinityUpdateMode ??= _dylib.lookupFunction<
            _c_QueryProcessAffinityUpdateMode,
            _dart_QueryProcessAffinityUpdateMode>(
        'QueryProcessAffinityUpdateMode'))(
      hProcess,
      lpdwFlags,
    );
  }

  _dart_QueryProcessAffinityUpdateMode? _QueryProcessAffinityUpdateMode;

  ffi.Pointer<ffi.Void> CreateRemoteThreadEx(
    ffi.Pointer<ffi.Void> hProcess,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpThreadAttributes,
    int dwStackSize,
    ffi.Pointer<ffi.NativeFunction<LPTHREAD_START_ROUTINE>> lpStartAddress,
    ffi.Pointer<ffi.Void> lpParameter,
    int dwCreationFlags,
    ffi.Pointer<_PROC_THREAD_ATTRIBUTE_LIST> lpAttributeList,
    ffi.Pointer<ffi.Uint64> lpThreadId,
  ) {
    return (_CreateRemoteThreadEx ??= _dylib.lookupFunction<
        _c_CreateRemoteThreadEx,
        _dart_CreateRemoteThreadEx>('CreateRemoteThreadEx'))(
      hProcess,
      lpThreadAttributes,
      dwStackSize,
      lpStartAddress,
      lpParameter,
      dwCreationFlags,
      lpAttributeList,
      lpThreadId,
    );
  }

  _dart_CreateRemoteThreadEx? _CreateRemoteThreadEx;

  void GetCurrentThreadStackLimits(
    ffi.Pointer<ffi.Uint64> LowLimit,
    ffi.Pointer<ffi.Uint64> HighLimit,
  ) {
    return (_GetCurrentThreadStackLimits ??= _dylib.lookupFunction<
        _c_GetCurrentThreadStackLimits,
        _dart_GetCurrentThreadStackLimits>('GetCurrentThreadStackLimits'))(
      LowLimit,
      HighLimit,
    );
  }

  _dart_GetCurrentThreadStackLimits? _GetCurrentThreadStackLimits;

  int GetThreadContext(
    ffi.Pointer<ffi.Void> hThread,
    ffi.Pointer<PCONTEXT> lpContext,
  ) {
    return (_GetThreadContext ??=
        _dylib.lookupFunction<_c_GetThreadContext, _dart_GetThreadContext>(
            'GetThreadContext'))(
      hThread,
      lpContext,
    );
  }

  _dart_GetThreadContext? _GetThreadContext;

  int GetProcessMitigationPolicy(
    ffi.Pointer<ffi.Void> hProcess,
    int MitigationPolicy,
    ffi.Pointer<ffi.Void> lpBuffer,
    int dwLength,
  ) {
    return (_GetProcessMitigationPolicy ??= _dylib.lookupFunction<
        _c_GetProcessMitigationPolicy,
        _dart_GetProcessMitigationPolicy>('GetProcessMitigationPolicy'))(
      hProcess,
      MitigationPolicy,
      lpBuffer,
      dwLength,
    );
  }

  _dart_GetProcessMitigationPolicy? _GetProcessMitigationPolicy;

  int SetThreadContext(
    ffi.Pointer<ffi.Void> hThread,
    ffi.Pointer<PCONTEXT> lpContext,
  ) {
    return (_SetThreadContext ??=
        _dylib.lookupFunction<_c_SetThreadContext, _dart_SetThreadContext>(
            'SetThreadContext'))(
      hThread,
      lpContext,
    );
  }

  _dart_SetThreadContext? _SetThreadContext;

  int SetProcessMitigationPolicy(
    int MitigationPolicy,
    ffi.Pointer<ffi.Void> lpBuffer,
    int dwLength,
  ) {
    return (_SetProcessMitigationPolicy ??= _dylib.lookupFunction<
        _c_SetProcessMitigationPolicy,
        _dart_SetProcessMitigationPolicy>('SetProcessMitigationPolicy'))(
      MitigationPolicy,
      lpBuffer,
      dwLength,
    );
  }

  _dart_SetProcessMitigationPolicy? _SetProcessMitigationPolicy;

  int FlushInstructionCache(
    ffi.Pointer<ffi.Void> hProcess,
    ffi.Pointer<ffi.Void> lpBaseAddress,
    int dwSize,
  ) {
    return (_FlushInstructionCache ??= _dylib.lookupFunction<
        _c_FlushInstructionCache,
        _dart_FlushInstructionCache>('FlushInstructionCache'))(
      hProcess,
      lpBaseAddress,
      dwSize,
    );
  }

  _dart_FlushInstructionCache? _FlushInstructionCache;

  int GetThreadTimes(
    ffi.Pointer<ffi.Void> hThread,
    ffi.Pointer<LPFILETIME> lpCreationTime,
    ffi.Pointer<LPFILETIME> lpExitTime,
    ffi.Pointer<LPFILETIME> lpKernelTime,
    ffi.Pointer<LPFILETIME> lpUserTime,
  ) {
    return (_GetThreadTimes ??=
        _dylib.lookupFunction<_c_GetThreadTimes, _dart_GetThreadTimes>(
            'GetThreadTimes'))(
      hThread,
      lpCreationTime,
      lpExitTime,
      lpKernelTime,
      lpUserTime,
    );
  }

  _dart_GetThreadTimes? _GetThreadTimes;

  ffi.Pointer<ffi.Void> OpenProcess(
    int dwDesiredAccess,
    int bInheritHandle,
    int dwProcessId,
  ) {
    return (_OpenProcess ??= _dylib
        .lookupFunction<_c_OpenProcess, _dart_OpenProcess>('OpenProcess'))(
      dwDesiredAccess,
      bInheritHandle,
      dwProcessId,
    );
  }

  _dart_OpenProcess? _OpenProcess;

  int IsProcessorFeaturePresent(
    int ProcessorFeature,
  ) {
    return (_IsProcessorFeaturePresent ??= _dylib.lookupFunction<
        _c_IsProcessorFeaturePresent,
        _dart_IsProcessorFeaturePresent>('IsProcessorFeaturePresent'))(
      ProcessorFeature,
    );
  }

  _dart_IsProcessorFeaturePresent? _IsProcessorFeaturePresent;

  int GetProcessHandleCount(
    ffi.Pointer<ffi.Void> hProcess,
    ffi.Pointer<ffi.Uint64> pdwHandleCount,
  ) {
    return (_GetProcessHandleCount ??= _dylib.lookupFunction<
        _c_GetProcessHandleCount,
        _dart_GetProcessHandleCount>('GetProcessHandleCount'))(
      hProcess,
      pdwHandleCount,
    );
  }

  _dart_GetProcessHandleCount? _GetProcessHandleCount;

  int GetCurrentProcessorNumber() {
    return (_GetCurrentProcessorNumber ??= _dylib.lookupFunction<
        _c_GetCurrentProcessorNumber,
        _dart_GetCurrentProcessorNumber>('GetCurrentProcessorNumber'))();
  }

  _dart_GetCurrentProcessorNumber? _GetCurrentProcessorNumber;

  int SetThreadIdealProcessorEx(
    ffi.Pointer<ffi.Void> hThread,
    ffi.Pointer<PPROCESSOR_NUMBER> lpIdealProcessor,
    ffi.Pointer<PPROCESSOR_NUMBER> lpPreviousIdealProcessor,
  ) {
    return (_SetThreadIdealProcessorEx ??= _dylib.lookupFunction<
        _c_SetThreadIdealProcessorEx,
        _dart_SetThreadIdealProcessorEx>('SetThreadIdealProcessorEx'))(
      hThread,
      lpIdealProcessor,
      lpPreviousIdealProcessor,
    );
  }

  _dart_SetThreadIdealProcessorEx? _SetThreadIdealProcessorEx;

  int GetThreadIdealProcessorEx(
    ffi.Pointer<ffi.Void> hThread,
    ffi.Pointer<PPROCESSOR_NUMBER> lpIdealProcessor,
  ) {
    return (_GetThreadIdealProcessorEx ??= _dylib.lookupFunction<
        _c_GetThreadIdealProcessorEx,
        _dart_GetThreadIdealProcessorEx>('GetThreadIdealProcessorEx'))(
      hThread,
      lpIdealProcessor,
    );
  }

  _dart_GetThreadIdealProcessorEx? _GetThreadIdealProcessorEx;

  void GetCurrentProcessorNumberEx(
    ffi.Pointer<PPROCESSOR_NUMBER> ProcNumber,
  ) {
    return (_GetCurrentProcessorNumberEx ??= _dylib.lookupFunction<
        _c_GetCurrentProcessorNumberEx,
        _dart_GetCurrentProcessorNumberEx>('GetCurrentProcessorNumberEx'))(
      ProcNumber,
    );
  }

  _dart_GetCurrentProcessorNumberEx? _GetCurrentProcessorNumberEx;

  int GetProcessPriorityBoost(
    ffi.Pointer<ffi.Void> hProcess,
    ffi.Pointer<ffi.Int32> pDisablePriorityBoost,
  ) {
    return (_GetProcessPriorityBoost ??= _dylib.lookupFunction<
        _c_GetProcessPriorityBoost,
        _dart_GetProcessPriorityBoost>('GetProcessPriorityBoost'))(
      hProcess,
      pDisablePriorityBoost,
    );
  }

  _dart_GetProcessPriorityBoost? _GetProcessPriorityBoost;

  int SetProcessPriorityBoost(
    ffi.Pointer<ffi.Void> hProcess,
    int bDisablePriorityBoost,
  ) {
    return (_SetProcessPriorityBoost ??= _dylib.lookupFunction<
        _c_SetProcessPriorityBoost,
        _dart_SetProcessPriorityBoost>('SetProcessPriorityBoost'))(
      hProcess,
      bDisablePriorityBoost,
    );
  }

  _dart_SetProcessPriorityBoost? _SetProcessPriorityBoost;

  int GetThreadIOPendingFlag(
    ffi.Pointer<ffi.Void> hThread,
    ffi.Pointer<ffi.Int32> lpIOIsPending,
  ) {
    return (_GetThreadIOPendingFlag ??= _dylib.lookupFunction<
        _c_GetThreadIOPendingFlag,
        _dart_GetThreadIOPendingFlag>('GetThreadIOPendingFlag'))(
      hThread,
      lpIOIsPending,
    );
  }

  _dart_GetThreadIOPendingFlag? _GetThreadIOPendingFlag;

  int GetSystemTimes(
    ffi.Pointer<LPFILETIME> lpIdleTime,
    ffi.Pointer<LPFILETIME> lpKernelTime,
    ffi.Pointer<LPFILETIME> lpUserTime,
  ) {
    return (_GetSystemTimes ??=
        _dylib.lookupFunction<_c_GetSystemTimes, _dart_GetSystemTimes>(
            'GetSystemTimes'))(
      lpIdleTime,
      lpKernelTime,
      lpUserTime,
    );
  }

  _dart_GetSystemTimes? _GetSystemTimes;

  int GetThreadInformation(
    ffi.Pointer<ffi.Void> hThread,
    int ThreadInformationClass,
    ffi.Pointer<ffi.Void> ThreadInformation,
    int ThreadInformationSize,
  ) {
    return (_GetThreadInformation ??= _dylib.lookupFunction<
        _c_GetThreadInformation,
        _dart_GetThreadInformation>('GetThreadInformation'))(
      hThread,
      ThreadInformationClass,
      ThreadInformation,
      ThreadInformationSize,
    );
  }

  _dart_GetThreadInformation? _GetThreadInformation;

  int SetThreadInformation(
    ffi.Pointer<ffi.Void> hThread,
    int ThreadInformationClass,
    ffi.Pointer<ffi.Void> ThreadInformation,
    int ThreadInformationSize,
  ) {
    return (_SetThreadInformation ??= _dylib.lookupFunction<
        _c_SetThreadInformation,
        _dart_SetThreadInformation>('SetThreadInformation'))(
      hThread,
      ThreadInformationClass,
      ThreadInformation,
      ThreadInformationSize,
    );
  }

  _dart_SetThreadInformation? _SetThreadInformation;

  int IsProcessCritical(
    ffi.Pointer<ffi.Void> hProcess,
    ffi.Pointer<ffi.Int32> Critical,
  ) {
    return (_IsProcessCritical ??=
        _dylib.lookupFunction<_c_IsProcessCritical, _dart_IsProcessCritical>(
            'IsProcessCritical'))(
      hProcess,
      Critical,
    );
  }

  _dart_IsProcessCritical? _IsProcessCritical;

  int SetProtectedPolicy(
    ffi.Pointer<GUID> PolicyGuid,
    int PolicyValue,
    ffi.Pointer<ffi.Uint64> OldPolicyValue,
  ) {
    return (_SetProtectedPolicy ??=
        _dylib.lookupFunction<_c_SetProtectedPolicy, _dart_SetProtectedPolicy>(
            'SetProtectedPolicy'))(
      PolicyGuid,
      PolicyValue,
      OldPolicyValue,
    );
  }

  _dart_SetProtectedPolicy? _SetProtectedPolicy;

  int QueryProtectedPolicy(
    ffi.Pointer<GUID> PolicyGuid,
    ffi.Pointer<ffi.Uint64> PolicyValue,
  ) {
    return (_QueryProtectedPolicy ??= _dylib.lookupFunction<
        _c_QueryProtectedPolicy,
        _dart_QueryProtectedPolicy>('QueryProtectedPolicy'))(
      PolicyGuid,
      PolicyValue,
    );
  }

  _dart_QueryProtectedPolicy? _QueryProtectedPolicy;

  int SetThreadIdealProcessor(
    ffi.Pointer<ffi.Void> hThread,
    int dwIdealProcessor,
  ) {
    return (_SetThreadIdealProcessor ??= _dylib.lookupFunction<
        _c_SetThreadIdealProcessor,
        _dart_SetThreadIdealProcessor>('SetThreadIdealProcessor'))(
      hThread,
      dwIdealProcessor,
    );
  }

  _dart_SetThreadIdealProcessor? _SetThreadIdealProcessor;

  int SetProcessInformation(
    ffi.Pointer<ffi.Void> hProcess,
    int ProcessInformationClass,
    ffi.Pointer<ffi.Void> ProcessInformation,
    int ProcessInformationSize,
  ) {
    return (_SetProcessInformation ??= _dylib.lookupFunction<
        _c_SetProcessInformation,
        _dart_SetProcessInformation>('SetProcessInformation'))(
      hProcess,
      ProcessInformationClass,
      ProcessInformation,
      ProcessInformationSize,
    );
  }

  _dart_SetProcessInformation? _SetProcessInformation;

  int GetProcessInformation(
    ffi.Pointer<ffi.Void> hProcess,
    int ProcessInformationClass,
    ffi.Pointer<ffi.Void> ProcessInformation,
    int ProcessInformationSize,
  ) {
    return (_GetProcessInformation ??= _dylib.lookupFunction<
        _c_GetProcessInformation,
        _dart_GetProcessInformation>('GetProcessInformation'))(
      hProcess,
      ProcessInformationClass,
      ProcessInformation,
      ProcessInformationSize,
    );
  }

  _dart_GetProcessInformation? _GetProcessInformation;

  int GetSystemCpuSetInformation(
    ffi.Pointer<_SYSTEM_CPU_SET_INFORMATION> Information,
    int BufferLength,
    ffi.Pointer<ffi.Uint64> ReturnedLength,
    ffi.Pointer<ffi.Void> Process,
    int Flags,
  ) {
    return (_GetSystemCpuSetInformation ??= _dylib.lookupFunction<
        _c_GetSystemCpuSetInformation,
        _dart_GetSystemCpuSetInformation>('GetSystemCpuSetInformation'))(
      Information,
      BufferLength,
      ReturnedLength,
      Process,
      Flags,
    );
  }

  _dart_GetSystemCpuSetInformation? _GetSystemCpuSetInformation;

  int GetProcessDefaultCpuSets(
    ffi.Pointer<ffi.Void> Process,
    ffi.Pointer<ffi.Uint64> CpuSetIds,
    int CpuSetIdCount,
    ffi.Pointer<ffi.Uint64> RequiredIdCount,
  ) {
    return (_GetProcessDefaultCpuSets ??= _dylib.lookupFunction<
        _c_GetProcessDefaultCpuSets,
        _dart_GetProcessDefaultCpuSets>('GetProcessDefaultCpuSets'))(
      Process,
      CpuSetIds,
      CpuSetIdCount,
      RequiredIdCount,
    );
  }

  _dart_GetProcessDefaultCpuSets? _GetProcessDefaultCpuSets;

  int SetProcessDefaultCpuSets(
    ffi.Pointer<ffi.Void> Process,
    ffi.Pointer<ffi.Uint64> CpuSetIds,
    int CpuSetIdCount,
  ) {
    return (_SetProcessDefaultCpuSets ??= _dylib.lookupFunction<
        _c_SetProcessDefaultCpuSets,
        _dart_SetProcessDefaultCpuSets>('SetProcessDefaultCpuSets'))(
      Process,
      CpuSetIds,
      CpuSetIdCount,
    );
  }

  _dart_SetProcessDefaultCpuSets? _SetProcessDefaultCpuSets;

  int GetThreadSelectedCpuSets(
    ffi.Pointer<ffi.Void> Thread,
    ffi.Pointer<ffi.Uint64> CpuSetIds,
    int CpuSetIdCount,
    ffi.Pointer<ffi.Uint64> RequiredIdCount,
  ) {
    return (_GetThreadSelectedCpuSets ??= _dylib.lookupFunction<
        _c_GetThreadSelectedCpuSets,
        _dart_GetThreadSelectedCpuSets>('GetThreadSelectedCpuSets'))(
      Thread,
      CpuSetIds,
      CpuSetIdCount,
      RequiredIdCount,
    );
  }

  _dart_GetThreadSelectedCpuSets? _GetThreadSelectedCpuSets;

  int SetThreadSelectedCpuSets(
    ffi.Pointer<ffi.Void> Thread,
    ffi.Pointer<ffi.Uint64> CpuSetIds,
    int CpuSetIdCount,
  ) {
    return (_SetThreadSelectedCpuSets ??= _dylib.lookupFunction<
        _c_SetThreadSelectedCpuSets,
        _dart_SetThreadSelectedCpuSets>('SetThreadSelectedCpuSets'))(
      Thread,
      CpuSetIds,
      CpuSetIdCount,
    );
  }

  _dart_SetThreadSelectedCpuSets? _SetThreadSelectedCpuSets;

  int CreateProcessAsUserA(
    ffi.Pointer<ffi.Void> hToken,
    ffi.Pointer<ffi.Int8> lpApplicationName,
    ffi.Pointer<ffi.Int8> lpCommandLine,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpProcessAttributes,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpThreadAttributes,
    int bInheritHandles,
    int dwCreationFlags,
    ffi.Pointer<ffi.Void> lpEnvironment,
    ffi.Pointer<ffi.Int8> lpCurrentDirectory,
    ffi.Pointer<LPSTARTUPINFOA> lpStartupInfo,
    ffi.Pointer<LPPROCESS_INFORMATION> lpProcessInformation,
  ) {
    return (_CreateProcessAsUserA ??= _dylib.lookupFunction<
        _c_CreateProcessAsUserA,
        _dart_CreateProcessAsUserA>('CreateProcessAsUserA'))(
      hToken,
      lpApplicationName,
      lpCommandLine,
      lpProcessAttributes,
      lpThreadAttributes,
      bInheritHandles,
      dwCreationFlags,
      lpEnvironment,
      lpCurrentDirectory,
      lpStartupInfo,
      lpProcessInformation,
    );
  }

  _dart_CreateProcessAsUserA? _CreateProcessAsUserA;

  int GetProcessShutdownParameters(
    ffi.Pointer<ffi.Uint64> lpdwLevel,
    ffi.Pointer<ffi.Uint64> lpdwFlags,
  ) {
    return (_GetProcessShutdownParameters ??= _dylib.lookupFunction<
        _c_GetProcessShutdownParameters,
        _dart_GetProcessShutdownParameters>('GetProcessShutdownParameters'))(
      lpdwLevel,
      lpdwFlags,
    );
  }

  _dart_GetProcessShutdownParameters? _GetProcessShutdownParameters;

  int SetThreadDescription(
    ffi.Pointer<ffi.Void> hThread,
    ffi.Pointer<ffi.Uint16> lpThreadDescription,
  ) {
    return (_SetThreadDescription ??= _dylib.lookupFunction<
        _c_SetThreadDescription,
        _dart_SetThreadDescription>('SetThreadDescription'))(
      hThread,
      lpThreadDescription,
    );
  }

  _dart_SetThreadDescription? _SetThreadDescription;

  int GetThreadDescription(
    ffi.Pointer<ffi.Void> hThread,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> ppszThreadDescription,
  ) {
    return (_GetThreadDescription ??= _dylib.lookupFunction<
        _c_GetThreadDescription,
        _dart_GetThreadDescription>('GetThreadDescription'))(
      hThread,
      ppszThreadDescription,
    );
  }

  _dart_GetThreadDescription? _GetThreadDescription;

  int GlobalMemoryStatusEx(
    ffi.Pointer<LPMEMORYSTATUSEX> lpBuffer,
  ) {
    return (_GlobalMemoryStatusEx ??= _dylib.lookupFunction<
        _c_GlobalMemoryStatusEx,
        _dart_GlobalMemoryStatusEx>('GlobalMemoryStatusEx'))(
      lpBuffer,
    );
  }

  _dart_GlobalMemoryStatusEx? _GlobalMemoryStatusEx;

  void GetSystemInfo(
    ffi.Pointer<LPSYSTEM_INFO> lpSystemInfo,
  ) {
    return (_GetSystemInfo ??=
        _dylib.lookupFunction<_c_GetSystemInfo, _dart_GetSystemInfo>(
            'GetSystemInfo'))(
      lpSystemInfo,
    );
  }

  _dart_GetSystemInfo? _GetSystemInfo;

  void GetSystemTime(
    ffi.Pointer<LPSYSTEMTIME> lpSystemTime,
  ) {
    return (_GetSystemTime ??=
        _dylib.lookupFunction<_c_GetSystemTime, _dart_GetSystemTime>(
            'GetSystemTime'))(
      lpSystemTime,
    );
  }

  _dart_GetSystemTime? _GetSystemTime;

  void GetSystemTimeAsFileTime(
    ffi.Pointer<LPFILETIME> lpSystemTimeAsFileTime,
  ) {
    return (_GetSystemTimeAsFileTime ??= _dylib.lookupFunction<
        _c_GetSystemTimeAsFileTime,
        _dart_GetSystemTimeAsFileTime>('GetSystemTimeAsFileTime'))(
      lpSystemTimeAsFileTime,
    );
  }

  _dart_GetSystemTimeAsFileTime? _GetSystemTimeAsFileTime;

  void GetLocalTime(
    ffi.Pointer<LPSYSTEMTIME> lpSystemTime,
  ) {
    return (_GetLocalTime ??= _dylib
        .lookupFunction<_c_GetLocalTime, _dart_GetLocalTime>('GetLocalTime'))(
      lpSystemTime,
    );
  }

  _dart_GetLocalTime? _GetLocalTime;

  int IsUserCetAvailableInEnvironment(
    int UserCetEnvironment,
  ) {
    return (_IsUserCetAvailableInEnvironment ??= _dylib.lookupFunction<
            _c_IsUserCetAvailableInEnvironment,
            _dart_IsUserCetAvailableInEnvironment>(
        'IsUserCetAvailableInEnvironment'))(
      UserCetEnvironment,
    );
  }

  _dart_IsUserCetAvailableInEnvironment? _IsUserCetAvailableInEnvironment;

  int GetSystemLeapSecondInformation(
    ffi.Pointer<ffi.Int32> Enabled,
    ffi.Pointer<ffi.Uint64> Flags,
  ) {
    return (_GetSystemLeapSecondInformation ??= _dylib.lookupFunction<
            _c_GetSystemLeapSecondInformation,
            _dart_GetSystemLeapSecondInformation>(
        'GetSystemLeapSecondInformation'))(
      Enabled,
      Flags,
    );
  }

  _dart_GetSystemLeapSecondInformation? _GetSystemLeapSecondInformation;

  int GetVersion() {
    return (_GetVersion ??=
        _dylib.lookupFunction<_c_GetVersion, _dart_GetVersion>('GetVersion'))();
  }

  _dart_GetVersion? _GetVersion;

  int SetLocalTime(
    ffi.Pointer<LPSYSTEMTIME> lpSystemTime,
  ) {
    return (_SetLocalTime ??= _dylib
        .lookupFunction<_c_SetLocalTime, _dart_SetLocalTime>('SetLocalTime'))(
      lpSystemTime,
    );
  }

  _dart_SetLocalTime? _SetLocalTime;

  int GetTickCount() {
    return (_GetTickCount ??= _dylib
        .lookupFunction<_c_GetTickCount, _dart_GetTickCount>('GetTickCount'))();
  }

  _dart_GetTickCount? _GetTickCount;

  int GetTickCount64() {
    return (_GetTickCount64 ??=
        _dylib.lookupFunction<_c_GetTickCount64, _dart_GetTickCount64>(
            'GetTickCount64'))();
  }

  _dart_GetTickCount64? _GetTickCount64;

  int GetSystemTimeAdjustment(
    ffi.Pointer<ffi.Uint64> lpTimeAdjustment,
    ffi.Pointer<ffi.Uint64> lpTimeIncrement,
    ffi.Pointer<ffi.Int32> lpTimeAdjustmentDisabled,
  ) {
    return (_GetSystemTimeAdjustment ??= _dylib.lookupFunction<
        _c_GetSystemTimeAdjustment,
        _dart_GetSystemTimeAdjustment>('GetSystemTimeAdjustment'))(
      lpTimeAdjustment,
      lpTimeIncrement,
      lpTimeAdjustmentDisabled,
    );
  }

  _dart_GetSystemTimeAdjustment? _GetSystemTimeAdjustment;

  int GetSystemTimeAdjustmentPrecise(
    ffi.Pointer<ffi.Uint64> lpTimeAdjustment,
    ffi.Pointer<ffi.Uint64> lpTimeIncrement,
    ffi.Pointer<ffi.Int32> lpTimeAdjustmentDisabled,
  ) {
    return (_GetSystemTimeAdjustmentPrecise ??= _dylib.lookupFunction<
            _c_GetSystemTimeAdjustmentPrecise,
            _dart_GetSystemTimeAdjustmentPrecise>(
        'GetSystemTimeAdjustmentPrecise'))(
      lpTimeAdjustment,
      lpTimeIncrement,
      lpTimeAdjustmentDisabled,
    );
  }

  _dart_GetSystemTimeAdjustmentPrecise? _GetSystemTimeAdjustmentPrecise;

  int GetSystemDirectoryA(
    ffi.Pointer<ffi.Int8> lpBuffer,
    int uSize,
  ) {
    return (_GetSystemDirectoryA ??= _dylib.lookupFunction<
        _c_GetSystemDirectoryA,
        _dart_GetSystemDirectoryA>('GetSystemDirectoryA'))(
      lpBuffer,
      uSize,
    );
  }

  _dart_GetSystemDirectoryA? _GetSystemDirectoryA;

  int GetSystemDirectoryW(
    ffi.Pointer<ffi.Uint16> lpBuffer,
    int uSize,
  ) {
    return (_GetSystemDirectoryW ??= _dylib.lookupFunction<
        _c_GetSystemDirectoryW,
        _dart_GetSystemDirectoryW>('GetSystemDirectoryW'))(
      lpBuffer,
      uSize,
    );
  }

  _dart_GetSystemDirectoryW? _GetSystemDirectoryW;

  int GetWindowsDirectoryA(
    ffi.Pointer<ffi.Int8> lpBuffer,
    int uSize,
  ) {
    return (_GetWindowsDirectoryA ??= _dylib.lookupFunction<
        _c_GetWindowsDirectoryA,
        _dart_GetWindowsDirectoryA>('GetWindowsDirectoryA'))(
      lpBuffer,
      uSize,
    );
  }

  _dart_GetWindowsDirectoryA? _GetWindowsDirectoryA;

  int GetWindowsDirectoryW(
    ffi.Pointer<ffi.Uint16> lpBuffer,
    int uSize,
  ) {
    return (_GetWindowsDirectoryW ??= _dylib.lookupFunction<
        _c_GetWindowsDirectoryW,
        _dart_GetWindowsDirectoryW>('GetWindowsDirectoryW'))(
      lpBuffer,
      uSize,
    );
  }

  _dart_GetWindowsDirectoryW? _GetWindowsDirectoryW;

  int GetSystemWindowsDirectoryA(
    ffi.Pointer<ffi.Int8> lpBuffer,
    int uSize,
  ) {
    return (_GetSystemWindowsDirectoryA ??= _dylib.lookupFunction<
        _c_GetSystemWindowsDirectoryA,
        _dart_GetSystemWindowsDirectoryA>('GetSystemWindowsDirectoryA'))(
      lpBuffer,
      uSize,
    );
  }

  _dart_GetSystemWindowsDirectoryA? _GetSystemWindowsDirectoryA;

  int GetSystemWindowsDirectoryW(
    ffi.Pointer<ffi.Uint16> lpBuffer,
    int uSize,
  ) {
    return (_GetSystemWindowsDirectoryW ??= _dylib.lookupFunction<
        _c_GetSystemWindowsDirectoryW,
        _dart_GetSystemWindowsDirectoryW>('GetSystemWindowsDirectoryW'))(
      lpBuffer,
      uSize,
    );
  }

  _dart_GetSystemWindowsDirectoryW? _GetSystemWindowsDirectoryW;

  int GetComputerNameExA(
    int NameType,
    ffi.Pointer<ffi.Int8> lpBuffer,
    ffi.Pointer<ffi.Uint64> nSize,
  ) {
    return (_GetComputerNameExA ??=
        _dylib.lookupFunction<_c_GetComputerNameExA, _dart_GetComputerNameExA>(
            'GetComputerNameExA'))(
      NameType,
      lpBuffer,
      nSize,
    );
  }

  _dart_GetComputerNameExA? _GetComputerNameExA;

  int GetComputerNameExW(
    int NameType,
    ffi.Pointer<ffi.Uint16> lpBuffer,
    ffi.Pointer<ffi.Uint64> nSize,
  ) {
    return (_GetComputerNameExW ??=
        _dylib.lookupFunction<_c_GetComputerNameExW, _dart_GetComputerNameExW>(
            'GetComputerNameExW'))(
      NameType,
      lpBuffer,
      nSize,
    );
  }

  _dart_GetComputerNameExW? _GetComputerNameExW;

  int SetComputerNameExW(
    int NameType,
    ffi.Pointer<ffi.Uint16> lpBuffer,
  ) {
    return (_SetComputerNameExW ??=
        _dylib.lookupFunction<_c_SetComputerNameExW, _dart_SetComputerNameExW>(
            'SetComputerNameExW'))(
      NameType,
      lpBuffer,
    );
  }

  _dart_SetComputerNameExW? _SetComputerNameExW;

  int SetSystemTime(
    ffi.Pointer<LPSYSTEMTIME> lpSystemTime,
  ) {
    return (_SetSystemTime ??=
        _dylib.lookupFunction<_c_SetSystemTime, _dart_SetSystemTime>(
            'SetSystemTime'))(
      lpSystemTime,
    );
  }

  _dart_SetSystemTime? _SetSystemTime;

  int GetVersionExA(
    ffi.Pointer<LPOSVERSIONINFOA> lpVersionInformation,
  ) {
    return (_GetVersionExA ??=
        _dylib.lookupFunction<_c_GetVersionExA, _dart_GetVersionExA>(
            'GetVersionExA'))(
      lpVersionInformation,
    );
  }

  _dart_GetVersionExA? _GetVersionExA;

  int GetVersionExW(
    ffi.Pointer<PRTL_OSVERSIONINFOW> lpVersionInformation,
  ) {
    return (_GetVersionExW ??=
        _dylib.lookupFunction<_c_GetVersionExW, _dart_GetVersionExW>(
            'GetVersionExW'))(
      lpVersionInformation,
    );
  }

  _dart_GetVersionExW? _GetVersionExW;

  int GetLogicalProcessorInformation(
    ffi.Pointer<PSYSTEM_LOGICAL_PROCESSOR_INFORMATION> Buffer,
    ffi.Pointer<ffi.Uint64> ReturnedLength,
  ) {
    return (_GetLogicalProcessorInformation ??= _dylib.lookupFunction<
            _c_GetLogicalProcessorInformation,
            _dart_GetLogicalProcessorInformation>(
        'GetLogicalProcessorInformation'))(
      Buffer,
      ReturnedLength,
    );
  }

  _dart_GetLogicalProcessorInformation? _GetLogicalProcessorInformation;

  int GetLogicalProcessorInformationEx(
    int RelationshipType,
    ffi.Pointer<_SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX> Buffer,
    ffi.Pointer<ffi.Uint64> ReturnedLength,
  ) {
    return (_GetLogicalProcessorInformationEx ??= _dylib.lookupFunction<
            _c_GetLogicalProcessorInformationEx,
            _dart_GetLogicalProcessorInformationEx>(
        'GetLogicalProcessorInformationEx'))(
      RelationshipType,
      Buffer,
      ReturnedLength,
    );
  }

  _dart_GetLogicalProcessorInformationEx? _GetLogicalProcessorInformationEx;

  void GetNativeSystemInfo(
    ffi.Pointer<LPSYSTEM_INFO> lpSystemInfo,
  ) {
    return (_GetNativeSystemInfo ??= _dylib.lookupFunction<
        _c_GetNativeSystemInfo,
        _dart_GetNativeSystemInfo>('GetNativeSystemInfo'))(
      lpSystemInfo,
    );
  }

  _dart_GetNativeSystemInfo? _GetNativeSystemInfo;

  void GetSystemTimePreciseAsFileTime(
    ffi.Pointer<LPFILETIME> lpSystemTimeAsFileTime,
  ) {
    return (_GetSystemTimePreciseAsFileTime ??= _dylib.lookupFunction<
            _c_GetSystemTimePreciseAsFileTime,
            _dart_GetSystemTimePreciseAsFileTime>(
        'GetSystemTimePreciseAsFileTime'))(
      lpSystemTimeAsFileTime,
    );
  }

  _dart_GetSystemTimePreciseAsFileTime? _GetSystemTimePreciseAsFileTime;

  int GetProductInfo(
    int dwOSMajorVersion,
    int dwOSMinorVersion,
    int dwSpMajorVersion,
    int dwSpMinorVersion,
    ffi.Pointer<ffi.Uint64> pdwReturnedProductType,
  ) {
    return (_GetProductInfo ??=
        _dylib.lookupFunction<_c_GetProductInfo, _dart_GetProductInfo>(
            'GetProductInfo'))(
      dwOSMajorVersion,
      dwOSMinorVersion,
      dwSpMajorVersion,
      dwSpMinorVersion,
      pdwReturnedProductType,
    );
  }

  _dart_GetProductInfo? _GetProductInfo;

  int GetOsSafeBootMode(
    ffi.Pointer<ffi.Uint64> Flags,
  ) {
    return (_GetOsSafeBootMode ??=
        _dylib.lookupFunction<_c_GetOsSafeBootMode, _dart_GetOsSafeBootMode>(
            'GetOsSafeBootMode'))(
      Flags,
    );
  }

  _dart_GetOsSafeBootMode? _GetOsSafeBootMode;

  int EnumSystemFirmwareTables(
    int FirmwareTableProviderSignature,
    ffi.Pointer<ffi.Void> pFirmwareTableEnumBuffer,
    int BufferSize,
  ) {
    return (_EnumSystemFirmwareTables ??= _dylib.lookupFunction<
        _c_EnumSystemFirmwareTables,
        _dart_EnumSystemFirmwareTables>('EnumSystemFirmwareTables'))(
      FirmwareTableProviderSignature,
      pFirmwareTableEnumBuffer,
      BufferSize,
    );
  }

  _dart_EnumSystemFirmwareTables? _EnumSystemFirmwareTables;

  int GetSystemFirmwareTable(
    int FirmwareTableProviderSignature,
    int FirmwareTableID,
    ffi.Pointer<ffi.Void> pFirmwareTableBuffer,
    int BufferSize,
  ) {
    return (_GetSystemFirmwareTable ??= _dylib.lookupFunction<
        _c_GetSystemFirmwareTable,
        _dart_GetSystemFirmwareTable>('GetSystemFirmwareTable'))(
      FirmwareTableProviderSignature,
      FirmwareTableID,
      pFirmwareTableBuffer,
      BufferSize,
    );
  }

  _dart_GetSystemFirmwareTable? _GetSystemFirmwareTable;

  int DnsHostnameToComputerNameExW(
    ffi.Pointer<ffi.Uint16> Hostname,
    ffi.Pointer<ffi.Uint16> ComputerName,
    ffi.Pointer<ffi.Uint64> nSize,
  ) {
    return (_DnsHostnameToComputerNameExW ??= _dylib.lookupFunction<
        _c_DnsHostnameToComputerNameExW,
        _dart_DnsHostnameToComputerNameExW>('DnsHostnameToComputerNameExW'))(
      Hostname,
      ComputerName,
      nSize,
    );
  }

  _dart_DnsHostnameToComputerNameExW? _DnsHostnameToComputerNameExW;

  int GetPhysicallyInstalledSystemMemory(
    ffi.Pointer<ffi.Uint64> TotalMemoryInKilobytes,
  ) {
    return (_GetPhysicallyInstalledSystemMemory ??= _dylib.lookupFunction<
            _c_GetPhysicallyInstalledSystemMemory,
            _dart_GetPhysicallyInstalledSystemMemory>(
        'GetPhysicallyInstalledSystemMemory'))(
      TotalMemoryInKilobytes,
    );
  }

  _dart_GetPhysicallyInstalledSystemMemory? _GetPhysicallyInstalledSystemMemory;

  int SetComputerNameEx2W(
    int NameType,
    int Flags,
    ffi.Pointer<ffi.Uint16> lpBuffer,
  ) {
    return (_SetComputerNameEx2W ??= _dylib.lookupFunction<
        _c_SetComputerNameEx2W,
        _dart_SetComputerNameEx2W>('SetComputerNameEx2W'))(
      NameType,
      Flags,
      lpBuffer,
    );
  }

  _dart_SetComputerNameEx2W? _SetComputerNameEx2W;

  int SetSystemTimeAdjustment(
    int dwTimeAdjustment,
    int bTimeAdjustmentDisabled,
  ) {
    return (_SetSystemTimeAdjustment ??= _dylib.lookupFunction<
        _c_SetSystemTimeAdjustment,
        _dart_SetSystemTimeAdjustment>('SetSystemTimeAdjustment'))(
      dwTimeAdjustment,
      bTimeAdjustmentDisabled,
    );
  }

  _dart_SetSystemTimeAdjustment? _SetSystemTimeAdjustment;

  int SetSystemTimeAdjustmentPrecise(
    int dwTimeAdjustment,
    int bTimeAdjustmentDisabled,
  ) {
    return (_SetSystemTimeAdjustmentPrecise ??= _dylib.lookupFunction<
            _c_SetSystemTimeAdjustmentPrecise,
            _dart_SetSystemTimeAdjustmentPrecise>(
        'SetSystemTimeAdjustmentPrecise'))(
      dwTimeAdjustment,
      bTimeAdjustmentDisabled,
    );
  }

  _dart_SetSystemTimeAdjustmentPrecise? _SetSystemTimeAdjustmentPrecise;

  int InstallELAMCertificateInfo(
    ffi.Pointer<ffi.Void> ELAMFile,
  ) {
    return (_InstallELAMCertificateInfo ??= _dylib.lookupFunction<
        _c_InstallELAMCertificateInfo,
        _dart_InstallELAMCertificateInfo>('InstallELAMCertificateInfo'))(
      ELAMFile,
    );
  }

  _dart_InstallELAMCertificateInfo? _InstallELAMCertificateInfo;

  int GetProcessorSystemCycleTime(
    int Group,
    ffi.Pointer<PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION> Buffer,
    ffi.Pointer<ffi.Uint64> ReturnedLength,
  ) {
    return (_GetProcessorSystemCycleTime ??= _dylib.lookupFunction<
        _c_GetProcessorSystemCycleTime,
        _dart_GetProcessorSystemCycleTime>('GetProcessorSystemCycleTime'))(
      Group,
      Buffer,
      ReturnedLength,
    );
  }

  _dart_GetProcessorSystemCycleTime? _GetProcessorSystemCycleTime;

  int GetOsManufacturingMode(
    ffi.Pointer<ffi.Int32> pbEnabled,
  ) {
    return (_GetOsManufacturingMode ??= _dylib.lookupFunction<
        _c_GetOsManufacturingMode,
        _dart_GetOsManufacturingMode>('GetOsManufacturingMode'))(
      pbEnabled,
    );
  }

  _dart_GetOsManufacturingMode? _GetOsManufacturingMode;

  int GetIntegratedDisplaySize(
    ffi.Pointer<ffi.Double> sizeInInches,
  ) {
    return (_GetIntegratedDisplaySize ??= _dylib.lookupFunction<
        _c_GetIntegratedDisplaySize,
        _dart_GetIntegratedDisplaySize>('GetIntegratedDisplaySize'))(
      sizeInInches,
    );
  }

  _dart_GetIntegratedDisplaySize? _GetIntegratedDisplaySize;

  int SetComputerNameA(
    ffi.Pointer<ffi.Int8> lpComputerName,
  ) {
    return (_SetComputerNameA ??=
        _dylib.lookupFunction<_c_SetComputerNameA, _dart_SetComputerNameA>(
            'SetComputerNameA'))(
      lpComputerName,
    );
  }

  _dart_SetComputerNameA? _SetComputerNameA;

  int SetComputerNameW(
    ffi.Pointer<ffi.Uint16> lpComputerName,
  ) {
    return (_SetComputerNameW ??=
        _dylib.lookupFunction<_c_SetComputerNameW, _dart_SetComputerNameW>(
            'SetComputerNameW'))(
      lpComputerName,
    );
  }

  _dart_SetComputerNameW? _SetComputerNameW;

  int SetComputerNameExA(
    int NameType,
    ffi.Pointer<ffi.Int8> lpBuffer,
  ) {
    return (_SetComputerNameExA ??=
        _dylib.lookupFunction<_c_SetComputerNameExA, _dart_SetComputerNameExA>(
            'SetComputerNameExA'))(
      NameType,
      lpBuffer,
    );
  }

  _dart_SetComputerNameExA? _SetComputerNameExA;

  ffi.Pointer<ffi.Void> VirtualAlloc(
    ffi.Pointer<ffi.Void> lpAddress,
    int dwSize,
    int flAllocationType,
    int flProtect,
  ) {
    return (_VirtualAlloc ??= _dylib
        .lookupFunction<_c_VirtualAlloc, _dart_VirtualAlloc>('VirtualAlloc'))(
      lpAddress,
      dwSize,
      flAllocationType,
      flProtect,
    );
  }

  _dart_VirtualAlloc? _VirtualAlloc;

  int VirtualProtect(
    ffi.Pointer<ffi.Void> lpAddress,
    int dwSize,
    int flNewProtect,
    ffi.Pointer<ffi.Uint64> lpflOldProtect,
  ) {
    return (_VirtualProtect ??=
        _dylib.lookupFunction<_c_VirtualProtect, _dart_VirtualProtect>(
            'VirtualProtect'))(
      lpAddress,
      dwSize,
      flNewProtect,
      lpflOldProtect,
    );
  }

  _dart_VirtualProtect? _VirtualProtect;

  int VirtualFree(
    ffi.Pointer<ffi.Void> lpAddress,
    int dwSize,
    int dwFreeType,
  ) {
    return (_VirtualFree ??= _dylib
        .lookupFunction<_c_VirtualFree, _dart_VirtualFree>('VirtualFree'))(
      lpAddress,
      dwSize,
      dwFreeType,
    );
  }

  _dart_VirtualFree? _VirtualFree;

  int VirtualQuery(
    ffi.Pointer<ffi.Void> lpAddress,
    ffi.Pointer<PMEMORY_BASIC_INFORMATION> lpBuffer,
    int dwLength,
  ) {
    return (_VirtualQuery ??= _dylib
        .lookupFunction<_c_VirtualQuery, _dart_VirtualQuery>('VirtualQuery'))(
      lpAddress,
      lpBuffer,
      dwLength,
    );
  }

  _dart_VirtualQuery? _VirtualQuery;

  ffi.Pointer<ffi.Void> VirtualAllocEx(
    ffi.Pointer<ffi.Void> hProcess,
    ffi.Pointer<ffi.Void> lpAddress,
    int dwSize,
    int flAllocationType,
    int flProtect,
  ) {
    return (_VirtualAllocEx ??=
        _dylib.lookupFunction<_c_VirtualAllocEx, _dart_VirtualAllocEx>(
            'VirtualAllocEx'))(
      hProcess,
      lpAddress,
      dwSize,
      flAllocationType,
      flProtect,
    );
  }

  _dart_VirtualAllocEx? _VirtualAllocEx;

  int VirtualProtectEx(
    ffi.Pointer<ffi.Void> hProcess,
    ffi.Pointer<ffi.Void> lpAddress,
    int dwSize,
    int flNewProtect,
    ffi.Pointer<ffi.Uint64> lpflOldProtect,
  ) {
    return (_VirtualProtectEx ??=
        _dylib.lookupFunction<_c_VirtualProtectEx, _dart_VirtualProtectEx>(
            'VirtualProtectEx'))(
      hProcess,
      lpAddress,
      dwSize,
      flNewProtect,
      lpflOldProtect,
    );
  }

  _dart_VirtualProtectEx? _VirtualProtectEx;

  int VirtualQueryEx(
    ffi.Pointer<ffi.Void> hProcess,
    ffi.Pointer<ffi.Void> lpAddress,
    ffi.Pointer<PMEMORY_BASIC_INFORMATION> lpBuffer,
    int dwLength,
  ) {
    return (_VirtualQueryEx ??=
        _dylib.lookupFunction<_c_VirtualQueryEx, _dart_VirtualQueryEx>(
            'VirtualQueryEx'))(
      hProcess,
      lpAddress,
      lpBuffer,
      dwLength,
    );
  }

  _dart_VirtualQueryEx? _VirtualQueryEx;

  int ReadProcessMemory(
    ffi.Pointer<ffi.Void> hProcess,
    ffi.Pointer<ffi.Void> lpBaseAddress,
    ffi.Pointer<ffi.Void> lpBuffer,
    int nSize,
    ffi.Pointer<ffi.Uint64> lpNumberOfBytesRead,
  ) {
    return (_ReadProcessMemory ??=
        _dylib.lookupFunction<_c_ReadProcessMemory, _dart_ReadProcessMemory>(
            'ReadProcessMemory'))(
      hProcess,
      lpBaseAddress,
      lpBuffer,
      nSize,
      lpNumberOfBytesRead,
    );
  }

  _dart_ReadProcessMemory? _ReadProcessMemory;

  int WriteProcessMemory(
    ffi.Pointer<ffi.Void> hProcess,
    ffi.Pointer<ffi.Void> lpBaseAddress,
    ffi.Pointer<ffi.Void> lpBuffer,
    int nSize,
    ffi.Pointer<ffi.Uint64> lpNumberOfBytesWritten,
  ) {
    return (_WriteProcessMemory ??=
        _dylib.lookupFunction<_c_WriteProcessMemory, _dart_WriteProcessMemory>(
            'WriteProcessMemory'))(
      hProcess,
      lpBaseAddress,
      lpBuffer,
      nSize,
      lpNumberOfBytesWritten,
    );
  }

  _dart_WriteProcessMemory? _WriteProcessMemory;

  ffi.Pointer<ffi.Void> CreateFileMappingW(
    ffi.Pointer<ffi.Void> hFile,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpFileMappingAttributes,
    int flProtect,
    int dwMaximumSizeHigh,
    int dwMaximumSizeLow,
    ffi.Pointer<ffi.Uint16> lpName,
  ) {
    return (_CreateFileMappingW ??=
        _dylib.lookupFunction<_c_CreateFileMappingW, _dart_CreateFileMappingW>(
            'CreateFileMappingW'))(
      hFile,
      lpFileMappingAttributes,
      flProtect,
      dwMaximumSizeHigh,
      dwMaximumSizeLow,
      lpName,
    );
  }

  _dart_CreateFileMappingW? _CreateFileMappingW;

  ffi.Pointer<ffi.Void> OpenFileMappingW(
    int dwDesiredAccess,
    int bInheritHandle,
    ffi.Pointer<ffi.Uint16> lpName,
  ) {
    return (_OpenFileMappingW ??=
        _dylib.lookupFunction<_c_OpenFileMappingW, _dart_OpenFileMappingW>(
            'OpenFileMappingW'))(
      dwDesiredAccess,
      bInheritHandle,
      lpName,
    );
  }

  _dart_OpenFileMappingW? _OpenFileMappingW;

  ffi.Pointer<ffi.Void> MapViewOfFile(
    ffi.Pointer<ffi.Void> hFileMappingObject,
    int dwDesiredAccess,
    int dwFileOffsetHigh,
    int dwFileOffsetLow,
    int dwNumberOfBytesToMap,
  ) {
    return (_MapViewOfFile ??=
        _dylib.lookupFunction<_c_MapViewOfFile, _dart_MapViewOfFile>(
            'MapViewOfFile'))(
      hFileMappingObject,
      dwDesiredAccess,
      dwFileOffsetHigh,
      dwFileOffsetLow,
      dwNumberOfBytesToMap,
    );
  }

  _dart_MapViewOfFile? _MapViewOfFile;

  ffi.Pointer<ffi.Void> MapViewOfFileEx(
    ffi.Pointer<ffi.Void> hFileMappingObject,
    int dwDesiredAccess,
    int dwFileOffsetHigh,
    int dwFileOffsetLow,
    int dwNumberOfBytesToMap,
    ffi.Pointer<ffi.Void> lpBaseAddress,
  ) {
    return (_MapViewOfFileEx ??=
        _dylib.lookupFunction<_c_MapViewOfFileEx, _dart_MapViewOfFileEx>(
            'MapViewOfFileEx'))(
      hFileMappingObject,
      dwDesiredAccess,
      dwFileOffsetHigh,
      dwFileOffsetLow,
      dwNumberOfBytesToMap,
      lpBaseAddress,
    );
  }

  _dart_MapViewOfFileEx? _MapViewOfFileEx;

  int VirtualFreeEx(
    ffi.Pointer<ffi.Void> hProcess,
    ffi.Pointer<ffi.Void> lpAddress,
    int dwSize,
    int dwFreeType,
  ) {
    return (_VirtualFreeEx ??=
        _dylib.lookupFunction<_c_VirtualFreeEx, _dart_VirtualFreeEx>(
            'VirtualFreeEx'))(
      hProcess,
      lpAddress,
      dwSize,
      dwFreeType,
    );
  }

  _dart_VirtualFreeEx? _VirtualFreeEx;

  int FlushViewOfFile(
    ffi.Pointer<ffi.Void> lpBaseAddress,
    int dwNumberOfBytesToFlush,
  ) {
    return (_FlushViewOfFile ??=
        _dylib.lookupFunction<_c_FlushViewOfFile, _dart_FlushViewOfFile>(
            'FlushViewOfFile'))(
      lpBaseAddress,
      dwNumberOfBytesToFlush,
    );
  }

  _dart_FlushViewOfFile? _FlushViewOfFile;

  int UnmapViewOfFile(
    ffi.Pointer<ffi.Void> lpBaseAddress,
  ) {
    return (_UnmapViewOfFile ??=
        _dylib.lookupFunction<_c_UnmapViewOfFile, _dart_UnmapViewOfFile>(
            'UnmapViewOfFile'))(
      lpBaseAddress,
    );
  }

  _dart_UnmapViewOfFile? _UnmapViewOfFile;

  int GetLargePageMinimum() {
    return (_GetLargePageMinimum ??= _dylib.lookupFunction<
        _c_GetLargePageMinimum,
        _dart_GetLargePageMinimum>('GetLargePageMinimum'))();
  }

  _dart_GetLargePageMinimum? _GetLargePageMinimum;

  int GetProcessWorkingSetSizeEx(
    ffi.Pointer<ffi.Void> hProcess,
    ffi.Pointer<ffi.Uint64> lpMinimumWorkingSetSize,
    ffi.Pointer<ffi.Uint64> lpMaximumWorkingSetSize,
    ffi.Pointer<ffi.Uint64> Flags,
  ) {
    return (_GetProcessWorkingSetSizeEx ??= _dylib.lookupFunction<
        _c_GetProcessWorkingSetSizeEx,
        _dart_GetProcessWorkingSetSizeEx>('GetProcessWorkingSetSizeEx'))(
      hProcess,
      lpMinimumWorkingSetSize,
      lpMaximumWorkingSetSize,
      Flags,
    );
  }

  _dart_GetProcessWorkingSetSizeEx? _GetProcessWorkingSetSizeEx;

  int SetProcessWorkingSetSizeEx(
    ffi.Pointer<ffi.Void> hProcess,
    int dwMinimumWorkingSetSize,
    int dwMaximumWorkingSetSize,
    int Flags,
  ) {
    return (_SetProcessWorkingSetSizeEx ??= _dylib.lookupFunction<
        _c_SetProcessWorkingSetSizeEx,
        _dart_SetProcessWorkingSetSizeEx>('SetProcessWorkingSetSizeEx'))(
      hProcess,
      dwMinimumWorkingSetSize,
      dwMaximumWorkingSetSize,
      Flags,
    );
  }

  _dart_SetProcessWorkingSetSizeEx? _SetProcessWorkingSetSizeEx;

  int VirtualLock(
    ffi.Pointer<ffi.Void> lpAddress,
    int dwSize,
  ) {
    return (_VirtualLock ??= _dylib
        .lookupFunction<_c_VirtualLock, _dart_VirtualLock>('VirtualLock'))(
      lpAddress,
      dwSize,
    );
  }

  _dart_VirtualLock? _VirtualLock;

  int VirtualUnlock(
    ffi.Pointer<ffi.Void> lpAddress,
    int dwSize,
  ) {
    return (_VirtualUnlock ??=
        _dylib.lookupFunction<_c_VirtualUnlock, _dart_VirtualUnlock>(
            'VirtualUnlock'))(
      lpAddress,
      dwSize,
    );
  }

  _dart_VirtualUnlock? _VirtualUnlock;

  int GetWriteWatch(
    int dwFlags,
    ffi.Pointer<ffi.Void> lpBaseAddress,
    int dwRegionSize,
    ffi.Pointer<ffi.Pointer<ffi.Void>> lpAddresses,
    ffi.Pointer<ffi.Uint64> lpdwCount,
    ffi.Pointer<ffi.Uint64> lpdwGranularity,
  ) {
    return (_GetWriteWatch ??=
        _dylib.lookupFunction<_c_GetWriteWatch, _dart_GetWriteWatch>(
            'GetWriteWatch'))(
      dwFlags,
      lpBaseAddress,
      dwRegionSize,
      lpAddresses,
      lpdwCount,
      lpdwGranularity,
    );
  }

  _dart_GetWriteWatch? _GetWriteWatch;

  int ResetWriteWatch(
    ffi.Pointer<ffi.Void> lpBaseAddress,
    int dwRegionSize,
  ) {
    return (_ResetWriteWatch ??=
        _dylib.lookupFunction<_c_ResetWriteWatch, _dart_ResetWriteWatch>(
            'ResetWriteWatch'))(
      lpBaseAddress,
      dwRegionSize,
    );
  }

  _dart_ResetWriteWatch? _ResetWriteWatch;

  ffi.Pointer<ffi.Void> CreateMemoryResourceNotification(
    int NotificationType,
  ) {
    return (_CreateMemoryResourceNotification ??= _dylib.lookupFunction<
            _c_CreateMemoryResourceNotification,
            _dart_CreateMemoryResourceNotification>(
        'CreateMemoryResourceNotification'))(
      NotificationType,
    );
  }

  _dart_CreateMemoryResourceNotification? _CreateMemoryResourceNotification;

  int QueryMemoryResourceNotification(
    ffi.Pointer<ffi.Void> ResourceNotificationHandle,
    ffi.Pointer<ffi.Int32> ResourceState,
  ) {
    return (_QueryMemoryResourceNotification ??= _dylib.lookupFunction<
            _c_QueryMemoryResourceNotification,
            _dart_QueryMemoryResourceNotification>(
        'QueryMemoryResourceNotification'))(
      ResourceNotificationHandle,
      ResourceState,
    );
  }

  _dart_QueryMemoryResourceNotification? _QueryMemoryResourceNotification;

  int GetSystemFileCacheSize(
    ffi.Pointer<ffi.Uint64> lpMinimumFileCacheSize,
    ffi.Pointer<ffi.Uint64> lpMaximumFileCacheSize,
    ffi.Pointer<ffi.Uint64> lpFlags,
  ) {
    return (_GetSystemFileCacheSize ??= _dylib.lookupFunction<
        _c_GetSystemFileCacheSize,
        _dart_GetSystemFileCacheSize>('GetSystemFileCacheSize'))(
      lpMinimumFileCacheSize,
      lpMaximumFileCacheSize,
      lpFlags,
    );
  }

  _dart_GetSystemFileCacheSize? _GetSystemFileCacheSize;

  int SetSystemFileCacheSize(
    int MinimumFileCacheSize,
    int MaximumFileCacheSize,
    int Flags,
  ) {
    return (_SetSystemFileCacheSize ??= _dylib.lookupFunction<
        _c_SetSystemFileCacheSize,
        _dart_SetSystemFileCacheSize>('SetSystemFileCacheSize'))(
      MinimumFileCacheSize,
      MaximumFileCacheSize,
      Flags,
    );
  }

  _dart_SetSystemFileCacheSize? _SetSystemFileCacheSize;

  ffi.Pointer<ffi.Void> CreateFileMappingNumaW(
    ffi.Pointer<ffi.Void> hFile,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpFileMappingAttributes,
    int flProtect,
    int dwMaximumSizeHigh,
    int dwMaximumSizeLow,
    ffi.Pointer<ffi.Uint16> lpName,
    int nndPreferred,
  ) {
    return (_CreateFileMappingNumaW ??= _dylib.lookupFunction<
        _c_CreateFileMappingNumaW,
        _dart_CreateFileMappingNumaW>('CreateFileMappingNumaW'))(
      hFile,
      lpFileMappingAttributes,
      flProtect,
      dwMaximumSizeHigh,
      dwMaximumSizeLow,
      lpName,
      nndPreferred,
    );
  }

  _dart_CreateFileMappingNumaW? _CreateFileMappingNumaW;

  int PrefetchVirtualMemory(
    ffi.Pointer<ffi.Void> hProcess,
    int NumberOfEntries,
    ffi.Pointer<PWIN32_MEMORY_RANGE_ENTRY> VirtualAddresses,
    int Flags,
  ) {
    return (_PrefetchVirtualMemory ??= _dylib.lookupFunction<
        _c_PrefetchVirtualMemory,
        _dart_PrefetchVirtualMemory>('PrefetchVirtualMemory'))(
      hProcess,
      NumberOfEntries,
      VirtualAddresses,
      Flags,
    );
  }

  _dart_PrefetchVirtualMemory? _PrefetchVirtualMemory;

  ffi.Pointer<ffi.Void> CreateFileMappingFromApp(
    ffi.Pointer<ffi.Void> hFile,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> SecurityAttributes,
    int PageProtection,
    int MaximumSize,
    ffi.Pointer<ffi.Uint16> Name,
  ) {
    return (_CreateFileMappingFromApp ??= _dylib.lookupFunction<
        _c_CreateFileMappingFromApp,
        _dart_CreateFileMappingFromApp>('CreateFileMappingFromApp'))(
      hFile,
      SecurityAttributes,
      PageProtection,
      MaximumSize,
      Name,
    );
  }

  _dart_CreateFileMappingFromApp? _CreateFileMappingFromApp;

  ffi.Pointer<ffi.Void> MapViewOfFileFromApp(
    ffi.Pointer<ffi.Void> hFileMappingObject,
    int DesiredAccess,
    int FileOffset,
    int NumberOfBytesToMap,
  ) {
    return (_MapViewOfFileFromApp ??= _dylib.lookupFunction<
        _c_MapViewOfFileFromApp,
        _dart_MapViewOfFileFromApp>('MapViewOfFileFromApp'))(
      hFileMappingObject,
      DesiredAccess,
      FileOffset,
      NumberOfBytesToMap,
    );
  }

  _dart_MapViewOfFileFromApp? _MapViewOfFileFromApp;

  int UnmapViewOfFileEx(
    ffi.Pointer<ffi.Void> BaseAddress,
    int UnmapFlags,
  ) {
    return (_UnmapViewOfFileEx ??=
        _dylib.lookupFunction<_c_UnmapViewOfFileEx, _dart_UnmapViewOfFileEx>(
            'UnmapViewOfFileEx'))(
      BaseAddress,
      UnmapFlags,
    );
  }

  _dart_UnmapViewOfFileEx? _UnmapViewOfFileEx;

  int AllocateUserPhysicalPages(
    ffi.Pointer<ffi.Void> hProcess,
    ffi.Pointer<ffi.Uint64> NumberOfPages,
    ffi.Pointer<ffi.Uint64> PageArray,
  ) {
    return (_AllocateUserPhysicalPages ??= _dylib.lookupFunction<
        _c_AllocateUserPhysicalPages,
        _dart_AllocateUserPhysicalPages>('AllocateUserPhysicalPages'))(
      hProcess,
      NumberOfPages,
      PageArray,
    );
  }

  _dart_AllocateUserPhysicalPages? _AllocateUserPhysicalPages;

  int FreeUserPhysicalPages(
    ffi.Pointer<ffi.Void> hProcess,
    ffi.Pointer<ffi.Uint64> NumberOfPages,
    ffi.Pointer<ffi.Uint64> PageArray,
  ) {
    return (_FreeUserPhysicalPages ??= _dylib.lookupFunction<
        _c_FreeUserPhysicalPages,
        _dart_FreeUserPhysicalPages>('FreeUserPhysicalPages'))(
      hProcess,
      NumberOfPages,
      PageArray,
    );
  }

  _dart_FreeUserPhysicalPages? _FreeUserPhysicalPages;

  int MapUserPhysicalPages(
    ffi.Pointer<ffi.Void> VirtualAddress,
    int NumberOfPages,
    ffi.Pointer<ffi.Uint64> PageArray,
  ) {
    return (_MapUserPhysicalPages ??= _dylib.lookupFunction<
        _c_MapUserPhysicalPages,
        _dart_MapUserPhysicalPages>('MapUserPhysicalPages'))(
      VirtualAddress,
      NumberOfPages,
      PageArray,
    );
  }

  _dart_MapUserPhysicalPages? _MapUserPhysicalPages;

  int AllocateUserPhysicalPagesNuma(
    ffi.Pointer<ffi.Void> hProcess,
    ffi.Pointer<ffi.Uint64> NumberOfPages,
    ffi.Pointer<ffi.Uint64> PageArray,
    int nndPreferred,
  ) {
    return (_AllocateUserPhysicalPagesNuma ??= _dylib.lookupFunction<
        _c_AllocateUserPhysicalPagesNuma,
        _dart_AllocateUserPhysicalPagesNuma>('AllocateUserPhysicalPagesNuma'))(
      hProcess,
      NumberOfPages,
      PageArray,
      nndPreferred,
    );
  }

  _dart_AllocateUserPhysicalPagesNuma? _AllocateUserPhysicalPagesNuma;

  ffi.Pointer<ffi.Void> VirtualAllocExNuma(
    ffi.Pointer<ffi.Void> hProcess,
    ffi.Pointer<ffi.Void> lpAddress,
    int dwSize,
    int flAllocationType,
    int flProtect,
    int nndPreferred,
  ) {
    return (_VirtualAllocExNuma ??=
        _dylib.lookupFunction<_c_VirtualAllocExNuma, _dart_VirtualAllocExNuma>(
            'VirtualAllocExNuma'))(
      hProcess,
      lpAddress,
      dwSize,
      flAllocationType,
      flProtect,
      nndPreferred,
    );
  }

  _dart_VirtualAllocExNuma? _VirtualAllocExNuma;

  int GetMemoryErrorHandlingCapabilities(
    ffi.Pointer<ffi.Uint64> Capabilities,
  ) {
    return (_GetMemoryErrorHandlingCapabilities ??= _dylib.lookupFunction<
            _c_GetMemoryErrorHandlingCapabilities,
            _dart_GetMemoryErrorHandlingCapabilities>(
        'GetMemoryErrorHandlingCapabilities'))(
      Capabilities,
    );
  }

  _dart_GetMemoryErrorHandlingCapabilities? _GetMemoryErrorHandlingCapabilities;

  ffi.Pointer<ffi.Void> RegisterBadMemoryNotification(
    ffi.Pointer<ffi.NativeFunction<PBAD_MEMORY_CALLBACK_ROUTINE>> Callback,
  ) {
    return (_RegisterBadMemoryNotification ??= _dylib.lookupFunction<
        _c_RegisterBadMemoryNotification,
        _dart_RegisterBadMemoryNotification>('RegisterBadMemoryNotification'))(
      Callback,
    );
  }

  _dart_RegisterBadMemoryNotification? _RegisterBadMemoryNotification;

  int UnregisterBadMemoryNotification(
    ffi.Pointer<ffi.Void> RegistrationHandle,
  ) {
    return (_UnregisterBadMemoryNotification ??= _dylib.lookupFunction<
            _c_UnregisterBadMemoryNotification,
            _dart_UnregisterBadMemoryNotification>(
        'UnregisterBadMemoryNotification'))(
      RegistrationHandle,
    );
  }

  _dart_UnregisterBadMemoryNotification? _UnregisterBadMemoryNotification;

  int OfferVirtualMemory(
    ffi.Pointer<ffi.Void> VirtualAddress,
    int Size,
    int Priority,
  ) {
    return (_OfferVirtualMemory ??=
        _dylib.lookupFunction<_c_OfferVirtualMemory, _dart_OfferVirtualMemory>(
            'OfferVirtualMemory'))(
      VirtualAddress,
      Size,
      Priority,
    );
  }

  _dart_OfferVirtualMemory? _OfferVirtualMemory;

  int ReclaimVirtualMemory(
    ffi.Pointer<ffi.Void> VirtualAddress,
    int Size,
  ) {
    return (_ReclaimVirtualMemory ??= _dylib.lookupFunction<
        _c_ReclaimVirtualMemory,
        _dart_ReclaimVirtualMemory>('ReclaimVirtualMemory'))(
      VirtualAddress,
      Size,
    );
  }

  _dart_ReclaimVirtualMemory? _ReclaimVirtualMemory;

  int DiscardVirtualMemory(
    ffi.Pointer<ffi.Void> VirtualAddress,
    int Size,
  ) {
    return (_DiscardVirtualMemory ??= _dylib.lookupFunction<
        _c_DiscardVirtualMemory,
        _dart_DiscardVirtualMemory>('DiscardVirtualMemory'))(
      VirtualAddress,
      Size,
    );
  }

  _dart_DiscardVirtualMemory? _DiscardVirtualMemory;

  int SetProcessValidCallTargets(
    ffi.Pointer<ffi.Void> hProcess,
    ffi.Pointer<ffi.Void> VirtualAddress,
    int RegionSize,
    int NumberOfOffsets,
    ffi.Pointer<PCFG_CALL_TARGET_INFO> OffsetInformation,
  ) {
    return (_SetProcessValidCallTargets ??= _dylib.lookupFunction<
        _c_SetProcessValidCallTargets,
        _dart_SetProcessValidCallTargets>('SetProcessValidCallTargets'))(
      hProcess,
      VirtualAddress,
      RegionSize,
      NumberOfOffsets,
      OffsetInformation,
    );
  }

  _dart_SetProcessValidCallTargets? _SetProcessValidCallTargets;

  int SetProcessValidCallTargetsForMappedView(
    ffi.Pointer<ffi.Void> Process,
    ffi.Pointer<ffi.Void> VirtualAddress,
    int RegionSize,
    int NumberOfOffsets,
    ffi.Pointer<PCFG_CALL_TARGET_INFO> OffsetInformation,
    ffi.Pointer<ffi.Void> Section,
    int ExpectedFileOffset,
  ) {
    return (_SetProcessValidCallTargetsForMappedView ??= _dylib.lookupFunction<
            _c_SetProcessValidCallTargetsForMappedView,
            _dart_SetProcessValidCallTargetsForMappedView>(
        'SetProcessValidCallTargetsForMappedView'))(
      Process,
      VirtualAddress,
      RegionSize,
      NumberOfOffsets,
      OffsetInformation,
      Section,
      ExpectedFileOffset,
    );
  }

  _dart_SetProcessValidCallTargetsForMappedView?
      _SetProcessValidCallTargetsForMappedView;

  ffi.Pointer<ffi.Void> VirtualAllocFromApp(
    ffi.Pointer<ffi.Void> BaseAddress,
    int Size,
    int AllocationType,
    int Protection,
  ) {
    return (_VirtualAllocFromApp ??= _dylib.lookupFunction<
        _c_VirtualAllocFromApp,
        _dart_VirtualAllocFromApp>('VirtualAllocFromApp'))(
      BaseAddress,
      Size,
      AllocationType,
      Protection,
    );
  }

  _dart_VirtualAllocFromApp? _VirtualAllocFromApp;

  int VirtualProtectFromApp(
    ffi.Pointer<ffi.Void> Address,
    int Size,
    int NewProtection,
    ffi.Pointer<ffi.Uint64> OldProtection,
  ) {
    return (_VirtualProtectFromApp ??= _dylib.lookupFunction<
        _c_VirtualProtectFromApp,
        _dart_VirtualProtectFromApp>('VirtualProtectFromApp'))(
      Address,
      Size,
      NewProtection,
      OldProtection,
    );
  }

  _dart_VirtualProtectFromApp? _VirtualProtectFromApp;

  ffi.Pointer<ffi.Void> OpenFileMappingFromApp(
    int DesiredAccess,
    int InheritHandle,
    ffi.Pointer<ffi.Uint16> Name,
  ) {
    return (_OpenFileMappingFromApp ??= _dylib.lookupFunction<
        _c_OpenFileMappingFromApp,
        _dart_OpenFileMappingFromApp>('OpenFileMappingFromApp'))(
      DesiredAccess,
      InheritHandle,
      Name,
    );
  }

  _dart_OpenFileMappingFromApp? _OpenFileMappingFromApp;

  int QueryVirtualMemoryInformation(
    ffi.Pointer<ffi.Void> Process,
    ffi.Pointer<ffi.Void> VirtualAddress,
    int MemoryInformationClass,
    ffi.Pointer<ffi.Void> MemoryInformation,
    int MemoryInformationSize,
    ffi.Pointer<ffi.Uint64> ReturnSize,
  ) {
    return (_QueryVirtualMemoryInformation ??= _dylib.lookupFunction<
        _c_QueryVirtualMemoryInformation,
        _dart_QueryVirtualMemoryInformation>('QueryVirtualMemoryInformation'))(
      Process,
      VirtualAddress,
      MemoryInformationClass,
      MemoryInformation,
      MemoryInformationSize,
      ReturnSize,
    );
  }

  _dart_QueryVirtualMemoryInformation? _QueryVirtualMemoryInformation;

  ffi.Pointer<ffi.Void> MapViewOfFileNuma2(
    ffi.Pointer<ffi.Void> FileMappingHandle,
    ffi.Pointer<ffi.Void> ProcessHandle,
    int Offset,
    ffi.Pointer<ffi.Void> BaseAddress,
    int ViewSize,
    int AllocationType,
    int PageProtection,
    int PreferredNode,
  ) {
    return (_MapViewOfFileNuma2 ??=
        _dylib.lookupFunction<_c_MapViewOfFileNuma2, _dart_MapViewOfFileNuma2>(
            'MapViewOfFileNuma2'))(
      FileMappingHandle,
      ProcessHandle,
      Offset,
      BaseAddress,
      ViewSize,
      AllocationType,
      PageProtection,
      PreferredNode,
    );
  }

  _dart_MapViewOfFileNuma2? _MapViewOfFileNuma2;

  ffi.Pointer<ffi.Void> MapViewOfFile2(
    ffi.Pointer<ffi.Void> FileMappingHandle,
    ffi.Pointer<ffi.Void> ProcessHandle,
    int Offset,
    ffi.Pointer<ffi.Void> BaseAddress,
    int ViewSize,
    int AllocationType,
    int PageProtection,
  ) {
    return (_MapViewOfFile2 ??=
        _dylib.lookupFunction<_c_MapViewOfFile2, _dart_MapViewOfFile2>(
            'MapViewOfFile2'))(
      FileMappingHandle,
      ProcessHandle,
      Offset,
      BaseAddress,
      ViewSize,
      AllocationType,
      PageProtection,
    );
  }

  _dart_MapViewOfFile2? _MapViewOfFile2;

  int UnmapViewOfFile2(
    ffi.Pointer<ffi.Void> Process,
    ffi.Pointer<ffi.Void> BaseAddress,
    int UnmapFlags,
  ) {
    return (_UnmapViewOfFile2 ??=
        _dylib.lookupFunction<_c_UnmapViewOfFile2, _dart_UnmapViewOfFile2>(
            'UnmapViewOfFile2'))(
      Process,
      BaseAddress,
      UnmapFlags,
    );
  }

  _dart_UnmapViewOfFile2? _UnmapViewOfFile2;

  int VirtualUnlockEx(
    ffi.Pointer<ffi.Void> Process,
    ffi.Pointer<ffi.Void> Address,
    int Size,
  ) {
    return (_VirtualUnlockEx ??=
        _dylib.lookupFunction<_c_VirtualUnlockEx, _dart_VirtualUnlockEx>(
            'VirtualUnlockEx'))(
      Process,
      Address,
      Size,
    );
  }

  _dart_VirtualUnlockEx? _VirtualUnlockEx;

  ffi.Pointer<ffi.Void> VirtualAlloc2(
    ffi.Pointer<ffi.Void> Process,
    ffi.Pointer<ffi.Void> BaseAddress,
    int Size,
    int AllocationType,
    int PageProtection,
    ffi.Pointer<PMEM_EXTENDED_PARAMETER> ExtendedParameters,
    int ParameterCount,
  ) {
    return (_VirtualAlloc2 ??=
        _dylib.lookupFunction<_c_VirtualAlloc2, _dart_VirtualAlloc2>(
            'VirtualAlloc2'))(
      Process,
      BaseAddress,
      Size,
      AllocationType,
      PageProtection,
      ExtendedParameters,
      ParameterCount,
    );
  }

  _dart_VirtualAlloc2? _VirtualAlloc2;

  ffi.Pointer<ffi.Void> MapViewOfFile3(
    ffi.Pointer<ffi.Void> FileMapping,
    ffi.Pointer<ffi.Void> Process,
    ffi.Pointer<ffi.Void> BaseAddress,
    int Offset,
    int ViewSize,
    int AllocationType,
    int PageProtection,
    ffi.Pointer<PMEM_EXTENDED_PARAMETER> ExtendedParameters,
    int ParameterCount,
  ) {
    return (_MapViewOfFile3 ??=
        _dylib.lookupFunction<_c_MapViewOfFile3, _dart_MapViewOfFile3>(
            'MapViewOfFile3'))(
      FileMapping,
      Process,
      BaseAddress,
      Offset,
      ViewSize,
      AllocationType,
      PageProtection,
      ExtendedParameters,
      ParameterCount,
    );
  }

  _dart_MapViewOfFile3? _MapViewOfFile3;

  ffi.Pointer<ffi.Void> VirtualAlloc2FromApp(
    ffi.Pointer<ffi.Void> Process,
    ffi.Pointer<ffi.Void> BaseAddress,
    int Size,
    int AllocationType,
    int PageProtection,
    ffi.Pointer<PMEM_EXTENDED_PARAMETER> ExtendedParameters,
    int ParameterCount,
  ) {
    return (_VirtualAlloc2FromApp ??= _dylib.lookupFunction<
        _c_VirtualAlloc2FromApp,
        _dart_VirtualAlloc2FromApp>('VirtualAlloc2FromApp'))(
      Process,
      BaseAddress,
      Size,
      AllocationType,
      PageProtection,
      ExtendedParameters,
      ParameterCount,
    );
  }

  _dart_VirtualAlloc2FromApp? _VirtualAlloc2FromApp;

  ffi.Pointer<ffi.Void> MapViewOfFile3FromApp(
    ffi.Pointer<ffi.Void> FileMapping,
    ffi.Pointer<ffi.Void> Process,
    ffi.Pointer<ffi.Void> BaseAddress,
    int Offset,
    int ViewSize,
    int AllocationType,
    int PageProtection,
    ffi.Pointer<PMEM_EXTENDED_PARAMETER> ExtendedParameters,
    int ParameterCount,
  ) {
    return (_MapViewOfFile3FromApp ??= _dylib.lookupFunction<
        _c_MapViewOfFile3FromApp,
        _dart_MapViewOfFile3FromApp>('MapViewOfFile3FromApp'))(
      FileMapping,
      Process,
      BaseAddress,
      Offset,
      ViewSize,
      AllocationType,
      PageProtection,
      ExtendedParameters,
      ParameterCount,
    );
  }

  _dart_MapViewOfFile3FromApp? _MapViewOfFile3FromApp;

  ffi.Pointer<ffi.Void> CreateFileMapping2(
    ffi.Pointer<ffi.Void> File,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> SecurityAttributes,
    int DesiredAccess,
    int PageProtection,
    int AllocationAttributes,
    int MaximumSize,
    ffi.Pointer<ffi.Uint16> Name,
    ffi.Pointer<PMEM_EXTENDED_PARAMETER> ExtendedParameters,
    int ParameterCount,
  ) {
    return (_CreateFileMapping2 ??=
        _dylib.lookupFunction<_c_CreateFileMapping2, _dart_CreateFileMapping2>(
            'CreateFileMapping2'))(
      File,
      SecurityAttributes,
      DesiredAccess,
      PageProtection,
      AllocationAttributes,
      MaximumSize,
      Name,
      ExtendedParameters,
      ParameterCount,
    );
  }

  _dart_CreateFileMapping2? _CreateFileMapping2;

  int IsEnclaveTypeSupported(
    int flEnclaveType,
  ) {
    return (_IsEnclaveTypeSupported ??= _dylib.lookupFunction<
        _c_IsEnclaveTypeSupported,
        _dart_IsEnclaveTypeSupported>('IsEnclaveTypeSupported'))(
      flEnclaveType,
    );
  }

  _dart_IsEnclaveTypeSupported? _IsEnclaveTypeSupported;

  ffi.Pointer<ffi.Void> CreateEnclave(
    ffi.Pointer<ffi.Void> hProcess,
    ffi.Pointer<ffi.Void> lpAddress,
    int dwSize,
    int dwInitialCommitment,
    int flEnclaveType,
    ffi.Pointer<ffi.Void> lpEnclaveInformation,
    int dwInfoLength,
    ffi.Pointer<ffi.Uint64> lpEnclaveError,
  ) {
    return (_CreateEnclave ??=
        _dylib.lookupFunction<_c_CreateEnclave, _dart_CreateEnclave>(
            'CreateEnclave'))(
      hProcess,
      lpAddress,
      dwSize,
      dwInitialCommitment,
      flEnclaveType,
      lpEnclaveInformation,
      dwInfoLength,
      lpEnclaveError,
    );
  }

  _dart_CreateEnclave? _CreateEnclave;

  int LoadEnclaveData(
    ffi.Pointer<ffi.Void> hProcess,
    ffi.Pointer<ffi.Void> lpAddress,
    ffi.Pointer<ffi.Void> lpBuffer,
    int nSize,
    int flProtect,
    ffi.Pointer<ffi.Void> lpPageInformation,
    int dwInfoLength,
    ffi.Pointer<ffi.Uint64> lpNumberOfBytesWritten,
    ffi.Pointer<ffi.Uint64> lpEnclaveError,
  ) {
    return (_LoadEnclaveData ??=
        _dylib.lookupFunction<_c_LoadEnclaveData, _dart_LoadEnclaveData>(
            'LoadEnclaveData'))(
      hProcess,
      lpAddress,
      lpBuffer,
      nSize,
      flProtect,
      lpPageInformation,
      dwInfoLength,
      lpNumberOfBytesWritten,
      lpEnclaveError,
    );
  }

  _dart_LoadEnclaveData? _LoadEnclaveData;

  int InitializeEnclave(
    ffi.Pointer<ffi.Void> hProcess,
    ffi.Pointer<ffi.Void> lpAddress,
    ffi.Pointer<ffi.Void> lpEnclaveInformation,
    int dwInfoLength,
    ffi.Pointer<ffi.Uint64> lpEnclaveError,
  ) {
    return (_InitializeEnclave ??=
        _dylib.lookupFunction<_c_InitializeEnclave, _dart_InitializeEnclave>(
            'InitializeEnclave'))(
      hProcess,
      lpAddress,
      lpEnclaveInformation,
      dwInfoLength,
      lpEnclaveError,
    );
  }

  _dart_InitializeEnclave? _InitializeEnclave;

  int LoadEnclaveImageA(
    ffi.Pointer<ffi.Void> lpEnclaveAddress,
    ffi.Pointer<ffi.Int8> lpImageName,
  ) {
    return (_LoadEnclaveImageA ??=
        _dylib.lookupFunction<_c_LoadEnclaveImageA, _dart_LoadEnclaveImageA>(
            'LoadEnclaveImageA'))(
      lpEnclaveAddress,
      lpImageName,
    );
  }

  _dart_LoadEnclaveImageA? _LoadEnclaveImageA;

  int LoadEnclaveImageW(
    ffi.Pointer<ffi.Void> lpEnclaveAddress,
    ffi.Pointer<ffi.Uint16> lpImageName,
  ) {
    return (_LoadEnclaveImageW ??=
        _dylib.lookupFunction<_c_LoadEnclaveImageW, _dart_LoadEnclaveImageW>(
            'LoadEnclaveImageW'))(
      lpEnclaveAddress,
      lpImageName,
    );
  }

  _dart_LoadEnclaveImageW? _LoadEnclaveImageW;

  int CallEnclave(
    ffi.Pointer<ffi.NativeFunction<LPENCLAVE_ROUTINE>> lpRoutine,
    ffi.Pointer<ffi.Void> lpParameter,
    int fWaitForThread,
    ffi.Pointer<ffi.Pointer<ffi.Void>> lpReturnValue,
  ) {
    return (_CallEnclave ??= _dylib
        .lookupFunction<_c_CallEnclave, _dart_CallEnclave>('CallEnclave'))(
      lpRoutine,
      lpParameter,
      fWaitForThread,
      lpReturnValue,
    );
  }

  _dart_CallEnclave? _CallEnclave;

  int TerminateEnclave(
    ffi.Pointer<ffi.Void> lpAddress,
    int fWait,
  ) {
    return (_TerminateEnclave ??=
        _dylib.lookupFunction<_c_TerminateEnclave, _dart_TerminateEnclave>(
            'TerminateEnclave'))(
      lpAddress,
      fWait,
    );
  }

  _dart_TerminateEnclave? _TerminateEnclave;

  int DeleteEnclave(
    ffi.Pointer<ffi.Void> lpAddress,
  ) {
    return (_DeleteEnclave ??=
        _dylib.lookupFunction<_c_DeleteEnclave, _dart_DeleteEnclave>(
            'DeleteEnclave'))(
      lpAddress,
    );
  }

  _dart_DeleteEnclave? _DeleteEnclave;

  int QueueUserWorkItem(
    ffi.Pointer<ffi.NativeFunction<LPTHREAD_START_ROUTINE>> Function_1,
    ffi.Pointer<ffi.Void> Context,
    int Flags,
  ) {
    return (_QueueUserWorkItem ??=
        _dylib.lookupFunction<_c_QueueUserWorkItem, _dart_QueueUserWorkItem>(
            'QueueUserWorkItem'))(
      Function_1,
      Context,
      Flags,
    );
  }

  _dart_QueueUserWorkItem? _QueueUserWorkItem;

  int UnregisterWaitEx(
    ffi.Pointer<ffi.Void> WaitHandle,
    ffi.Pointer<ffi.Void> CompletionEvent,
  ) {
    return (_UnregisterWaitEx ??=
        _dylib.lookupFunction<_c_UnregisterWaitEx, _dart_UnregisterWaitEx>(
            'UnregisterWaitEx'))(
      WaitHandle,
      CompletionEvent,
    );
  }

  _dart_UnregisterWaitEx? _UnregisterWaitEx;

  ffi.Pointer<ffi.Void> CreateTimerQueue() {
    return (_CreateTimerQueue ??=
        _dylib.lookupFunction<_c_CreateTimerQueue, _dart_CreateTimerQueue>(
            'CreateTimerQueue'))();
  }

  _dart_CreateTimerQueue? _CreateTimerQueue;

  int CreateTimerQueueTimer(
    ffi.Pointer<ffi.Pointer<ffi.Void>> phNewTimer,
    ffi.Pointer<ffi.Void> TimerQueue,
    ffi.Pointer<ffi.NativeFunction<WAITORTIMERCALLBACK>> Callback,
    ffi.Pointer<ffi.Void> Parameter,
    int DueTime,
    int Period,
    int Flags,
  ) {
    return (_CreateTimerQueueTimer ??= _dylib.lookupFunction<
        _c_CreateTimerQueueTimer,
        _dart_CreateTimerQueueTimer>('CreateTimerQueueTimer'))(
      phNewTimer,
      TimerQueue,
      Callback,
      Parameter,
      DueTime,
      Period,
      Flags,
    );
  }

  _dart_CreateTimerQueueTimer? _CreateTimerQueueTimer;

  int ChangeTimerQueueTimer(
    ffi.Pointer<ffi.Void> TimerQueue,
    ffi.Pointer<ffi.Void> Timer,
    int DueTime,
    int Period,
  ) {
    return (_ChangeTimerQueueTimer ??= _dylib.lookupFunction<
        _c_ChangeTimerQueueTimer,
        _dart_ChangeTimerQueueTimer>('ChangeTimerQueueTimer'))(
      TimerQueue,
      Timer,
      DueTime,
      Period,
    );
  }

  _dart_ChangeTimerQueueTimer? _ChangeTimerQueueTimer;

  int DeleteTimerQueueTimer(
    ffi.Pointer<ffi.Void> TimerQueue,
    ffi.Pointer<ffi.Void> Timer,
    ffi.Pointer<ffi.Void> CompletionEvent,
  ) {
    return (_DeleteTimerQueueTimer ??= _dylib.lookupFunction<
        _c_DeleteTimerQueueTimer,
        _dart_DeleteTimerQueueTimer>('DeleteTimerQueueTimer'))(
      TimerQueue,
      Timer,
      CompletionEvent,
    );
  }

  _dart_DeleteTimerQueueTimer? _DeleteTimerQueueTimer;

  int DeleteTimerQueueEx(
    ffi.Pointer<ffi.Void> TimerQueue,
    ffi.Pointer<ffi.Void> CompletionEvent,
  ) {
    return (_DeleteTimerQueueEx ??=
        _dylib.lookupFunction<_c_DeleteTimerQueueEx, _dart_DeleteTimerQueueEx>(
            'DeleteTimerQueueEx'))(
      TimerQueue,
      CompletionEvent,
    );
  }

  _dart_DeleteTimerQueueEx? _DeleteTimerQueueEx;

  ffi.Pointer<_TP_POOL> CreateThreadpool(
    ffi.Pointer<ffi.Void> reserved,
  ) {
    return (_CreateThreadpool ??=
        _dylib.lookupFunction<_c_CreateThreadpool, _dart_CreateThreadpool>(
            'CreateThreadpool'))(
      reserved,
    );
  }

  _dart_CreateThreadpool? _CreateThreadpool;

  void SetThreadpoolThreadMaximum(
    ffi.Pointer<_TP_POOL> ptpp,
    int cthrdMost,
  ) {
    return (_SetThreadpoolThreadMaximum ??= _dylib.lookupFunction<
        _c_SetThreadpoolThreadMaximum,
        _dart_SetThreadpoolThreadMaximum>('SetThreadpoolThreadMaximum'))(
      ptpp,
      cthrdMost,
    );
  }

  _dart_SetThreadpoolThreadMaximum? _SetThreadpoolThreadMaximum;

  int SetThreadpoolThreadMinimum(
    ffi.Pointer<_TP_POOL> ptpp,
    int cthrdMic,
  ) {
    return (_SetThreadpoolThreadMinimum ??= _dylib.lookupFunction<
        _c_SetThreadpoolThreadMinimum,
        _dart_SetThreadpoolThreadMinimum>('SetThreadpoolThreadMinimum'))(
      ptpp,
      cthrdMic,
    );
  }

  _dart_SetThreadpoolThreadMinimum? _SetThreadpoolThreadMinimum;

  int SetThreadpoolStackInformation(
    ffi.Pointer<_TP_POOL> ptpp,
    ffi.Pointer<PTP_POOL_STACK_INFORMATION> ptpsi,
  ) {
    return (_SetThreadpoolStackInformation ??= _dylib.lookupFunction<
        _c_SetThreadpoolStackInformation,
        _dart_SetThreadpoolStackInformation>('SetThreadpoolStackInformation'))(
      ptpp,
      ptpsi,
    );
  }

  _dart_SetThreadpoolStackInformation? _SetThreadpoolStackInformation;

  int QueryThreadpoolStackInformation(
    ffi.Pointer<_TP_POOL> ptpp,
    ffi.Pointer<PTP_POOL_STACK_INFORMATION> ptpsi,
  ) {
    return (_QueryThreadpoolStackInformation ??= _dylib.lookupFunction<
            _c_QueryThreadpoolStackInformation,
            _dart_QueryThreadpoolStackInformation>(
        'QueryThreadpoolStackInformation'))(
      ptpp,
      ptpsi,
    );
  }

  _dart_QueryThreadpoolStackInformation? _QueryThreadpoolStackInformation;

  void CloseThreadpool(
    ffi.Pointer<_TP_POOL> ptpp,
  ) {
    return (_CloseThreadpool ??=
        _dylib.lookupFunction<_c_CloseThreadpool, _dart_CloseThreadpool>(
            'CloseThreadpool'))(
      ptpp,
    );
  }

  _dart_CloseThreadpool? _CloseThreadpool;

  ffi.Pointer<_TP_CLEANUP_GROUP> CreateThreadpoolCleanupGroup() {
    return (_CreateThreadpoolCleanupGroup ??= _dylib.lookupFunction<
        _c_CreateThreadpoolCleanupGroup,
        _dart_CreateThreadpoolCleanupGroup>('CreateThreadpoolCleanupGroup'))();
  }

  _dart_CreateThreadpoolCleanupGroup? _CreateThreadpoolCleanupGroup;

  void CloseThreadpoolCleanupGroupMembers(
    ffi.Pointer<_TP_CLEANUP_GROUP> ptpcg,
    int fCancelPendingCallbacks,
    ffi.Pointer<ffi.Void> pvCleanupContext,
  ) {
    return (_CloseThreadpoolCleanupGroupMembers ??= _dylib.lookupFunction<
            _c_CloseThreadpoolCleanupGroupMembers,
            _dart_CloseThreadpoolCleanupGroupMembers>(
        'CloseThreadpoolCleanupGroupMembers'))(
      ptpcg,
      fCancelPendingCallbacks,
      pvCleanupContext,
    );
  }

  _dart_CloseThreadpoolCleanupGroupMembers? _CloseThreadpoolCleanupGroupMembers;

  void CloseThreadpoolCleanupGroup(
    ffi.Pointer<_TP_CLEANUP_GROUP> ptpcg,
  ) {
    return (_CloseThreadpoolCleanupGroup ??= _dylib.lookupFunction<
        _c_CloseThreadpoolCleanupGroup,
        _dart_CloseThreadpoolCleanupGroup>('CloseThreadpoolCleanupGroup'))(
      ptpcg,
    );
  }

  _dart_CloseThreadpoolCleanupGroup? _CloseThreadpoolCleanupGroup;

  void SetEventWhenCallbackReturns(
    ffi.Pointer<_TP_CALLBACK_INSTANCE> pci,
    ffi.Pointer<ffi.Void> evt,
  ) {
    return (_SetEventWhenCallbackReturns ??= _dylib.lookupFunction<
        _c_SetEventWhenCallbackReturns,
        _dart_SetEventWhenCallbackReturns>('SetEventWhenCallbackReturns'))(
      pci,
      evt,
    );
  }

  _dart_SetEventWhenCallbackReturns? _SetEventWhenCallbackReturns;

  void ReleaseSemaphoreWhenCallbackReturns(
    ffi.Pointer<_TP_CALLBACK_INSTANCE> pci,
    ffi.Pointer<ffi.Void> sem,
    int crel,
  ) {
    return (_ReleaseSemaphoreWhenCallbackReturns ??= _dylib.lookupFunction<
            _c_ReleaseSemaphoreWhenCallbackReturns,
            _dart_ReleaseSemaphoreWhenCallbackReturns>(
        'ReleaseSemaphoreWhenCallbackReturns'))(
      pci,
      sem,
      crel,
    );
  }

  _dart_ReleaseSemaphoreWhenCallbackReturns?
      _ReleaseSemaphoreWhenCallbackReturns;

  void ReleaseMutexWhenCallbackReturns(
    ffi.Pointer<_TP_CALLBACK_INSTANCE> pci,
    ffi.Pointer<ffi.Void> mut,
  ) {
    return (_ReleaseMutexWhenCallbackReturns ??= _dylib.lookupFunction<
            _c_ReleaseMutexWhenCallbackReturns,
            _dart_ReleaseMutexWhenCallbackReturns>(
        'ReleaseMutexWhenCallbackReturns'))(
      pci,
      mut,
    );
  }

  _dart_ReleaseMutexWhenCallbackReturns? _ReleaseMutexWhenCallbackReturns;

  void LeaveCriticalSectionWhenCallbackReturns(
    ffi.Pointer<_TP_CALLBACK_INSTANCE> pci,
    ffi.Pointer<PRTL_CRITICAL_SECTION> pcs,
  ) {
    return (_LeaveCriticalSectionWhenCallbackReturns ??= _dylib.lookupFunction<
            _c_LeaveCriticalSectionWhenCallbackReturns,
            _dart_LeaveCriticalSectionWhenCallbackReturns>(
        'LeaveCriticalSectionWhenCallbackReturns'))(
      pci,
      pcs,
    );
  }

  _dart_LeaveCriticalSectionWhenCallbackReturns?
      _LeaveCriticalSectionWhenCallbackReturns;

  void FreeLibraryWhenCallbackReturns(
    ffi.Pointer<_TP_CALLBACK_INSTANCE> pci,
    ffi.Pointer<HINSTANCE__> mod,
  ) {
    return (_FreeLibraryWhenCallbackReturns ??= _dylib.lookupFunction<
            _c_FreeLibraryWhenCallbackReturns,
            _dart_FreeLibraryWhenCallbackReturns>(
        'FreeLibraryWhenCallbackReturns'))(
      pci,
      mod,
    );
  }

  _dart_FreeLibraryWhenCallbackReturns? _FreeLibraryWhenCallbackReturns;

  int CallbackMayRunLong(
    ffi.Pointer<_TP_CALLBACK_INSTANCE> pci,
  ) {
    return (_CallbackMayRunLong ??=
        _dylib.lookupFunction<_c_CallbackMayRunLong, _dart_CallbackMayRunLong>(
            'CallbackMayRunLong'))(
      pci,
    );
  }

  _dart_CallbackMayRunLong? _CallbackMayRunLong;

  void DisassociateCurrentThreadFromCallback(
    ffi.Pointer<_TP_CALLBACK_INSTANCE> pci,
  ) {
    return (_DisassociateCurrentThreadFromCallback ??= _dylib.lookupFunction<
            _c_DisassociateCurrentThreadFromCallback,
            _dart_DisassociateCurrentThreadFromCallback>(
        'DisassociateCurrentThreadFromCallback'))(
      pci,
    );
  }

  _dart_DisassociateCurrentThreadFromCallback?
      _DisassociateCurrentThreadFromCallback;

  int TrySubmitThreadpoolCallback(
    ffi.Pointer<ffi.NativeFunction<PTP_SIMPLE_CALLBACK>> pfns,
    ffi.Pointer<ffi.Void> pv,
    ffi.Pointer<TP_CALLBACK_ENVIRON_V3> pcbe,
  ) {
    return (_TrySubmitThreadpoolCallback ??= _dylib.lookupFunction<
        _c_TrySubmitThreadpoolCallback,
        _dart_TrySubmitThreadpoolCallback>('TrySubmitThreadpoolCallback'))(
      pfns,
      pv,
      pcbe,
    );
  }

  _dart_TrySubmitThreadpoolCallback? _TrySubmitThreadpoolCallback;

  ffi.Pointer<_TP_WORK> CreateThreadpoolWork(
    ffi.Pointer<ffi.NativeFunction<PTP_WORK_CALLBACK>> pfnwk,
    ffi.Pointer<ffi.Void> pv,
    ffi.Pointer<TP_CALLBACK_ENVIRON_V3> pcbe,
  ) {
    return (_CreateThreadpoolWork ??= _dylib.lookupFunction<
        _c_CreateThreadpoolWork,
        _dart_CreateThreadpoolWork>('CreateThreadpoolWork'))(
      pfnwk,
      pv,
      pcbe,
    );
  }

  _dart_CreateThreadpoolWork? _CreateThreadpoolWork;

  void SubmitThreadpoolWork(
    ffi.Pointer<_TP_WORK> pwk,
  ) {
    return (_SubmitThreadpoolWork ??= _dylib.lookupFunction<
        _c_SubmitThreadpoolWork,
        _dart_SubmitThreadpoolWork>('SubmitThreadpoolWork'))(
      pwk,
    );
  }

  _dart_SubmitThreadpoolWork? _SubmitThreadpoolWork;

  void WaitForThreadpoolWorkCallbacks(
    ffi.Pointer<_TP_WORK> pwk,
    int fCancelPendingCallbacks,
  ) {
    return (_WaitForThreadpoolWorkCallbacks ??= _dylib.lookupFunction<
            _c_WaitForThreadpoolWorkCallbacks,
            _dart_WaitForThreadpoolWorkCallbacks>(
        'WaitForThreadpoolWorkCallbacks'))(
      pwk,
      fCancelPendingCallbacks,
    );
  }

  _dart_WaitForThreadpoolWorkCallbacks? _WaitForThreadpoolWorkCallbacks;

  void CloseThreadpoolWork(
    ffi.Pointer<_TP_WORK> pwk,
  ) {
    return (_CloseThreadpoolWork ??= _dylib.lookupFunction<
        _c_CloseThreadpoolWork,
        _dart_CloseThreadpoolWork>('CloseThreadpoolWork'))(
      pwk,
    );
  }

  _dart_CloseThreadpoolWork? _CloseThreadpoolWork;

  ffi.Pointer<_TP_TIMER> CreateThreadpoolTimer(
    ffi.Pointer<ffi.NativeFunction<PTP_TIMER_CALLBACK>> pfnti,
    ffi.Pointer<ffi.Void> pv,
    ffi.Pointer<TP_CALLBACK_ENVIRON_V3> pcbe,
  ) {
    return (_CreateThreadpoolTimer ??= _dylib.lookupFunction<
        _c_CreateThreadpoolTimer,
        _dart_CreateThreadpoolTimer>('CreateThreadpoolTimer'))(
      pfnti,
      pv,
      pcbe,
    );
  }

  _dart_CreateThreadpoolTimer? _CreateThreadpoolTimer;

  void SetThreadpoolTimer(
    ffi.Pointer<_TP_TIMER> pti,
    ffi.Pointer<LPFILETIME> pftDueTime,
    int msPeriod,
    int msWindowLength,
  ) {
    return (_SetThreadpoolTimer ??=
        _dylib.lookupFunction<_c_SetThreadpoolTimer, _dart_SetThreadpoolTimer>(
            'SetThreadpoolTimer'))(
      pti,
      pftDueTime,
      msPeriod,
      msWindowLength,
    );
  }

  _dart_SetThreadpoolTimer? _SetThreadpoolTimer;

  int IsThreadpoolTimerSet(
    ffi.Pointer<_TP_TIMER> pti,
  ) {
    return (_IsThreadpoolTimerSet ??= _dylib.lookupFunction<
        _c_IsThreadpoolTimerSet,
        _dart_IsThreadpoolTimerSet>('IsThreadpoolTimerSet'))(
      pti,
    );
  }

  _dart_IsThreadpoolTimerSet? _IsThreadpoolTimerSet;

  void WaitForThreadpoolTimerCallbacks(
    ffi.Pointer<_TP_TIMER> pti,
    int fCancelPendingCallbacks,
  ) {
    return (_WaitForThreadpoolTimerCallbacks ??= _dylib.lookupFunction<
            _c_WaitForThreadpoolTimerCallbacks,
            _dart_WaitForThreadpoolTimerCallbacks>(
        'WaitForThreadpoolTimerCallbacks'))(
      pti,
      fCancelPendingCallbacks,
    );
  }

  _dart_WaitForThreadpoolTimerCallbacks? _WaitForThreadpoolTimerCallbacks;

  void CloseThreadpoolTimer(
    ffi.Pointer<_TP_TIMER> pti,
  ) {
    return (_CloseThreadpoolTimer ??= _dylib.lookupFunction<
        _c_CloseThreadpoolTimer,
        _dart_CloseThreadpoolTimer>('CloseThreadpoolTimer'))(
      pti,
    );
  }

  _dart_CloseThreadpoolTimer? _CloseThreadpoolTimer;

  ffi.Pointer<_TP_WAIT> CreateThreadpoolWait(
    ffi.Pointer<ffi.NativeFunction<PTP_WAIT_CALLBACK>> pfnwa,
    ffi.Pointer<ffi.Void> pv,
    ffi.Pointer<TP_CALLBACK_ENVIRON_V3> pcbe,
  ) {
    return (_CreateThreadpoolWait ??= _dylib.lookupFunction<
        _c_CreateThreadpoolWait,
        _dart_CreateThreadpoolWait>('CreateThreadpoolWait'))(
      pfnwa,
      pv,
      pcbe,
    );
  }

  _dart_CreateThreadpoolWait? _CreateThreadpoolWait;

  void SetThreadpoolWait(
    ffi.Pointer<_TP_WAIT> pwa,
    ffi.Pointer<ffi.Void> h,
    ffi.Pointer<LPFILETIME> pftTimeout,
  ) {
    return (_SetThreadpoolWait ??=
        _dylib.lookupFunction<_c_SetThreadpoolWait, _dart_SetThreadpoolWait>(
            'SetThreadpoolWait'))(
      pwa,
      h,
      pftTimeout,
    );
  }

  _dart_SetThreadpoolWait? _SetThreadpoolWait;

  void WaitForThreadpoolWaitCallbacks(
    ffi.Pointer<_TP_WAIT> pwa,
    int fCancelPendingCallbacks,
  ) {
    return (_WaitForThreadpoolWaitCallbacks ??= _dylib.lookupFunction<
            _c_WaitForThreadpoolWaitCallbacks,
            _dart_WaitForThreadpoolWaitCallbacks>(
        'WaitForThreadpoolWaitCallbacks'))(
      pwa,
      fCancelPendingCallbacks,
    );
  }

  _dart_WaitForThreadpoolWaitCallbacks? _WaitForThreadpoolWaitCallbacks;

  void CloseThreadpoolWait(
    ffi.Pointer<_TP_WAIT> pwa,
  ) {
    return (_CloseThreadpoolWait ??= _dylib.lookupFunction<
        _c_CloseThreadpoolWait,
        _dart_CloseThreadpoolWait>('CloseThreadpoolWait'))(
      pwa,
    );
  }

  _dart_CloseThreadpoolWait? _CloseThreadpoolWait;

  ffi.Pointer<_TP_IO> CreateThreadpoolIo(
    ffi.Pointer<ffi.Void> fl,
    ffi.Pointer<ffi.NativeFunction<PTP_WIN32_IO_CALLBACK>> pfnio,
    ffi.Pointer<ffi.Void> pv,
    ffi.Pointer<TP_CALLBACK_ENVIRON_V3> pcbe,
  ) {
    return (_CreateThreadpoolIo ??=
        _dylib.lookupFunction<_c_CreateThreadpoolIo, _dart_CreateThreadpoolIo>(
            'CreateThreadpoolIo'))(
      fl,
      pfnio,
      pv,
      pcbe,
    );
  }

  _dart_CreateThreadpoolIo? _CreateThreadpoolIo;

  void StartThreadpoolIo(
    ffi.Pointer<_TP_IO> pio,
  ) {
    return (_StartThreadpoolIo ??=
        _dylib.lookupFunction<_c_StartThreadpoolIo, _dart_StartThreadpoolIo>(
            'StartThreadpoolIo'))(
      pio,
    );
  }

  _dart_StartThreadpoolIo? _StartThreadpoolIo;

  void CancelThreadpoolIo(
    ffi.Pointer<_TP_IO> pio,
  ) {
    return (_CancelThreadpoolIo ??=
        _dylib.lookupFunction<_c_CancelThreadpoolIo, _dart_CancelThreadpoolIo>(
            'CancelThreadpoolIo'))(
      pio,
    );
  }

  _dart_CancelThreadpoolIo? _CancelThreadpoolIo;

  void WaitForThreadpoolIoCallbacks(
    ffi.Pointer<_TP_IO> pio,
    int fCancelPendingCallbacks,
  ) {
    return (_WaitForThreadpoolIoCallbacks ??= _dylib.lookupFunction<
        _c_WaitForThreadpoolIoCallbacks,
        _dart_WaitForThreadpoolIoCallbacks>('WaitForThreadpoolIoCallbacks'))(
      pio,
      fCancelPendingCallbacks,
    );
  }

  _dart_WaitForThreadpoolIoCallbacks? _WaitForThreadpoolIoCallbacks;

  void CloseThreadpoolIo(
    ffi.Pointer<_TP_IO> pio,
  ) {
    return (_CloseThreadpoolIo ??=
        _dylib.lookupFunction<_c_CloseThreadpoolIo, _dart_CloseThreadpoolIo>(
            'CloseThreadpoolIo'))(
      pio,
    );
  }

  _dart_CloseThreadpoolIo? _CloseThreadpoolIo;

  int SetThreadpoolTimerEx(
    ffi.Pointer<_TP_TIMER> pti,
    ffi.Pointer<LPFILETIME> pftDueTime,
    int msPeriod,
    int msWindowLength,
  ) {
    return (_SetThreadpoolTimerEx ??= _dylib.lookupFunction<
        _c_SetThreadpoolTimerEx,
        _dart_SetThreadpoolTimerEx>('SetThreadpoolTimerEx'))(
      pti,
      pftDueTime,
      msPeriod,
      msWindowLength,
    );
  }

  _dart_SetThreadpoolTimerEx? _SetThreadpoolTimerEx;

  int SetThreadpoolWaitEx(
    ffi.Pointer<_TP_WAIT> pwa,
    ffi.Pointer<ffi.Void> h,
    ffi.Pointer<LPFILETIME> pftTimeout,
    ffi.Pointer<ffi.Void> Reserved,
  ) {
    return (_SetThreadpoolWaitEx ??= _dylib.lookupFunction<
        _c_SetThreadpoolWaitEx,
        _dart_SetThreadpoolWaitEx>('SetThreadpoolWaitEx'))(
      pwa,
      h,
      pftTimeout,
      Reserved,
    );
  }

  _dart_SetThreadpoolWaitEx? _SetThreadpoolWaitEx;

  int IsProcessInJob(
    ffi.Pointer<ffi.Void> ProcessHandle,
    ffi.Pointer<ffi.Void> JobHandle,
    ffi.Pointer<ffi.Int32> Result,
  ) {
    return (_IsProcessInJob ??=
        _dylib.lookupFunction<_c_IsProcessInJob, _dart_IsProcessInJob>(
            'IsProcessInJob'))(
      ProcessHandle,
      JobHandle,
      Result,
    );
  }

  _dart_IsProcessInJob? _IsProcessInJob;

  ffi.Pointer<ffi.Void> CreateJobObjectW(
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpJobAttributes,
    ffi.Pointer<ffi.Uint16> lpName,
  ) {
    return (_CreateJobObjectW ??=
        _dylib.lookupFunction<_c_CreateJobObjectW, _dart_CreateJobObjectW>(
            'CreateJobObjectW'))(
      lpJobAttributes,
      lpName,
    );
  }

  _dart_CreateJobObjectW? _CreateJobObjectW;

  void FreeMemoryJobObject(
    ffi.Pointer<ffi.Void> Buffer,
  ) {
    return (_FreeMemoryJobObject ??= _dylib.lookupFunction<
        _c_FreeMemoryJobObject,
        _dart_FreeMemoryJobObject>('FreeMemoryJobObject'))(
      Buffer,
    );
  }

  _dart_FreeMemoryJobObject? _FreeMemoryJobObject;

  ffi.Pointer<ffi.Void> OpenJobObjectW(
    int dwDesiredAccess,
    int bInheritHandle,
    ffi.Pointer<ffi.Uint16> lpName,
  ) {
    return (_OpenJobObjectW ??=
        _dylib.lookupFunction<_c_OpenJobObjectW, _dart_OpenJobObjectW>(
            'OpenJobObjectW'))(
      dwDesiredAccess,
      bInheritHandle,
      lpName,
    );
  }

  _dart_OpenJobObjectW? _OpenJobObjectW;

  int AssignProcessToJobObject(
    ffi.Pointer<ffi.Void> hJob,
    ffi.Pointer<ffi.Void> hProcess,
  ) {
    return (_AssignProcessToJobObject ??= _dylib.lookupFunction<
        _c_AssignProcessToJobObject,
        _dart_AssignProcessToJobObject>('AssignProcessToJobObject'))(
      hJob,
      hProcess,
    );
  }

  _dart_AssignProcessToJobObject? _AssignProcessToJobObject;

  int TerminateJobObject(
    ffi.Pointer<ffi.Void> hJob,
    int uExitCode,
  ) {
    return (_TerminateJobObject ??=
        _dylib.lookupFunction<_c_TerminateJobObject, _dart_TerminateJobObject>(
            'TerminateJobObject'))(
      hJob,
      uExitCode,
    );
  }

  _dart_TerminateJobObject? _TerminateJobObject;

  int SetInformationJobObject(
    ffi.Pointer<ffi.Void> hJob,
    int JobObjectInformationClass,
    ffi.Pointer<ffi.Void> lpJobObjectInformation,
    int cbJobObjectInformationLength,
  ) {
    return (_SetInformationJobObject ??= _dylib.lookupFunction<
        _c_SetInformationJobObject,
        _dart_SetInformationJobObject>('SetInformationJobObject'))(
      hJob,
      JobObjectInformationClass,
      lpJobObjectInformation,
      cbJobObjectInformationLength,
    );
  }

  _dart_SetInformationJobObject? _SetInformationJobObject;

  int SetIoRateControlInformationJobObject(
    ffi.Pointer<ffi.Void> hJob,
    ffi.Pointer<JOBOBJECT_IO_RATE_CONTROL_INFORMATION> IoRateControlInfo,
  ) {
    return (_SetIoRateControlInformationJobObject ??= _dylib.lookupFunction<
            _c_SetIoRateControlInformationJobObject,
            _dart_SetIoRateControlInformationJobObject>(
        'SetIoRateControlInformationJobObject'))(
      hJob,
      IoRateControlInfo,
    );
  }

  _dart_SetIoRateControlInformationJobObject?
      _SetIoRateControlInformationJobObject;

  int QueryInformationJobObject(
    ffi.Pointer<ffi.Void> hJob,
    int JobObjectInformationClass,
    ffi.Pointer<ffi.Void> lpJobObjectInformation,
    int cbJobObjectInformationLength,
    ffi.Pointer<ffi.Uint64> lpReturnLength,
  ) {
    return (_QueryInformationJobObject ??= _dylib.lookupFunction<
        _c_QueryInformationJobObject,
        _dart_QueryInformationJobObject>('QueryInformationJobObject'))(
      hJob,
      JobObjectInformationClass,
      lpJobObjectInformation,
      cbJobObjectInformationLength,
      lpReturnLength,
    );
  }

  _dart_QueryInformationJobObject? _QueryInformationJobObject;

  int QueryIoRateControlInformationJobObject(
    ffi.Pointer<ffi.Void> hJob,
    ffi.Pointer<ffi.Uint16> VolumeName,
    ffi.Pointer<ffi.Pointer<JOBOBJECT_IO_RATE_CONTROL_INFORMATION>> InfoBlocks,
    ffi.Pointer<ffi.Uint64> InfoBlockCount,
  ) {
    return (_QueryIoRateControlInformationJobObject ??= _dylib.lookupFunction<
            _c_QueryIoRateControlInformationJobObject,
            _dart_QueryIoRateControlInformationJobObject>(
        'QueryIoRateControlInformationJobObject'))(
      hJob,
      VolumeName,
      InfoBlocks,
      InfoBlockCount,
    );
  }

  _dart_QueryIoRateControlInformationJobObject?
      _QueryIoRateControlInformationJobObject;

  int Wow64DisableWow64FsRedirection(
    ffi.Pointer<ffi.Pointer<ffi.Void>> OldValue,
  ) {
    return (_Wow64DisableWow64FsRedirection ??= _dylib.lookupFunction<
            _c_Wow64DisableWow64FsRedirection,
            _dart_Wow64DisableWow64FsRedirection>(
        'Wow64DisableWow64FsRedirection'))(
      OldValue,
    );
  }

  _dart_Wow64DisableWow64FsRedirection? _Wow64DisableWow64FsRedirection;

  int Wow64RevertWow64FsRedirection(
    ffi.Pointer<ffi.Void> OlValue,
  ) {
    return (_Wow64RevertWow64FsRedirection ??= _dylib.lookupFunction<
        _c_Wow64RevertWow64FsRedirection,
        _dart_Wow64RevertWow64FsRedirection>('Wow64RevertWow64FsRedirection'))(
      OlValue,
    );
  }

  _dart_Wow64RevertWow64FsRedirection? _Wow64RevertWow64FsRedirection;

  int IsWow64Process(
    ffi.Pointer<ffi.Void> hProcess,
    ffi.Pointer<ffi.Int32> Wow64Process,
  ) {
    return (_IsWow64Process ??=
        _dylib.lookupFunction<_c_IsWow64Process, _dart_IsWow64Process>(
            'IsWow64Process'))(
      hProcess,
      Wow64Process,
    );
  }

  _dart_IsWow64Process? _IsWow64Process;

  int GetSystemWow64DirectoryA(
    ffi.Pointer<ffi.Int8> lpBuffer,
    int uSize,
  ) {
    return (_GetSystemWow64DirectoryA ??= _dylib.lookupFunction<
        _c_GetSystemWow64DirectoryA,
        _dart_GetSystemWow64DirectoryA>('GetSystemWow64DirectoryA'))(
      lpBuffer,
      uSize,
    );
  }

  _dart_GetSystemWow64DirectoryA? _GetSystemWow64DirectoryA;

  int GetSystemWow64DirectoryW(
    ffi.Pointer<ffi.Uint16> lpBuffer,
    int uSize,
  ) {
    return (_GetSystemWow64DirectoryW ??= _dylib.lookupFunction<
        _c_GetSystemWow64DirectoryW,
        _dart_GetSystemWow64DirectoryW>('GetSystemWow64DirectoryW'))(
      lpBuffer,
      uSize,
    );
  }

  _dart_GetSystemWow64DirectoryW? _GetSystemWow64DirectoryW;

  int Wow64SetThreadDefaultGuestMachine(
    int Machine,
  ) {
    return (_Wow64SetThreadDefaultGuestMachine ??= _dylib.lookupFunction<
            _c_Wow64SetThreadDefaultGuestMachine,
            _dart_Wow64SetThreadDefaultGuestMachine>(
        'Wow64SetThreadDefaultGuestMachine'))(
      Machine,
    );
  }

  _dart_Wow64SetThreadDefaultGuestMachine? _Wow64SetThreadDefaultGuestMachine;

  int IsWow64Process2(
    ffi.Pointer<ffi.Void> hProcess,
    ffi.Pointer<ffi.Uint16> pProcessMachine,
    ffi.Pointer<ffi.Uint16> pNativeMachine,
  ) {
    return (_IsWow64Process2 ??=
        _dylib.lookupFunction<_c_IsWow64Process2, _dart_IsWow64Process2>(
            'IsWow64Process2'))(
      hProcess,
      pProcessMachine,
      pNativeMachine,
    );
  }

  _dart_IsWow64Process2? _IsWow64Process2;

  int GetSystemWow64Directory2A(
    ffi.Pointer<ffi.Int8> lpBuffer,
    int uSize,
    int ImageFileMachineType,
  ) {
    return (_GetSystemWow64Directory2A ??= _dylib.lookupFunction<
        _c_GetSystemWow64Directory2A,
        _dart_GetSystemWow64Directory2A>('GetSystemWow64Directory2A'))(
      lpBuffer,
      uSize,
      ImageFileMachineType,
    );
  }

  _dart_GetSystemWow64Directory2A? _GetSystemWow64Directory2A;

  int GetSystemWow64Directory2W(
    ffi.Pointer<ffi.Uint16> lpBuffer,
    int uSize,
    int ImageFileMachineType,
  ) {
    return (_GetSystemWow64Directory2W ??= _dylib.lookupFunction<
        _c_GetSystemWow64Directory2W,
        _dart_GetSystemWow64Directory2W>('GetSystemWow64Directory2W'))(
      lpBuffer,
      uSize,
      ImageFileMachineType,
    );
  }

  _dart_GetSystemWow64Directory2W? _GetSystemWow64Directory2W;

  int IsWow64GuestMachineSupported(
    int WowGuestMachine,
    ffi.Pointer<ffi.Int32> MachineIsSupported,
  ) {
    return (_IsWow64GuestMachineSupported ??= _dylib.lookupFunction<
        _c_IsWow64GuestMachineSupported,
        _dart_IsWow64GuestMachineSupported>('IsWow64GuestMachineSupported'))(
      WowGuestMachine,
      MachineIsSupported,
    );
  }

  _dart_IsWow64GuestMachineSupported? _IsWow64GuestMachineSupported;

  int Wow64GetThreadContext(
    ffi.Pointer<ffi.Void> hThread,
    ffi.Pointer<WOW64_CONTEXT> lpContext,
  ) {
    return (_Wow64GetThreadContext ??= _dylib.lookupFunction<
        _c_Wow64GetThreadContext,
        _dart_Wow64GetThreadContext>('Wow64GetThreadContext'))(
      hThread,
      lpContext,
    );
  }

  _dart_Wow64GetThreadContext? _Wow64GetThreadContext;

  int Wow64SetThreadContext(
    ffi.Pointer<ffi.Void> hThread,
    ffi.Pointer<WOW64_CONTEXT> lpContext,
  ) {
    return (_Wow64SetThreadContext ??= _dylib.lookupFunction<
        _c_Wow64SetThreadContext,
        _dart_Wow64SetThreadContext>('Wow64SetThreadContext'))(
      hThread,
      lpContext,
    );
  }

  _dart_Wow64SetThreadContext? _Wow64SetThreadContext;

  int Wow64SuspendThread(
    ffi.Pointer<ffi.Void> hThread,
  ) {
    return (_Wow64SuspendThread ??=
        _dylib.lookupFunction<_c_Wow64SuspendThread, _dart_Wow64SuspendThread>(
            'Wow64SuspendThread'))(
      hThread,
    );
  }

  _dart_Wow64SuspendThread? _Wow64SuspendThread;

  int DisableThreadLibraryCalls(
    ffi.Pointer<HINSTANCE__> hLibModule,
  ) {
    return (_DisableThreadLibraryCalls ??= _dylib.lookupFunction<
        _c_DisableThreadLibraryCalls,
        _dart_DisableThreadLibraryCalls>('DisableThreadLibraryCalls'))(
      hLibModule,
    );
  }

  _dart_DisableThreadLibraryCalls? _DisableThreadLibraryCalls;

  ffi.Pointer<HRSRC__> FindResourceExW(
    ffi.Pointer<HINSTANCE__> hModule,
    ffi.Pointer<ffi.Uint16> lpType,
    ffi.Pointer<ffi.Uint16> lpName,
    int wLanguage,
  ) {
    return (_FindResourceExW ??=
        _dylib.lookupFunction<_c_FindResourceExW, _dart_FindResourceExW>(
            'FindResourceExW'))(
      hModule,
      lpType,
      lpName,
      wLanguage,
    );
  }

  _dart_FindResourceExW? _FindResourceExW;

  int FindStringOrdinal(
    int dwFindStringOrdinalFlags,
    ffi.Pointer<ffi.Uint16> lpStringSource,
    int cchSource,
    ffi.Pointer<ffi.Uint16> lpStringValue,
    int cchValue,
    int bIgnoreCase,
  ) {
    return (_FindStringOrdinal ??=
        _dylib.lookupFunction<_c_FindStringOrdinal, _dart_FindStringOrdinal>(
            'FindStringOrdinal'))(
      dwFindStringOrdinalFlags,
      lpStringSource,
      cchSource,
      lpStringValue,
      cchValue,
      bIgnoreCase,
    );
  }

  _dart_FindStringOrdinal? _FindStringOrdinal;

  int FreeLibrary(
    ffi.Pointer<HINSTANCE__> hLibModule,
  ) {
    return (_FreeLibrary ??= _dylib
        .lookupFunction<_c_FreeLibrary, _dart_FreeLibrary>('FreeLibrary'))(
      hLibModule,
    );
  }

  _dart_FreeLibrary? _FreeLibrary;

  void FreeLibraryAndExitThread(
    ffi.Pointer<HINSTANCE__> hLibModule,
    int dwExitCode,
  ) {
    return (_FreeLibraryAndExitThread ??= _dylib.lookupFunction<
        _c_FreeLibraryAndExitThread,
        _dart_FreeLibraryAndExitThread>('FreeLibraryAndExitThread'))(
      hLibModule,
      dwExitCode,
    );
  }

  _dart_FreeLibraryAndExitThread? _FreeLibraryAndExitThread;

  int FreeResource(
    ffi.Pointer<ffi.Void> hResData,
  ) {
    return (_FreeResource ??= _dylib
        .lookupFunction<_c_FreeResource, _dart_FreeResource>('FreeResource'))(
      hResData,
    );
  }

  _dart_FreeResource? _FreeResource;

  int GetModuleFileNameA(
    ffi.Pointer<HINSTANCE__> hModule,
    ffi.Pointer<ffi.Int8> lpFilename,
    int nSize,
  ) {
    return (_GetModuleFileNameA ??=
        _dylib.lookupFunction<_c_GetModuleFileNameA, _dart_GetModuleFileNameA>(
            'GetModuleFileNameA'))(
      hModule,
      lpFilename,
      nSize,
    );
  }

  _dart_GetModuleFileNameA? _GetModuleFileNameA;

  int GetModuleFileNameW(
    ffi.Pointer<HINSTANCE__> hModule,
    ffi.Pointer<ffi.Uint16> lpFilename,
    int nSize,
  ) {
    return (_GetModuleFileNameW ??=
        _dylib.lookupFunction<_c_GetModuleFileNameW, _dart_GetModuleFileNameW>(
            'GetModuleFileNameW'))(
      hModule,
      lpFilename,
      nSize,
    );
  }

  _dart_GetModuleFileNameW? _GetModuleFileNameW;

  ffi.Pointer<HINSTANCE__> GetModuleHandleA(
    ffi.Pointer<ffi.Int8> lpModuleName,
  ) {
    return (_GetModuleHandleA ??=
        _dylib.lookupFunction<_c_GetModuleHandleA, _dart_GetModuleHandleA>(
            'GetModuleHandleA'))(
      lpModuleName,
    );
  }

  _dart_GetModuleHandleA? _GetModuleHandleA;

  ffi.Pointer<HINSTANCE__> GetModuleHandleW(
    ffi.Pointer<ffi.Uint16> lpModuleName,
  ) {
    return (_GetModuleHandleW ??=
        _dylib.lookupFunction<_c_GetModuleHandleW, _dart_GetModuleHandleW>(
            'GetModuleHandleW'))(
      lpModuleName,
    );
  }

  _dart_GetModuleHandleW? _GetModuleHandleW;

  int GetModuleHandleExA(
    int dwFlags,
    ffi.Pointer<ffi.Int8> lpModuleName,
    ffi.Pointer<ffi.Pointer<HINSTANCE__>> phModule,
  ) {
    return (_GetModuleHandleExA ??=
        _dylib.lookupFunction<_c_GetModuleHandleExA, _dart_GetModuleHandleExA>(
            'GetModuleHandleExA'))(
      dwFlags,
      lpModuleName,
      phModule,
    );
  }

  _dart_GetModuleHandleExA? _GetModuleHandleExA;

  int GetModuleHandleExW(
    int dwFlags,
    ffi.Pointer<ffi.Uint16> lpModuleName,
    ffi.Pointer<ffi.Pointer<HINSTANCE__>> phModule,
  ) {
    return (_GetModuleHandleExW ??=
        _dylib.lookupFunction<_c_GetModuleHandleExW, _dart_GetModuleHandleExW>(
            'GetModuleHandleExW'))(
      dwFlags,
      lpModuleName,
      phModule,
    );
  }

  _dart_GetModuleHandleExW? _GetModuleHandleExW;

  ffi.Pointer<ffi.NativeFunction<FARPROC>> GetProcAddress(
    ffi.Pointer<HINSTANCE__> hModule,
    ffi.Pointer<ffi.Int8> lpProcName,
  ) {
    return (_GetProcAddress ??=
        _dylib.lookupFunction<_c_GetProcAddress, _dart_GetProcAddress>(
            'GetProcAddress'))(
      hModule,
      lpProcName,
    );
  }

  _dart_GetProcAddress? _GetProcAddress;

  ffi.Pointer<HINSTANCE__> LoadLibraryExA(
    ffi.Pointer<ffi.Int8> lpLibFileName,
    ffi.Pointer<ffi.Void> hFile,
    int dwFlags,
  ) {
    return (_LoadLibraryExA ??=
        _dylib.lookupFunction<_c_LoadLibraryExA, _dart_LoadLibraryExA>(
            'LoadLibraryExA'))(
      lpLibFileName,
      hFile,
      dwFlags,
    );
  }

  _dart_LoadLibraryExA? _LoadLibraryExA;

  ffi.Pointer<HINSTANCE__> LoadLibraryExW(
    ffi.Pointer<ffi.Uint16> lpLibFileName,
    ffi.Pointer<ffi.Void> hFile,
    int dwFlags,
  ) {
    return (_LoadLibraryExW ??=
        _dylib.lookupFunction<_c_LoadLibraryExW, _dart_LoadLibraryExW>(
            'LoadLibraryExW'))(
      lpLibFileName,
      hFile,
      dwFlags,
    );
  }

  _dart_LoadLibraryExW? _LoadLibraryExW;

  ffi.Pointer<ffi.Void> LoadResource(
    ffi.Pointer<HINSTANCE__> hModule,
    ffi.Pointer<HRSRC__> hResInfo,
  ) {
    return (_LoadResource ??= _dylib
        .lookupFunction<_c_LoadResource, _dart_LoadResource>('LoadResource'))(
      hModule,
      hResInfo,
    );
  }

  _dart_LoadResource? _LoadResource;

  int LoadStringA(
    ffi.Pointer<HINSTANCE__> hInstance,
    int uID,
    ffi.Pointer<ffi.Int8> lpBuffer,
    int cchBufferMax,
  ) {
    return (_LoadStringA ??= _dylib
        .lookupFunction<_c_LoadStringA, _dart_LoadStringA>('LoadStringA'))(
      hInstance,
      uID,
      lpBuffer,
      cchBufferMax,
    );
  }

  _dart_LoadStringA? _LoadStringA;

  int LoadStringW(
    ffi.Pointer<HINSTANCE__> hInstance,
    int uID,
    ffi.Pointer<ffi.Uint16> lpBuffer,
    int cchBufferMax,
  ) {
    return (_LoadStringW ??= _dylib
        .lookupFunction<_c_LoadStringW, _dart_LoadStringW>('LoadStringW'))(
      hInstance,
      uID,
      lpBuffer,
      cchBufferMax,
    );
  }

  _dart_LoadStringW? _LoadStringW;

  ffi.Pointer<ffi.Void> LockResource(
    ffi.Pointer<ffi.Void> hResData,
  ) {
    return (_LockResource ??= _dylib
        .lookupFunction<_c_LockResource, _dart_LockResource>('LockResource'))(
      hResData,
    );
  }

  _dart_LockResource? _LockResource;

  int SizeofResource(
    ffi.Pointer<HINSTANCE__> hModule,
    ffi.Pointer<HRSRC__> hResInfo,
  ) {
    return (_SizeofResource ??=
        _dylib.lookupFunction<_c_SizeofResource, _dart_SizeofResource>(
            'SizeofResource'))(
      hModule,
      hResInfo,
    );
  }

  _dart_SizeofResource? _SizeofResource;

  ffi.Pointer<ffi.Void> AddDllDirectory(
    ffi.Pointer<ffi.Uint16> NewDirectory,
  ) {
    return (_AddDllDirectory ??=
        _dylib.lookupFunction<_c_AddDllDirectory, _dart_AddDllDirectory>(
            'AddDllDirectory'))(
      NewDirectory,
    );
  }

  _dart_AddDllDirectory? _AddDllDirectory;

  int RemoveDllDirectory(
    ffi.Pointer<ffi.Void> Cookie,
  ) {
    return (_RemoveDllDirectory ??=
        _dylib.lookupFunction<_c_RemoveDllDirectory, _dart_RemoveDllDirectory>(
            'RemoveDllDirectory'))(
      Cookie,
    );
  }

  _dart_RemoveDllDirectory? _RemoveDllDirectory;

  int SetDefaultDllDirectories(
    int DirectoryFlags,
  ) {
    return (_SetDefaultDllDirectories ??= _dylib.lookupFunction<
        _c_SetDefaultDllDirectories,
        _dart_SetDefaultDllDirectories>('SetDefaultDllDirectories'))(
      DirectoryFlags,
    );
  }

  _dart_SetDefaultDllDirectories? _SetDefaultDllDirectories;

  int EnumResourceLanguagesExA(
    ffi.Pointer<HINSTANCE__> hModule,
    ffi.Pointer<ffi.Int8> lpType,
    ffi.Pointer<ffi.Int8> lpName,
    ffi.Pointer<ffi.NativeFunction<ENUMRESLANGPROCA>> lpEnumFunc,
    int lParam,
    int dwFlags,
    int LangId,
  ) {
    return (_EnumResourceLanguagesExA ??= _dylib.lookupFunction<
        _c_EnumResourceLanguagesExA,
        _dart_EnumResourceLanguagesExA>('EnumResourceLanguagesExA'))(
      hModule,
      lpType,
      lpName,
      lpEnumFunc,
      lParam,
      dwFlags,
      LangId,
    );
  }

  _dart_EnumResourceLanguagesExA? _EnumResourceLanguagesExA;

  int EnumResourceLanguagesExW(
    ffi.Pointer<HINSTANCE__> hModule,
    ffi.Pointer<ffi.Uint16> lpType,
    ffi.Pointer<ffi.Uint16> lpName,
    ffi.Pointer<ffi.NativeFunction<ENUMRESLANGPROCW>> lpEnumFunc,
    int lParam,
    int dwFlags,
    int LangId,
  ) {
    return (_EnumResourceLanguagesExW ??= _dylib.lookupFunction<
        _c_EnumResourceLanguagesExW,
        _dart_EnumResourceLanguagesExW>('EnumResourceLanguagesExW'))(
      hModule,
      lpType,
      lpName,
      lpEnumFunc,
      lParam,
      dwFlags,
      LangId,
    );
  }

  _dart_EnumResourceLanguagesExW? _EnumResourceLanguagesExW;

  int EnumResourceNamesExA(
    ffi.Pointer<HINSTANCE__> hModule,
    ffi.Pointer<ffi.Int8> lpType,
    ffi.Pointer<ffi.NativeFunction<ENUMRESNAMEPROCA>> lpEnumFunc,
    int lParam,
    int dwFlags,
    int LangId,
  ) {
    return (_EnumResourceNamesExA ??= _dylib.lookupFunction<
        _c_EnumResourceNamesExA,
        _dart_EnumResourceNamesExA>('EnumResourceNamesExA'))(
      hModule,
      lpType,
      lpEnumFunc,
      lParam,
      dwFlags,
      LangId,
    );
  }

  _dart_EnumResourceNamesExA? _EnumResourceNamesExA;

  int EnumResourceNamesExW(
    ffi.Pointer<HINSTANCE__> hModule,
    ffi.Pointer<ffi.Uint16> lpType,
    ffi.Pointer<ffi.NativeFunction<ENUMRESNAMEPROCW>> lpEnumFunc,
    int lParam,
    int dwFlags,
    int LangId,
  ) {
    return (_EnumResourceNamesExW ??= _dylib.lookupFunction<
        _c_EnumResourceNamesExW,
        _dart_EnumResourceNamesExW>('EnumResourceNamesExW'))(
      hModule,
      lpType,
      lpEnumFunc,
      lParam,
      dwFlags,
      LangId,
    );
  }

  _dart_EnumResourceNamesExW? _EnumResourceNamesExW;

  int EnumResourceTypesExA(
    ffi.Pointer<HINSTANCE__> hModule,
    ffi.Pointer<ffi.NativeFunction<ENUMRESTYPEPROCA>> lpEnumFunc,
    int lParam,
    int dwFlags,
    int LangId,
  ) {
    return (_EnumResourceTypesExA ??= _dylib.lookupFunction<
        _c_EnumResourceTypesExA,
        _dart_EnumResourceTypesExA>('EnumResourceTypesExA'))(
      hModule,
      lpEnumFunc,
      lParam,
      dwFlags,
      LangId,
    );
  }

  _dart_EnumResourceTypesExA? _EnumResourceTypesExA;

  int EnumResourceTypesExW(
    ffi.Pointer<HINSTANCE__> hModule,
    ffi.Pointer<ffi.NativeFunction<ENUMRESTYPEPROCW>> lpEnumFunc,
    int lParam,
    int dwFlags,
    int LangId,
  ) {
    return (_EnumResourceTypesExW ??= _dylib.lookupFunction<
        _c_EnumResourceTypesExW,
        _dart_EnumResourceTypesExW>('EnumResourceTypesExW'))(
      hModule,
      lpEnumFunc,
      lParam,
      dwFlags,
      LangId,
    );
  }

  _dart_EnumResourceTypesExW? _EnumResourceTypesExW;

  ffi.Pointer<HRSRC__> FindResourceW(
    ffi.Pointer<HINSTANCE__> hModule,
    ffi.Pointer<ffi.Uint16> lpName,
    ffi.Pointer<ffi.Uint16> lpType,
  ) {
    return (_FindResourceW ??=
        _dylib.lookupFunction<_c_FindResourceW, _dart_FindResourceW>(
            'FindResourceW'))(
      hModule,
      lpName,
      lpType,
    );
  }

  _dart_FindResourceW? _FindResourceW;

  ffi.Pointer<HINSTANCE__> LoadLibraryA(
    ffi.Pointer<ffi.Int8> lpLibFileName,
  ) {
    return (_LoadLibraryA ??= _dylib
        .lookupFunction<_c_LoadLibraryA, _dart_LoadLibraryA>('LoadLibraryA'))(
      lpLibFileName,
    );
  }

  _dart_LoadLibraryA? _LoadLibraryA;

  ffi.Pointer<HINSTANCE__> LoadLibraryW(
    ffi.Pointer<ffi.Uint16> lpLibFileName,
  ) {
    return (_LoadLibraryW ??= _dylib
        .lookupFunction<_c_LoadLibraryW, _dart_LoadLibraryW>('LoadLibraryW'))(
      lpLibFileName,
    );
  }

  _dart_LoadLibraryW? _LoadLibraryW;

  int EnumResourceNamesW(
    ffi.Pointer<HINSTANCE__> hModule,
    ffi.Pointer<ffi.Uint16> lpType,
    ffi.Pointer<ffi.NativeFunction<ENUMRESNAMEPROCW>> lpEnumFunc,
    int lParam,
  ) {
    return (_EnumResourceNamesW ??=
        _dylib.lookupFunction<_c_EnumResourceNamesW, _dart_EnumResourceNamesW>(
            'EnumResourceNamesW'))(
      hModule,
      lpType,
      lpEnumFunc,
      lParam,
    );
  }

  _dart_EnumResourceNamesW? _EnumResourceNamesW;

  int AccessCheck(
    ffi.Pointer<ffi.Void> pSecurityDescriptor,
    ffi.Pointer<ffi.Void> ClientToken,
    int DesiredAccess,
    ffi.Pointer<GENERIC_MAPPING> GenericMapping,
    ffi.Pointer<PPRIVILEGE_SET> PrivilegeSet,
    ffi.Pointer<ffi.Uint64> PrivilegeSetLength,
    ffi.Pointer<ffi.Uint64> GrantedAccess,
    ffi.Pointer<ffi.Int32> AccessStatus,
  ) {
    return (_AccessCheck ??= _dylib
        .lookupFunction<_c_AccessCheck, _dart_AccessCheck>('AccessCheck'))(
      pSecurityDescriptor,
      ClientToken,
      DesiredAccess,
      GenericMapping,
      PrivilegeSet,
      PrivilegeSetLength,
      GrantedAccess,
      AccessStatus,
    );
  }

  _dart_AccessCheck? _AccessCheck;

  int AccessCheckAndAuditAlarmW(
    ffi.Pointer<ffi.Uint16> SubsystemName,
    ffi.Pointer<ffi.Void> HandleId,
    ffi.Pointer<ffi.Uint16> ObjectTypeName,
    ffi.Pointer<ffi.Uint16> ObjectName,
    ffi.Pointer<ffi.Void> SecurityDescriptor,
    int DesiredAccess,
    ffi.Pointer<GENERIC_MAPPING> GenericMapping,
    int ObjectCreation,
    ffi.Pointer<ffi.Uint64> GrantedAccess,
    ffi.Pointer<ffi.Int32> AccessStatus,
    ffi.Pointer<ffi.Int32> pfGenerateOnClose,
  ) {
    return (_AccessCheckAndAuditAlarmW ??= _dylib.lookupFunction<
        _c_AccessCheckAndAuditAlarmW,
        _dart_AccessCheckAndAuditAlarmW>('AccessCheckAndAuditAlarmW'))(
      SubsystemName,
      HandleId,
      ObjectTypeName,
      ObjectName,
      SecurityDescriptor,
      DesiredAccess,
      GenericMapping,
      ObjectCreation,
      GrantedAccess,
      AccessStatus,
      pfGenerateOnClose,
    );
  }

  _dart_AccessCheckAndAuditAlarmW? _AccessCheckAndAuditAlarmW;

  int AccessCheckByType(
    ffi.Pointer<ffi.Void> pSecurityDescriptor,
    ffi.Pointer<ffi.Void> PrincipalSelfSid,
    ffi.Pointer<ffi.Void> ClientToken,
    int DesiredAccess,
    ffi.Pointer<POBJECT_TYPE_LIST> ObjectTypeList,
    int ObjectTypeListLength,
    ffi.Pointer<GENERIC_MAPPING> GenericMapping,
    ffi.Pointer<PPRIVILEGE_SET> PrivilegeSet,
    ffi.Pointer<ffi.Uint64> PrivilegeSetLength,
    ffi.Pointer<ffi.Uint64> GrantedAccess,
    ffi.Pointer<ffi.Int32> AccessStatus,
  ) {
    return (_AccessCheckByType ??=
        _dylib.lookupFunction<_c_AccessCheckByType, _dart_AccessCheckByType>(
            'AccessCheckByType'))(
      pSecurityDescriptor,
      PrincipalSelfSid,
      ClientToken,
      DesiredAccess,
      ObjectTypeList,
      ObjectTypeListLength,
      GenericMapping,
      PrivilegeSet,
      PrivilegeSetLength,
      GrantedAccess,
      AccessStatus,
    );
  }

  _dart_AccessCheckByType? _AccessCheckByType;

  int AccessCheckByTypeResultList(
    ffi.Pointer<ffi.Void> pSecurityDescriptor,
    ffi.Pointer<ffi.Void> PrincipalSelfSid,
    ffi.Pointer<ffi.Void> ClientToken,
    int DesiredAccess,
    ffi.Pointer<POBJECT_TYPE_LIST> ObjectTypeList,
    int ObjectTypeListLength,
    ffi.Pointer<GENERIC_MAPPING> GenericMapping,
    ffi.Pointer<PPRIVILEGE_SET> PrivilegeSet,
    ffi.Pointer<ffi.Uint64> PrivilegeSetLength,
    ffi.Pointer<ffi.Uint64> GrantedAccessList,
    ffi.Pointer<ffi.Uint64> AccessStatusList,
  ) {
    return (_AccessCheckByTypeResultList ??= _dylib.lookupFunction<
        _c_AccessCheckByTypeResultList,
        _dart_AccessCheckByTypeResultList>('AccessCheckByTypeResultList'))(
      pSecurityDescriptor,
      PrincipalSelfSid,
      ClientToken,
      DesiredAccess,
      ObjectTypeList,
      ObjectTypeListLength,
      GenericMapping,
      PrivilegeSet,
      PrivilegeSetLength,
      GrantedAccessList,
      AccessStatusList,
    );
  }

  _dart_AccessCheckByTypeResultList? _AccessCheckByTypeResultList;

  int AccessCheckByTypeAndAuditAlarmW(
    ffi.Pointer<ffi.Uint16> SubsystemName,
    ffi.Pointer<ffi.Void> HandleId,
    ffi.Pointer<ffi.Uint16> ObjectTypeName,
    ffi.Pointer<ffi.Uint16> ObjectName,
    ffi.Pointer<ffi.Void> SecurityDescriptor,
    ffi.Pointer<ffi.Void> PrincipalSelfSid,
    int DesiredAccess,
    int AuditType,
    int Flags,
    ffi.Pointer<POBJECT_TYPE_LIST> ObjectTypeList,
    int ObjectTypeListLength,
    ffi.Pointer<GENERIC_MAPPING> GenericMapping,
    int ObjectCreation,
    ffi.Pointer<ffi.Uint64> GrantedAccess,
    ffi.Pointer<ffi.Int32> AccessStatus,
    ffi.Pointer<ffi.Int32> pfGenerateOnClose,
  ) {
    return (_AccessCheckByTypeAndAuditAlarmW ??= _dylib.lookupFunction<
            _c_AccessCheckByTypeAndAuditAlarmW,
            _dart_AccessCheckByTypeAndAuditAlarmW>(
        'AccessCheckByTypeAndAuditAlarmW'))(
      SubsystemName,
      HandleId,
      ObjectTypeName,
      ObjectName,
      SecurityDescriptor,
      PrincipalSelfSid,
      DesiredAccess,
      AuditType,
      Flags,
      ObjectTypeList,
      ObjectTypeListLength,
      GenericMapping,
      ObjectCreation,
      GrantedAccess,
      AccessStatus,
      pfGenerateOnClose,
    );
  }

  _dart_AccessCheckByTypeAndAuditAlarmW? _AccessCheckByTypeAndAuditAlarmW;

  int AccessCheckByTypeResultListAndAuditAlarmW(
    ffi.Pointer<ffi.Uint16> SubsystemName,
    ffi.Pointer<ffi.Void> HandleId,
    ffi.Pointer<ffi.Uint16> ObjectTypeName,
    ffi.Pointer<ffi.Uint16> ObjectName,
    ffi.Pointer<ffi.Void> SecurityDescriptor,
    ffi.Pointer<ffi.Void> PrincipalSelfSid,
    int DesiredAccess,
    int AuditType,
    int Flags,
    ffi.Pointer<POBJECT_TYPE_LIST> ObjectTypeList,
    int ObjectTypeListLength,
    ffi.Pointer<GENERIC_MAPPING> GenericMapping,
    int ObjectCreation,
    ffi.Pointer<ffi.Uint64> GrantedAccessList,
    ffi.Pointer<ffi.Uint64> AccessStatusList,
    ffi.Pointer<ffi.Int32> pfGenerateOnClose,
  ) {
    return (_AccessCheckByTypeResultListAndAuditAlarmW ??=
        _dylib.lookupFunction<_c_AccessCheckByTypeResultListAndAuditAlarmW,
                _dart_AccessCheckByTypeResultListAndAuditAlarmW>(
            'AccessCheckByTypeResultListAndAuditAlarmW'))(
      SubsystemName,
      HandleId,
      ObjectTypeName,
      ObjectName,
      SecurityDescriptor,
      PrincipalSelfSid,
      DesiredAccess,
      AuditType,
      Flags,
      ObjectTypeList,
      ObjectTypeListLength,
      GenericMapping,
      ObjectCreation,
      GrantedAccessList,
      AccessStatusList,
      pfGenerateOnClose,
    );
  }

  _dart_AccessCheckByTypeResultListAndAuditAlarmW?
      _AccessCheckByTypeResultListAndAuditAlarmW;

  int AccessCheckByTypeResultListAndAuditAlarmByHandleW(
    ffi.Pointer<ffi.Uint16> SubsystemName,
    ffi.Pointer<ffi.Void> HandleId,
    ffi.Pointer<ffi.Void> ClientToken,
    ffi.Pointer<ffi.Uint16> ObjectTypeName,
    ffi.Pointer<ffi.Uint16> ObjectName,
    ffi.Pointer<ffi.Void> SecurityDescriptor,
    ffi.Pointer<ffi.Void> PrincipalSelfSid,
    int DesiredAccess,
    int AuditType,
    int Flags,
    ffi.Pointer<POBJECT_TYPE_LIST> ObjectTypeList,
    int ObjectTypeListLength,
    ffi.Pointer<GENERIC_MAPPING> GenericMapping,
    int ObjectCreation,
    ffi.Pointer<ffi.Uint64> GrantedAccessList,
    ffi.Pointer<ffi.Uint64> AccessStatusList,
    ffi.Pointer<ffi.Int32> pfGenerateOnClose,
  ) {
    return (_AccessCheckByTypeResultListAndAuditAlarmByHandleW ??=
        _dylib.lookupFunction<
                _c_AccessCheckByTypeResultListAndAuditAlarmByHandleW,
                _dart_AccessCheckByTypeResultListAndAuditAlarmByHandleW>(
            'AccessCheckByTypeResultListAndAuditAlarmByHandleW'))(
      SubsystemName,
      HandleId,
      ClientToken,
      ObjectTypeName,
      ObjectName,
      SecurityDescriptor,
      PrincipalSelfSid,
      DesiredAccess,
      AuditType,
      Flags,
      ObjectTypeList,
      ObjectTypeListLength,
      GenericMapping,
      ObjectCreation,
      GrantedAccessList,
      AccessStatusList,
      pfGenerateOnClose,
    );
  }

  _dart_AccessCheckByTypeResultListAndAuditAlarmByHandleW?
      _AccessCheckByTypeResultListAndAuditAlarmByHandleW;

  int AddAccessAllowedAce(
    ffi.Pointer<ACL> pAcl,
    int dwAceRevision,
    int AccessMask,
    ffi.Pointer<ffi.Void> pSid,
  ) {
    return (_AddAccessAllowedAce ??= _dylib.lookupFunction<
        _c_AddAccessAllowedAce,
        _dart_AddAccessAllowedAce>('AddAccessAllowedAce'))(
      pAcl,
      dwAceRevision,
      AccessMask,
      pSid,
    );
  }

  _dart_AddAccessAllowedAce? _AddAccessAllowedAce;

  int AddAccessAllowedAceEx(
    ffi.Pointer<ACL> pAcl,
    int dwAceRevision,
    int AceFlags,
    int AccessMask,
    ffi.Pointer<ffi.Void> pSid,
  ) {
    return (_AddAccessAllowedAceEx ??= _dylib.lookupFunction<
        _c_AddAccessAllowedAceEx,
        _dart_AddAccessAllowedAceEx>('AddAccessAllowedAceEx'))(
      pAcl,
      dwAceRevision,
      AceFlags,
      AccessMask,
      pSid,
    );
  }

  _dart_AddAccessAllowedAceEx? _AddAccessAllowedAceEx;

  int AddAccessAllowedObjectAce(
    ffi.Pointer<ACL> pAcl,
    int dwAceRevision,
    int AceFlags,
    int AccessMask,
    ffi.Pointer<GUID> ObjectTypeGuid,
    ffi.Pointer<GUID> InheritedObjectTypeGuid,
    ffi.Pointer<ffi.Void> pSid,
  ) {
    return (_AddAccessAllowedObjectAce ??= _dylib.lookupFunction<
        _c_AddAccessAllowedObjectAce,
        _dart_AddAccessAllowedObjectAce>('AddAccessAllowedObjectAce'))(
      pAcl,
      dwAceRevision,
      AceFlags,
      AccessMask,
      ObjectTypeGuid,
      InheritedObjectTypeGuid,
      pSid,
    );
  }

  _dart_AddAccessAllowedObjectAce? _AddAccessAllowedObjectAce;

  int AddAccessDeniedAce(
    ffi.Pointer<ACL> pAcl,
    int dwAceRevision,
    int AccessMask,
    ffi.Pointer<ffi.Void> pSid,
  ) {
    return (_AddAccessDeniedAce ??=
        _dylib.lookupFunction<_c_AddAccessDeniedAce, _dart_AddAccessDeniedAce>(
            'AddAccessDeniedAce'))(
      pAcl,
      dwAceRevision,
      AccessMask,
      pSid,
    );
  }

  _dart_AddAccessDeniedAce? _AddAccessDeniedAce;

  int AddAccessDeniedAceEx(
    ffi.Pointer<ACL> pAcl,
    int dwAceRevision,
    int AceFlags,
    int AccessMask,
    ffi.Pointer<ffi.Void> pSid,
  ) {
    return (_AddAccessDeniedAceEx ??= _dylib.lookupFunction<
        _c_AddAccessDeniedAceEx,
        _dart_AddAccessDeniedAceEx>('AddAccessDeniedAceEx'))(
      pAcl,
      dwAceRevision,
      AceFlags,
      AccessMask,
      pSid,
    );
  }

  _dart_AddAccessDeniedAceEx? _AddAccessDeniedAceEx;

  int AddAccessDeniedObjectAce(
    ffi.Pointer<ACL> pAcl,
    int dwAceRevision,
    int AceFlags,
    int AccessMask,
    ffi.Pointer<GUID> ObjectTypeGuid,
    ffi.Pointer<GUID> InheritedObjectTypeGuid,
    ffi.Pointer<ffi.Void> pSid,
  ) {
    return (_AddAccessDeniedObjectAce ??= _dylib.lookupFunction<
        _c_AddAccessDeniedObjectAce,
        _dart_AddAccessDeniedObjectAce>('AddAccessDeniedObjectAce'))(
      pAcl,
      dwAceRevision,
      AceFlags,
      AccessMask,
      ObjectTypeGuid,
      InheritedObjectTypeGuid,
      pSid,
    );
  }

  _dart_AddAccessDeniedObjectAce? _AddAccessDeniedObjectAce;

  int AddAce(
    ffi.Pointer<ACL> pAcl,
    int dwAceRevision,
    int dwStartingAceIndex,
    ffi.Pointer<ffi.Void> pAceList,
    int nAceListLength,
  ) {
    return (_AddAce ??=
        _dylib.lookupFunction<_c_AddAce, _dart_AddAce>('AddAce'))(
      pAcl,
      dwAceRevision,
      dwStartingAceIndex,
      pAceList,
      nAceListLength,
    );
  }

  _dart_AddAce? _AddAce;

  int AddAuditAccessAce(
    ffi.Pointer<ACL> pAcl,
    int dwAceRevision,
    int dwAccessMask,
    ffi.Pointer<ffi.Void> pSid,
    int bAuditSuccess,
    int bAuditFailure,
  ) {
    return (_AddAuditAccessAce ??=
        _dylib.lookupFunction<_c_AddAuditAccessAce, _dart_AddAuditAccessAce>(
            'AddAuditAccessAce'))(
      pAcl,
      dwAceRevision,
      dwAccessMask,
      pSid,
      bAuditSuccess,
      bAuditFailure,
    );
  }

  _dart_AddAuditAccessAce? _AddAuditAccessAce;

  int AddAuditAccessAceEx(
    ffi.Pointer<ACL> pAcl,
    int dwAceRevision,
    int AceFlags,
    int dwAccessMask,
    ffi.Pointer<ffi.Void> pSid,
    int bAuditSuccess,
    int bAuditFailure,
  ) {
    return (_AddAuditAccessAceEx ??= _dylib.lookupFunction<
        _c_AddAuditAccessAceEx,
        _dart_AddAuditAccessAceEx>('AddAuditAccessAceEx'))(
      pAcl,
      dwAceRevision,
      AceFlags,
      dwAccessMask,
      pSid,
      bAuditSuccess,
      bAuditFailure,
    );
  }

  _dart_AddAuditAccessAceEx? _AddAuditAccessAceEx;

  int AddAuditAccessObjectAce(
    ffi.Pointer<ACL> pAcl,
    int dwAceRevision,
    int AceFlags,
    int AccessMask,
    ffi.Pointer<GUID> ObjectTypeGuid,
    ffi.Pointer<GUID> InheritedObjectTypeGuid,
    ffi.Pointer<ffi.Void> pSid,
    int bAuditSuccess,
    int bAuditFailure,
  ) {
    return (_AddAuditAccessObjectAce ??= _dylib.lookupFunction<
        _c_AddAuditAccessObjectAce,
        _dart_AddAuditAccessObjectAce>('AddAuditAccessObjectAce'))(
      pAcl,
      dwAceRevision,
      AceFlags,
      AccessMask,
      ObjectTypeGuid,
      InheritedObjectTypeGuid,
      pSid,
      bAuditSuccess,
      bAuditFailure,
    );
  }

  _dart_AddAuditAccessObjectAce? _AddAuditAccessObjectAce;

  int AddMandatoryAce(
    ffi.Pointer<ACL> pAcl,
    int dwAceRevision,
    int AceFlags,
    int MandatoryPolicy,
    ffi.Pointer<ffi.Void> pLabelSid,
  ) {
    return (_AddMandatoryAce ??=
        _dylib.lookupFunction<_c_AddMandatoryAce, _dart_AddMandatoryAce>(
            'AddMandatoryAce'))(
      pAcl,
      dwAceRevision,
      AceFlags,
      MandatoryPolicy,
      pLabelSid,
    );
  }

  _dart_AddMandatoryAce? _AddMandatoryAce;

  int AddResourceAttributeAce(
    ffi.Pointer<ACL> pAcl,
    int dwAceRevision,
    int AceFlags,
    int AccessMask,
    ffi.Pointer<ffi.Void> pSid,
    ffi.Pointer<PCLAIM_SECURITY_ATTRIBUTES_INFORMATION> pAttributeInfo,
    ffi.Pointer<ffi.Uint64> pReturnLength,
  ) {
    return (_AddResourceAttributeAce ??= _dylib.lookupFunction<
        _c_AddResourceAttributeAce,
        _dart_AddResourceAttributeAce>('AddResourceAttributeAce'))(
      pAcl,
      dwAceRevision,
      AceFlags,
      AccessMask,
      pSid,
      pAttributeInfo,
      pReturnLength,
    );
  }

  _dart_AddResourceAttributeAce? _AddResourceAttributeAce;

  int AddScopedPolicyIDAce(
    ffi.Pointer<ACL> pAcl,
    int dwAceRevision,
    int AceFlags,
    int AccessMask,
    ffi.Pointer<ffi.Void> pSid,
  ) {
    return (_AddScopedPolicyIDAce ??= _dylib.lookupFunction<
        _c_AddScopedPolicyIDAce,
        _dart_AddScopedPolicyIDAce>('AddScopedPolicyIDAce'))(
      pAcl,
      dwAceRevision,
      AceFlags,
      AccessMask,
      pSid,
    );
  }

  _dart_AddScopedPolicyIDAce? _AddScopedPolicyIDAce;

  int AdjustTokenGroups(
    ffi.Pointer<ffi.Void> TokenHandle,
    int ResetToDefault,
    ffi.Pointer<PTOKEN_GROUPS> NewState,
    int BufferLength,
    ffi.Pointer<PTOKEN_GROUPS> PreviousState,
    ffi.Pointer<ffi.Uint64> ReturnLength,
  ) {
    return (_AdjustTokenGroups ??=
        _dylib.lookupFunction<_c_AdjustTokenGroups, _dart_AdjustTokenGroups>(
            'AdjustTokenGroups'))(
      TokenHandle,
      ResetToDefault,
      NewState,
      BufferLength,
      PreviousState,
      ReturnLength,
    );
  }

  _dart_AdjustTokenGroups? _AdjustTokenGroups;

  int AdjustTokenPrivileges(
    ffi.Pointer<ffi.Void> TokenHandle,
    int DisableAllPrivileges,
    ffi.Pointer<PTOKEN_PRIVILEGES> NewState,
    int BufferLength,
    ffi.Pointer<PTOKEN_PRIVILEGES> PreviousState,
    ffi.Pointer<ffi.Uint64> ReturnLength,
  ) {
    return (_AdjustTokenPrivileges ??= _dylib.lookupFunction<
        _c_AdjustTokenPrivileges,
        _dart_AdjustTokenPrivileges>('AdjustTokenPrivileges'))(
      TokenHandle,
      DisableAllPrivileges,
      NewState,
      BufferLength,
      PreviousState,
      ReturnLength,
    );
  }

  _dart_AdjustTokenPrivileges? _AdjustTokenPrivileges;

  int AllocateAndInitializeSid(
    ffi.Pointer<PSID_IDENTIFIER_AUTHORITY> pIdentifierAuthority,
    int nSubAuthorityCount,
    int nSubAuthority0,
    int nSubAuthority1,
    int nSubAuthority2,
    int nSubAuthority3,
    int nSubAuthority4,
    int nSubAuthority5,
    int nSubAuthority6,
    int nSubAuthority7,
    ffi.Pointer<ffi.Pointer<ffi.Void>> pSid,
  ) {
    return (_AllocateAndInitializeSid ??= _dylib.lookupFunction<
        _c_AllocateAndInitializeSid,
        _dart_AllocateAndInitializeSid>('AllocateAndInitializeSid'))(
      pIdentifierAuthority,
      nSubAuthorityCount,
      nSubAuthority0,
      nSubAuthority1,
      nSubAuthority2,
      nSubAuthority3,
      nSubAuthority4,
      nSubAuthority5,
      nSubAuthority6,
      nSubAuthority7,
      pSid,
    );
  }

  _dart_AllocateAndInitializeSid? _AllocateAndInitializeSid;

  int AllocateLocallyUniqueId(
    ffi.Pointer<PLUID> Luid,
  ) {
    return (_AllocateLocallyUniqueId ??= _dylib.lookupFunction<
        _c_AllocateLocallyUniqueId,
        _dart_AllocateLocallyUniqueId>('AllocateLocallyUniqueId'))(
      Luid,
    );
  }

  _dart_AllocateLocallyUniqueId? _AllocateLocallyUniqueId;

  int AreAllAccessesGranted(
    int GrantedAccess,
    int DesiredAccess,
  ) {
    return (_AreAllAccessesGranted ??= _dylib.lookupFunction<
        _c_AreAllAccessesGranted,
        _dart_AreAllAccessesGranted>('AreAllAccessesGranted'))(
      GrantedAccess,
      DesiredAccess,
    );
  }

  _dart_AreAllAccessesGranted? _AreAllAccessesGranted;

  int AreAnyAccessesGranted(
    int GrantedAccess,
    int DesiredAccess,
  ) {
    return (_AreAnyAccessesGranted ??= _dylib.lookupFunction<
        _c_AreAnyAccessesGranted,
        _dart_AreAnyAccessesGranted>('AreAnyAccessesGranted'))(
      GrantedAccess,
      DesiredAccess,
    );
  }

  _dart_AreAnyAccessesGranted? _AreAnyAccessesGranted;

  int CheckTokenMembership(
    ffi.Pointer<ffi.Void> TokenHandle,
    ffi.Pointer<ffi.Void> SidToCheck,
    ffi.Pointer<ffi.Int32> IsMember,
  ) {
    return (_CheckTokenMembership ??= _dylib.lookupFunction<
        _c_CheckTokenMembership,
        _dart_CheckTokenMembership>('CheckTokenMembership'))(
      TokenHandle,
      SidToCheck,
      IsMember,
    );
  }

  _dart_CheckTokenMembership? _CheckTokenMembership;

  int CheckTokenCapability(
    ffi.Pointer<ffi.Void> TokenHandle,
    ffi.Pointer<ffi.Void> CapabilitySidToCheck,
    ffi.Pointer<ffi.Int32> HasCapability,
  ) {
    return (_CheckTokenCapability ??= _dylib.lookupFunction<
        _c_CheckTokenCapability,
        _dart_CheckTokenCapability>('CheckTokenCapability'))(
      TokenHandle,
      CapabilitySidToCheck,
      HasCapability,
    );
  }

  _dart_CheckTokenCapability? _CheckTokenCapability;

  int GetAppContainerAce(
    ffi.Pointer<ACL> Acl,
    int StartingAceIndex,
    ffi.Pointer<ffi.Pointer<ffi.Void>> AppContainerAce,
    ffi.Pointer<ffi.Uint64> AppContainerAceIndex,
  ) {
    return (_GetAppContainerAce ??=
        _dylib.lookupFunction<_c_GetAppContainerAce, _dart_GetAppContainerAce>(
            'GetAppContainerAce'))(
      Acl,
      StartingAceIndex,
      AppContainerAce,
      AppContainerAceIndex,
    );
  }

  _dart_GetAppContainerAce? _GetAppContainerAce;

  int CheckTokenMembershipEx(
    ffi.Pointer<ffi.Void> TokenHandle,
    ffi.Pointer<ffi.Void> SidToCheck,
    int Flags,
    ffi.Pointer<ffi.Int32> IsMember,
  ) {
    return (_CheckTokenMembershipEx ??= _dylib.lookupFunction<
        _c_CheckTokenMembershipEx,
        _dart_CheckTokenMembershipEx>('CheckTokenMembershipEx'))(
      TokenHandle,
      SidToCheck,
      Flags,
      IsMember,
    );
  }

  _dart_CheckTokenMembershipEx? _CheckTokenMembershipEx;

  int ConvertToAutoInheritPrivateObjectSecurity(
    ffi.Pointer<ffi.Void> ParentDescriptor,
    ffi.Pointer<ffi.Void> CurrentSecurityDescriptor,
    ffi.Pointer<ffi.Pointer<ffi.Void>> NewSecurityDescriptor,
    ffi.Pointer<GUID> ObjectType,
    int IsDirectoryObject,
    ffi.Pointer<GENERIC_MAPPING> GenericMapping,
  ) {
    return (_ConvertToAutoInheritPrivateObjectSecurity ??=
        _dylib.lookupFunction<_c_ConvertToAutoInheritPrivateObjectSecurity,
                _dart_ConvertToAutoInheritPrivateObjectSecurity>(
            'ConvertToAutoInheritPrivateObjectSecurity'))(
      ParentDescriptor,
      CurrentSecurityDescriptor,
      NewSecurityDescriptor,
      ObjectType,
      IsDirectoryObject,
      GenericMapping,
    );
  }

  _dart_ConvertToAutoInheritPrivateObjectSecurity?
      _ConvertToAutoInheritPrivateObjectSecurity;

  int CopySid(
    int nDestinationSidLength,
    ffi.Pointer<ffi.Void> pDestinationSid,
    ffi.Pointer<ffi.Void> pSourceSid,
  ) {
    return (_CopySid ??=
        _dylib.lookupFunction<_c_CopySid, _dart_CopySid>('CopySid'))(
      nDestinationSidLength,
      pDestinationSid,
      pSourceSid,
    );
  }

  _dart_CopySid? _CopySid;

  int CreatePrivateObjectSecurity(
    ffi.Pointer<ffi.Void> ParentDescriptor,
    ffi.Pointer<ffi.Void> CreatorDescriptor,
    ffi.Pointer<ffi.Pointer<ffi.Void>> NewDescriptor,
    int IsDirectoryObject,
    ffi.Pointer<ffi.Void> Token,
    ffi.Pointer<GENERIC_MAPPING> GenericMapping,
  ) {
    return (_CreatePrivateObjectSecurity ??= _dylib.lookupFunction<
        _c_CreatePrivateObjectSecurity,
        _dart_CreatePrivateObjectSecurity>('CreatePrivateObjectSecurity'))(
      ParentDescriptor,
      CreatorDescriptor,
      NewDescriptor,
      IsDirectoryObject,
      Token,
      GenericMapping,
    );
  }

  _dart_CreatePrivateObjectSecurity? _CreatePrivateObjectSecurity;

  int CreatePrivateObjectSecurityEx(
    ffi.Pointer<ffi.Void> ParentDescriptor,
    ffi.Pointer<ffi.Void> CreatorDescriptor,
    ffi.Pointer<ffi.Pointer<ffi.Void>> NewDescriptor,
    ffi.Pointer<GUID> ObjectType,
    int IsContainerObject,
    int AutoInheritFlags,
    ffi.Pointer<ffi.Void> Token,
    ffi.Pointer<GENERIC_MAPPING> GenericMapping,
  ) {
    return (_CreatePrivateObjectSecurityEx ??= _dylib.lookupFunction<
        _c_CreatePrivateObjectSecurityEx,
        _dart_CreatePrivateObjectSecurityEx>('CreatePrivateObjectSecurityEx'))(
      ParentDescriptor,
      CreatorDescriptor,
      NewDescriptor,
      ObjectType,
      IsContainerObject,
      AutoInheritFlags,
      Token,
      GenericMapping,
    );
  }

  _dart_CreatePrivateObjectSecurityEx? _CreatePrivateObjectSecurityEx;

  int CreatePrivateObjectSecurityWithMultipleInheritance(
    ffi.Pointer<ffi.Void> ParentDescriptor,
    ffi.Pointer<ffi.Void> CreatorDescriptor,
    ffi.Pointer<ffi.Pointer<ffi.Void>> NewDescriptor,
    ffi.Pointer<ffi.Pointer<GUID>> ObjectTypes,
    int GuidCount,
    int IsContainerObject,
    int AutoInheritFlags,
    ffi.Pointer<ffi.Void> Token,
    ffi.Pointer<GENERIC_MAPPING> GenericMapping,
  ) {
    return (_CreatePrivateObjectSecurityWithMultipleInheritance ??=
        _dylib.lookupFunction<
                _c_CreatePrivateObjectSecurityWithMultipleInheritance,
                _dart_CreatePrivateObjectSecurityWithMultipleInheritance>(
            'CreatePrivateObjectSecurityWithMultipleInheritance'))(
      ParentDescriptor,
      CreatorDescriptor,
      NewDescriptor,
      ObjectTypes,
      GuidCount,
      IsContainerObject,
      AutoInheritFlags,
      Token,
      GenericMapping,
    );
  }

  _dart_CreatePrivateObjectSecurityWithMultipleInheritance?
      _CreatePrivateObjectSecurityWithMultipleInheritance;

  int CreateRestrictedToken(
    ffi.Pointer<ffi.Void> ExistingTokenHandle,
    int Flags,
    int DisableSidCount,
    ffi.Pointer<PSID_AND_ATTRIBUTES> SidsToDisable,
    int DeletePrivilegeCount,
    ffi.Pointer<PLUID_AND_ATTRIBUTES> PrivilegesToDelete,
    int RestrictedSidCount,
    ffi.Pointer<PSID_AND_ATTRIBUTES> SidsToRestrict,
    ffi.Pointer<ffi.Pointer<ffi.Void>> NewTokenHandle,
  ) {
    return (_CreateRestrictedToken ??= _dylib.lookupFunction<
        _c_CreateRestrictedToken,
        _dart_CreateRestrictedToken>('CreateRestrictedToken'))(
      ExistingTokenHandle,
      Flags,
      DisableSidCount,
      SidsToDisable,
      DeletePrivilegeCount,
      PrivilegesToDelete,
      RestrictedSidCount,
      SidsToRestrict,
      NewTokenHandle,
    );
  }

  _dart_CreateRestrictedToken? _CreateRestrictedToken;

  int CreateWellKnownSid(
    int WellKnownSidType,
    ffi.Pointer<ffi.Void> DomainSid,
    ffi.Pointer<ffi.Void> pSid,
    ffi.Pointer<ffi.Uint64> cbSid,
  ) {
    return (_CreateWellKnownSid ??=
        _dylib.lookupFunction<_c_CreateWellKnownSid, _dart_CreateWellKnownSid>(
            'CreateWellKnownSid'))(
      WellKnownSidType,
      DomainSid,
      pSid,
      cbSid,
    );
  }

  _dart_CreateWellKnownSid? _CreateWellKnownSid;

  int EqualDomainSid(
    ffi.Pointer<ffi.Void> pSid1,
    ffi.Pointer<ffi.Void> pSid2,
    ffi.Pointer<ffi.Int32> pfEqual,
  ) {
    return (_EqualDomainSid ??=
        _dylib.lookupFunction<_c_EqualDomainSid, _dart_EqualDomainSid>(
            'EqualDomainSid'))(
      pSid1,
      pSid2,
      pfEqual,
    );
  }

  _dart_EqualDomainSid? _EqualDomainSid;

  int DeleteAce(
    ffi.Pointer<ACL> pAcl,
    int dwAceIndex,
  ) {
    return (_DeleteAce ??=
        _dylib.lookupFunction<_c_DeleteAce, _dart_DeleteAce>('DeleteAce'))(
      pAcl,
      dwAceIndex,
    );
  }

  _dart_DeleteAce? _DeleteAce;

  int DestroyPrivateObjectSecurity(
    ffi.Pointer<ffi.Pointer<ffi.Void>> ObjectDescriptor,
  ) {
    return (_DestroyPrivateObjectSecurity ??= _dylib.lookupFunction<
        _c_DestroyPrivateObjectSecurity,
        _dart_DestroyPrivateObjectSecurity>('DestroyPrivateObjectSecurity'))(
      ObjectDescriptor,
    );
  }

  _dart_DestroyPrivateObjectSecurity? _DestroyPrivateObjectSecurity;

  int DuplicateToken(
    ffi.Pointer<ffi.Void> ExistingTokenHandle,
    int ImpersonationLevel,
    ffi.Pointer<ffi.Pointer<ffi.Void>> DuplicateTokenHandle,
  ) {
    return (_DuplicateToken ??=
        _dylib.lookupFunction<_c_DuplicateToken, _dart_DuplicateToken>(
            'DuplicateToken'))(
      ExistingTokenHandle,
      ImpersonationLevel,
      DuplicateTokenHandle,
    );
  }

  _dart_DuplicateToken? _DuplicateToken;

  int DuplicateTokenEx(
    ffi.Pointer<ffi.Void> hExistingToken,
    int dwDesiredAccess,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpTokenAttributes,
    int ImpersonationLevel,
    int TokenType,
    ffi.Pointer<ffi.Pointer<ffi.Void>> phNewToken,
  ) {
    return (_DuplicateTokenEx ??=
        _dylib.lookupFunction<_c_DuplicateTokenEx, _dart_DuplicateTokenEx>(
            'DuplicateTokenEx'))(
      hExistingToken,
      dwDesiredAccess,
      lpTokenAttributes,
      ImpersonationLevel,
      TokenType,
      phNewToken,
    );
  }

  _dart_DuplicateTokenEx? _DuplicateTokenEx;

  int EqualPrefixSid(
    ffi.Pointer<ffi.Void> pSid1,
    ffi.Pointer<ffi.Void> pSid2,
  ) {
    return (_EqualPrefixSid ??=
        _dylib.lookupFunction<_c_EqualPrefixSid, _dart_EqualPrefixSid>(
            'EqualPrefixSid'))(
      pSid1,
      pSid2,
    );
  }

  _dart_EqualPrefixSid? _EqualPrefixSid;

  int EqualSid(
    ffi.Pointer<ffi.Void> pSid1,
    ffi.Pointer<ffi.Void> pSid2,
  ) {
    return (_EqualSid ??=
        _dylib.lookupFunction<_c_EqualSid, _dart_EqualSid>('EqualSid'))(
      pSid1,
      pSid2,
    );
  }

  _dart_EqualSid? _EqualSid;

  int FindFirstFreeAce(
    ffi.Pointer<ACL> pAcl,
    ffi.Pointer<ffi.Pointer<ffi.Void>> pAce,
  ) {
    return (_FindFirstFreeAce ??=
        _dylib.lookupFunction<_c_FindFirstFreeAce, _dart_FindFirstFreeAce>(
            'FindFirstFreeAce'))(
      pAcl,
      pAce,
    );
  }

  _dart_FindFirstFreeAce? _FindFirstFreeAce;

  ffi.Pointer<ffi.Void> FreeSid(
    ffi.Pointer<ffi.Void> pSid,
  ) {
    return (_FreeSid ??=
        _dylib.lookupFunction<_c_FreeSid, _dart_FreeSid>('FreeSid'))(
      pSid,
    );
  }

  _dart_FreeSid? _FreeSid;

  int GetAce(
    ffi.Pointer<ACL> pAcl,
    int dwAceIndex,
    ffi.Pointer<ffi.Pointer<ffi.Void>> pAce,
  ) {
    return (_GetAce ??=
        _dylib.lookupFunction<_c_GetAce, _dart_GetAce>('GetAce'))(
      pAcl,
      dwAceIndex,
      pAce,
    );
  }

  _dart_GetAce? _GetAce;

  int GetAclInformation(
    ffi.Pointer<ACL> pAcl,
    ffi.Pointer<ffi.Void> pAclInformation,
    int nAclInformationLength,
    int dwAclInformationClass,
  ) {
    return (_GetAclInformation ??=
        _dylib.lookupFunction<_c_GetAclInformation, _dart_GetAclInformation>(
            'GetAclInformation'))(
      pAcl,
      pAclInformation,
      nAclInformationLength,
      dwAclInformationClass,
    );
  }

  _dart_GetAclInformation? _GetAclInformation;

  int GetFileSecurityW(
    ffi.Pointer<ffi.Uint16> lpFileName,
    int RequestedInformation,
    ffi.Pointer<ffi.Void> pSecurityDescriptor,
    int nLength,
    ffi.Pointer<ffi.Uint64> lpnLengthNeeded,
  ) {
    return (_GetFileSecurityW ??=
        _dylib.lookupFunction<_c_GetFileSecurityW, _dart_GetFileSecurityW>(
            'GetFileSecurityW'))(
      lpFileName,
      RequestedInformation,
      pSecurityDescriptor,
      nLength,
      lpnLengthNeeded,
    );
  }

  _dart_GetFileSecurityW? _GetFileSecurityW;

  int GetKernelObjectSecurity(
    ffi.Pointer<ffi.Void> Handle,
    int RequestedInformation,
    ffi.Pointer<ffi.Void> pSecurityDescriptor,
    int nLength,
    ffi.Pointer<ffi.Uint64> lpnLengthNeeded,
  ) {
    return (_GetKernelObjectSecurity ??= _dylib.lookupFunction<
        _c_GetKernelObjectSecurity,
        _dart_GetKernelObjectSecurity>('GetKernelObjectSecurity'))(
      Handle,
      RequestedInformation,
      pSecurityDescriptor,
      nLength,
      lpnLengthNeeded,
    );
  }

  _dart_GetKernelObjectSecurity? _GetKernelObjectSecurity;

  int GetLengthSid(
    ffi.Pointer<ffi.Void> pSid,
  ) {
    return (_GetLengthSid ??= _dylib
        .lookupFunction<_c_GetLengthSid, _dart_GetLengthSid>('GetLengthSid'))(
      pSid,
    );
  }

  _dart_GetLengthSid? _GetLengthSid;

  int GetPrivateObjectSecurity(
    ffi.Pointer<ffi.Void> ObjectDescriptor,
    int SecurityInformation,
    ffi.Pointer<ffi.Void> ResultantDescriptor,
    int DescriptorLength,
    ffi.Pointer<ffi.Uint64> ReturnLength,
  ) {
    return (_GetPrivateObjectSecurity ??= _dylib.lookupFunction<
        _c_GetPrivateObjectSecurity,
        _dart_GetPrivateObjectSecurity>('GetPrivateObjectSecurity'))(
      ObjectDescriptor,
      SecurityInformation,
      ResultantDescriptor,
      DescriptorLength,
      ReturnLength,
    );
  }

  _dart_GetPrivateObjectSecurity? _GetPrivateObjectSecurity;

  int GetSecurityDescriptorControl(
    ffi.Pointer<ffi.Void> pSecurityDescriptor,
    ffi.Pointer<ffi.Uint16> pControl,
    ffi.Pointer<ffi.Uint64> lpdwRevision,
  ) {
    return (_GetSecurityDescriptorControl ??= _dylib.lookupFunction<
        _c_GetSecurityDescriptorControl,
        _dart_GetSecurityDescriptorControl>('GetSecurityDescriptorControl'))(
      pSecurityDescriptor,
      pControl,
      lpdwRevision,
    );
  }

  _dart_GetSecurityDescriptorControl? _GetSecurityDescriptorControl;

  int GetSecurityDescriptorDacl(
    ffi.Pointer<ffi.Void> pSecurityDescriptor,
    ffi.Pointer<ffi.Int32> lpbDaclPresent,
    ffi.Pointer<ffi.Pointer<ACL>> pDacl,
    ffi.Pointer<ffi.Int32> lpbDaclDefaulted,
  ) {
    return (_GetSecurityDescriptorDacl ??= _dylib.lookupFunction<
        _c_GetSecurityDescriptorDacl,
        _dart_GetSecurityDescriptorDacl>('GetSecurityDescriptorDacl'))(
      pSecurityDescriptor,
      lpbDaclPresent,
      pDacl,
      lpbDaclDefaulted,
    );
  }

  _dart_GetSecurityDescriptorDacl? _GetSecurityDescriptorDacl;

  int GetSecurityDescriptorGroup(
    ffi.Pointer<ffi.Void> pSecurityDescriptor,
    ffi.Pointer<ffi.Pointer<ffi.Void>> pGroup,
    ffi.Pointer<ffi.Int32> lpbGroupDefaulted,
  ) {
    return (_GetSecurityDescriptorGroup ??= _dylib.lookupFunction<
        _c_GetSecurityDescriptorGroup,
        _dart_GetSecurityDescriptorGroup>('GetSecurityDescriptorGroup'))(
      pSecurityDescriptor,
      pGroup,
      lpbGroupDefaulted,
    );
  }

  _dart_GetSecurityDescriptorGroup? _GetSecurityDescriptorGroup;

  int GetSecurityDescriptorLength(
    ffi.Pointer<ffi.Void> pSecurityDescriptor,
  ) {
    return (_GetSecurityDescriptorLength ??= _dylib.lookupFunction<
        _c_GetSecurityDescriptorLength,
        _dart_GetSecurityDescriptorLength>('GetSecurityDescriptorLength'))(
      pSecurityDescriptor,
    );
  }

  _dart_GetSecurityDescriptorLength? _GetSecurityDescriptorLength;

  int GetSecurityDescriptorOwner(
    ffi.Pointer<ffi.Void> pSecurityDescriptor,
    ffi.Pointer<ffi.Pointer<ffi.Void>> pOwner,
    ffi.Pointer<ffi.Int32> lpbOwnerDefaulted,
  ) {
    return (_GetSecurityDescriptorOwner ??= _dylib.lookupFunction<
        _c_GetSecurityDescriptorOwner,
        _dart_GetSecurityDescriptorOwner>('GetSecurityDescriptorOwner'))(
      pSecurityDescriptor,
      pOwner,
      lpbOwnerDefaulted,
    );
  }

  _dart_GetSecurityDescriptorOwner? _GetSecurityDescriptorOwner;

  int GetSecurityDescriptorRMControl(
    ffi.Pointer<ffi.Void> SecurityDescriptor,
    ffi.Pointer<ffi.Uint8> RMControl,
  ) {
    return (_GetSecurityDescriptorRMControl ??= _dylib.lookupFunction<
            _c_GetSecurityDescriptorRMControl,
            _dart_GetSecurityDescriptorRMControl>(
        'GetSecurityDescriptorRMControl'))(
      SecurityDescriptor,
      RMControl,
    );
  }

  _dart_GetSecurityDescriptorRMControl? _GetSecurityDescriptorRMControl;

  int GetSecurityDescriptorSacl(
    ffi.Pointer<ffi.Void> pSecurityDescriptor,
    ffi.Pointer<ffi.Int32> lpbSaclPresent,
    ffi.Pointer<ffi.Pointer<ACL>> pSacl,
    ffi.Pointer<ffi.Int32> lpbSaclDefaulted,
  ) {
    return (_GetSecurityDescriptorSacl ??= _dylib.lookupFunction<
        _c_GetSecurityDescriptorSacl,
        _dart_GetSecurityDescriptorSacl>('GetSecurityDescriptorSacl'))(
      pSecurityDescriptor,
      lpbSaclPresent,
      pSacl,
      lpbSaclDefaulted,
    );
  }

  _dart_GetSecurityDescriptorSacl? _GetSecurityDescriptorSacl;

  ffi.Pointer<PSID_IDENTIFIER_AUTHORITY> GetSidIdentifierAuthority(
    ffi.Pointer<ffi.Void> pSid,
  ) {
    return (_GetSidIdentifierAuthority ??= _dylib.lookupFunction<
        _c_GetSidIdentifierAuthority,
        _dart_GetSidIdentifierAuthority>('GetSidIdentifierAuthority'))(
      pSid,
    );
  }

  _dart_GetSidIdentifierAuthority? _GetSidIdentifierAuthority;

  int GetSidLengthRequired(
    int nSubAuthorityCount,
  ) {
    return (_GetSidLengthRequired ??= _dylib.lookupFunction<
        _c_GetSidLengthRequired,
        _dart_GetSidLengthRequired>('GetSidLengthRequired'))(
      nSubAuthorityCount,
    );
  }

  _dart_GetSidLengthRequired? _GetSidLengthRequired;

  ffi.Pointer<ffi.Uint64> GetSidSubAuthority(
    ffi.Pointer<ffi.Void> pSid,
    int nSubAuthority,
  ) {
    return (_GetSidSubAuthority ??=
        _dylib.lookupFunction<_c_GetSidSubAuthority, _dart_GetSidSubAuthority>(
            'GetSidSubAuthority'))(
      pSid,
      nSubAuthority,
    );
  }

  _dart_GetSidSubAuthority? _GetSidSubAuthority;

  ffi.Pointer<ffi.Uint8> GetSidSubAuthorityCount(
    ffi.Pointer<ffi.Void> pSid,
  ) {
    return (_GetSidSubAuthorityCount ??= _dylib.lookupFunction<
        _c_GetSidSubAuthorityCount,
        _dart_GetSidSubAuthorityCount>('GetSidSubAuthorityCount'))(
      pSid,
    );
  }

  _dart_GetSidSubAuthorityCount? _GetSidSubAuthorityCount;

  int GetTokenInformation(
    ffi.Pointer<ffi.Void> TokenHandle,
    int TokenInformationClass,
    ffi.Pointer<ffi.Void> TokenInformation,
    int TokenInformationLength,
    ffi.Pointer<ffi.Uint64> ReturnLength,
  ) {
    return (_GetTokenInformation ??= _dylib.lookupFunction<
        _c_GetTokenInformation,
        _dart_GetTokenInformation>('GetTokenInformation'))(
      TokenHandle,
      TokenInformationClass,
      TokenInformation,
      TokenInformationLength,
      ReturnLength,
    );
  }

  _dart_GetTokenInformation? _GetTokenInformation;

  int GetWindowsAccountDomainSid(
    ffi.Pointer<ffi.Void> pSid,
    ffi.Pointer<ffi.Void> pDomainSid,
    ffi.Pointer<ffi.Uint64> cbDomainSid,
  ) {
    return (_GetWindowsAccountDomainSid ??= _dylib.lookupFunction<
        _c_GetWindowsAccountDomainSid,
        _dart_GetWindowsAccountDomainSid>('GetWindowsAccountDomainSid'))(
      pSid,
      pDomainSid,
      cbDomainSid,
    );
  }

  _dart_GetWindowsAccountDomainSid? _GetWindowsAccountDomainSid;

  int ImpersonateAnonymousToken(
    ffi.Pointer<ffi.Void> ThreadHandle,
  ) {
    return (_ImpersonateAnonymousToken ??= _dylib.lookupFunction<
        _c_ImpersonateAnonymousToken,
        _dart_ImpersonateAnonymousToken>('ImpersonateAnonymousToken'))(
      ThreadHandle,
    );
  }

  _dart_ImpersonateAnonymousToken? _ImpersonateAnonymousToken;

  int ImpersonateLoggedOnUser(
    ffi.Pointer<ffi.Void> hToken,
  ) {
    return (_ImpersonateLoggedOnUser ??= _dylib.lookupFunction<
        _c_ImpersonateLoggedOnUser,
        _dart_ImpersonateLoggedOnUser>('ImpersonateLoggedOnUser'))(
      hToken,
    );
  }

  _dart_ImpersonateLoggedOnUser? _ImpersonateLoggedOnUser;

  int ImpersonateSelf(
    int ImpersonationLevel,
  ) {
    return (_ImpersonateSelf ??=
        _dylib.lookupFunction<_c_ImpersonateSelf, _dart_ImpersonateSelf>(
            'ImpersonateSelf'))(
      ImpersonationLevel,
    );
  }

  _dart_ImpersonateSelf? _ImpersonateSelf;

  int InitializeAcl(
    ffi.Pointer<ACL> pAcl,
    int nAclLength,
    int dwAclRevision,
  ) {
    return (_InitializeAcl ??=
        _dylib.lookupFunction<_c_InitializeAcl, _dart_InitializeAcl>(
            'InitializeAcl'))(
      pAcl,
      nAclLength,
      dwAclRevision,
    );
  }

  _dart_InitializeAcl? _InitializeAcl;

  int InitializeSecurityDescriptor(
    ffi.Pointer<ffi.Void> pSecurityDescriptor,
    int dwRevision,
  ) {
    return (_InitializeSecurityDescriptor ??= _dylib.lookupFunction<
        _c_InitializeSecurityDescriptor,
        _dart_InitializeSecurityDescriptor>('InitializeSecurityDescriptor'))(
      pSecurityDescriptor,
      dwRevision,
    );
  }

  _dart_InitializeSecurityDescriptor? _InitializeSecurityDescriptor;

  int InitializeSid(
    ffi.Pointer<ffi.Void> Sid,
    ffi.Pointer<PSID_IDENTIFIER_AUTHORITY> pIdentifierAuthority,
    int nSubAuthorityCount,
  ) {
    return (_InitializeSid ??=
        _dylib.lookupFunction<_c_InitializeSid, _dart_InitializeSid>(
            'InitializeSid'))(
      Sid,
      pIdentifierAuthority,
      nSubAuthorityCount,
    );
  }

  _dart_InitializeSid? _InitializeSid;

  int IsTokenRestricted(
    ffi.Pointer<ffi.Void> TokenHandle,
  ) {
    return (_IsTokenRestricted ??=
        _dylib.lookupFunction<_c_IsTokenRestricted, _dart_IsTokenRestricted>(
            'IsTokenRestricted'))(
      TokenHandle,
    );
  }

  _dart_IsTokenRestricted? _IsTokenRestricted;

  int IsValidAcl(
    ffi.Pointer<ACL> pAcl,
  ) {
    return (_IsValidAcl ??=
        _dylib.lookupFunction<_c_IsValidAcl, _dart_IsValidAcl>('IsValidAcl'))(
      pAcl,
    );
  }

  _dart_IsValidAcl? _IsValidAcl;

  int IsValidSecurityDescriptor(
    ffi.Pointer<ffi.Void> pSecurityDescriptor,
  ) {
    return (_IsValidSecurityDescriptor ??= _dylib.lookupFunction<
        _c_IsValidSecurityDescriptor,
        _dart_IsValidSecurityDescriptor>('IsValidSecurityDescriptor'))(
      pSecurityDescriptor,
    );
  }

  _dart_IsValidSecurityDescriptor? _IsValidSecurityDescriptor;

  int IsValidSid(
    ffi.Pointer<ffi.Void> pSid,
  ) {
    return (_IsValidSid ??=
        _dylib.lookupFunction<_c_IsValidSid, _dart_IsValidSid>('IsValidSid'))(
      pSid,
    );
  }

  _dart_IsValidSid? _IsValidSid;

  int IsWellKnownSid(
    ffi.Pointer<ffi.Void> pSid,
    int WellKnownSidType,
  ) {
    return (_IsWellKnownSid ??=
        _dylib.lookupFunction<_c_IsWellKnownSid, _dart_IsWellKnownSid>(
            'IsWellKnownSid'))(
      pSid,
      WellKnownSidType,
    );
  }

  _dart_IsWellKnownSid? _IsWellKnownSid;

  int MakeAbsoluteSD(
    ffi.Pointer<ffi.Void> pSelfRelativeSecurityDescriptor,
    ffi.Pointer<ffi.Void> pAbsoluteSecurityDescriptor,
    ffi.Pointer<ffi.Uint64> lpdwAbsoluteSecurityDescriptorSize,
    ffi.Pointer<ACL> pDacl,
    ffi.Pointer<ffi.Uint64> lpdwDaclSize,
    ffi.Pointer<ACL> pSacl,
    ffi.Pointer<ffi.Uint64> lpdwSaclSize,
    ffi.Pointer<ffi.Void> pOwner,
    ffi.Pointer<ffi.Uint64> lpdwOwnerSize,
    ffi.Pointer<ffi.Void> pPrimaryGroup,
    ffi.Pointer<ffi.Uint64> lpdwPrimaryGroupSize,
  ) {
    return (_MakeAbsoluteSD ??=
        _dylib.lookupFunction<_c_MakeAbsoluteSD, _dart_MakeAbsoluteSD>(
            'MakeAbsoluteSD'))(
      pSelfRelativeSecurityDescriptor,
      pAbsoluteSecurityDescriptor,
      lpdwAbsoluteSecurityDescriptorSize,
      pDacl,
      lpdwDaclSize,
      pSacl,
      lpdwSaclSize,
      pOwner,
      lpdwOwnerSize,
      pPrimaryGroup,
      lpdwPrimaryGroupSize,
    );
  }

  _dart_MakeAbsoluteSD? _MakeAbsoluteSD;

  int MakeSelfRelativeSD(
    ffi.Pointer<ffi.Void> pAbsoluteSecurityDescriptor,
    ffi.Pointer<ffi.Void> pSelfRelativeSecurityDescriptor,
    ffi.Pointer<ffi.Uint64> lpdwBufferLength,
  ) {
    return (_MakeSelfRelativeSD ??=
        _dylib.lookupFunction<_c_MakeSelfRelativeSD, _dart_MakeSelfRelativeSD>(
            'MakeSelfRelativeSD'))(
      pAbsoluteSecurityDescriptor,
      pSelfRelativeSecurityDescriptor,
      lpdwBufferLength,
    );
  }

  _dart_MakeSelfRelativeSD? _MakeSelfRelativeSD;

  void MapGenericMask(
    ffi.Pointer<ffi.Uint64> AccessMask,
    ffi.Pointer<GENERIC_MAPPING> GenericMapping,
  ) {
    return (_MapGenericMask ??=
        _dylib.lookupFunction<_c_MapGenericMask, _dart_MapGenericMask>(
            'MapGenericMask'))(
      AccessMask,
      GenericMapping,
    );
  }

  _dart_MapGenericMask? _MapGenericMask;

  int ObjectCloseAuditAlarmW(
    ffi.Pointer<ffi.Uint16> SubsystemName,
    ffi.Pointer<ffi.Void> HandleId,
    int GenerateOnClose,
  ) {
    return (_ObjectCloseAuditAlarmW ??= _dylib.lookupFunction<
        _c_ObjectCloseAuditAlarmW,
        _dart_ObjectCloseAuditAlarmW>('ObjectCloseAuditAlarmW'))(
      SubsystemName,
      HandleId,
      GenerateOnClose,
    );
  }

  _dart_ObjectCloseAuditAlarmW? _ObjectCloseAuditAlarmW;

  int ObjectDeleteAuditAlarmW(
    ffi.Pointer<ffi.Uint16> SubsystemName,
    ffi.Pointer<ffi.Void> HandleId,
    int GenerateOnClose,
  ) {
    return (_ObjectDeleteAuditAlarmW ??= _dylib.lookupFunction<
        _c_ObjectDeleteAuditAlarmW,
        _dart_ObjectDeleteAuditAlarmW>('ObjectDeleteAuditAlarmW'))(
      SubsystemName,
      HandleId,
      GenerateOnClose,
    );
  }

  _dart_ObjectDeleteAuditAlarmW? _ObjectDeleteAuditAlarmW;

  int ObjectOpenAuditAlarmW(
    ffi.Pointer<ffi.Uint16> SubsystemName,
    ffi.Pointer<ffi.Void> HandleId,
    ffi.Pointer<ffi.Uint16> ObjectTypeName,
    ffi.Pointer<ffi.Uint16> ObjectName,
    ffi.Pointer<ffi.Void> pSecurityDescriptor,
    ffi.Pointer<ffi.Void> ClientToken,
    int DesiredAccess,
    int GrantedAccess,
    ffi.Pointer<PPRIVILEGE_SET> Privileges,
    int ObjectCreation,
    int AccessGranted,
    ffi.Pointer<ffi.Int32> GenerateOnClose,
  ) {
    return (_ObjectOpenAuditAlarmW ??= _dylib.lookupFunction<
        _c_ObjectOpenAuditAlarmW,
        _dart_ObjectOpenAuditAlarmW>('ObjectOpenAuditAlarmW'))(
      SubsystemName,
      HandleId,
      ObjectTypeName,
      ObjectName,
      pSecurityDescriptor,
      ClientToken,
      DesiredAccess,
      GrantedAccess,
      Privileges,
      ObjectCreation,
      AccessGranted,
      GenerateOnClose,
    );
  }

  _dart_ObjectOpenAuditAlarmW? _ObjectOpenAuditAlarmW;

  int ObjectPrivilegeAuditAlarmW(
    ffi.Pointer<ffi.Uint16> SubsystemName,
    ffi.Pointer<ffi.Void> HandleId,
    ffi.Pointer<ffi.Void> ClientToken,
    int DesiredAccess,
    ffi.Pointer<PPRIVILEGE_SET> Privileges,
    int AccessGranted,
  ) {
    return (_ObjectPrivilegeAuditAlarmW ??= _dylib.lookupFunction<
        _c_ObjectPrivilegeAuditAlarmW,
        _dart_ObjectPrivilegeAuditAlarmW>('ObjectPrivilegeAuditAlarmW'))(
      SubsystemName,
      HandleId,
      ClientToken,
      DesiredAccess,
      Privileges,
      AccessGranted,
    );
  }

  _dart_ObjectPrivilegeAuditAlarmW? _ObjectPrivilegeAuditAlarmW;

  int PrivilegeCheck(
    ffi.Pointer<ffi.Void> ClientToken,
    ffi.Pointer<PPRIVILEGE_SET> RequiredPrivileges,
    ffi.Pointer<ffi.Int32> pfResult,
  ) {
    return (_PrivilegeCheck ??=
        _dylib.lookupFunction<_c_PrivilegeCheck, _dart_PrivilegeCheck>(
            'PrivilegeCheck'))(
      ClientToken,
      RequiredPrivileges,
      pfResult,
    );
  }

  _dart_PrivilegeCheck? _PrivilegeCheck;

  int PrivilegedServiceAuditAlarmW(
    ffi.Pointer<ffi.Uint16> SubsystemName,
    ffi.Pointer<ffi.Uint16> ServiceName,
    ffi.Pointer<ffi.Void> ClientToken,
    ffi.Pointer<PPRIVILEGE_SET> Privileges,
    int AccessGranted,
  ) {
    return (_PrivilegedServiceAuditAlarmW ??= _dylib.lookupFunction<
        _c_PrivilegedServiceAuditAlarmW,
        _dart_PrivilegedServiceAuditAlarmW>('PrivilegedServiceAuditAlarmW'))(
      SubsystemName,
      ServiceName,
      ClientToken,
      Privileges,
      AccessGranted,
    );
  }

  _dart_PrivilegedServiceAuditAlarmW? _PrivilegedServiceAuditAlarmW;

  void QuerySecurityAccessMask(
    int SecurityInformation,
    ffi.Pointer<ffi.Uint64> DesiredAccess,
  ) {
    return (_QuerySecurityAccessMask ??= _dylib.lookupFunction<
        _c_QuerySecurityAccessMask,
        _dart_QuerySecurityAccessMask>('QuerySecurityAccessMask'))(
      SecurityInformation,
      DesiredAccess,
    );
  }

  _dart_QuerySecurityAccessMask? _QuerySecurityAccessMask;

  int RevertToSelf() {
    return (_RevertToSelf ??= _dylib
        .lookupFunction<_c_RevertToSelf, _dart_RevertToSelf>('RevertToSelf'))();
  }

  _dart_RevertToSelf? _RevertToSelf;

  int SetAclInformation(
    ffi.Pointer<ACL> pAcl,
    ffi.Pointer<ffi.Void> pAclInformation,
    int nAclInformationLength,
    int dwAclInformationClass,
  ) {
    return (_SetAclInformation ??=
        _dylib.lookupFunction<_c_SetAclInformation, _dart_SetAclInformation>(
            'SetAclInformation'))(
      pAcl,
      pAclInformation,
      nAclInformationLength,
      dwAclInformationClass,
    );
  }

  _dart_SetAclInformation? _SetAclInformation;

  int SetFileSecurityW(
    ffi.Pointer<ffi.Uint16> lpFileName,
    int SecurityInformation,
    ffi.Pointer<ffi.Void> pSecurityDescriptor,
  ) {
    return (_SetFileSecurityW ??=
        _dylib.lookupFunction<_c_SetFileSecurityW, _dart_SetFileSecurityW>(
            'SetFileSecurityW'))(
      lpFileName,
      SecurityInformation,
      pSecurityDescriptor,
    );
  }

  _dart_SetFileSecurityW? _SetFileSecurityW;

  int SetKernelObjectSecurity(
    ffi.Pointer<ffi.Void> Handle,
    int SecurityInformation,
    ffi.Pointer<ffi.Void> SecurityDescriptor,
  ) {
    return (_SetKernelObjectSecurity ??= _dylib.lookupFunction<
        _c_SetKernelObjectSecurity,
        _dart_SetKernelObjectSecurity>('SetKernelObjectSecurity'))(
      Handle,
      SecurityInformation,
      SecurityDescriptor,
    );
  }

  _dart_SetKernelObjectSecurity? _SetKernelObjectSecurity;

  int SetPrivateObjectSecurity(
    int SecurityInformation,
    ffi.Pointer<ffi.Void> ModificationDescriptor,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ObjectsSecurityDescriptor,
    ffi.Pointer<GENERIC_MAPPING> GenericMapping,
    ffi.Pointer<ffi.Void> Token,
  ) {
    return (_SetPrivateObjectSecurity ??= _dylib.lookupFunction<
        _c_SetPrivateObjectSecurity,
        _dart_SetPrivateObjectSecurity>('SetPrivateObjectSecurity'))(
      SecurityInformation,
      ModificationDescriptor,
      ObjectsSecurityDescriptor,
      GenericMapping,
      Token,
    );
  }

  _dart_SetPrivateObjectSecurity? _SetPrivateObjectSecurity;

  int SetPrivateObjectSecurityEx(
    int SecurityInformation,
    ffi.Pointer<ffi.Void> ModificationDescriptor,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ObjectsSecurityDescriptor,
    int AutoInheritFlags,
    ffi.Pointer<GENERIC_MAPPING> GenericMapping,
    ffi.Pointer<ffi.Void> Token,
  ) {
    return (_SetPrivateObjectSecurityEx ??= _dylib.lookupFunction<
        _c_SetPrivateObjectSecurityEx,
        _dart_SetPrivateObjectSecurityEx>('SetPrivateObjectSecurityEx'))(
      SecurityInformation,
      ModificationDescriptor,
      ObjectsSecurityDescriptor,
      AutoInheritFlags,
      GenericMapping,
      Token,
    );
  }

  _dart_SetPrivateObjectSecurityEx? _SetPrivateObjectSecurityEx;

  void SetSecurityAccessMask(
    int SecurityInformation,
    ffi.Pointer<ffi.Uint64> DesiredAccess,
  ) {
    return (_SetSecurityAccessMask ??= _dylib.lookupFunction<
        _c_SetSecurityAccessMask,
        _dart_SetSecurityAccessMask>('SetSecurityAccessMask'))(
      SecurityInformation,
      DesiredAccess,
    );
  }

  _dart_SetSecurityAccessMask? _SetSecurityAccessMask;

  int SetSecurityDescriptorControl(
    ffi.Pointer<ffi.Void> pSecurityDescriptor,
    int ControlBitsOfInterest,
    int ControlBitsToSet,
  ) {
    return (_SetSecurityDescriptorControl ??= _dylib.lookupFunction<
        _c_SetSecurityDescriptorControl,
        _dart_SetSecurityDescriptorControl>('SetSecurityDescriptorControl'))(
      pSecurityDescriptor,
      ControlBitsOfInterest,
      ControlBitsToSet,
    );
  }

  _dart_SetSecurityDescriptorControl? _SetSecurityDescriptorControl;

  int SetSecurityDescriptorDacl(
    ffi.Pointer<ffi.Void> pSecurityDescriptor,
    int bDaclPresent,
    ffi.Pointer<ACL> pDacl,
    int bDaclDefaulted,
  ) {
    return (_SetSecurityDescriptorDacl ??= _dylib.lookupFunction<
        _c_SetSecurityDescriptorDacl,
        _dart_SetSecurityDescriptorDacl>('SetSecurityDescriptorDacl'))(
      pSecurityDescriptor,
      bDaclPresent,
      pDacl,
      bDaclDefaulted,
    );
  }

  _dart_SetSecurityDescriptorDacl? _SetSecurityDescriptorDacl;

  int SetSecurityDescriptorGroup(
    ffi.Pointer<ffi.Void> pSecurityDescriptor,
    ffi.Pointer<ffi.Void> pGroup,
    int bGroupDefaulted,
  ) {
    return (_SetSecurityDescriptorGroup ??= _dylib.lookupFunction<
        _c_SetSecurityDescriptorGroup,
        _dart_SetSecurityDescriptorGroup>('SetSecurityDescriptorGroup'))(
      pSecurityDescriptor,
      pGroup,
      bGroupDefaulted,
    );
  }

  _dart_SetSecurityDescriptorGroup? _SetSecurityDescriptorGroup;

  int SetSecurityDescriptorOwner(
    ffi.Pointer<ffi.Void> pSecurityDescriptor,
    ffi.Pointer<ffi.Void> pOwner,
    int bOwnerDefaulted,
  ) {
    return (_SetSecurityDescriptorOwner ??= _dylib.lookupFunction<
        _c_SetSecurityDescriptorOwner,
        _dart_SetSecurityDescriptorOwner>('SetSecurityDescriptorOwner'))(
      pSecurityDescriptor,
      pOwner,
      bOwnerDefaulted,
    );
  }

  _dart_SetSecurityDescriptorOwner? _SetSecurityDescriptorOwner;

  int SetSecurityDescriptorRMControl(
    ffi.Pointer<ffi.Void> SecurityDescriptor,
    ffi.Pointer<ffi.Uint8> RMControl,
  ) {
    return (_SetSecurityDescriptorRMControl ??= _dylib.lookupFunction<
            _c_SetSecurityDescriptorRMControl,
            _dart_SetSecurityDescriptorRMControl>(
        'SetSecurityDescriptorRMControl'))(
      SecurityDescriptor,
      RMControl,
    );
  }

  _dart_SetSecurityDescriptorRMControl? _SetSecurityDescriptorRMControl;

  int SetSecurityDescriptorSacl(
    ffi.Pointer<ffi.Void> pSecurityDescriptor,
    int bSaclPresent,
    ffi.Pointer<ACL> pSacl,
    int bSaclDefaulted,
  ) {
    return (_SetSecurityDescriptorSacl ??= _dylib.lookupFunction<
        _c_SetSecurityDescriptorSacl,
        _dart_SetSecurityDescriptorSacl>('SetSecurityDescriptorSacl'))(
      pSecurityDescriptor,
      bSaclPresent,
      pSacl,
      bSaclDefaulted,
    );
  }

  _dart_SetSecurityDescriptorSacl? _SetSecurityDescriptorSacl;

  int SetTokenInformation(
    ffi.Pointer<ffi.Void> TokenHandle,
    int TokenInformationClass,
    ffi.Pointer<ffi.Void> TokenInformation,
    int TokenInformationLength,
  ) {
    return (_SetTokenInformation ??= _dylib.lookupFunction<
        _c_SetTokenInformation,
        _dart_SetTokenInformation>('SetTokenInformation'))(
      TokenHandle,
      TokenInformationClass,
      TokenInformation,
      TokenInformationLength,
    );
  }

  _dart_SetTokenInformation? _SetTokenInformation;

  int SetCachedSigningLevel(
    ffi.Pointer<ffi.Pointer<ffi.Void>> SourceFiles,
    int SourceFileCount,
    int Flags,
    ffi.Pointer<ffi.Void> TargetFile,
  ) {
    return (_SetCachedSigningLevel ??= _dylib.lookupFunction<
        _c_SetCachedSigningLevel,
        _dart_SetCachedSigningLevel>('SetCachedSigningLevel'))(
      SourceFiles,
      SourceFileCount,
      Flags,
      TargetFile,
    );
  }

  _dart_SetCachedSigningLevel? _SetCachedSigningLevel;

  int GetCachedSigningLevel(
    ffi.Pointer<ffi.Void> File,
    ffi.Pointer<ffi.Uint64> Flags,
    ffi.Pointer<ffi.Uint64> SigningLevel,
    ffi.Pointer<ffi.Uint8> Thumbprint,
    ffi.Pointer<ffi.Uint64> ThumbprintSize,
    ffi.Pointer<ffi.Uint64> ThumbprintAlgorithm,
  ) {
    return (_GetCachedSigningLevel ??= _dylib.lookupFunction<
        _c_GetCachedSigningLevel,
        _dart_GetCachedSigningLevel>('GetCachedSigningLevel'))(
      File,
      Flags,
      SigningLevel,
      Thumbprint,
      ThumbprintSize,
      ThumbprintAlgorithm,
    );
  }

  _dart_GetCachedSigningLevel? _GetCachedSigningLevel;

  int CveEventWrite(
    ffi.Pointer<ffi.Uint16> CveId,
    ffi.Pointer<ffi.Uint16> AdditionalDetails,
  ) {
    return (_CveEventWrite ??=
        _dylib.lookupFunction<_c_CveEventWrite, _dart_CveEventWrite>(
            'CveEventWrite'))(
      CveId,
      AdditionalDetails,
    );
  }

  _dart_CveEventWrite? _CveEventWrite;

  int DeriveCapabilitySidsFromName(
    ffi.Pointer<ffi.Uint16> CapName,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Void>>> CapabilityGroupSids,
    ffi.Pointer<ffi.Uint64> CapabilityGroupSidCount,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Void>>> CapabilitySids,
    ffi.Pointer<ffi.Uint64> CapabilitySidCount,
  ) {
    return (_DeriveCapabilitySidsFromName ??= _dylib.lookupFunction<
        _c_DeriveCapabilitySidsFromName,
        _dart_DeriveCapabilitySidsFromName>('DeriveCapabilitySidsFromName'))(
      CapName,
      CapabilityGroupSids,
      CapabilityGroupSidCount,
      CapabilitySids,
      CapabilitySidCount,
    );
  }

  _dart_DeriveCapabilitySidsFromName? _DeriveCapabilitySidsFromName;

  ffi.Pointer<ffi.Void> CreatePrivateNamespaceW(
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpPrivateNamespaceAttributes,
    ffi.Pointer<ffi.Void> lpBoundaryDescriptor,
    ffi.Pointer<ffi.Uint16> lpAliasPrefix,
  ) {
    return (_CreatePrivateNamespaceW ??= _dylib.lookupFunction<
        _c_CreatePrivateNamespaceW,
        _dart_CreatePrivateNamespaceW>('CreatePrivateNamespaceW'))(
      lpPrivateNamespaceAttributes,
      lpBoundaryDescriptor,
      lpAliasPrefix,
    );
  }

  _dart_CreatePrivateNamespaceW? _CreatePrivateNamespaceW;

  ffi.Pointer<ffi.Void> OpenPrivateNamespaceW(
    ffi.Pointer<ffi.Void> lpBoundaryDescriptor,
    ffi.Pointer<ffi.Uint16> lpAliasPrefix,
  ) {
    return (_OpenPrivateNamespaceW ??= _dylib.lookupFunction<
        _c_OpenPrivateNamespaceW,
        _dart_OpenPrivateNamespaceW>('OpenPrivateNamespaceW'))(
      lpBoundaryDescriptor,
      lpAliasPrefix,
    );
  }

  _dart_OpenPrivateNamespaceW? _OpenPrivateNamespaceW;

  int ClosePrivateNamespace(
    ffi.Pointer<ffi.Void> Handle,
    int Flags,
  ) {
    return (_ClosePrivateNamespace ??= _dylib.lookupFunction<
        _c_ClosePrivateNamespace,
        _dart_ClosePrivateNamespace>('ClosePrivateNamespace'))(
      Handle,
      Flags,
    );
  }

  _dart_ClosePrivateNamespace? _ClosePrivateNamespace;

  ffi.Pointer<ffi.Void> CreateBoundaryDescriptorW(
    ffi.Pointer<ffi.Uint16> Name,
    int Flags,
  ) {
    return (_CreateBoundaryDescriptorW ??= _dylib.lookupFunction<
        _c_CreateBoundaryDescriptorW,
        _dart_CreateBoundaryDescriptorW>('CreateBoundaryDescriptorW'))(
      Name,
      Flags,
    );
  }

  _dart_CreateBoundaryDescriptorW? _CreateBoundaryDescriptorW;

  int AddSIDToBoundaryDescriptor(
    ffi.Pointer<ffi.Pointer<ffi.Void>> BoundaryDescriptor,
    ffi.Pointer<ffi.Void> RequiredSid,
  ) {
    return (_AddSIDToBoundaryDescriptor ??= _dylib.lookupFunction<
        _c_AddSIDToBoundaryDescriptor,
        _dart_AddSIDToBoundaryDescriptor>('AddSIDToBoundaryDescriptor'))(
      BoundaryDescriptor,
      RequiredSid,
    );
  }

  _dart_AddSIDToBoundaryDescriptor? _AddSIDToBoundaryDescriptor;

  void DeleteBoundaryDescriptor(
    ffi.Pointer<ffi.Void> BoundaryDescriptor,
  ) {
    return (_DeleteBoundaryDescriptor ??= _dylib.lookupFunction<
        _c_DeleteBoundaryDescriptor,
        _dart_DeleteBoundaryDescriptor>('DeleteBoundaryDescriptor'))(
      BoundaryDescriptor,
    );
  }

  _dart_DeleteBoundaryDescriptor? _DeleteBoundaryDescriptor;

  int GetNumaHighestNodeNumber(
    ffi.Pointer<ffi.Uint64> HighestNodeNumber,
  ) {
    return (_GetNumaHighestNodeNumber ??= _dylib.lookupFunction<
        _c_GetNumaHighestNodeNumber,
        _dart_GetNumaHighestNodeNumber>('GetNumaHighestNodeNumber'))(
      HighestNodeNumber,
    );
  }

  _dart_GetNumaHighestNodeNumber? _GetNumaHighestNodeNumber;

  int GetNumaNodeProcessorMaskEx(
    int Node,
    ffi.Pointer<PGROUP_AFFINITY> ProcessorMask,
  ) {
    return (_GetNumaNodeProcessorMaskEx ??= _dylib.lookupFunction<
        _c_GetNumaNodeProcessorMaskEx,
        _dart_GetNumaNodeProcessorMaskEx>('GetNumaNodeProcessorMaskEx'))(
      Node,
      ProcessorMask,
    );
  }

  _dart_GetNumaNodeProcessorMaskEx? _GetNumaNodeProcessorMaskEx;

  int GetNumaProximityNodeEx(
    int ProximityId,
    ffi.Pointer<ffi.Uint16> NodeNumber,
  ) {
    return (_GetNumaProximityNodeEx ??= _dylib.lookupFunction<
        _c_GetNumaProximityNodeEx,
        _dart_GetNumaProximityNodeEx>('GetNumaProximityNodeEx'))(
      ProximityId,
      NodeNumber,
    );
  }

  _dart_GetNumaProximityNodeEx? _GetNumaProximityNodeEx;

  int GetProcessGroupAffinity(
    ffi.Pointer<ffi.Void> hProcess,
    ffi.Pointer<ffi.Uint16> GroupCount,
    ffi.Pointer<ffi.Uint16> GroupArray,
  ) {
    return (_GetProcessGroupAffinity ??= _dylib.lookupFunction<
        _c_GetProcessGroupAffinity,
        _dart_GetProcessGroupAffinity>('GetProcessGroupAffinity'))(
      hProcess,
      GroupCount,
      GroupArray,
    );
  }

  _dart_GetProcessGroupAffinity? _GetProcessGroupAffinity;

  int GetThreadGroupAffinity(
    ffi.Pointer<ffi.Void> hThread,
    ffi.Pointer<PGROUP_AFFINITY> GroupAffinity,
  ) {
    return (_GetThreadGroupAffinity ??= _dylib.lookupFunction<
        _c_GetThreadGroupAffinity,
        _dart_GetThreadGroupAffinity>('GetThreadGroupAffinity'))(
      hThread,
      GroupAffinity,
    );
  }

  _dart_GetThreadGroupAffinity? _GetThreadGroupAffinity;

  int SetThreadGroupAffinity(
    ffi.Pointer<ffi.Void> hThread,
    ffi.Pointer<PGROUP_AFFINITY> GroupAffinity,
    ffi.Pointer<PGROUP_AFFINITY> PreviousGroupAffinity,
  ) {
    return (_SetThreadGroupAffinity ??= _dylib.lookupFunction<
        _c_SetThreadGroupAffinity,
        _dart_SetThreadGroupAffinity>('SetThreadGroupAffinity'))(
      hThread,
      GroupAffinity,
      PreviousGroupAffinity,
    );
  }

  _dart_SetThreadGroupAffinity? _SetThreadGroupAffinity;

  int GetAppContainerNamedObjectPath(
    ffi.Pointer<ffi.Void> Token,
    ffi.Pointer<ffi.Void> AppContainerSid,
    int ObjectPathLength,
    ffi.Pointer<ffi.Uint16> ObjectPath,
    ffi.Pointer<ffi.Uint64> ReturnLength,
  ) {
    return (_GetAppContainerNamedObjectPath ??= _dylib.lookupFunction<
            _c_GetAppContainerNamedObjectPath,
            _dart_GetAppContainerNamedObjectPath>(
        'GetAppContainerNamedObjectPath'))(
      Token,
      AppContainerSid,
      ObjectPathLength,
      ObjectPath,
      ReturnLength,
    );
  }

  _dart_GetAppContainerNamedObjectPath? _GetAppContainerNamedObjectPath;

  int QueryThreadCycleTime(
    ffi.Pointer<ffi.Void> ThreadHandle,
    ffi.Pointer<ffi.Uint64> CycleTime,
  ) {
    return (_QueryThreadCycleTime ??= _dylib.lookupFunction<
        _c_QueryThreadCycleTime,
        _dart_QueryThreadCycleTime>('QueryThreadCycleTime'))(
      ThreadHandle,
      CycleTime,
    );
  }

  _dart_QueryThreadCycleTime? _QueryThreadCycleTime;

  int QueryProcessCycleTime(
    ffi.Pointer<ffi.Void> ProcessHandle,
    ffi.Pointer<ffi.Uint64> CycleTime,
  ) {
    return (_QueryProcessCycleTime ??= _dylib.lookupFunction<
        _c_QueryProcessCycleTime,
        _dart_QueryProcessCycleTime>('QueryProcessCycleTime'))(
      ProcessHandle,
      CycleTime,
    );
  }

  _dart_QueryProcessCycleTime? _QueryProcessCycleTime;

  int QueryIdleProcessorCycleTime(
    ffi.Pointer<ffi.Uint64> BufferLength,
    ffi.Pointer<ffi.Uint64> ProcessorIdleCycleTime,
  ) {
    return (_QueryIdleProcessorCycleTime ??= _dylib.lookupFunction<
        _c_QueryIdleProcessorCycleTime,
        _dart_QueryIdleProcessorCycleTime>('QueryIdleProcessorCycleTime'))(
      BufferLength,
      ProcessorIdleCycleTime,
    );
  }

  _dart_QueryIdleProcessorCycleTime? _QueryIdleProcessorCycleTime;

  int QueryIdleProcessorCycleTimeEx(
    int Group,
    ffi.Pointer<ffi.Uint64> BufferLength,
    ffi.Pointer<ffi.Uint64> ProcessorIdleCycleTime,
  ) {
    return (_QueryIdleProcessorCycleTimeEx ??= _dylib.lookupFunction<
        _c_QueryIdleProcessorCycleTimeEx,
        _dart_QueryIdleProcessorCycleTimeEx>('QueryIdleProcessorCycleTimeEx'))(
      Group,
      BufferLength,
      ProcessorIdleCycleTime,
    );
  }

  _dart_QueryIdleProcessorCycleTimeEx? _QueryIdleProcessorCycleTimeEx;

  void QueryInterruptTimePrecise(
    ffi.Pointer<ffi.Uint64> lpInterruptTimePrecise,
  ) {
    return (_QueryInterruptTimePrecise ??= _dylib.lookupFunction<
        _c_QueryInterruptTimePrecise,
        _dart_QueryInterruptTimePrecise>('QueryInterruptTimePrecise'))(
      lpInterruptTimePrecise,
    );
  }

  _dart_QueryInterruptTimePrecise? _QueryInterruptTimePrecise;

  void QueryUnbiasedInterruptTimePrecise(
    ffi.Pointer<ffi.Uint64> lpUnbiasedInterruptTimePrecise,
  ) {
    return (_QueryUnbiasedInterruptTimePrecise ??= _dylib.lookupFunction<
            _c_QueryUnbiasedInterruptTimePrecise,
            _dart_QueryUnbiasedInterruptTimePrecise>(
        'QueryUnbiasedInterruptTimePrecise'))(
      lpUnbiasedInterruptTimePrecise,
    );
  }

  _dart_QueryUnbiasedInterruptTimePrecise? _QueryUnbiasedInterruptTimePrecise;

  void QueryInterruptTime(
    ffi.Pointer<ffi.Uint64> lpInterruptTime,
  ) {
    return (_QueryInterruptTime ??=
        _dylib.lookupFunction<_c_QueryInterruptTime, _dart_QueryInterruptTime>(
            'QueryInterruptTime'))(
      lpInterruptTime,
    );
  }

  _dart_QueryInterruptTime? _QueryInterruptTime;

  int QueryUnbiasedInterruptTime(
    ffi.Pointer<ffi.Uint64> UnbiasedTime,
  ) {
    return (_QueryUnbiasedInterruptTime ??= _dylib.lookupFunction<
        _c_QueryUnbiasedInterruptTime,
        _dart_QueryUnbiasedInterruptTime>('QueryUnbiasedInterruptTime'))(
      UnbiasedTime,
    );
  }

  _dart_QueryUnbiasedInterruptTime? _QueryUnbiasedInterruptTime;

  int QueryAuxiliaryCounterFrequency(
    ffi.Pointer<ffi.Uint64> lpAuxiliaryCounterFrequency,
  ) {
    return (_QueryAuxiliaryCounterFrequency ??= _dylib.lookupFunction<
            _c_QueryAuxiliaryCounterFrequency,
            _dart_QueryAuxiliaryCounterFrequency>(
        'QueryAuxiliaryCounterFrequency'))(
      lpAuxiliaryCounterFrequency,
    );
  }

  _dart_QueryAuxiliaryCounterFrequency? _QueryAuxiliaryCounterFrequency;

  int ConvertAuxiliaryCounterToPerformanceCounter(
    int ullAuxiliaryCounterValue,
    ffi.Pointer<ffi.Uint64> lpPerformanceCounterValue,
    ffi.Pointer<ffi.Uint64> lpConversionError,
  ) {
    return (_ConvertAuxiliaryCounterToPerformanceCounter ??=
        _dylib.lookupFunction<_c_ConvertAuxiliaryCounterToPerformanceCounter,
                _dart_ConvertAuxiliaryCounterToPerformanceCounter>(
            'ConvertAuxiliaryCounterToPerformanceCounter'))(
      ullAuxiliaryCounterValue,
      lpPerformanceCounterValue,
      lpConversionError,
    );
  }

  _dart_ConvertAuxiliaryCounterToPerformanceCounter?
      _ConvertAuxiliaryCounterToPerformanceCounter;

  int ConvertPerformanceCounterToAuxiliaryCounter(
    int ullPerformanceCounterValue,
    ffi.Pointer<ffi.Uint64> lpAuxiliaryCounterValue,
    ffi.Pointer<ffi.Uint64> lpConversionError,
  ) {
    return (_ConvertPerformanceCounterToAuxiliaryCounter ??=
        _dylib.lookupFunction<_c_ConvertPerformanceCounterToAuxiliaryCounter,
                _dart_ConvertPerformanceCounterToAuxiliaryCounter>(
            'ConvertPerformanceCounterToAuxiliaryCounter'))(
      ullPerformanceCounterValue,
      lpAuxiliaryCounterValue,
      lpConversionError,
    );
  }

  _dart_ConvertPerformanceCounterToAuxiliaryCounter?
      _ConvertPerformanceCounterToAuxiliaryCounter;

  int WinMain(
    ffi.Pointer<HINSTANCE__> hInstance,
    ffi.Pointer<HINSTANCE__> hPrevInstance,
    ffi.Pointer<ffi.Int8> lpCmdLine,
    int nShowCmd,
  ) {
    return (_WinMain ??=
        _dylib.lookupFunction<_c_WinMain, _dart_WinMain>('WinMain'))(
      hInstance,
      hPrevInstance,
      lpCmdLine,
      nShowCmd,
    );
  }

  _dart_WinMain? _WinMain;

  int wWinMain(
    ffi.Pointer<HINSTANCE__> hInstance,
    ffi.Pointer<HINSTANCE__> hPrevInstance,
    ffi.Pointer<ffi.Uint16> lpCmdLine,
    int nShowCmd,
  ) {
    return (_wWinMain ??=
        _dylib.lookupFunction<_c_wWinMain, _dart_wWinMain>('wWinMain'))(
      hInstance,
      hPrevInstance,
      lpCmdLine,
      nShowCmd,
    );
  }

  _dart_wWinMain? _wWinMain;

  ffi.Pointer<ffi.Void> GlobalAlloc(
    int uFlags,
    int dwBytes,
  ) {
    return (_GlobalAlloc ??= _dylib
        .lookupFunction<_c_GlobalAlloc, _dart_GlobalAlloc>('GlobalAlloc'))(
      uFlags,
      dwBytes,
    );
  }

  _dart_GlobalAlloc? _GlobalAlloc;

  ffi.Pointer<ffi.Void> GlobalReAlloc(
    ffi.Pointer<ffi.Void> hMem,
    int dwBytes,
    int uFlags,
  ) {
    return (_GlobalReAlloc ??=
        _dylib.lookupFunction<_c_GlobalReAlloc, _dart_GlobalReAlloc>(
            'GlobalReAlloc'))(
      hMem,
      dwBytes,
      uFlags,
    );
  }

  _dart_GlobalReAlloc? _GlobalReAlloc;

  int GlobalSize(
    ffi.Pointer<ffi.Void> hMem,
  ) {
    return (_GlobalSize ??=
        _dylib.lookupFunction<_c_GlobalSize, _dart_GlobalSize>('GlobalSize'))(
      hMem,
    );
  }

  _dart_GlobalSize? _GlobalSize;

  int GlobalUnlock(
    ffi.Pointer<ffi.Void> hMem,
  ) {
    return (_GlobalUnlock ??= _dylib
        .lookupFunction<_c_GlobalUnlock, _dart_GlobalUnlock>('GlobalUnlock'))(
      hMem,
    );
  }

  _dart_GlobalUnlock? _GlobalUnlock;

  ffi.Pointer<ffi.Void> GlobalLock(
    ffi.Pointer<ffi.Void> hMem,
  ) {
    return (_GlobalLock ??=
        _dylib.lookupFunction<_c_GlobalLock, _dart_GlobalLock>('GlobalLock'))(
      hMem,
    );
  }

  _dart_GlobalLock? _GlobalLock;

  int GlobalFlags(
    ffi.Pointer<ffi.Void> hMem,
  ) {
    return (_GlobalFlags ??= _dylib
        .lookupFunction<_c_GlobalFlags, _dart_GlobalFlags>('GlobalFlags'))(
      hMem,
    );
  }

  _dart_GlobalFlags? _GlobalFlags;

  ffi.Pointer<ffi.Void> GlobalHandle(
    ffi.Pointer<ffi.Void> pMem,
  ) {
    return (_GlobalHandle ??= _dylib
        .lookupFunction<_c_GlobalHandle, _dart_GlobalHandle>('GlobalHandle'))(
      pMem,
    );
  }

  _dart_GlobalHandle? _GlobalHandle;

  ffi.Pointer<ffi.Void> GlobalFree(
    ffi.Pointer<ffi.Void> hMem,
  ) {
    return (_GlobalFree ??=
        _dylib.lookupFunction<_c_GlobalFree, _dart_GlobalFree>('GlobalFree'))(
      hMem,
    );
  }

  _dart_GlobalFree? _GlobalFree;

  int GlobalCompact(
    int dwMinFree,
  ) {
    return (_GlobalCompact ??=
        _dylib.lookupFunction<_c_GlobalCompact, _dart_GlobalCompact>(
            'GlobalCompact'))(
      dwMinFree,
    );
  }

  _dart_GlobalCompact? _GlobalCompact;

  void GlobalFix(
    ffi.Pointer<ffi.Void> hMem,
  ) {
    return (_GlobalFix ??=
        _dylib.lookupFunction<_c_GlobalFix, _dart_GlobalFix>('GlobalFix'))(
      hMem,
    );
  }

  _dart_GlobalFix? _GlobalFix;

  void GlobalUnfix(
    ffi.Pointer<ffi.Void> hMem,
  ) {
    return (_GlobalUnfix ??= _dylib
        .lookupFunction<_c_GlobalUnfix, _dart_GlobalUnfix>('GlobalUnfix'))(
      hMem,
    );
  }

  _dart_GlobalUnfix? _GlobalUnfix;

  ffi.Pointer<ffi.Void> GlobalWire(
    ffi.Pointer<ffi.Void> hMem,
  ) {
    return (_GlobalWire ??=
        _dylib.lookupFunction<_c_GlobalWire, _dart_GlobalWire>('GlobalWire'))(
      hMem,
    );
  }

  _dart_GlobalWire? _GlobalWire;

  int GlobalUnWire(
    ffi.Pointer<ffi.Void> hMem,
  ) {
    return (_GlobalUnWire ??= _dylib
        .lookupFunction<_c_GlobalUnWire, _dart_GlobalUnWire>('GlobalUnWire'))(
      hMem,
    );
  }

  _dart_GlobalUnWire? _GlobalUnWire;

  void GlobalMemoryStatus(
    ffi.Pointer<LPMEMORYSTATUS> lpBuffer,
  ) {
    return (_GlobalMemoryStatus ??=
        _dylib.lookupFunction<_c_GlobalMemoryStatus, _dart_GlobalMemoryStatus>(
            'GlobalMemoryStatus'))(
      lpBuffer,
    );
  }

  _dart_GlobalMemoryStatus? _GlobalMemoryStatus;

  ffi.Pointer<ffi.Void> LocalAlloc(
    int uFlags,
    int uBytes,
  ) {
    return (_LocalAlloc ??=
        _dylib.lookupFunction<_c_LocalAlloc, _dart_LocalAlloc>('LocalAlloc'))(
      uFlags,
      uBytes,
    );
  }

  _dart_LocalAlloc? _LocalAlloc;

  ffi.Pointer<ffi.Void> LocalReAlloc(
    ffi.Pointer<ffi.Void> hMem,
    int uBytes,
    int uFlags,
  ) {
    return (_LocalReAlloc ??= _dylib
        .lookupFunction<_c_LocalReAlloc, _dart_LocalReAlloc>('LocalReAlloc'))(
      hMem,
      uBytes,
      uFlags,
    );
  }

  _dart_LocalReAlloc? _LocalReAlloc;

  ffi.Pointer<ffi.Void> LocalLock(
    ffi.Pointer<ffi.Void> hMem,
  ) {
    return (_LocalLock ??=
        _dylib.lookupFunction<_c_LocalLock, _dart_LocalLock>('LocalLock'))(
      hMem,
    );
  }

  _dart_LocalLock? _LocalLock;

  ffi.Pointer<ffi.Void> LocalHandle(
    ffi.Pointer<ffi.Void> pMem,
  ) {
    return (_LocalHandle ??= _dylib
        .lookupFunction<_c_LocalHandle, _dart_LocalHandle>('LocalHandle'))(
      pMem,
    );
  }

  _dart_LocalHandle? _LocalHandle;

  int LocalUnlock(
    ffi.Pointer<ffi.Void> hMem,
  ) {
    return (_LocalUnlock ??= _dylib
        .lookupFunction<_c_LocalUnlock, _dart_LocalUnlock>('LocalUnlock'))(
      hMem,
    );
  }

  _dart_LocalUnlock? _LocalUnlock;

  int LocalSize(
    ffi.Pointer<ffi.Void> hMem,
  ) {
    return (_LocalSize ??=
        _dylib.lookupFunction<_c_LocalSize, _dart_LocalSize>('LocalSize'))(
      hMem,
    );
  }

  _dart_LocalSize? _LocalSize;

  int LocalFlags(
    ffi.Pointer<ffi.Void> hMem,
  ) {
    return (_LocalFlags ??=
        _dylib.lookupFunction<_c_LocalFlags, _dart_LocalFlags>('LocalFlags'))(
      hMem,
    );
  }

  _dart_LocalFlags? _LocalFlags;

  ffi.Pointer<ffi.Void> LocalFree(
    ffi.Pointer<ffi.Void> hMem,
  ) {
    return (_LocalFree ??=
        _dylib.lookupFunction<_c_LocalFree, _dart_LocalFree>('LocalFree'))(
      hMem,
    );
  }

  _dart_LocalFree? _LocalFree;

  int LocalShrink(
    ffi.Pointer<ffi.Void> hMem,
    int cbNewSize,
  ) {
    return (_LocalShrink ??= _dylib
        .lookupFunction<_c_LocalShrink, _dart_LocalShrink>('LocalShrink'))(
      hMem,
      cbNewSize,
    );
  }

  _dart_LocalShrink? _LocalShrink;

  int LocalCompact(
    int uMinFree,
  ) {
    return (_LocalCompact ??= _dylib
        .lookupFunction<_c_LocalCompact, _dart_LocalCompact>('LocalCompact'))(
      uMinFree,
    );
  }

  _dart_LocalCompact? _LocalCompact;

  int GetBinaryTypeA(
    ffi.Pointer<ffi.Int8> lpApplicationName,
    ffi.Pointer<ffi.Uint64> lpBinaryType,
  ) {
    return (_GetBinaryTypeA ??=
        _dylib.lookupFunction<_c_GetBinaryTypeA, _dart_GetBinaryTypeA>(
            'GetBinaryTypeA'))(
      lpApplicationName,
      lpBinaryType,
    );
  }

  _dart_GetBinaryTypeA? _GetBinaryTypeA;

  int GetBinaryTypeW(
    ffi.Pointer<ffi.Uint16> lpApplicationName,
    ffi.Pointer<ffi.Uint64> lpBinaryType,
  ) {
    return (_GetBinaryTypeW ??=
        _dylib.lookupFunction<_c_GetBinaryTypeW, _dart_GetBinaryTypeW>(
            'GetBinaryTypeW'))(
      lpApplicationName,
      lpBinaryType,
    );
  }

  _dart_GetBinaryTypeW? _GetBinaryTypeW;

  int GetShortPathNameA(
    ffi.Pointer<ffi.Int8> lpszLongPath,
    ffi.Pointer<ffi.Int8> lpszShortPath,
    int cchBuffer,
  ) {
    return (_GetShortPathNameA ??=
        _dylib.lookupFunction<_c_GetShortPathNameA, _dart_GetShortPathNameA>(
            'GetShortPathNameA'))(
      lpszLongPath,
      lpszShortPath,
      cchBuffer,
    );
  }

  _dart_GetShortPathNameA? _GetShortPathNameA;

  int GetLongPathNameTransactedA(
    ffi.Pointer<ffi.Int8> lpszShortPath,
    ffi.Pointer<ffi.Int8> lpszLongPath,
    int cchBuffer,
    ffi.Pointer<ffi.Void> hTransaction,
  ) {
    return (_GetLongPathNameTransactedA ??= _dylib.lookupFunction<
        _c_GetLongPathNameTransactedA,
        _dart_GetLongPathNameTransactedA>('GetLongPathNameTransactedA'))(
      lpszShortPath,
      lpszLongPath,
      cchBuffer,
      hTransaction,
    );
  }

  _dart_GetLongPathNameTransactedA? _GetLongPathNameTransactedA;

  int GetLongPathNameTransactedW(
    ffi.Pointer<ffi.Uint16> lpszShortPath,
    ffi.Pointer<ffi.Uint16> lpszLongPath,
    int cchBuffer,
    ffi.Pointer<ffi.Void> hTransaction,
  ) {
    return (_GetLongPathNameTransactedW ??= _dylib.lookupFunction<
        _c_GetLongPathNameTransactedW,
        _dart_GetLongPathNameTransactedW>('GetLongPathNameTransactedW'))(
      lpszShortPath,
      lpszLongPath,
      cchBuffer,
      hTransaction,
    );
  }

  _dart_GetLongPathNameTransactedW? _GetLongPathNameTransactedW;

  int GetProcessAffinityMask(
    ffi.Pointer<ffi.Void> hProcess,
    ffi.Pointer<ffi.Uint64> lpProcessAffinityMask,
    ffi.Pointer<ffi.Uint64> lpSystemAffinityMask,
  ) {
    return (_GetProcessAffinityMask ??= _dylib.lookupFunction<
        _c_GetProcessAffinityMask,
        _dart_GetProcessAffinityMask>('GetProcessAffinityMask'))(
      hProcess,
      lpProcessAffinityMask,
      lpSystemAffinityMask,
    );
  }

  _dart_GetProcessAffinityMask? _GetProcessAffinityMask;

  int SetProcessAffinityMask(
    ffi.Pointer<ffi.Void> hProcess,
    int dwProcessAffinityMask,
  ) {
    return (_SetProcessAffinityMask ??= _dylib.lookupFunction<
        _c_SetProcessAffinityMask,
        _dart_SetProcessAffinityMask>('SetProcessAffinityMask'))(
      hProcess,
      dwProcessAffinityMask,
    );
  }

  _dart_SetProcessAffinityMask? _SetProcessAffinityMask;

  int GetProcessIoCounters(
    ffi.Pointer<ffi.Void> hProcess,
    ffi.Pointer<IO_COUNTERS> lpIoCounters,
  ) {
    return (_GetProcessIoCounters ??= _dylib.lookupFunction<
        _c_GetProcessIoCounters,
        _dart_GetProcessIoCounters>('GetProcessIoCounters'))(
      hProcess,
      lpIoCounters,
    );
  }

  _dart_GetProcessIoCounters? _GetProcessIoCounters;

  int GetProcessWorkingSetSize(
    ffi.Pointer<ffi.Void> hProcess,
    ffi.Pointer<ffi.Uint64> lpMinimumWorkingSetSize,
    ffi.Pointer<ffi.Uint64> lpMaximumWorkingSetSize,
  ) {
    return (_GetProcessWorkingSetSize ??= _dylib.lookupFunction<
        _c_GetProcessWorkingSetSize,
        _dart_GetProcessWorkingSetSize>('GetProcessWorkingSetSize'))(
      hProcess,
      lpMinimumWorkingSetSize,
      lpMaximumWorkingSetSize,
    );
  }

  _dart_GetProcessWorkingSetSize? _GetProcessWorkingSetSize;

  int SetProcessWorkingSetSize(
    ffi.Pointer<ffi.Void> hProcess,
    int dwMinimumWorkingSetSize,
    int dwMaximumWorkingSetSize,
  ) {
    return (_SetProcessWorkingSetSize ??= _dylib.lookupFunction<
        _c_SetProcessWorkingSetSize,
        _dart_SetProcessWorkingSetSize>('SetProcessWorkingSetSize'))(
      hProcess,
      dwMinimumWorkingSetSize,
      dwMaximumWorkingSetSize,
    );
  }

  _dart_SetProcessWorkingSetSize? _SetProcessWorkingSetSize;

  void FatalExit(
    int ExitCode,
  ) {
    return (_FatalExit ??=
        _dylib.lookupFunction<_c_FatalExit, _dart_FatalExit>('FatalExit'))(
      ExitCode,
    );
  }

  _dart_FatalExit? _FatalExit;

  int SetEnvironmentStringsA(
    ffi.Pointer<ffi.Int8> NewEnvironment,
  ) {
    return (_SetEnvironmentStringsA ??= _dylib.lookupFunction<
        _c_SetEnvironmentStringsA,
        _dart_SetEnvironmentStringsA>('SetEnvironmentStringsA'))(
      NewEnvironment,
    );
  }

  _dart_SetEnvironmentStringsA? _SetEnvironmentStringsA;

  void SwitchToFiber(
    ffi.Pointer<ffi.Void> lpFiber,
  ) {
    return (_SwitchToFiber ??=
        _dylib.lookupFunction<_c_SwitchToFiber, _dart_SwitchToFiber>(
            'SwitchToFiber'))(
      lpFiber,
    );
  }

  _dart_SwitchToFiber? _SwitchToFiber;

  void DeleteFiber(
    ffi.Pointer<ffi.Void> lpFiber,
  ) {
    return (_DeleteFiber ??= _dylib
        .lookupFunction<_c_DeleteFiber, _dart_DeleteFiber>('DeleteFiber'))(
      lpFiber,
    );
  }

  _dart_DeleteFiber? _DeleteFiber;

  int ConvertFiberToThread() {
    return (_ConvertFiberToThread ??= _dylib.lookupFunction<
        _c_ConvertFiberToThread,
        _dart_ConvertFiberToThread>('ConvertFiberToThread'))();
  }

  _dart_ConvertFiberToThread? _ConvertFiberToThread;

  ffi.Pointer<ffi.Void> CreateFiberEx(
    int dwStackCommitSize,
    int dwStackReserveSize,
    int dwFlags,
    ffi.Pointer<ffi.NativeFunction<LPFIBER_START_ROUTINE>> lpStartAddress,
    ffi.Pointer<ffi.Void> lpParameter,
  ) {
    return (_CreateFiberEx ??=
        _dylib.lookupFunction<_c_CreateFiberEx, _dart_CreateFiberEx>(
            'CreateFiberEx'))(
      dwStackCommitSize,
      dwStackReserveSize,
      dwFlags,
      lpStartAddress,
      lpParameter,
    );
  }

  _dart_CreateFiberEx? _CreateFiberEx;

  ffi.Pointer<ffi.Void> ConvertThreadToFiberEx(
    ffi.Pointer<ffi.Void> lpParameter,
    int dwFlags,
  ) {
    return (_ConvertThreadToFiberEx ??= _dylib.lookupFunction<
        _c_ConvertThreadToFiberEx,
        _dart_ConvertThreadToFiberEx>('ConvertThreadToFiberEx'))(
      lpParameter,
      dwFlags,
    );
  }

  _dart_ConvertThreadToFiberEx? _ConvertThreadToFiberEx;

  ffi.Pointer<ffi.Void> CreateFiber(
    int dwStackSize,
    ffi.Pointer<ffi.NativeFunction<LPFIBER_START_ROUTINE>> lpStartAddress,
    ffi.Pointer<ffi.Void> lpParameter,
  ) {
    return (_CreateFiber ??= _dylib
        .lookupFunction<_c_CreateFiber, _dart_CreateFiber>('CreateFiber'))(
      dwStackSize,
      lpStartAddress,
      lpParameter,
    );
  }

  _dart_CreateFiber? _CreateFiber;

  ffi.Pointer<ffi.Void> ConvertThreadToFiber(
    ffi.Pointer<ffi.Void> lpParameter,
  ) {
    return (_ConvertThreadToFiber ??= _dylib.lookupFunction<
        _c_ConvertThreadToFiber,
        _dart_ConvertThreadToFiber>('ConvertThreadToFiber'))(
      lpParameter,
    );
  }

  _dart_ConvertThreadToFiber? _ConvertThreadToFiber;

  int CreateUmsCompletionList(
    ffi.Pointer<ffi.Pointer<ffi.Void>> UmsCompletionList,
  ) {
    return (_CreateUmsCompletionList ??= _dylib.lookupFunction<
        _c_CreateUmsCompletionList,
        _dart_CreateUmsCompletionList>('CreateUmsCompletionList'))(
      UmsCompletionList,
    );
  }

  _dart_CreateUmsCompletionList? _CreateUmsCompletionList;

  int DequeueUmsCompletionListItems(
    ffi.Pointer<ffi.Void> UmsCompletionList,
    int WaitTimeOut,
    ffi.Pointer<ffi.Pointer<ffi.Void>> UmsThreadList,
  ) {
    return (_DequeueUmsCompletionListItems ??= _dylib.lookupFunction<
        _c_DequeueUmsCompletionListItems,
        _dart_DequeueUmsCompletionListItems>('DequeueUmsCompletionListItems'))(
      UmsCompletionList,
      WaitTimeOut,
      UmsThreadList,
    );
  }

  _dart_DequeueUmsCompletionListItems? _DequeueUmsCompletionListItems;

  int GetUmsCompletionListEvent(
    ffi.Pointer<ffi.Void> UmsCompletionList,
    ffi.Pointer<ffi.Pointer<ffi.Void>> UmsCompletionEvent,
  ) {
    return (_GetUmsCompletionListEvent ??= _dylib.lookupFunction<
        _c_GetUmsCompletionListEvent,
        _dart_GetUmsCompletionListEvent>('GetUmsCompletionListEvent'))(
      UmsCompletionList,
      UmsCompletionEvent,
    );
  }

  _dart_GetUmsCompletionListEvent? _GetUmsCompletionListEvent;

  int ExecuteUmsThread(
    ffi.Pointer<ffi.Void> UmsThread,
  ) {
    return (_ExecuteUmsThread ??=
        _dylib.lookupFunction<_c_ExecuteUmsThread, _dart_ExecuteUmsThread>(
            'ExecuteUmsThread'))(
      UmsThread,
    );
  }

  _dart_ExecuteUmsThread? _ExecuteUmsThread;

  int UmsThreadYield(
    ffi.Pointer<ffi.Void> SchedulerParam,
  ) {
    return (_UmsThreadYield ??=
        _dylib.lookupFunction<_c_UmsThreadYield, _dart_UmsThreadYield>(
            'UmsThreadYield'))(
      SchedulerParam,
    );
  }

  _dart_UmsThreadYield? _UmsThreadYield;

  int DeleteUmsCompletionList(
    ffi.Pointer<ffi.Void> UmsCompletionList,
  ) {
    return (_DeleteUmsCompletionList ??= _dylib.lookupFunction<
        _c_DeleteUmsCompletionList,
        _dart_DeleteUmsCompletionList>('DeleteUmsCompletionList'))(
      UmsCompletionList,
    );
  }

  _dart_DeleteUmsCompletionList? _DeleteUmsCompletionList;

  ffi.Pointer<ffi.Void> GetCurrentUmsThread() {
    return (_GetCurrentUmsThread ??= _dylib.lookupFunction<
        _c_GetCurrentUmsThread,
        _dart_GetCurrentUmsThread>('GetCurrentUmsThread'))();
  }

  _dart_GetCurrentUmsThread? _GetCurrentUmsThread;

  ffi.Pointer<ffi.Void> GetNextUmsListItem(
    ffi.Pointer<ffi.Void> UmsContext,
  ) {
    return (_GetNextUmsListItem ??=
        _dylib.lookupFunction<_c_GetNextUmsListItem, _dart_GetNextUmsListItem>(
            'GetNextUmsListItem'))(
      UmsContext,
    );
  }

  _dart_GetNextUmsListItem? _GetNextUmsListItem;

  int QueryUmsThreadInformation(
    ffi.Pointer<ffi.Void> UmsThread,
    int UmsThreadInfoClass,
    ffi.Pointer<ffi.Void> UmsThreadInformation,
    int UmsThreadInformationLength,
    ffi.Pointer<ffi.Uint64> ReturnLength,
  ) {
    return (_QueryUmsThreadInformation ??= _dylib.lookupFunction<
        _c_QueryUmsThreadInformation,
        _dart_QueryUmsThreadInformation>('QueryUmsThreadInformation'))(
      UmsThread,
      UmsThreadInfoClass,
      UmsThreadInformation,
      UmsThreadInformationLength,
      ReturnLength,
    );
  }

  _dart_QueryUmsThreadInformation? _QueryUmsThreadInformation;

  int SetUmsThreadInformation(
    ffi.Pointer<ffi.Void> UmsThread,
    int UmsThreadInfoClass,
    ffi.Pointer<ffi.Void> UmsThreadInformation,
    int UmsThreadInformationLength,
  ) {
    return (_SetUmsThreadInformation ??= _dylib.lookupFunction<
        _c_SetUmsThreadInformation,
        _dart_SetUmsThreadInformation>('SetUmsThreadInformation'))(
      UmsThread,
      UmsThreadInfoClass,
      UmsThreadInformation,
      UmsThreadInformationLength,
    );
  }

  _dart_SetUmsThreadInformation? _SetUmsThreadInformation;

  int DeleteUmsThreadContext(
    ffi.Pointer<ffi.Void> UmsThread,
  ) {
    return (_DeleteUmsThreadContext ??= _dylib.lookupFunction<
        _c_DeleteUmsThreadContext,
        _dart_DeleteUmsThreadContext>('DeleteUmsThreadContext'))(
      UmsThread,
    );
  }

  _dart_DeleteUmsThreadContext? _DeleteUmsThreadContext;

  int CreateUmsThreadContext(
    ffi.Pointer<ffi.Pointer<ffi.Void>> lpUmsThread,
  ) {
    return (_CreateUmsThreadContext ??= _dylib.lookupFunction<
        _c_CreateUmsThreadContext,
        _dart_CreateUmsThreadContext>('CreateUmsThreadContext'))(
      lpUmsThread,
    );
  }

  _dart_CreateUmsThreadContext? _CreateUmsThreadContext;

  int EnterUmsSchedulingMode(
    ffi.Pointer<PUMS_SCHEDULER_STARTUP_INFO> SchedulerStartupInfo,
  ) {
    return (_EnterUmsSchedulingMode ??= _dylib.lookupFunction<
        _c_EnterUmsSchedulingMode,
        _dart_EnterUmsSchedulingMode>('EnterUmsSchedulingMode'))(
      SchedulerStartupInfo,
    );
  }

  _dart_EnterUmsSchedulingMode? _EnterUmsSchedulingMode;

  int GetUmsSystemThreadInformation(
    ffi.Pointer<ffi.Void> ThreadHandle,
    ffi.Pointer<PUMS_SYSTEM_THREAD_INFORMATION> SystemThreadInfo,
  ) {
    return (_GetUmsSystemThreadInformation ??= _dylib.lookupFunction<
        _c_GetUmsSystemThreadInformation,
        _dart_GetUmsSystemThreadInformation>('GetUmsSystemThreadInformation'))(
      ThreadHandle,
      SystemThreadInfo,
    );
  }

  _dart_GetUmsSystemThreadInformation? _GetUmsSystemThreadInformation;

  int SetThreadAffinityMask(
    ffi.Pointer<ffi.Void> hThread,
    int dwThreadAffinityMask,
  ) {
    return (_SetThreadAffinityMask ??= _dylib.lookupFunction<
        _c_SetThreadAffinityMask,
        _dart_SetThreadAffinityMask>('SetThreadAffinityMask'))(
      hThread,
      dwThreadAffinityMask,
    );
  }

  _dart_SetThreadAffinityMask? _SetThreadAffinityMask;

  int SetProcessDEPPolicy(
    int dwFlags,
  ) {
    return (_SetProcessDEPPolicy ??= _dylib.lookupFunction<
        _c_SetProcessDEPPolicy,
        _dart_SetProcessDEPPolicy>('SetProcessDEPPolicy'))(
      dwFlags,
    );
  }

  _dart_SetProcessDEPPolicy? _SetProcessDEPPolicy;

  int GetProcessDEPPolicy(
    ffi.Pointer<ffi.Void> hProcess,
    ffi.Pointer<ffi.Uint64> lpFlags,
    ffi.Pointer<ffi.Int32> lpPermanent,
  ) {
    return (_GetProcessDEPPolicy ??= _dylib.lookupFunction<
        _c_GetProcessDEPPolicy,
        _dart_GetProcessDEPPolicy>('GetProcessDEPPolicy'))(
      hProcess,
      lpFlags,
      lpPermanent,
    );
  }

  _dart_GetProcessDEPPolicy? _GetProcessDEPPolicy;

  int RequestWakeupLatency(
    int latency,
  ) {
    return (_RequestWakeupLatency ??= _dylib.lookupFunction<
        _c_RequestWakeupLatency,
        _dart_RequestWakeupLatency>('RequestWakeupLatency'))(
      latency,
    );
  }

  _dart_RequestWakeupLatency? _RequestWakeupLatency;

  int IsSystemResumeAutomatic() {
    return (_IsSystemResumeAutomatic ??= _dylib.lookupFunction<
        _c_IsSystemResumeAutomatic,
        _dart_IsSystemResumeAutomatic>('IsSystemResumeAutomatic'))();
  }

  _dart_IsSystemResumeAutomatic? _IsSystemResumeAutomatic;

  int GetThreadSelectorEntry(
    ffi.Pointer<ffi.Void> hThread,
    int dwSelector,
    ffi.Pointer<ffi.Void> lpSelectorEntry,
  ) {
    return (_GetThreadSelectorEntry ??= _dylib.lookupFunction<
        _c_GetThreadSelectorEntry,
        _dart_GetThreadSelectorEntry>('GetThreadSelectorEntry'))(
      hThread,
      dwSelector,
      lpSelectorEntry,
    );
  }

  _dart_GetThreadSelectorEntry? _GetThreadSelectorEntry;

  int SetThreadExecutionState(
    int esFlags,
  ) {
    return (_SetThreadExecutionState ??= _dylib.lookupFunction<
        _c_SetThreadExecutionState,
        _dart_SetThreadExecutionState>('SetThreadExecutionState'))(
      esFlags,
    );
  }

  _dart_SetThreadExecutionState? _SetThreadExecutionState;

  ffi.Pointer<ffi.Void> PowerCreateRequest(
    ffi.Pointer<PREASON_CONTEXT> Context,
  ) {
    return (_PowerCreateRequest ??=
        _dylib.lookupFunction<_c_PowerCreateRequest, _dart_PowerCreateRequest>(
            'PowerCreateRequest'))(
      Context,
    );
  }

  _dart_PowerCreateRequest? _PowerCreateRequest;

  int PowerSetRequest(
    ffi.Pointer<ffi.Void> PowerRequest,
    int RequestType,
  ) {
    return (_PowerSetRequest ??=
        _dylib.lookupFunction<_c_PowerSetRequest, _dart_PowerSetRequest>(
            'PowerSetRequest'))(
      PowerRequest,
      RequestType,
    );
  }

  _dart_PowerSetRequest? _PowerSetRequest;

  int PowerClearRequest(
    ffi.Pointer<ffi.Void> PowerRequest,
    int RequestType,
  ) {
    return (_PowerClearRequest ??=
        _dylib.lookupFunction<_c_PowerClearRequest, _dart_PowerClearRequest>(
            'PowerClearRequest'))(
      PowerRequest,
      RequestType,
    );
  }

  _dart_PowerClearRequest? _PowerClearRequest;

  int SetFileCompletionNotificationModes(
    ffi.Pointer<ffi.Void> FileHandle,
    int Flags,
  ) {
    return (_SetFileCompletionNotificationModes ??= _dylib.lookupFunction<
            _c_SetFileCompletionNotificationModes,
            _dart_SetFileCompletionNotificationModes>(
        'SetFileCompletionNotificationModes'))(
      FileHandle,
      Flags,
    );
  }

  _dart_SetFileCompletionNotificationModes? _SetFileCompletionNotificationModes;

  int Wow64GetThreadSelectorEntry(
    ffi.Pointer<ffi.Void> hThread,
    int dwSelector,
    ffi.Pointer<PWOW64_LDT_ENTRY> lpSelectorEntry,
  ) {
    return (_Wow64GetThreadSelectorEntry ??= _dylib.lookupFunction<
        _c_Wow64GetThreadSelectorEntry,
        _dart_Wow64GetThreadSelectorEntry>('Wow64GetThreadSelectorEntry'))(
      hThread,
      dwSelector,
      lpSelectorEntry,
    );
  }

  _dart_Wow64GetThreadSelectorEntry? _Wow64GetThreadSelectorEntry;

  int DebugSetProcessKillOnExit(
    int KillOnExit,
  ) {
    return (_DebugSetProcessKillOnExit ??= _dylib.lookupFunction<
        _c_DebugSetProcessKillOnExit,
        _dart_DebugSetProcessKillOnExit>('DebugSetProcessKillOnExit'))(
      KillOnExit,
    );
  }

  _dart_DebugSetProcessKillOnExit? _DebugSetProcessKillOnExit;

  int DebugBreakProcess(
    ffi.Pointer<ffi.Void> Process,
  ) {
    return (_DebugBreakProcess ??=
        _dylib.lookupFunction<_c_DebugBreakProcess, _dart_DebugBreakProcess>(
            'DebugBreakProcess'))(
      Process,
    );
  }

  _dart_DebugBreakProcess? _DebugBreakProcess;

  int PulseEvent(
    ffi.Pointer<ffi.Void> hEvent,
  ) {
    return (_PulseEvent ??=
        _dylib.lookupFunction<_c_PulseEvent, _dart_PulseEvent>('PulseEvent'))(
      hEvent,
    );
  }

  _dart_PulseEvent? _PulseEvent;

  int GlobalDeleteAtom(
    int nAtom,
  ) {
    return (_GlobalDeleteAtom ??=
        _dylib.lookupFunction<_c_GlobalDeleteAtom, _dart_GlobalDeleteAtom>(
            'GlobalDeleteAtom'))(
      nAtom,
    );
  }

  _dart_GlobalDeleteAtom? _GlobalDeleteAtom;

  int InitAtomTable(
    int nSize,
  ) {
    return (_InitAtomTable ??=
        _dylib.lookupFunction<_c_InitAtomTable, _dart_InitAtomTable>(
            'InitAtomTable'))(
      nSize,
    );
  }

  _dart_InitAtomTable? _InitAtomTable;

  int DeleteAtom(
    int nAtom,
  ) {
    return (_DeleteAtom ??=
        _dylib.lookupFunction<_c_DeleteAtom, _dart_DeleteAtom>('DeleteAtom'))(
      nAtom,
    );
  }

  _dart_DeleteAtom? _DeleteAtom;

  int SetHandleCount(
    int uNumber,
  ) {
    return (_SetHandleCount ??=
        _dylib.lookupFunction<_c_SetHandleCount, _dart_SetHandleCount>(
            'SetHandleCount'))(
      uNumber,
    );
  }

  _dart_SetHandleCount? _SetHandleCount;

  int RequestDeviceWakeup(
    ffi.Pointer<ffi.Void> hDevice,
  ) {
    return (_RequestDeviceWakeup ??= _dylib.lookupFunction<
        _c_RequestDeviceWakeup,
        _dart_RequestDeviceWakeup>('RequestDeviceWakeup'))(
      hDevice,
    );
  }

  _dart_RequestDeviceWakeup? _RequestDeviceWakeup;

  int CancelDeviceWakeupRequest(
    ffi.Pointer<ffi.Void> hDevice,
  ) {
    return (_CancelDeviceWakeupRequest ??= _dylib.lookupFunction<
        _c_CancelDeviceWakeupRequest,
        _dart_CancelDeviceWakeupRequest>('CancelDeviceWakeupRequest'))(
      hDevice,
    );
  }

  _dart_CancelDeviceWakeupRequest? _CancelDeviceWakeupRequest;

  int GetDevicePowerState(
    ffi.Pointer<ffi.Void> hDevice,
    ffi.Pointer<ffi.Int32> pfOn,
  ) {
    return (_GetDevicePowerState ??= _dylib.lookupFunction<
        _c_GetDevicePowerState,
        _dart_GetDevicePowerState>('GetDevicePowerState'))(
      hDevice,
      pfOn,
    );
  }

  _dart_GetDevicePowerState? _GetDevicePowerState;

  int SetMessageWaitingIndicator(
    ffi.Pointer<ffi.Void> hMsgIndicator,
    int ulMsgCount,
  ) {
    return (_SetMessageWaitingIndicator ??= _dylib.lookupFunction<
        _c_SetMessageWaitingIndicator,
        _dart_SetMessageWaitingIndicator>('SetMessageWaitingIndicator'))(
      hMsgIndicator,
      ulMsgCount,
    );
  }

  _dart_SetMessageWaitingIndicator? _SetMessageWaitingIndicator;

  int SetFileShortNameA(
    ffi.Pointer<ffi.Void> hFile,
    ffi.Pointer<ffi.Int8> lpShortName,
  ) {
    return (_SetFileShortNameA ??=
        _dylib.lookupFunction<_c_SetFileShortNameA, _dart_SetFileShortNameA>(
            'SetFileShortNameA'))(
      hFile,
      lpShortName,
    );
  }

  _dart_SetFileShortNameA? _SetFileShortNameA;

  int SetFileShortNameW(
    ffi.Pointer<ffi.Void> hFile,
    ffi.Pointer<ffi.Uint16> lpShortName,
  ) {
    return (_SetFileShortNameW ??=
        _dylib.lookupFunction<_c_SetFileShortNameW, _dart_SetFileShortNameW>(
            'SetFileShortNameW'))(
      hFile,
      lpShortName,
    );
  }

  _dart_SetFileShortNameW? _SetFileShortNameW;

  int LoadModule(
    ffi.Pointer<ffi.Int8> lpModuleName,
    ffi.Pointer<ffi.Void> lpParameterBlock,
  ) {
    return (_LoadModule ??=
        _dylib.lookupFunction<_c_LoadModule, _dart_LoadModule>('LoadModule'))(
      lpModuleName,
      lpParameterBlock,
    );
  }

  _dart_LoadModule? _LoadModule;

  int WinExec(
    ffi.Pointer<ffi.Int8> lpCmdLine,
    int uCmdShow,
  ) {
    return (_WinExec ??=
        _dylib.lookupFunction<_c_WinExec, _dart_WinExec>('WinExec'))(
      lpCmdLine,
      uCmdShow,
    );
  }

  _dart_WinExec? _WinExec;

  int ClearCommBreak(
    ffi.Pointer<ffi.Void> hFile,
  ) {
    return (_ClearCommBreak ??=
        _dylib.lookupFunction<_c_ClearCommBreak, _dart_ClearCommBreak>(
            'ClearCommBreak'))(
      hFile,
    );
  }

  _dart_ClearCommBreak? _ClearCommBreak;

  int ClearCommError(
    ffi.Pointer<ffi.Void> hFile,
    ffi.Pointer<ffi.Uint64> lpErrors,
    ffi.Pointer<LPCOMSTAT> lpStat,
  ) {
    return (_ClearCommError ??=
        _dylib.lookupFunction<_c_ClearCommError, _dart_ClearCommError>(
            'ClearCommError'))(
      hFile,
      lpErrors,
      lpStat,
    );
  }

  _dart_ClearCommError? _ClearCommError;

  int SetupComm(
    ffi.Pointer<ffi.Void> hFile,
    int dwInQueue,
    int dwOutQueue,
  ) {
    return (_SetupComm ??=
        _dylib.lookupFunction<_c_SetupComm, _dart_SetupComm>('SetupComm'))(
      hFile,
      dwInQueue,
      dwOutQueue,
    );
  }

  _dart_SetupComm? _SetupComm;

  int EscapeCommFunction(
    ffi.Pointer<ffi.Void> hFile,
    int dwFunc,
  ) {
    return (_EscapeCommFunction ??=
        _dylib.lookupFunction<_c_EscapeCommFunction, _dart_EscapeCommFunction>(
            'EscapeCommFunction'))(
      hFile,
      dwFunc,
    );
  }

  _dart_EscapeCommFunction? _EscapeCommFunction;

  int GetCommConfig(
    ffi.Pointer<ffi.Void> hCommDev,
    ffi.Pointer<LPCOMMCONFIG> lpCC,
    ffi.Pointer<ffi.Uint64> lpdwSize,
  ) {
    return (_GetCommConfig ??=
        _dylib.lookupFunction<_c_GetCommConfig, _dart_GetCommConfig>(
            'GetCommConfig'))(
      hCommDev,
      lpCC,
      lpdwSize,
    );
  }

  _dart_GetCommConfig? _GetCommConfig;

  int GetCommMask(
    ffi.Pointer<ffi.Void> hFile,
    ffi.Pointer<ffi.Uint64> lpEvtMask,
  ) {
    return (_GetCommMask ??= _dylib
        .lookupFunction<_c_GetCommMask, _dart_GetCommMask>('GetCommMask'))(
      hFile,
      lpEvtMask,
    );
  }

  _dart_GetCommMask? _GetCommMask;

  int GetCommProperties(
    ffi.Pointer<ffi.Void> hFile,
    ffi.Pointer<LPCOMMPROP> lpCommProp,
  ) {
    return (_GetCommProperties ??=
        _dylib.lookupFunction<_c_GetCommProperties, _dart_GetCommProperties>(
            'GetCommProperties'))(
      hFile,
      lpCommProp,
    );
  }

  _dart_GetCommProperties? _GetCommProperties;

  int GetCommModemStatus(
    ffi.Pointer<ffi.Void> hFile,
    ffi.Pointer<ffi.Uint64> lpModemStat,
  ) {
    return (_GetCommModemStatus ??=
        _dylib.lookupFunction<_c_GetCommModemStatus, _dart_GetCommModemStatus>(
            'GetCommModemStatus'))(
      hFile,
      lpModemStat,
    );
  }

  _dart_GetCommModemStatus? _GetCommModemStatus;

  int GetCommState(
    ffi.Pointer<ffi.Void> hFile,
    ffi.Pointer<LPDCB> lpDCB,
  ) {
    return (_GetCommState ??= _dylib
        .lookupFunction<_c_GetCommState, _dart_GetCommState>('GetCommState'))(
      hFile,
      lpDCB,
    );
  }

  _dart_GetCommState? _GetCommState;

  int GetCommTimeouts(
    ffi.Pointer<ffi.Void> hFile,
    ffi.Pointer<LPCOMMTIMEOUTS> lpCommTimeouts,
  ) {
    return (_GetCommTimeouts ??=
        _dylib.lookupFunction<_c_GetCommTimeouts, _dart_GetCommTimeouts>(
            'GetCommTimeouts'))(
      hFile,
      lpCommTimeouts,
    );
  }

  _dart_GetCommTimeouts? _GetCommTimeouts;

  int PurgeComm(
    ffi.Pointer<ffi.Void> hFile,
    int dwFlags,
  ) {
    return (_PurgeComm ??=
        _dylib.lookupFunction<_c_PurgeComm, _dart_PurgeComm>('PurgeComm'))(
      hFile,
      dwFlags,
    );
  }

  _dart_PurgeComm? _PurgeComm;

  int SetCommBreak(
    ffi.Pointer<ffi.Void> hFile,
  ) {
    return (_SetCommBreak ??= _dylib
        .lookupFunction<_c_SetCommBreak, _dart_SetCommBreak>('SetCommBreak'))(
      hFile,
    );
  }

  _dart_SetCommBreak? _SetCommBreak;

  int SetCommConfig(
    ffi.Pointer<ffi.Void> hCommDev,
    ffi.Pointer<LPCOMMCONFIG> lpCC,
    int dwSize,
  ) {
    return (_SetCommConfig ??=
        _dylib.lookupFunction<_c_SetCommConfig, _dart_SetCommConfig>(
            'SetCommConfig'))(
      hCommDev,
      lpCC,
      dwSize,
    );
  }

  _dart_SetCommConfig? _SetCommConfig;

  int SetCommMask(
    ffi.Pointer<ffi.Void> hFile,
    int dwEvtMask,
  ) {
    return (_SetCommMask ??= _dylib
        .lookupFunction<_c_SetCommMask, _dart_SetCommMask>('SetCommMask'))(
      hFile,
      dwEvtMask,
    );
  }

  _dart_SetCommMask? _SetCommMask;

  int SetCommState(
    ffi.Pointer<ffi.Void> hFile,
    ffi.Pointer<LPDCB> lpDCB,
  ) {
    return (_SetCommState ??= _dylib
        .lookupFunction<_c_SetCommState, _dart_SetCommState>('SetCommState'))(
      hFile,
      lpDCB,
    );
  }

  _dart_SetCommState? _SetCommState;

  int SetCommTimeouts(
    ffi.Pointer<ffi.Void> hFile,
    ffi.Pointer<LPCOMMTIMEOUTS> lpCommTimeouts,
  ) {
    return (_SetCommTimeouts ??=
        _dylib.lookupFunction<_c_SetCommTimeouts, _dart_SetCommTimeouts>(
            'SetCommTimeouts'))(
      hFile,
      lpCommTimeouts,
    );
  }

  _dart_SetCommTimeouts? _SetCommTimeouts;

  int TransmitCommChar(
    ffi.Pointer<ffi.Void> hFile,
    int cChar,
  ) {
    return (_TransmitCommChar ??=
        _dylib.lookupFunction<_c_TransmitCommChar, _dart_TransmitCommChar>(
            'TransmitCommChar'))(
      hFile,
      cChar,
    );
  }

  _dart_TransmitCommChar? _TransmitCommChar;

  int WaitCommEvent(
    ffi.Pointer<ffi.Void> hFile,
    ffi.Pointer<ffi.Uint64> lpEvtMask,
    ffi.Pointer<LPOVERLAPPED> lpOverlapped,
  ) {
    return (_WaitCommEvent ??=
        _dylib.lookupFunction<_c_WaitCommEvent, _dart_WaitCommEvent>(
            'WaitCommEvent'))(
      hFile,
      lpEvtMask,
      lpOverlapped,
    );
  }

  _dart_WaitCommEvent? _WaitCommEvent;

  ffi.Pointer<ffi.Void> OpenCommPort(
    int uPortNumber,
    int dwDesiredAccess,
    int dwFlagsAndAttributes,
  ) {
    return (_OpenCommPort ??= _dylib
        .lookupFunction<_c_OpenCommPort, _dart_OpenCommPort>('OpenCommPort'))(
      uPortNumber,
      dwDesiredAccess,
      dwFlagsAndAttributes,
    );
  }

  _dart_OpenCommPort? _OpenCommPort;

  int GetCommPorts(
    ffi.Pointer<ffi.Uint64> lpPortNumbers,
    int uPortNumbersCount,
    ffi.Pointer<ffi.Uint64> puPortNumbersFound,
  ) {
    return (_GetCommPorts ??= _dylib
        .lookupFunction<_c_GetCommPorts, _dart_GetCommPorts>('GetCommPorts'))(
      lpPortNumbers,
      uPortNumbersCount,
      puPortNumbersFound,
    );
  }

  _dart_GetCommPorts? _GetCommPorts;

  int SetTapePosition(
    ffi.Pointer<ffi.Void> hDevice,
    int dwPositionMethod,
    int dwPartition,
    int dwOffsetLow,
    int dwOffsetHigh,
    int bImmediate,
  ) {
    return (_SetTapePosition ??=
        _dylib.lookupFunction<_c_SetTapePosition, _dart_SetTapePosition>(
            'SetTapePosition'))(
      hDevice,
      dwPositionMethod,
      dwPartition,
      dwOffsetLow,
      dwOffsetHigh,
      bImmediate,
    );
  }

  _dart_SetTapePosition? _SetTapePosition;

  int GetTapePosition(
    ffi.Pointer<ffi.Void> hDevice,
    int dwPositionType,
    ffi.Pointer<ffi.Uint64> lpdwPartition,
    ffi.Pointer<ffi.Uint64> lpdwOffsetLow,
    ffi.Pointer<ffi.Uint64> lpdwOffsetHigh,
  ) {
    return (_GetTapePosition ??=
        _dylib.lookupFunction<_c_GetTapePosition, _dart_GetTapePosition>(
            'GetTapePosition'))(
      hDevice,
      dwPositionType,
      lpdwPartition,
      lpdwOffsetLow,
      lpdwOffsetHigh,
    );
  }

  _dart_GetTapePosition? _GetTapePosition;

  int PrepareTape(
    ffi.Pointer<ffi.Void> hDevice,
    int dwOperation,
    int bImmediate,
  ) {
    return (_PrepareTape ??= _dylib
        .lookupFunction<_c_PrepareTape, _dart_PrepareTape>('PrepareTape'))(
      hDevice,
      dwOperation,
      bImmediate,
    );
  }

  _dart_PrepareTape? _PrepareTape;

  int EraseTape(
    ffi.Pointer<ffi.Void> hDevice,
    int dwEraseType,
    int bImmediate,
  ) {
    return (_EraseTape ??=
        _dylib.lookupFunction<_c_EraseTape, _dart_EraseTape>('EraseTape'))(
      hDevice,
      dwEraseType,
      bImmediate,
    );
  }

  _dart_EraseTape? _EraseTape;

  int CreateTapePartition(
    ffi.Pointer<ffi.Void> hDevice,
    int dwPartitionMethod,
    int dwCount,
    int dwSize,
  ) {
    return (_CreateTapePartition ??= _dylib.lookupFunction<
        _c_CreateTapePartition,
        _dart_CreateTapePartition>('CreateTapePartition'))(
      hDevice,
      dwPartitionMethod,
      dwCount,
      dwSize,
    );
  }

  _dart_CreateTapePartition? _CreateTapePartition;

  int WriteTapemark(
    ffi.Pointer<ffi.Void> hDevice,
    int dwTapemarkType,
    int dwTapemarkCount,
    int bImmediate,
  ) {
    return (_WriteTapemark ??=
        _dylib.lookupFunction<_c_WriteTapemark, _dart_WriteTapemark>(
            'WriteTapemark'))(
      hDevice,
      dwTapemarkType,
      dwTapemarkCount,
      bImmediate,
    );
  }

  _dart_WriteTapemark? _WriteTapemark;

  int GetTapeStatus(
    ffi.Pointer<ffi.Void> hDevice,
  ) {
    return (_GetTapeStatus ??=
        _dylib.lookupFunction<_c_GetTapeStatus, _dart_GetTapeStatus>(
            'GetTapeStatus'))(
      hDevice,
    );
  }

  _dart_GetTapeStatus? _GetTapeStatus;

  int GetTapeParameters(
    ffi.Pointer<ffi.Void> hDevice,
    int dwOperation,
    ffi.Pointer<ffi.Uint64> lpdwSize,
    ffi.Pointer<ffi.Void> lpTapeInformation,
  ) {
    return (_GetTapeParameters ??=
        _dylib.lookupFunction<_c_GetTapeParameters, _dart_GetTapeParameters>(
            'GetTapeParameters'))(
      hDevice,
      dwOperation,
      lpdwSize,
      lpTapeInformation,
    );
  }

  _dart_GetTapeParameters? _GetTapeParameters;

  int SetTapeParameters(
    ffi.Pointer<ffi.Void> hDevice,
    int dwOperation,
    ffi.Pointer<ffi.Void> lpTapeInformation,
  ) {
    return (_SetTapeParameters ??=
        _dylib.lookupFunction<_c_SetTapeParameters, _dart_SetTapeParameters>(
            'SetTapeParameters'))(
      hDevice,
      dwOperation,
      lpTapeInformation,
    );
  }

  _dart_SetTapeParameters? _SetTapeParameters;

  int MulDiv(
    int nNumber,
    int nNumerator,
    int nDenominator,
  ) {
    return (_MulDiv ??=
        _dylib.lookupFunction<_c_MulDiv, _dart_MulDiv>('MulDiv'))(
      nNumber,
      nNumerator,
      nDenominator,
    );
  }

  _dart_MulDiv? _MulDiv;

  int GetSystemDEPPolicy() {
    return (_GetSystemDEPPolicy ??=
        _dylib.lookupFunction<_c_GetSystemDEPPolicy, _dart_GetSystemDEPPolicy>(
            'GetSystemDEPPolicy'))();
  }

  _dart_GetSystemDEPPolicy? _GetSystemDEPPolicy;

  int GetSystemRegistryQuota(
    ffi.Pointer<ffi.Uint64> pdwQuotaAllowed,
    ffi.Pointer<ffi.Uint64> pdwQuotaUsed,
  ) {
    return (_GetSystemRegistryQuota ??= _dylib.lookupFunction<
        _c_GetSystemRegistryQuota,
        _dart_GetSystemRegistryQuota>('GetSystemRegistryQuota'))(
      pdwQuotaAllowed,
      pdwQuotaUsed,
    );
  }

  _dart_GetSystemRegistryQuota? _GetSystemRegistryQuota;

  int FileTimeToDosDateTime(
    ffi.Pointer<LPFILETIME> lpFileTime,
    ffi.Pointer<ffi.Uint16> lpFatDate,
    ffi.Pointer<ffi.Uint16> lpFatTime,
  ) {
    return (_FileTimeToDosDateTime ??= _dylib.lookupFunction<
        _c_FileTimeToDosDateTime,
        _dart_FileTimeToDosDateTime>('FileTimeToDosDateTime'))(
      lpFileTime,
      lpFatDate,
      lpFatTime,
    );
  }

  _dart_FileTimeToDosDateTime? _FileTimeToDosDateTime;

  int DosDateTimeToFileTime(
    int wFatDate,
    int wFatTime,
    ffi.Pointer<LPFILETIME> lpFileTime,
  ) {
    return (_DosDateTimeToFileTime ??= _dylib.lookupFunction<
        _c_DosDateTimeToFileTime,
        _dart_DosDateTimeToFileTime>('DosDateTimeToFileTime'))(
      wFatDate,
      wFatTime,
      lpFileTime,
    );
  }

  _dart_DosDateTimeToFileTime? _DosDateTimeToFileTime;

  int FormatMessageA(
    int dwFlags,
    ffi.Pointer<ffi.Void> lpSource,
    int dwMessageId,
    int dwLanguageId,
    ffi.Pointer<ffi.Int8> lpBuffer,
    int nSize,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> Arguments,
  ) {
    return (_FormatMessageA ??=
        _dylib.lookupFunction<_c_FormatMessageA, _dart_FormatMessageA>(
            'FormatMessageA'))(
      dwFlags,
      lpSource,
      dwMessageId,
      dwLanguageId,
      lpBuffer,
      nSize,
      Arguments,
    );
  }

  _dart_FormatMessageA? _FormatMessageA;

  int FormatMessageW(
    int dwFlags,
    ffi.Pointer<ffi.Void> lpSource,
    int dwMessageId,
    int dwLanguageId,
    ffi.Pointer<ffi.Uint16> lpBuffer,
    int nSize,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> Arguments,
  ) {
    return (_FormatMessageW ??=
        _dylib.lookupFunction<_c_FormatMessageW, _dart_FormatMessageW>(
            'FormatMessageW'))(
      dwFlags,
      lpSource,
      dwMessageId,
      dwLanguageId,
      lpBuffer,
      nSize,
      Arguments,
    );
  }

  _dart_FormatMessageW? _FormatMessageW;

  ffi.Pointer<ffi.Void> CreateMailslotA(
    ffi.Pointer<ffi.Int8> lpName,
    int nMaxMessageSize,
    int lReadTimeout,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  ) {
    return (_CreateMailslotA ??=
        _dylib.lookupFunction<_c_CreateMailslotA, _dart_CreateMailslotA>(
            'CreateMailslotA'))(
      lpName,
      nMaxMessageSize,
      lReadTimeout,
      lpSecurityAttributes,
    );
  }

  _dart_CreateMailslotA? _CreateMailslotA;

  ffi.Pointer<ffi.Void> CreateMailslotW(
    ffi.Pointer<ffi.Uint16> lpName,
    int nMaxMessageSize,
    int lReadTimeout,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  ) {
    return (_CreateMailslotW ??=
        _dylib.lookupFunction<_c_CreateMailslotW, _dart_CreateMailslotW>(
            'CreateMailslotW'))(
      lpName,
      nMaxMessageSize,
      lReadTimeout,
      lpSecurityAttributes,
    );
  }

  _dart_CreateMailslotW? _CreateMailslotW;

  int GetMailslotInfo(
    ffi.Pointer<ffi.Void> hMailslot,
    ffi.Pointer<ffi.Uint64> lpMaxMessageSize,
    ffi.Pointer<ffi.Uint64> lpNextSize,
    ffi.Pointer<ffi.Uint64> lpMessageCount,
    ffi.Pointer<ffi.Uint64> lpReadTimeout,
  ) {
    return (_GetMailslotInfo ??=
        _dylib.lookupFunction<_c_GetMailslotInfo, _dart_GetMailslotInfo>(
            'GetMailslotInfo'))(
      hMailslot,
      lpMaxMessageSize,
      lpNextSize,
      lpMessageCount,
      lpReadTimeout,
    );
  }

  _dart_GetMailslotInfo? _GetMailslotInfo;

  int SetMailslotInfo(
    ffi.Pointer<ffi.Void> hMailslot,
    int lReadTimeout,
  ) {
    return (_SetMailslotInfo ??=
        _dylib.lookupFunction<_c_SetMailslotInfo, _dart_SetMailslotInfo>(
            'SetMailslotInfo'))(
      hMailslot,
      lReadTimeout,
    );
  }

  _dart_SetMailslotInfo? _SetMailslotInfo;

  int EncryptFileA(
    ffi.Pointer<ffi.Int8> lpFileName,
  ) {
    return (_EncryptFileA ??= _dylib
        .lookupFunction<_c_EncryptFileA, _dart_EncryptFileA>('EncryptFileA'))(
      lpFileName,
    );
  }

  _dart_EncryptFileA? _EncryptFileA;

  int EncryptFileW(
    ffi.Pointer<ffi.Uint16> lpFileName,
  ) {
    return (_EncryptFileW ??= _dylib
        .lookupFunction<_c_EncryptFileW, _dart_EncryptFileW>('EncryptFileW'))(
      lpFileName,
    );
  }

  _dart_EncryptFileW? _EncryptFileW;

  int DecryptFileA(
    ffi.Pointer<ffi.Int8> lpFileName,
    int dwReserved,
  ) {
    return (_DecryptFileA ??= _dylib
        .lookupFunction<_c_DecryptFileA, _dart_DecryptFileA>('DecryptFileA'))(
      lpFileName,
      dwReserved,
    );
  }

  _dart_DecryptFileA? _DecryptFileA;

  int DecryptFileW(
    ffi.Pointer<ffi.Uint16> lpFileName,
    int dwReserved,
  ) {
    return (_DecryptFileW ??= _dylib
        .lookupFunction<_c_DecryptFileW, _dart_DecryptFileW>('DecryptFileW'))(
      lpFileName,
      dwReserved,
    );
  }

  _dart_DecryptFileW? _DecryptFileW;

  int FileEncryptionStatusA(
    ffi.Pointer<ffi.Int8> lpFileName,
    ffi.Pointer<ffi.Uint64> lpStatus,
  ) {
    return (_FileEncryptionStatusA ??= _dylib.lookupFunction<
        _c_FileEncryptionStatusA,
        _dart_FileEncryptionStatusA>('FileEncryptionStatusA'))(
      lpFileName,
      lpStatus,
    );
  }

  _dart_FileEncryptionStatusA? _FileEncryptionStatusA;

  int FileEncryptionStatusW(
    ffi.Pointer<ffi.Uint16> lpFileName,
    ffi.Pointer<ffi.Uint64> lpStatus,
  ) {
    return (_FileEncryptionStatusW ??= _dylib.lookupFunction<
        _c_FileEncryptionStatusW,
        _dart_FileEncryptionStatusW>('FileEncryptionStatusW'))(
      lpFileName,
      lpStatus,
    );
  }

  _dart_FileEncryptionStatusW? _FileEncryptionStatusW;

  int OpenEncryptedFileRawA(
    ffi.Pointer<ffi.Int8> lpFileName,
    int ulFlags,
    ffi.Pointer<ffi.Pointer<ffi.Void>> pvContext,
  ) {
    return (_OpenEncryptedFileRawA ??= _dylib.lookupFunction<
        _c_OpenEncryptedFileRawA,
        _dart_OpenEncryptedFileRawA>('OpenEncryptedFileRawA'))(
      lpFileName,
      ulFlags,
      pvContext,
    );
  }

  _dart_OpenEncryptedFileRawA? _OpenEncryptedFileRawA;

  int OpenEncryptedFileRawW(
    ffi.Pointer<ffi.Uint16> lpFileName,
    int ulFlags,
    ffi.Pointer<ffi.Pointer<ffi.Void>> pvContext,
  ) {
    return (_OpenEncryptedFileRawW ??= _dylib.lookupFunction<
        _c_OpenEncryptedFileRawW,
        _dart_OpenEncryptedFileRawW>('OpenEncryptedFileRawW'))(
      lpFileName,
      ulFlags,
      pvContext,
    );
  }

  _dart_OpenEncryptedFileRawW? _OpenEncryptedFileRawW;

  int ReadEncryptedFileRaw(
    ffi.Pointer<ffi.NativeFunction<PFE_EXPORT_FUNC>> pfExportCallback,
    ffi.Pointer<ffi.Void> pvCallbackContext,
    ffi.Pointer<ffi.Void> pvContext,
  ) {
    return (_ReadEncryptedFileRaw ??= _dylib.lookupFunction<
        _c_ReadEncryptedFileRaw,
        _dart_ReadEncryptedFileRaw>('ReadEncryptedFileRaw'))(
      pfExportCallback,
      pvCallbackContext,
      pvContext,
    );
  }

  _dart_ReadEncryptedFileRaw? _ReadEncryptedFileRaw;

  int WriteEncryptedFileRaw(
    ffi.Pointer<ffi.NativeFunction<PFE_IMPORT_FUNC>> pfImportCallback,
    ffi.Pointer<ffi.Void> pvCallbackContext,
    ffi.Pointer<ffi.Void> pvContext,
  ) {
    return (_WriteEncryptedFileRaw ??= _dylib.lookupFunction<
        _c_WriteEncryptedFileRaw,
        _dart_WriteEncryptedFileRaw>('WriteEncryptedFileRaw'))(
      pfImportCallback,
      pvCallbackContext,
      pvContext,
    );
  }

  _dart_WriteEncryptedFileRaw? _WriteEncryptedFileRaw;

  void CloseEncryptedFileRaw(
    ffi.Pointer<ffi.Void> pvContext,
  ) {
    return (_CloseEncryptedFileRaw ??= _dylib.lookupFunction<
        _c_CloseEncryptedFileRaw,
        _dart_CloseEncryptedFileRaw>('CloseEncryptedFileRaw'))(
      pvContext,
    );
  }

  _dart_CloseEncryptedFileRaw? _CloseEncryptedFileRaw;

  int lstrcmpA(
    ffi.Pointer<ffi.Int8> lpString1,
    ffi.Pointer<ffi.Int8> lpString2,
  ) {
    return (_lstrcmpA ??=
        _dylib.lookupFunction<_c_lstrcmpA, _dart_lstrcmpA>('lstrcmpA'))(
      lpString1,
      lpString2,
    );
  }

  _dart_lstrcmpA? _lstrcmpA;

  int lstrcmpW(
    ffi.Pointer<ffi.Uint16> lpString1,
    ffi.Pointer<ffi.Uint16> lpString2,
  ) {
    return (_lstrcmpW ??=
        _dylib.lookupFunction<_c_lstrcmpW, _dart_lstrcmpW>('lstrcmpW'))(
      lpString1,
      lpString2,
    );
  }

  _dart_lstrcmpW? _lstrcmpW;

  int lstrcmpiA(
    ffi.Pointer<ffi.Int8> lpString1,
    ffi.Pointer<ffi.Int8> lpString2,
  ) {
    return (_lstrcmpiA ??=
        _dylib.lookupFunction<_c_lstrcmpiA, _dart_lstrcmpiA>('lstrcmpiA'))(
      lpString1,
      lpString2,
    );
  }

  _dart_lstrcmpiA? _lstrcmpiA;

  int lstrcmpiW(
    ffi.Pointer<ffi.Uint16> lpString1,
    ffi.Pointer<ffi.Uint16> lpString2,
  ) {
    return (_lstrcmpiW ??=
        _dylib.lookupFunction<_c_lstrcmpiW, _dart_lstrcmpiW>('lstrcmpiW'))(
      lpString1,
      lpString2,
    );
  }

  _dart_lstrcmpiW? _lstrcmpiW;

  ffi.Pointer<ffi.Int8> lstrcpynA(
    ffi.Pointer<ffi.Int8> lpString1,
    ffi.Pointer<ffi.Int8> lpString2,
    int iMaxLength,
  ) {
    return (_lstrcpynA ??=
        _dylib.lookupFunction<_c_lstrcpynA, _dart_lstrcpynA>('lstrcpynA'))(
      lpString1,
      lpString2,
      iMaxLength,
    );
  }

  _dart_lstrcpynA? _lstrcpynA;

  ffi.Pointer<ffi.Uint16> lstrcpynW(
    ffi.Pointer<ffi.Uint16> lpString1,
    ffi.Pointer<ffi.Uint16> lpString2,
    int iMaxLength,
  ) {
    return (_lstrcpynW ??=
        _dylib.lookupFunction<_c_lstrcpynW, _dart_lstrcpynW>('lstrcpynW'))(
      lpString1,
      lpString2,
      iMaxLength,
    );
  }

  _dart_lstrcpynW? _lstrcpynW;

  ffi.Pointer<ffi.Int8> lstrcpyA(
    ffi.Pointer<ffi.Int8> lpString1,
    ffi.Pointer<ffi.Int8> lpString2,
  ) {
    return (_lstrcpyA ??=
        _dylib.lookupFunction<_c_lstrcpyA, _dart_lstrcpyA>('lstrcpyA'))(
      lpString1,
      lpString2,
    );
  }

  _dart_lstrcpyA? _lstrcpyA;

  ffi.Pointer<ffi.Uint16> lstrcpyW(
    ffi.Pointer<ffi.Uint16> lpString1,
    ffi.Pointer<ffi.Uint16> lpString2,
  ) {
    return (_lstrcpyW ??=
        _dylib.lookupFunction<_c_lstrcpyW, _dart_lstrcpyW>('lstrcpyW'))(
      lpString1,
      lpString2,
    );
  }

  _dart_lstrcpyW? _lstrcpyW;

  ffi.Pointer<ffi.Int8> lstrcatA(
    ffi.Pointer<ffi.Int8> lpString1,
    ffi.Pointer<ffi.Int8> lpString2,
  ) {
    return (_lstrcatA ??=
        _dylib.lookupFunction<_c_lstrcatA, _dart_lstrcatA>('lstrcatA'))(
      lpString1,
      lpString2,
    );
  }

  _dart_lstrcatA? _lstrcatA;

  ffi.Pointer<ffi.Uint16> lstrcatW(
    ffi.Pointer<ffi.Uint16> lpString1,
    ffi.Pointer<ffi.Uint16> lpString2,
  ) {
    return (_lstrcatW ??=
        _dylib.lookupFunction<_c_lstrcatW, _dart_lstrcatW>('lstrcatW'))(
      lpString1,
      lpString2,
    );
  }

  _dart_lstrcatW? _lstrcatW;

  int lstrlenA(
    ffi.Pointer<ffi.Int8> lpString,
  ) {
    return (_lstrlenA ??=
        _dylib.lookupFunction<_c_lstrlenA, _dart_lstrlenA>('lstrlenA'))(
      lpString,
    );
  }

  _dart_lstrlenA? _lstrlenA;

  int lstrlenW(
    ffi.Pointer<ffi.Uint16> lpString,
  ) {
    return (_lstrlenW ??=
        _dylib.lookupFunction<_c_lstrlenW, _dart_lstrlenW>('lstrlenW'))(
      lpString,
    );
  }

  _dart_lstrlenW? _lstrlenW;

  int OpenFile(
    ffi.Pointer<ffi.Int8> lpFileName,
    ffi.Pointer<POFSTRUCT> lpReOpenBuff,
    int uStyle,
  ) {
    return (_OpenFile ??=
        _dylib.lookupFunction<_c_OpenFile, _dart_OpenFile>('OpenFile'))(
      lpFileName,
      lpReOpenBuff,
      uStyle,
    );
  }

  _dart_OpenFile? _OpenFile;

  int _lopen(
    ffi.Pointer<ffi.Int8> lpPathName,
    int iReadWrite,
  ) {
    return (__lopen ??=
        _dylib.lookupFunction<_c__lopen, _dart__lopen>('_lopen'))(
      lpPathName,
      iReadWrite,
    );
  }

  _dart__lopen? __lopen;

  int _lcreat(
    ffi.Pointer<ffi.Int8> lpPathName,
    int iAttribute,
  ) {
    return (__lcreat ??=
        _dylib.lookupFunction<_c__lcreat, _dart__lcreat>('_lcreat'))(
      lpPathName,
      iAttribute,
    );
  }

  _dart__lcreat? __lcreat;

  int _lread(
    int hFile,
    ffi.Pointer<ffi.Void> lpBuffer,
    int uBytes,
  ) {
    return (__lread ??=
        _dylib.lookupFunction<_c__lread, _dart__lread>('_lread'))(
      hFile,
      lpBuffer,
      uBytes,
    );
  }

  _dart__lread? __lread;

  int _lwrite(
    int hFile,
    ffi.Pointer<ffi.Int8> lpBuffer,
    int uBytes,
  ) {
    return (__lwrite ??=
        _dylib.lookupFunction<_c__lwrite, _dart__lwrite>('_lwrite'))(
      hFile,
      lpBuffer,
      uBytes,
    );
  }

  _dart__lwrite? __lwrite;

  int _hread(
    int hFile,
    ffi.Pointer<ffi.Void> lpBuffer,
    int lBytes,
  ) {
    return (__hread ??=
        _dylib.lookupFunction<_c__hread, _dart__hread>('_hread'))(
      hFile,
      lpBuffer,
      lBytes,
    );
  }

  _dart__hread? __hread;

  int _hwrite(
    int hFile,
    ffi.Pointer<ffi.Int8> lpBuffer,
    int lBytes,
  ) {
    return (__hwrite ??=
        _dylib.lookupFunction<_c__hwrite, _dart__hwrite>('_hwrite'))(
      hFile,
      lpBuffer,
      lBytes,
    );
  }

  _dart__hwrite? __hwrite;

  int _lclose(
    int hFile,
  ) {
    return (__lclose ??=
        _dylib.lookupFunction<_c__lclose, _dart__lclose>('_lclose'))(
      hFile,
    );
  }

  _dart__lclose? __lclose;

  int _llseek(
    int hFile,
    int lOffset,
    int iOrigin,
  ) {
    return (__llseek ??=
        _dylib.lookupFunction<_c__llseek, _dart__llseek>('_llseek'))(
      hFile,
      lOffset,
      iOrigin,
    );
  }

  _dart__llseek? __llseek;

  int IsTextUnicode(
    ffi.Pointer<ffi.Void> lpv,
    int iSize,
    ffi.Pointer<ffi.Int32> lpiResult,
  ) {
    return (_IsTextUnicode ??=
        _dylib.lookupFunction<_c_IsTextUnicode, _dart_IsTextUnicode>(
            'IsTextUnicode'))(
      lpv,
      iSize,
      lpiResult,
    );
  }

  _dart_IsTextUnicode? _IsTextUnicode;

  int BackupRead(
    ffi.Pointer<ffi.Void> hFile,
    ffi.Pointer<ffi.Uint8> lpBuffer,
    int nNumberOfBytesToRead,
    ffi.Pointer<ffi.Uint64> lpNumberOfBytesRead,
    int bAbort,
    int bProcessSecurity,
    ffi.Pointer<ffi.Pointer<ffi.Void>> lpContext,
  ) {
    return (_BackupRead ??=
        _dylib.lookupFunction<_c_BackupRead, _dart_BackupRead>('BackupRead'))(
      hFile,
      lpBuffer,
      nNumberOfBytesToRead,
      lpNumberOfBytesRead,
      bAbort,
      bProcessSecurity,
      lpContext,
    );
  }

  _dart_BackupRead? _BackupRead;

  int BackupSeek(
    ffi.Pointer<ffi.Void> hFile,
    int dwLowBytesToSeek,
    int dwHighBytesToSeek,
    ffi.Pointer<ffi.Uint64> lpdwLowByteSeeked,
    ffi.Pointer<ffi.Uint64> lpdwHighByteSeeked,
    ffi.Pointer<ffi.Pointer<ffi.Void>> lpContext,
  ) {
    return (_BackupSeek ??=
        _dylib.lookupFunction<_c_BackupSeek, _dart_BackupSeek>('BackupSeek'))(
      hFile,
      dwLowBytesToSeek,
      dwHighBytesToSeek,
      lpdwLowByteSeeked,
      lpdwHighByteSeeked,
      lpContext,
    );
  }

  _dart_BackupSeek? _BackupSeek;

  int BackupWrite(
    ffi.Pointer<ffi.Void> hFile,
    ffi.Pointer<ffi.Uint8> lpBuffer,
    int nNumberOfBytesToWrite,
    ffi.Pointer<ffi.Uint64> lpNumberOfBytesWritten,
    int bAbort,
    int bProcessSecurity,
    ffi.Pointer<ffi.Pointer<ffi.Void>> lpContext,
  ) {
    return (_BackupWrite ??= _dylib
        .lookupFunction<_c_BackupWrite, _dart_BackupWrite>('BackupWrite'))(
      hFile,
      lpBuffer,
      nNumberOfBytesToWrite,
      lpNumberOfBytesWritten,
      bAbort,
      bProcessSecurity,
      lpContext,
    );
  }

  _dart_BackupWrite? _BackupWrite;

  ffi.Pointer<ffi.Void> OpenMutexA(
    int dwDesiredAccess,
    int bInheritHandle,
    ffi.Pointer<ffi.Int8> lpName,
  ) {
    return (_OpenMutexA ??=
        _dylib.lookupFunction<_c_OpenMutexA, _dart_OpenMutexA>('OpenMutexA'))(
      dwDesiredAccess,
      bInheritHandle,
      lpName,
    );
  }

  _dart_OpenMutexA? _OpenMutexA;

  ffi.Pointer<ffi.Void> CreateSemaphoreA(
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSemaphoreAttributes,
    int lInitialCount,
    int lMaximumCount,
    ffi.Pointer<ffi.Int8> lpName,
  ) {
    return (_CreateSemaphoreA ??=
        _dylib.lookupFunction<_c_CreateSemaphoreA, _dart_CreateSemaphoreA>(
            'CreateSemaphoreA'))(
      lpSemaphoreAttributes,
      lInitialCount,
      lMaximumCount,
      lpName,
    );
  }

  _dart_CreateSemaphoreA? _CreateSemaphoreA;

  ffi.Pointer<ffi.Void> OpenSemaphoreA(
    int dwDesiredAccess,
    int bInheritHandle,
    ffi.Pointer<ffi.Int8> lpName,
  ) {
    return (_OpenSemaphoreA ??=
        _dylib.lookupFunction<_c_OpenSemaphoreA, _dart_OpenSemaphoreA>(
            'OpenSemaphoreA'))(
      dwDesiredAccess,
      bInheritHandle,
      lpName,
    );
  }

  _dart_OpenSemaphoreA? _OpenSemaphoreA;

  ffi.Pointer<ffi.Void> CreateWaitableTimerA(
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpTimerAttributes,
    int bManualReset,
    ffi.Pointer<ffi.Int8> lpTimerName,
  ) {
    return (_CreateWaitableTimerA ??= _dylib.lookupFunction<
        _c_CreateWaitableTimerA,
        _dart_CreateWaitableTimerA>('CreateWaitableTimerA'))(
      lpTimerAttributes,
      bManualReset,
      lpTimerName,
    );
  }

  _dart_CreateWaitableTimerA? _CreateWaitableTimerA;

  ffi.Pointer<ffi.Void> OpenWaitableTimerA(
    int dwDesiredAccess,
    int bInheritHandle,
    ffi.Pointer<ffi.Int8> lpTimerName,
  ) {
    return (_OpenWaitableTimerA ??=
        _dylib.lookupFunction<_c_OpenWaitableTimerA, _dart_OpenWaitableTimerA>(
            'OpenWaitableTimerA'))(
      dwDesiredAccess,
      bInheritHandle,
      lpTimerName,
    );
  }

  _dart_OpenWaitableTimerA? _OpenWaitableTimerA;

  ffi.Pointer<ffi.Void> CreateSemaphoreExA(
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSemaphoreAttributes,
    int lInitialCount,
    int lMaximumCount,
    ffi.Pointer<ffi.Int8> lpName,
    int dwFlags,
    int dwDesiredAccess,
  ) {
    return (_CreateSemaphoreExA ??=
        _dylib.lookupFunction<_c_CreateSemaphoreExA, _dart_CreateSemaphoreExA>(
            'CreateSemaphoreExA'))(
      lpSemaphoreAttributes,
      lInitialCount,
      lMaximumCount,
      lpName,
      dwFlags,
      dwDesiredAccess,
    );
  }

  _dart_CreateSemaphoreExA? _CreateSemaphoreExA;

  ffi.Pointer<ffi.Void> CreateWaitableTimerExA(
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpTimerAttributes,
    ffi.Pointer<ffi.Int8> lpTimerName,
    int dwFlags,
    int dwDesiredAccess,
  ) {
    return (_CreateWaitableTimerExA ??= _dylib.lookupFunction<
        _c_CreateWaitableTimerExA,
        _dart_CreateWaitableTimerExA>('CreateWaitableTimerExA'))(
      lpTimerAttributes,
      lpTimerName,
      dwFlags,
      dwDesiredAccess,
    );
  }

  _dart_CreateWaitableTimerExA? _CreateWaitableTimerExA;

  ffi.Pointer<ffi.Void> CreateFileMappingA(
    ffi.Pointer<ffi.Void> hFile,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpFileMappingAttributes,
    int flProtect,
    int dwMaximumSizeHigh,
    int dwMaximumSizeLow,
    ffi.Pointer<ffi.Int8> lpName,
  ) {
    return (_CreateFileMappingA ??=
        _dylib.lookupFunction<_c_CreateFileMappingA, _dart_CreateFileMappingA>(
            'CreateFileMappingA'))(
      hFile,
      lpFileMappingAttributes,
      flProtect,
      dwMaximumSizeHigh,
      dwMaximumSizeLow,
      lpName,
    );
  }

  _dart_CreateFileMappingA? _CreateFileMappingA;

  ffi.Pointer<ffi.Void> CreateFileMappingNumaA(
    ffi.Pointer<ffi.Void> hFile,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpFileMappingAttributes,
    int flProtect,
    int dwMaximumSizeHigh,
    int dwMaximumSizeLow,
    ffi.Pointer<ffi.Int8> lpName,
    int nndPreferred,
  ) {
    return (_CreateFileMappingNumaA ??= _dylib.lookupFunction<
        _c_CreateFileMappingNumaA,
        _dart_CreateFileMappingNumaA>('CreateFileMappingNumaA'))(
      hFile,
      lpFileMappingAttributes,
      flProtect,
      dwMaximumSizeHigh,
      dwMaximumSizeLow,
      lpName,
      nndPreferred,
    );
  }

  _dart_CreateFileMappingNumaA? _CreateFileMappingNumaA;

  ffi.Pointer<ffi.Void> OpenFileMappingA(
    int dwDesiredAccess,
    int bInheritHandle,
    ffi.Pointer<ffi.Int8> lpName,
  ) {
    return (_OpenFileMappingA ??=
        _dylib.lookupFunction<_c_OpenFileMappingA, _dart_OpenFileMappingA>(
            'OpenFileMappingA'))(
      dwDesiredAccess,
      bInheritHandle,
      lpName,
    );
  }

  _dart_OpenFileMappingA? _OpenFileMappingA;

  int GetLogicalDriveStringsA(
    int nBufferLength,
    ffi.Pointer<ffi.Int8> lpBuffer,
  ) {
    return (_GetLogicalDriveStringsA ??= _dylib.lookupFunction<
        _c_GetLogicalDriveStringsA,
        _dart_GetLogicalDriveStringsA>('GetLogicalDriveStringsA'))(
      nBufferLength,
      lpBuffer,
    );
  }

  _dart_GetLogicalDriveStringsA? _GetLogicalDriveStringsA;

  ffi.Pointer<HINSTANCE__> LoadPackagedLibrary(
    ffi.Pointer<ffi.Uint16> lpwLibFileName,
    int Reserved,
  ) {
    return (_LoadPackagedLibrary ??= _dylib.lookupFunction<
        _c_LoadPackagedLibrary,
        _dart_LoadPackagedLibrary>('LoadPackagedLibrary'))(
      lpwLibFileName,
      Reserved,
    );
  }

  _dart_LoadPackagedLibrary? _LoadPackagedLibrary;

  int QueryFullProcessImageNameA(
    ffi.Pointer<ffi.Void> hProcess,
    int dwFlags,
    ffi.Pointer<ffi.Int8> lpExeName,
    ffi.Pointer<ffi.Uint64> lpdwSize,
  ) {
    return (_QueryFullProcessImageNameA ??= _dylib.lookupFunction<
        _c_QueryFullProcessImageNameA,
        _dart_QueryFullProcessImageNameA>('QueryFullProcessImageNameA'))(
      hProcess,
      dwFlags,
      lpExeName,
      lpdwSize,
    );
  }

  _dart_QueryFullProcessImageNameA? _QueryFullProcessImageNameA;

  int QueryFullProcessImageNameW(
    ffi.Pointer<ffi.Void> hProcess,
    int dwFlags,
    ffi.Pointer<ffi.Uint16> lpExeName,
    ffi.Pointer<ffi.Uint64> lpdwSize,
  ) {
    return (_QueryFullProcessImageNameW ??= _dylib.lookupFunction<
        _c_QueryFullProcessImageNameW,
        _dart_QueryFullProcessImageNameW>('QueryFullProcessImageNameW'))(
      hProcess,
      dwFlags,
      lpExeName,
      lpdwSize,
    );
  }

  _dart_QueryFullProcessImageNameW? _QueryFullProcessImageNameW;

  void GetStartupInfoA(
    ffi.Pointer<LPSTARTUPINFOA> lpStartupInfo,
  ) {
    return (_GetStartupInfoA ??=
        _dylib.lookupFunction<_c_GetStartupInfoA, _dart_GetStartupInfoA>(
            'GetStartupInfoA'))(
      lpStartupInfo,
    );
  }

  _dart_GetStartupInfoA? _GetStartupInfoA;

  int GetFirmwareEnvironmentVariableA(
    ffi.Pointer<ffi.Int8> lpName,
    ffi.Pointer<ffi.Int8> lpGuid,
    ffi.Pointer<ffi.Void> pBuffer,
    int nSize,
  ) {
    return (_GetFirmwareEnvironmentVariableA ??= _dylib.lookupFunction<
            _c_GetFirmwareEnvironmentVariableA,
            _dart_GetFirmwareEnvironmentVariableA>(
        'GetFirmwareEnvironmentVariableA'))(
      lpName,
      lpGuid,
      pBuffer,
      nSize,
    );
  }

  _dart_GetFirmwareEnvironmentVariableA? _GetFirmwareEnvironmentVariableA;

  int GetFirmwareEnvironmentVariableW(
    ffi.Pointer<ffi.Uint16> lpName,
    ffi.Pointer<ffi.Uint16> lpGuid,
    ffi.Pointer<ffi.Void> pBuffer,
    int nSize,
  ) {
    return (_GetFirmwareEnvironmentVariableW ??= _dylib.lookupFunction<
            _c_GetFirmwareEnvironmentVariableW,
            _dart_GetFirmwareEnvironmentVariableW>(
        'GetFirmwareEnvironmentVariableW'))(
      lpName,
      lpGuid,
      pBuffer,
      nSize,
    );
  }

  _dart_GetFirmwareEnvironmentVariableW? _GetFirmwareEnvironmentVariableW;

  int GetFirmwareEnvironmentVariableExA(
    ffi.Pointer<ffi.Int8> lpName,
    ffi.Pointer<ffi.Int8> lpGuid,
    ffi.Pointer<ffi.Void> pBuffer,
    int nSize,
    ffi.Pointer<ffi.Uint64> pdwAttribubutes,
  ) {
    return (_GetFirmwareEnvironmentVariableExA ??= _dylib.lookupFunction<
            _c_GetFirmwareEnvironmentVariableExA,
            _dart_GetFirmwareEnvironmentVariableExA>(
        'GetFirmwareEnvironmentVariableExA'))(
      lpName,
      lpGuid,
      pBuffer,
      nSize,
      pdwAttribubutes,
    );
  }

  _dart_GetFirmwareEnvironmentVariableExA? _GetFirmwareEnvironmentVariableExA;

  int GetFirmwareEnvironmentVariableExW(
    ffi.Pointer<ffi.Uint16> lpName,
    ffi.Pointer<ffi.Uint16> lpGuid,
    ffi.Pointer<ffi.Void> pBuffer,
    int nSize,
    ffi.Pointer<ffi.Uint64> pdwAttribubutes,
  ) {
    return (_GetFirmwareEnvironmentVariableExW ??= _dylib.lookupFunction<
            _c_GetFirmwareEnvironmentVariableExW,
            _dart_GetFirmwareEnvironmentVariableExW>(
        'GetFirmwareEnvironmentVariableExW'))(
      lpName,
      lpGuid,
      pBuffer,
      nSize,
      pdwAttribubutes,
    );
  }

  _dart_GetFirmwareEnvironmentVariableExW? _GetFirmwareEnvironmentVariableExW;

  int SetFirmwareEnvironmentVariableA(
    ffi.Pointer<ffi.Int8> lpName,
    ffi.Pointer<ffi.Int8> lpGuid,
    ffi.Pointer<ffi.Void> pValue,
    int nSize,
  ) {
    return (_SetFirmwareEnvironmentVariableA ??= _dylib.lookupFunction<
            _c_SetFirmwareEnvironmentVariableA,
            _dart_SetFirmwareEnvironmentVariableA>(
        'SetFirmwareEnvironmentVariableA'))(
      lpName,
      lpGuid,
      pValue,
      nSize,
    );
  }

  _dart_SetFirmwareEnvironmentVariableA? _SetFirmwareEnvironmentVariableA;

  int SetFirmwareEnvironmentVariableW(
    ffi.Pointer<ffi.Uint16> lpName,
    ffi.Pointer<ffi.Uint16> lpGuid,
    ffi.Pointer<ffi.Void> pValue,
    int nSize,
  ) {
    return (_SetFirmwareEnvironmentVariableW ??= _dylib.lookupFunction<
            _c_SetFirmwareEnvironmentVariableW,
            _dart_SetFirmwareEnvironmentVariableW>(
        'SetFirmwareEnvironmentVariableW'))(
      lpName,
      lpGuid,
      pValue,
      nSize,
    );
  }

  _dart_SetFirmwareEnvironmentVariableW? _SetFirmwareEnvironmentVariableW;

  int SetFirmwareEnvironmentVariableExA(
    ffi.Pointer<ffi.Int8> lpName,
    ffi.Pointer<ffi.Int8> lpGuid,
    ffi.Pointer<ffi.Void> pValue,
    int nSize,
    int dwAttributes,
  ) {
    return (_SetFirmwareEnvironmentVariableExA ??= _dylib.lookupFunction<
            _c_SetFirmwareEnvironmentVariableExA,
            _dart_SetFirmwareEnvironmentVariableExA>(
        'SetFirmwareEnvironmentVariableExA'))(
      lpName,
      lpGuid,
      pValue,
      nSize,
      dwAttributes,
    );
  }

  _dart_SetFirmwareEnvironmentVariableExA? _SetFirmwareEnvironmentVariableExA;

  int SetFirmwareEnvironmentVariableExW(
    ffi.Pointer<ffi.Uint16> lpName,
    ffi.Pointer<ffi.Uint16> lpGuid,
    ffi.Pointer<ffi.Void> pValue,
    int nSize,
    int dwAttributes,
  ) {
    return (_SetFirmwareEnvironmentVariableExW ??= _dylib.lookupFunction<
            _c_SetFirmwareEnvironmentVariableExW,
            _dart_SetFirmwareEnvironmentVariableExW>(
        'SetFirmwareEnvironmentVariableExW'))(
      lpName,
      lpGuid,
      pValue,
      nSize,
      dwAttributes,
    );
  }

  _dart_SetFirmwareEnvironmentVariableExW? _SetFirmwareEnvironmentVariableExW;

  int GetFirmwareType(
    ffi.Pointer<ffi.Int32> FirmwareType,
  ) {
    return (_GetFirmwareType ??=
        _dylib.lookupFunction<_c_GetFirmwareType, _dart_GetFirmwareType>(
            'GetFirmwareType'))(
      FirmwareType,
    );
  }

  _dart_GetFirmwareType? _GetFirmwareType;

  int IsNativeVhdBoot(
    ffi.Pointer<ffi.Int32> NativeVhdBoot,
  ) {
    return (_IsNativeVhdBoot ??=
        _dylib.lookupFunction<_c_IsNativeVhdBoot, _dart_IsNativeVhdBoot>(
            'IsNativeVhdBoot'))(
      NativeVhdBoot,
    );
  }

  _dart_IsNativeVhdBoot? _IsNativeVhdBoot;

  ffi.Pointer<HRSRC__> FindResourceA(
    ffi.Pointer<HINSTANCE__> hModule,
    ffi.Pointer<ffi.Int8> lpName,
    ffi.Pointer<ffi.Int8> lpType,
  ) {
    return (_FindResourceA ??=
        _dylib.lookupFunction<_c_FindResourceA, _dart_FindResourceA>(
            'FindResourceA'))(
      hModule,
      lpName,
      lpType,
    );
  }

  _dart_FindResourceA? _FindResourceA;

  ffi.Pointer<HRSRC__> FindResourceExA(
    ffi.Pointer<HINSTANCE__> hModule,
    ffi.Pointer<ffi.Int8> lpType,
    ffi.Pointer<ffi.Int8> lpName,
    int wLanguage,
  ) {
    return (_FindResourceExA ??=
        _dylib.lookupFunction<_c_FindResourceExA, _dart_FindResourceExA>(
            'FindResourceExA'))(
      hModule,
      lpType,
      lpName,
      wLanguage,
    );
  }

  _dart_FindResourceExA? _FindResourceExA;

  int EnumResourceTypesA(
    ffi.Pointer<HINSTANCE__> hModule,
    ffi.Pointer<ffi.NativeFunction<ENUMRESTYPEPROCA>> lpEnumFunc,
    int lParam,
  ) {
    return (_EnumResourceTypesA ??=
        _dylib.lookupFunction<_c_EnumResourceTypesA, _dart_EnumResourceTypesA>(
            'EnumResourceTypesA'))(
      hModule,
      lpEnumFunc,
      lParam,
    );
  }

  _dart_EnumResourceTypesA? _EnumResourceTypesA;

  int EnumResourceTypesW(
    ffi.Pointer<HINSTANCE__> hModule,
    ffi.Pointer<ffi.NativeFunction<ENUMRESTYPEPROCW>> lpEnumFunc,
    int lParam,
  ) {
    return (_EnumResourceTypesW ??=
        _dylib.lookupFunction<_c_EnumResourceTypesW, _dart_EnumResourceTypesW>(
            'EnumResourceTypesW'))(
      hModule,
      lpEnumFunc,
      lParam,
    );
  }

  _dart_EnumResourceTypesW? _EnumResourceTypesW;

  int EnumResourceNamesA(
    ffi.Pointer<HINSTANCE__> hModule,
    ffi.Pointer<ffi.Int8> lpType,
    ffi.Pointer<ffi.NativeFunction<ENUMRESNAMEPROCA>> lpEnumFunc,
    int lParam,
  ) {
    return (_EnumResourceNamesA ??=
        _dylib.lookupFunction<_c_EnumResourceNamesA, _dart_EnumResourceNamesA>(
            'EnumResourceNamesA'))(
      hModule,
      lpType,
      lpEnumFunc,
      lParam,
    );
  }

  _dart_EnumResourceNamesA? _EnumResourceNamesA;

  int EnumResourceLanguagesA(
    ffi.Pointer<HINSTANCE__> hModule,
    ffi.Pointer<ffi.Int8> lpType,
    ffi.Pointer<ffi.Int8> lpName,
    ffi.Pointer<ffi.NativeFunction<ENUMRESLANGPROCA>> lpEnumFunc,
    int lParam,
  ) {
    return (_EnumResourceLanguagesA ??= _dylib.lookupFunction<
        _c_EnumResourceLanguagesA,
        _dart_EnumResourceLanguagesA>('EnumResourceLanguagesA'))(
      hModule,
      lpType,
      lpName,
      lpEnumFunc,
      lParam,
    );
  }

  _dart_EnumResourceLanguagesA? _EnumResourceLanguagesA;

  int EnumResourceLanguagesW(
    ffi.Pointer<HINSTANCE__> hModule,
    ffi.Pointer<ffi.Uint16> lpType,
    ffi.Pointer<ffi.Uint16> lpName,
    ffi.Pointer<ffi.NativeFunction<ENUMRESLANGPROCW>> lpEnumFunc,
    int lParam,
  ) {
    return (_EnumResourceLanguagesW ??= _dylib.lookupFunction<
        _c_EnumResourceLanguagesW,
        _dart_EnumResourceLanguagesW>('EnumResourceLanguagesW'))(
      hModule,
      lpType,
      lpName,
      lpEnumFunc,
      lParam,
    );
  }

  _dart_EnumResourceLanguagesW? _EnumResourceLanguagesW;

  ffi.Pointer<ffi.Void> BeginUpdateResourceA(
    ffi.Pointer<ffi.Int8> pFileName,
    int bDeleteExistingResources,
  ) {
    return (_BeginUpdateResourceA ??= _dylib.lookupFunction<
        _c_BeginUpdateResourceA,
        _dart_BeginUpdateResourceA>('BeginUpdateResourceA'))(
      pFileName,
      bDeleteExistingResources,
    );
  }

  _dart_BeginUpdateResourceA? _BeginUpdateResourceA;

  ffi.Pointer<ffi.Void> BeginUpdateResourceW(
    ffi.Pointer<ffi.Uint16> pFileName,
    int bDeleteExistingResources,
  ) {
    return (_BeginUpdateResourceW ??= _dylib.lookupFunction<
        _c_BeginUpdateResourceW,
        _dart_BeginUpdateResourceW>('BeginUpdateResourceW'))(
      pFileName,
      bDeleteExistingResources,
    );
  }

  _dart_BeginUpdateResourceW? _BeginUpdateResourceW;

  int UpdateResourceA(
    ffi.Pointer<ffi.Void> hUpdate,
    ffi.Pointer<ffi.Int8> lpType,
    ffi.Pointer<ffi.Int8> lpName,
    int wLanguage,
    ffi.Pointer<ffi.Void> lpData,
    int cb,
  ) {
    return (_UpdateResourceA ??=
        _dylib.lookupFunction<_c_UpdateResourceA, _dart_UpdateResourceA>(
            'UpdateResourceA'))(
      hUpdate,
      lpType,
      lpName,
      wLanguage,
      lpData,
      cb,
    );
  }

  _dart_UpdateResourceA? _UpdateResourceA;

  int UpdateResourceW(
    ffi.Pointer<ffi.Void> hUpdate,
    ffi.Pointer<ffi.Uint16> lpType,
    ffi.Pointer<ffi.Uint16> lpName,
    int wLanguage,
    ffi.Pointer<ffi.Void> lpData,
    int cb,
  ) {
    return (_UpdateResourceW ??=
        _dylib.lookupFunction<_c_UpdateResourceW, _dart_UpdateResourceW>(
            'UpdateResourceW'))(
      hUpdate,
      lpType,
      lpName,
      wLanguage,
      lpData,
      cb,
    );
  }

  _dart_UpdateResourceW? _UpdateResourceW;

  int EndUpdateResourceA(
    ffi.Pointer<ffi.Void> hUpdate,
    int fDiscard,
  ) {
    return (_EndUpdateResourceA ??=
        _dylib.lookupFunction<_c_EndUpdateResourceA, _dart_EndUpdateResourceA>(
            'EndUpdateResourceA'))(
      hUpdate,
      fDiscard,
    );
  }

  _dart_EndUpdateResourceA? _EndUpdateResourceA;

  int EndUpdateResourceW(
    ffi.Pointer<ffi.Void> hUpdate,
    int fDiscard,
  ) {
    return (_EndUpdateResourceW ??=
        _dylib.lookupFunction<_c_EndUpdateResourceW, _dart_EndUpdateResourceW>(
            'EndUpdateResourceW'))(
      hUpdate,
      fDiscard,
    );
  }

  _dart_EndUpdateResourceW? _EndUpdateResourceW;

  int GlobalAddAtomA(
    ffi.Pointer<ffi.Int8> lpString,
  ) {
    return (_GlobalAddAtomA ??=
        _dylib.lookupFunction<_c_GlobalAddAtomA, _dart_GlobalAddAtomA>(
            'GlobalAddAtomA'))(
      lpString,
    );
  }

  _dart_GlobalAddAtomA? _GlobalAddAtomA;

  int GlobalAddAtomW(
    ffi.Pointer<ffi.Uint16> lpString,
  ) {
    return (_GlobalAddAtomW ??=
        _dylib.lookupFunction<_c_GlobalAddAtomW, _dart_GlobalAddAtomW>(
            'GlobalAddAtomW'))(
      lpString,
    );
  }

  _dart_GlobalAddAtomW? _GlobalAddAtomW;

  int GlobalAddAtomExA(
    ffi.Pointer<ffi.Int8> lpString,
    int Flags,
  ) {
    return (_GlobalAddAtomExA ??=
        _dylib.lookupFunction<_c_GlobalAddAtomExA, _dart_GlobalAddAtomExA>(
            'GlobalAddAtomExA'))(
      lpString,
      Flags,
    );
  }

  _dart_GlobalAddAtomExA? _GlobalAddAtomExA;

  int GlobalAddAtomExW(
    ffi.Pointer<ffi.Uint16> lpString,
    int Flags,
  ) {
    return (_GlobalAddAtomExW ??=
        _dylib.lookupFunction<_c_GlobalAddAtomExW, _dart_GlobalAddAtomExW>(
            'GlobalAddAtomExW'))(
      lpString,
      Flags,
    );
  }

  _dart_GlobalAddAtomExW? _GlobalAddAtomExW;

  int GlobalFindAtomA(
    ffi.Pointer<ffi.Int8> lpString,
  ) {
    return (_GlobalFindAtomA ??=
        _dylib.lookupFunction<_c_GlobalFindAtomA, _dart_GlobalFindAtomA>(
            'GlobalFindAtomA'))(
      lpString,
    );
  }

  _dart_GlobalFindAtomA? _GlobalFindAtomA;

  int GlobalFindAtomW(
    ffi.Pointer<ffi.Uint16> lpString,
  ) {
    return (_GlobalFindAtomW ??=
        _dylib.lookupFunction<_c_GlobalFindAtomW, _dart_GlobalFindAtomW>(
            'GlobalFindAtomW'))(
      lpString,
    );
  }

  _dart_GlobalFindAtomW? _GlobalFindAtomW;

  int GlobalGetAtomNameA(
    int nAtom,
    ffi.Pointer<ffi.Int8> lpBuffer,
    int nSize,
  ) {
    return (_GlobalGetAtomNameA ??=
        _dylib.lookupFunction<_c_GlobalGetAtomNameA, _dart_GlobalGetAtomNameA>(
            'GlobalGetAtomNameA'))(
      nAtom,
      lpBuffer,
      nSize,
    );
  }

  _dart_GlobalGetAtomNameA? _GlobalGetAtomNameA;

  int GlobalGetAtomNameW(
    int nAtom,
    ffi.Pointer<ffi.Uint16> lpBuffer,
    int nSize,
  ) {
    return (_GlobalGetAtomNameW ??=
        _dylib.lookupFunction<_c_GlobalGetAtomNameW, _dart_GlobalGetAtomNameW>(
            'GlobalGetAtomNameW'))(
      nAtom,
      lpBuffer,
      nSize,
    );
  }

  _dart_GlobalGetAtomNameW? _GlobalGetAtomNameW;

  int AddAtomA(
    ffi.Pointer<ffi.Int8> lpString,
  ) {
    return (_AddAtomA ??=
        _dylib.lookupFunction<_c_AddAtomA, _dart_AddAtomA>('AddAtomA'))(
      lpString,
    );
  }

  _dart_AddAtomA? _AddAtomA;

  int AddAtomW(
    ffi.Pointer<ffi.Uint16> lpString,
  ) {
    return (_AddAtomW ??=
        _dylib.lookupFunction<_c_AddAtomW, _dart_AddAtomW>('AddAtomW'))(
      lpString,
    );
  }

  _dart_AddAtomW? _AddAtomW;

  int FindAtomA(
    ffi.Pointer<ffi.Int8> lpString,
  ) {
    return (_FindAtomA ??=
        _dylib.lookupFunction<_c_FindAtomA, _dart_FindAtomA>('FindAtomA'))(
      lpString,
    );
  }

  _dart_FindAtomA? _FindAtomA;

  int FindAtomW(
    ffi.Pointer<ffi.Uint16> lpString,
  ) {
    return (_FindAtomW ??=
        _dylib.lookupFunction<_c_FindAtomW, _dart_FindAtomW>('FindAtomW'))(
      lpString,
    );
  }

  _dart_FindAtomW? _FindAtomW;

  int GetAtomNameA(
    int nAtom,
    ffi.Pointer<ffi.Int8> lpBuffer,
    int nSize,
  ) {
    return (_GetAtomNameA ??= _dylib
        .lookupFunction<_c_GetAtomNameA, _dart_GetAtomNameA>('GetAtomNameA'))(
      nAtom,
      lpBuffer,
      nSize,
    );
  }

  _dart_GetAtomNameA? _GetAtomNameA;

  int GetAtomNameW(
    int nAtom,
    ffi.Pointer<ffi.Uint16> lpBuffer,
    int nSize,
  ) {
    return (_GetAtomNameW ??= _dylib
        .lookupFunction<_c_GetAtomNameW, _dart_GetAtomNameW>('GetAtomNameW'))(
      nAtom,
      lpBuffer,
      nSize,
    );
  }

  _dart_GetAtomNameW? _GetAtomNameW;

  int GetProfileIntA(
    ffi.Pointer<ffi.Int8> lpAppName,
    ffi.Pointer<ffi.Int8> lpKeyName,
    int nDefault,
  ) {
    return (_GetProfileIntA ??=
        _dylib.lookupFunction<_c_GetProfileIntA, _dart_GetProfileIntA>(
            'GetProfileIntA'))(
      lpAppName,
      lpKeyName,
      nDefault,
    );
  }

  _dart_GetProfileIntA? _GetProfileIntA;

  int GetProfileIntW(
    ffi.Pointer<ffi.Uint16> lpAppName,
    ffi.Pointer<ffi.Uint16> lpKeyName,
    int nDefault,
  ) {
    return (_GetProfileIntW ??=
        _dylib.lookupFunction<_c_GetProfileIntW, _dart_GetProfileIntW>(
            'GetProfileIntW'))(
      lpAppName,
      lpKeyName,
      nDefault,
    );
  }

  _dart_GetProfileIntW? _GetProfileIntW;

  int GetProfileStringA(
    ffi.Pointer<ffi.Int8> lpAppName,
    ffi.Pointer<ffi.Int8> lpKeyName,
    ffi.Pointer<ffi.Int8> lpDefault,
    ffi.Pointer<ffi.Int8> lpReturnedString,
    int nSize,
  ) {
    return (_GetProfileStringA ??=
        _dylib.lookupFunction<_c_GetProfileStringA, _dart_GetProfileStringA>(
            'GetProfileStringA'))(
      lpAppName,
      lpKeyName,
      lpDefault,
      lpReturnedString,
      nSize,
    );
  }

  _dart_GetProfileStringA? _GetProfileStringA;

  int GetProfileStringW(
    ffi.Pointer<ffi.Uint16> lpAppName,
    ffi.Pointer<ffi.Uint16> lpKeyName,
    ffi.Pointer<ffi.Uint16> lpDefault,
    ffi.Pointer<ffi.Uint16> lpReturnedString,
    int nSize,
  ) {
    return (_GetProfileStringW ??=
        _dylib.lookupFunction<_c_GetProfileStringW, _dart_GetProfileStringW>(
            'GetProfileStringW'))(
      lpAppName,
      lpKeyName,
      lpDefault,
      lpReturnedString,
      nSize,
    );
  }

  _dart_GetProfileStringW? _GetProfileStringW;

  int WriteProfileStringA(
    ffi.Pointer<ffi.Int8> lpAppName,
    ffi.Pointer<ffi.Int8> lpKeyName,
    ffi.Pointer<ffi.Int8> lpString,
  ) {
    return (_WriteProfileStringA ??= _dylib.lookupFunction<
        _c_WriteProfileStringA,
        _dart_WriteProfileStringA>('WriteProfileStringA'))(
      lpAppName,
      lpKeyName,
      lpString,
    );
  }

  _dart_WriteProfileStringA? _WriteProfileStringA;

  int WriteProfileStringW(
    ffi.Pointer<ffi.Uint16> lpAppName,
    ffi.Pointer<ffi.Uint16> lpKeyName,
    ffi.Pointer<ffi.Uint16> lpString,
  ) {
    return (_WriteProfileStringW ??= _dylib.lookupFunction<
        _c_WriteProfileStringW,
        _dart_WriteProfileStringW>('WriteProfileStringW'))(
      lpAppName,
      lpKeyName,
      lpString,
    );
  }

  _dart_WriteProfileStringW? _WriteProfileStringW;

  int GetProfileSectionA(
    ffi.Pointer<ffi.Int8> lpAppName,
    ffi.Pointer<ffi.Int8> lpReturnedString,
    int nSize,
  ) {
    return (_GetProfileSectionA ??=
        _dylib.lookupFunction<_c_GetProfileSectionA, _dart_GetProfileSectionA>(
            'GetProfileSectionA'))(
      lpAppName,
      lpReturnedString,
      nSize,
    );
  }

  _dart_GetProfileSectionA? _GetProfileSectionA;

  int GetProfileSectionW(
    ffi.Pointer<ffi.Uint16> lpAppName,
    ffi.Pointer<ffi.Uint16> lpReturnedString,
    int nSize,
  ) {
    return (_GetProfileSectionW ??=
        _dylib.lookupFunction<_c_GetProfileSectionW, _dart_GetProfileSectionW>(
            'GetProfileSectionW'))(
      lpAppName,
      lpReturnedString,
      nSize,
    );
  }

  _dart_GetProfileSectionW? _GetProfileSectionW;

  int WriteProfileSectionA(
    ffi.Pointer<ffi.Int8> lpAppName,
    ffi.Pointer<ffi.Int8> lpString,
  ) {
    return (_WriteProfileSectionA ??= _dylib.lookupFunction<
        _c_WriteProfileSectionA,
        _dart_WriteProfileSectionA>('WriteProfileSectionA'))(
      lpAppName,
      lpString,
    );
  }

  _dart_WriteProfileSectionA? _WriteProfileSectionA;

  int WriteProfileSectionW(
    ffi.Pointer<ffi.Uint16> lpAppName,
    ffi.Pointer<ffi.Uint16> lpString,
  ) {
    return (_WriteProfileSectionW ??= _dylib.lookupFunction<
        _c_WriteProfileSectionW,
        _dart_WriteProfileSectionW>('WriteProfileSectionW'))(
      lpAppName,
      lpString,
    );
  }

  _dart_WriteProfileSectionW? _WriteProfileSectionW;

  int GetPrivateProfileIntA(
    ffi.Pointer<ffi.Int8> lpAppName,
    ffi.Pointer<ffi.Int8> lpKeyName,
    int nDefault,
    ffi.Pointer<ffi.Int8> lpFileName,
  ) {
    return (_GetPrivateProfileIntA ??= _dylib.lookupFunction<
        _c_GetPrivateProfileIntA,
        _dart_GetPrivateProfileIntA>('GetPrivateProfileIntA'))(
      lpAppName,
      lpKeyName,
      nDefault,
      lpFileName,
    );
  }

  _dart_GetPrivateProfileIntA? _GetPrivateProfileIntA;

  int GetPrivateProfileIntW(
    ffi.Pointer<ffi.Uint16> lpAppName,
    ffi.Pointer<ffi.Uint16> lpKeyName,
    int nDefault,
    ffi.Pointer<ffi.Uint16> lpFileName,
  ) {
    return (_GetPrivateProfileIntW ??= _dylib.lookupFunction<
        _c_GetPrivateProfileIntW,
        _dart_GetPrivateProfileIntW>('GetPrivateProfileIntW'))(
      lpAppName,
      lpKeyName,
      nDefault,
      lpFileName,
    );
  }

  _dart_GetPrivateProfileIntW? _GetPrivateProfileIntW;

  int GetPrivateProfileStringA(
    ffi.Pointer<ffi.Int8> lpAppName,
    ffi.Pointer<ffi.Int8> lpKeyName,
    ffi.Pointer<ffi.Int8> lpDefault,
    ffi.Pointer<ffi.Int8> lpReturnedString,
    int nSize,
    ffi.Pointer<ffi.Int8> lpFileName,
  ) {
    return (_GetPrivateProfileStringA ??= _dylib.lookupFunction<
        _c_GetPrivateProfileStringA,
        _dart_GetPrivateProfileStringA>('GetPrivateProfileStringA'))(
      lpAppName,
      lpKeyName,
      lpDefault,
      lpReturnedString,
      nSize,
      lpFileName,
    );
  }

  _dart_GetPrivateProfileStringA? _GetPrivateProfileStringA;

  int GetPrivateProfileStringW(
    ffi.Pointer<ffi.Uint16> lpAppName,
    ffi.Pointer<ffi.Uint16> lpKeyName,
    ffi.Pointer<ffi.Uint16> lpDefault,
    ffi.Pointer<ffi.Uint16> lpReturnedString,
    int nSize,
    ffi.Pointer<ffi.Uint16> lpFileName,
  ) {
    return (_GetPrivateProfileStringW ??= _dylib.lookupFunction<
        _c_GetPrivateProfileStringW,
        _dart_GetPrivateProfileStringW>('GetPrivateProfileStringW'))(
      lpAppName,
      lpKeyName,
      lpDefault,
      lpReturnedString,
      nSize,
      lpFileName,
    );
  }

  _dart_GetPrivateProfileStringW? _GetPrivateProfileStringW;

  int WritePrivateProfileStringA(
    ffi.Pointer<ffi.Int8> lpAppName,
    ffi.Pointer<ffi.Int8> lpKeyName,
    ffi.Pointer<ffi.Int8> lpString,
    ffi.Pointer<ffi.Int8> lpFileName,
  ) {
    return (_WritePrivateProfileStringA ??= _dylib.lookupFunction<
        _c_WritePrivateProfileStringA,
        _dart_WritePrivateProfileStringA>('WritePrivateProfileStringA'))(
      lpAppName,
      lpKeyName,
      lpString,
      lpFileName,
    );
  }

  _dart_WritePrivateProfileStringA? _WritePrivateProfileStringA;

  int WritePrivateProfileStringW(
    ffi.Pointer<ffi.Uint16> lpAppName,
    ffi.Pointer<ffi.Uint16> lpKeyName,
    ffi.Pointer<ffi.Uint16> lpString,
    ffi.Pointer<ffi.Uint16> lpFileName,
  ) {
    return (_WritePrivateProfileStringW ??= _dylib.lookupFunction<
        _c_WritePrivateProfileStringW,
        _dart_WritePrivateProfileStringW>('WritePrivateProfileStringW'))(
      lpAppName,
      lpKeyName,
      lpString,
      lpFileName,
    );
  }

  _dart_WritePrivateProfileStringW? _WritePrivateProfileStringW;

  int GetPrivateProfileSectionA(
    ffi.Pointer<ffi.Int8> lpAppName,
    ffi.Pointer<ffi.Int8> lpReturnedString,
    int nSize,
    ffi.Pointer<ffi.Int8> lpFileName,
  ) {
    return (_GetPrivateProfileSectionA ??= _dylib.lookupFunction<
        _c_GetPrivateProfileSectionA,
        _dart_GetPrivateProfileSectionA>('GetPrivateProfileSectionA'))(
      lpAppName,
      lpReturnedString,
      nSize,
      lpFileName,
    );
  }

  _dart_GetPrivateProfileSectionA? _GetPrivateProfileSectionA;

  int GetPrivateProfileSectionW(
    ffi.Pointer<ffi.Uint16> lpAppName,
    ffi.Pointer<ffi.Uint16> lpReturnedString,
    int nSize,
    ffi.Pointer<ffi.Uint16> lpFileName,
  ) {
    return (_GetPrivateProfileSectionW ??= _dylib.lookupFunction<
        _c_GetPrivateProfileSectionW,
        _dart_GetPrivateProfileSectionW>('GetPrivateProfileSectionW'))(
      lpAppName,
      lpReturnedString,
      nSize,
      lpFileName,
    );
  }

  _dart_GetPrivateProfileSectionW? _GetPrivateProfileSectionW;

  int WritePrivateProfileSectionA(
    ffi.Pointer<ffi.Int8> lpAppName,
    ffi.Pointer<ffi.Int8> lpString,
    ffi.Pointer<ffi.Int8> lpFileName,
  ) {
    return (_WritePrivateProfileSectionA ??= _dylib.lookupFunction<
        _c_WritePrivateProfileSectionA,
        _dart_WritePrivateProfileSectionA>('WritePrivateProfileSectionA'))(
      lpAppName,
      lpString,
      lpFileName,
    );
  }

  _dart_WritePrivateProfileSectionA? _WritePrivateProfileSectionA;

  int WritePrivateProfileSectionW(
    ffi.Pointer<ffi.Uint16> lpAppName,
    ffi.Pointer<ffi.Uint16> lpString,
    ffi.Pointer<ffi.Uint16> lpFileName,
  ) {
    return (_WritePrivateProfileSectionW ??= _dylib.lookupFunction<
        _c_WritePrivateProfileSectionW,
        _dart_WritePrivateProfileSectionW>('WritePrivateProfileSectionW'))(
      lpAppName,
      lpString,
      lpFileName,
    );
  }

  _dart_WritePrivateProfileSectionW? _WritePrivateProfileSectionW;

  int GetPrivateProfileSectionNamesA(
    ffi.Pointer<ffi.Int8> lpszReturnBuffer,
    int nSize,
    ffi.Pointer<ffi.Int8> lpFileName,
  ) {
    return (_GetPrivateProfileSectionNamesA ??= _dylib.lookupFunction<
            _c_GetPrivateProfileSectionNamesA,
            _dart_GetPrivateProfileSectionNamesA>(
        'GetPrivateProfileSectionNamesA'))(
      lpszReturnBuffer,
      nSize,
      lpFileName,
    );
  }

  _dart_GetPrivateProfileSectionNamesA? _GetPrivateProfileSectionNamesA;

  int GetPrivateProfileSectionNamesW(
    ffi.Pointer<ffi.Uint16> lpszReturnBuffer,
    int nSize,
    ffi.Pointer<ffi.Uint16> lpFileName,
  ) {
    return (_GetPrivateProfileSectionNamesW ??= _dylib.lookupFunction<
            _c_GetPrivateProfileSectionNamesW,
            _dart_GetPrivateProfileSectionNamesW>(
        'GetPrivateProfileSectionNamesW'))(
      lpszReturnBuffer,
      nSize,
      lpFileName,
    );
  }

  _dart_GetPrivateProfileSectionNamesW? _GetPrivateProfileSectionNamesW;

  int GetPrivateProfileStructA(
    ffi.Pointer<ffi.Int8> lpszSection,
    ffi.Pointer<ffi.Int8> lpszKey,
    ffi.Pointer<ffi.Void> lpStruct,
    int uSizeStruct,
    ffi.Pointer<ffi.Int8> szFile,
  ) {
    return (_GetPrivateProfileStructA ??= _dylib.lookupFunction<
        _c_GetPrivateProfileStructA,
        _dart_GetPrivateProfileStructA>('GetPrivateProfileStructA'))(
      lpszSection,
      lpszKey,
      lpStruct,
      uSizeStruct,
      szFile,
    );
  }

  _dart_GetPrivateProfileStructA? _GetPrivateProfileStructA;

  int GetPrivateProfileStructW(
    ffi.Pointer<ffi.Uint16> lpszSection,
    ffi.Pointer<ffi.Uint16> lpszKey,
    ffi.Pointer<ffi.Void> lpStruct,
    int uSizeStruct,
    ffi.Pointer<ffi.Uint16> szFile,
  ) {
    return (_GetPrivateProfileStructW ??= _dylib.lookupFunction<
        _c_GetPrivateProfileStructW,
        _dart_GetPrivateProfileStructW>('GetPrivateProfileStructW'))(
      lpszSection,
      lpszKey,
      lpStruct,
      uSizeStruct,
      szFile,
    );
  }

  _dart_GetPrivateProfileStructW? _GetPrivateProfileStructW;

  int WritePrivateProfileStructA(
    ffi.Pointer<ffi.Int8> lpszSection,
    ffi.Pointer<ffi.Int8> lpszKey,
    ffi.Pointer<ffi.Void> lpStruct,
    int uSizeStruct,
    ffi.Pointer<ffi.Int8> szFile,
  ) {
    return (_WritePrivateProfileStructA ??= _dylib.lookupFunction<
        _c_WritePrivateProfileStructA,
        _dart_WritePrivateProfileStructA>('WritePrivateProfileStructA'))(
      lpszSection,
      lpszKey,
      lpStruct,
      uSizeStruct,
      szFile,
    );
  }

  _dart_WritePrivateProfileStructA? _WritePrivateProfileStructA;

  int WritePrivateProfileStructW(
    ffi.Pointer<ffi.Uint16> lpszSection,
    ffi.Pointer<ffi.Uint16> lpszKey,
    ffi.Pointer<ffi.Void> lpStruct,
    int uSizeStruct,
    ffi.Pointer<ffi.Uint16> szFile,
  ) {
    return (_WritePrivateProfileStructW ??= _dylib.lookupFunction<
        _c_WritePrivateProfileStructW,
        _dart_WritePrivateProfileStructW>('WritePrivateProfileStructW'))(
      lpszSection,
      lpszKey,
      lpStruct,
      uSizeStruct,
      szFile,
    );
  }

  _dart_WritePrivateProfileStructW? _WritePrivateProfileStructW;

  int Wow64EnableWow64FsRedirection(
    int Wow64FsEnableRedirection,
  ) {
    return (_Wow64EnableWow64FsRedirection ??= _dylib.lookupFunction<
        _c_Wow64EnableWow64FsRedirection,
        _dart_Wow64EnableWow64FsRedirection>('Wow64EnableWow64FsRedirection'))(
      Wow64FsEnableRedirection,
    );
  }

  _dart_Wow64EnableWow64FsRedirection? _Wow64EnableWow64FsRedirection;

  int SetDllDirectoryA(
    ffi.Pointer<ffi.Int8> lpPathName,
  ) {
    return (_SetDllDirectoryA ??=
        _dylib.lookupFunction<_c_SetDllDirectoryA, _dart_SetDllDirectoryA>(
            'SetDllDirectoryA'))(
      lpPathName,
    );
  }

  _dart_SetDllDirectoryA? _SetDllDirectoryA;

  int SetDllDirectoryW(
    ffi.Pointer<ffi.Uint16> lpPathName,
  ) {
    return (_SetDllDirectoryW ??=
        _dylib.lookupFunction<_c_SetDllDirectoryW, _dart_SetDllDirectoryW>(
            'SetDllDirectoryW'))(
      lpPathName,
    );
  }

  _dart_SetDllDirectoryW? _SetDllDirectoryW;

  int GetDllDirectoryA(
    int nBufferLength,
    ffi.Pointer<ffi.Int8> lpBuffer,
  ) {
    return (_GetDllDirectoryA ??=
        _dylib.lookupFunction<_c_GetDllDirectoryA, _dart_GetDllDirectoryA>(
            'GetDllDirectoryA'))(
      nBufferLength,
      lpBuffer,
    );
  }

  _dart_GetDllDirectoryA? _GetDllDirectoryA;

  int GetDllDirectoryW(
    int nBufferLength,
    ffi.Pointer<ffi.Uint16> lpBuffer,
  ) {
    return (_GetDllDirectoryW ??=
        _dylib.lookupFunction<_c_GetDllDirectoryW, _dart_GetDllDirectoryW>(
            'GetDllDirectoryW'))(
      nBufferLength,
      lpBuffer,
    );
  }

  _dart_GetDllDirectoryW? _GetDllDirectoryW;

  int SetSearchPathMode(
    int Flags,
  ) {
    return (_SetSearchPathMode ??=
        _dylib.lookupFunction<_c_SetSearchPathMode, _dart_SetSearchPathMode>(
            'SetSearchPathMode'))(
      Flags,
    );
  }

  _dart_SetSearchPathMode? _SetSearchPathMode;

  int CreateDirectoryExA(
    ffi.Pointer<ffi.Int8> lpTemplateDirectory,
    ffi.Pointer<ffi.Int8> lpNewDirectory,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  ) {
    return (_CreateDirectoryExA ??=
        _dylib.lookupFunction<_c_CreateDirectoryExA, _dart_CreateDirectoryExA>(
            'CreateDirectoryExA'))(
      lpTemplateDirectory,
      lpNewDirectory,
      lpSecurityAttributes,
    );
  }

  _dart_CreateDirectoryExA? _CreateDirectoryExA;

  int CreateDirectoryExW(
    ffi.Pointer<ffi.Uint16> lpTemplateDirectory,
    ffi.Pointer<ffi.Uint16> lpNewDirectory,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  ) {
    return (_CreateDirectoryExW ??=
        _dylib.lookupFunction<_c_CreateDirectoryExW, _dart_CreateDirectoryExW>(
            'CreateDirectoryExW'))(
      lpTemplateDirectory,
      lpNewDirectory,
      lpSecurityAttributes,
    );
  }

  _dart_CreateDirectoryExW? _CreateDirectoryExW;

  int CreateDirectoryTransactedA(
    ffi.Pointer<ffi.Int8> lpTemplateDirectory,
    ffi.Pointer<ffi.Int8> lpNewDirectory,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
    ffi.Pointer<ffi.Void> hTransaction,
  ) {
    return (_CreateDirectoryTransactedA ??= _dylib.lookupFunction<
        _c_CreateDirectoryTransactedA,
        _dart_CreateDirectoryTransactedA>('CreateDirectoryTransactedA'))(
      lpTemplateDirectory,
      lpNewDirectory,
      lpSecurityAttributes,
      hTransaction,
    );
  }

  _dart_CreateDirectoryTransactedA? _CreateDirectoryTransactedA;

  int CreateDirectoryTransactedW(
    ffi.Pointer<ffi.Uint16> lpTemplateDirectory,
    ffi.Pointer<ffi.Uint16> lpNewDirectory,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
    ffi.Pointer<ffi.Void> hTransaction,
  ) {
    return (_CreateDirectoryTransactedW ??= _dylib.lookupFunction<
        _c_CreateDirectoryTransactedW,
        _dart_CreateDirectoryTransactedW>('CreateDirectoryTransactedW'))(
      lpTemplateDirectory,
      lpNewDirectory,
      lpSecurityAttributes,
      hTransaction,
    );
  }

  _dart_CreateDirectoryTransactedW? _CreateDirectoryTransactedW;

  int RemoveDirectoryTransactedA(
    ffi.Pointer<ffi.Int8> lpPathName,
    ffi.Pointer<ffi.Void> hTransaction,
  ) {
    return (_RemoveDirectoryTransactedA ??= _dylib.lookupFunction<
        _c_RemoveDirectoryTransactedA,
        _dart_RemoveDirectoryTransactedA>('RemoveDirectoryTransactedA'))(
      lpPathName,
      hTransaction,
    );
  }

  _dart_RemoveDirectoryTransactedA? _RemoveDirectoryTransactedA;

  int RemoveDirectoryTransactedW(
    ffi.Pointer<ffi.Uint16> lpPathName,
    ffi.Pointer<ffi.Void> hTransaction,
  ) {
    return (_RemoveDirectoryTransactedW ??= _dylib.lookupFunction<
        _c_RemoveDirectoryTransactedW,
        _dart_RemoveDirectoryTransactedW>('RemoveDirectoryTransactedW'))(
      lpPathName,
      hTransaction,
    );
  }

  _dart_RemoveDirectoryTransactedW? _RemoveDirectoryTransactedW;

  int GetFullPathNameTransactedA(
    ffi.Pointer<ffi.Int8> lpFileName,
    int nBufferLength,
    ffi.Pointer<ffi.Int8> lpBuffer,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> lpFilePart,
    ffi.Pointer<ffi.Void> hTransaction,
  ) {
    return (_GetFullPathNameTransactedA ??= _dylib.lookupFunction<
        _c_GetFullPathNameTransactedA,
        _dart_GetFullPathNameTransactedA>('GetFullPathNameTransactedA'))(
      lpFileName,
      nBufferLength,
      lpBuffer,
      lpFilePart,
      hTransaction,
    );
  }

  _dart_GetFullPathNameTransactedA? _GetFullPathNameTransactedA;

  int GetFullPathNameTransactedW(
    ffi.Pointer<ffi.Uint16> lpFileName,
    int nBufferLength,
    ffi.Pointer<ffi.Uint16> lpBuffer,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> lpFilePart,
    ffi.Pointer<ffi.Void> hTransaction,
  ) {
    return (_GetFullPathNameTransactedW ??= _dylib.lookupFunction<
        _c_GetFullPathNameTransactedW,
        _dart_GetFullPathNameTransactedW>('GetFullPathNameTransactedW'))(
      lpFileName,
      nBufferLength,
      lpBuffer,
      lpFilePart,
      hTransaction,
    );
  }

  _dart_GetFullPathNameTransactedW? _GetFullPathNameTransactedW;

  int DefineDosDeviceA(
    int dwFlags,
    ffi.Pointer<ffi.Int8> lpDeviceName,
    ffi.Pointer<ffi.Int8> lpTargetPath,
  ) {
    return (_DefineDosDeviceA ??=
        _dylib.lookupFunction<_c_DefineDosDeviceA, _dart_DefineDosDeviceA>(
            'DefineDosDeviceA'))(
      dwFlags,
      lpDeviceName,
      lpTargetPath,
    );
  }

  _dart_DefineDosDeviceA? _DefineDosDeviceA;

  int QueryDosDeviceA(
    ffi.Pointer<ffi.Int8> lpDeviceName,
    ffi.Pointer<ffi.Int8> lpTargetPath,
    int ucchMax,
  ) {
    return (_QueryDosDeviceA ??=
        _dylib.lookupFunction<_c_QueryDosDeviceA, _dart_QueryDosDeviceA>(
            'QueryDosDeviceA'))(
      lpDeviceName,
      lpTargetPath,
      ucchMax,
    );
  }

  _dart_QueryDosDeviceA? _QueryDosDeviceA;

  ffi.Pointer<ffi.Void> CreateFileTransactedA(
    ffi.Pointer<ffi.Int8> lpFileName,
    int dwDesiredAccess,
    int dwShareMode,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
    int dwCreationDisposition,
    int dwFlagsAndAttributes,
    ffi.Pointer<ffi.Void> hTemplateFile,
    ffi.Pointer<ffi.Void> hTransaction,
    ffi.Pointer<ffi.Uint16> pusMiniVersion,
    ffi.Pointer<ffi.Void> lpExtendedParameter,
  ) {
    return (_CreateFileTransactedA ??= _dylib.lookupFunction<
        _c_CreateFileTransactedA,
        _dart_CreateFileTransactedA>('CreateFileTransactedA'))(
      lpFileName,
      dwDesiredAccess,
      dwShareMode,
      lpSecurityAttributes,
      dwCreationDisposition,
      dwFlagsAndAttributes,
      hTemplateFile,
      hTransaction,
      pusMiniVersion,
      lpExtendedParameter,
    );
  }

  _dart_CreateFileTransactedA? _CreateFileTransactedA;

  ffi.Pointer<ffi.Void> CreateFileTransactedW(
    ffi.Pointer<ffi.Uint16> lpFileName,
    int dwDesiredAccess,
    int dwShareMode,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
    int dwCreationDisposition,
    int dwFlagsAndAttributes,
    ffi.Pointer<ffi.Void> hTemplateFile,
    ffi.Pointer<ffi.Void> hTransaction,
    ffi.Pointer<ffi.Uint16> pusMiniVersion,
    ffi.Pointer<ffi.Void> lpExtendedParameter,
  ) {
    return (_CreateFileTransactedW ??= _dylib.lookupFunction<
        _c_CreateFileTransactedW,
        _dart_CreateFileTransactedW>('CreateFileTransactedW'))(
      lpFileName,
      dwDesiredAccess,
      dwShareMode,
      lpSecurityAttributes,
      dwCreationDisposition,
      dwFlagsAndAttributes,
      hTemplateFile,
      hTransaction,
      pusMiniVersion,
      lpExtendedParameter,
    );
  }

  _dart_CreateFileTransactedW? _CreateFileTransactedW;

  ffi.Pointer<ffi.Void> ReOpenFile(
    ffi.Pointer<ffi.Void> hOriginalFile,
    int dwDesiredAccess,
    int dwShareMode,
    int dwFlagsAndAttributes,
  ) {
    return (_ReOpenFile ??=
        _dylib.lookupFunction<_c_ReOpenFile, _dart_ReOpenFile>('ReOpenFile'))(
      hOriginalFile,
      dwDesiredAccess,
      dwShareMode,
      dwFlagsAndAttributes,
    );
  }

  _dart_ReOpenFile? _ReOpenFile;

  int SetFileAttributesTransactedA(
    ffi.Pointer<ffi.Int8> lpFileName,
    int dwFileAttributes,
    ffi.Pointer<ffi.Void> hTransaction,
  ) {
    return (_SetFileAttributesTransactedA ??= _dylib.lookupFunction<
        _c_SetFileAttributesTransactedA,
        _dart_SetFileAttributesTransactedA>('SetFileAttributesTransactedA'))(
      lpFileName,
      dwFileAttributes,
      hTransaction,
    );
  }

  _dart_SetFileAttributesTransactedA? _SetFileAttributesTransactedA;

  int SetFileAttributesTransactedW(
    ffi.Pointer<ffi.Uint16> lpFileName,
    int dwFileAttributes,
    ffi.Pointer<ffi.Void> hTransaction,
  ) {
    return (_SetFileAttributesTransactedW ??= _dylib.lookupFunction<
        _c_SetFileAttributesTransactedW,
        _dart_SetFileAttributesTransactedW>('SetFileAttributesTransactedW'))(
      lpFileName,
      dwFileAttributes,
      hTransaction,
    );
  }

  _dart_SetFileAttributesTransactedW? _SetFileAttributesTransactedW;

  int GetFileAttributesTransactedA(
    ffi.Pointer<ffi.Int8> lpFileName,
    int fInfoLevelId,
    ffi.Pointer<ffi.Void> lpFileInformation,
    ffi.Pointer<ffi.Void> hTransaction,
  ) {
    return (_GetFileAttributesTransactedA ??= _dylib.lookupFunction<
        _c_GetFileAttributesTransactedA,
        _dart_GetFileAttributesTransactedA>('GetFileAttributesTransactedA'))(
      lpFileName,
      fInfoLevelId,
      lpFileInformation,
      hTransaction,
    );
  }

  _dart_GetFileAttributesTransactedA? _GetFileAttributesTransactedA;

  int GetFileAttributesTransactedW(
    ffi.Pointer<ffi.Uint16> lpFileName,
    int fInfoLevelId,
    ffi.Pointer<ffi.Void> lpFileInformation,
    ffi.Pointer<ffi.Void> hTransaction,
  ) {
    return (_GetFileAttributesTransactedW ??= _dylib.lookupFunction<
        _c_GetFileAttributesTransactedW,
        _dart_GetFileAttributesTransactedW>('GetFileAttributesTransactedW'))(
      lpFileName,
      fInfoLevelId,
      lpFileInformation,
      hTransaction,
    );
  }

  _dart_GetFileAttributesTransactedW? _GetFileAttributesTransactedW;

  int GetCompressedFileSizeTransactedA(
    ffi.Pointer<ffi.Int8> lpFileName,
    ffi.Pointer<ffi.Uint64> lpFileSizeHigh,
    ffi.Pointer<ffi.Void> hTransaction,
  ) {
    return (_GetCompressedFileSizeTransactedA ??= _dylib.lookupFunction<
            _c_GetCompressedFileSizeTransactedA,
            _dart_GetCompressedFileSizeTransactedA>(
        'GetCompressedFileSizeTransactedA'))(
      lpFileName,
      lpFileSizeHigh,
      hTransaction,
    );
  }

  _dart_GetCompressedFileSizeTransactedA? _GetCompressedFileSizeTransactedA;

  int GetCompressedFileSizeTransactedW(
    ffi.Pointer<ffi.Uint16> lpFileName,
    ffi.Pointer<ffi.Uint64> lpFileSizeHigh,
    ffi.Pointer<ffi.Void> hTransaction,
  ) {
    return (_GetCompressedFileSizeTransactedW ??= _dylib.lookupFunction<
            _c_GetCompressedFileSizeTransactedW,
            _dart_GetCompressedFileSizeTransactedW>(
        'GetCompressedFileSizeTransactedW'))(
      lpFileName,
      lpFileSizeHigh,
      hTransaction,
    );
  }

  _dart_GetCompressedFileSizeTransactedW? _GetCompressedFileSizeTransactedW;

  int DeleteFileTransactedA(
    ffi.Pointer<ffi.Int8> lpFileName,
    ffi.Pointer<ffi.Void> hTransaction,
  ) {
    return (_DeleteFileTransactedA ??= _dylib.lookupFunction<
        _c_DeleteFileTransactedA,
        _dart_DeleteFileTransactedA>('DeleteFileTransactedA'))(
      lpFileName,
      hTransaction,
    );
  }

  _dart_DeleteFileTransactedA? _DeleteFileTransactedA;

  int DeleteFileTransactedW(
    ffi.Pointer<ffi.Uint16> lpFileName,
    ffi.Pointer<ffi.Void> hTransaction,
  ) {
    return (_DeleteFileTransactedW ??= _dylib.lookupFunction<
        _c_DeleteFileTransactedW,
        _dart_DeleteFileTransactedW>('DeleteFileTransactedW'))(
      lpFileName,
      hTransaction,
    );
  }

  _dart_DeleteFileTransactedW? _DeleteFileTransactedW;

  int CheckNameLegalDOS8Dot3A(
    ffi.Pointer<ffi.Int8> lpName,
    ffi.Pointer<ffi.Int8> lpOemName,
    int OemNameSize,
    ffi.Pointer<ffi.Int32> pbNameContainsSpaces,
    ffi.Pointer<ffi.Int32> pbNameLegal,
  ) {
    return (_CheckNameLegalDOS8Dot3A ??= _dylib.lookupFunction<
        _c_CheckNameLegalDOS8Dot3A,
        _dart_CheckNameLegalDOS8Dot3A>('CheckNameLegalDOS8Dot3A'))(
      lpName,
      lpOemName,
      OemNameSize,
      pbNameContainsSpaces,
      pbNameLegal,
    );
  }

  _dart_CheckNameLegalDOS8Dot3A? _CheckNameLegalDOS8Dot3A;

  int CheckNameLegalDOS8Dot3W(
    ffi.Pointer<ffi.Uint16> lpName,
    ffi.Pointer<ffi.Int8> lpOemName,
    int OemNameSize,
    ffi.Pointer<ffi.Int32> pbNameContainsSpaces,
    ffi.Pointer<ffi.Int32> pbNameLegal,
  ) {
    return (_CheckNameLegalDOS8Dot3W ??= _dylib.lookupFunction<
        _c_CheckNameLegalDOS8Dot3W,
        _dart_CheckNameLegalDOS8Dot3W>('CheckNameLegalDOS8Dot3W'))(
      lpName,
      lpOemName,
      OemNameSize,
      pbNameContainsSpaces,
      pbNameLegal,
    );
  }

  _dart_CheckNameLegalDOS8Dot3W? _CheckNameLegalDOS8Dot3W;

  ffi.Pointer<ffi.Void> FindFirstFileTransactedA(
    ffi.Pointer<ffi.Int8> lpFileName,
    int fInfoLevelId,
    ffi.Pointer<ffi.Void> lpFindFileData,
    int fSearchOp,
    ffi.Pointer<ffi.Void> lpSearchFilter,
    int dwAdditionalFlags,
    ffi.Pointer<ffi.Void> hTransaction,
  ) {
    return (_FindFirstFileTransactedA ??= _dylib.lookupFunction<
        _c_FindFirstFileTransactedA,
        _dart_FindFirstFileTransactedA>('FindFirstFileTransactedA'))(
      lpFileName,
      fInfoLevelId,
      lpFindFileData,
      fSearchOp,
      lpSearchFilter,
      dwAdditionalFlags,
      hTransaction,
    );
  }

  _dart_FindFirstFileTransactedA? _FindFirstFileTransactedA;

  ffi.Pointer<ffi.Void> FindFirstFileTransactedW(
    ffi.Pointer<ffi.Uint16> lpFileName,
    int fInfoLevelId,
    ffi.Pointer<ffi.Void> lpFindFileData,
    int fSearchOp,
    ffi.Pointer<ffi.Void> lpSearchFilter,
    int dwAdditionalFlags,
    ffi.Pointer<ffi.Void> hTransaction,
  ) {
    return (_FindFirstFileTransactedW ??= _dylib.lookupFunction<
        _c_FindFirstFileTransactedW,
        _dart_FindFirstFileTransactedW>('FindFirstFileTransactedW'))(
      lpFileName,
      fInfoLevelId,
      lpFindFileData,
      fSearchOp,
      lpSearchFilter,
      dwAdditionalFlags,
      hTransaction,
    );
  }

  _dart_FindFirstFileTransactedW? _FindFirstFileTransactedW;

  int CopyFileA(
    ffi.Pointer<ffi.Int8> lpExistingFileName,
    ffi.Pointer<ffi.Int8> lpNewFileName,
    int bFailIfExists,
  ) {
    return (_CopyFileA ??=
        _dylib.lookupFunction<_c_CopyFileA, _dart_CopyFileA>('CopyFileA'))(
      lpExistingFileName,
      lpNewFileName,
      bFailIfExists,
    );
  }

  _dart_CopyFileA? _CopyFileA;

  int CopyFileW(
    ffi.Pointer<ffi.Uint16> lpExistingFileName,
    ffi.Pointer<ffi.Uint16> lpNewFileName,
    int bFailIfExists,
  ) {
    return (_CopyFileW ??=
        _dylib.lookupFunction<_c_CopyFileW, _dart_CopyFileW>('CopyFileW'))(
      lpExistingFileName,
      lpNewFileName,
      bFailIfExists,
    );
  }

  _dart_CopyFileW? _CopyFileW;

  int CopyFile2(
    ffi.Pointer<ffi.Uint16> pwszExistingFileName,
    ffi.Pointer<ffi.Uint16> pwszNewFileName,
    ffi.Pointer<COPYFILE2_EXTENDED_PARAMETERS> pExtendedParameters,
  ) {
    return (_CopyFile2 ??=
        _dylib.lookupFunction<_c_CopyFile2, _dart_CopyFile2>('CopyFile2'))(
      pwszExistingFileName,
      pwszNewFileName,
      pExtendedParameters,
    );
  }

  _dart_CopyFile2? _CopyFile2;

  int MoveFileA(
    ffi.Pointer<ffi.Int8> lpExistingFileName,
    ffi.Pointer<ffi.Int8> lpNewFileName,
  ) {
    return (_MoveFileA ??=
        _dylib.lookupFunction<_c_MoveFileA, _dart_MoveFileA>('MoveFileA'))(
      lpExistingFileName,
      lpNewFileName,
    );
  }

  _dart_MoveFileA? _MoveFileA;

  int MoveFileW(
    ffi.Pointer<ffi.Uint16> lpExistingFileName,
    ffi.Pointer<ffi.Uint16> lpNewFileName,
  ) {
    return (_MoveFileW ??=
        _dylib.lookupFunction<_c_MoveFileW, _dart_MoveFileW>('MoveFileW'))(
      lpExistingFileName,
      lpNewFileName,
    );
  }

  _dart_MoveFileW? _MoveFileW;

  int MoveFileExA(
    ffi.Pointer<ffi.Int8> lpExistingFileName,
    ffi.Pointer<ffi.Int8> lpNewFileName,
    int dwFlags,
  ) {
    return (_MoveFileExA ??= _dylib
        .lookupFunction<_c_MoveFileExA, _dart_MoveFileExA>('MoveFileExA'))(
      lpExistingFileName,
      lpNewFileName,
      dwFlags,
    );
  }

  _dart_MoveFileExA? _MoveFileExA;

  int MoveFileExW(
    ffi.Pointer<ffi.Uint16> lpExistingFileName,
    ffi.Pointer<ffi.Uint16> lpNewFileName,
    int dwFlags,
  ) {
    return (_MoveFileExW ??= _dylib
        .lookupFunction<_c_MoveFileExW, _dart_MoveFileExW>('MoveFileExW'))(
      lpExistingFileName,
      lpNewFileName,
      dwFlags,
    );
  }

  _dart_MoveFileExW? _MoveFileExW;

  int ReplaceFileA(
    ffi.Pointer<ffi.Int8> lpReplacedFileName,
    ffi.Pointer<ffi.Int8> lpReplacementFileName,
    ffi.Pointer<ffi.Int8> lpBackupFileName,
    int dwReplaceFlags,
    ffi.Pointer<ffi.Void> lpExclude,
    ffi.Pointer<ffi.Void> lpReserved,
  ) {
    return (_ReplaceFileA ??= _dylib
        .lookupFunction<_c_ReplaceFileA, _dart_ReplaceFileA>('ReplaceFileA'))(
      lpReplacedFileName,
      lpReplacementFileName,
      lpBackupFileName,
      dwReplaceFlags,
      lpExclude,
      lpReserved,
    );
  }

  _dart_ReplaceFileA? _ReplaceFileA;

  int ReplaceFileW(
    ffi.Pointer<ffi.Uint16> lpReplacedFileName,
    ffi.Pointer<ffi.Uint16> lpReplacementFileName,
    ffi.Pointer<ffi.Uint16> lpBackupFileName,
    int dwReplaceFlags,
    ffi.Pointer<ffi.Void> lpExclude,
    ffi.Pointer<ffi.Void> lpReserved,
  ) {
    return (_ReplaceFileW ??= _dylib
        .lookupFunction<_c_ReplaceFileW, _dart_ReplaceFileW>('ReplaceFileW'))(
      lpReplacedFileName,
      lpReplacementFileName,
      lpBackupFileName,
      dwReplaceFlags,
      lpExclude,
      lpReserved,
    );
  }

  _dart_ReplaceFileW? _ReplaceFileW;

  int CreateHardLinkA(
    ffi.Pointer<ffi.Int8> lpFileName,
    ffi.Pointer<ffi.Int8> lpExistingFileName,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  ) {
    return (_CreateHardLinkA ??=
        _dylib.lookupFunction<_c_CreateHardLinkA, _dart_CreateHardLinkA>(
            'CreateHardLinkA'))(
      lpFileName,
      lpExistingFileName,
      lpSecurityAttributes,
    );
  }

  _dart_CreateHardLinkA? _CreateHardLinkA;

  int CreateHardLinkW(
    ffi.Pointer<ffi.Uint16> lpFileName,
    ffi.Pointer<ffi.Uint16> lpExistingFileName,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  ) {
    return (_CreateHardLinkW ??=
        _dylib.lookupFunction<_c_CreateHardLinkW, _dart_CreateHardLinkW>(
            'CreateHardLinkW'))(
      lpFileName,
      lpExistingFileName,
      lpSecurityAttributes,
    );
  }

  _dart_CreateHardLinkW? _CreateHardLinkW;

  int CreateHardLinkTransactedA(
    ffi.Pointer<ffi.Int8> lpFileName,
    ffi.Pointer<ffi.Int8> lpExistingFileName,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
    ffi.Pointer<ffi.Void> hTransaction,
  ) {
    return (_CreateHardLinkTransactedA ??= _dylib.lookupFunction<
        _c_CreateHardLinkTransactedA,
        _dart_CreateHardLinkTransactedA>('CreateHardLinkTransactedA'))(
      lpFileName,
      lpExistingFileName,
      lpSecurityAttributes,
      hTransaction,
    );
  }

  _dart_CreateHardLinkTransactedA? _CreateHardLinkTransactedA;

  int CreateHardLinkTransactedW(
    ffi.Pointer<ffi.Uint16> lpFileName,
    ffi.Pointer<ffi.Uint16> lpExistingFileName,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
    ffi.Pointer<ffi.Void> hTransaction,
  ) {
    return (_CreateHardLinkTransactedW ??= _dylib.lookupFunction<
        _c_CreateHardLinkTransactedW,
        _dart_CreateHardLinkTransactedW>('CreateHardLinkTransactedW'))(
      lpFileName,
      lpExistingFileName,
      lpSecurityAttributes,
      hTransaction,
    );
  }

  _dart_CreateHardLinkTransactedW? _CreateHardLinkTransactedW;

  ffi.Pointer<ffi.Void> FindFirstStreamTransactedW(
    ffi.Pointer<ffi.Uint16> lpFileName,
    int InfoLevel,
    ffi.Pointer<ffi.Void> lpFindStreamData,
    int dwFlags,
    ffi.Pointer<ffi.Void> hTransaction,
  ) {
    return (_FindFirstStreamTransactedW ??= _dylib.lookupFunction<
        _c_FindFirstStreamTransactedW,
        _dart_FindFirstStreamTransactedW>('FindFirstStreamTransactedW'))(
      lpFileName,
      InfoLevel,
      lpFindStreamData,
      dwFlags,
      hTransaction,
    );
  }

  _dart_FindFirstStreamTransactedW? _FindFirstStreamTransactedW;

  ffi.Pointer<ffi.Void> FindFirstFileNameTransactedW(
    ffi.Pointer<ffi.Uint16> lpFileName,
    int dwFlags,
    ffi.Pointer<ffi.Uint64> StringLength,
    ffi.Pointer<ffi.Uint16> LinkName,
    ffi.Pointer<ffi.Void> hTransaction,
  ) {
    return (_FindFirstFileNameTransactedW ??= _dylib.lookupFunction<
        _c_FindFirstFileNameTransactedW,
        _dart_FindFirstFileNameTransactedW>('FindFirstFileNameTransactedW'))(
      lpFileName,
      dwFlags,
      StringLength,
      LinkName,
      hTransaction,
    );
  }

  _dart_FindFirstFileNameTransactedW? _FindFirstFileNameTransactedW;

  ffi.Pointer<ffi.Void> CreateNamedPipeA(
    ffi.Pointer<ffi.Int8> lpName,
    int dwOpenMode,
    int dwPipeMode,
    int nMaxInstances,
    int nOutBufferSize,
    int nInBufferSize,
    int nDefaultTimeOut,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  ) {
    return (_CreateNamedPipeA ??=
        _dylib.lookupFunction<_c_CreateNamedPipeA, _dart_CreateNamedPipeA>(
            'CreateNamedPipeA'))(
      lpName,
      dwOpenMode,
      dwPipeMode,
      nMaxInstances,
      nOutBufferSize,
      nInBufferSize,
      nDefaultTimeOut,
      lpSecurityAttributes,
    );
  }

  _dart_CreateNamedPipeA? _CreateNamedPipeA;

  int GetNamedPipeHandleStateA(
    ffi.Pointer<ffi.Void> hNamedPipe,
    ffi.Pointer<ffi.Uint64> lpState,
    ffi.Pointer<ffi.Uint64> lpCurInstances,
    ffi.Pointer<ffi.Uint64> lpMaxCollectionCount,
    ffi.Pointer<ffi.Uint64> lpCollectDataTimeout,
    ffi.Pointer<ffi.Int8> lpUserName,
    int nMaxUserNameSize,
  ) {
    return (_GetNamedPipeHandleStateA ??= _dylib.lookupFunction<
        _c_GetNamedPipeHandleStateA,
        _dart_GetNamedPipeHandleStateA>('GetNamedPipeHandleStateA'))(
      hNamedPipe,
      lpState,
      lpCurInstances,
      lpMaxCollectionCount,
      lpCollectDataTimeout,
      lpUserName,
      nMaxUserNameSize,
    );
  }

  _dart_GetNamedPipeHandleStateA? _GetNamedPipeHandleStateA;

  int CallNamedPipeA(
    ffi.Pointer<ffi.Int8> lpNamedPipeName,
    ffi.Pointer<ffi.Void> lpInBuffer,
    int nInBufferSize,
    ffi.Pointer<ffi.Void> lpOutBuffer,
    int nOutBufferSize,
    ffi.Pointer<ffi.Uint64> lpBytesRead,
    int nTimeOut,
  ) {
    return (_CallNamedPipeA ??=
        _dylib.lookupFunction<_c_CallNamedPipeA, _dart_CallNamedPipeA>(
            'CallNamedPipeA'))(
      lpNamedPipeName,
      lpInBuffer,
      nInBufferSize,
      lpOutBuffer,
      nOutBufferSize,
      lpBytesRead,
      nTimeOut,
    );
  }

  _dart_CallNamedPipeA? _CallNamedPipeA;

  int WaitNamedPipeA(
    ffi.Pointer<ffi.Int8> lpNamedPipeName,
    int nTimeOut,
  ) {
    return (_WaitNamedPipeA ??=
        _dylib.lookupFunction<_c_WaitNamedPipeA, _dart_WaitNamedPipeA>(
            'WaitNamedPipeA'))(
      lpNamedPipeName,
      nTimeOut,
    );
  }

  _dart_WaitNamedPipeA? _WaitNamedPipeA;

  int GetNamedPipeClientComputerNameA(
    ffi.Pointer<ffi.Void> Pipe,
    ffi.Pointer<ffi.Int8> ClientComputerName,
    int ClientComputerNameLength,
  ) {
    return (_GetNamedPipeClientComputerNameA ??= _dylib.lookupFunction<
            _c_GetNamedPipeClientComputerNameA,
            _dart_GetNamedPipeClientComputerNameA>(
        'GetNamedPipeClientComputerNameA'))(
      Pipe,
      ClientComputerName,
      ClientComputerNameLength,
    );
  }

  _dart_GetNamedPipeClientComputerNameA? _GetNamedPipeClientComputerNameA;

  int GetNamedPipeClientProcessId(
    ffi.Pointer<ffi.Void> Pipe,
    ffi.Pointer<ffi.Uint64> ClientProcessId,
  ) {
    return (_GetNamedPipeClientProcessId ??= _dylib.lookupFunction<
        _c_GetNamedPipeClientProcessId,
        _dart_GetNamedPipeClientProcessId>('GetNamedPipeClientProcessId'))(
      Pipe,
      ClientProcessId,
    );
  }

  _dart_GetNamedPipeClientProcessId? _GetNamedPipeClientProcessId;

  int GetNamedPipeClientSessionId(
    ffi.Pointer<ffi.Void> Pipe,
    ffi.Pointer<ffi.Uint64> ClientSessionId,
  ) {
    return (_GetNamedPipeClientSessionId ??= _dylib.lookupFunction<
        _c_GetNamedPipeClientSessionId,
        _dart_GetNamedPipeClientSessionId>('GetNamedPipeClientSessionId'))(
      Pipe,
      ClientSessionId,
    );
  }

  _dart_GetNamedPipeClientSessionId? _GetNamedPipeClientSessionId;

  int GetNamedPipeServerProcessId(
    ffi.Pointer<ffi.Void> Pipe,
    ffi.Pointer<ffi.Uint64> ServerProcessId,
  ) {
    return (_GetNamedPipeServerProcessId ??= _dylib.lookupFunction<
        _c_GetNamedPipeServerProcessId,
        _dart_GetNamedPipeServerProcessId>('GetNamedPipeServerProcessId'))(
      Pipe,
      ServerProcessId,
    );
  }

  _dart_GetNamedPipeServerProcessId? _GetNamedPipeServerProcessId;

  int GetNamedPipeServerSessionId(
    ffi.Pointer<ffi.Void> Pipe,
    ffi.Pointer<ffi.Uint64> ServerSessionId,
  ) {
    return (_GetNamedPipeServerSessionId ??= _dylib.lookupFunction<
        _c_GetNamedPipeServerSessionId,
        _dart_GetNamedPipeServerSessionId>('GetNamedPipeServerSessionId'))(
      Pipe,
      ServerSessionId,
    );
  }

  _dart_GetNamedPipeServerSessionId? _GetNamedPipeServerSessionId;

  int SetVolumeLabelA(
    ffi.Pointer<ffi.Int8> lpRootPathName,
    ffi.Pointer<ffi.Int8> lpVolumeName,
  ) {
    return (_SetVolumeLabelA ??=
        _dylib.lookupFunction<_c_SetVolumeLabelA, _dart_SetVolumeLabelA>(
            'SetVolumeLabelA'))(
      lpRootPathName,
      lpVolumeName,
    );
  }

  _dart_SetVolumeLabelA? _SetVolumeLabelA;

  int SetVolumeLabelW(
    ffi.Pointer<ffi.Uint16> lpRootPathName,
    ffi.Pointer<ffi.Uint16> lpVolumeName,
  ) {
    return (_SetVolumeLabelW ??=
        _dylib.lookupFunction<_c_SetVolumeLabelW, _dart_SetVolumeLabelW>(
            'SetVolumeLabelW'))(
      lpRootPathName,
      lpVolumeName,
    );
  }

  _dart_SetVolumeLabelW? _SetVolumeLabelW;

  int SetFileBandwidthReservation(
    ffi.Pointer<ffi.Void> hFile,
    int nPeriodMilliseconds,
    int nBytesPerPeriod,
    int bDiscardable,
    ffi.Pointer<ffi.Uint64> lpTransferSize,
    ffi.Pointer<ffi.Uint64> lpNumOutstandingRequests,
  ) {
    return (_SetFileBandwidthReservation ??= _dylib.lookupFunction<
        _c_SetFileBandwidthReservation,
        _dart_SetFileBandwidthReservation>('SetFileBandwidthReservation'))(
      hFile,
      nPeriodMilliseconds,
      nBytesPerPeriod,
      bDiscardable,
      lpTransferSize,
      lpNumOutstandingRequests,
    );
  }

  _dart_SetFileBandwidthReservation? _SetFileBandwidthReservation;

  int GetFileBandwidthReservation(
    ffi.Pointer<ffi.Void> hFile,
    ffi.Pointer<ffi.Uint64> lpPeriodMilliseconds,
    ffi.Pointer<ffi.Uint64> lpBytesPerPeriod,
    ffi.Pointer<ffi.Int32> pDiscardable,
    ffi.Pointer<ffi.Uint64> lpTransferSize,
    ffi.Pointer<ffi.Uint64> lpNumOutstandingRequests,
  ) {
    return (_GetFileBandwidthReservation ??= _dylib.lookupFunction<
        _c_GetFileBandwidthReservation,
        _dart_GetFileBandwidthReservation>('GetFileBandwidthReservation'))(
      hFile,
      lpPeriodMilliseconds,
      lpBytesPerPeriod,
      pDiscardable,
      lpTransferSize,
      lpNumOutstandingRequests,
    );
  }

  _dart_GetFileBandwidthReservation? _GetFileBandwidthReservation;

  int ClearEventLogA(
    ffi.Pointer<ffi.Void> hEventLog,
    ffi.Pointer<ffi.Int8> lpBackupFileName,
  ) {
    return (_ClearEventLogA ??=
        _dylib.lookupFunction<_c_ClearEventLogA, _dart_ClearEventLogA>(
            'ClearEventLogA'))(
      hEventLog,
      lpBackupFileName,
    );
  }

  _dart_ClearEventLogA? _ClearEventLogA;

  int ClearEventLogW(
    ffi.Pointer<ffi.Void> hEventLog,
    ffi.Pointer<ffi.Uint16> lpBackupFileName,
  ) {
    return (_ClearEventLogW ??=
        _dylib.lookupFunction<_c_ClearEventLogW, _dart_ClearEventLogW>(
            'ClearEventLogW'))(
      hEventLog,
      lpBackupFileName,
    );
  }

  _dart_ClearEventLogW? _ClearEventLogW;

  int BackupEventLogA(
    ffi.Pointer<ffi.Void> hEventLog,
    ffi.Pointer<ffi.Int8> lpBackupFileName,
  ) {
    return (_BackupEventLogA ??=
        _dylib.lookupFunction<_c_BackupEventLogA, _dart_BackupEventLogA>(
            'BackupEventLogA'))(
      hEventLog,
      lpBackupFileName,
    );
  }

  _dart_BackupEventLogA? _BackupEventLogA;

  int BackupEventLogW(
    ffi.Pointer<ffi.Void> hEventLog,
    ffi.Pointer<ffi.Uint16> lpBackupFileName,
  ) {
    return (_BackupEventLogW ??=
        _dylib.lookupFunction<_c_BackupEventLogW, _dart_BackupEventLogW>(
            'BackupEventLogW'))(
      hEventLog,
      lpBackupFileName,
    );
  }

  _dart_BackupEventLogW? _BackupEventLogW;

  int CloseEventLog(
    ffi.Pointer<ffi.Void> hEventLog,
  ) {
    return (_CloseEventLog ??=
        _dylib.lookupFunction<_c_CloseEventLog, _dart_CloseEventLog>(
            'CloseEventLog'))(
      hEventLog,
    );
  }

  _dart_CloseEventLog? _CloseEventLog;

  int DeregisterEventSource(
    ffi.Pointer<ffi.Void> hEventLog,
  ) {
    return (_DeregisterEventSource ??= _dylib.lookupFunction<
        _c_DeregisterEventSource,
        _dart_DeregisterEventSource>('DeregisterEventSource'))(
      hEventLog,
    );
  }

  _dart_DeregisterEventSource? _DeregisterEventSource;

  int NotifyChangeEventLog(
    ffi.Pointer<ffi.Void> hEventLog,
    ffi.Pointer<ffi.Void> hEvent,
  ) {
    return (_NotifyChangeEventLog ??= _dylib.lookupFunction<
        _c_NotifyChangeEventLog,
        _dart_NotifyChangeEventLog>('NotifyChangeEventLog'))(
      hEventLog,
      hEvent,
    );
  }

  _dart_NotifyChangeEventLog? _NotifyChangeEventLog;

  int GetNumberOfEventLogRecords(
    ffi.Pointer<ffi.Void> hEventLog,
    ffi.Pointer<ffi.Uint64> NumberOfRecords,
  ) {
    return (_GetNumberOfEventLogRecords ??= _dylib.lookupFunction<
        _c_GetNumberOfEventLogRecords,
        _dart_GetNumberOfEventLogRecords>('GetNumberOfEventLogRecords'))(
      hEventLog,
      NumberOfRecords,
    );
  }

  _dart_GetNumberOfEventLogRecords? _GetNumberOfEventLogRecords;

  int GetOldestEventLogRecord(
    ffi.Pointer<ffi.Void> hEventLog,
    ffi.Pointer<ffi.Uint64> OldestRecord,
  ) {
    return (_GetOldestEventLogRecord ??= _dylib.lookupFunction<
        _c_GetOldestEventLogRecord,
        _dart_GetOldestEventLogRecord>('GetOldestEventLogRecord'))(
      hEventLog,
      OldestRecord,
    );
  }

  _dart_GetOldestEventLogRecord? _GetOldestEventLogRecord;

  ffi.Pointer<ffi.Void> OpenEventLogA(
    ffi.Pointer<ffi.Int8> lpUNCServerName,
    ffi.Pointer<ffi.Int8> lpSourceName,
  ) {
    return (_OpenEventLogA ??=
        _dylib.lookupFunction<_c_OpenEventLogA, _dart_OpenEventLogA>(
            'OpenEventLogA'))(
      lpUNCServerName,
      lpSourceName,
    );
  }

  _dart_OpenEventLogA? _OpenEventLogA;

  ffi.Pointer<ffi.Void> OpenEventLogW(
    ffi.Pointer<ffi.Uint16> lpUNCServerName,
    ffi.Pointer<ffi.Uint16> lpSourceName,
  ) {
    return (_OpenEventLogW ??=
        _dylib.lookupFunction<_c_OpenEventLogW, _dart_OpenEventLogW>(
            'OpenEventLogW'))(
      lpUNCServerName,
      lpSourceName,
    );
  }

  _dart_OpenEventLogW? _OpenEventLogW;

  ffi.Pointer<ffi.Void> RegisterEventSourceA(
    ffi.Pointer<ffi.Int8> lpUNCServerName,
    ffi.Pointer<ffi.Int8> lpSourceName,
  ) {
    return (_RegisterEventSourceA ??= _dylib.lookupFunction<
        _c_RegisterEventSourceA,
        _dart_RegisterEventSourceA>('RegisterEventSourceA'))(
      lpUNCServerName,
      lpSourceName,
    );
  }

  _dart_RegisterEventSourceA? _RegisterEventSourceA;

  ffi.Pointer<ffi.Void> RegisterEventSourceW(
    ffi.Pointer<ffi.Uint16> lpUNCServerName,
    ffi.Pointer<ffi.Uint16> lpSourceName,
  ) {
    return (_RegisterEventSourceW ??= _dylib.lookupFunction<
        _c_RegisterEventSourceW,
        _dart_RegisterEventSourceW>('RegisterEventSourceW'))(
      lpUNCServerName,
      lpSourceName,
    );
  }

  _dart_RegisterEventSourceW? _RegisterEventSourceW;

  ffi.Pointer<ffi.Void> OpenBackupEventLogA(
    ffi.Pointer<ffi.Int8> lpUNCServerName,
    ffi.Pointer<ffi.Int8> lpFileName,
  ) {
    return (_OpenBackupEventLogA ??= _dylib.lookupFunction<
        _c_OpenBackupEventLogA,
        _dart_OpenBackupEventLogA>('OpenBackupEventLogA'))(
      lpUNCServerName,
      lpFileName,
    );
  }

  _dart_OpenBackupEventLogA? _OpenBackupEventLogA;

  ffi.Pointer<ffi.Void> OpenBackupEventLogW(
    ffi.Pointer<ffi.Uint16> lpUNCServerName,
    ffi.Pointer<ffi.Uint16> lpFileName,
  ) {
    return (_OpenBackupEventLogW ??= _dylib.lookupFunction<
        _c_OpenBackupEventLogW,
        _dart_OpenBackupEventLogW>('OpenBackupEventLogW'))(
      lpUNCServerName,
      lpFileName,
    );
  }

  _dart_OpenBackupEventLogW? _OpenBackupEventLogW;

  int ReadEventLogA(
    ffi.Pointer<ffi.Void> hEventLog,
    int dwReadFlags,
    int dwRecordOffset,
    ffi.Pointer<ffi.Void> lpBuffer,
    int nNumberOfBytesToRead,
    ffi.Pointer<ffi.Uint64> pnBytesRead,
    ffi.Pointer<ffi.Uint64> pnMinNumberOfBytesNeeded,
  ) {
    return (_ReadEventLogA ??=
        _dylib.lookupFunction<_c_ReadEventLogA, _dart_ReadEventLogA>(
            'ReadEventLogA'))(
      hEventLog,
      dwReadFlags,
      dwRecordOffset,
      lpBuffer,
      nNumberOfBytesToRead,
      pnBytesRead,
      pnMinNumberOfBytesNeeded,
    );
  }

  _dart_ReadEventLogA? _ReadEventLogA;

  int ReadEventLogW(
    ffi.Pointer<ffi.Void> hEventLog,
    int dwReadFlags,
    int dwRecordOffset,
    ffi.Pointer<ffi.Void> lpBuffer,
    int nNumberOfBytesToRead,
    ffi.Pointer<ffi.Uint64> pnBytesRead,
    ffi.Pointer<ffi.Uint64> pnMinNumberOfBytesNeeded,
  ) {
    return (_ReadEventLogW ??=
        _dylib.lookupFunction<_c_ReadEventLogW, _dart_ReadEventLogW>(
            'ReadEventLogW'))(
      hEventLog,
      dwReadFlags,
      dwRecordOffset,
      lpBuffer,
      nNumberOfBytesToRead,
      pnBytesRead,
      pnMinNumberOfBytesNeeded,
    );
  }

  _dart_ReadEventLogW? _ReadEventLogW;

  int ReportEventA(
    ffi.Pointer<ffi.Void> hEventLog,
    int wType,
    int wCategory,
    int dwEventID,
    ffi.Pointer<ffi.Void> lpUserSid,
    int wNumStrings,
    int dwDataSize,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> lpStrings,
    ffi.Pointer<ffi.Void> lpRawData,
  ) {
    return (_ReportEventA ??= _dylib
        .lookupFunction<_c_ReportEventA, _dart_ReportEventA>('ReportEventA'))(
      hEventLog,
      wType,
      wCategory,
      dwEventID,
      lpUserSid,
      wNumStrings,
      dwDataSize,
      lpStrings,
      lpRawData,
    );
  }

  _dart_ReportEventA? _ReportEventA;

  int ReportEventW(
    ffi.Pointer<ffi.Void> hEventLog,
    int wType,
    int wCategory,
    int dwEventID,
    ffi.Pointer<ffi.Void> lpUserSid,
    int wNumStrings,
    int dwDataSize,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> lpStrings,
    ffi.Pointer<ffi.Void> lpRawData,
  ) {
    return (_ReportEventW ??= _dylib
        .lookupFunction<_c_ReportEventW, _dart_ReportEventW>('ReportEventW'))(
      hEventLog,
      wType,
      wCategory,
      dwEventID,
      lpUserSid,
      wNumStrings,
      dwDataSize,
      lpStrings,
      lpRawData,
    );
  }

  _dart_ReportEventW? _ReportEventW;

  int GetEventLogInformation(
    ffi.Pointer<ffi.Void> hEventLog,
    int dwInfoLevel,
    ffi.Pointer<ffi.Void> lpBuffer,
    int cbBufSize,
    ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
  ) {
    return (_GetEventLogInformation ??= _dylib.lookupFunction<
        _c_GetEventLogInformation,
        _dart_GetEventLogInformation>('GetEventLogInformation'))(
      hEventLog,
      dwInfoLevel,
      lpBuffer,
      cbBufSize,
      pcbBytesNeeded,
    );
  }

  _dart_GetEventLogInformation? _GetEventLogInformation;

  int OperationStart(
    ffi.Pointer<POPERATION_START_PARAMETERS> OperationStartParams,
  ) {
    return (_OperationStart ??=
        _dylib.lookupFunction<_c_OperationStart, _dart_OperationStart>(
            'OperationStart'))(
      OperationStartParams,
    );
  }

  _dart_OperationStart? _OperationStart;

  int OperationEnd(
    ffi.Pointer<POPERATION_END_PARAMETERS> OperationEndParams,
  ) {
    return (_OperationEnd ??= _dylib
        .lookupFunction<_c_OperationEnd, _dart_OperationEnd>('OperationEnd'))(
      OperationEndParams,
    );
  }

  _dart_OperationEnd? _OperationEnd;

  int AccessCheckAndAuditAlarmA(
    ffi.Pointer<ffi.Int8> SubsystemName,
    ffi.Pointer<ffi.Void> HandleId,
    ffi.Pointer<ffi.Int8> ObjectTypeName,
    ffi.Pointer<ffi.Int8> ObjectName,
    ffi.Pointer<ffi.Void> SecurityDescriptor,
    int DesiredAccess,
    ffi.Pointer<GENERIC_MAPPING> GenericMapping,
    int ObjectCreation,
    ffi.Pointer<ffi.Uint64> GrantedAccess,
    ffi.Pointer<ffi.Int32> AccessStatus,
    ffi.Pointer<ffi.Int32> pfGenerateOnClose,
  ) {
    return (_AccessCheckAndAuditAlarmA ??= _dylib.lookupFunction<
        _c_AccessCheckAndAuditAlarmA,
        _dart_AccessCheckAndAuditAlarmA>('AccessCheckAndAuditAlarmA'))(
      SubsystemName,
      HandleId,
      ObjectTypeName,
      ObjectName,
      SecurityDescriptor,
      DesiredAccess,
      GenericMapping,
      ObjectCreation,
      GrantedAccess,
      AccessStatus,
      pfGenerateOnClose,
    );
  }

  _dart_AccessCheckAndAuditAlarmA? _AccessCheckAndAuditAlarmA;

  int AccessCheckByTypeAndAuditAlarmA(
    ffi.Pointer<ffi.Int8> SubsystemName,
    ffi.Pointer<ffi.Void> HandleId,
    ffi.Pointer<ffi.Int8> ObjectTypeName,
    ffi.Pointer<ffi.Int8> ObjectName,
    ffi.Pointer<ffi.Void> SecurityDescriptor,
    ffi.Pointer<ffi.Void> PrincipalSelfSid,
    int DesiredAccess,
    int AuditType,
    int Flags,
    ffi.Pointer<POBJECT_TYPE_LIST> ObjectTypeList,
    int ObjectTypeListLength,
    ffi.Pointer<GENERIC_MAPPING> GenericMapping,
    int ObjectCreation,
    ffi.Pointer<ffi.Uint64> GrantedAccess,
    ffi.Pointer<ffi.Int32> AccessStatus,
    ffi.Pointer<ffi.Int32> pfGenerateOnClose,
  ) {
    return (_AccessCheckByTypeAndAuditAlarmA ??= _dylib.lookupFunction<
            _c_AccessCheckByTypeAndAuditAlarmA,
            _dart_AccessCheckByTypeAndAuditAlarmA>(
        'AccessCheckByTypeAndAuditAlarmA'))(
      SubsystemName,
      HandleId,
      ObjectTypeName,
      ObjectName,
      SecurityDescriptor,
      PrincipalSelfSid,
      DesiredAccess,
      AuditType,
      Flags,
      ObjectTypeList,
      ObjectTypeListLength,
      GenericMapping,
      ObjectCreation,
      GrantedAccess,
      AccessStatus,
      pfGenerateOnClose,
    );
  }

  _dart_AccessCheckByTypeAndAuditAlarmA? _AccessCheckByTypeAndAuditAlarmA;

  int AccessCheckByTypeResultListAndAuditAlarmA(
    ffi.Pointer<ffi.Int8> SubsystemName,
    ffi.Pointer<ffi.Void> HandleId,
    ffi.Pointer<ffi.Int8> ObjectTypeName,
    ffi.Pointer<ffi.Int8> ObjectName,
    ffi.Pointer<ffi.Void> SecurityDescriptor,
    ffi.Pointer<ffi.Void> PrincipalSelfSid,
    int DesiredAccess,
    int AuditType,
    int Flags,
    ffi.Pointer<POBJECT_TYPE_LIST> ObjectTypeList,
    int ObjectTypeListLength,
    ffi.Pointer<GENERIC_MAPPING> GenericMapping,
    int ObjectCreation,
    ffi.Pointer<ffi.Uint64> GrantedAccess,
    ffi.Pointer<ffi.Uint64> AccessStatusList,
    ffi.Pointer<ffi.Int32> pfGenerateOnClose,
  ) {
    return (_AccessCheckByTypeResultListAndAuditAlarmA ??=
        _dylib.lookupFunction<_c_AccessCheckByTypeResultListAndAuditAlarmA,
                _dart_AccessCheckByTypeResultListAndAuditAlarmA>(
            'AccessCheckByTypeResultListAndAuditAlarmA'))(
      SubsystemName,
      HandleId,
      ObjectTypeName,
      ObjectName,
      SecurityDescriptor,
      PrincipalSelfSid,
      DesiredAccess,
      AuditType,
      Flags,
      ObjectTypeList,
      ObjectTypeListLength,
      GenericMapping,
      ObjectCreation,
      GrantedAccess,
      AccessStatusList,
      pfGenerateOnClose,
    );
  }

  _dart_AccessCheckByTypeResultListAndAuditAlarmA?
      _AccessCheckByTypeResultListAndAuditAlarmA;

  int AccessCheckByTypeResultListAndAuditAlarmByHandleA(
    ffi.Pointer<ffi.Int8> SubsystemName,
    ffi.Pointer<ffi.Void> HandleId,
    ffi.Pointer<ffi.Void> ClientToken,
    ffi.Pointer<ffi.Int8> ObjectTypeName,
    ffi.Pointer<ffi.Int8> ObjectName,
    ffi.Pointer<ffi.Void> SecurityDescriptor,
    ffi.Pointer<ffi.Void> PrincipalSelfSid,
    int DesiredAccess,
    int AuditType,
    int Flags,
    ffi.Pointer<POBJECT_TYPE_LIST> ObjectTypeList,
    int ObjectTypeListLength,
    ffi.Pointer<GENERIC_MAPPING> GenericMapping,
    int ObjectCreation,
    ffi.Pointer<ffi.Uint64> GrantedAccess,
    ffi.Pointer<ffi.Uint64> AccessStatusList,
    ffi.Pointer<ffi.Int32> pfGenerateOnClose,
  ) {
    return (_AccessCheckByTypeResultListAndAuditAlarmByHandleA ??=
        _dylib.lookupFunction<
                _c_AccessCheckByTypeResultListAndAuditAlarmByHandleA,
                _dart_AccessCheckByTypeResultListAndAuditAlarmByHandleA>(
            'AccessCheckByTypeResultListAndAuditAlarmByHandleA'))(
      SubsystemName,
      HandleId,
      ClientToken,
      ObjectTypeName,
      ObjectName,
      SecurityDescriptor,
      PrincipalSelfSid,
      DesiredAccess,
      AuditType,
      Flags,
      ObjectTypeList,
      ObjectTypeListLength,
      GenericMapping,
      ObjectCreation,
      GrantedAccess,
      AccessStatusList,
      pfGenerateOnClose,
    );
  }

  _dart_AccessCheckByTypeResultListAndAuditAlarmByHandleA?
      _AccessCheckByTypeResultListAndAuditAlarmByHandleA;

  int ObjectOpenAuditAlarmA(
    ffi.Pointer<ffi.Int8> SubsystemName,
    ffi.Pointer<ffi.Void> HandleId,
    ffi.Pointer<ffi.Int8> ObjectTypeName,
    ffi.Pointer<ffi.Int8> ObjectName,
    ffi.Pointer<ffi.Void> pSecurityDescriptor,
    ffi.Pointer<ffi.Void> ClientToken,
    int DesiredAccess,
    int GrantedAccess,
    ffi.Pointer<PPRIVILEGE_SET> Privileges,
    int ObjectCreation,
    int AccessGranted,
    ffi.Pointer<ffi.Int32> GenerateOnClose,
  ) {
    return (_ObjectOpenAuditAlarmA ??= _dylib.lookupFunction<
        _c_ObjectOpenAuditAlarmA,
        _dart_ObjectOpenAuditAlarmA>('ObjectOpenAuditAlarmA'))(
      SubsystemName,
      HandleId,
      ObjectTypeName,
      ObjectName,
      pSecurityDescriptor,
      ClientToken,
      DesiredAccess,
      GrantedAccess,
      Privileges,
      ObjectCreation,
      AccessGranted,
      GenerateOnClose,
    );
  }

  _dart_ObjectOpenAuditAlarmA? _ObjectOpenAuditAlarmA;

  int ObjectPrivilegeAuditAlarmA(
    ffi.Pointer<ffi.Int8> SubsystemName,
    ffi.Pointer<ffi.Void> HandleId,
    ffi.Pointer<ffi.Void> ClientToken,
    int DesiredAccess,
    ffi.Pointer<PPRIVILEGE_SET> Privileges,
    int AccessGranted,
  ) {
    return (_ObjectPrivilegeAuditAlarmA ??= _dylib.lookupFunction<
        _c_ObjectPrivilegeAuditAlarmA,
        _dart_ObjectPrivilegeAuditAlarmA>('ObjectPrivilegeAuditAlarmA'))(
      SubsystemName,
      HandleId,
      ClientToken,
      DesiredAccess,
      Privileges,
      AccessGranted,
    );
  }

  _dart_ObjectPrivilegeAuditAlarmA? _ObjectPrivilegeAuditAlarmA;

  int ObjectCloseAuditAlarmA(
    ffi.Pointer<ffi.Int8> SubsystemName,
    ffi.Pointer<ffi.Void> HandleId,
    int GenerateOnClose,
  ) {
    return (_ObjectCloseAuditAlarmA ??= _dylib.lookupFunction<
        _c_ObjectCloseAuditAlarmA,
        _dart_ObjectCloseAuditAlarmA>('ObjectCloseAuditAlarmA'))(
      SubsystemName,
      HandleId,
      GenerateOnClose,
    );
  }

  _dart_ObjectCloseAuditAlarmA? _ObjectCloseAuditAlarmA;

  int ObjectDeleteAuditAlarmA(
    ffi.Pointer<ffi.Int8> SubsystemName,
    ffi.Pointer<ffi.Void> HandleId,
    int GenerateOnClose,
  ) {
    return (_ObjectDeleteAuditAlarmA ??= _dylib.lookupFunction<
        _c_ObjectDeleteAuditAlarmA,
        _dart_ObjectDeleteAuditAlarmA>('ObjectDeleteAuditAlarmA'))(
      SubsystemName,
      HandleId,
      GenerateOnClose,
    );
  }

  _dart_ObjectDeleteAuditAlarmA? _ObjectDeleteAuditAlarmA;

  int PrivilegedServiceAuditAlarmA(
    ffi.Pointer<ffi.Int8> SubsystemName,
    ffi.Pointer<ffi.Int8> ServiceName,
    ffi.Pointer<ffi.Void> ClientToken,
    ffi.Pointer<PPRIVILEGE_SET> Privileges,
    int AccessGranted,
  ) {
    return (_PrivilegedServiceAuditAlarmA ??= _dylib.lookupFunction<
        _c_PrivilegedServiceAuditAlarmA,
        _dart_PrivilegedServiceAuditAlarmA>('PrivilegedServiceAuditAlarmA'))(
      SubsystemName,
      ServiceName,
      ClientToken,
      Privileges,
      AccessGranted,
    );
  }

  _dart_PrivilegedServiceAuditAlarmA? _PrivilegedServiceAuditAlarmA;

  int AddConditionalAce(
    ffi.Pointer<ACL> pAcl,
    int dwAceRevision,
    int AceFlags,
    int AceType,
    int AccessMask,
    ffi.Pointer<ffi.Void> pSid,
    ffi.Pointer<ffi.Uint16> ConditionStr,
    ffi.Pointer<ffi.Uint64> ReturnLength,
  ) {
    return (_AddConditionalAce ??=
        _dylib.lookupFunction<_c_AddConditionalAce, _dart_AddConditionalAce>(
            'AddConditionalAce'))(
      pAcl,
      dwAceRevision,
      AceFlags,
      AceType,
      AccessMask,
      pSid,
      ConditionStr,
      ReturnLength,
    );
  }

  _dart_AddConditionalAce? _AddConditionalAce;

  int SetFileSecurityA(
    ffi.Pointer<ffi.Int8> lpFileName,
    int SecurityInformation,
    ffi.Pointer<ffi.Void> pSecurityDescriptor,
  ) {
    return (_SetFileSecurityA ??=
        _dylib.lookupFunction<_c_SetFileSecurityA, _dart_SetFileSecurityA>(
            'SetFileSecurityA'))(
      lpFileName,
      SecurityInformation,
      pSecurityDescriptor,
    );
  }

  _dart_SetFileSecurityA? _SetFileSecurityA;

  int GetFileSecurityA(
    ffi.Pointer<ffi.Int8> lpFileName,
    int RequestedInformation,
    ffi.Pointer<ffi.Void> pSecurityDescriptor,
    int nLength,
    ffi.Pointer<ffi.Uint64> lpnLengthNeeded,
  ) {
    return (_GetFileSecurityA ??=
        _dylib.lookupFunction<_c_GetFileSecurityA, _dart_GetFileSecurityA>(
            'GetFileSecurityA'))(
      lpFileName,
      RequestedInformation,
      pSecurityDescriptor,
      nLength,
      lpnLengthNeeded,
    );
  }

  _dart_GetFileSecurityA? _GetFileSecurityA;

  int ReadDirectoryChangesW(
    ffi.Pointer<ffi.Void> hDirectory,
    ffi.Pointer<ffi.Void> lpBuffer,
    int nBufferLength,
    int bWatchSubtree,
    int dwNotifyFilter,
    ffi.Pointer<ffi.Uint64> lpBytesReturned,
    ffi.Pointer<LPOVERLAPPED> lpOverlapped,
    ffi.Pointer<ffi.NativeFunction<LPOVERLAPPED_COMPLETION_ROUTINE>>
        lpCompletionRoutine,
  ) {
    return (_ReadDirectoryChangesW ??= _dylib.lookupFunction<
        _c_ReadDirectoryChangesW,
        _dart_ReadDirectoryChangesW>('ReadDirectoryChangesW'))(
      hDirectory,
      lpBuffer,
      nBufferLength,
      bWatchSubtree,
      dwNotifyFilter,
      lpBytesReturned,
      lpOverlapped,
      lpCompletionRoutine,
    );
  }

  _dart_ReadDirectoryChangesW? _ReadDirectoryChangesW;

  int ReadDirectoryChangesExW(
    ffi.Pointer<ffi.Void> hDirectory,
    ffi.Pointer<ffi.Void> lpBuffer,
    int nBufferLength,
    int bWatchSubtree,
    int dwNotifyFilter,
    ffi.Pointer<ffi.Uint64> lpBytesReturned,
    ffi.Pointer<LPOVERLAPPED> lpOverlapped,
    ffi.Pointer<ffi.NativeFunction<LPOVERLAPPED_COMPLETION_ROUTINE>>
        lpCompletionRoutine,
    int ReadDirectoryNotifyInformationClass,
  ) {
    return (_ReadDirectoryChangesExW ??= _dylib.lookupFunction<
        _c_ReadDirectoryChangesExW,
        _dart_ReadDirectoryChangesExW>('ReadDirectoryChangesExW'))(
      hDirectory,
      lpBuffer,
      nBufferLength,
      bWatchSubtree,
      dwNotifyFilter,
      lpBytesReturned,
      lpOverlapped,
      lpCompletionRoutine,
      ReadDirectoryNotifyInformationClass,
    );
  }

  _dart_ReadDirectoryChangesExW? _ReadDirectoryChangesExW;

  ffi.Pointer<ffi.Void> MapViewOfFileExNuma(
    ffi.Pointer<ffi.Void> hFileMappingObject,
    int dwDesiredAccess,
    int dwFileOffsetHigh,
    int dwFileOffsetLow,
    int dwNumberOfBytesToMap,
    ffi.Pointer<ffi.Void> lpBaseAddress,
    int nndPreferred,
  ) {
    return (_MapViewOfFileExNuma ??= _dylib.lookupFunction<
        _c_MapViewOfFileExNuma,
        _dart_MapViewOfFileExNuma>('MapViewOfFileExNuma'))(
      hFileMappingObject,
      dwDesiredAccess,
      dwFileOffsetHigh,
      dwFileOffsetLow,
      dwNumberOfBytesToMap,
      lpBaseAddress,
      nndPreferred,
    );
  }

  _dart_MapViewOfFileExNuma? _MapViewOfFileExNuma;

  int IsBadReadPtr(
    ffi.Pointer<ffi.Void> lp,
    int ucb,
  ) {
    return (_IsBadReadPtr ??= _dylib
        .lookupFunction<_c_IsBadReadPtr, _dart_IsBadReadPtr>('IsBadReadPtr'))(
      lp,
      ucb,
    );
  }

  _dart_IsBadReadPtr? _IsBadReadPtr;

  int IsBadWritePtr(
    ffi.Pointer<ffi.Void> lp,
    int ucb,
  ) {
    return (_IsBadWritePtr ??=
        _dylib.lookupFunction<_c_IsBadWritePtr, _dart_IsBadWritePtr>(
            'IsBadWritePtr'))(
      lp,
      ucb,
    );
  }

  _dart_IsBadWritePtr? _IsBadWritePtr;

  int IsBadHugeReadPtr(
    ffi.Pointer<ffi.Void> lp,
    int ucb,
  ) {
    return (_IsBadHugeReadPtr ??=
        _dylib.lookupFunction<_c_IsBadHugeReadPtr, _dart_IsBadHugeReadPtr>(
            'IsBadHugeReadPtr'))(
      lp,
      ucb,
    );
  }

  _dart_IsBadHugeReadPtr? _IsBadHugeReadPtr;

  int IsBadHugeWritePtr(
    ffi.Pointer<ffi.Void> lp,
    int ucb,
  ) {
    return (_IsBadHugeWritePtr ??=
        _dylib.lookupFunction<_c_IsBadHugeWritePtr, _dart_IsBadHugeWritePtr>(
            'IsBadHugeWritePtr'))(
      lp,
      ucb,
    );
  }

  _dart_IsBadHugeWritePtr? _IsBadHugeWritePtr;

  int IsBadCodePtr(
    ffi.Pointer<ffi.NativeFunction<FARPROC>> lpfn,
  ) {
    return (_IsBadCodePtr ??= _dylib
        .lookupFunction<_c_IsBadCodePtr, _dart_IsBadCodePtr>('IsBadCodePtr'))(
      lpfn,
    );
  }

  _dart_IsBadCodePtr? _IsBadCodePtr;

  int IsBadStringPtrA(
    ffi.Pointer<ffi.Int8> lpsz,
    int ucchMax,
  ) {
    return (_IsBadStringPtrA ??=
        _dylib.lookupFunction<_c_IsBadStringPtrA, _dart_IsBadStringPtrA>(
            'IsBadStringPtrA'))(
      lpsz,
      ucchMax,
    );
  }

  _dart_IsBadStringPtrA? _IsBadStringPtrA;

  int IsBadStringPtrW(
    ffi.Pointer<ffi.Uint16> lpsz,
    int ucchMax,
  ) {
    return (_IsBadStringPtrW ??=
        _dylib.lookupFunction<_c_IsBadStringPtrW, _dart_IsBadStringPtrW>(
            'IsBadStringPtrW'))(
      lpsz,
      ucchMax,
    );
  }

  _dart_IsBadStringPtrW? _IsBadStringPtrW;

  int LookupAccountSidA(
    ffi.Pointer<ffi.Int8> lpSystemName,
    ffi.Pointer<ffi.Void> Sid,
    ffi.Pointer<ffi.Int8> Name,
    ffi.Pointer<ffi.Uint64> cchName,
    ffi.Pointer<ffi.Int8> ReferencedDomainName,
    ffi.Pointer<ffi.Uint64> cchReferencedDomainName,
    ffi.Pointer<ffi.Int32> peUse,
  ) {
    return (_LookupAccountSidA ??=
        _dylib.lookupFunction<_c_LookupAccountSidA, _dart_LookupAccountSidA>(
            'LookupAccountSidA'))(
      lpSystemName,
      Sid,
      Name,
      cchName,
      ReferencedDomainName,
      cchReferencedDomainName,
      peUse,
    );
  }

  _dart_LookupAccountSidA? _LookupAccountSidA;

  int LookupAccountSidW(
    ffi.Pointer<ffi.Uint16> lpSystemName,
    ffi.Pointer<ffi.Void> Sid,
    ffi.Pointer<ffi.Uint16> Name,
    ffi.Pointer<ffi.Uint64> cchName,
    ffi.Pointer<ffi.Uint16> ReferencedDomainName,
    ffi.Pointer<ffi.Uint64> cchReferencedDomainName,
    ffi.Pointer<ffi.Int32> peUse,
  ) {
    return (_LookupAccountSidW ??=
        _dylib.lookupFunction<_c_LookupAccountSidW, _dart_LookupAccountSidW>(
            'LookupAccountSidW'))(
      lpSystemName,
      Sid,
      Name,
      cchName,
      ReferencedDomainName,
      cchReferencedDomainName,
      peUse,
    );
  }

  _dart_LookupAccountSidW? _LookupAccountSidW;

  int LookupAccountNameA(
    ffi.Pointer<ffi.Int8> lpSystemName,
    ffi.Pointer<ffi.Int8> lpAccountName,
    ffi.Pointer<ffi.Void> Sid,
    ffi.Pointer<ffi.Uint64> cbSid,
    ffi.Pointer<ffi.Int8> ReferencedDomainName,
    ffi.Pointer<ffi.Uint64> cchReferencedDomainName,
    ffi.Pointer<ffi.Int32> peUse,
  ) {
    return (_LookupAccountNameA ??=
        _dylib.lookupFunction<_c_LookupAccountNameA, _dart_LookupAccountNameA>(
            'LookupAccountNameA'))(
      lpSystemName,
      lpAccountName,
      Sid,
      cbSid,
      ReferencedDomainName,
      cchReferencedDomainName,
      peUse,
    );
  }

  _dart_LookupAccountNameA? _LookupAccountNameA;

  int LookupAccountNameW(
    ffi.Pointer<ffi.Uint16> lpSystemName,
    ffi.Pointer<ffi.Uint16> lpAccountName,
    ffi.Pointer<ffi.Void> Sid,
    ffi.Pointer<ffi.Uint64> cbSid,
    ffi.Pointer<ffi.Uint16> ReferencedDomainName,
    ffi.Pointer<ffi.Uint64> cchReferencedDomainName,
    ffi.Pointer<ffi.Int32> peUse,
  ) {
    return (_LookupAccountNameW ??=
        _dylib.lookupFunction<_c_LookupAccountNameW, _dart_LookupAccountNameW>(
            'LookupAccountNameW'))(
      lpSystemName,
      lpAccountName,
      Sid,
      cbSid,
      ReferencedDomainName,
      cchReferencedDomainName,
      peUse,
    );
  }

  _dart_LookupAccountNameW? _LookupAccountNameW;

  int LookupAccountNameLocalA(
    ffi.Pointer<ffi.Int8> lpAccountName,
    ffi.Pointer<ffi.Void> Sid,
    ffi.Pointer<ffi.Uint64> cbSid,
    ffi.Pointer<ffi.Int8> ReferencedDomainName,
    ffi.Pointer<ffi.Uint64> cchReferencedDomainName,
    ffi.Pointer<ffi.Int32> peUse,
  ) {
    return (_LookupAccountNameLocalA ??= _dylib.lookupFunction<
        _c_LookupAccountNameLocalA,
        _dart_LookupAccountNameLocalA>('LookupAccountNameLocalA'))(
      lpAccountName,
      Sid,
      cbSid,
      ReferencedDomainName,
      cchReferencedDomainName,
      peUse,
    );
  }

  _dart_LookupAccountNameLocalA? _LookupAccountNameLocalA;

  int LookupAccountNameLocalW(
    ffi.Pointer<ffi.Uint16> lpAccountName,
    ffi.Pointer<ffi.Void> Sid,
    ffi.Pointer<ffi.Uint64> cbSid,
    ffi.Pointer<ffi.Uint16> ReferencedDomainName,
    ffi.Pointer<ffi.Uint64> cchReferencedDomainName,
    ffi.Pointer<ffi.Int32> peUse,
  ) {
    return (_LookupAccountNameLocalW ??= _dylib.lookupFunction<
        _c_LookupAccountNameLocalW,
        _dart_LookupAccountNameLocalW>('LookupAccountNameLocalW'))(
      lpAccountName,
      Sid,
      cbSid,
      ReferencedDomainName,
      cchReferencedDomainName,
      peUse,
    );
  }

  _dart_LookupAccountNameLocalW? _LookupAccountNameLocalW;

  int LookupAccountSidLocalA(
    ffi.Pointer<ffi.Void> Sid,
    ffi.Pointer<ffi.Int8> Name,
    ffi.Pointer<ffi.Uint64> cchName,
    ffi.Pointer<ffi.Int8> ReferencedDomainName,
    ffi.Pointer<ffi.Uint64> cchReferencedDomainName,
    ffi.Pointer<ffi.Int32> peUse,
  ) {
    return (_LookupAccountSidLocalA ??= _dylib.lookupFunction<
        _c_LookupAccountSidLocalA,
        _dart_LookupAccountSidLocalA>('LookupAccountSidLocalA'))(
      Sid,
      Name,
      cchName,
      ReferencedDomainName,
      cchReferencedDomainName,
      peUse,
    );
  }

  _dart_LookupAccountSidLocalA? _LookupAccountSidLocalA;

  int LookupAccountSidLocalW(
    ffi.Pointer<ffi.Void> Sid,
    ffi.Pointer<ffi.Uint16> Name,
    ffi.Pointer<ffi.Uint64> cchName,
    ffi.Pointer<ffi.Uint16> ReferencedDomainName,
    ffi.Pointer<ffi.Uint64> cchReferencedDomainName,
    ffi.Pointer<ffi.Int32> peUse,
  ) {
    return (_LookupAccountSidLocalW ??= _dylib.lookupFunction<
        _c_LookupAccountSidLocalW,
        _dart_LookupAccountSidLocalW>('LookupAccountSidLocalW'))(
      Sid,
      Name,
      cchName,
      ReferencedDomainName,
      cchReferencedDomainName,
      peUse,
    );
  }

  _dart_LookupAccountSidLocalW? _LookupAccountSidLocalW;

  int LookupPrivilegeValueA(
    ffi.Pointer<ffi.Int8> lpSystemName,
    ffi.Pointer<ffi.Int8> lpName,
    ffi.Pointer<PLUID> lpLuid,
  ) {
    return (_LookupPrivilegeValueA ??= _dylib.lookupFunction<
        _c_LookupPrivilegeValueA,
        _dart_LookupPrivilegeValueA>('LookupPrivilegeValueA'))(
      lpSystemName,
      lpName,
      lpLuid,
    );
  }

  _dart_LookupPrivilegeValueA? _LookupPrivilegeValueA;

  int LookupPrivilegeValueW(
    ffi.Pointer<ffi.Uint16> lpSystemName,
    ffi.Pointer<ffi.Uint16> lpName,
    ffi.Pointer<PLUID> lpLuid,
  ) {
    return (_LookupPrivilegeValueW ??= _dylib.lookupFunction<
        _c_LookupPrivilegeValueW,
        _dart_LookupPrivilegeValueW>('LookupPrivilegeValueW'))(
      lpSystemName,
      lpName,
      lpLuid,
    );
  }

  _dart_LookupPrivilegeValueW? _LookupPrivilegeValueW;

  int LookupPrivilegeNameA(
    ffi.Pointer<ffi.Int8> lpSystemName,
    ffi.Pointer<PLUID> lpLuid,
    ffi.Pointer<ffi.Int8> lpName,
    ffi.Pointer<ffi.Uint64> cchName,
  ) {
    return (_LookupPrivilegeNameA ??= _dylib.lookupFunction<
        _c_LookupPrivilegeNameA,
        _dart_LookupPrivilegeNameA>('LookupPrivilegeNameA'))(
      lpSystemName,
      lpLuid,
      lpName,
      cchName,
    );
  }

  _dart_LookupPrivilegeNameA? _LookupPrivilegeNameA;

  int LookupPrivilegeNameW(
    ffi.Pointer<ffi.Uint16> lpSystemName,
    ffi.Pointer<PLUID> lpLuid,
    ffi.Pointer<ffi.Uint16> lpName,
    ffi.Pointer<ffi.Uint64> cchName,
  ) {
    return (_LookupPrivilegeNameW ??= _dylib.lookupFunction<
        _c_LookupPrivilegeNameW,
        _dart_LookupPrivilegeNameW>('LookupPrivilegeNameW'))(
      lpSystemName,
      lpLuid,
      lpName,
      cchName,
    );
  }

  _dart_LookupPrivilegeNameW? _LookupPrivilegeNameW;

  int LookupPrivilegeDisplayNameA(
    ffi.Pointer<ffi.Int8> lpSystemName,
    ffi.Pointer<ffi.Int8> lpName,
    ffi.Pointer<ffi.Int8> lpDisplayName,
    ffi.Pointer<ffi.Uint64> cchDisplayName,
    ffi.Pointer<ffi.Uint64> lpLanguageId,
  ) {
    return (_LookupPrivilegeDisplayNameA ??= _dylib.lookupFunction<
        _c_LookupPrivilegeDisplayNameA,
        _dart_LookupPrivilegeDisplayNameA>('LookupPrivilegeDisplayNameA'))(
      lpSystemName,
      lpName,
      lpDisplayName,
      cchDisplayName,
      lpLanguageId,
    );
  }

  _dart_LookupPrivilegeDisplayNameA? _LookupPrivilegeDisplayNameA;

  int LookupPrivilegeDisplayNameW(
    ffi.Pointer<ffi.Uint16> lpSystemName,
    ffi.Pointer<ffi.Uint16> lpName,
    ffi.Pointer<ffi.Uint16> lpDisplayName,
    ffi.Pointer<ffi.Uint64> cchDisplayName,
    ffi.Pointer<ffi.Uint64> lpLanguageId,
  ) {
    return (_LookupPrivilegeDisplayNameW ??= _dylib.lookupFunction<
        _c_LookupPrivilegeDisplayNameW,
        _dart_LookupPrivilegeDisplayNameW>('LookupPrivilegeDisplayNameW'))(
      lpSystemName,
      lpName,
      lpDisplayName,
      cchDisplayName,
      lpLanguageId,
    );
  }

  _dart_LookupPrivilegeDisplayNameW? _LookupPrivilegeDisplayNameW;

  int BuildCommDCBA(
    ffi.Pointer<ffi.Int8> lpDef,
    ffi.Pointer<LPDCB> lpDCB,
  ) {
    return (_BuildCommDCBA ??=
        _dylib.lookupFunction<_c_BuildCommDCBA, _dart_BuildCommDCBA>(
            'BuildCommDCBA'))(
      lpDef,
      lpDCB,
    );
  }

  _dart_BuildCommDCBA? _BuildCommDCBA;

  int BuildCommDCBW(
    ffi.Pointer<ffi.Uint16> lpDef,
    ffi.Pointer<LPDCB> lpDCB,
  ) {
    return (_BuildCommDCBW ??=
        _dylib.lookupFunction<_c_BuildCommDCBW, _dart_BuildCommDCBW>(
            'BuildCommDCBW'))(
      lpDef,
      lpDCB,
    );
  }

  _dart_BuildCommDCBW? _BuildCommDCBW;

  int BuildCommDCBAndTimeoutsA(
    ffi.Pointer<ffi.Int8> lpDef,
    ffi.Pointer<LPDCB> lpDCB,
    ffi.Pointer<LPCOMMTIMEOUTS> lpCommTimeouts,
  ) {
    return (_BuildCommDCBAndTimeoutsA ??= _dylib.lookupFunction<
        _c_BuildCommDCBAndTimeoutsA,
        _dart_BuildCommDCBAndTimeoutsA>('BuildCommDCBAndTimeoutsA'))(
      lpDef,
      lpDCB,
      lpCommTimeouts,
    );
  }

  _dart_BuildCommDCBAndTimeoutsA? _BuildCommDCBAndTimeoutsA;

  int BuildCommDCBAndTimeoutsW(
    ffi.Pointer<ffi.Uint16> lpDef,
    ffi.Pointer<LPDCB> lpDCB,
    ffi.Pointer<LPCOMMTIMEOUTS> lpCommTimeouts,
  ) {
    return (_BuildCommDCBAndTimeoutsW ??= _dylib.lookupFunction<
        _c_BuildCommDCBAndTimeoutsW,
        _dart_BuildCommDCBAndTimeoutsW>('BuildCommDCBAndTimeoutsW'))(
      lpDef,
      lpDCB,
      lpCommTimeouts,
    );
  }

  _dart_BuildCommDCBAndTimeoutsW? _BuildCommDCBAndTimeoutsW;

  int CommConfigDialogA(
    ffi.Pointer<ffi.Int8> lpszName,
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<LPCOMMCONFIG> lpCC,
  ) {
    return (_CommConfigDialogA ??=
        _dylib.lookupFunction<_c_CommConfigDialogA, _dart_CommConfigDialogA>(
            'CommConfigDialogA'))(
      lpszName,
      hWnd,
      lpCC,
    );
  }

  _dart_CommConfigDialogA? _CommConfigDialogA;

  int CommConfigDialogW(
    ffi.Pointer<ffi.Uint16> lpszName,
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<LPCOMMCONFIG> lpCC,
  ) {
    return (_CommConfigDialogW ??=
        _dylib.lookupFunction<_c_CommConfigDialogW, _dart_CommConfigDialogW>(
            'CommConfigDialogW'))(
      lpszName,
      hWnd,
      lpCC,
    );
  }

  _dart_CommConfigDialogW? _CommConfigDialogW;

  int GetDefaultCommConfigA(
    ffi.Pointer<ffi.Int8> lpszName,
    ffi.Pointer<LPCOMMCONFIG> lpCC,
    ffi.Pointer<ffi.Uint64> lpdwSize,
  ) {
    return (_GetDefaultCommConfigA ??= _dylib.lookupFunction<
        _c_GetDefaultCommConfigA,
        _dart_GetDefaultCommConfigA>('GetDefaultCommConfigA'))(
      lpszName,
      lpCC,
      lpdwSize,
    );
  }

  _dart_GetDefaultCommConfigA? _GetDefaultCommConfigA;

  int GetDefaultCommConfigW(
    ffi.Pointer<ffi.Uint16> lpszName,
    ffi.Pointer<LPCOMMCONFIG> lpCC,
    ffi.Pointer<ffi.Uint64> lpdwSize,
  ) {
    return (_GetDefaultCommConfigW ??= _dylib.lookupFunction<
        _c_GetDefaultCommConfigW,
        _dart_GetDefaultCommConfigW>('GetDefaultCommConfigW'))(
      lpszName,
      lpCC,
      lpdwSize,
    );
  }

  _dart_GetDefaultCommConfigW? _GetDefaultCommConfigW;

  int SetDefaultCommConfigA(
    ffi.Pointer<ffi.Int8> lpszName,
    ffi.Pointer<LPCOMMCONFIG> lpCC,
    int dwSize,
  ) {
    return (_SetDefaultCommConfigA ??= _dylib.lookupFunction<
        _c_SetDefaultCommConfigA,
        _dart_SetDefaultCommConfigA>('SetDefaultCommConfigA'))(
      lpszName,
      lpCC,
      dwSize,
    );
  }

  _dart_SetDefaultCommConfigA? _SetDefaultCommConfigA;

  int SetDefaultCommConfigW(
    ffi.Pointer<ffi.Uint16> lpszName,
    ffi.Pointer<LPCOMMCONFIG> lpCC,
    int dwSize,
  ) {
    return (_SetDefaultCommConfigW ??= _dylib.lookupFunction<
        _c_SetDefaultCommConfigW,
        _dart_SetDefaultCommConfigW>('SetDefaultCommConfigW'))(
      lpszName,
      lpCC,
      dwSize,
    );
  }

  _dart_SetDefaultCommConfigW? _SetDefaultCommConfigW;

  int GetComputerNameA(
    ffi.Pointer<ffi.Int8> lpBuffer,
    ffi.Pointer<ffi.Uint64> nSize,
  ) {
    return (_GetComputerNameA ??=
        _dylib.lookupFunction<_c_GetComputerNameA, _dart_GetComputerNameA>(
            'GetComputerNameA'))(
      lpBuffer,
      nSize,
    );
  }

  _dart_GetComputerNameA? _GetComputerNameA;

  int GetComputerNameW(
    ffi.Pointer<ffi.Uint16> lpBuffer,
    ffi.Pointer<ffi.Uint64> nSize,
  ) {
    return (_GetComputerNameW ??=
        _dylib.lookupFunction<_c_GetComputerNameW, _dart_GetComputerNameW>(
            'GetComputerNameW'))(
      lpBuffer,
      nSize,
    );
  }

  _dart_GetComputerNameW? _GetComputerNameW;

  int DnsHostnameToComputerNameA(
    ffi.Pointer<ffi.Int8> Hostname,
    ffi.Pointer<ffi.Int8> ComputerName,
    ffi.Pointer<ffi.Uint64> nSize,
  ) {
    return (_DnsHostnameToComputerNameA ??= _dylib.lookupFunction<
        _c_DnsHostnameToComputerNameA,
        _dart_DnsHostnameToComputerNameA>('DnsHostnameToComputerNameA'))(
      Hostname,
      ComputerName,
      nSize,
    );
  }

  _dart_DnsHostnameToComputerNameA? _DnsHostnameToComputerNameA;

  int DnsHostnameToComputerNameW(
    ffi.Pointer<ffi.Uint16> Hostname,
    ffi.Pointer<ffi.Uint16> ComputerName,
    ffi.Pointer<ffi.Uint64> nSize,
  ) {
    return (_DnsHostnameToComputerNameW ??= _dylib.lookupFunction<
        _c_DnsHostnameToComputerNameW,
        _dart_DnsHostnameToComputerNameW>('DnsHostnameToComputerNameW'))(
      Hostname,
      ComputerName,
      nSize,
    );
  }

  _dart_DnsHostnameToComputerNameW? _DnsHostnameToComputerNameW;

  int GetUserNameA(
    ffi.Pointer<ffi.Int8> lpBuffer,
    ffi.Pointer<ffi.Uint64> pcbBuffer,
  ) {
    return (_GetUserNameA ??= _dylib
        .lookupFunction<_c_GetUserNameA, _dart_GetUserNameA>('GetUserNameA'))(
      lpBuffer,
      pcbBuffer,
    );
  }

  _dart_GetUserNameA? _GetUserNameA;

  int GetUserNameW(
    ffi.Pointer<ffi.Uint16> lpBuffer,
    ffi.Pointer<ffi.Uint64> pcbBuffer,
  ) {
    return (_GetUserNameW ??= _dylib
        .lookupFunction<_c_GetUserNameW, _dart_GetUserNameW>('GetUserNameW'))(
      lpBuffer,
      pcbBuffer,
    );
  }

  _dart_GetUserNameW? _GetUserNameW;

  int LogonUserA(
    ffi.Pointer<ffi.Int8> lpszUsername,
    ffi.Pointer<ffi.Int8> lpszDomain,
    ffi.Pointer<ffi.Int8> lpszPassword,
    int dwLogonType,
    int dwLogonProvider,
    ffi.Pointer<ffi.Pointer<ffi.Void>> phToken,
  ) {
    return (_LogonUserA ??=
        _dylib.lookupFunction<_c_LogonUserA, _dart_LogonUserA>('LogonUserA'))(
      lpszUsername,
      lpszDomain,
      lpszPassword,
      dwLogonType,
      dwLogonProvider,
      phToken,
    );
  }

  _dart_LogonUserA? _LogonUserA;

  int LogonUserW(
    ffi.Pointer<ffi.Uint16> lpszUsername,
    ffi.Pointer<ffi.Uint16> lpszDomain,
    ffi.Pointer<ffi.Uint16> lpszPassword,
    int dwLogonType,
    int dwLogonProvider,
    ffi.Pointer<ffi.Pointer<ffi.Void>> phToken,
  ) {
    return (_LogonUserW ??=
        _dylib.lookupFunction<_c_LogonUserW, _dart_LogonUserW>('LogonUserW'))(
      lpszUsername,
      lpszDomain,
      lpszPassword,
      dwLogonType,
      dwLogonProvider,
      phToken,
    );
  }

  _dart_LogonUserW? _LogonUserW;

  int LogonUserExA(
    ffi.Pointer<ffi.Int8> lpszUsername,
    ffi.Pointer<ffi.Int8> lpszDomain,
    ffi.Pointer<ffi.Int8> lpszPassword,
    int dwLogonType,
    int dwLogonProvider,
    ffi.Pointer<ffi.Pointer<ffi.Void>> phToken,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppLogonSid,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppProfileBuffer,
    ffi.Pointer<ffi.Uint64> pdwProfileLength,
    ffi.Pointer<PQUOTA_LIMITS> pQuotaLimits,
  ) {
    return (_LogonUserExA ??= _dylib
        .lookupFunction<_c_LogonUserExA, _dart_LogonUserExA>('LogonUserExA'))(
      lpszUsername,
      lpszDomain,
      lpszPassword,
      dwLogonType,
      dwLogonProvider,
      phToken,
      ppLogonSid,
      ppProfileBuffer,
      pdwProfileLength,
      pQuotaLimits,
    );
  }

  _dart_LogonUserExA? _LogonUserExA;

  int LogonUserExW(
    ffi.Pointer<ffi.Uint16> lpszUsername,
    ffi.Pointer<ffi.Uint16> lpszDomain,
    ffi.Pointer<ffi.Uint16> lpszPassword,
    int dwLogonType,
    int dwLogonProvider,
    ffi.Pointer<ffi.Pointer<ffi.Void>> phToken,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppLogonSid,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppProfileBuffer,
    ffi.Pointer<ffi.Uint64> pdwProfileLength,
    ffi.Pointer<PQUOTA_LIMITS> pQuotaLimits,
  ) {
    return (_LogonUserExW ??= _dylib
        .lookupFunction<_c_LogonUserExW, _dart_LogonUserExW>('LogonUserExW'))(
      lpszUsername,
      lpszDomain,
      lpszPassword,
      dwLogonType,
      dwLogonProvider,
      phToken,
      ppLogonSid,
      ppProfileBuffer,
      pdwProfileLength,
      pQuotaLimits,
    );
  }

  _dart_LogonUserExW? _LogonUserExW;

  int CreateProcessWithLogonW(
    ffi.Pointer<ffi.Uint16> lpUsername,
    ffi.Pointer<ffi.Uint16> lpDomain,
    ffi.Pointer<ffi.Uint16> lpPassword,
    int dwLogonFlags,
    ffi.Pointer<ffi.Uint16> lpApplicationName,
    ffi.Pointer<ffi.Uint16> lpCommandLine,
    int dwCreationFlags,
    ffi.Pointer<ffi.Void> lpEnvironment,
    ffi.Pointer<ffi.Uint16> lpCurrentDirectory,
    ffi.Pointer<LPSTARTUPINFOW> lpStartupInfo,
    ffi.Pointer<LPPROCESS_INFORMATION> lpProcessInformation,
  ) {
    return (_CreateProcessWithLogonW ??= _dylib.lookupFunction<
        _c_CreateProcessWithLogonW,
        _dart_CreateProcessWithLogonW>('CreateProcessWithLogonW'))(
      lpUsername,
      lpDomain,
      lpPassword,
      dwLogonFlags,
      lpApplicationName,
      lpCommandLine,
      dwCreationFlags,
      lpEnvironment,
      lpCurrentDirectory,
      lpStartupInfo,
      lpProcessInformation,
    );
  }

  _dart_CreateProcessWithLogonW? _CreateProcessWithLogonW;

  int CreateProcessWithTokenW(
    ffi.Pointer<ffi.Void> hToken,
    int dwLogonFlags,
    ffi.Pointer<ffi.Uint16> lpApplicationName,
    ffi.Pointer<ffi.Uint16> lpCommandLine,
    int dwCreationFlags,
    ffi.Pointer<ffi.Void> lpEnvironment,
    ffi.Pointer<ffi.Uint16> lpCurrentDirectory,
    ffi.Pointer<LPSTARTUPINFOW> lpStartupInfo,
    ffi.Pointer<LPPROCESS_INFORMATION> lpProcessInformation,
  ) {
    return (_CreateProcessWithTokenW ??= _dylib.lookupFunction<
        _c_CreateProcessWithTokenW,
        _dart_CreateProcessWithTokenW>('CreateProcessWithTokenW'))(
      hToken,
      dwLogonFlags,
      lpApplicationName,
      lpCommandLine,
      dwCreationFlags,
      lpEnvironment,
      lpCurrentDirectory,
      lpStartupInfo,
      lpProcessInformation,
    );
  }

  _dart_CreateProcessWithTokenW? _CreateProcessWithTokenW;

  int IsTokenUntrusted(
    ffi.Pointer<ffi.Void> TokenHandle,
  ) {
    return (_IsTokenUntrusted ??=
        _dylib.lookupFunction<_c_IsTokenUntrusted, _dart_IsTokenUntrusted>(
            'IsTokenUntrusted'))(
      TokenHandle,
    );
  }

  _dart_IsTokenUntrusted? _IsTokenUntrusted;

  int RegisterWaitForSingleObject(
    ffi.Pointer<ffi.Pointer<ffi.Void>> phNewWaitObject,
    ffi.Pointer<ffi.Void> hObject,
    ffi.Pointer<ffi.NativeFunction<WAITORTIMERCALLBACK>> Callback,
    ffi.Pointer<ffi.Void> Context,
    int dwMilliseconds,
    int dwFlags,
  ) {
    return (_RegisterWaitForSingleObject ??= _dylib.lookupFunction<
        _c_RegisterWaitForSingleObject,
        _dart_RegisterWaitForSingleObject>('RegisterWaitForSingleObject'))(
      phNewWaitObject,
      hObject,
      Callback,
      Context,
      dwMilliseconds,
      dwFlags,
    );
  }

  _dart_RegisterWaitForSingleObject? _RegisterWaitForSingleObject;

  int UnregisterWait(
    ffi.Pointer<ffi.Void> WaitHandle,
  ) {
    return (_UnregisterWait ??=
        _dylib.lookupFunction<_c_UnregisterWait, _dart_UnregisterWait>(
            'UnregisterWait'))(
      WaitHandle,
    );
  }

  _dart_UnregisterWait? _UnregisterWait;

  int BindIoCompletionCallback(
    ffi.Pointer<ffi.Void> FileHandle,
    ffi.Pointer<ffi.NativeFunction<LPOVERLAPPED_COMPLETION_ROUTINE>> Function_1,
    int Flags,
  ) {
    return (_BindIoCompletionCallback ??= _dylib.lookupFunction<
        _c_BindIoCompletionCallback,
        _dart_BindIoCompletionCallback>('BindIoCompletionCallback'))(
      FileHandle,
      Function_1,
      Flags,
    );
  }

  _dart_BindIoCompletionCallback? _BindIoCompletionCallback;

  ffi.Pointer<ffi.Void> SetTimerQueueTimer(
    ffi.Pointer<ffi.Void> TimerQueue,
    ffi.Pointer<ffi.NativeFunction<WAITORTIMERCALLBACK>> Callback,
    ffi.Pointer<ffi.Void> Parameter,
    int DueTime,
    int Period,
    int PreferIo,
  ) {
    return (_SetTimerQueueTimer ??=
        _dylib.lookupFunction<_c_SetTimerQueueTimer, _dart_SetTimerQueueTimer>(
            'SetTimerQueueTimer'))(
      TimerQueue,
      Callback,
      Parameter,
      DueTime,
      Period,
      PreferIo,
    );
  }

  _dart_SetTimerQueueTimer? _SetTimerQueueTimer;

  int CancelTimerQueueTimer(
    ffi.Pointer<ffi.Void> TimerQueue,
    ffi.Pointer<ffi.Void> Timer,
  ) {
    return (_CancelTimerQueueTimer ??= _dylib.lookupFunction<
        _c_CancelTimerQueueTimer,
        _dart_CancelTimerQueueTimer>('CancelTimerQueueTimer'))(
      TimerQueue,
      Timer,
    );
  }

  _dart_CancelTimerQueueTimer? _CancelTimerQueueTimer;

  int DeleteTimerQueue(
    ffi.Pointer<ffi.Void> TimerQueue,
  ) {
    return (_DeleteTimerQueue ??=
        _dylib.lookupFunction<_c_DeleteTimerQueue, _dart_DeleteTimerQueue>(
            'DeleteTimerQueue'))(
      TimerQueue,
    );
  }

  _dart_DeleteTimerQueue? _DeleteTimerQueue;

  void InitializeThreadpoolEnvironment(
    ffi.Pointer<TP_CALLBACK_ENVIRON_V3> pcbe,
  ) {
    return (_InitializeThreadpoolEnvironment ??= _dylib.lookupFunction<
            _c_InitializeThreadpoolEnvironment,
            _dart_InitializeThreadpoolEnvironment>(
        'InitializeThreadpoolEnvironment'))(
      pcbe,
    );
  }

  _dart_InitializeThreadpoolEnvironment? _InitializeThreadpoolEnvironment;

  void SetThreadpoolCallbackPool(
    ffi.Pointer<TP_CALLBACK_ENVIRON_V3> pcbe,
    ffi.Pointer<_TP_POOL> ptpp,
  ) {
    return (_SetThreadpoolCallbackPool ??= _dylib.lookupFunction<
        _c_SetThreadpoolCallbackPool,
        _dart_SetThreadpoolCallbackPool>('SetThreadpoolCallbackPool'))(
      pcbe,
      ptpp,
    );
  }

  _dart_SetThreadpoolCallbackPool? _SetThreadpoolCallbackPool;

  void SetThreadpoolCallbackCleanupGroup(
    ffi.Pointer<TP_CALLBACK_ENVIRON_V3> pcbe,
    ffi.Pointer<_TP_CLEANUP_GROUP> ptpcg,
    ffi.Pointer<ffi.NativeFunction<PTP_CLEANUP_GROUP_CANCEL_CALLBACK>> pfng,
  ) {
    return (_SetThreadpoolCallbackCleanupGroup ??= _dylib.lookupFunction<
            _c_SetThreadpoolCallbackCleanupGroup,
            _dart_SetThreadpoolCallbackCleanupGroup>(
        'SetThreadpoolCallbackCleanupGroup'))(
      pcbe,
      ptpcg,
      pfng,
    );
  }

  _dart_SetThreadpoolCallbackCleanupGroup? _SetThreadpoolCallbackCleanupGroup;

  void SetThreadpoolCallbackRunsLong(
    ffi.Pointer<TP_CALLBACK_ENVIRON_V3> pcbe,
  ) {
    return (_SetThreadpoolCallbackRunsLong ??= _dylib.lookupFunction<
        _c_SetThreadpoolCallbackRunsLong,
        _dart_SetThreadpoolCallbackRunsLong>('SetThreadpoolCallbackRunsLong'))(
      pcbe,
    );
  }

  _dart_SetThreadpoolCallbackRunsLong? _SetThreadpoolCallbackRunsLong;

  void SetThreadpoolCallbackLibrary(
    ffi.Pointer<TP_CALLBACK_ENVIRON_V3> pcbe,
    ffi.Pointer<ffi.Void> mod,
  ) {
    return (_SetThreadpoolCallbackLibrary ??= _dylib.lookupFunction<
        _c_SetThreadpoolCallbackLibrary,
        _dart_SetThreadpoolCallbackLibrary>('SetThreadpoolCallbackLibrary'))(
      pcbe,
      mod,
    );
  }

  _dart_SetThreadpoolCallbackLibrary? _SetThreadpoolCallbackLibrary;

  void SetThreadpoolCallbackPriority(
    ffi.Pointer<TP_CALLBACK_ENVIRON_V3> pcbe,
    int Priority,
  ) {
    return (_SetThreadpoolCallbackPriority ??= _dylib.lookupFunction<
        _c_SetThreadpoolCallbackPriority,
        _dart_SetThreadpoolCallbackPriority>('SetThreadpoolCallbackPriority'))(
      pcbe,
      Priority,
    );
  }

  _dart_SetThreadpoolCallbackPriority? _SetThreadpoolCallbackPriority;

  void DestroyThreadpoolEnvironment(
    ffi.Pointer<TP_CALLBACK_ENVIRON_V3> pcbe,
  ) {
    return (_DestroyThreadpoolEnvironment ??= _dylib.lookupFunction<
        _c_DestroyThreadpoolEnvironment,
        _dart_DestroyThreadpoolEnvironment>('DestroyThreadpoolEnvironment'))(
      pcbe,
    );
  }

  _dart_DestroyThreadpoolEnvironment? _DestroyThreadpoolEnvironment;

  void SetThreadpoolCallbackPersistent(
    ffi.Pointer<TP_CALLBACK_ENVIRON_V3> pcbe,
  ) {
    return (_SetThreadpoolCallbackPersistent ??= _dylib.lookupFunction<
            _c_SetThreadpoolCallbackPersistent,
            _dart_SetThreadpoolCallbackPersistent>(
        'SetThreadpoolCallbackPersistent'))(
      pcbe,
    );
  }

  _dart_SetThreadpoolCallbackPersistent? _SetThreadpoolCallbackPersistent;

  ffi.Pointer<ffi.Void> CreatePrivateNamespaceA(
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpPrivateNamespaceAttributes,
    ffi.Pointer<ffi.Void> lpBoundaryDescriptor,
    ffi.Pointer<ffi.Int8> lpAliasPrefix,
  ) {
    return (_CreatePrivateNamespaceA ??= _dylib.lookupFunction<
        _c_CreatePrivateNamespaceA,
        _dart_CreatePrivateNamespaceA>('CreatePrivateNamespaceA'))(
      lpPrivateNamespaceAttributes,
      lpBoundaryDescriptor,
      lpAliasPrefix,
    );
  }

  _dart_CreatePrivateNamespaceA? _CreatePrivateNamespaceA;

  ffi.Pointer<ffi.Void> OpenPrivateNamespaceA(
    ffi.Pointer<ffi.Void> lpBoundaryDescriptor,
    ffi.Pointer<ffi.Int8> lpAliasPrefix,
  ) {
    return (_OpenPrivateNamespaceA ??= _dylib.lookupFunction<
        _c_OpenPrivateNamespaceA,
        _dart_OpenPrivateNamespaceA>('OpenPrivateNamespaceA'))(
      lpBoundaryDescriptor,
      lpAliasPrefix,
    );
  }

  _dart_OpenPrivateNamespaceA? _OpenPrivateNamespaceA;

  ffi.Pointer<ffi.Void> CreateBoundaryDescriptorA(
    ffi.Pointer<ffi.Int8> Name,
    int Flags,
  ) {
    return (_CreateBoundaryDescriptorA ??= _dylib.lookupFunction<
        _c_CreateBoundaryDescriptorA,
        _dart_CreateBoundaryDescriptorA>('CreateBoundaryDescriptorA'))(
      Name,
      Flags,
    );
  }

  _dart_CreateBoundaryDescriptorA? _CreateBoundaryDescriptorA;

  int AddIntegrityLabelToBoundaryDescriptor(
    ffi.Pointer<ffi.Pointer<ffi.Void>> BoundaryDescriptor,
    ffi.Pointer<ffi.Void> IntegrityLabel,
  ) {
    return (_AddIntegrityLabelToBoundaryDescriptor ??= _dylib.lookupFunction<
            _c_AddIntegrityLabelToBoundaryDescriptor,
            _dart_AddIntegrityLabelToBoundaryDescriptor>(
        'AddIntegrityLabelToBoundaryDescriptor'))(
      BoundaryDescriptor,
      IntegrityLabel,
    );
  }

  _dart_AddIntegrityLabelToBoundaryDescriptor?
      _AddIntegrityLabelToBoundaryDescriptor;

  int GetCurrentHwProfileA(
    ffi.Pointer<LPHW_PROFILE_INFOA> lpHwProfileInfo,
  ) {
    return (_GetCurrentHwProfileA ??= _dylib.lookupFunction<
        _c_GetCurrentHwProfileA,
        _dart_GetCurrentHwProfileA>('GetCurrentHwProfileA'))(
      lpHwProfileInfo,
    );
  }

  _dart_GetCurrentHwProfileA? _GetCurrentHwProfileA;

  int GetCurrentHwProfileW(
    ffi.Pointer<LPHW_PROFILE_INFOW> lpHwProfileInfo,
  ) {
    return (_GetCurrentHwProfileW ??= _dylib.lookupFunction<
        _c_GetCurrentHwProfileW,
        _dart_GetCurrentHwProfileW>('GetCurrentHwProfileW'))(
      lpHwProfileInfo,
    );
  }

  _dart_GetCurrentHwProfileW? _GetCurrentHwProfileW;

  int VerifyVersionInfoA(
    ffi.Pointer<LPOSVERSIONINFOEXA> lpVersionInformation,
    int dwTypeMask,
    int dwlConditionMask,
  ) {
    return (_VerifyVersionInfoA ??=
        _dylib.lookupFunction<_c_VerifyVersionInfoA, _dart_VerifyVersionInfoA>(
            'VerifyVersionInfoA'))(
      lpVersionInformation,
      dwTypeMask,
      dwlConditionMask,
    );
  }

  _dart_VerifyVersionInfoA? _VerifyVersionInfoA;

  int VerifyVersionInfoW(
    ffi.Pointer<PRTL_OSVERSIONINFOEXW> lpVersionInformation,
    int dwTypeMask,
    int dwlConditionMask,
  ) {
    return (_VerifyVersionInfoW ??=
        _dylib.lookupFunction<_c_VerifyVersionInfoW, _dart_VerifyVersionInfoW>(
            'VerifyVersionInfoW'))(
      lpVersionInformation,
      dwTypeMask,
      dwlConditionMask,
    );
  }

  _dart_VerifyVersionInfoW? _VerifyVersionInfoW;

  int HRESULT_FROM_WIN32(
    int x,
  ) {
    return (_HRESULT_FROM_WIN32 ??=
        _dylib.lookupFunction<_c_HRESULT_FROM_WIN32, _dart_HRESULT_FROM_WIN32>(
            'HRESULT_FROM_WIN32'))(
      x,
    );
  }

  _dart_HRESULT_FROM_WIN32? _HRESULT_FROM_WIN32;

  int SystemTimeToTzSpecificLocalTime(
    ffi.Pointer<LPTIME_ZONE_INFORMATION> lpTimeZoneInformation,
    ffi.Pointer<LPSYSTEMTIME> lpUniversalTime,
    ffi.Pointer<LPSYSTEMTIME> lpLocalTime,
  ) {
    return (_SystemTimeToTzSpecificLocalTime ??= _dylib.lookupFunction<
            _c_SystemTimeToTzSpecificLocalTime,
            _dart_SystemTimeToTzSpecificLocalTime>(
        'SystemTimeToTzSpecificLocalTime'))(
      lpTimeZoneInformation,
      lpUniversalTime,
      lpLocalTime,
    );
  }

  _dart_SystemTimeToTzSpecificLocalTime? _SystemTimeToTzSpecificLocalTime;

  int TzSpecificLocalTimeToSystemTime(
    ffi.Pointer<LPTIME_ZONE_INFORMATION> lpTimeZoneInformation,
    ffi.Pointer<LPSYSTEMTIME> lpLocalTime,
    ffi.Pointer<LPSYSTEMTIME> lpUniversalTime,
  ) {
    return (_TzSpecificLocalTimeToSystemTime ??= _dylib.lookupFunction<
            _c_TzSpecificLocalTimeToSystemTime,
            _dart_TzSpecificLocalTimeToSystemTime>(
        'TzSpecificLocalTimeToSystemTime'))(
      lpTimeZoneInformation,
      lpLocalTime,
      lpUniversalTime,
    );
  }

  _dart_TzSpecificLocalTimeToSystemTime? _TzSpecificLocalTimeToSystemTime;

  int FileTimeToSystemTime(
    ffi.Pointer<LPFILETIME> lpFileTime,
    ffi.Pointer<LPSYSTEMTIME> lpSystemTime,
  ) {
    return (_FileTimeToSystemTime ??= _dylib.lookupFunction<
        _c_FileTimeToSystemTime,
        _dart_FileTimeToSystemTime>('FileTimeToSystemTime'))(
      lpFileTime,
      lpSystemTime,
    );
  }

  _dart_FileTimeToSystemTime? _FileTimeToSystemTime;

  int SystemTimeToFileTime(
    ffi.Pointer<LPSYSTEMTIME> lpSystemTime,
    ffi.Pointer<LPFILETIME> lpFileTime,
  ) {
    return (_SystemTimeToFileTime ??= _dylib.lookupFunction<
        _c_SystemTimeToFileTime,
        _dart_SystemTimeToFileTime>('SystemTimeToFileTime'))(
      lpSystemTime,
      lpFileTime,
    );
  }

  _dart_SystemTimeToFileTime? _SystemTimeToFileTime;

  int GetTimeZoneInformation(
    ffi.Pointer<LPTIME_ZONE_INFORMATION> lpTimeZoneInformation,
  ) {
    return (_GetTimeZoneInformation ??= _dylib.lookupFunction<
        _c_GetTimeZoneInformation,
        _dart_GetTimeZoneInformation>('GetTimeZoneInformation'))(
      lpTimeZoneInformation,
    );
  }

  _dart_GetTimeZoneInformation? _GetTimeZoneInformation;

  int SetTimeZoneInformation(
    ffi.Pointer<LPTIME_ZONE_INFORMATION> lpTimeZoneInformation,
  ) {
    return (_SetTimeZoneInformation ??= _dylib.lookupFunction<
        _c_SetTimeZoneInformation,
        _dart_SetTimeZoneInformation>('SetTimeZoneInformation'))(
      lpTimeZoneInformation,
    );
  }

  _dart_SetTimeZoneInformation? _SetTimeZoneInformation;

  int SetDynamicTimeZoneInformation(
    ffi.Pointer<PDYNAMIC_TIME_ZONE_INFORMATION> lpTimeZoneInformation,
  ) {
    return (_SetDynamicTimeZoneInformation ??= _dylib.lookupFunction<
        _c_SetDynamicTimeZoneInformation,
        _dart_SetDynamicTimeZoneInformation>('SetDynamicTimeZoneInformation'))(
      lpTimeZoneInformation,
    );
  }

  _dart_SetDynamicTimeZoneInformation? _SetDynamicTimeZoneInformation;

  int GetDynamicTimeZoneInformation(
    ffi.Pointer<PDYNAMIC_TIME_ZONE_INFORMATION> pTimeZoneInformation,
  ) {
    return (_GetDynamicTimeZoneInformation ??= _dylib.lookupFunction<
        _c_GetDynamicTimeZoneInformation,
        _dart_GetDynamicTimeZoneInformation>('GetDynamicTimeZoneInformation'))(
      pTimeZoneInformation,
    );
  }

  _dart_GetDynamicTimeZoneInformation? _GetDynamicTimeZoneInformation;

  int GetTimeZoneInformationForYear(
    int wYear,
    ffi.Pointer<PDYNAMIC_TIME_ZONE_INFORMATION> pdtzi,
    ffi.Pointer<LPTIME_ZONE_INFORMATION> ptzi,
  ) {
    return (_GetTimeZoneInformationForYear ??= _dylib.lookupFunction<
        _c_GetTimeZoneInformationForYear,
        _dart_GetTimeZoneInformationForYear>('GetTimeZoneInformationForYear'))(
      wYear,
      pdtzi,
      ptzi,
    );
  }

  _dart_GetTimeZoneInformationForYear? _GetTimeZoneInformationForYear;

  int EnumDynamicTimeZoneInformation(
    int dwIndex,
    ffi.Pointer<PDYNAMIC_TIME_ZONE_INFORMATION> lpTimeZoneInformation,
  ) {
    return (_EnumDynamicTimeZoneInformation ??= _dylib.lookupFunction<
            _c_EnumDynamicTimeZoneInformation,
            _dart_EnumDynamicTimeZoneInformation>(
        'EnumDynamicTimeZoneInformation'))(
      dwIndex,
      lpTimeZoneInformation,
    );
  }

  _dart_EnumDynamicTimeZoneInformation? _EnumDynamicTimeZoneInformation;

  int GetDynamicTimeZoneInformationEffectiveYears(
    ffi.Pointer<PDYNAMIC_TIME_ZONE_INFORMATION> lpTimeZoneInformation,
    ffi.Pointer<ffi.Uint64> FirstYear,
    ffi.Pointer<ffi.Uint64> LastYear,
  ) {
    return (_GetDynamicTimeZoneInformationEffectiveYears ??=
        _dylib.lookupFunction<_c_GetDynamicTimeZoneInformationEffectiveYears,
                _dart_GetDynamicTimeZoneInformationEffectiveYears>(
            'GetDynamicTimeZoneInformationEffectiveYears'))(
      lpTimeZoneInformation,
      FirstYear,
      LastYear,
    );
  }

  _dart_GetDynamicTimeZoneInformationEffectiveYears?
      _GetDynamicTimeZoneInformationEffectiveYears;

  int SystemTimeToTzSpecificLocalTimeEx(
    ffi.Pointer<PDYNAMIC_TIME_ZONE_INFORMATION> lpTimeZoneInformation,
    ffi.Pointer<LPSYSTEMTIME> lpUniversalTime,
    ffi.Pointer<LPSYSTEMTIME> lpLocalTime,
  ) {
    return (_SystemTimeToTzSpecificLocalTimeEx ??= _dylib.lookupFunction<
            _c_SystemTimeToTzSpecificLocalTimeEx,
            _dart_SystemTimeToTzSpecificLocalTimeEx>(
        'SystemTimeToTzSpecificLocalTimeEx'))(
      lpTimeZoneInformation,
      lpUniversalTime,
      lpLocalTime,
    );
  }

  _dart_SystemTimeToTzSpecificLocalTimeEx? _SystemTimeToTzSpecificLocalTimeEx;

  int TzSpecificLocalTimeToSystemTimeEx(
    ffi.Pointer<PDYNAMIC_TIME_ZONE_INFORMATION> lpTimeZoneInformation,
    ffi.Pointer<LPSYSTEMTIME> lpLocalTime,
    ffi.Pointer<LPSYSTEMTIME> lpUniversalTime,
  ) {
    return (_TzSpecificLocalTimeToSystemTimeEx ??= _dylib.lookupFunction<
            _c_TzSpecificLocalTimeToSystemTimeEx,
            _dart_TzSpecificLocalTimeToSystemTimeEx>(
        'TzSpecificLocalTimeToSystemTimeEx'))(
      lpTimeZoneInformation,
      lpLocalTime,
      lpUniversalTime,
    );
  }

  _dart_TzSpecificLocalTimeToSystemTimeEx? _TzSpecificLocalTimeToSystemTimeEx;

  int LocalFileTimeToLocalSystemTime(
    ffi.Pointer<LPTIME_ZONE_INFORMATION> timeZoneInformation,
    ffi.Pointer<LPFILETIME> localFileTime,
    ffi.Pointer<LPSYSTEMTIME> localSystemTime,
  ) {
    return (_LocalFileTimeToLocalSystemTime ??= _dylib.lookupFunction<
            _c_LocalFileTimeToLocalSystemTime,
            _dart_LocalFileTimeToLocalSystemTime>(
        'LocalFileTimeToLocalSystemTime'))(
      timeZoneInformation,
      localFileTime,
      localSystemTime,
    );
  }

  _dart_LocalFileTimeToLocalSystemTime? _LocalFileTimeToLocalSystemTime;

  int LocalSystemTimeToLocalFileTime(
    ffi.Pointer<LPTIME_ZONE_INFORMATION> timeZoneInformation,
    ffi.Pointer<LPSYSTEMTIME> localSystemTime,
    ffi.Pointer<LPFILETIME> localFileTime,
  ) {
    return (_LocalSystemTimeToLocalFileTime ??= _dylib.lookupFunction<
            _c_LocalSystemTimeToLocalFileTime,
            _dart_LocalSystemTimeToLocalFileTime>(
        'LocalSystemTimeToLocalFileTime'))(
      timeZoneInformation,
      localSystemTime,
      localFileTime,
    );
  }

  _dart_LocalSystemTimeToLocalFileTime? _LocalSystemTimeToLocalFileTime;

  int SetSystemPowerState(
    int fSuspend,
    int fForce,
  ) {
    return (_SetSystemPowerState ??= _dylib.lookupFunction<
        _c_SetSystemPowerState,
        _dart_SetSystemPowerState>('SetSystemPowerState'))(
      fSuspend,
      fForce,
    );
  }

  _dart_SetSystemPowerState? _SetSystemPowerState;

  int GetSystemPowerStatus(
    ffi.Pointer<LPSYSTEM_POWER_STATUS> lpSystemPowerStatus,
  ) {
    return (_GetSystemPowerStatus ??= _dylib.lookupFunction<
        _c_GetSystemPowerStatus,
        _dart_GetSystemPowerStatus>('GetSystemPowerStatus'))(
      lpSystemPowerStatus,
    );
  }

  _dart_GetSystemPowerStatus? _GetSystemPowerStatus;

  int MapUserPhysicalPagesScatter(
    ffi.Pointer<ffi.Pointer<ffi.Void>> VirtualAddresses,
    int NumberOfPages,
    ffi.Pointer<ffi.Uint64> PageArray,
  ) {
    return (_MapUserPhysicalPagesScatter ??= _dylib.lookupFunction<
        _c_MapUserPhysicalPagesScatter,
        _dart_MapUserPhysicalPagesScatter>('MapUserPhysicalPagesScatter'))(
      VirtualAddresses,
      NumberOfPages,
      PageArray,
    );
  }

  _dart_MapUserPhysicalPagesScatter? _MapUserPhysicalPagesScatter;

  ffi.Pointer<ffi.Void> CreateJobObjectA(
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpJobAttributes,
    ffi.Pointer<ffi.Int8> lpName,
  ) {
    return (_CreateJobObjectA ??=
        _dylib.lookupFunction<_c_CreateJobObjectA, _dart_CreateJobObjectA>(
            'CreateJobObjectA'))(
      lpJobAttributes,
      lpName,
    );
  }

  _dart_CreateJobObjectA? _CreateJobObjectA;

  ffi.Pointer<ffi.Void> OpenJobObjectA(
    int dwDesiredAccess,
    int bInheritHandle,
    ffi.Pointer<ffi.Int8> lpName,
  ) {
    return (_OpenJobObjectA ??=
        _dylib.lookupFunction<_c_OpenJobObjectA, _dart_OpenJobObjectA>(
            'OpenJobObjectA'))(
      dwDesiredAccess,
      bInheritHandle,
      lpName,
    );
  }

  _dart_OpenJobObjectA? _OpenJobObjectA;

  int CreateJobSet(
    int NumJob,
    ffi.Pointer<PJOB_SET_ARRAY> UserJobSet,
    int Flags,
  ) {
    return (_CreateJobSet ??= _dylib
        .lookupFunction<_c_CreateJobSet, _dart_CreateJobSet>('CreateJobSet'))(
      NumJob,
      UserJobSet,
      Flags,
    );
  }

  _dart_CreateJobSet? _CreateJobSet;

  ffi.Pointer<ffi.Void> FindFirstVolumeA(
    ffi.Pointer<ffi.Int8> lpszVolumeName,
    int cchBufferLength,
  ) {
    return (_FindFirstVolumeA ??=
        _dylib.lookupFunction<_c_FindFirstVolumeA, _dart_FindFirstVolumeA>(
            'FindFirstVolumeA'))(
      lpszVolumeName,
      cchBufferLength,
    );
  }

  _dart_FindFirstVolumeA? _FindFirstVolumeA;

  int FindNextVolumeA(
    ffi.Pointer<ffi.Void> hFindVolume,
    ffi.Pointer<ffi.Int8> lpszVolumeName,
    int cchBufferLength,
  ) {
    return (_FindNextVolumeA ??=
        _dylib.lookupFunction<_c_FindNextVolumeA, _dart_FindNextVolumeA>(
            'FindNextVolumeA'))(
      hFindVolume,
      lpszVolumeName,
      cchBufferLength,
    );
  }

  _dart_FindNextVolumeA? _FindNextVolumeA;

  ffi.Pointer<ffi.Void> FindFirstVolumeMountPointA(
    ffi.Pointer<ffi.Int8> lpszRootPathName,
    ffi.Pointer<ffi.Int8> lpszVolumeMountPoint,
    int cchBufferLength,
  ) {
    return (_FindFirstVolumeMountPointA ??= _dylib.lookupFunction<
        _c_FindFirstVolumeMountPointA,
        _dart_FindFirstVolumeMountPointA>('FindFirstVolumeMountPointA'))(
      lpszRootPathName,
      lpszVolumeMountPoint,
      cchBufferLength,
    );
  }

  _dart_FindFirstVolumeMountPointA? _FindFirstVolumeMountPointA;

  ffi.Pointer<ffi.Void> FindFirstVolumeMountPointW(
    ffi.Pointer<ffi.Uint16> lpszRootPathName,
    ffi.Pointer<ffi.Uint16> lpszVolumeMountPoint,
    int cchBufferLength,
  ) {
    return (_FindFirstVolumeMountPointW ??= _dylib.lookupFunction<
        _c_FindFirstVolumeMountPointW,
        _dart_FindFirstVolumeMountPointW>('FindFirstVolumeMountPointW'))(
      lpszRootPathName,
      lpszVolumeMountPoint,
      cchBufferLength,
    );
  }

  _dart_FindFirstVolumeMountPointW? _FindFirstVolumeMountPointW;

  int FindNextVolumeMountPointA(
    ffi.Pointer<ffi.Void> hFindVolumeMountPoint,
    ffi.Pointer<ffi.Int8> lpszVolumeMountPoint,
    int cchBufferLength,
  ) {
    return (_FindNextVolumeMountPointA ??= _dylib.lookupFunction<
        _c_FindNextVolumeMountPointA,
        _dart_FindNextVolumeMountPointA>('FindNextVolumeMountPointA'))(
      hFindVolumeMountPoint,
      lpszVolumeMountPoint,
      cchBufferLength,
    );
  }

  _dart_FindNextVolumeMountPointA? _FindNextVolumeMountPointA;

  int FindNextVolumeMountPointW(
    ffi.Pointer<ffi.Void> hFindVolumeMountPoint,
    ffi.Pointer<ffi.Uint16> lpszVolumeMountPoint,
    int cchBufferLength,
  ) {
    return (_FindNextVolumeMountPointW ??= _dylib.lookupFunction<
        _c_FindNextVolumeMountPointW,
        _dart_FindNextVolumeMountPointW>('FindNextVolumeMountPointW'))(
      hFindVolumeMountPoint,
      lpszVolumeMountPoint,
      cchBufferLength,
    );
  }

  _dart_FindNextVolumeMountPointW? _FindNextVolumeMountPointW;

  int FindVolumeMountPointClose(
    ffi.Pointer<ffi.Void> hFindVolumeMountPoint,
  ) {
    return (_FindVolumeMountPointClose ??= _dylib.lookupFunction<
        _c_FindVolumeMountPointClose,
        _dart_FindVolumeMountPointClose>('FindVolumeMountPointClose'))(
      hFindVolumeMountPoint,
    );
  }

  _dart_FindVolumeMountPointClose? _FindVolumeMountPointClose;

  int SetVolumeMountPointA(
    ffi.Pointer<ffi.Int8> lpszVolumeMountPoint,
    ffi.Pointer<ffi.Int8> lpszVolumeName,
  ) {
    return (_SetVolumeMountPointA ??= _dylib.lookupFunction<
        _c_SetVolumeMountPointA,
        _dart_SetVolumeMountPointA>('SetVolumeMountPointA'))(
      lpszVolumeMountPoint,
      lpszVolumeName,
    );
  }

  _dart_SetVolumeMountPointA? _SetVolumeMountPointA;

  int SetVolumeMountPointW(
    ffi.Pointer<ffi.Uint16> lpszVolumeMountPoint,
    ffi.Pointer<ffi.Uint16> lpszVolumeName,
  ) {
    return (_SetVolumeMountPointW ??= _dylib.lookupFunction<
        _c_SetVolumeMountPointW,
        _dart_SetVolumeMountPointW>('SetVolumeMountPointW'))(
      lpszVolumeMountPoint,
      lpszVolumeName,
    );
  }

  _dart_SetVolumeMountPointW? _SetVolumeMountPointW;

  int DeleteVolumeMountPointA(
    ffi.Pointer<ffi.Int8> lpszVolumeMountPoint,
  ) {
    return (_DeleteVolumeMountPointA ??= _dylib.lookupFunction<
        _c_DeleteVolumeMountPointA,
        _dart_DeleteVolumeMountPointA>('DeleteVolumeMountPointA'))(
      lpszVolumeMountPoint,
    );
  }

  _dart_DeleteVolumeMountPointA? _DeleteVolumeMountPointA;

  int GetVolumeNameForVolumeMountPointA(
    ffi.Pointer<ffi.Int8> lpszVolumeMountPoint,
    ffi.Pointer<ffi.Int8> lpszVolumeName,
    int cchBufferLength,
  ) {
    return (_GetVolumeNameForVolumeMountPointA ??= _dylib.lookupFunction<
            _c_GetVolumeNameForVolumeMountPointA,
            _dart_GetVolumeNameForVolumeMountPointA>(
        'GetVolumeNameForVolumeMountPointA'))(
      lpszVolumeMountPoint,
      lpszVolumeName,
      cchBufferLength,
    );
  }

  _dart_GetVolumeNameForVolumeMountPointA? _GetVolumeNameForVolumeMountPointA;

  int GetVolumePathNameA(
    ffi.Pointer<ffi.Int8> lpszFileName,
    ffi.Pointer<ffi.Int8> lpszVolumePathName,
    int cchBufferLength,
  ) {
    return (_GetVolumePathNameA ??=
        _dylib.lookupFunction<_c_GetVolumePathNameA, _dart_GetVolumePathNameA>(
            'GetVolumePathNameA'))(
      lpszFileName,
      lpszVolumePathName,
      cchBufferLength,
    );
  }

  _dart_GetVolumePathNameA? _GetVolumePathNameA;

  int GetVolumePathNamesForVolumeNameA(
    ffi.Pointer<ffi.Int8> lpszVolumeName,
    ffi.Pointer<ffi.Int8> lpszVolumePathNames,
    int cchBufferLength,
    ffi.Pointer<ffi.Uint64> lpcchReturnLength,
  ) {
    return (_GetVolumePathNamesForVolumeNameA ??= _dylib.lookupFunction<
            _c_GetVolumePathNamesForVolumeNameA,
            _dart_GetVolumePathNamesForVolumeNameA>(
        'GetVolumePathNamesForVolumeNameA'))(
      lpszVolumeName,
      lpszVolumePathNames,
      cchBufferLength,
      lpcchReturnLength,
    );
  }

  _dart_GetVolumePathNamesForVolumeNameA? _GetVolumePathNamesForVolumeNameA;

  ffi.Pointer<ffi.Void> CreateActCtxA(
    ffi.Pointer<PACTCTXA> pActCtx,
  ) {
    return (_CreateActCtxA ??=
        _dylib.lookupFunction<_c_CreateActCtxA, _dart_CreateActCtxA>(
            'CreateActCtxA'))(
      pActCtx,
    );
  }

  _dart_CreateActCtxA? _CreateActCtxA;

  ffi.Pointer<ffi.Void> CreateActCtxW(
    ffi.Pointer<PACTCTXW> pActCtx,
  ) {
    return (_CreateActCtxW ??=
        _dylib.lookupFunction<_c_CreateActCtxW, _dart_CreateActCtxW>(
            'CreateActCtxW'))(
      pActCtx,
    );
  }

  _dart_CreateActCtxW? _CreateActCtxW;

  void AddRefActCtx(
    ffi.Pointer<ffi.Void> hActCtx,
  ) {
    return (_AddRefActCtx ??= _dylib
        .lookupFunction<_c_AddRefActCtx, _dart_AddRefActCtx>('AddRefActCtx'))(
      hActCtx,
    );
  }

  _dart_AddRefActCtx? _AddRefActCtx;

  void ReleaseActCtx(
    ffi.Pointer<ffi.Void> hActCtx,
  ) {
    return (_ReleaseActCtx ??=
        _dylib.lookupFunction<_c_ReleaseActCtx, _dart_ReleaseActCtx>(
            'ReleaseActCtx'))(
      hActCtx,
    );
  }

  _dart_ReleaseActCtx? _ReleaseActCtx;

  int ZombifyActCtx(
    ffi.Pointer<ffi.Void> hActCtx,
  ) {
    return (_ZombifyActCtx ??=
        _dylib.lookupFunction<_c_ZombifyActCtx, _dart_ZombifyActCtx>(
            'ZombifyActCtx'))(
      hActCtx,
    );
  }

  _dart_ZombifyActCtx? _ZombifyActCtx;

  int ActivateActCtx(
    ffi.Pointer<ffi.Void> hActCtx,
    ffi.Pointer<ffi.Uint64> lpCookie,
  ) {
    return (_ActivateActCtx ??=
        _dylib.lookupFunction<_c_ActivateActCtx, _dart_ActivateActCtx>(
            'ActivateActCtx'))(
      hActCtx,
      lpCookie,
    );
  }

  _dart_ActivateActCtx? _ActivateActCtx;

  int DeactivateActCtx(
    int dwFlags,
    int ulCookie,
  ) {
    return (_DeactivateActCtx ??=
        _dylib.lookupFunction<_c_DeactivateActCtx, _dart_DeactivateActCtx>(
            'DeactivateActCtx'))(
      dwFlags,
      ulCookie,
    );
  }

  _dart_DeactivateActCtx? _DeactivateActCtx;

  int GetCurrentActCtx(
    ffi.Pointer<ffi.Pointer<ffi.Void>> lphActCtx,
  ) {
    return (_GetCurrentActCtx ??=
        _dylib.lookupFunction<_c_GetCurrentActCtx, _dart_GetCurrentActCtx>(
            'GetCurrentActCtx'))(
      lphActCtx,
    );
  }

  _dart_GetCurrentActCtx? _GetCurrentActCtx;

  int FindActCtxSectionStringA(
    int dwFlags,
    ffi.Pointer<GUID> lpExtensionGuid,
    int ulSectionId,
    ffi.Pointer<ffi.Int8> lpStringToFind,
    ffi.Pointer<PACTCTX_SECTION_KEYED_DATA> ReturnedData,
  ) {
    return (_FindActCtxSectionStringA ??= _dylib.lookupFunction<
        _c_FindActCtxSectionStringA,
        _dart_FindActCtxSectionStringA>('FindActCtxSectionStringA'))(
      dwFlags,
      lpExtensionGuid,
      ulSectionId,
      lpStringToFind,
      ReturnedData,
    );
  }

  _dart_FindActCtxSectionStringA? _FindActCtxSectionStringA;

  int FindActCtxSectionStringW(
    int dwFlags,
    ffi.Pointer<GUID> lpExtensionGuid,
    int ulSectionId,
    ffi.Pointer<ffi.Uint16> lpStringToFind,
    ffi.Pointer<PACTCTX_SECTION_KEYED_DATA> ReturnedData,
  ) {
    return (_FindActCtxSectionStringW ??= _dylib.lookupFunction<
        _c_FindActCtxSectionStringW,
        _dart_FindActCtxSectionStringW>('FindActCtxSectionStringW'))(
      dwFlags,
      lpExtensionGuid,
      ulSectionId,
      lpStringToFind,
      ReturnedData,
    );
  }

  _dart_FindActCtxSectionStringW? _FindActCtxSectionStringW;

  int FindActCtxSectionGuid(
    int dwFlags,
    ffi.Pointer<GUID> lpExtensionGuid,
    int ulSectionId,
    ffi.Pointer<GUID> lpGuidToFind,
    ffi.Pointer<PACTCTX_SECTION_KEYED_DATA> ReturnedData,
  ) {
    return (_FindActCtxSectionGuid ??= _dylib.lookupFunction<
        _c_FindActCtxSectionGuid,
        _dart_FindActCtxSectionGuid>('FindActCtxSectionGuid'))(
      dwFlags,
      lpExtensionGuid,
      ulSectionId,
      lpGuidToFind,
      ReturnedData,
    );
  }

  _dart_FindActCtxSectionGuid? _FindActCtxSectionGuid;

  int QueryActCtxW(
    int dwFlags,
    ffi.Pointer<ffi.Void> hActCtx,
    ffi.Pointer<ffi.Void> pvSubInstance,
    int ulInfoClass,
    ffi.Pointer<ffi.Void> pvBuffer,
    int cbBuffer,
    ffi.Pointer<ffi.Uint64> pcbWrittenOrRequired,
  ) {
    return (_QueryActCtxW ??= _dylib
        .lookupFunction<_c_QueryActCtxW, _dart_QueryActCtxW>('QueryActCtxW'))(
      dwFlags,
      hActCtx,
      pvSubInstance,
      ulInfoClass,
      pvBuffer,
      cbBuffer,
      pcbWrittenOrRequired,
    );
  }

  _dart_QueryActCtxW? _QueryActCtxW;

  int WTSGetActiveConsoleSessionId() {
    return (_WTSGetActiveConsoleSessionId ??= _dylib.lookupFunction<
        _c_WTSGetActiveConsoleSessionId,
        _dart_WTSGetActiveConsoleSessionId>('WTSGetActiveConsoleSessionId'))();
  }

  _dart_WTSGetActiveConsoleSessionId? _WTSGetActiveConsoleSessionId;

  int WTSGetServiceSessionId() {
    return (_WTSGetServiceSessionId ??= _dylib.lookupFunction<
        _c_WTSGetServiceSessionId,
        _dart_WTSGetServiceSessionId>('WTSGetServiceSessionId'))();
  }

  _dart_WTSGetServiceSessionId? _WTSGetServiceSessionId;

  int WTSIsServerContainer() {
    return (_WTSIsServerContainer ??= _dylib.lookupFunction<
        _c_WTSIsServerContainer,
        _dart_WTSIsServerContainer>('WTSIsServerContainer'))();
  }

  _dart_WTSIsServerContainer? _WTSIsServerContainer;

  int GetActiveProcessorGroupCount() {
    return (_GetActiveProcessorGroupCount ??= _dylib.lookupFunction<
        _c_GetActiveProcessorGroupCount,
        _dart_GetActiveProcessorGroupCount>('GetActiveProcessorGroupCount'))();
  }

  _dart_GetActiveProcessorGroupCount? _GetActiveProcessorGroupCount;

  int GetMaximumProcessorGroupCount() {
    return (_GetMaximumProcessorGroupCount ??= _dylib.lookupFunction<
            _c_GetMaximumProcessorGroupCount,
            _dart_GetMaximumProcessorGroupCount>(
        'GetMaximumProcessorGroupCount'))();
  }

  _dart_GetMaximumProcessorGroupCount? _GetMaximumProcessorGroupCount;

  int GetActiveProcessorCount(
    int GroupNumber,
  ) {
    return (_GetActiveProcessorCount ??= _dylib.lookupFunction<
        _c_GetActiveProcessorCount,
        _dart_GetActiveProcessorCount>('GetActiveProcessorCount'))(
      GroupNumber,
    );
  }

  _dart_GetActiveProcessorCount? _GetActiveProcessorCount;

  int GetMaximumProcessorCount(
    int GroupNumber,
  ) {
    return (_GetMaximumProcessorCount ??= _dylib.lookupFunction<
        _c_GetMaximumProcessorCount,
        _dart_GetMaximumProcessorCount>('GetMaximumProcessorCount'))(
      GroupNumber,
    );
  }

  _dart_GetMaximumProcessorCount? _GetMaximumProcessorCount;

  int GetNumaProcessorNode(
    int Processor,
    ffi.Pointer<ffi.Uint8> NodeNumber,
  ) {
    return (_GetNumaProcessorNode ??= _dylib.lookupFunction<
        _c_GetNumaProcessorNode,
        _dart_GetNumaProcessorNode>('GetNumaProcessorNode'))(
      Processor,
      NodeNumber,
    );
  }

  _dart_GetNumaProcessorNode? _GetNumaProcessorNode;

  int GetNumaNodeNumberFromHandle(
    ffi.Pointer<ffi.Void> hFile,
    ffi.Pointer<ffi.Uint16> NodeNumber,
  ) {
    return (_GetNumaNodeNumberFromHandle ??= _dylib.lookupFunction<
        _c_GetNumaNodeNumberFromHandle,
        _dart_GetNumaNodeNumberFromHandle>('GetNumaNodeNumberFromHandle'))(
      hFile,
      NodeNumber,
    );
  }

  _dart_GetNumaNodeNumberFromHandle? _GetNumaNodeNumberFromHandle;

  int GetNumaProcessorNodeEx(
    ffi.Pointer<PPROCESSOR_NUMBER> Processor,
    ffi.Pointer<ffi.Uint16> NodeNumber,
  ) {
    return (_GetNumaProcessorNodeEx ??= _dylib.lookupFunction<
        _c_GetNumaProcessorNodeEx,
        _dart_GetNumaProcessorNodeEx>('GetNumaProcessorNodeEx'))(
      Processor,
      NodeNumber,
    );
  }

  _dart_GetNumaProcessorNodeEx? _GetNumaProcessorNodeEx;

  int GetNumaNodeProcessorMask(
    int Node,
    ffi.Pointer<ffi.Uint64> ProcessorMask,
  ) {
    return (_GetNumaNodeProcessorMask ??= _dylib.lookupFunction<
        _c_GetNumaNodeProcessorMask,
        _dart_GetNumaNodeProcessorMask>('GetNumaNodeProcessorMask'))(
      Node,
      ProcessorMask,
    );
  }

  _dart_GetNumaNodeProcessorMask? _GetNumaNodeProcessorMask;

  int GetNumaAvailableMemoryNode(
    int Node,
    ffi.Pointer<ffi.Uint64> AvailableBytes,
  ) {
    return (_GetNumaAvailableMemoryNode ??= _dylib.lookupFunction<
        _c_GetNumaAvailableMemoryNode,
        _dart_GetNumaAvailableMemoryNode>('GetNumaAvailableMemoryNode'))(
      Node,
      AvailableBytes,
    );
  }

  _dart_GetNumaAvailableMemoryNode? _GetNumaAvailableMemoryNode;

  int GetNumaAvailableMemoryNodeEx(
    int Node,
    ffi.Pointer<ffi.Uint64> AvailableBytes,
  ) {
    return (_GetNumaAvailableMemoryNodeEx ??= _dylib.lookupFunction<
        _c_GetNumaAvailableMemoryNodeEx,
        _dart_GetNumaAvailableMemoryNodeEx>('GetNumaAvailableMemoryNodeEx'))(
      Node,
      AvailableBytes,
    );
  }

  _dart_GetNumaAvailableMemoryNodeEx? _GetNumaAvailableMemoryNodeEx;

  int GetNumaProximityNode(
    int ProximityId,
    ffi.Pointer<ffi.Uint8> NodeNumber,
  ) {
    return (_GetNumaProximityNode ??= _dylib.lookupFunction<
        _c_GetNumaProximityNode,
        _dart_GetNumaProximityNode>('GetNumaProximityNode'))(
      ProximityId,
      NodeNumber,
    );
  }

  _dart_GetNumaProximityNode? _GetNumaProximityNode;

  int RegisterApplicationRecoveryCallback(
    ffi.Pointer<ffi.NativeFunction<APPLICATION_RECOVERY_CALLBACK>>
        pRecoveyCallback,
    ffi.Pointer<ffi.Void> pvParameter,
    int dwPingInterval,
    int dwFlags,
  ) {
    return (_RegisterApplicationRecoveryCallback ??= _dylib.lookupFunction<
            _c_RegisterApplicationRecoveryCallback,
            _dart_RegisterApplicationRecoveryCallback>(
        'RegisterApplicationRecoveryCallback'))(
      pRecoveyCallback,
      pvParameter,
      dwPingInterval,
      dwFlags,
    );
  }

  _dart_RegisterApplicationRecoveryCallback?
      _RegisterApplicationRecoveryCallback;

  int UnregisterApplicationRecoveryCallback() {
    return (_UnregisterApplicationRecoveryCallback ??= _dylib.lookupFunction<
            _c_UnregisterApplicationRecoveryCallback,
            _dart_UnregisterApplicationRecoveryCallback>(
        'UnregisterApplicationRecoveryCallback'))();
  }

  _dart_UnregisterApplicationRecoveryCallback?
      _UnregisterApplicationRecoveryCallback;

  int RegisterApplicationRestart(
    ffi.Pointer<ffi.Uint16> pwzCommandline,
    int dwFlags,
  ) {
    return (_RegisterApplicationRestart ??= _dylib.lookupFunction<
        _c_RegisterApplicationRestart,
        _dart_RegisterApplicationRestart>('RegisterApplicationRestart'))(
      pwzCommandline,
      dwFlags,
    );
  }

  _dart_RegisterApplicationRestart? _RegisterApplicationRestart;

  int UnregisterApplicationRestart() {
    return (_UnregisterApplicationRestart ??= _dylib.lookupFunction<
        _c_UnregisterApplicationRestart,
        _dart_UnregisterApplicationRestart>('UnregisterApplicationRestart'))();
  }

  _dart_UnregisterApplicationRestart? _UnregisterApplicationRestart;

  int GetApplicationRecoveryCallback(
    ffi.Pointer<ffi.Void> hProcess,
    ffi.Pointer<ffi.Pointer<ffi.NativeFunction<APPLICATION_RECOVERY_CALLBACK>>>
        pRecoveryCallback,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppvParameter,
    ffi.Pointer<ffi.Uint64> pdwPingInterval,
    ffi.Pointer<ffi.Uint64> pdwFlags,
  ) {
    return (_GetApplicationRecoveryCallback ??= _dylib.lookupFunction<
            _c_GetApplicationRecoveryCallback,
            _dart_GetApplicationRecoveryCallback>(
        'GetApplicationRecoveryCallback'))(
      hProcess,
      pRecoveryCallback,
      ppvParameter,
      pdwPingInterval,
      pdwFlags,
    );
  }

  _dart_GetApplicationRecoveryCallback? _GetApplicationRecoveryCallback;

  int GetApplicationRestartSettings(
    ffi.Pointer<ffi.Void> hProcess,
    ffi.Pointer<ffi.Uint16> pwzCommandline,
    ffi.Pointer<ffi.Uint64> pcchSize,
    ffi.Pointer<ffi.Uint64> pdwFlags,
  ) {
    return (_GetApplicationRestartSettings ??= _dylib.lookupFunction<
        _c_GetApplicationRestartSettings,
        _dart_GetApplicationRestartSettings>('GetApplicationRestartSettings'))(
      hProcess,
      pwzCommandline,
      pcchSize,
      pdwFlags,
    );
  }

  _dart_GetApplicationRestartSettings? _GetApplicationRestartSettings;

  int ApplicationRecoveryInProgress(
    ffi.Pointer<ffi.Int32> pbCancelled,
  ) {
    return (_ApplicationRecoveryInProgress ??= _dylib.lookupFunction<
        _c_ApplicationRecoveryInProgress,
        _dart_ApplicationRecoveryInProgress>('ApplicationRecoveryInProgress'))(
      pbCancelled,
    );
  }

  _dart_ApplicationRecoveryInProgress? _ApplicationRecoveryInProgress;

  void ApplicationRecoveryFinished(
    int bSuccess,
  ) {
    return (_ApplicationRecoveryFinished ??= _dylib.lookupFunction<
        _c_ApplicationRecoveryFinished,
        _dart_ApplicationRecoveryFinished>('ApplicationRecoveryFinished'))(
      bSuccess,
    );
  }

  _dart_ApplicationRecoveryFinished? _ApplicationRecoveryFinished;

  int GetFileInformationByHandleEx(
    ffi.Pointer<ffi.Void> hFile,
    int FileInformationClass,
    ffi.Pointer<ffi.Void> lpFileInformation,
    int dwBufferSize,
  ) {
    return (_GetFileInformationByHandleEx ??= _dylib.lookupFunction<
        _c_GetFileInformationByHandleEx,
        _dart_GetFileInformationByHandleEx>('GetFileInformationByHandleEx'))(
      hFile,
      FileInformationClass,
      lpFileInformation,
      dwBufferSize,
    );
  }

  _dart_GetFileInformationByHandleEx? _GetFileInformationByHandleEx;

  ffi.Pointer<ffi.Void> OpenFileById(
    ffi.Pointer<ffi.Void> hVolumeHint,
    ffi.Pointer<LPFILE_ID_DESCRIPTOR> lpFileId,
    int dwDesiredAccess,
    int dwShareMode,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
    int dwFlagsAndAttributes,
  ) {
    return (_OpenFileById ??= _dylib
        .lookupFunction<_c_OpenFileById, _dart_OpenFileById>('OpenFileById'))(
      hVolumeHint,
      lpFileId,
      dwDesiredAccess,
      dwShareMode,
      lpSecurityAttributes,
      dwFlagsAndAttributes,
    );
  }

  _dart_OpenFileById? _OpenFileById;

  int CreateSymbolicLinkA(
    ffi.Pointer<ffi.Int8> lpSymlinkFileName,
    ffi.Pointer<ffi.Int8> lpTargetFileName,
    int dwFlags,
  ) {
    return (_CreateSymbolicLinkA ??= _dylib.lookupFunction<
        _c_CreateSymbolicLinkA,
        _dart_CreateSymbolicLinkA>('CreateSymbolicLinkA'))(
      lpSymlinkFileName,
      lpTargetFileName,
      dwFlags,
    );
  }

  _dart_CreateSymbolicLinkA? _CreateSymbolicLinkA;

  int CreateSymbolicLinkW(
    ffi.Pointer<ffi.Uint16> lpSymlinkFileName,
    ffi.Pointer<ffi.Uint16> lpTargetFileName,
    int dwFlags,
  ) {
    return (_CreateSymbolicLinkW ??= _dylib.lookupFunction<
        _c_CreateSymbolicLinkW,
        _dart_CreateSymbolicLinkW>('CreateSymbolicLinkW'))(
      lpSymlinkFileName,
      lpTargetFileName,
      dwFlags,
    );
  }

  _dart_CreateSymbolicLinkW? _CreateSymbolicLinkW;

  int QueryActCtxSettingsW(
    int dwFlags,
    ffi.Pointer<ffi.Void> hActCtx,
    ffi.Pointer<ffi.Uint16> settingsNameSpace,
    ffi.Pointer<ffi.Uint16> settingName,
    ffi.Pointer<ffi.Uint16> pvBuffer,
    int dwBuffer,
    ffi.Pointer<ffi.Uint64> pdwWrittenOrRequired,
  ) {
    return (_QueryActCtxSettingsW ??= _dylib.lookupFunction<
        _c_QueryActCtxSettingsW,
        _dart_QueryActCtxSettingsW>('QueryActCtxSettingsW'))(
      dwFlags,
      hActCtx,
      settingsNameSpace,
      settingName,
      pvBuffer,
      dwBuffer,
      pdwWrittenOrRequired,
    );
  }

  _dart_QueryActCtxSettingsW? _QueryActCtxSettingsW;

  int CreateSymbolicLinkTransactedA(
    ffi.Pointer<ffi.Int8> lpSymlinkFileName,
    ffi.Pointer<ffi.Int8> lpTargetFileName,
    int dwFlags,
    ffi.Pointer<ffi.Void> hTransaction,
  ) {
    return (_CreateSymbolicLinkTransactedA ??= _dylib.lookupFunction<
        _c_CreateSymbolicLinkTransactedA,
        _dart_CreateSymbolicLinkTransactedA>('CreateSymbolicLinkTransactedA'))(
      lpSymlinkFileName,
      lpTargetFileName,
      dwFlags,
      hTransaction,
    );
  }

  _dart_CreateSymbolicLinkTransactedA? _CreateSymbolicLinkTransactedA;

  int CreateSymbolicLinkTransactedW(
    ffi.Pointer<ffi.Uint16> lpSymlinkFileName,
    ffi.Pointer<ffi.Uint16> lpTargetFileName,
    int dwFlags,
    ffi.Pointer<ffi.Void> hTransaction,
  ) {
    return (_CreateSymbolicLinkTransactedW ??= _dylib.lookupFunction<
        _c_CreateSymbolicLinkTransactedW,
        _dart_CreateSymbolicLinkTransactedW>('CreateSymbolicLinkTransactedW'))(
      lpSymlinkFileName,
      lpTargetFileName,
      dwFlags,
      hTransaction,
    );
  }

  _dart_CreateSymbolicLinkTransactedW? _CreateSymbolicLinkTransactedW;

  int ReplacePartitionUnit(
    ffi.Pointer<ffi.Uint16> TargetPartition,
    ffi.Pointer<ffi.Uint16> SparePartition,
    int Flags,
  ) {
    return (_ReplacePartitionUnit ??= _dylib.lookupFunction<
        _c_ReplacePartitionUnit,
        _dart_ReplacePartitionUnit>('ReplacePartitionUnit'))(
      TargetPartition,
      SparePartition,
      Flags,
    );
  }

  _dart_ReplacePartitionUnit? _ReplacePartitionUnit;

  int AddSecureMemoryCacheCallback(
    ffi.Pointer<ffi.NativeFunction<PSECURE_MEMORY_CACHE_CALLBACK>> pfnCallBack,
  ) {
    return (_AddSecureMemoryCacheCallback ??= _dylib.lookupFunction<
        _c_AddSecureMemoryCacheCallback,
        _dart_AddSecureMemoryCacheCallback>('AddSecureMemoryCacheCallback'))(
      pfnCallBack,
    );
  }

  _dart_AddSecureMemoryCacheCallback? _AddSecureMemoryCacheCallback;

  int RemoveSecureMemoryCacheCallback(
    ffi.Pointer<ffi.NativeFunction<PSECURE_MEMORY_CACHE_CALLBACK>> pfnCallBack,
  ) {
    return (_RemoveSecureMemoryCacheCallback ??= _dylib.lookupFunction<
            _c_RemoveSecureMemoryCacheCallback,
            _dart_RemoveSecureMemoryCacheCallback>(
        'RemoveSecureMemoryCacheCallback'))(
      pfnCallBack,
    );
  }

  _dart_RemoveSecureMemoryCacheCallback? _RemoveSecureMemoryCacheCallback;

  int CopyContext(
    ffi.Pointer<PCONTEXT> Destination,
    int ContextFlags,
    ffi.Pointer<PCONTEXT> Source,
  ) {
    return (_CopyContext ??= _dylib
        .lookupFunction<_c_CopyContext, _dart_CopyContext>('CopyContext'))(
      Destination,
      ContextFlags,
      Source,
    );
  }

  _dart_CopyContext? _CopyContext;

  int InitializeContext(
    ffi.Pointer<ffi.Void> Buffer,
    int ContextFlags,
    ffi.Pointer<ffi.Pointer<PCONTEXT>> Context,
    ffi.Pointer<ffi.Uint64> ContextLength,
  ) {
    return (_InitializeContext ??=
        _dylib.lookupFunction<_c_InitializeContext, _dart_InitializeContext>(
            'InitializeContext'))(
      Buffer,
      ContextFlags,
      Context,
      ContextLength,
    );
  }

  _dart_InitializeContext? _InitializeContext;

  int InitializeContext2(
    ffi.Pointer<ffi.Void> Buffer,
    int ContextFlags,
    ffi.Pointer<ffi.Pointer<PCONTEXT>> Context,
    ffi.Pointer<ffi.Uint64> ContextLength,
    int XStateCompactionMask,
  ) {
    return (_InitializeContext2 ??=
        _dylib.lookupFunction<_c_InitializeContext2, _dart_InitializeContext2>(
            'InitializeContext2'))(
      Buffer,
      ContextFlags,
      Context,
      ContextLength,
      XStateCompactionMask,
    );
  }

  _dart_InitializeContext2? _InitializeContext2;

  int GetEnabledXStateFeatures() {
    return (_GetEnabledXStateFeatures ??= _dylib.lookupFunction<
        _c_GetEnabledXStateFeatures,
        _dart_GetEnabledXStateFeatures>('GetEnabledXStateFeatures'))();
  }

  _dart_GetEnabledXStateFeatures? _GetEnabledXStateFeatures;

  int GetXStateFeaturesMask(
    ffi.Pointer<PCONTEXT> Context,
    ffi.Pointer<ffi.Uint64> FeatureMask,
  ) {
    return (_GetXStateFeaturesMask ??= _dylib.lookupFunction<
        _c_GetXStateFeaturesMask,
        _dart_GetXStateFeaturesMask>('GetXStateFeaturesMask'))(
      Context,
      FeatureMask,
    );
  }

  _dart_GetXStateFeaturesMask? _GetXStateFeaturesMask;

  ffi.Pointer<ffi.Void> LocateXStateFeature(
    ffi.Pointer<PCONTEXT> Context,
    int FeatureId,
    ffi.Pointer<ffi.Uint64> Length,
  ) {
    return (_LocateXStateFeature ??= _dylib.lookupFunction<
        _c_LocateXStateFeature,
        _dart_LocateXStateFeature>('LocateXStateFeature'))(
      Context,
      FeatureId,
      Length,
    );
  }

  _dart_LocateXStateFeature? _LocateXStateFeature;

  int SetXStateFeaturesMask(
    ffi.Pointer<PCONTEXT> Context,
    int FeatureMask,
  ) {
    return (_SetXStateFeaturesMask ??= _dylib.lookupFunction<
        _c_SetXStateFeaturesMask,
        _dart_SetXStateFeaturesMask>('SetXStateFeaturesMask'))(
      Context,
      FeatureMask,
    );
  }

  _dart_SetXStateFeaturesMask? _SetXStateFeaturesMask;

  int EnableThreadProfiling(
    ffi.Pointer<ffi.Void> ThreadHandle,
    int Flags,
    int HardwareCounters,
    ffi.Pointer<ffi.Pointer<ffi.Void>> PerformanceDataHandle,
  ) {
    return (_EnableThreadProfiling ??= _dylib.lookupFunction<
        _c_EnableThreadProfiling,
        _dart_EnableThreadProfiling>('EnableThreadProfiling'))(
      ThreadHandle,
      Flags,
      HardwareCounters,
      PerformanceDataHandle,
    );
  }

  _dart_EnableThreadProfiling? _EnableThreadProfiling;

  int DisableThreadProfiling(
    ffi.Pointer<ffi.Void> PerformanceDataHandle,
  ) {
    return (_DisableThreadProfiling ??= _dylib.lookupFunction<
        _c_DisableThreadProfiling,
        _dart_DisableThreadProfiling>('DisableThreadProfiling'))(
      PerformanceDataHandle,
    );
  }

  _dart_DisableThreadProfiling? _DisableThreadProfiling;

  int QueryThreadProfiling(
    ffi.Pointer<ffi.Void> ThreadHandle,
    ffi.Pointer<ffi.Uint8> Enabled,
  ) {
    return (_QueryThreadProfiling ??= _dylib.lookupFunction<
        _c_QueryThreadProfiling,
        _dart_QueryThreadProfiling>('QueryThreadProfiling'))(
      ThreadHandle,
      Enabled,
    );
  }

  _dart_QueryThreadProfiling? _QueryThreadProfiling;

  int ReadThreadProfilingData(
    ffi.Pointer<ffi.Void> PerformanceDataHandle,
    int Flags,
    ffi.Pointer<PPERFORMANCE_DATA> PerformanceData,
  ) {
    return (_ReadThreadProfilingData ??= _dylib.lookupFunction<
        _c_ReadThreadProfilingData,
        _dart_ReadThreadProfilingData>('ReadThreadProfilingData'))(
      PerformanceDataHandle,
      Flags,
      PerformanceData,
    );
  }

  _dart_ReadThreadProfilingData? _ReadThreadProfilingData;

  int RaiseCustomSystemEventTrigger(
    ffi.Pointer<PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG>
        CustomSystemEventTriggerConfig,
  ) {
    return (_RaiseCustomSystemEventTrigger ??= _dylib.lookupFunction<
        _c_RaiseCustomSystemEventTrigger,
        _dart_RaiseCustomSystemEventTrigger>('RaiseCustomSystemEventTrigger'))(
      CustomSystemEventTriggerConfig,
    );
  }

  _dart_RaiseCustomSystemEventTrigger? _RaiseCustomSystemEventTrigger;

  int AddFontResourceA(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return (_AddFontResourceA ??=
        _dylib.lookupFunction<_c_AddFontResourceA, _dart_AddFontResourceA>(
            'AddFontResourceA'))(
      arg0,
    );
  }

  _dart_AddFontResourceA? _AddFontResourceA;

  int AddFontResourceW(
    ffi.Pointer<ffi.Uint16> arg0,
  ) {
    return (_AddFontResourceW ??=
        _dylib.lookupFunction<_c_AddFontResourceW, _dart_AddFontResourceW>(
            'AddFontResourceW'))(
      arg0,
    );
  }

  _dart_AddFontResourceW? _AddFontResourceW;

  int AnimatePalette(
    ffi.Pointer<HPALETTE__> hPal,
    int iStartIndex,
    int cEntries,
    ffi.Pointer<LPPALETTEENTRY> ppe,
  ) {
    return (_AnimatePalette ??=
        _dylib.lookupFunction<_c_AnimatePalette, _dart_AnimatePalette>(
            'AnimatePalette'))(
      hPal,
      iStartIndex,
      cEntries,
      ppe,
    );
  }

  _dart_AnimatePalette? _AnimatePalette;

  int Arc(
    ffi.Pointer<HDC__> hdc,
    int x1,
    int y1,
    int x2,
    int y2,
    int x3,
    int y3,
    int x4,
    int y4,
  ) {
    return (_Arc ??= _dylib.lookupFunction<_c_Arc, _dart_Arc>('Arc'))(
      hdc,
      x1,
      y1,
      x2,
      y2,
      x3,
      y3,
      x4,
      y4,
    );
  }

  _dart_Arc? _Arc;

  int BitBlt(
    ffi.Pointer<HDC__> hdc,
    int x,
    int y,
    int cx,
    int cy,
    ffi.Pointer<HDC__> hdcSrc,
    int x1,
    int y1,
    int rop,
  ) {
    return (_BitBlt ??=
        _dylib.lookupFunction<_c_BitBlt, _dart_BitBlt>('BitBlt'))(
      hdc,
      x,
      y,
      cx,
      cy,
      hdcSrc,
      x1,
      y1,
      rop,
    );
  }

  _dart_BitBlt? _BitBlt;

  int CancelDC(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_CancelDC ??=
        _dylib.lookupFunction<_c_CancelDC, _dart_CancelDC>('CancelDC'))(
      hdc,
    );
  }

  _dart_CancelDC? _CancelDC;

  int Chord(
    ffi.Pointer<HDC__> hdc,
    int x1,
    int y1,
    int x2,
    int y2,
    int x3,
    int y3,
    int x4,
    int y4,
  ) {
    return (_Chord ??= _dylib.lookupFunction<_c_Chord, _dart_Chord>('Chord'))(
      hdc,
      x1,
      y1,
      x2,
      y2,
      x3,
      y3,
      x4,
      y4,
    );
  }

  _dart_Chord? _Chord;

  int ChoosePixelFormat(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPPIXELFORMATDESCRIPTOR> ppfd,
  ) {
    return (_ChoosePixelFormat ??=
        _dylib.lookupFunction<_c_ChoosePixelFormat, _dart_ChoosePixelFormat>(
            'ChoosePixelFormat'))(
      hdc,
      ppfd,
    );
  }

  _dart_ChoosePixelFormat? _ChoosePixelFormat;

  ffi.Pointer<HMETAFILE__> CloseMetaFile(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_CloseMetaFile ??=
        _dylib.lookupFunction<_c_CloseMetaFile, _dart_CloseMetaFile>(
            'CloseMetaFile'))(
      hdc,
    );
  }

  _dart_CloseMetaFile? _CloseMetaFile;

  int CombineRgn(
    ffi.Pointer<HRGN__> hrgnDst,
    ffi.Pointer<HRGN__> hrgnSrc1,
    ffi.Pointer<HRGN__> hrgnSrc2,
    int iMode,
  ) {
    return (_CombineRgn ??=
        _dylib.lookupFunction<_c_CombineRgn, _dart_CombineRgn>('CombineRgn'))(
      hrgnDst,
      hrgnSrc1,
      hrgnSrc2,
      iMode,
    );
  }

  _dart_CombineRgn? _CombineRgn;

  ffi.Pointer<HMETAFILE__> CopyMetaFileA(
    ffi.Pointer<HMETAFILE__> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return (_CopyMetaFileA ??=
        _dylib.lookupFunction<_c_CopyMetaFileA, _dart_CopyMetaFileA>(
            'CopyMetaFileA'))(
      arg0,
      arg1,
    );
  }

  _dart_CopyMetaFileA? _CopyMetaFileA;

  ffi.Pointer<HMETAFILE__> CopyMetaFileW(
    ffi.Pointer<HMETAFILE__> arg0,
    ffi.Pointer<ffi.Uint16> arg1,
  ) {
    return (_CopyMetaFileW ??=
        _dylib.lookupFunction<_c_CopyMetaFileW, _dart_CopyMetaFileW>(
            'CopyMetaFileW'))(
      arg0,
      arg1,
    );
  }

  _dart_CopyMetaFileW? _CopyMetaFileW;

  ffi.Pointer<HBITMAP__> CreateBitmap(
    int nWidth,
    int nHeight,
    int nPlanes,
    int nBitCount,
    ffi.Pointer<ffi.Void> lpBits,
  ) {
    return (_CreateBitmap ??= _dylib
        .lookupFunction<_c_CreateBitmap, _dart_CreateBitmap>('CreateBitmap'))(
      nWidth,
      nHeight,
      nPlanes,
      nBitCount,
      lpBits,
    );
  }

  _dart_CreateBitmap? _CreateBitmap;

  ffi.Pointer<HBITMAP__> CreateBitmapIndirect(
    ffi.Pointer<LPBITMAP> pbm,
  ) {
    return (_CreateBitmapIndirect ??= _dylib.lookupFunction<
        _c_CreateBitmapIndirect,
        _dart_CreateBitmapIndirect>('CreateBitmapIndirect'))(
      pbm,
    );
  }

  _dart_CreateBitmapIndirect? _CreateBitmapIndirect;

  ffi.Pointer<HBRUSH__> CreateBrushIndirect(
    ffi.Pointer<LPLOGBRUSH> plbrush,
  ) {
    return (_CreateBrushIndirect ??= _dylib.lookupFunction<
        _c_CreateBrushIndirect,
        _dart_CreateBrushIndirect>('CreateBrushIndirect'))(
      plbrush,
    );
  }

  _dart_CreateBrushIndirect? _CreateBrushIndirect;

  ffi.Pointer<HBITMAP__> CreateCompatibleBitmap(
    ffi.Pointer<HDC__> hdc,
    int cx,
    int cy,
  ) {
    return (_CreateCompatibleBitmap ??= _dylib.lookupFunction<
        _c_CreateCompatibleBitmap,
        _dart_CreateCompatibleBitmap>('CreateCompatibleBitmap'))(
      hdc,
      cx,
      cy,
    );
  }

  _dart_CreateCompatibleBitmap? _CreateCompatibleBitmap;

  ffi.Pointer<HBITMAP__> CreateDiscardableBitmap(
    ffi.Pointer<HDC__> hdc,
    int cx,
    int cy,
  ) {
    return (_CreateDiscardableBitmap ??= _dylib.lookupFunction<
        _c_CreateDiscardableBitmap,
        _dart_CreateDiscardableBitmap>('CreateDiscardableBitmap'))(
      hdc,
      cx,
      cy,
    );
  }

  _dart_CreateDiscardableBitmap? _CreateDiscardableBitmap;

  ffi.Pointer<HDC__> CreateCompatibleDC(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_CreateCompatibleDC ??=
        _dylib.lookupFunction<_c_CreateCompatibleDC, _dart_CreateCompatibleDC>(
            'CreateCompatibleDC'))(
      hdc,
    );
  }

  _dart_CreateCompatibleDC? _CreateCompatibleDC;

  ffi.Pointer<HDC__> CreateDCA(
    ffi.Pointer<ffi.Int8> pwszDriver,
    ffi.Pointer<ffi.Int8> pwszDevice,
    ffi.Pointer<ffi.Int8> pszPort,
    ffi.Pointer<LPDEVMODEA> pdm,
  ) {
    return (_CreateDCA ??=
        _dylib.lookupFunction<_c_CreateDCA, _dart_CreateDCA>('CreateDCA'))(
      pwszDriver,
      pwszDevice,
      pszPort,
      pdm,
    );
  }

  _dart_CreateDCA? _CreateDCA;

  ffi.Pointer<HDC__> CreateDCW(
    ffi.Pointer<ffi.Uint16> pwszDriver,
    ffi.Pointer<ffi.Uint16> pwszDevice,
    ffi.Pointer<ffi.Uint16> pszPort,
    ffi.Pointer<LPDEVMODEW> pdm,
  ) {
    return (_CreateDCW ??=
        _dylib.lookupFunction<_c_CreateDCW, _dart_CreateDCW>('CreateDCW'))(
      pwszDriver,
      pwszDevice,
      pszPort,
      pdm,
    );
  }

  _dart_CreateDCW? _CreateDCW;

  ffi.Pointer<HBITMAP__> CreateDIBitmap(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<PBITMAPINFOHEADER> pbmih,
    int flInit,
    ffi.Pointer<ffi.Void> pjBits,
    ffi.Pointer<PBITMAPINFO> pbmi,
    int iUsage,
  ) {
    return (_CreateDIBitmap ??=
        _dylib.lookupFunction<_c_CreateDIBitmap, _dart_CreateDIBitmap>(
            'CreateDIBitmap'))(
      hdc,
      pbmih,
      flInit,
      pjBits,
      pbmi,
      iUsage,
    );
  }

  _dart_CreateDIBitmap? _CreateDIBitmap;

  ffi.Pointer<HBRUSH__> CreateDIBPatternBrush(
    ffi.Pointer<ffi.Void> h,
    int iUsage,
  ) {
    return (_CreateDIBPatternBrush ??= _dylib.lookupFunction<
        _c_CreateDIBPatternBrush,
        _dart_CreateDIBPatternBrush>('CreateDIBPatternBrush'))(
      h,
      iUsage,
    );
  }

  _dart_CreateDIBPatternBrush? _CreateDIBPatternBrush;

  ffi.Pointer<HBRUSH__> CreateDIBPatternBrushPt(
    ffi.Pointer<ffi.Void> lpPackedDIB,
    int iUsage,
  ) {
    return (_CreateDIBPatternBrushPt ??= _dylib.lookupFunction<
        _c_CreateDIBPatternBrushPt,
        _dart_CreateDIBPatternBrushPt>('CreateDIBPatternBrushPt'))(
      lpPackedDIB,
      iUsage,
    );
  }

  _dart_CreateDIBPatternBrushPt? _CreateDIBPatternBrushPt;

  ffi.Pointer<HRGN__> CreateEllipticRgn(
    int x1,
    int y1,
    int x2,
    int y2,
  ) {
    return (_CreateEllipticRgn ??=
        _dylib.lookupFunction<_c_CreateEllipticRgn, _dart_CreateEllipticRgn>(
            'CreateEllipticRgn'))(
      x1,
      y1,
      x2,
      y2,
    );
  }

  _dart_CreateEllipticRgn? _CreateEllipticRgn;

  ffi.Pointer<HRGN__> CreateEllipticRgnIndirect(
    ffi.Pointer<LPRECT> lprect,
  ) {
    return (_CreateEllipticRgnIndirect ??= _dylib.lookupFunction<
        _c_CreateEllipticRgnIndirect,
        _dart_CreateEllipticRgnIndirect>('CreateEllipticRgnIndirect'))(
      lprect,
    );
  }

  _dart_CreateEllipticRgnIndirect? _CreateEllipticRgnIndirect;

  ffi.Pointer<HFONT__> CreateFontIndirectA(
    ffi.Pointer<LPLOGFONTA> lplf,
  ) {
    return (_CreateFontIndirectA ??= _dylib.lookupFunction<
        _c_CreateFontIndirectA,
        _dart_CreateFontIndirectA>('CreateFontIndirectA'))(
      lplf,
    );
  }

  _dart_CreateFontIndirectA? _CreateFontIndirectA;

  ffi.Pointer<HFONT__> CreateFontIndirectW(
    ffi.Pointer<LPLOGFONTW> lplf,
  ) {
    return (_CreateFontIndirectW ??= _dylib.lookupFunction<
        _c_CreateFontIndirectW,
        _dart_CreateFontIndirectW>('CreateFontIndirectW'))(
      lplf,
    );
  }

  _dart_CreateFontIndirectW? _CreateFontIndirectW;

  ffi.Pointer<HFONT__> CreateFontA(
    int cHeight,
    int cWidth,
    int cEscapement,
    int cOrientation,
    int cWeight,
    int bItalic,
    int bUnderline,
    int bStrikeOut,
    int iCharSet,
    int iOutPrecision,
    int iClipPrecision,
    int iQuality,
    int iPitchAndFamily,
    ffi.Pointer<ffi.Int8> pszFaceName,
  ) {
    return (_CreateFontA ??= _dylib
        .lookupFunction<_c_CreateFontA, _dart_CreateFontA>('CreateFontA'))(
      cHeight,
      cWidth,
      cEscapement,
      cOrientation,
      cWeight,
      bItalic,
      bUnderline,
      bStrikeOut,
      iCharSet,
      iOutPrecision,
      iClipPrecision,
      iQuality,
      iPitchAndFamily,
      pszFaceName,
    );
  }

  _dart_CreateFontA? _CreateFontA;

  ffi.Pointer<HFONT__> CreateFontW(
    int cHeight,
    int cWidth,
    int cEscapement,
    int cOrientation,
    int cWeight,
    int bItalic,
    int bUnderline,
    int bStrikeOut,
    int iCharSet,
    int iOutPrecision,
    int iClipPrecision,
    int iQuality,
    int iPitchAndFamily,
    ffi.Pointer<ffi.Uint16> pszFaceName,
  ) {
    return (_CreateFontW ??= _dylib
        .lookupFunction<_c_CreateFontW, _dart_CreateFontW>('CreateFontW'))(
      cHeight,
      cWidth,
      cEscapement,
      cOrientation,
      cWeight,
      bItalic,
      bUnderline,
      bStrikeOut,
      iCharSet,
      iOutPrecision,
      iClipPrecision,
      iQuality,
      iPitchAndFamily,
      pszFaceName,
    );
  }

  _dart_CreateFontW? _CreateFontW;

  ffi.Pointer<HBRUSH__> CreateHatchBrush(
    int iHatch,
    int color,
  ) {
    return (_CreateHatchBrush ??=
        _dylib.lookupFunction<_c_CreateHatchBrush, _dart_CreateHatchBrush>(
            'CreateHatchBrush'))(
      iHatch,
      color,
    );
  }

  _dart_CreateHatchBrush? _CreateHatchBrush;

  ffi.Pointer<HDC__> CreateICA(
    ffi.Pointer<ffi.Int8> pszDriver,
    ffi.Pointer<ffi.Int8> pszDevice,
    ffi.Pointer<ffi.Int8> pszPort,
    ffi.Pointer<LPDEVMODEA> pdm,
  ) {
    return (_CreateICA ??=
        _dylib.lookupFunction<_c_CreateICA, _dart_CreateICA>('CreateICA'))(
      pszDriver,
      pszDevice,
      pszPort,
      pdm,
    );
  }

  _dart_CreateICA? _CreateICA;

  ffi.Pointer<HDC__> CreateICW(
    ffi.Pointer<ffi.Uint16> pszDriver,
    ffi.Pointer<ffi.Uint16> pszDevice,
    ffi.Pointer<ffi.Uint16> pszPort,
    ffi.Pointer<LPDEVMODEW> pdm,
  ) {
    return (_CreateICW ??=
        _dylib.lookupFunction<_c_CreateICW, _dart_CreateICW>('CreateICW'))(
      pszDriver,
      pszDevice,
      pszPort,
      pdm,
    );
  }

  _dart_CreateICW? _CreateICW;

  ffi.Pointer<HDC__> CreateMetaFileA(
    ffi.Pointer<ffi.Int8> pszFile,
  ) {
    return (_CreateMetaFileA ??=
        _dylib.lookupFunction<_c_CreateMetaFileA, _dart_CreateMetaFileA>(
            'CreateMetaFileA'))(
      pszFile,
    );
  }

  _dart_CreateMetaFileA? _CreateMetaFileA;

  ffi.Pointer<HDC__> CreateMetaFileW(
    ffi.Pointer<ffi.Uint16> pszFile,
  ) {
    return (_CreateMetaFileW ??=
        _dylib.lookupFunction<_c_CreateMetaFileW, _dart_CreateMetaFileW>(
            'CreateMetaFileW'))(
      pszFile,
    );
  }

  _dart_CreateMetaFileW? _CreateMetaFileW;

  ffi.Pointer<HPALETTE__> CreatePalette(
    ffi.Pointer<LPLOGPALETTE> plpal,
  ) {
    return (_CreatePalette ??=
        _dylib.lookupFunction<_c_CreatePalette, _dart_CreatePalette>(
            'CreatePalette'))(
      plpal,
    );
  }

  _dart_CreatePalette? _CreatePalette;

  ffi.Pointer<HPEN__> CreatePen(
    int iStyle,
    int cWidth,
    int color,
  ) {
    return (_CreatePen ??=
        _dylib.lookupFunction<_c_CreatePen, _dart_CreatePen>('CreatePen'))(
      iStyle,
      cWidth,
      color,
    );
  }

  _dart_CreatePen? _CreatePen;

  ffi.Pointer<HPEN__> CreatePenIndirect(
    ffi.Pointer<LPLOGPEN> plpen,
  ) {
    return (_CreatePenIndirect ??=
        _dylib.lookupFunction<_c_CreatePenIndirect, _dart_CreatePenIndirect>(
            'CreatePenIndirect'))(
      plpen,
    );
  }

  _dart_CreatePenIndirect? _CreatePenIndirect;

  ffi.Pointer<HRGN__> CreatePolyPolygonRgn(
    ffi.Pointer<LPPOINT> pptl,
    ffi.Pointer<ffi.Int32> pc,
    int cPoly,
    int iMode,
  ) {
    return (_CreatePolyPolygonRgn ??= _dylib.lookupFunction<
        _c_CreatePolyPolygonRgn,
        _dart_CreatePolyPolygonRgn>('CreatePolyPolygonRgn'))(
      pptl,
      pc,
      cPoly,
      iMode,
    );
  }

  _dart_CreatePolyPolygonRgn? _CreatePolyPolygonRgn;

  ffi.Pointer<HBRUSH__> CreatePatternBrush(
    ffi.Pointer<HBITMAP__> hbm,
  ) {
    return (_CreatePatternBrush ??=
        _dylib.lookupFunction<_c_CreatePatternBrush, _dart_CreatePatternBrush>(
            'CreatePatternBrush'))(
      hbm,
    );
  }

  _dart_CreatePatternBrush? _CreatePatternBrush;

  ffi.Pointer<HRGN__> CreateRectRgn(
    int x1,
    int y1,
    int x2,
    int y2,
  ) {
    return (_CreateRectRgn ??=
        _dylib.lookupFunction<_c_CreateRectRgn, _dart_CreateRectRgn>(
            'CreateRectRgn'))(
      x1,
      y1,
      x2,
      y2,
    );
  }

  _dart_CreateRectRgn? _CreateRectRgn;

  ffi.Pointer<HRGN__> CreateRectRgnIndirect(
    ffi.Pointer<LPRECT> lprect,
  ) {
    return (_CreateRectRgnIndirect ??= _dylib.lookupFunction<
        _c_CreateRectRgnIndirect,
        _dart_CreateRectRgnIndirect>('CreateRectRgnIndirect'))(
      lprect,
    );
  }

  _dart_CreateRectRgnIndirect? _CreateRectRgnIndirect;

  ffi.Pointer<HRGN__> CreateRoundRectRgn(
    int x1,
    int y1,
    int x2,
    int y2,
    int w,
    int h,
  ) {
    return (_CreateRoundRectRgn ??=
        _dylib.lookupFunction<_c_CreateRoundRectRgn, _dart_CreateRoundRectRgn>(
            'CreateRoundRectRgn'))(
      x1,
      y1,
      x2,
      y2,
      w,
      h,
    );
  }

  _dart_CreateRoundRectRgn? _CreateRoundRectRgn;

  int CreateScalableFontResourceA(
    int fdwHidden,
    ffi.Pointer<ffi.Int8> lpszFont,
    ffi.Pointer<ffi.Int8> lpszFile,
    ffi.Pointer<ffi.Int8> lpszPath,
  ) {
    return (_CreateScalableFontResourceA ??= _dylib.lookupFunction<
        _c_CreateScalableFontResourceA,
        _dart_CreateScalableFontResourceA>('CreateScalableFontResourceA'))(
      fdwHidden,
      lpszFont,
      lpszFile,
      lpszPath,
    );
  }

  _dart_CreateScalableFontResourceA? _CreateScalableFontResourceA;

  int CreateScalableFontResourceW(
    int fdwHidden,
    ffi.Pointer<ffi.Uint16> lpszFont,
    ffi.Pointer<ffi.Uint16> lpszFile,
    ffi.Pointer<ffi.Uint16> lpszPath,
  ) {
    return (_CreateScalableFontResourceW ??= _dylib.lookupFunction<
        _c_CreateScalableFontResourceW,
        _dart_CreateScalableFontResourceW>('CreateScalableFontResourceW'))(
      fdwHidden,
      lpszFont,
      lpszFile,
      lpszPath,
    );
  }

  _dart_CreateScalableFontResourceW? _CreateScalableFontResourceW;

  ffi.Pointer<HBRUSH__> CreateSolidBrush(
    int color,
  ) {
    return (_CreateSolidBrush ??=
        _dylib.lookupFunction<_c_CreateSolidBrush, _dart_CreateSolidBrush>(
            'CreateSolidBrush'))(
      color,
    );
  }

  _dart_CreateSolidBrush? _CreateSolidBrush;

  int DeleteDC(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_DeleteDC ??=
        _dylib.lookupFunction<_c_DeleteDC, _dart_DeleteDC>('DeleteDC'))(
      hdc,
    );
  }

  _dart_DeleteDC? _DeleteDC;

  int DeleteMetaFile(
    ffi.Pointer<HMETAFILE__> hmf,
  ) {
    return (_DeleteMetaFile ??=
        _dylib.lookupFunction<_c_DeleteMetaFile, _dart_DeleteMetaFile>(
            'DeleteMetaFile'))(
      hmf,
    );
  }

  _dart_DeleteMetaFile? _DeleteMetaFile;

  int DeleteObject(
    ffi.Pointer<ffi.Void> ho,
  ) {
    return (_DeleteObject ??= _dylib
        .lookupFunction<_c_DeleteObject, _dart_DeleteObject>('DeleteObject'))(
      ho,
    );
  }

  _dart_DeleteObject? _DeleteObject;

  int DescribePixelFormat(
    ffi.Pointer<HDC__> hdc,
    int iPixelFormat,
    int nBytes,
    ffi.Pointer<LPPIXELFORMATDESCRIPTOR> ppfd,
  ) {
    return (_DescribePixelFormat ??= _dylib.lookupFunction<
        _c_DescribePixelFormat,
        _dart_DescribePixelFormat>('DescribePixelFormat'))(
      hdc,
      iPixelFormat,
      nBytes,
      ppfd,
    );
  }

  _dart_DescribePixelFormat? _DescribePixelFormat;

  int DeviceCapabilitiesA(
    ffi.Pointer<ffi.Int8> pDevice,
    ffi.Pointer<ffi.Int8> pPort,
    int fwCapability,
    ffi.Pointer<ffi.Int8> pOutput,
    ffi.Pointer<LPDEVMODEA> pDevMode,
  ) {
    return (_DeviceCapabilitiesA ??= _dylib.lookupFunction<
        _c_DeviceCapabilitiesA,
        _dart_DeviceCapabilitiesA>('DeviceCapabilitiesA'))(
      pDevice,
      pPort,
      fwCapability,
      pOutput,
      pDevMode,
    );
  }

  _dart_DeviceCapabilitiesA? _DeviceCapabilitiesA;

  int DeviceCapabilitiesW(
    ffi.Pointer<ffi.Uint16> pDevice,
    ffi.Pointer<ffi.Uint16> pPort,
    int fwCapability,
    ffi.Pointer<ffi.Uint16> pOutput,
    ffi.Pointer<LPDEVMODEW> pDevMode,
  ) {
    return (_DeviceCapabilitiesW ??= _dylib.lookupFunction<
        _c_DeviceCapabilitiesW,
        _dart_DeviceCapabilitiesW>('DeviceCapabilitiesW'))(
      pDevice,
      pPort,
      fwCapability,
      pOutput,
      pDevMode,
    );
  }

  _dart_DeviceCapabilitiesW? _DeviceCapabilitiesW;

  int DrawEscape(
    ffi.Pointer<HDC__> hdc,
    int iEscape,
    int cjIn,
    ffi.Pointer<ffi.Int8> lpIn,
  ) {
    return (_DrawEscape ??=
        _dylib.lookupFunction<_c_DrawEscape, _dart_DrawEscape>('DrawEscape'))(
      hdc,
      iEscape,
      cjIn,
      lpIn,
    );
  }

  _dart_DrawEscape? _DrawEscape;

  int Ellipse(
    ffi.Pointer<HDC__> hdc,
    int left,
    int top,
    int right,
    int bottom,
  ) {
    return (_Ellipse ??=
        _dylib.lookupFunction<_c_Ellipse, _dart_Ellipse>('Ellipse'))(
      hdc,
      left,
      top,
      right,
      bottom,
    );
  }

  _dart_Ellipse? _Ellipse;

  int EnumFontFamiliesExA(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPLOGFONTA> lpLogfont,
    ffi.Pointer<ffi.NativeFunction<FONTENUMPROCA>> lpProc,
    int lParam,
    int dwFlags,
  ) {
    return (_EnumFontFamiliesExA ??= _dylib.lookupFunction<
        _c_EnumFontFamiliesExA,
        _dart_EnumFontFamiliesExA>('EnumFontFamiliesExA'))(
      hdc,
      lpLogfont,
      lpProc,
      lParam,
      dwFlags,
    );
  }

  _dart_EnumFontFamiliesExA? _EnumFontFamiliesExA;

  int EnumFontFamiliesExW(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPLOGFONTW> lpLogfont,
    ffi.Pointer<ffi.NativeFunction<FONTENUMPROCW>> lpProc,
    int lParam,
    int dwFlags,
  ) {
    return (_EnumFontFamiliesExW ??= _dylib.lookupFunction<
        _c_EnumFontFamiliesExW,
        _dart_EnumFontFamiliesExW>('EnumFontFamiliesExW'))(
      hdc,
      lpLogfont,
      lpProc,
      lParam,
      dwFlags,
    );
  }

  _dart_EnumFontFamiliesExW? _EnumFontFamiliesExW;

  int EnumFontFamiliesA(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<ffi.Int8> lpLogfont,
    ffi.Pointer<ffi.NativeFunction<FONTENUMPROCA>> lpProc,
    int lParam,
  ) {
    return (_EnumFontFamiliesA ??=
        _dylib.lookupFunction<_c_EnumFontFamiliesA, _dart_EnumFontFamiliesA>(
            'EnumFontFamiliesA'))(
      hdc,
      lpLogfont,
      lpProc,
      lParam,
    );
  }

  _dart_EnumFontFamiliesA? _EnumFontFamiliesA;

  int EnumFontFamiliesW(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<ffi.Uint16> lpLogfont,
    ffi.Pointer<ffi.NativeFunction<FONTENUMPROCW>> lpProc,
    int lParam,
  ) {
    return (_EnumFontFamiliesW ??=
        _dylib.lookupFunction<_c_EnumFontFamiliesW, _dart_EnumFontFamiliesW>(
            'EnumFontFamiliesW'))(
      hdc,
      lpLogfont,
      lpProc,
      lParam,
    );
  }

  _dart_EnumFontFamiliesW? _EnumFontFamiliesW;

  int EnumFontsA(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<ffi.Int8> lpLogfont,
    ffi.Pointer<ffi.NativeFunction<FONTENUMPROCA>> lpProc,
    int lParam,
  ) {
    return (_EnumFontsA ??=
        _dylib.lookupFunction<_c_EnumFontsA, _dart_EnumFontsA>('EnumFontsA'))(
      hdc,
      lpLogfont,
      lpProc,
      lParam,
    );
  }

  _dart_EnumFontsA? _EnumFontsA;

  int EnumFontsW(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<ffi.Uint16> lpLogfont,
    ffi.Pointer<ffi.NativeFunction<FONTENUMPROCW>> lpProc,
    int lParam,
  ) {
    return (_EnumFontsW ??=
        _dylib.lookupFunction<_c_EnumFontsW, _dart_EnumFontsW>('EnumFontsW'))(
      hdc,
      lpLogfont,
      lpProc,
      lParam,
    );
  }

  _dart_EnumFontsW? _EnumFontsW;

  int EnumObjects(
    ffi.Pointer<HDC__> hdc,
    int nType,
    ffi.Pointer<ffi.NativeFunction<GOBJENUMPROC>> lpFunc,
    int lParam,
  ) {
    return (_EnumObjects ??= _dylib
        .lookupFunction<_c_EnumObjects, _dart_EnumObjects>('EnumObjects'))(
      hdc,
      nType,
      lpFunc,
      lParam,
    );
  }

  _dart_EnumObjects? _EnumObjects;

  int EqualRgn(
    ffi.Pointer<HRGN__> hrgn1,
    ffi.Pointer<HRGN__> hrgn2,
  ) {
    return (_EqualRgn ??=
        _dylib.lookupFunction<_c_EqualRgn, _dart_EqualRgn>('EqualRgn'))(
      hrgn1,
      hrgn2,
    );
  }

  _dart_EqualRgn? _EqualRgn;

  int Escape(
    ffi.Pointer<HDC__> hdc,
    int iEscape,
    int cjIn,
    ffi.Pointer<ffi.Int8> pvIn,
    ffi.Pointer<ffi.Void> pvOut,
  ) {
    return (_Escape ??=
        _dylib.lookupFunction<_c_Escape, _dart_Escape>('Escape'))(
      hdc,
      iEscape,
      cjIn,
      pvIn,
      pvOut,
    );
  }

  _dart_Escape? _Escape;

  int ExtEscape(
    ffi.Pointer<HDC__> hdc,
    int iEscape,
    int cjInput,
    ffi.Pointer<ffi.Int8> lpInData,
    int cjOutput,
    ffi.Pointer<ffi.Int8> lpOutData,
  ) {
    return (_ExtEscape ??=
        _dylib.lookupFunction<_c_ExtEscape, _dart_ExtEscape>('ExtEscape'))(
      hdc,
      iEscape,
      cjInput,
      lpInData,
      cjOutput,
      lpOutData,
    );
  }

  _dart_ExtEscape? _ExtEscape;

  int ExcludeClipRect(
    ffi.Pointer<HDC__> hdc,
    int left,
    int top,
    int right,
    int bottom,
  ) {
    return (_ExcludeClipRect ??=
        _dylib.lookupFunction<_c_ExcludeClipRect, _dart_ExcludeClipRect>(
            'ExcludeClipRect'))(
      hdc,
      left,
      top,
      right,
      bottom,
    );
  }

  _dart_ExcludeClipRect? _ExcludeClipRect;

  ffi.Pointer<HRGN__> ExtCreateRegion(
    ffi.Pointer<LPXFORM> lpx,
    int nCount,
    ffi.Pointer<LPRGNDATA> lpData,
  ) {
    return (_ExtCreateRegion ??=
        _dylib.lookupFunction<_c_ExtCreateRegion, _dart_ExtCreateRegion>(
            'ExtCreateRegion'))(
      lpx,
      nCount,
      lpData,
    );
  }

  _dart_ExtCreateRegion? _ExtCreateRegion;

  int ExtFloodFill(
    ffi.Pointer<HDC__> hdc,
    int x,
    int y,
    int color,
    int type,
  ) {
    return (_ExtFloodFill ??= _dylib
        .lookupFunction<_c_ExtFloodFill, _dart_ExtFloodFill>('ExtFloodFill'))(
      hdc,
      x,
      y,
      color,
      type,
    );
  }

  _dart_ExtFloodFill? _ExtFloodFill;

  int FillRgn(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<HRGN__> hrgn,
    ffi.Pointer<HBRUSH__> hbr,
  ) {
    return (_FillRgn ??=
        _dylib.lookupFunction<_c_FillRgn, _dart_FillRgn>('FillRgn'))(
      hdc,
      hrgn,
      hbr,
    );
  }

  _dart_FillRgn? _FillRgn;

  int FloodFill(
    ffi.Pointer<HDC__> hdc,
    int x,
    int y,
    int color,
  ) {
    return (_FloodFill ??=
        _dylib.lookupFunction<_c_FloodFill, _dart_FloodFill>('FloodFill'))(
      hdc,
      x,
      y,
      color,
    );
  }

  _dart_FloodFill? _FloodFill;

  int FrameRgn(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<HRGN__> hrgn,
    ffi.Pointer<HBRUSH__> hbr,
    int w,
    int h,
  ) {
    return (_FrameRgn ??=
        _dylib.lookupFunction<_c_FrameRgn, _dart_FrameRgn>('FrameRgn'))(
      hdc,
      hrgn,
      hbr,
      w,
      h,
    );
  }

  _dart_FrameRgn? _FrameRgn;

  int GetROP2(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_GetROP2 ??=
        _dylib.lookupFunction<_c_GetROP2, _dart_GetROP2>('GetROP2'))(
      hdc,
    );
  }

  _dart_GetROP2? _GetROP2;

  int GetAspectRatioFilterEx(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPSIZE> lpsize,
  ) {
    return (_GetAspectRatioFilterEx ??= _dylib.lookupFunction<
        _c_GetAspectRatioFilterEx,
        _dart_GetAspectRatioFilterEx>('GetAspectRatioFilterEx'))(
      hdc,
      lpsize,
    );
  }

  _dart_GetAspectRatioFilterEx? _GetAspectRatioFilterEx;

  int GetBkColor(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_GetBkColor ??=
        _dylib.lookupFunction<_c_GetBkColor, _dart_GetBkColor>('GetBkColor'))(
      hdc,
    );
  }

  _dart_GetBkColor? _GetBkColor;

  int GetDCBrushColor(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_GetDCBrushColor ??=
        _dylib.lookupFunction<_c_GetDCBrushColor, _dart_GetDCBrushColor>(
            'GetDCBrushColor'))(
      hdc,
    );
  }

  _dart_GetDCBrushColor? _GetDCBrushColor;

  int GetDCPenColor(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_GetDCPenColor ??=
        _dylib.lookupFunction<_c_GetDCPenColor, _dart_GetDCPenColor>(
            'GetDCPenColor'))(
      hdc,
    );
  }

  _dart_GetDCPenColor? _GetDCPenColor;

  int GetBkMode(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_GetBkMode ??=
        _dylib.lookupFunction<_c_GetBkMode, _dart_GetBkMode>('GetBkMode'))(
      hdc,
    );
  }

  _dart_GetBkMode? _GetBkMode;

  int GetBitmapBits(
    ffi.Pointer<HBITMAP__> hbit,
    int cb,
    ffi.Pointer<ffi.Void> lpvBits,
  ) {
    return (_GetBitmapBits ??=
        _dylib.lookupFunction<_c_GetBitmapBits, _dart_GetBitmapBits>(
            'GetBitmapBits'))(
      hbit,
      cb,
      lpvBits,
    );
  }

  _dart_GetBitmapBits? _GetBitmapBits;

  int GetBitmapDimensionEx(
    ffi.Pointer<HBITMAP__> hbit,
    ffi.Pointer<LPSIZE> lpsize,
  ) {
    return (_GetBitmapDimensionEx ??= _dylib.lookupFunction<
        _c_GetBitmapDimensionEx,
        _dart_GetBitmapDimensionEx>('GetBitmapDimensionEx'))(
      hbit,
      lpsize,
    );
  }

  _dart_GetBitmapDimensionEx? _GetBitmapDimensionEx;

  int GetBoundsRect(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPRECT> lprect,
    int flags,
  ) {
    return (_GetBoundsRect ??=
        _dylib.lookupFunction<_c_GetBoundsRect, _dart_GetBoundsRect>(
            'GetBoundsRect'))(
      hdc,
      lprect,
      flags,
    );
  }

  _dart_GetBoundsRect? _GetBoundsRect;

  int GetBrushOrgEx(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPPOINT> lppt,
  ) {
    return (_GetBrushOrgEx ??=
        _dylib.lookupFunction<_c_GetBrushOrgEx, _dart_GetBrushOrgEx>(
            'GetBrushOrgEx'))(
      hdc,
      lppt,
    );
  }

  _dart_GetBrushOrgEx? _GetBrushOrgEx;

  int GetCharWidthA(
    ffi.Pointer<HDC__> hdc,
    int iFirst,
    int iLast,
    ffi.Pointer<ffi.Int32> lpBuffer,
  ) {
    return (_GetCharWidthA ??=
        _dylib.lookupFunction<_c_GetCharWidthA, _dart_GetCharWidthA>(
            'GetCharWidthA'))(
      hdc,
      iFirst,
      iLast,
      lpBuffer,
    );
  }

  _dart_GetCharWidthA? _GetCharWidthA;

  int GetCharWidthW(
    ffi.Pointer<HDC__> hdc,
    int iFirst,
    int iLast,
    ffi.Pointer<ffi.Int32> lpBuffer,
  ) {
    return (_GetCharWidthW ??=
        _dylib.lookupFunction<_c_GetCharWidthW, _dart_GetCharWidthW>(
            'GetCharWidthW'))(
      hdc,
      iFirst,
      iLast,
      lpBuffer,
    );
  }

  _dart_GetCharWidthW? _GetCharWidthW;

  int GetCharWidth32A(
    ffi.Pointer<HDC__> hdc,
    int iFirst,
    int iLast,
    ffi.Pointer<ffi.Int32> lpBuffer,
  ) {
    return (_GetCharWidth32A ??=
        _dylib.lookupFunction<_c_GetCharWidth32A, _dart_GetCharWidth32A>(
            'GetCharWidth32A'))(
      hdc,
      iFirst,
      iLast,
      lpBuffer,
    );
  }

  _dart_GetCharWidth32A? _GetCharWidth32A;

  int GetCharWidth32W(
    ffi.Pointer<HDC__> hdc,
    int iFirst,
    int iLast,
    ffi.Pointer<ffi.Int32> lpBuffer,
  ) {
    return (_GetCharWidth32W ??=
        _dylib.lookupFunction<_c_GetCharWidth32W, _dart_GetCharWidth32W>(
            'GetCharWidth32W'))(
      hdc,
      iFirst,
      iLast,
      lpBuffer,
    );
  }

  _dart_GetCharWidth32W? _GetCharWidth32W;

  int GetCharWidthFloatA(
    ffi.Pointer<HDC__> hdc,
    int iFirst,
    int iLast,
    ffi.Pointer<ffi.Float> lpBuffer,
  ) {
    return (_GetCharWidthFloatA ??=
        _dylib.lookupFunction<_c_GetCharWidthFloatA, _dart_GetCharWidthFloatA>(
            'GetCharWidthFloatA'))(
      hdc,
      iFirst,
      iLast,
      lpBuffer,
    );
  }

  _dart_GetCharWidthFloatA? _GetCharWidthFloatA;

  int GetCharWidthFloatW(
    ffi.Pointer<HDC__> hdc,
    int iFirst,
    int iLast,
    ffi.Pointer<ffi.Float> lpBuffer,
  ) {
    return (_GetCharWidthFloatW ??=
        _dylib.lookupFunction<_c_GetCharWidthFloatW, _dart_GetCharWidthFloatW>(
            'GetCharWidthFloatW'))(
      hdc,
      iFirst,
      iLast,
      lpBuffer,
    );
  }

  _dart_GetCharWidthFloatW? _GetCharWidthFloatW;

  int GetCharABCWidthsA(
    ffi.Pointer<HDC__> hdc,
    int wFirst,
    int wLast,
    ffi.Pointer<LPABC> lpABC,
  ) {
    return (_GetCharABCWidthsA ??=
        _dylib.lookupFunction<_c_GetCharABCWidthsA, _dart_GetCharABCWidthsA>(
            'GetCharABCWidthsA'))(
      hdc,
      wFirst,
      wLast,
      lpABC,
    );
  }

  _dart_GetCharABCWidthsA? _GetCharABCWidthsA;

  int GetCharABCWidthsW(
    ffi.Pointer<HDC__> hdc,
    int wFirst,
    int wLast,
    ffi.Pointer<LPABC> lpABC,
  ) {
    return (_GetCharABCWidthsW ??=
        _dylib.lookupFunction<_c_GetCharABCWidthsW, _dart_GetCharABCWidthsW>(
            'GetCharABCWidthsW'))(
      hdc,
      wFirst,
      wLast,
      lpABC,
    );
  }

  _dart_GetCharABCWidthsW? _GetCharABCWidthsW;

  int GetCharABCWidthsFloatA(
    ffi.Pointer<HDC__> hdc,
    int iFirst,
    int iLast,
    ffi.Pointer<LPABCFLOAT> lpABC,
  ) {
    return (_GetCharABCWidthsFloatA ??= _dylib.lookupFunction<
        _c_GetCharABCWidthsFloatA,
        _dart_GetCharABCWidthsFloatA>('GetCharABCWidthsFloatA'))(
      hdc,
      iFirst,
      iLast,
      lpABC,
    );
  }

  _dart_GetCharABCWidthsFloatA? _GetCharABCWidthsFloatA;

  int GetCharABCWidthsFloatW(
    ffi.Pointer<HDC__> hdc,
    int iFirst,
    int iLast,
    ffi.Pointer<LPABCFLOAT> lpABC,
  ) {
    return (_GetCharABCWidthsFloatW ??= _dylib.lookupFunction<
        _c_GetCharABCWidthsFloatW,
        _dart_GetCharABCWidthsFloatW>('GetCharABCWidthsFloatW'))(
      hdc,
      iFirst,
      iLast,
      lpABC,
    );
  }

  _dart_GetCharABCWidthsFloatW? _GetCharABCWidthsFloatW;

  int GetClipBox(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPRECT> lprect,
  ) {
    return (_GetClipBox ??=
        _dylib.lookupFunction<_c_GetClipBox, _dart_GetClipBox>('GetClipBox'))(
      hdc,
      lprect,
    );
  }

  _dart_GetClipBox? _GetClipBox;

  int GetClipRgn(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<HRGN__> hrgn,
  ) {
    return (_GetClipRgn ??=
        _dylib.lookupFunction<_c_GetClipRgn, _dart_GetClipRgn>('GetClipRgn'))(
      hdc,
      hrgn,
    );
  }

  _dart_GetClipRgn? _GetClipRgn;

  int GetMetaRgn(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<HRGN__> hrgn,
  ) {
    return (_GetMetaRgn ??=
        _dylib.lookupFunction<_c_GetMetaRgn, _dart_GetMetaRgn>('GetMetaRgn'))(
      hdc,
      hrgn,
    );
  }

  _dart_GetMetaRgn? _GetMetaRgn;

  ffi.Pointer<ffi.Void> GetCurrentObject(
    ffi.Pointer<HDC__> hdc,
    int type,
  ) {
    return (_GetCurrentObject ??=
        _dylib.lookupFunction<_c_GetCurrentObject, _dart_GetCurrentObject>(
            'GetCurrentObject'))(
      hdc,
      type,
    );
  }

  _dart_GetCurrentObject? _GetCurrentObject;

  int GetCurrentPositionEx(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPPOINT> lppt,
  ) {
    return (_GetCurrentPositionEx ??= _dylib.lookupFunction<
        _c_GetCurrentPositionEx,
        _dart_GetCurrentPositionEx>('GetCurrentPositionEx'))(
      hdc,
      lppt,
    );
  }

  _dart_GetCurrentPositionEx? _GetCurrentPositionEx;

  int GetDeviceCaps(
    ffi.Pointer<HDC__> hdc,
    int index,
  ) {
    return (_GetDeviceCaps ??=
        _dylib.lookupFunction<_c_GetDeviceCaps, _dart_GetDeviceCaps>(
            'GetDeviceCaps'))(
      hdc,
      index,
    );
  }

  _dart_GetDeviceCaps? _GetDeviceCaps;

  int GetDIBits(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<HBITMAP__> hbm,
    int start,
    int cLines,
    ffi.Pointer<ffi.Void> lpvBits,
    ffi.Pointer<PBITMAPINFO> lpbmi,
    int usage,
  ) {
    return (_GetDIBits ??=
        _dylib.lookupFunction<_c_GetDIBits, _dart_GetDIBits>('GetDIBits'))(
      hdc,
      hbm,
      start,
      cLines,
      lpvBits,
      lpbmi,
      usage,
    );
  }

  _dart_GetDIBits? _GetDIBits;

  int GetFontData(
    ffi.Pointer<HDC__> hdc,
    int dwTable,
    int dwOffset,
    ffi.Pointer<ffi.Void> pvBuffer,
    int cjBuffer,
  ) {
    return (_GetFontData ??= _dylib
        .lookupFunction<_c_GetFontData, _dart_GetFontData>('GetFontData'))(
      hdc,
      dwTable,
      dwOffset,
      pvBuffer,
      cjBuffer,
    );
  }

  _dart_GetFontData? _GetFontData;

  int GetGlyphOutlineA(
    ffi.Pointer<HDC__> hdc,
    int uChar,
    int fuFormat,
    ffi.Pointer<LPGLYPHMETRICS> lpgm,
    int cjBuffer,
    ffi.Pointer<ffi.Void> pvBuffer,
    ffi.Pointer<LPMAT2> lpmat2,
  ) {
    return (_GetGlyphOutlineA ??=
        _dylib.lookupFunction<_c_GetGlyphOutlineA, _dart_GetGlyphOutlineA>(
            'GetGlyphOutlineA'))(
      hdc,
      uChar,
      fuFormat,
      lpgm,
      cjBuffer,
      pvBuffer,
      lpmat2,
    );
  }

  _dart_GetGlyphOutlineA? _GetGlyphOutlineA;

  int GetGlyphOutlineW(
    ffi.Pointer<HDC__> hdc,
    int uChar,
    int fuFormat,
    ffi.Pointer<LPGLYPHMETRICS> lpgm,
    int cjBuffer,
    ffi.Pointer<ffi.Void> pvBuffer,
    ffi.Pointer<LPMAT2> lpmat2,
  ) {
    return (_GetGlyphOutlineW ??=
        _dylib.lookupFunction<_c_GetGlyphOutlineW, _dart_GetGlyphOutlineW>(
            'GetGlyphOutlineW'))(
      hdc,
      uChar,
      fuFormat,
      lpgm,
      cjBuffer,
      pvBuffer,
      lpmat2,
    );
  }

  _dart_GetGlyphOutlineW? _GetGlyphOutlineW;

  int GetGraphicsMode(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_GetGraphicsMode ??=
        _dylib.lookupFunction<_c_GetGraphicsMode, _dart_GetGraphicsMode>(
            'GetGraphicsMode'))(
      hdc,
    );
  }

  _dart_GetGraphicsMode? _GetGraphicsMode;

  int GetMapMode(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_GetMapMode ??=
        _dylib.lookupFunction<_c_GetMapMode, _dart_GetMapMode>('GetMapMode'))(
      hdc,
    );
  }

  _dart_GetMapMode? _GetMapMode;

  int GetMetaFileBitsEx(
    ffi.Pointer<HMETAFILE__> hMF,
    int cbBuffer,
    ffi.Pointer<ffi.Void> lpData,
  ) {
    return (_GetMetaFileBitsEx ??=
        _dylib.lookupFunction<_c_GetMetaFileBitsEx, _dart_GetMetaFileBitsEx>(
            'GetMetaFileBitsEx'))(
      hMF,
      cbBuffer,
      lpData,
    );
  }

  _dart_GetMetaFileBitsEx? _GetMetaFileBitsEx;

  ffi.Pointer<HMETAFILE__> GetMetaFileA(
    ffi.Pointer<ffi.Int8> lpName,
  ) {
    return (_GetMetaFileA ??= _dylib
        .lookupFunction<_c_GetMetaFileA, _dart_GetMetaFileA>('GetMetaFileA'))(
      lpName,
    );
  }

  _dart_GetMetaFileA? _GetMetaFileA;

  ffi.Pointer<HMETAFILE__> GetMetaFileW(
    ffi.Pointer<ffi.Uint16> lpName,
  ) {
    return (_GetMetaFileW ??= _dylib
        .lookupFunction<_c_GetMetaFileW, _dart_GetMetaFileW>('GetMetaFileW'))(
      lpName,
    );
  }

  _dart_GetMetaFileW? _GetMetaFileW;

  int GetNearestColor(
    ffi.Pointer<HDC__> hdc,
    int color,
  ) {
    return (_GetNearestColor ??=
        _dylib.lookupFunction<_c_GetNearestColor, _dart_GetNearestColor>(
            'GetNearestColor'))(
      hdc,
      color,
    );
  }

  _dart_GetNearestColor? _GetNearestColor;

  int GetNearestPaletteIndex(
    ffi.Pointer<HPALETTE__> h,
    int color,
  ) {
    return (_GetNearestPaletteIndex ??= _dylib.lookupFunction<
        _c_GetNearestPaletteIndex,
        _dart_GetNearestPaletteIndex>('GetNearestPaletteIndex'))(
      h,
      color,
    );
  }

  _dart_GetNearestPaletteIndex? _GetNearestPaletteIndex;

  int GetObjectType(
    ffi.Pointer<ffi.Void> h,
  ) {
    return (_GetObjectType ??=
        _dylib.lookupFunction<_c_GetObjectType, _dart_GetObjectType>(
            'GetObjectType'))(
      h,
    );
  }

  _dart_GetObjectType? _GetObjectType;

  int GetOutlineTextMetricsA(
    ffi.Pointer<HDC__> hdc,
    int cjCopy,
    ffi.Pointer<LPOUTLINETEXTMETRICA> potm,
  ) {
    return (_GetOutlineTextMetricsA ??= _dylib.lookupFunction<
        _c_GetOutlineTextMetricsA,
        _dart_GetOutlineTextMetricsA>('GetOutlineTextMetricsA'))(
      hdc,
      cjCopy,
      potm,
    );
  }

  _dart_GetOutlineTextMetricsA? _GetOutlineTextMetricsA;

  int GetOutlineTextMetricsW(
    ffi.Pointer<HDC__> hdc,
    int cjCopy,
    ffi.Pointer<LPOUTLINETEXTMETRICW> potm,
  ) {
    return (_GetOutlineTextMetricsW ??= _dylib.lookupFunction<
        _c_GetOutlineTextMetricsW,
        _dart_GetOutlineTextMetricsW>('GetOutlineTextMetricsW'))(
      hdc,
      cjCopy,
      potm,
    );
  }

  _dart_GetOutlineTextMetricsW? _GetOutlineTextMetricsW;

  int GetPaletteEntries(
    ffi.Pointer<HPALETTE__> hpal,
    int iStart,
    int cEntries,
    ffi.Pointer<LPPALETTEENTRY> pPalEntries,
  ) {
    return (_GetPaletteEntries ??=
        _dylib.lookupFunction<_c_GetPaletteEntries, _dart_GetPaletteEntries>(
            'GetPaletteEntries'))(
      hpal,
      iStart,
      cEntries,
      pPalEntries,
    );
  }

  _dart_GetPaletteEntries? _GetPaletteEntries;

  int GetPixel(
    ffi.Pointer<HDC__> hdc,
    int x,
    int y,
  ) {
    return (_GetPixel ??=
        _dylib.lookupFunction<_c_GetPixel, _dart_GetPixel>('GetPixel'))(
      hdc,
      x,
      y,
    );
  }

  _dart_GetPixel? _GetPixel;

  int GetPixelFormat(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_GetPixelFormat ??=
        _dylib.lookupFunction<_c_GetPixelFormat, _dart_GetPixelFormat>(
            'GetPixelFormat'))(
      hdc,
    );
  }

  _dart_GetPixelFormat? _GetPixelFormat;

  int GetPolyFillMode(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_GetPolyFillMode ??=
        _dylib.lookupFunction<_c_GetPolyFillMode, _dart_GetPolyFillMode>(
            'GetPolyFillMode'))(
      hdc,
    );
  }

  _dart_GetPolyFillMode? _GetPolyFillMode;

  int GetRasterizerCaps(
    ffi.Pointer<LPRASTERIZER_STATUS> lpraststat,
    int cjBytes,
  ) {
    return (_GetRasterizerCaps ??=
        _dylib.lookupFunction<_c_GetRasterizerCaps, _dart_GetRasterizerCaps>(
            'GetRasterizerCaps'))(
      lpraststat,
      cjBytes,
    );
  }

  _dart_GetRasterizerCaps? _GetRasterizerCaps;

  int GetRandomRgn(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<HRGN__> hrgn,
    int i,
  ) {
    return (_GetRandomRgn ??= _dylib
        .lookupFunction<_c_GetRandomRgn, _dart_GetRandomRgn>('GetRandomRgn'))(
      hdc,
      hrgn,
      i,
    );
  }

  _dart_GetRandomRgn? _GetRandomRgn;

  int GetRegionData(
    ffi.Pointer<HRGN__> hrgn,
    int nCount,
    ffi.Pointer<LPRGNDATA> lpRgnData,
  ) {
    return (_GetRegionData ??=
        _dylib.lookupFunction<_c_GetRegionData, _dart_GetRegionData>(
            'GetRegionData'))(
      hrgn,
      nCount,
      lpRgnData,
    );
  }

  _dart_GetRegionData? _GetRegionData;

  int GetRgnBox(
    ffi.Pointer<HRGN__> hrgn,
    ffi.Pointer<LPRECT> lprc,
  ) {
    return (_GetRgnBox ??=
        _dylib.lookupFunction<_c_GetRgnBox, _dart_GetRgnBox>('GetRgnBox'))(
      hrgn,
      lprc,
    );
  }

  _dart_GetRgnBox? _GetRgnBox;

  ffi.Pointer<ffi.Void> GetStockObject(
    int i,
  ) {
    return (_GetStockObject ??=
        _dylib.lookupFunction<_c_GetStockObject, _dart_GetStockObject>(
            'GetStockObject'))(
      i,
    );
  }

  _dart_GetStockObject? _GetStockObject;

  int GetStretchBltMode(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_GetStretchBltMode ??=
        _dylib.lookupFunction<_c_GetStretchBltMode, _dart_GetStretchBltMode>(
            'GetStretchBltMode'))(
      hdc,
    );
  }

  _dart_GetStretchBltMode? _GetStretchBltMode;

  int GetSystemPaletteEntries(
    ffi.Pointer<HDC__> hdc,
    int iStart,
    int cEntries,
    ffi.Pointer<LPPALETTEENTRY> pPalEntries,
  ) {
    return (_GetSystemPaletteEntries ??= _dylib.lookupFunction<
        _c_GetSystemPaletteEntries,
        _dart_GetSystemPaletteEntries>('GetSystemPaletteEntries'))(
      hdc,
      iStart,
      cEntries,
      pPalEntries,
    );
  }

  _dart_GetSystemPaletteEntries? _GetSystemPaletteEntries;

  int GetSystemPaletteUse(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_GetSystemPaletteUse ??= _dylib.lookupFunction<
        _c_GetSystemPaletteUse,
        _dart_GetSystemPaletteUse>('GetSystemPaletteUse'))(
      hdc,
    );
  }

  _dart_GetSystemPaletteUse? _GetSystemPaletteUse;

  int GetTextCharacterExtra(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_GetTextCharacterExtra ??= _dylib.lookupFunction<
        _c_GetTextCharacterExtra,
        _dart_GetTextCharacterExtra>('GetTextCharacterExtra'))(
      hdc,
    );
  }

  _dart_GetTextCharacterExtra? _GetTextCharacterExtra;

  int GetTextAlign(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_GetTextAlign ??= _dylib
        .lookupFunction<_c_GetTextAlign, _dart_GetTextAlign>('GetTextAlign'))(
      hdc,
    );
  }

  _dart_GetTextAlign? _GetTextAlign;

  int GetTextColor(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_GetTextColor ??= _dylib
        .lookupFunction<_c_GetTextColor, _dart_GetTextColor>('GetTextColor'))(
      hdc,
    );
  }

  _dart_GetTextColor? _GetTextColor;

  int GetTextExtentPointA(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<ffi.Int8> lpString,
    int c,
    ffi.Pointer<LPSIZE> lpsz,
  ) {
    return (_GetTextExtentPointA ??= _dylib.lookupFunction<
        _c_GetTextExtentPointA,
        _dart_GetTextExtentPointA>('GetTextExtentPointA'))(
      hdc,
      lpString,
      c,
      lpsz,
    );
  }

  _dart_GetTextExtentPointA? _GetTextExtentPointA;

  int GetTextExtentPointW(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<ffi.Uint16> lpString,
    int c,
    ffi.Pointer<LPSIZE> lpsz,
  ) {
    return (_GetTextExtentPointW ??= _dylib.lookupFunction<
        _c_GetTextExtentPointW,
        _dart_GetTextExtentPointW>('GetTextExtentPointW'))(
      hdc,
      lpString,
      c,
      lpsz,
    );
  }

  _dart_GetTextExtentPointW? _GetTextExtentPointW;

  int GetTextExtentPoint32A(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<ffi.Int8> lpString,
    int c,
    ffi.Pointer<LPSIZE> psizl,
  ) {
    return (_GetTextExtentPoint32A ??= _dylib.lookupFunction<
        _c_GetTextExtentPoint32A,
        _dart_GetTextExtentPoint32A>('GetTextExtentPoint32A'))(
      hdc,
      lpString,
      c,
      psizl,
    );
  }

  _dart_GetTextExtentPoint32A? _GetTextExtentPoint32A;

  int GetTextExtentPoint32W(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<ffi.Uint16> lpString,
    int c,
    ffi.Pointer<LPSIZE> psizl,
  ) {
    return (_GetTextExtentPoint32W ??= _dylib.lookupFunction<
        _c_GetTextExtentPoint32W,
        _dart_GetTextExtentPoint32W>('GetTextExtentPoint32W'))(
      hdc,
      lpString,
      c,
      psizl,
    );
  }

  _dart_GetTextExtentPoint32W? _GetTextExtentPoint32W;

  int GetTextExtentExPointA(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<ffi.Int8> lpszString,
    int cchString,
    int nMaxExtent,
    ffi.Pointer<ffi.Int32> lpnFit,
    ffi.Pointer<ffi.Int32> lpnDx,
    ffi.Pointer<LPSIZE> lpSize,
  ) {
    return (_GetTextExtentExPointA ??= _dylib.lookupFunction<
        _c_GetTextExtentExPointA,
        _dart_GetTextExtentExPointA>('GetTextExtentExPointA'))(
      hdc,
      lpszString,
      cchString,
      nMaxExtent,
      lpnFit,
      lpnDx,
      lpSize,
    );
  }

  _dart_GetTextExtentExPointA? _GetTextExtentExPointA;

  int GetTextExtentExPointW(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<ffi.Uint16> lpszString,
    int cchString,
    int nMaxExtent,
    ffi.Pointer<ffi.Int32> lpnFit,
    ffi.Pointer<ffi.Int32> lpnDx,
    ffi.Pointer<LPSIZE> lpSize,
  ) {
    return (_GetTextExtentExPointW ??= _dylib.lookupFunction<
        _c_GetTextExtentExPointW,
        _dart_GetTextExtentExPointW>('GetTextExtentExPointW'))(
      hdc,
      lpszString,
      cchString,
      nMaxExtent,
      lpnFit,
      lpnDx,
      lpSize,
    );
  }

  _dart_GetTextExtentExPointW? _GetTextExtentExPointW;

  int GetTextCharset(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_GetTextCharset ??=
        _dylib.lookupFunction<_c_GetTextCharset, _dart_GetTextCharset>(
            'GetTextCharset'))(
      hdc,
    );
  }

  _dart_GetTextCharset? _GetTextCharset;

  int GetTextCharsetInfo(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPFONTSIGNATURE> lpSig,
    int dwFlags,
  ) {
    return (_GetTextCharsetInfo ??=
        _dylib.lookupFunction<_c_GetTextCharsetInfo, _dart_GetTextCharsetInfo>(
            'GetTextCharsetInfo'))(
      hdc,
      lpSig,
      dwFlags,
    );
  }

  _dart_GetTextCharsetInfo? _GetTextCharsetInfo;

  int TranslateCharsetInfo(
    ffi.Pointer<ffi.Uint64> lpSrc,
    ffi.Pointer<LPCHARSETINFO> lpCs,
    int dwFlags,
  ) {
    return (_TranslateCharsetInfo ??= _dylib.lookupFunction<
        _c_TranslateCharsetInfo,
        _dart_TranslateCharsetInfo>('TranslateCharsetInfo'))(
      lpSrc,
      lpCs,
      dwFlags,
    );
  }

  _dart_TranslateCharsetInfo? _TranslateCharsetInfo;

  int GetFontLanguageInfo(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_GetFontLanguageInfo ??= _dylib.lookupFunction<
        _c_GetFontLanguageInfo,
        _dart_GetFontLanguageInfo>('GetFontLanguageInfo'))(
      hdc,
    );
  }

  _dart_GetFontLanguageInfo? _GetFontLanguageInfo;

  int GetCharacterPlacementA(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<ffi.Int8> lpString,
    int nCount,
    int nMexExtent,
    ffi.Pointer<LPGCP_RESULTSA> lpResults,
    int dwFlags,
  ) {
    return (_GetCharacterPlacementA ??= _dylib.lookupFunction<
        _c_GetCharacterPlacementA,
        _dart_GetCharacterPlacementA>('GetCharacterPlacementA'))(
      hdc,
      lpString,
      nCount,
      nMexExtent,
      lpResults,
      dwFlags,
    );
  }

  _dart_GetCharacterPlacementA? _GetCharacterPlacementA;

  int GetCharacterPlacementW(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<ffi.Uint16> lpString,
    int nCount,
    int nMexExtent,
    ffi.Pointer<LPGCP_RESULTSW> lpResults,
    int dwFlags,
  ) {
    return (_GetCharacterPlacementW ??= _dylib.lookupFunction<
        _c_GetCharacterPlacementW,
        _dart_GetCharacterPlacementW>('GetCharacterPlacementW'))(
      hdc,
      lpString,
      nCount,
      nMexExtent,
      lpResults,
      dwFlags,
    );
  }

  _dart_GetCharacterPlacementW? _GetCharacterPlacementW;

  int GetFontUnicodeRanges(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPGLYPHSET> lpgs,
  ) {
    return (_GetFontUnicodeRanges ??= _dylib.lookupFunction<
        _c_GetFontUnicodeRanges,
        _dart_GetFontUnicodeRanges>('GetFontUnicodeRanges'))(
      hdc,
      lpgs,
    );
  }

  _dart_GetFontUnicodeRanges? _GetFontUnicodeRanges;

  int GetGlyphIndicesA(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<ffi.Int8> lpstr,
    int c,
    ffi.Pointer<ffi.Uint16> pgi,
    int fl,
  ) {
    return (_GetGlyphIndicesA ??=
        _dylib.lookupFunction<_c_GetGlyphIndicesA, _dart_GetGlyphIndicesA>(
            'GetGlyphIndicesA'))(
      hdc,
      lpstr,
      c,
      pgi,
      fl,
    );
  }

  _dart_GetGlyphIndicesA? _GetGlyphIndicesA;

  int GetGlyphIndicesW(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<ffi.Uint16> lpstr,
    int c,
    ffi.Pointer<ffi.Uint16> pgi,
    int fl,
  ) {
    return (_GetGlyphIndicesW ??=
        _dylib.lookupFunction<_c_GetGlyphIndicesW, _dart_GetGlyphIndicesW>(
            'GetGlyphIndicesW'))(
      hdc,
      lpstr,
      c,
      pgi,
      fl,
    );
  }

  _dart_GetGlyphIndicesW? _GetGlyphIndicesW;

  int GetTextExtentPointI(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<ffi.Uint16> pgiIn,
    int cgi,
    ffi.Pointer<LPSIZE> psize,
  ) {
    return (_GetTextExtentPointI ??= _dylib.lookupFunction<
        _c_GetTextExtentPointI,
        _dart_GetTextExtentPointI>('GetTextExtentPointI'))(
      hdc,
      pgiIn,
      cgi,
      psize,
    );
  }

  _dart_GetTextExtentPointI? _GetTextExtentPointI;

  int GetTextExtentExPointI(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<ffi.Uint16> lpwszString,
    int cwchString,
    int nMaxExtent,
    ffi.Pointer<ffi.Int32> lpnFit,
    ffi.Pointer<ffi.Int32> lpnDx,
    ffi.Pointer<LPSIZE> lpSize,
  ) {
    return (_GetTextExtentExPointI ??= _dylib.lookupFunction<
        _c_GetTextExtentExPointI,
        _dart_GetTextExtentExPointI>('GetTextExtentExPointI'))(
      hdc,
      lpwszString,
      cwchString,
      nMaxExtent,
      lpnFit,
      lpnDx,
      lpSize,
    );
  }

  _dart_GetTextExtentExPointI? _GetTextExtentExPointI;

  int GetCharWidthI(
    ffi.Pointer<HDC__> hdc,
    int giFirst,
    int cgi,
    ffi.Pointer<ffi.Uint16> pgi,
    ffi.Pointer<ffi.Int32> piWidths,
  ) {
    return (_GetCharWidthI ??=
        _dylib.lookupFunction<_c_GetCharWidthI, _dart_GetCharWidthI>(
            'GetCharWidthI'))(
      hdc,
      giFirst,
      cgi,
      pgi,
      piWidths,
    );
  }

  _dart_GetCharWidthI? _GetCharWidthI;

  int GetCharABCWidthsI(
    ffi.Pointer<HDC__> hdc,
    int giFirst,
    int cgi,
    ffi.Pointer<ffi.Uint16> pgi,
    ffi.Pointer<LPABC> pabc,
  ) {
    return (_GetCharABCWidthsI ??=
        _dylib.lookupFunction<_c_GetCharABCWidthsI, _dart_GetCharABCWidthsI>(
            'GetCharABCWidthsI'))(
      hdc,
      giFirst,
      cgi,
      pgi,
      pabc,
    );
  }

  _dart_GetCharABCWidthsI? _GetCharABCWidthsI;

  int AddFontResourceExA(
    ffi.Pointer<ffi.Int8> name,
    int fl,
    ffi.Pointer<ffi.Void> res,
  ) {
    return (_AddFontResourceExA ??=
        _dylib.lookupFunction<_c_AddFontResourceExA, _dart_AddFontResourceExA>(
            'AddFontResourceExA'))(
      name,
      fl,
      res,
    );
  }

  _dart_AddFontResourceExA? _AddFontResourceExA;

  int AddFontResourceExW(
    ffi.Pointer<ffi.Uint16> name,
    int fl,
    ffi.Pointer<ffi.Void> res,
  ) {
    return (_AddFontResourceExW ??=
        _dylib.lookupFunction<_c_AddFontResourceExW, _dart_AddFontResourceExW>(
            'AddFontResourceExW'))(
      name,
      fl,
      res,
    );
  }

  _dart_AddFontResourceExW? _AddFontResourceExW;

  int RemoveFontResourceExA(
    ffi.Pointer<ffi.Int8> name,
    int fl,
    ffi.Pointer<ffi.Void> pdv,
  ) {
    return (_RemoveFontResourceExA ??= _dylib.lookupFunction<
        _c_RemoveFontResourceExA,
        _dart_RemoveFontResourceExA>('RemoveFontResourceExA'))(
      name,
      fl,
      pdv,
    );
  }

  _dart_RemoveFontResourceExA? _RemoveFontResourceExA;

  int RemoveFontResourceExW(
    ffi.Pointer<ffi.Uint16> name,
    int fl,
    ffi.Pointer<ffi.Void> pdv,
  ) {
    return (_RemoveFontResourceExW ??= _dylib.lookupFunction<
        _c_RemoveFontResourceExW,
        _dart_RemoveFontResourceExW>('RemoveFontResourceExW'))(
      name,
      fl,
      pdv,
    );
  }

  _dart_RemoveFontResourceExW? _RemoveFontResourceExW;

  ffi.Pointer<ffi.Void> AddFontMemResourceEx(
    ffi.Pointer<ffi.Void> pFileView,
    int cjSize,
    ffi.Pointer<ffi.Void> pvResrved,
    ffi.Pointer<ffi.Uint64> pNumFonts,
  ) {
    return (_AddFontMemResourceEx ??= _dylib.lookupFunction<
        _c_AddFontMemResourceEx,
        _dart_AddFontMemResourceEx>('AddFontMemResourceEx'))(
      pFileView,
      cjSize,
      pvResrved,
      pNumFonts,
    );
  }

  _dart_AddFontMemResourceEx? _AddFontMemResourceEx;

  int RemoveFontMemResourceEx(
    ffi.Pointer<ffi.Void> h,
  ) {
    return (_RemoveFontMemResourceEx ??= _dylib.lookupFunction<
        _c_RemoveFontMemResourceEx,
        _dart_RemoveFontMemResourceEx>('RemoveFontMemResourceEx'))(
      h,
    );
  }

  _dart_RemoveFontMemResourceEx? _RemoveFontMemResourceEx;

  ffi.Pointer<HFONT__> CreateFontIndirectExA(
    ffi.Pointer<LPENUMLOGFONTEXDVA> arg0,
  ) {
    return (_CreateFontIndirectExA ??= _dylib.lookupFunction<
        _c_CreateFontIndirectExA,
        _dart_CreateFontIndirectExA>('CreateFontIndirectExA'))(
      arg0,
    );
  }

  _dart_CreateFontIndirectExA? _CreateFontIndirectExA;

  ffi.Pointer<HFONT__> CreateFontIndirectExW(
    ffi.Pointer<LPENUMLOGFONTEXDVW> arg0,
  ) {
    return (_CreateFontIndirectExW ??= _dylib.lookupFunction<
        _c_CreateFontIndirectExW,
        _dart_CreateFontIndirectExW>('CreateFontIndirectExW'))(
      arg0,
    );
  }

  _dart_CreateFontIndirectExW? _CreateFontIndirectExW;

  int GetViewportExtEx(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPSIZE> lpsize,
  ) {
    return (_GetViewportExtEx ??=
        _dylib.lookupFunction<_c_GetViewportExtEx, _dart_GetViewportExtEx>(
            'GetViewportExtEx'))(
      hdc,
      lpsize,
    );
  }

  _dart_GetViewportExtEx? _GetViewportExtEx;

  int GetViewportOrgEx(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPPOINT> lppoint,
  ) {
    return (_GetViewportOrgEx ??=
        _dylib.lookupFunction<_c_GetViewportOrgEx, _dart_GetViewportOrgEx>(
            'GetViewportOrgEx'))(
      hdc,
      lppoint,
    );
  }

  _dart_GetViewportOrgEx? _GetViewportOrgEx;

  int GetWindowExtEx(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPSIZE> lpsize,
  ) {
    return (_GetWindowExtEx ??=
        _dylib.lookupFunction<_c_GetWindowExtEx, _dart_GetWindowExtEx>(
            'GetWindowExtEx'))(
      hdc,
      lpsize,
    );
  }

  _dart_GetWindowExtEx? _GetWindowExtEx;

  int GetWindowOrgEx(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPPOINT> lppoint,
  ) {
    return (_GetWindowOrgEx ??=
        _dylib.lookupFunction<_c_GetWindowOrgEx, _dart_GetWindowOrgEx>(
            'GetWindowOrgEx'))(
      hdc,
      lppoint,
    );
  }

  _dart_GetWindowOrgEx? _GetWindowOrgEx;

  int IntersectClipRect(
    ffi.Pointer<HDC__> hdc,
    int left,
    int top,
    int right,
    int bottom,
  ) {
    return (_IntersectClipRect ??=
        _dylib.lookupFunction<_c_IntersectClipRect, _dart_IntersectClipRect>(
            'IntersectClipRect'))(
      hdc,
      left,
      top,
      right,
      bottom,
    );
  }

  _dart_IntersectClipRect? _IntersectClipRect;

  int InvertRgn(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<HRGN__> hrgn,
  ) {
    return (_InvertRgn ??=
        _dylib.lookupFunction<_c_InvertRgn, _dart_InvertRgn>('InvertRgn'))(
      hdc,
      hrgn,
    );
  }

  _dart_InvertRgn? _InvertRgn;

  int LineDDA(
    int xStart,
    int yStart,
    int xEnd,
    int yEnd,
    ffi.Pointer<ffi.NativeFunction<LINEDDAPROC>> lpProc,
    int data,
  ) {
    return (_LineDDA ??=
        _dylib.lookupFunction<_c_LineDDA, _dart_LineDDA>('LineDDA'))(
      xStart,
      yStart,
      xEnd,
      yEnd,
      lpProc,
      data,
    );
  }

  _dart_LineDDA? _LineDDA;

  int LineTo(
    ffi.Pointer<HDC__> hdc,
    int x,
    int y,
  ) {
    return (_LineTo ??=
        _dylib.lookupFunction<_c_LineTo, _dart_LineTo>('LineTo'))(
      hdc,
      x,
      y,
    );
  }

  _dart_LineTo? _LineTo;

  int MaskBlt(
    ffi.Pointer<HDC__> hdcDest,
    int xDest,
    int yDest,
    int width,
    int height,
    ffi.Pointer<HDC__> hdcSrc,
    int xSrc,
    int ySrc,
    ffi.Pointer<HBITMAP__> hbmMask,
    int xMask,
    int yMask,
    int rop,
  ) {
    return (_MaskBlt ??=
        _dylib.lookupFunction<_c_MaskBlt, _dart_MaskBlt>('MaskBlt'))(
      hdcDest,
      xDest,
      yDest,
      width,
      height,
      hdcSrc,
      xSrc,
      ySrc,
      hbmMask,
      xMask,
      yMask,
      rop,
    );
  }

  _dart_MaskBlt? _MaskBlt;

  int PlgBlt(
    ffi.Pointer<HDC__> hdcDest,
    ffi.Pointer<LPPOINT> lpPoint,
    ffi.Pointer<HDC__> hdcSrc,
    int xSrc,
    int ySrc,
    int width,
    int height,
    ffi.Pointer<HBITMAP__> hbmMask,
    int xMask,
    int yMask,
  ) {
    return (_PlgBlt ??=
        _dylib.lookupFunction<_c_PlgBlt, _dart_PlgBlt>('PlgBlt'))(
      hdcDest,
      lpPoint,
      hdcSrc,
      xSrc,
      ySrc,
      width,
      height,
      hbmMask,
      xMask,
      yMask,
    );
  }

  _dart_PlgBlt? _PlgBlt;

  int OffsetClipRgn(
    ffi.Pointer<HDC__> hdc,
    int x,
    int y,
  ) {
    return (_OffsetClipRgn ??=
        _dylib.lookupFunction<_c_OffsetClipRgn, _dart_OffsetClipRgn>(
            'OffsetClipRgn'))(
      hdc,
      x,
      y,
    );
  }

  _dart_OffsetClipRgn? _OffsetClipRgn;

  int OffsetRgn(
    ffi.Pointer<HRGN__> hrgn,
    int x,
    int y,
  ) {
    return (_OffsetRgn ??=
        _dylib.lookupFunction<_c_OffsetRgn, _dart_OffsetRgn>('OffsetRgn'))(
      hrgn,
      x,
      y,
    );
  }

  _dart_OffsetRgn? _OffsetRgn;

  int PatBlt(
    ffi.Pointer<HDC__> hdc,
    int x,
    int y,
    int w,
    int h,
    int rop,
  ) {
    return (_PatBlt ??=
        _dylib.lookupFunction<_c_PatBlt, _dart_PatBlt>('PatBlt'))(
      hdc,
      x,
      y,
      w,
      h,
      rop,
    );
  }

  _dart_PatBlt? _PatBlt;

  int Pie(
    ffi.Pointer<HDC__> hdc,
    int left,
    int top,
    int right,
    int bottom,
    int xr1,
    int yr1,
    int xr2,
    int yr2,
  ) {
    return (_Pie ??= _dylib.lookupFunction<_c_Pie, _dart_Pie>('Pie'))(
      hdc,
      left,
      top,
      right,
      bottom,
      xr1,
      yr1,
      xr2,
      yr2,
    );
  }

  _dart_Pie? _Pie;

  int PlayMetaFile(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<HMETAFILE__> hmf,
  ) {
    return (_PlayMetaFile ??= _dylib
        .lookupFunction<_c_PlayMetaFile, _dart_PlayMetaFile>('PlayMetaFile'))(
      hdc,
      hmf,
    );
  }

  _dart_PlayMetaFile? _PlayMetaFile;

  int PaintRgn(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<HRGN__> hrgn,
  ) {
    return (_PaintRgn ??=
        _dylib.lookupFunction<_c_PaintRgn, _dart_PaintRgn>('PaintRgn'))(
      hdc,
      hrgn,
    );
  }

  _dart_PaintRgn? _PaintRgn;

  int PolyPolygon(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPPOINT> apt,
    ffi.Pointer<ffi.Int32> asz,
    int csz,
  ) {
    return (_PolyPolygon ??= _dylib
        .lookupFunction<_c_PolyPolygon, _dart_PolyPolygon>('PolyPolygon'))(
      hdc,
      apt,
      asz,
      csz,
    );
  }

  _dart_PolyPolygon? _PolyPolygon;

  int PtInRegion(
    ffi.Pointer<HRGN__> hrgn,
    int x,
    int y,
  ) {
    return (_PtInRegion ??=
        _dylib.lookupFunction<_c_PtInRegion, _dart_PtInRegion>('PtInRegion'))(
      hrgn,
      x,
      y,
    );
  }

  _dart_PtInRegion? _PtInRegion;

  int PtVisible(
    ffi.Pointer<HDC__> hdc,
    int x,
    int y,
  ) {
    return (_PtVisible ??=
        _dylib.lookupFunction<_c_PtVisible, _dart_PtVisible>('PtVisible'))(
      hdc,
      x,
      y,
    );
  }

  _dart_PtVisible? _PtVisible;

  int RectInRegion(
    ffi.Pointer<HRGN__> hrgn,
    ffi.Pointer<LPRECT> lprect,
  ) {
    return (_RectInRegion ??= _dylib
        .lookupFunction<_c_RectInRegion, _dart_RectInRegion>('RectInRegion'))(
      hrgn,
      lprect,
    );
  }

  _dart_RectInRegion? _RectInRegion;

  int RectVisible(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPRECT> lprect,
  ) {
    return (_RectVisible ??= _dylib
        .lookupFunction<_c_RectVisible, _dart_RectVisible>('RectVisible'))(
      hdc,
      lprect,
    );
  }

  _dart_RectVisible? _RectVisible;

  int Rectangle(
    ffi.Pointer<HDC__> hdc,
    int left,
    int top,
    int right,
    int bottom,
  ) {
    return (_Rectangle ??=
        _dylib.lookupFunction<_c_Rectangle, _dart_Rectangle>('Rectangle'))(
      hdc,
      left,
      top,
      right,
      bottom,
    );
  }

  _dart_Rectangle? _Rectangle;

  int RestoreDC(
    ffi.Pointer<HDC__> hdc,
    int nSavedDC,
  ) {
    return (_RestoreDC ??=
        _dylib.lookupFunction<_c_RestoreDC, _dart_RestoreDC>('RestoreDC'))(
      hdc,
      nSavedDC,
    );
  }

  _dart_RestoreDC? _RestoreDC;

  ffi.Pointer<HDC__> ResetDCA(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPDEVMODEA> lpdm,
  ) {
    return (_ResetDCA ??=
        _dylib.lookupFunction<_c_ResetDCA, _dart_ResetDCA>('ResetDCA'))(
      hdc,
      lpdm,
    );
  }

  _dart_ResetDCA? _ResetDCA;

  ffi.Pointer<HDC__> ResetDCW(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPDEVMODEW> lpdm,
  ) {
    return (_ResetDCW ??=
        _dylib.lookupFunction<_c_ResetDCW, _dart_ResetDCW>('ResetDCW'))(
      hdc,
      lpdm,
    );
  }

  _dart_ResetDCW? _ResetDCW;

  int RealizePalette(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_RealizePalette ??=
        _dylib.lookupFunction<_c_RealizePalette, _dart_RealizePalette>(
            'RealizePalette'))(
      hdc,
    );
  }

  _dart_RealizePalette? _RealizePalette;

  int RemoveFontResourceA(
    ffi.Pointer<ffi.Int8> lpFileName,
  ) {
    return (_RemoveFontResourceA ??= _dylib.lookupFunction<
        _c_RemoveFontResourceA,
        _dart_RemoveFontResourceA>('RemoveFontResourceA'))(
      lpFileName,
    );
  }

  _dart_RemoveFontResourceA? _RemoveFontResourceA;

  int RemoveFontResourceW(
    ffi.Pointer<ffi.Uint16> lpFileName,
  ) {
    return (_RemoveFontResourceW ??= _dylib.lookupFunction<
        _c_RemoveFontResourceW,
        _dart_RemoveFontResourceW>('RemoveFontResourceW'))(
      lpFileName,
    );
  }

  _dart_RemoveFontResourceW? _RemoveFontResourceW;

  int RoundRect(
    ffi.Pointer<HDC__> hdc,
    int left,
    int top,
    int right,
    int bottom,
    int width,
    int height,
  ) {
    return (_RoundRect ??=
        _dylib.lookupFunction<_c_RoundRect, _dart_RoundRect>('RoundRect'))(
      hdc,
      left,
      top,
      right,
      bottom,
      width,
      height,
    );
  }

  _dart_RoundRect? _RoundRect;

  int ResizePalette(
    ffi.Pointer<HPALETTE__> hpal,
    int n,
  ) {
    return (_ResizePalette ??=
        _dylib.lookupFunction<_c_ResizePalette, _dart_ResizePalette>(
            'ResizePalette'))(
      hpal,
      n,
    );
  }

  _dart_ResizePalette? _ResizePalette;

  int SaveDC(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_SaveDC ??=
        _dylib.lookupFunction<_c_SaveDC, _dart_SaveDC>('SaveDC'))(
      hdc,
    );
  }

  _dart_SaveDC? _SaveDC;

  int SelectClipRgn(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<HRGN__> hrgn,
  ) {
    return (_SelectClipRgn ??=
        _dylib.lookupFunction<_c_SelectClipRgn, _dart_SelectClipRgn>(
            'SelectClipRgn'))(
      hdc,
      hrgn,
    );
  }

  _dart_SelectClipRgn? _SelectClipRgn;

  int ExtSelectClipRgn(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<HRGN__> hrgn,
    int mode,
  ) {
    return (_ExtSelectClipRgn ??=
        _dylib.lookupFunction<_c_ExtSelectClipRgn, _dart_ExtSelectClipRgn>(
            'ExtSelectClipRgn'))(
      hdc,
      hrgn,
      mode,
    );
  }

  _dart_ExtSelectClipRgn? _ExtSelectClipRgn;

  int SetMetaRgn(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_SetMetaRgn ??=
        _dylib.lookupFunction<_c_SetMetaRgn, _dart_SetMetaRgn>('SetMetaRgn'))(
      hdc,
    );
  }

  _dart_SetMetaRgn? _SetMetaRgn;

  ffi.Pointer<ffi.Void> SelectObject(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<ffi.Void> h,
  ) {
    return (_SelectObject ??= _dylib
        .lookupFunction<_c_SelectObject, _dart_SelectObject>('SelectObject'))(
      hdc,
      h,
    );
  }

  _dart_SelectObject? _SelectObject;

  ffi.Pointer<HPALETTE__> SelectPalette(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<HPALETTE__> hPal,
    int bForceBkgd,
  ) {
    return (_SelectPalette ??=
        _dylib.lookupFunction<_c_SelectPalette, _dart_SelectPalette>(
            'SelectPalette'))(
      hdc,
      hPal,
      bForceBkgd,
    );
  }

  _dart_SelectPalette? _SelectPalette;

  int SetBkColor(
    ffi.Pointer<HDC__> hdc,
    int color,
  ) {
    return (_SetBkColor ??=
        _dylib.lookupFunction<_c_SetBkColor, _dart_SetBkColor>('SetBkColor'))(
      hdc,
      color,
    );
  }

  _dart_SetBkColor? _SetBkColor;

  int SetDCBrushColor(
    ffi.Pointer<HDC__> hdc,
    int color,
  ) {
    return (_SetDCBrushColor ??=
        _dylib.lookupFunction<_c_SetDCBrushColor, _dart_SetDCBrushColor>(
            'SetDCBrushColor'))(
      hdc,
      color,
    );
  }

  _dart_SetDCBrushColor? _SetDCBrushColor;

  int SetDCPenColor(
    ffi.Pointer<HDC__> hdc,
    int color,
  ) {
    return (_SetDCPenColor ??=
        _dylib.lookupFunction<_c_SetDCPenColor, _dart_SetDCPenColor>(
            'SetDCPenColor'))(
      hdc,
      color,
    );
  }

  _dart_SetDCPenColor? _SetDCPenColor;

  int SetBkMode(
    ffi.Pointer<HDC__> hdc,
    int mode,
  ) {
    return (_SetBkMode ??=
        _dylib.lookupFunction<_c_SetBkMode, _dart_SetBkMode>('SetBkMode'))(
      hdc,
      mode,
    );
  }

  _dart_SetBkMode? _SetBkMode;

  int SetBitmapBits(
    ffi.Pointer<HBITMAP__> hbm,
    int cb,
    ffi.Pointer<ffi.Void> pvBits,
  ) {
    return (_SetBitmapBits ??=
        _dylib.lookupFunction<_c_SetBitmapBits, _dart_SetBitmapBits>(
            'SetBitmapBits'))(
      hbm,
      cb,
      pvBits,
    );
  }

  _dart_SetBitmapBits? _SetBitmapBits;

  int SetBoundsRect(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPRECT> lprect,
    int flags,
  ) {
    return (_SetBoundsRect ??=
        _dylib.lookupFunction<_c_SetBoundsRect, _dart_SetBoundsRect>(
            'SetBoundsRect'))(
      hdc,
      lprect,
      flags,
    );
  }

  _dart_SetBoundsRect? _SetBoundsRect;

  int SetDIBits(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<HBITMAP__> hbm,
    int start,
    int cLines,
    ffi.Pointer<ffi.Void> lpBits,
    ffi.Pointer<PBITMAPINFO> lpbmi,
    int ColorUse,
  ) {
    return (_SetDIBits ??=
        _dylib.lookupFunction<_c_SetDIBits, _dart_SetDIBits>('SetDIBits'))(
      hdc,
      hbm,
      start,
      cLines,
      lpBits,
      lpbmi,
      ColorUse,
    );
  }

  _dart_SetDIBits? _SetDIBits;

  int SetDIBitsToDevice(
    ffi.Pointer<HDC__> hdc,
    int xDest,
    int yDest,
    int w,
    int h,
    int xSrc,
    int ySrc,
    int StartScan,
    int cLines,
    ffi.Pointer<ffi.Void> lpvBits,
    ffi.Pointer<PBITMAPINFO> lpbmi,
    int ColorUse,
  ) {
    return (_SetDIBitsToDevice ??=
        _dylib.lookupFunction<_c_SetDIBitsToDevice, _dart_SetDIBitsToDevice>(
            'SetDIBitsToDevice'))(
      hdc,
      xDest,
      yDest,
      w,
      h,
      xSrc,
      ySrc,
      StartScan,
      cLines,
      lpvBits,
      lpbmi,
      ColorUse,
    );
  }

  _dart_SetDIBitsToDevice? _SetDIBitsToDevice;

  int SetMapperFlags(
    ffi.Pointer<HDC__> hdc,
    int flags,
  ) {
    return (_SetMapperFlags ??=
        _dylib.lookupFunction<_c_SetMapperFlags, _dart_SetMapperFlags>(
            'SetMapperFlags'))(
      hdc,
      flags,
    );
  }

  _dart_SetMapperFlags? _SetMapperFlags;

  int SetGraphicsMode(
    ffi.Pointer<HDC__> hdc,
    int iMode,
  ) {
    return (_SetGraphicsMode ??=
        _dylib.lookupFunction<_c_SetGraphicsMode, _dart_SetGraphicsMode>(
            'SetGraphicsMode'))(
      hdc,
      iMode,
    );
  }

  _dart_SetGraphicsMode? _SetGraphicsMode;

  int SetMapMode(
    ffi.Pointer<HDC__> hdc,
    int iMode,
  ) {
    return (_SetMapMode ??=
        _dylib.lookupFunction<_c_SetMapMode, _dart_SetMapMode>('SetMapMode'))(
      hdc,
      iMode,
    );
  }

  _dart_SetMapMode? _SetMapMode;

  int SetLayout(
    ffi.Pointer<HDC__> hdc,
    int l,
  ) {
    return (_SetLayout ??=
        _dylib.lookupFunction<_c_SetLayout, _dart_SetLayout>('SetLayout'))(
      hdc,
      l,
    );
  }

  _dart_SetLayout? _SetLayout;

  int GetLayout(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_GetLayout ??=
        _dylib.lookupFunction<_c_GetLayout, _dart_GetLayout>('GetLayout'))(
      hdc,
    );
  }

  _dart_GetLayout? _GetLayout;

  ffi.Pointer<HMETAFILE__> SetMetaFileBitsEx(
    int cbBuffer,
    ffi.Pointer<ffi.Uint8> lpData,
  ) {
    return (_SetMetaFileBitsEx ??=
        _dylib.lookupFunction<_c_SetMetaFileBitsEx, _dart_SetMetaFileBitsEx>(
            'SetMetaFileBitsEx'))(
      cbBuffer,
      lpData,
    );
  }

  _dart_SetMetaFileBitsEx? _SetMetaFileBitsEx;

  int SetPaletteEntries(
    ffi.Pointer<HPALETTE__> hpal,
    int iStart,
    int cEntries,
    ffi.Pointer<LPPALETTEENTRY> pPalEntries,
  ) {
    return (_SetPaletteEntries ??=
        _dylib.lookupFunction<_c_SetPaletteEntries, _dart_SetPaletteEntries>(
            'SetPaletteEntries'))(
      hpal,
      iStart,
      cEntries,
      pPalEntries,
    );
  }

  _dart_SetPaletteEntries? _SetPaletteEntries;

  int SetPixel(
    ffi.Pointer<HDC__> hdc,
    int x,
    int y,
    int color,
  ) {
    return (_SetPixel ??=
        _dylib.lookupFunction<_c_SetPixel, _dart_SetPixel>('SetPixel'))(
      hdc,
      x,
      y,
      color,
    );
  }

  _dart_SetPixel? _SetPixel;

  int SetPixelV(
    ffi.Pointer<HDC__> hdc,
    int x,
    int y,
    int color,
  ) {
    return (_SetPixelV ??=
        _dylib.lookupFunction<_c_SetPixelV, _dart_SetPixelV>('SetPixelV'))(
      hdc,
      x,
      y,
      color,
    );
  }

  _dart_SetPixelV? _SetPixelV;

  int SetPixelFormat(
    ffi.Pointer<HDC__> hdc,
    int format,
    ffi.Pointer<LPPIXELFORMATDESCRIPTOR> ppfd,
  ) {
    return (_SetPixelFormat ??=
        _dylib.lookupFunction<_c_SetPixelFormat, _dart_SetPixelFormat>(
            'SetPixelFormat'))(
      hdc,
      format,
      ppfd,
    );
  }

  _dart_SetPixelFormat? _SetPixelFormat;

  int SetPolyFillMode(
    ffi.Pointer<HDC__> hdc,
    int mode,
  ) {
    return (_SetPolyFillMode ??=
        _dylib.lookupFunction<_c_SetPolyFillMode, _dart_SetPolyFillMode>(
            'SetPolyFillMode'))(
      hdc,
      mode,
    );
  }

  _dart_SetPolyFillMode? _SetPolyFillMode;

  int StretchBlt(
    ffi.Pointer<HDC__> hdcDest,
    int xDest,
    int yDest,
    int wDest,
    int hDest,
    ffi.Pointer<HDC__> hdcSrc,
    int xSrc,
    int ySrc,
    int wSrc,
    int hSrc,
    int rop,
  ) {
    return (_StretchBlt ??=
        _dylib.lookupFunction<_c_StretchBlt, _dart_StretchBlt>('StretchBlt'))(
      hdcDest,
      xDest,
      yDest,
      wDest,
      hDest,
      hdcSrc,
      xSrc,
      ySrc,
      wSrc,
      hSrc,
      rop,
    );
  }

  _dart_StretchBlt? _StretchBlt;

  int SetRectRgn(
    ffi.Pointer<HRGN__> hrgn,
    int left,
    int top,
    int right,
    int bottom,
  ) {
    return (_SetRectRgn ??=
        _dylib.lookupFunction<_c_SetRectRgn, _dart_SetRectRgn>('SetRectRgn'))(
      hrgn,
      left,
      top,
      right,
      bottom,
    );
  }

  _dart_SetRectRgn? _SetRectRgn;

  int StretchDIBits(
    ffi.Pointer<HDC__> hdc,
    int xDest,
    int yDest,
    int DestWidth,
    int DestHeight,
    int xSrc,
    int ySrc,
    int SrcWidth,
    int SrcHeight,
    ffi.Pointer<ffi.Void> lpBits,
    ffi.Pointer<PBITMAPINFO> lpbmi,
    int iUsage,
    int rop,
  ) {
    return (_StretchDIBits ??=
        _dylib.lookupFunction<_c_StretchDIBits, _dart_StretchDIBits>(
            'StretchDIBits'))(
      hdc,
      xDest,
      yDest,
      DestWidth,
      DestHeight,
      xSrc,
      ySrc,
      SrcWidth,
      SrcHeight,
      lpBits,
      lpbmi,
      iUsage,
      rop,
    );
  }

  _dart_StretchDIBits? _StretchDIBits;

  int SetROP2(
    ffi.Pointer<HDC__> hdc,
    int rop2,
  ) {
    return (_SetROP2 ??=
        _dylib.lookupFunction<_c_SetROP2, _dart_SetROP2>('SetROP2'))(
      hdc,
      rop2,
    );
  }

  _dart_SetROP2? _SetROP2;

  int SetStretchBltMode(
    ffi.Pointer<HDC__> hdc,
    int mode,
  ) {
    return (_SetStretchBltMode ??=
        _dylib.lookupFunction<_c_SetStretchBltMode, _dart_SetStretchBltMode>(
            'SetStretchBltMode'))(
      hdc,
      mode,
    );
  }

  _dart_SetStretchBltMode? _SetStretchBltMode;

  int SetSystemPaletteUse(
    ffi.Pointer<HDC__> hdc,
    int use,
  ) {
    return (_SetSystemPaletteUse ??= _dylib.lookupFunction<
        _c_SetSystemPaletteUse,
        _dart_SetSystemPaletteUse>('SetSystemPaletteUse'))(
      hdc,
      use,
    );
  }

  _dart_SetSystemPaletteUse? _SetSystemPaletteUse;

  int SetTextCharacterExtra(
    ffi.Pointer<HDC__> hdc,
    int extra,
  ) {
    return (_SetTextCharacterExtra ??= _dylib.lookupFunction<
        _c_SetTextCharacterExtra,
        _dart_SetTextCharacterExtra>('SetTextCharacterExtra'))(
      hdc,
      extra,
    );
  }

  _dart_SetTextCharacterExtra? _SetTextCharacterExtra;

  int SetTextColor(
    ffi.Pointer<HDC__> hdc,
    int color,
  ) {
    return (_SetTextColor ??= _dylib
        .lookupFunction<_c_SetTextColor, _dart_SetTextColor>('SetTextColor'))(
      hdc,
      color,
    );
  }

  _dart_SetTextColor? _SetTextColor;

  int SetTextAlign(
    ffi.Pointer<HDC__> hdc,
    int align,
  ) {
    return (_SetTextAlign ??= _dylib
        .lookupFunction<_c_SetTextAlign, _dart_SetTextAlign>('SetTextAlign'))(
      hdc,
      align,
    );
  }

  _dart_SetTextAlign? _SetTextAlign;

  int SetTextJustification(
    ffi.Pointer<HDC__> hdc,
    int extra,
    int count,
  ) {
    return (_SetTextJustification ??= _dylib.lookupFunction<
        _c_SetTextJustification,
        _dart_SetTextJustification>('SetTextJustification'))(
      hdc,
      extra,
      count,
    );
  }

  _dart_SetTextJustification? _SetTextJustification;

  int UpdateColors(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_UpdateColors ??= _dylib
        .lookupFunction<_c_UpdateColors, _dart_UpdateColors>('UpdateColors'))(
      hdc,
    );
  }

  _dart_UpdateColors? _UpdateColors;

  int TransparentBlt(
    ffi.Pointer<HDC__> hdcDest,
    int xoriginDest,
    int yoriginDest,
    int wDest,
    int hDest,
    ffi.Pointer<HDC__> hdcSrc,
    int xoriginSrc,
    int yoriginSrc,
    int wSrc,
    int hSrc,
    int crTransparent,
  ) {
    return (_TransparentBlt ??=
        _dylib.lookupFunction<_c_TransparentBlt, _dart_TransparentBlt>(
            'TransparentBlt'))(
      hdcDest,
      xoriginDest,
      yoriginDest,
      wDest,
      hDest,
      hdcSrc,
      xoriginSrc,
      yoriginSrc,
      wSrc,
      hSrc,
      crTransparent,
    );
  }

  _dart_TransparentBlt? _TransparentBlt;

  int GradientFill(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPTRIVERTEX> pVertex,
    int nVertex,
    ffi.Pointer<ffi.Void> pMesh,
    int nMesh,
    int ulMode,
  ) {
    return (_GradientFill ??= _dylib
        .lookupFunction<_c_GradientFill, _dart_GradientFill>('GradientFill'))(
      hdc,
      pVertex,
      nVertex,
      pMesh,
      nMesh,
      ulMode,
    );
  }

  _dart_GradientFill? _GradientFill;

  int GdiTransparentBlt(
    ffi.Pointer<HDC__> hdcDest,
    int xoriginDest,
    int yoriginDest,
    int wDest,
    int hDest,
    ffi.Pointer<HDC__> hdcSrc,
    int xoriginSrc,
    int yoriginSrc,
    int wSrc,
    int hSrc,
    int crTransparent,
  ) {
    return (_GdiTransparentBlt ??=
        _dylib.lookupFunction<_c_GdiTransparentBlt, _dart_GdiTransparentBlt>(
            'GdiTransparentBlt'))(
      hdcDest,
      xoriginDest,
      yoriginDest,
      wDest,
      hDest,
      hdcSrc,
      xoriginSrc,
      yoriginSrc,
      wSrc,
      hSrc,
      crTransparent,
    );
  }

  _dart_GdiTransparentBlt? _GdiTransparentBlt;

  int GdiGradientFill(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPTRIVERTEX> pVertex,
    int nVertex,
    ffi.Pointer<ffi.Void> pMesh,
    int nCount,
    int ulMode,
  ) {
    return (_GdiGradientFill ??=
        _dylib.lookupFunction<_c_GdiGradientFill, _dart_GdiGradientFill>(
            'GdiGradientFill'))(
      hdc,
      pVertex,
      nVertex,
      pMesh,
      nCount,
      ulMode,
    );
  }

  _dart_GdiGradientFill? _GdiGradientFill;

  int PlayMetaFileRecord(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPHANDLETABLE> lpHandleTable,
    ffi.Pointer<METARECORD> lpMR,
    int noObjs,
  ) {
    return (_PlayMetaFileRecord ??=
        _dylib.lookupFunction<_c_PlayMetaFileRecord, _dart_PlayMetaFileRecord>(
            'PlayMetaFileRecord'))(
      hdc,
      lpHandleTable,
      lpMR,
      noObjs,
    );
  }

  _dart_PlayMetaFileRecord? _PlayMetaFileRecord;

  int EnumMetaFile(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<HMETAFILE__> hmf,
    ffi.Pointer<ffi.NativeFunction<MFENUMPROC>> proc,
    int param,
  ) {
    return (_EnumMetaFile ??= _dylib
        .lookupFunction<_c_EnumMetaFile, _dart_EnumMetaFile>('EnumMetaFile'))(
      hdc,
      hmf,
      proc,
      param,
    );
  }

  _dart_EnumMetaFile? _EnumMetaFile;

  ffi.Pointer<HENHMETAFILE__> CloseEnhMetaFile(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_CloseEnhMetaFile ??=
        _dylib.lookupFunction<_c_CloseEnhMetaFile, _dart_CloseEnhMetaFile>(
            'CloseEnhMetaFile'))(
      hdc,
    );
  }

  _dart_CloseEnhMetaFile? _CloseEnhMetaFile;

  ffi.Pointer<HENHMETAFILE__> CopyEnhMetaFileA(
    ffi.Pointer<HENHMETAFILE__> hEnh,
    ffi.Pointer<ffi.Int8> lpFileName,
  ) {
    return (_CopyEnhMetaFileA ??=
        _dylib.lookupFunction<_c_CopyEnhMetaFileA, _dart_CopyEnhMetaFileA>(
            'CopyEnhMetaFileA'))(
      hEnh,
      lpFileName,
    );
  }

  _dart_CopyEnhMetaFileA? _CopyEnhMetaFileA;

  ffi.Pointer<HENHMETAFILE__> CopyEnhMetaFileW(
    ffi.Pointer<HENHMETAFILE__> hEnh,
    ffi.Pointer<ffi.Uint16> lpFileName,
  ) {
    return (_CopyEnhMetaFileW ??=
        _dylib.lookupFunction<_c_CopyEnhMetaFileW, _dart_CopyEnhMetaFileW>(
            'CopyEnhMetaFileW'))(
      hEnh,
      lpFileName,
    );
  }

  _dart_CopyEnhMetaFileW? _CopyEnhMetaFileW;

  ffi.Pointer<HDC__> CreateEnhMetaFileA(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<ffi.Int8> lpFilename,
    ffi.Pointer<LPRECT> lprc,
    ffi.Pointer<ffi.Int8> lpDesc,
  ) {
    return (_CreateEnhMetaFileA ??=
        _dylib.lookupFunction<_c_CreateEnhMetaFileA, _dart_CreateEnhMetaFileA>(
            'CreateEnhMetaFileA'))(
      hdc,
      lpFilename,
      lprc,
      lpDesc,
    );
  }

  _dart_CreateEnhMetaFileA? _CreateEnhMetaFileA;

  ffi.Pointer<HDC__> CreateEnhMetaFileW(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<ffi.Uint16> lpFilename,
    ffi.Pointer<LPRECT> lprc,
    ffi.Pointer<ffi.Uint16> lpDesc,
  ) {
    return (_CreateEnhMetaFileW ??=
        _dylib.lookupFunction<_c_CreateEnhMetaFileW, _dart_CreateEnhMetaFileW>(
            'CreateEnhMetaFileW'))(
      hdc,
      lpFilename,
      lprc,
      lpDesc,
    );
  }

  _dart_CreateEnhMetaFileW? _CreateEnhMetaFileW;

  int DeleteEnhMetaFile(
    ffi.Pointer<HENHMETAFILE__> hmf,
  ) {
    return (_DeleteEnhMetaFile ??=
        _dylib.lookupFunction<_c_DeleteEnhMetaFile, _dart_DeleteEnhMetaFile>(
            'DeleteEnhMetaFile'))(
      hmf,
    );
  }

  _dart_DeleteEnhMetaFile? _DeleteEnhMetaFile;

  int EnumEnhMetaFile(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<HENHMETAFILE__> hmf,
    ffi.Pointer<ffi.NativeFunction<ENHMFENUMPROC>> proc,
    ffi.Pointer<ffi.Void> param,
    ffi.Pointer<LPRECT> lpRect,
  ) {
    return (_EnumEnhMetaFile ??=
        _dylib.lookupFunction<_c_EnumEnhMetaFile, _dart_EnumEnhMetaFile>(
            'EnumEnhMetaFile'))(
      hdc,
      hmf,
      proc,
      param,
      lpRect,
    );
  }

  _dart_EnumEnhMetaFile? _EnumEnhMetaFile;

  ffi.Pointer<HENHMETAFILE__> GetEnhMetaFileA(
    ffi.Pointer<ffi.Int8> lpName,
  ) {
    return (_GetEnhMetaFileA ??=
        _dylib.lookupFunction<_c_GetEnhMetaFileA, _dart_GetEnhMetaFileA>(
            'GetEnhMetaFileA'))(
      lpName,
    );
  }

  _dart_GetEnhMetaFileA? _GetEnhMetaFileA;

  ffi.Pointer<HENHMETAFILE__> GetEnhMetaFileW(
    ffi.Pointer<ffi.Uint16> lpName,
  ) {
    return (_GetEnhMetaFileW ??=
        _dylib.lookupFunction<_c_GetEnhMetaFileW, _dart_GetEnhMetaFileW>(
            'GetEnhMetaFileW'))(
      lpName,
    );
  }

  _dart_GetEnhMetaFileW? _GetEnhMetaFileW;

  int GetEnhMetaFileBits(
    ffi.Pointer<HENHMETAFILE__> hEMF,
    int nSize,
    ffi.Pointer<ffi.Uint8> lpData,
  ) {
    return (_GetEnhMetaFileBits ??=
        _dylib.lookupFunction<_c_GetEnhMetaFileBits, _dart_GetEnhMetaFileBits>(
            'GetEnhMetaFileBits'))(
      hEMF,
      nSize,
      lpData,
    );
  }

  _dart_GetEnhMetaFileBits? _GetEnhMetaFileBits;

  int GetEnhMetaFileDescriptionA(
    ffi.Pointer<HENHMETAFILE__> hemf,
    int cchBuffer,
    ffi.Pointer<ffi.Int8> lpDescription,
  ) {
    return (_GetEnhMetaFileDescriptionA ??= _dylib.lookupFunction<
        _c_GetEnhMetaFileDescriptionA,
        _dart_GetEnhMetaFileDescriptionA>('GetEnhMetaFileDescriptionA'))(
      hemf,
      cchBuffer,
      lpDescription,
    );
  }

  _dart_GetEnhMetaFileDescriptionA? _GetEnhMetaFileDescriptionA;

  int GetEnhMetaFileDescriptionW(
    ffi.Pointer<HENHMETAFILE__> hemf,
    int cchBuffer,
    ffi.Pointer<ffi.Uint16> lpDescription,
  ) {
    return (_GetEnhMetaFileDescriptionW ??= _dylib.lookupFunction<
        _c_GetEnhMetaFileDescriptionW,
        _dart_GetEnhMetaFileDescriptionW>('GetEnhMetaFileDescriptionW'))(
      hemf,
      cchBuffer,
      lpDescription,
    );
  }

  _dart_GetEnhMetaFileDescriptionW? _GetEnhMetaFileDescriptionW;

  int GetEnhMetaFileHeader(
    ffi.Pointer<HENHMETAFILE__> hemf,
    int nSize,
    ffi.Pointer<LPENHMETAHEADER> lpEnhMetaHeader,
  ) {
    return (_GetEnhMetaFileHeader ??= _dylib.lookupFunction<
        _c_GetEnhMetaFileHeader,
        _dart_GetEnhMetaFileHeader>('GetEnhMetaFileHeader'))(
      hemf,
      nSize,
      lpEnhMetaHeader,
    );
  }

  _dart_GetEnhMetaFileHeader? _GetEnhMetaFileHeader;

  int GetEnhMetaFilePaletteEntries(
    ffi.Pointer<HENHMETAFILE__> hemf,
    int nNumEntries,
    ffi.Pointer<LPPALETTEENTRY> lpPaletteEntries,
  ) {
    return (_GetEnhMetaFilePaletteEntries ??= _dylib.lookupFunction<
        _c_GetEnhMetaFilePaletteEntries,
        _dart_GetEnhMetaFilePaletteEntries>('GetEnhMetaFilePaletteEntries'))(
      hemf,
      nNumEntries,
      lpPaletteEntries,
    );
  }

  _dart_GetEnhMetaFilePaletteEntries? _GetEnhMetaFilePaletteEntries;

  int GetEnhMetaFilePixelFormat(
    ffi.Pointer<HENHMETAFILE__> hemf,
    int cbBuffer,
    ffi.Pointer<LPPIXELFORMATDESCRIPTOR> ppfd,
  ) {
    return (_GetEnhMetaFilePixelFormat ??= _dylib.lookupFunction<
        _c_GetEnhMetaFilePixelFormat,
        _dart_GetEnhMetaFilePixelFormat>('GetEnhMetaFilePixelFormat'))(
      hemf,
      cbBuffer,
      ppfd,
    );
  }

  _dart_GetEnhMetaFilePixelFormat? _GetEnhMetaFilePixelFormat;

  int GetWinMetaFileBits(
    ffi.Pointer<HENHMETAFILE__> hemf,
    int cbData16,
    ffi.Pointer<ffi.Uint8> pData16,
    int iMapMode,
    ffi.Pointer<HDC__> hdcRef,
  ) {
    return (_GetWinMetaFileBits ??=
        _dylib.lookupFunction<_c_GetWinMetaFileBits, _dart_GetWinMetaFileBits>(
            'GetWinMetaFileBits'))(
      hemf,
      cbData16,
      pData16,
      iMapMode,
      hdcRef,
    );
  }

  _dart_GetWinMetaFileBits? _GetWinMetaFileBits;

  int PlayEnhMetaFile(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<HENHMETAFILE__> hmf,
    ffi.Pointer<LPRECT> lprect,
  ) {
    return (_PlayEnhMetaFile ??=
        _dylib.lookupFunction<_c_PlayEnhMetaFile, _dart_PlayEnhMetaFile>(
            'PlayEnhMetaFile'))(
      hdc,
      hmf,
      lprect,
    );
  }

  _dart_PlayEnhMetaFile? _PlayEnhMetaFile;

  int PlayEnhMetaFileRecord(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPHANDLETABLE> pht,
    ffi.Pointer<LPENHMETARECORD> pmr,
    int cht,
  ) {
    return (_PlayEnhMetaFileRecord ??= _dylib.lookupFunction<
        _c_PlayEnhMetaFileRecord,
        _dart_PlayEnhMetaFileRecord>('PlayEnhMetaFileRecord'))(
      hdc,
      pht,
      pmr,
      cht,
    );
  }

  _dart_PlayEnhMetaFileRecord? _PlayEnhMetaFileRecord;

  ffi.Pointer<HENHMETAFILE__> SetEnhMetaFileBits(
    int nSize,
    ffi.Pointer<ffi.Uint8> pb,
  ) {
    return (_SetEnhMetaFileBits ??=
        _dylib.lookupFunction<_c_SetEnhMetaFileBits, _dart_SetEnhMetaFileBits>(
            'SetEnhMetaFileBits'))(
      nSize,
      pb,
    );
  }

  _dart_SetEnhMetaFileBits? _SetEnhMetaFileBits;

  ffi.Pointer<HENHMETAFILE__> SetWinMetaFileBits(
    int nSize,
    ffi.Pointer<ffi.Uint8> lpMeta16Data,
    ffi.Pointer<HDC__> hdcRef,
    ffi.Pointer<LPMETAFILEPICT> lpMFP,
  ) {
    return (_SetWinMetaFileBits ??=
        _dylib.lookupFunction<_c_SetWinMetaFileBits, _dart_SetWinMetaFileBits>(
            'SetWinMetaFileBits'))(
      nSize,
      lpMeta16Data,
      hdcRef,
      lpMFP,
    );
  }

  _dart_SetWinMetaFileBits? _SetWinMetaFileBits;

  int GdiComment(
    ffi.Pointer<HDC__> hdc,
    int nSize,
    ffi.Pointer<ffi.Uint8> lpData,
  ) {
    return (_GdiComment ??=
        _dylib.lookupFunction<_c_GdiComment, _dart_GdiComment>('GdiComment'))(
      hdc,
      nSize,
      lpData,
    );
  }

  _dart_GdiComment? _GdiComment;

  int GetTextMetricsA(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPTEXTMETRICA> lptm,
  ) {
    return (_GetTextMetricsA ??=
        _dylib.lookupFunction<_c_GetTextMetricsA, _dart_GetTextMetricsA>(
            'GetTextMetricsA'))(
      hdc,
      lptm,
    );
  }

  _dart_GetTextMetricsA? _GetTextMetricsA;

  int GetTextMetricsW(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPTEXTMETRICW> lptm,
  ) {
    return (_GetTextMetricsW ??=
        _dylib.lookupFunction<_c_GetTextMetricsW, _dart_GetTextMetricsW>(
            'GetTextMetricsW'))(
      hdc,
      lptm,
    );
  }

  _dart_GetTextMetricsW? _GetTextMetricsW;

  int AngleArc(
    ffi.Pointer<HDC__> hdc,
    int x,
    int y,
    int r,
    double StartAngle,
    double SweepAngle,
  ) {
    return (_AngleArc ??=
        _dylib.lookupFunction<_c_AngleArc, _dart_AngleArc>('AngleArc'))(
      hdc,
      x,
      y,
      r,
      StartAngle,
      SweepAngle,
    );
  }

  _dart_AngleArc? _AngleArc;

  int PolyPolyline(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPPOINT> apt,
    ffi.Pointer<ffi.Uint64> asz,
    int csz,
  ) {
    return (_PolyPolyline ??= _dylib
        .lookupFunction<_c_PolyPolyline, _dart_PolyPolyline>('PolyPolyline'))(
      hdc,
      apt,
      asz,
      csz,
    );
  }

  _dart_PolyPolyline? _PolyPolyline;

  int GetWorldTransform(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPXFORM> lpxf,
  ) {
    return (_GetWorldTransform ??=
        _dylib.lookupFunction<_c_GetWorldTransform, _dart_GetWorldTransform>(
            'GetWorldTransform'))(
      hdc,
      lpxf,
    );
  }

  _dart_GetWorldTransform? _GetWorldTransform;

  int SetWorldTransform(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPXFORM> lpxf,
  ) {
    return (_SetWorldTransform ??=
        _dylib.lookupFunction<_c_SetWorldTransform, _dart_SetWorldTransform>(
            'SetWorldTransform'))(
      hdc,
      lpxf,
    );
  }

  _dart_SetWorldTransform? _SetWorldTransform;

  int ModifyWorldTransform(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPXFORM> lpxf,
    int mode,
  ) {
    return (_ModifyWorldTransform ??= _dylib.lookupFunction<
        _c_ModifyWorldTransform,
        _dart_ModifyWorldTransform>('ModifyWorldTransform'))(
      hdc,
      lpxf,
      mode,
    );
  }

  _dart_ModifyWorldTransform? _ModifyWorldTransform;

  int CombineTransform(
    ffi.Pointer<LPXFORM> lpxfOut,
    ffi.Pointer<LPXFORM> lpxf1,
    ffi.Pointer<LPXFORM> lpxf2,
  ) {
    return (_CombineTransform ??=
        _dylib.lookupFunction<_c_CombineTransform, _dart_CombineTransform>(
            'CombineTransform'))(
      lpxfOut,
      lpxf1,
      lpxf2,
    );
  }

  _dart_CombineTransform? _CombineTransform;

  ffi.Pointer<HBITMAP__> CreateDIBSection(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<PBITMAPINFO> pbmi,
    int usage,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppvBits,
    ffi.Pointer<ffi.Void> hSection,
    int offset,
  ) {
    return (_CreateDIBSection ??=
        _dylib.lookupFunction<_c_CreateDIBSection, _dart_CreateDIBSection>(
            'CreateDIBSection'))(
      hdc,
      pbmi,
      usage,
      ppvBits,
      hSection,
      offset,
    );
  }

  _dart_CreateDIBSection? _CreateDIBSection;

  int GetDIBColorTable(
    ffi.Pointer<HDC__> hdc,
    int iStart,
    int cEntries,
    ffi.Pointer<RGBQUAD> prgbq,
  ) {
    return (_GetDIBColorTable ??=
        _dylib.lookupFunction<_c_GetDIBColorTable, _dart_GetDIBColorTable>(
            'GetDIBColorTable'))(
      hdc,
      iStart,
      cEntries,
      prgbq,
    );
  }

  _dart_GetDIBColorTable? _GetDIBColorTable;

  int SetDIBColorTable(
    ffi.Pointer<HDC__> hdc,
    int iStart,
    int cEntries,
    ffi.Pointer<RGBQUAD> prgbq,
  ) {
    return (_SetDIBColorTable ??=
        _dylib.lookupFunction<_c_SetDIBColorTable, _dart_SetDIBColorTable>(
            'SetDIBColorTable'))(
      hdc,
      iStart,
      cEntries,
      prgbq,
    );
  }

  _dart_SetDIBColorTable? _SetDIBColorTable;

  int SetColorAdjustment(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPCOLORADJUSTMENT> lpca,
  ) {
    return (_SetColorAdjustment ??=
        _dylib.lookupFunction<_c_SetColorAdjustment, _dart_SetColorAdjustment>(
            'SetColorAdjustment'))(
      hdc,
      lpca,
    );
  }

  _dart_SetColorAdjustment? _SetColorAdjustment;

  int GetColorAdjustment(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPCOLORADJUSTMENT> lpca,
  ) {
    return (_GetColorAdjustment ??=
        _dylib.lookupFunction<_c_GetColorAdjustment, _dart_GetColorAdjustment>(
            'GetColorAdjustment'))(
      hdc,
      lpca,
    );
  }

  _dart_GetColorAdjustment? _GetColorAdjustment;

  ffi.Pointer<HPALETTE__> CreateHalftonePalette(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_CreateHalftonePalette ??= _dylib.lookupFunction<
        _c_CreateHalftonePalette,
        _dart_CreateHalftonePalette>('CreateHalftonePalette'))(
      hdc,
    );
  }

  _dart_CreateHalftonePalette? _CreateHalftonePalette;

  int StartDocA(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPDOCINFOA> lpdi,
  ) {
    return (_StartDocA ??=
        _dylib.lookupFunction<_c_StartDocA, _dart_StartDocA>('StartDocA'))(
      hdc,
      lpdi,
    );
  }

  _dart_StartDocA? _StartDocA;

  int StartDocW(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPDOCINFOW> lpdi,
  ) {
    return (_StartDocW ??=
        _dylib.lookupFunction<_c_StartDocW, _dart_StartDocW>('StartDocW'))(
      hdc,
      lpdi,
    );
  }

  _dart_StartDocW? _StartDocW;

  int EndDoc(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_EndDoc ??=
        _dylib.lookupFunction<_c_EndDoc, _dart_EndDoc>('EndDoc'))(
      hdc,
    );
  }

  _dart_EndDoc? _EndDoc;

  int StartPage(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_StartPage ??=
        _dylib.lookupFunction<_c_StartPage, _dart_StartPage>('StartPage'))(
      hdc,
    );
  }

  _dart_StartPage? _StartPage;

  int EndPage(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_EndPage ??=
        _dylib.lookupFunction<_c_EndPage, _dart_EndPage>('EndPage'))(
      hdc,
    );
  }

  _dart_EndPage? _EndPage;

  int AbortDoc(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_AbortDoc ??=
        _dylib.lookupFunction<_c_AbortDoc, _dart_AbortDoc>('AbortDoc'))(
      hdc,
    );
  }

  _dart_AbortDoc? _AbortDoc;

  int SetAbortProc(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<ffi.NativeFunction<ABORTPROC>> proc,
  ) {
    return (_SetAbortProc ??= _dylib
        .lookupFunction<_c_SetAbortProc, _dart_SetAbortProc>('SetAbortProc'))(
      hdc,
      proc,
    );
  }

  _dart_SetAbortProc? _SetAbortProc;

  int AbortPath(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_AbortPath ??=
        _dylib.lookupFunction<_c_AbortPath, _dart_AbortPath>('AbortPath'))(
      hdc,
    );
  }

  _dart_AbortPath? _AbortPath;

  int ArcTo(
    ffi.Pointer<HDC__> hdc,
    int left,
    int top,
    int right,
    int bottom,
    int xr1,
    int yr1,
    int xr2,
    int yr2,
  ) {
    return (_ArcTo ??= _dylib.lookupFunction<_c_ArcTo, _dart_ArcTo>('ArcTo'))(
      hdc,
      left,
      top,
      right,
      bottom,
      xr1,
      yr1,
      xr2,
      yr2,
    );
  }

  _dart_ArcTo? _ArcTo;

  int BeginPath(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_BeginPath ??=
        _dylib.lookupFunction<_c_BeginPath, _dart_BeginPath>('BeginPath'))(
      hdc,
    );
  }

  _dart_BeginPath? _BeginPath;

  int CloseFigure(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_CloseFigure ??= _dylib
        .lookupFunction<_c_CloseFigure, _dart_CloseFigure>('CloseFigure'))(
      hdc,
    );
  }

  _dart_CloseFigure? _CloseFigure;

  int EndPath(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_EndPath ??=
        _dylib.lookupFunction<_c_EndPath, _dart_EndPath>('EndPath'))(
      hdc,
    );
  }

  _dart_EndPath? _EndPath;

  int FillPath(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_FillPath ??=
        _dylib.lookupFunction<_c_FillPath, _dart_FillPath>('FillPath'))(
      hdc,
    );
  }

  _dart_FillPath? _FillPath;

  int FlattenPath(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_FlattenPath ??= _dylib
        .lookupFunction<_c_FlattenPath, _dart_FlattenPath>('FlattenPath'))(
      hdc,
    );
  }

  _dart_FlattenPath? _FlattenPath;

  int GetPath(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPPOINT> apt,
    ffi.Pointer<ffi.Uint8> aj,
    int cpt,
  ) {
    return (_GetPath ??=
        _dylib.lookupFunction<_c_GetPath, _dart_GetPath>('GetPath'))(
      hdc,
      apt,
      aj,
      cpt,
    );
  }

  _dart_GetPath? _GetPath;

  ffi.Pointer<HRGN__> PathToRegion(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_PathToRegion ??= _dylib
        .lookupFunction<_c_PathToRegion, _dart_PathToRegion>('PathToRegion'))(
      hdc,
    );
  }

  _dart_PathToRegion? _PathToRegion;

  int PolyDraw(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPPOINT> apt,
    ffi.Pointer<ffi.Uint8> aj,
    int cpt,
  ) {
    return (_PolyDraw ??=
        _dylib.lookupFunction<_c_PolyDraw, _dart_PolyDraw>('PolyDraw'))(
      hdc,
      apt,
      aj,
      cpt,
    );
  }

  _dart_PolyDraw? _PolyDraw;

  int SelectClipPath(
    ffi.Pointer<HDC__> hdc,
    int mode,
  ) {
    return (_SelectClipPath ??=
        _dylib.lookupFunction<_c_SelectClipPath, _dart_SelectClipPath>(
            'SelectClipPath'))(
      hdc,
      mode,
    );
  }

  _dart_SelectClipPath? _SelectClipPath;

  int SetArcDirection(
    ffi.Pointer<HDC__> hdc,
    int dir,
  ) {
    return (_SetArcDirection ??=
        _dylib.lookupFunction<_c_SetArcDirection, _dart_SetArcDirection>(
            'SetArcDirection'))(
      hdc,
      dir,
    );
  }

  _dart_SetArcDirection? _SetArcDirection;

  int SetMiterLimit(
    ffi.Pointer<HDC__> hdc,
    double limit,
    ffi.Pointer<ffi.Float> old,
  ) {
    return (_SetMiterLimit ??=
        _dylib.lookupFunction<_c_SetMiterLimit, _dart_SetMiterLimit>(
            'SetMiterLimit'))(
      hdc,
      limit,
      old,
    );
  }

  _dart_SetMiterLimit? _SetMiterLimit;

  int StrokeAndFillPath(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_StrokeAndFillPath ??=
        _dylib.lookupFunction<_c_StrokeAndFillPath, _dart_StrokeAndFillPath>(
            'StrokeAndFillPath'))(
      hdc,
    );
  }

  _dart_StrokeAndFillPath? _StrokeAndFillPath;

  int StrokePath(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_StrokePath ??=
        _dylib.lookupFunction<_c_StrokePath, _dart_StrokePath>('StrokePath'))(
      hdc,
    );
  }

  _dart_StrokePath? _StrokePath;

  int WidenPath(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_WidenPath ??=
        _dylib.lookupFunction<_c_WidenPath, _dart_WidenPath>('WidenPath'))(
      hdc,
    );
  }

  _dart_WidenPath? _WidenPath;

  ffi.Pointer<HPEN__> ExtCreatePen(
    int iPenStyle,
    int cWidth,
    ffi.Pointer<LPLOGBRUSH> plbrush,
    int cStyle,
    ffi.Pointer<ffi.Uint64> pstyle,
  ) {
    return (_ExtCreatePen ??= _dylib
        .lookupFunction<_c_ExtCreatePen, _dart_ExtCreatePen>('ExtCreatePen'))(
      iPenStyle,
      cWidth,
      plbrush,
      cStyle,
      pstyle,
    );
  }

  _dart_ExtCreatePen? _ExtCreatePen;

  int GetMiterLimit(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<ffi.Float> plimit,
  ) {
    return (_GetMiterLimit ??=
        _dylib.lookupFunction<_c_GetMiterLimit, _dart_GetMiterLimit>(
            'GetMiterLimit'))(
      hdc,
      plimit,
    );
  }

  _dart_GetMiterLimit? _GetMiterLimit;

  int GetArcDirection(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_GetArcDirection ??=
        _dylib.lookupFunction<_c_GetArcDirection, _dart_GetArcDirection>(
            'GetArcDirection'))(
      hdc,
    );
  }

  _dart_GetArcDirection? _GetArcDirection;

  int GetObjectA(
    ffi.Pointer<ffi.Void> h,
    int c,
    ffi.Pointer<ffi.Void> pv,
  ) {
    return (_GetObjectA ??=
        _dylib.lookupFunction<_c_GetObjectA, _dart_GetObjectA>('GetObjectA'))(
      h,
      c,
      pv,
    );
  }

  _dart_GetObjectA? _GetObjectA;

  int GetObjectW(
    ffi.Pointer<ffi.Void> h,
    int c,
    ffi.Pointer<ffi.Void> pv,
  ) {
    return (_GetObjectW ??=
        _dylib.lookupFunction<_c_GetObjectW, _dart_GetObjectW>('GetObjectW'))(
      h,
      c,
      pv,
    );
  }

  _dart_GetObjectW? _GetObjectW;

  int MoveToEx(
    ffi.Pointer<HDC__> hdc,
    int x,
    int y,
    ffi.Pointer<LPPOINT> lppt,
  ) {
    return (_MoveToEx ??=
        _dylib.lookupFunction<_c_MoveToEx, _dart_MoveToEx>('MoveToEx'))(
      hdc,
      x,
      y,
      lppt,
    );
  }

  _dart_MoveToEx? _MoveToEx;

  int TextOutA(
    ffi.Pointer<HDC__> hdc,
    int x,
    int y,
    ffi.Pointer<ffi.Int8> lpString,
    int c,
  ) {
    return (_TextOutA ??=
        _dylib.lookupFunction<_c_TextOutA, _dart_TextOutA>('TextOutA'))(
      hdc,
      x,
      y,
      lpString,
      c,
    );
  }

  _dart_TextOutA? _TextOutA;

  int TextOutW(
    ffi.Pointer<HDC__> hdc,
    int x,
    int y,
    ffi.Pointer<ffi.Uint16> lpString,
    int c,
  ) {
    return (_TextOutW ??=
        _dylib.lookupFunction<_c_TextOutW, _dart_TextOutW>('TextOutW'))(
      hdc,
      x,
      y,
      lpString,
      c,
    );
  }

  _dart_TextOutW? _TextOutW;

  int ExtTextOutA(
    ffi.Pointer<HDC__> hdc,
    int x,
    int y,
    int options,
    ffi.Pointer<LPRECT> lprect,
    ffi.Pointer<ffi.Int8> lpString,
    int c,
    ffi.Pointer<ffi.Int32> lpDx,
  ) {
    return (_ExtTextOutA ??= _dylib
        .lookupFunction<_c_ExtTextOutA, _dart_ExtTextOutA>('ExtTextOutA'))(
      hdc,
      x,
      y,
      options,
      lprect,
      lpString,
      c,
      lpDx,
    );
  }

  _dart_ExtTextOutA? _ExtTextOutA;

  int ExtTextOutW(
    ffi.Pointer<HDC__> hdc,
    int x,
    int y,
    int options,
    ffi.Pointer<LPRECT> lprect,
    ffi.Pointer<ffi.Uint16> lpString,
    int c,
    ffi.Pointer<ffi.Int32> lpDx,
  ) {
    return (_ExtTextOutW ??= _dylib
        .lookupFunction<_c_ExtTextOutW, _dart_ExtTextOutW>('ExtTextOutW'))(
      hdc,
      x,
      y,
      options,
      lprect,
      lpString,
      c,
      lpDx,
    );
  }

  _dart_ExtTextOutW? _ExtTextOutW;

  int PolyTextOutA(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPPOLYTEXTA> ppt,
    int nstrings,
  ) {
    return (_PolyTextOutA ??= _dylib
        .lookupFunction<_c_PolyTextOutA, _dart_PolyTextOutA>('PolyTextOutA'))(
      hdc,
      ppt,
      nstrings,
    );
  }

  _dart_PolyTextOutA? _PolyTextOutA;

  int PolyTextOutW(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPPOLYTEXTW> ppt,
    int nstrings,
  ) {
    return (_PolyTextOutW ??= _dylib
        .lookupFunction<_c_PolyTextOutW, _dart_PolyTextOutW>('PolyTextOutW'))(
      hdc,
      ppt,
      nstrings,
    );
  }

  _dart_PolyTextOutW? _PolyTextOutW;

  ffi.Pointer<HRGN__> CreatePolygonRgn(
    ffi.Pointer<LPPOINT> pptl,
    int cPoint,
    int iMode,
  ) {
    return (_CreatePolygonRgn ??=
        _dylib.lookupFunction<_c_CreatePolygonRgn, _dart_CreatePolygonRgn>(
            'CreatePolygonRgn'))(
      pptl,
      cPoint,
      iMode,
    );
  }

  _dart_CreatePolygonRgn? _CreatePolygonRgn;

  int DPtoLP(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPPOINT> lppt,
    int c,
  ) {
    return (_DPtoLP ??=
        _dylib.lookupFunction<_c_DPtoLP, _dart_DPtoLP>('DPtoLP'))(
      hdc,
      lppt,
      c,
    );
  }

  _dart_DPtoLP? _DPtoLP;

  int LPtoDP(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPPOINT> lppt,
    int c,
  ) {
    return (_LPtoDP ??=
        _dylib.lookupFunction<_c_LPtoDP, _dart_LPtoDP>('LPtoDP'))(
      hdc,
      lppt,
      c,
    );
  }

  _dart_LPtoDP? _LPtoDP;

  int Polygon(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPPOINT> apt,
    int cpt,
  ) {
    return (_Polygon ??=
        _dylib.lookupFunction<_c_Polygon, _dart_Polygon>('Polygon'))(
      hdc,
      apt,
      cpt,
    );
  }

  _dart_Polygon? _Polygon;

  int Polyline(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPPOINT> apt,
    int cpt,
  ) {
    return (_Polyline ??=
        _dylib.lookupFunction<_c_Polyline, _dart_Polyline>('Polyline'))(
      hdc,
      apt,
      cpt,
    );
  }

  _dart_Polyline? _Polyline;

  int PolyBezier(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPPOINT> apt,
    int cpt,
  ) {
    return (_PolyBezier ??=
        _dylib.lookupFunction<_c_PolyBezier, _dart_PolyBezier>('PolyBezier'))(
      hdc,
      apt,
      cpt,
    );
  }

  _dart_PolyBezier? _PolyBezier;

  int PolyBezierTo(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPPOINT> apt,
    int cpt,
  ) {
    return (_PolyBezierTo ??= _dylib
        .lookupFunction<_c_PolyBezierTo, _dart_PolyBezierTo>('PolyBezierTo'))(
      hdc,
      apt,
      cpt,
    );
  }

  _dart_PolyBezierTo? _PolyBezierTo;

  int PolylineTo(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPPOINT> apt,
    int cpt,
  ) {
    return (_PolylineTo ??=
        _dylib.lookupFunction<_c_PolylineTo, _dart_PolylineTo>('PolylineTo'))(
      hdc,
      apt,
      cpt,
    );
  }

  _dart_PolylineTo? _PolylineTo;

  int SetViewportExtEx(
    ffi.Pointer<HDC__> hdc,
    int x,
    int y,
    ffi.Pointer<LPSIZE> lpsz,
  ) {
    return (_SetViewportExtEx ??=
        _dylib.lookupFunction<_c_SetViewportExtEx, _dart_SetViewportExtEx>(
            'SetViewportExtEx'))(
      hdc,
      x,
      y,
      lpsz,
    );
  }

  _dart_SetViewportExtEx? _SetViewportExtEx;

  int SetViewportOrgEx(
    ffi.Pointer<HDC__> hdc,
    int x,
    int y,
    ffi.Pointer<LPPOINT> lppt,
  ) {
    return (_SetViewportOrgEx ??=
        _dylib.lookupFunction<_c_SetViewportOrgEx, _dart_SetViewportOrgEx>(
            'SetViewportOrgEx'))(
      hdc,
      x,
      y,
      lppt,
    );
  }

  _dart_SetViewportOrgEx? _SetViewportOrgEx;

  int SetWindowExtEx(
    ffi.Pointer<HDC__> hdc,
    int x,
    int y,
    ffi.Pointer<LPSIZE> lpsz,
  ) {
    return (_SetWindowExtEx ??=
        _dylib.lookupFunction<_c_SetWindowExtEx, _dart_SetWindowExtEx>(
            'SetWindowExtEx'))(
      hdc,
      x,
      y,
      lpsz,
    );
  }

  _dart_SetWindowExtEx? _SetWindowExtEx;

  int SetWindowOrgEx(
    ffi.Pointer<HDC__> hdc,
    int x,
    int y,
    ffi.Pointer<LPPOINT> lppt,
  ) {
    return (_SetWindowOrgEx ??=
        _dylib.lookupFunction<_c_SetWindowOrgEx, _dart_SetWindowOrgEx>(
            'SetWindowOrgEx'))(
      hdc,
      x,
      y,
      lppt,
    );
  }

  _dart_SetWindowOrgEx? _SetWindowOrgEx;

  int OffsetViewportOrgEx(
    ffi.Pointer<HDC__> hdc,
    int x,
    int y,
    ffi.Pointer<LPPOINT> lppt,
  ) {
    return (_OffsetViewportOrgEx ??= _dylib.lookupFunction<
        _c_OffsetViewportOrgEx,
        _dart_OffsetViewportOrgEx>('OffsetViewportOrgEx'))(
      hdc,
      x,
      y,
      lppt,
    );
  }

  _dart_OffsetViewportOrgEx? _OffsetViewportOrgEx;

  int OffsetWindowOrgEx(
    ffi.Pointer<HDC__> hdc,
    int x,
    int y,
    ffi.Pointer<LPPOINT> lppt,
  ) {
    return (_OffsetWindowOrgEx ??=
        _dylib.lookupFunction<_c_OffsetWindowOrgEx, _dart_OffsetWindowOrgEx>(
            'OffsetWindowOrgEx'))(
      hdc,
      x,
      y,
      lppt,
    );
  }

  _dart_OffsetWindowOrgEx? _OffsetWindowOrgEx;

  int ScaleViewportExtEx(
    ffi.Pointer<HDC__> hdc,
    int xn,
    int dx,
    int yn,
    int yd,
    ffi.Pointer<LPSIZE> lpsz,
  ) {
    return (_ScaleViewportExtEx ??=
        _dylib.lookupFunction<_c_ScaleViewportExtEx, _dart_ScaleViewportExtEx>(
            'ScaleViewportExtEx'))(
      hdc,
      xn,
      dx,
      yn,
      yd,
      lpsz,
    );
  }

  _dart_ScaleViewportExtEx? _ScaleViewportExtEx;

  int ScaleWindowExtEx(
    ffi.Pointer<HDC__> hdc,
    int xn,
    int xd,
    int yn,
    int yd,
    ffi.Pointer<LPSIZE> lpsz,
  ) {
    return (_ScaleWindowExtEx ??=
        _dylib.lookupFunction<_c_ScaleWindowExtEx, _dart_ScaleWindowExtEx>(
            'ScaleWindowExtEx'))(
      hdc,
      xn,
      xd,
      yn,
      yd,
      lpsz,
    );
  }

  _dart_ScaleWindowExtEx? _ScaleWindowExtEx;

  int SetBitmapDimensionEx(
    ffi.Pointer<HBITMAP__> hbm,
    int w,
    int h,
    ffi.Pointer<LPSIZE> lpsz,
  ) {
    return (_SetBitmapDimensionEx ??= _dylib.lookupFunction<
        _c_SetBitmapDimensionEx,
        _dart_SetBitmapDimensionEx>('SetBitmapDimensionEx'))(
      hbm,
      w,
      h,
      lpsz,
    );
  }

  _dart_SetBitmapDimensionEx? _SetBitmapDimensionEx;

  int SetBrushOrgEx(
    ffi.Pointer<HDC__> hdc,
    int x,
    int y,
    ffi.Pointer<LPPOINT> lppt,
  ) {
    return (_SetBrushOrgEx ??=
        _dylib.lookupFunction<_c_SetBrushOrgEx, _dart_SetBrushOrgEx>(
            'SetBrushOrgEx'))(
      hdc,
      x,
      y,
      lppt,
    );
  }

  _dart_SetBrushOrgEx? _SetBrushOrgEx;

  int GetTextFaceA(
    ffi.Pointer<HDC__> hdc,
    int c,
    ffi.Pointer<ffi.Int8> lpName,
  ) {
    return (_GetTextFaceA ??= _dylib
        .lookupFunction<_c_GetTextFaceA, _dart_GetTextFaceA>('GetTextFaceA'))(
      hdc,
      c,
      lpName,
    );
  }

  _dart_GetTextFaceA? _GetTextFaceA;

  int GetTextFaceW(
    ffi.Pointer<HDC__> hdc,
    int c,
    ffi.Pointer<ffi.Uint16> lpName,
  ) {
    return (_GetTextFaceW ??= _dylib
        .lookupFunction<_c_GetTextFaceW, _dart_GetTextFaceW>('GetTextFaceW'))(
      hdc,
      c,
      lpName,
    );
  }

  _dart_GetTextFaceW? _GetTextFaceW;

  int GetKerningPairsA(
    ffi.Pointer<HDC__> hdc,
    int nPairs,
    ffi.Pointer<LPKERNINGPAIR> lpKernPair,
  ) {
    return (_GetKerningPairsA ??=
        _dylib.lookupFunction<_c_GetKerningPairsA, _dart_GetKerningPairsA>(
            'GetKerningPairsA'))(
      hdc,
      nPairs,
      lpKernPair,
    );
  }

  _dart_GetKerningPairsA? _GetKerningPairsA;

  int GetKerningPairsW(
    ffi.Pointer<HDC__> hdc,
    int nPairs,
    ffi.Pointer<LPKERNINGPAIR> lpKernPair,
  ) {
    return (_GetKerningPairsW ??=
        _dylib.lookupFunction<_c_GetKerningPairsW, _dart_GetKerningPairsW>(
            'GetKerningPairsW'))(
      hdc,
      nPairs,
      lpKernPair,
    );
  }

  _dart_GetKerningPairsW? _GetKerningPairsW;

  int GetDCOrgEx(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPPOINT> lppt,
  ) {
    return (_GetDCOrgEx ??=
        _dylib.lookupFunction<_c_GetDCOrgEx, _dart_GetDCOrgEx>('GetDCOrgEx'))(
      hdc,
      lppt,
    );
  }

  _dart_GetDCOrgEx? _GetDCOrgEx;

  int FixBrushOrgEx(
    ffi.Pointer<HDC__> hdc,
    int x,
    int y,
    ffi.Pointer<LPPOINT> ptl,
  ) {
    return (_FixBrushOrgEx ??=
        _dylib.lookupFunction<_c_FixBrushOrgEx, _dart_FixBrushOrgEx>(
            'FixBrushOrgEx'))(
      hdc,
      x,
      y,
      ptl,
    );
  }

  _dart_FixBrushOrgEx? _FixBrushOrgEx;

  int UnrealizeObject(
    ffi.Pointer<ffi.Void> h,
  ) {
    return (_UnrealizeObject ??=
        _dylib.lookupFunction<_c_UnrealizeObject, _dart_UnrealizeObject>(
            'UnrealizeObject'))(
      h,
    );
  }

  _dart_UnrealizeObject? _UnrealizeObject;

  int GdiFlush() {
    return (_GdiFlush ??=
        _dylib.lookupFunction<_c_GdiFlush, _dart_GdiFlush>('GdiFlush'))();
  }

  _dart_GdiFlush? _GdiFlush;

  int GdiSetBatchLimit(
    int dw,
  ) {
    return (_GdiSetBatchLimit ??=
        _dylib.lookupFunction<_c_GdiSetBatchLimit, _dart_GdiSetBatchLimit>(
            'GdiSetBatchLimit'))(
      dw,
    );
  }

  _dart_GdiSetBatchLimit? _GdiSetBatchLimit;

  int GdiGetBatchLimit() {
    return (_GdiGetBatchLimit ??=
        _dylib.lookupFunction<_c_GdiGetBatchLimit, _dart_GdiGetBatchLimit>(
            'GdiGetBatchLimit'))();
  }

  _dart_GdiGetBatchLimit? _GdiGetBatchLimit;

  int SetICMMode(
    ffi.Pointer<HDC__> hdc,
    int mode,
  ) {
    return (_SetICMMode ??=
        _dylib.lookupFunction<_c_SetICMMode, _dart_SetICMMode>('SetICMMode'))(
      hdc,
      mode,
    );
  }

  _dart_SetICMMode? _SetICMMode;

  int CheckColorsInGamut(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPRGBTRIPLE> lpRGBTriple,
    ffi.Pointer<ffi.Void> dlpBuffer,
    int nCount,
  ) {
    return (_CheckColorsInGamut ??=
        _dylib.lookupFunction<_c_CheckColorsInGamut, _dart_CheckColorsInGamut>(
            'CheckColorsInGamut'))(
      hdc,
      lpRGBTriple,
      dlpBuffer,
      nCount,
    );
  }

  _dart_CheckColorsInGamut? _CheckColorsInGamut;

  ffi.Pointer<HCOLORSPACE__> GetColorSpace(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_GetColorSpace ??=
        _dylib.lookupFunction<_c_GetColorSpace, _dart_GetColorSpace>(
            'GetColorSpace'))(
      hdc,
    );
  }

  _dart_GetColorSpace? _GetColorSpace;

  int GetLogColorSpaceA(
    ffi.Pointer<HCOLORSPACE__> hColorSpace,
    ffi.Pointer<LPLOGCOLORSPACEA> lpBuffer,
    int nSize,
  ) {
    return (_GetLogColorSpaceA ??=
        _dylib.lookupFunction<_c_GetLogColorSpaceA, _dart_GetLogColorSpaceA>(
            'GetLogColorSpaceA'))(
      hColorSpace,
      lpBuffer,
      nSize,
    );
  }

  _dart_GetLogColorSpaceA? _GetLogColorSpaceA;

  int GetLogColorSpaceW(
    ffi.Pointer<HCOLORSPACE__> hColorSpace,
    ffi.Pointer<LPLOGCOLORSPACEW> lpBuffer,
    int nSize,
  ) {
    return (_GetLogColorSpaceW ??=
        _dylib.lookupFunction<_c_GetLogColorSpaceW, _dart_GetLogColorSpaceW>(
            'GetLogColorSpaceW'))(
      hColorSpace,
      lpBuffer,
      nSize,
    );
  }

  _dart_GetLogColorSpaceW? _GetLogColorSpaceW;

  ffi.Pointer<HCOLORSPACE__> CreateColorSpaceA(
    ffi.Pointer<LPLOGCOLORSPACEA> lplcs,
  ) {
    return (_CreateColorSpaceA ??=
        _dylib.lookupFunction<_c_CreateColorSpaceA, _dart_CreateColorSpaceA>(
            'CreateColorSpaceA'))(
      lplcs,
    );
  }

  _dart_CreateColorSpaceA? _CreateColorSpaceA;

  ffi.Pointer<HCOLORSPACE__> CreateColorSpaceW(
    ffi.Pointer<LPLOGCOLORSPACEW> lplcs,
  ) {
    return (_CreateColorSpaceW ??=
        _dylib.lookupFunction<_c_CreateColorSpaceW, _dart_CreateColorSpaceW>(
            'CreateColorSpaceW'))(
      lplcs,
    );
  }

  _dart_CreateColorSpaceW? _CreateColorSpaceW;

  ffi.Pointer<HCOLORSPACE__> SetColorSpace(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<HCOLORSPACE__> hcs,
  ) {
    return (_SetColorSpace ??=
        _dylib.lookupFunction<_c_SetColorSpace, _dart_SetColorSpace>(
            'SetColorSpace'))(
      hdc,
      hcs,
    );
  }

  _dart_SetColorSpace? _SetColorSpace;

  int DeleteColorSpace(
    ffi.Pointer<HCOLORSPACE__> hcs,
  ) {
    return (_DeleteColorSpace ??=
        _dylib.lookupFunction<_c_DeleteColorSpace, _dart_DeleteColorSpace>(
            'DeleteColorSpace'))(
      hcs,
    );
  }

  _dart_DeleteColorSpace? _DeleteColorSpace;

  int GetICMProfileA(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<ffi.Uint64> pBufSize,
    ffi.Pointer<ffi.Int8> pszFilename,
  ) {
    return (_GetICMProfileA ??=
        _dylib.lookupFunction<_c_GetICMProfileA, _dart_GetICMProfileA>(
            'GetICMProfileA'))(
      hdc,
      pBufSize,
      pszFilename,
    );
  }

  _dart_GetICMProfileA? _GetICMProfileA;

  int GetICMProfileW(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<ffi.Uint64> pBufSize,
    ffi.Pointer<ffi.Uint16> pszFilename,
  ) {
    return (_GetICMProfileW ??=
        _dylib.lookupFunction<_c_GetICMProfileW, _dart_GetICMProfileW>(
            'GetICMProfileW'))(
      hdc,
      pBufSize,
      pszFilename,
    );
  }

  _dart_GetICMProfileW? _GetICMProfileW;

  int SetICMProfileA(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<ffi.Int8> lpFileName,
  ) {
    return (_SetICMProfileA ??=
        _dylib.lookupFunction<_c_SetICMProfileA, _dart_SetICMProfileA>(
            'SetICMProfileA'))(
      hdc,
      lpFileName,
    );
  }

  _dart_SetICMProfileA? _SetICMProfileA;

  int SetICMProfileW(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<ffi.Uint16> lpFileName,
  ) {
    return (_SetICMProfileW ??=
        _dylib.lookupFunction<_c_SetICMProfileW, _dart_SetICMProfileW>(
            'SetICMProfileW'))(
      hdc,
      lpFileName,
    );
  }

  _dart_SetICMProfileW? _SetICMProfileW;

  int GetDeviceGammaRamp(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<ffi.Void> lpRamp,
  ) {
    return (_GetDeviceGammaRamp ??=
        _dylib.lookupFunction<_c_GetDeviceGammaRamp, _dart_GetDeviceGammaRamp>(
            'GetDeviceGammaRamp'))(
      hdc,
      lpRamp,
    );
  }

  _dart_GetDeviceGammaRamp? _GetDeviceGammaRamp;

  int SetDeviceGammaRamp(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<ffi.Void> lpRamp,
  ) {
    return (_SetDeviceGammaRamp ??=
        _dylib.lookupFunction<_c_SetDeviceGammaRamp, _dart_SetDeviceGammaRamp>(
            'SetDeviceGammaRamp'))(
      hdc,
      lpRamp,
    );
  }

  _dart_SetDeviceGammaRamp? _SetDeviceGammaRamp;

  int ColorMatchToTarget(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<HDC__> hdcTarget,
    int action,
  ) {
    return (_ColorMatchToTarget ??=
        _dylib.lookupFunction<_c_ColorMatchToTarget, _dart_ColorMatchToTarget>(
            'ColorMatchToTarget'))(
      hdc,
      hdcTarget,
      action,
    );
  }

  _dart_ColorMatchToTarget? _ColorMatchToTarget;

  int EnumICMProfilesA(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<ffi.NativeFunction<ICMENUMPROCA>> proc,
    int param,
  ) {
    return (_EnumICMProfilesA ??=
        _dylib.lookupFunction<_c_EnumICMProfilesA, _dart_EnumICMProfilesA>(
            'EnumICMProfilesA'))(
      hdc,
      proc,
      param,
    );
  }

  _dart_EnumICMProfilesA? _EnumICMProfilesA;

  int EnumICMProfilesW(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<ffi.NativeFunction<ICMENUMPROCW>> proc,
    int param,
  ) {
    return (_EnumICMProfilesW ??=
        _dylib.lookupFunction<_c_EnumICMProfilesW, _dart_EnumICMProfilesW>(
            'EnumICMProfilesW'))(
      hdc,
      proc,
      param,
    );
  }

  _dart_EnumICMProfilesW? _EnumICMProfilesW;

  int UpdateICMRegKeyA(
    int reserved,
    ffi.Pointer<ffi.Int8> lpszCMID,
    ffi.Pointer<ffi.Int8> lpszFileName,
    int command,
  ) {
    return (_UpdateICMRegKeyA ??=
        _dylib.lookupFunction<_c_UpdateICMRegKeyA, _dart_UpdateICMRegKeyA>(
            'UpdateICMRegKeyA'))(
      reserved,
      lpszCMID,
      lpszFileName,
      command,
    );
  }

  _dart_UpdateICMRegKeyA? _UpdateICMRegKeyA;

  int UpdateICMRegKeyW(
    int reserved,
    ffi.Pointer<ffi.Uint16> lpszCMID,
    ffi.Pointer<ffi.Uint16> lpszFileName,
    int command,
  ) {
    return (_UpdateICMRegKeyW ??=
        _dylib.lookupFunction<_c_UpdateICMRegKeyW, _dart_UpdateICMRegKeyW>(
            'UpdateICMRegKeyW'))(
      reserved,
      lpszCMID,
      lpszFileName,
      command,
    );
  }

  _dart_UpdateICMRegKeyW? _UpdateICMRegKeyW;

  int ColorCorrectPalette(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<HPALETTE__> hPal,
    int deFirst,
    int num,
  ) {
    return (_ColorCorrectPalette ??= _dylib.lookupFunction<
        _c_ColorCorrectPalette,
        _dart_ColorCorrectPalette>('ColorCorrectPalette'))(
      hdc,
      hPal,
      deFirst,
      num,
    );
  }

  _dart_ColorCorrectPalette? _ColorCorrectPalette;

  int wglCopyContext(
    ffi.Pointer<HGLRC__> arg0,
    ffi.Pointer<HGLRC__> arg1,
    int arg2,
  ) {
    return (_wglCopyContext ??=
        _dylib.lookupFunction<_c_wglCopyContext, _dart_wglCopyContext>(
            'wglCopyContext'))(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_wglCopyContext? _wglCopyContext;

  ffi.Pointer<HGLRC__> wglCreateContext(
    ffi.Pointer<HDC__> arg0,
  ) {
    return (_wglCreateContext ??=
        _dylib.lookupFunction<_c_wglCreateContext, _dart_wglCreateContext>(
            'wglCreateContext'))(
      arg0,
    );
  }

  _dart_wglCreateContext? _wglCreateContext;

  ffi.Pointer<HGLRC__> wglCreateLayerContext(
    ffi.Pointer<HDC__> arg0,
    int arg1,
  ) {
    return (_wglCreateLayerContext ??= _dylib.lookupFunction<
        _c_wglCreateLayerContext,
        _dart_wglCreateLayerContext>('wglCreateLayerContext'))(
      arg0,
      arg1,
    );
  }

  _dart_wglCreateLayerContext? _wglCreateLayerContext;

  int wglDeleteContext(
    ffi.Pointer<HGLRC__> arg0,
  ) {
    return (_wglDeleteContext ??=
        _dylib.lookupFunction<_c_wglDeleteContext, _dart_wglDeleteContext>(
            'wglDeleteContext'))(
      arg0,
    );
  }

  _dart_wglDeleteContext? _wglDeleteContext;

  ffi.Pointer<HGLRC__> wglGetCurrentContext() {
    return (_wglGetCurrentContext ??= _dylib.lookupFunction<
        _c_wglGetCurrentContext,
        _dart_wglGetCurrentContext>('wglGetCurrentContext'))();
  }

  _dart_wglGetCurrentContext? _wglGetCurrentContext;

  ffi.Pointer<HDC__> wglGetCurrentDC() {
    return (_wglGetCurrentDC ??=
        _dylib.lookupFunction<_c_wglGetCurrentDC, _dart_wglGetCurrentDC>(
            'wglGetCurrentDC'))();
  }

  _dart_wglGetCurrentDC? _wglGetCurrentDC;

  ffi.Pointer<ffi.NativeFunction<PROC>> wglGetProcAddress(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return (_wglGetProcAddress ??=
        _dylib.lookupFunction<_c_wglGetProcAddress, _dart_wglGetProcAddress>(
            'wglGetProcAddress'))(
      arg0,
    );
  }

  _dart_wglGetProcAddress? _wglGetProcAddress;

  int wglMakeCurrent(
    ffi.Pointer<HDC__> arg0,
    ffi.Pointer<HGLRC__> arg1,
  ) {
    return (_wglMakeCurrent ??=
        _dylib.lookupFunction<_c_wglMakeCurrent, _dart_wglMakeCurrent>(
            'wglMakeCurrent'))(
      arg0,
      arg1,
    );
  }

  _dart_wglMakeCurrent? _wglMakeCurrent;

  int wglShareLists(
    ffi.Pointer<HGLRC__> arg0,
    ffi.Pointer<HGLRC__> arg1,
  ) {
    return (_wglShareLists ??=
        _dylib.lookupFunction<_c_wglShareLists, _dart_wglShareLists>(
            'wglShareLists'))(
      arg0,
      arg1,
    );
  }

  _dart_wglShareLists? _wglShareLists;

  int wglUseFontBitmapsA(
    ffi.Pointer<HDC__> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return (_wglUseFontBitmapsA ??=
        _dylib.lookupFunction<_c_wglUseFontBitmapsA, _dart_wglUseFontBitmapsA>(
            'wglUseFontBitmapsA'))(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_wglUseFontBitmapsA? _wglUseFontBitmapsA;

  int wglUseFontBitmapsW(
    ffi.Pointer<HDC__> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return (_wglUseFontBitmapsW ??=
        _dylib.lookupFunction<_c_wglUseFontBitmapsW, _dart_wglUseFontBitmapsW>(
            'wglUseFontBitmapsW'))(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_wglUseFontBitmapsW? _wglUseFontBitmapsW;

  int SwapBuffers(
    ffi.Pointer<HDC__> arg0,
  ) {
    return (_SwapBuffers ??= _dylib
        .lookupFunction<_c_SwapBuffers, _dart_SwapBuffers>('SwapBuffers'))(
      arg0,
    );
  }

  _dart_SwapBuffers? _SwapBuffers;

  int wglUseFontOutlinesA(
    ffi.Pointer<HDC__> arg0,
    int arg1,
    int arg2,
    int arg3,
    double arg4,
    double arg5,
    int arg6,
    ffi.Pointer<LPGLYPHMETRICSFLOAT> arg7,
  ) {
    return (_wglUseFontOutlinesA ??= _dylib.lookupFunction<
        _c_wglUseFontOutlinesA,
        _dart_wglUseFontOutlinesA>('wglUseFontOutlinesA'))(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  _dart_wglUseFontOutlinesA? _wglUseFontOutlinesA;

  int wglUseFontOutlinesW(
    ffi.Pointer<HDC__> arg0,
    int arg1,
    int arg2,
    int arg3,
    double arg4,
    double arg5,
    int arg6,
    ffi.Pointer<LPGLYPHMETRICSFLOAT> arg7,
  ) {
    return (_wglUseFontOutlinesW ??= _dylib.lookupFunction<
        _c_wglUseFontOutlinesW,
        _dart_wglUseFontOutlinesW>('wglUseFontOutlinesW'))(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  _dart_wglUseFontOutlinesW? _wglUseFontOutlinesW;

  int wglDescribeLayerPlane(
    ffi.Pointer<HDC__> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<LPLAYERPLANEDESCRIPTOR> arg4,
  ) {
    return (_wglDescribeLayerPlane ??= _dylib.lookupFunction<
        _c_wglDescribeLayerPlane,
        _dart_wglDescribeLayerPlane>('wglDescribeLayerPlane'))(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_wglDescribeLayerPlane? _wglDescribeLayerPlane;

  int wglSetLayerPaletteEntries(
    ffi.Pointer<HDC__> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Uint64> arg4,
  ) {
    return (_wglSetLayerPaletteEntries ??= _dylib.lookupFunction<
        _c_wglSetLayerPaletteEntries,
        _dart_wglSetLayerPaletteEntries>('wglSetLayerPaletteEntries'))(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_wglSetLayerPaletteEntries? _wglSetLayerPaletteEntries;

  int wglGetLayerPaletteEntries(
    ffi.Pointer<HDC__> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Uint64> arg4,
  ) {
    return (_wglGetLayerPaletteEntries ??= _dylib.lookupFunction<
        _c_wglGetLayerPaletteEntries,
        _dart_wglGetLayerPaletteEntries>('wglGetLayerPaletteEntries'))(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_wglGetLayerPaletteEntries? _wglGetLayerPaletteEntries;

  int wglRealizeLayerPalette(
    ffi.Pointer<HDC__> arg0,
    int arg1,
    int arg2,
  ) {
    return (_wglRealizeLayerPalette ??= _dylib.lookupFunction<
        _c_wglRealizeLayerPalette,
        _dart_wglRealizeLayerPalette>('wglRealizeLayerPalette'))(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_wglRealizeLayerPalette? _wglRealizeLayerPalette;

  int wglSwapLayerBuffers(
    ffi.Pointer<HDC__> arg0,
    int arg1,
  ) {
    return (_wglSwapLayerBuffers ??= _dylib.lookupFunction<
        _c_wglSwapLayerBuffers,
        _dart_wglSwapLayerBuffers>('wglSwapLayerBuffers'))(
      arg0,
      arg1,
    );
  }

  _dart_wglSwapLayerBuffers? _wglSwapLayerBuffers;

  int wglSwapMultipleBuffers(
    int arg0,
    ffi.Pointer<LPWGLSWAP> arg1,
  ) {
    return (_wglSwapMultipleBuffers ??= _dylib.lookupFunction<
        _c_wglSwapMultipleBuffers,
        _dart_wglSwapMultipleBuffers>('wglSwapMultipleBuffers'))(
      arg0,
      arg1,
    );
  }

  _dart_wglSwapMultipleBuffers? _wglSwapMultipleBuffers;

  int wvsprintfA(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Int8> arglist,
  ) {
    return (_wvsprintfA ??=
        _dylib.lookupFunction<_c_wvsprintfA, _dart_wvsprintfA>('wvsprintfA'))(
      arg0,
      arg1,
      arglist,
    );
  }

  _dart_wvsprintfA? _wvsprintfA;

  int wvsprintfW(
    ffi.Pointer<ffi.Uint16> arg0,
    ffi.Pointer<ffi.Uint16> arg1,
    ffi.Pointer<ffi.Int8> arglist,
  ) {
    return (_wvsprintfW ??=
        _dylib.lookupFunction<_c_wvsprintfW, _dart_wvsprintfW>('wvsprintfW'))(
      arg0,
      arg1,
      arglist,
    );
  }

  _dart_wvsprintfW? _wvsprintfW;

  int wsprintfA(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return (_wsprintfA ??=
        _dylib.lookupFunction<_c_wsprintfA, _dart_wsprintfA>('wsprintfA'))(
      arg0,
      arg1,
    );
  }

  _dart_wsprintfA? _wsprintfA;

  int wsprintfW(
    ffi.Pointer<ffi.Uint16> arg0,
    ffi.Pointer<ffi.Uint16> arg1,
  ) {
    return (_wsprintfW ??=
        _dylib.lookupFunction<_c_wsprintfW, _dart_wsprintfW>('wsprintfW'))(
      arg0,
      arg1,
    );
  }

  _dart_wsprintfW? _wsprintfW;

  ffi.Pointer<HKL__> LoadKeyboardLayoutA(
    ffi.Pointer<ffi.Int8> pwszKLID,
    int Flags,
  ) {
    return (_LoadKeyboardLayoutA ??= _dylib.lookupFunction<
        _c_LoadKeyboardLayoutA,
        _dart_LoadKeyboardLayoutA>('LoadKeyboardLayoutA'))(
      pwszKLID,
      Flags,
    );
  }

  _dart_LoadKeyboardLayoutA? _LoadKeyboardLayoutA;

  ffi.Pointer<HKL__> LoadKeyboardLayoutW(
    ffi.Pointer<ffi.Uint16> pwszKLID,
    int Flags,
  ) {
    return (_LoadKeyboardLayoutW ??= _dylib.lookupFunction<
        _c_LoadKeyboardLayoutW,
        _dart_LoadKeyboardLayoutW>('LoadKeyboardLayoutW'))(
      pwszKLID,
      Flags,
    );
  }

  _dart_LoadKeyboardLayoutW? _LoadKeyboardLayoutW;

  ffi.Pointer<HKL__> ActivateKeyboardLayout(
    ffi.Pointer<HKL__> hkl,
    int Flags,
  ) {
    return (_ActivateKeyboardLayout ??= _dylib.lookupFunction<
        _c_ActivateKeyboardLayout,
        _dart_ActivateKeyboardLayout>('ActivateKeyboardLayout'))(
      hkl,
      Flags,
    );
  }

  _dart_ActivateKeyboardLayout? _ActivateKeyboardLayout;

  int ToUnicodeEx(
    int wVirtKey,
    int wScanCode,
    ffi.Pointer<ffi.Uint8> lpKeyState,
    ffi.Pointer<ffi.Uint16> pwszBuff,
    int cchBuff,
    int wFlags,
    ffi.Pointer<HKL__> dwhkl,
  ) {
    return (_ToUnicodeEx ??= _dylib
        .lookupFunction<_c_ToUnicodeEx, _dart_ToUnicodeEx>('ToUnicodeEx'))(
      wVirtKey,
      wScanCode,
      lpKeyState,
      pwszBuff,
      cchBuff,
      wFlags,
      dwhkl,
    );
  }

  _dart_ToUnicodeEx? _ToUnicodeEx;

  int UnloadKeyboardLayout(
    ffi.Pointer<HKL__> hkl,
  ) {
    return (_UnloadKeyboardLayout ??= _dylib.lookupFunction<
        _c_UnloadKeyboardLayout,
        _dart_UnloadKeyboardLayout>('UnloadKeyboardLayout'))(
      hkl,
    );
  }

  _dart_UnloadKeyboardLayout? _UnloadKeyboardLayout;

  int GetKeyboardLayoutNameA(
    ffi.Pointer<ffi.Int8> pwszKLID,
  ) {
    return (_GetKeyboardLayoutNameA ??= _dylib.lookupFunction<
        _c_GetKeyboardLayoutNameA,
        _dart_GetKeyboardLayoutNameA>('GetKeyboardLayoutNameA'))(
      pwszKLID,
    );
  }

  _dart_GetKeyboardLayoutNameA? _GetKeyboardLayoutNameA;

  int GetKeyboardLayoutNameW(
    ffi.Pointer<ffi.Uint16> pwszKLID,
  ) {
    return (_GetKeyboardLayoutNameW ??= _dylib.lookupFunction<
        _c_GetKeyboardLayoutNameW,
        _dart_GetKeyboardLayoutNameW>('GetKeyboardLayoutNameW'))(
      pwszKLID,
    );
  }

  _dart_GetKeyboardLayoutNameW? _GetKeyboardLayoutNameW;

  int GetKeyboardLayoutList(
    int nBuff,
    ffi.Pointer<ffi.Pointer<HKL__>> lpList,
  ) {
    return (_GetKeyboardLayoutList ??= _dylib.lookupFunction<
        _c_GetKeyboardLayoutList,
        _dart_GetKeyboardLayoutList>('GetKeyboardLayoutList'))(
      nBuff,
      lpList,
    );
  }

  _dart_GetKeyboardLayoutList? _GetKeyboardLayoutList;

  ffi.Pointer<HKL__> GetKeyboardLayout(
    int idThread,
  ) {
    return (_GetKeyboardLayout ??=
        _dylib.lookupFunction<_c_GetKeyboardLayout, _dart_GetKeyboardLayout>(
            'GetKeyboardLayout'))(
      idThread,
    );
  }

  _dart_GetKeyboardLayout? _GetKeyboardLayout;

  int GetMouseMovePointsEx(
    int cbSize,
    ffi.Pointer<LPMOUSEMOVEPOINT> lppt,
    ffi.Pointer<LPMOUSEMOVEPOINT> lpptBuf,
    int nBufPoints,
    int resolution,
  ) {
    return (_GetMouseMovePointsEx ??= _dylib.lookupFunction<
        _c_GetMouseMovePointsEx,
        _dart_GetMouseMovePointsEx>('GetMouseMovePointsEx'))(
      cbSize,
      lppt,
      lpptBuf,
      nBufPoints,
      resolution,
    );
  }

  _dart_GetMouseMovePointsEx? _GetMouseMovePointsEx;

  ffi.Pointer<HDESK__> CreateDesktopA(
    ffi.Pointer<ffi.Int8> lpszDesktop,
    ffi.Pointer<ffi.Int8> lpszDevice,
    ffi.Pointer<LPDEVMODEA> pDevmode,
    int dwFlags,
    int dwDesiredAccess,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpsa,
  ) {
    return (_CreateDesktopA ??=
        _dylib.lookupFunction<_c_CreateDesktopA, _dart_CreateDesktopA>(
            'CreateDesktopA'))(
      lpszDesktop,
      lpszDevice,
      pDevmode,
      dwFlags,
      dwDesiredAccess,
      lpsa,
    );
  }

  _dart_CreateDesktopA? _CreateDesktopA;

  ffi.Pointer<HDESK__> CreateDesktopW(
    ffi.Pointer<ffi.Uint16> lpszDesktop,
    ffi.Pointer<ffi.Uint16> lpszDevice,
    ffi.Pointer<LPDEVMODEW> pDevmode,
    int dwFlags,
    int dwDesiredAccess,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpsa,
  ) {
    return (_CreateDesktopW ??=
        _dylib.lookupFunction<_c_CreateDesktopW, _dart_CreateDesktopW>(
            'CreateDesktopW'))(
      lpszDesktop,
      lpszDevice,
      pDevmode,
      dwFlags,
      dwDesiredAccess,
      lpsa,
    );
  }

  _dart_CreateDesktopW? _CreateDesktopW;

  ffi.Pointer<HDESK__> CreateDesktopExA(
    ffi.Pointer<ffi.Int8> lpszDesktop,
    ffi.Pointer<ffi.Int8> lpszDevice,
    ffi.Pointer<LPDEVMODEA> pDevmode,
    int dwFlags,
    int dwDesiredAccess,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpsa,
    int ulHeapSize,
    ffi.Pointer<ffi.Void> pvoid,
  ) {
    return (_CreateDesktopExA ??=
        _dylib.lookupFunction<_c_CreateDesktopExA, _dart_CreateDesktopExA>(
            'CreateDesktopExA'))(
      lpszDesktop,
      lpszDevice,
      pDevmode,
      dwFlags,
      dwDesiredAccess,
      lpsa,
      ulHeapSize,
      pvoid,
    );
  }

  _dart_CreateDesktopExA? _CreateDesktopExA;

  ffi.Pointer<HDESK__> CreateDesktopExW(
    ffi.Pointer<ffi.Uint16> lpszDesktop,
    ffi.Pointer<ffi.Uint16> lpszDevice,
    ffi.Pointer<LPDEVMODEW> pDevmode,
    int dwFlags,
    int dwDesiredAccess,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpsa,
    int ulHeapSize,
    ffi.Pointer<ffi.Void> pvoid,
  ) {
    return (_CreateDesktopExW ??=
        _dylib.lookupFunction<_c_CreateDesktopExW, _dart_CreateDesktopExW>(
            'CreateDesktopExW'))(
      lpszDesktop,
      lpszDevice,
      pDevmode,
      dwFlags,
      dwDesiredAccess,
      lpsa,
      ulHeapSize,
      pvoid,
    );
  }

  _dart_CreateDesktopExW? _CreateDesktopExW;

  ffi.Pointer<HDESK__> OpenDesktopA(
    ffi.Pointer<ffi.Int8> lpszDesktop,
    int dwFlags,
    int fInherit,
    int dwDesiredAccess,
  ) {
    return (_OpenDesktopA ??= _dylib
        .lookupFunction<_c_OpenDesktopA, _dart_OpenDesktopA>('OpenDesktopA'))(
      lpszDesktop,
      dwFlags,
      fInherit,
      dwDesiredAccess,
    );
  }

  _dart_OpenDesktopA? _OpenDesktopA;

  ffi.Pointer<HDESK__> OpenDesktopW(
    ffi.Pointer<ffi.Uint16> lpszDesktop,
    int dwFlags,
    int fInherit,
    int dwDesiredAccess,
  ) {
    return (_OpenDesktopW ??= _dylib
        .lookupFunction<_c_OpenDesktopW, _dart_OpenDesktopW>('OpenDesktopW'))(
      lpszDesktop,
      dwFlags,
      fInherit,
      dwDesiredAccess,
    );
  }

  _dart_OpenDesktopW? _OpenDesktopW;

  ffi.Pointer<HDESK__> OpenInputDesktop(
    int dwFlags,
    int fInherit,
    int dwDesiredAccess,
  ) {
    return (_OpenInputDesktop ??=
        _dylib.lookupFunction<_c_OpenInputDesktop, _dart_OpenInputDesktop>(
            'OpenInputDesktop'))(
      dwFlags,
      fInherit,
      dwDesiredAccess,
    );
  }

  _dart_OpenInputDesktop? _OpenInputDesktop;

  int EnumDesktopsA(
    ffi.Pointer<HWINSTA__> hwinsta,
    ffi.Pointer<ffi.NativeFunction<DESKTOPENUMPROCA>> lpEnumFunc,
    int lParam,
  ) {
    return (_EnumDesktopsA ??=
        _dylib.lookupFunction<_c_EnumDesktopsA, _dart_EnumDesktopsA>(
            'EnumDesktopsA'))(
      hwinsta,
      lpEnumFunc,
      lParam,
    );
  }

  _dart_EnumDesktopsA? _EnumDesktopsA;

  int EnumDesktopsW(
    ffi.Pointer<HWINSTA__> hwinsta,
    ffi.Pointer<ffi.NativeFunction<DESKTOPENUMPROCW>> lpEnumFunc,
    int lParam,
  ) {
    return (_EnumDesktopsW ??=
        _dylib.lookupFunction<_c_EnumDesktopsW, _dart_EnumDesktopsW>(
            'EnumDesktopsW'))(
      hwinsta,
      lpEnumFunc,
      lParam,
    );
  }

  _dart_EnumDesktopsW? _EnumDesktopsW;

  int EnumDesktopWindows(
    ffi.Pointer<HDESK__> hDesktop,
    ffi.Pointer<ffi.NativeFunction<WNDENUMPROC>> lpfn,
    int lParam,
  ) {
    return (_EnumDesktopWindows ??=
        _dylib.lookupFunction<_c_EnumDesktopWindows, _dart_EnumDesktopWindows>(
            'EnumDesktopWindows'))(
      hDesktop,
      lpfn,
      lParam,
    );
  }

  _dart_EnumDesktopWindows? _EnumDesktopWindows;

  int SwitchDesktop(
    ffi.Pointer<HDESK__> hDesktop,
  ) {
    return (_SwitchDesktop ??=
        _dylib.lookupFunction<_c_SwitchDesktop, _dart_SwitchDesktop>(
            'SwitchDesktop'))(
      hDesktop,
    );
  }

  _dart_SwitchDesktop? _SwitchDesktop;

  int SetThreadDesktop(
    ffi.Pointer<HDESK__> hDesktop,
  ) {
    return (_SetThreadDesktop ??=
        _dylib.lookupFunction<_c_SetThreadDesktop, _dart_SetThreadDesktop>(
            'SetThreadDesktop'))(
      hDesktop,
    );
  }

  _dart_SetThreadDesktop? _SetThreadDesktop;

  int CloseDesktop(
    ffi.Pointer<HDESK__> hDesktop,
  ) {
    return (_CloseDesktop ??= _dylib
        .lookupFunction<_c_CloseDesktop, _dart_CloseDesktop>('CloseDesktop'))(
      hDesktop,
    );
  }

  _dart_CloseDesktop? _CloseDesktop;

  ffi.Pointer<HDESK__> GetThreadDesktop(
    int dwThreadId,
  ) {
    return (_GetThreadDesktop ??=
        _dylib.lookupFunction<_c_GetThreadDesktop, _dart_GetThreadDesktop>(
            'GetThreadDesktop'))(
      dwThreadId,
    );
  }

  _dart_GetThreadDesktop? _GetThreadDesktop;

  ffi.Pointer<HWINSTA__> CreateWindowStationA(
    ffi.Pointer<ffi.Int8> lpwinsta,
    int dwFlags,
    int dwDesiredAccess,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpsa,
  ) {
    return (_CreateWindowStationA ??= _dylib.lookupFunction<
        _c_CreateWindowStationA,
        _dart_CreateWindowStationA>('CreateWindowStationA'))(
      lpwinsta,
      dwFlags,
      dwDesiredAccess,
      lpsa,
    );
  }

  _dart_CreateWindowStationA? _CreateWindowStationA;

  ffi.Pointer<HWINSTA__> CreateWindowStationW(
    ffi.Pointer<ffi.Uint16> lpwinsta,
    int dwFlags,
    int dwDesiredAccess,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpsa,
  ) {
    return (_CreateWindowStationW ??= _dylib.lookupFunction<
        _c_CreateWindowStationW,
        _dart_CreateWindowStationW>('CreateWindowStationW'))(
      lpwinsta,
      dwFlags,
      dwDesiredAccess,
      lpsa,
    );
  }

  _dart_CreateWindowStationW? _CreateWindowStationW;

  ffi.Pointer<HWINSTA__> OpenWindowStationA(
    ffi.Pointer<ffi.Int8> lpszWinSta,
    int fInherit,
    int dwDesiredAccess,
  ) {
    return (_OpenWindowStationA ??=
        _dylib.lookupFunction<_c_OpenWindowStationA, _dart_OpenWindowStationA>(
            'OpenWindowStationA'))(
      lpszWinSta,
      fInherit,
      dwDesiredAccess,
    );
  }

  _dart_OpenWindowStationA? _OpenWindowStationA;

  ffi.Pointer<HWINSTA__> OpenWindowStationW(
    ffi.Pointer<ffi.Uint16> lpszWinSta,
    int fInherit,
    int dwDesiredAccess,
  ) {
    return (_OpenWindowStationW ??=
        _dylib.lookupFunction<_c_OpenWindowStationW, _dart_OpenWindowStationW>(
            'OpenWindowStationW'))(
      lpszWinSta,
      fInherit,
      dwDesiredAccess,
    );
  }

  _dart_OpenWindowStationW? _OpenWindowStationW;

  int EnumWindowStationsA(
    ffi.Pointer<ffi.NativeFunction<WINSTAENUMPROCA>> lpEnumFunc,
    int lParam,
  ) {
    return (_EnumWindowStationsA ??= _dylib.lookupFunction<
        _c_EnumWindowStationsA,
        _dart_EnumWindowStationsA>('EnumWindowStationsA'))(
      lpEnumFunc,
      lParam,
    );
  }

  _dart_EnumWindowStationsA? _EnumWindowStationsA;

  int EnumWindowStationsW(
    ffi.Pointer<ffi.NativeFunction<WINSTAENUMPROCW>> lpEnumFunc,
    int lParam,
  ) {
    return (_EnumWindowStationsW ??= _dylib.lookupFunction<
        _c_EnumWindowStationsW,
        _dart_EnumWindowStationsW>('EnumWindowStationsW'))(
      lpEnumFunc,
      lParam,
    );
  }

  _dart_EnumWindowStationsW? _EnumWindowStationsW;

  int CloseWindowStation(
    ffi.Pointer<HWINSTA__> hWinSta,
  ) {
    return (_CloseWindowStation ??=
        _dylib.lookupFunction<_c_CloseWindowStation, _dart_CloseWindowStation>(
            'CloseWindowStation'))(
      hWinSta,
    );
  }

  _dart_CloseWindowStation? _CloseWindowStation;

  int SetProcessWindowStation(
    ffi.Pointer<HWINSTA__> hWinSta,
  ) {
    return (_SetProcessWindowStation ??= _dylib.lookupFunction<
        _c_SetProcessWindowStation,
        _dart_SetProcessWindowStation>('SetProcessWindowStation'))(
      hWinSta,
    );
  }

  _dart_SetProcessWindowStation? _SetProcessWindowStation;

  ffi.Pointer<HWINSTA__> GetProcessWindowStation() {
    return (_GetProcessWindowStation ??= _dylib.lookupFunction<
        _c_GetProcessWindowStation,
        _dart_GetProcessWindowStation>('GetProcessWindowStation'))();
  }

  _dart_GetProcessWindowStation? _GetProcessWindowStation;

  int SetUserObjectSecurity(
    ffi.Pointer<ffi.Void> hObj,
    ffi.Pointer<ffi.Uint64> pSIRequested,
    ffi.Pointer<ffi.Void> pSID,
  ) {
    return (_SetUserObjectSecurity ??= _dylib.lookupFunction<
        _c_SetUserObjectSecurity,
        _dart_SetUserObjectSecurity>('SetUserObjectSecurity'))(
      hObj,
      pSIRequested,
      pSID,
    );
  }

  _dart_SetUserObjectSecurity? _SetUserObjectSecurity;

  int GetUserObjectSecurity(
    ffi.Pointer<ffi.Void> hObj,
    ffi.Pointer<ffi.Uint64> pSIRequested,
    ffi.Pointer<ffi.Void> pSID,
    int nLength,
    ffi.Pointer<ffi.Uint64> lpnLengthNeeded,
  ) {
    return (_GetUserObjectSecurity ??= _dylib.lookupFunction<
        _c_GetUserObjectSecurity,
        _dart_GetUserObjectSecurity>('GetUserObjectSecurity'))(
      hObj,
      pSIRequested,
      pSID,
      nLength,
      lpnLengthNeeded,
    );
  }

  _dart_GetUserObjectSecurity? _GetUserObjectSecurity;

  int GetUserObjectInformationA(
    ffi.Pointer<ffi.Void> hObj,
    int nIndex,
    ffi.Pointer<ffi.Void> pvInfo,
    int nLength,
    ffi.Pointer<ffi.Uint64> lpnLengthNeeded,
  ) {
    return (_GetUserObjectInformationA ??= _dylib.lookupFunction<
        _c_GetUserObjectInformationA,
        _dart_GetUserObjectInformationA>('GetUserObjectInformationA'))(
      hObj,
      nIndex,
      pvInfo,
      nLength,
      lpnLengthNeeded,
    );
  }

  _dart_GetUserObjectInformationA? _GetUserObjectInformationA;

  int GetUserObjectInformationW(
    ffi.Pointer<ffi.Void> hObj,
    int nIndex,
    ffi.Pointer<ffi.Void> pvInfo,
    int nLength,
    ffi.Pointer<ffi.Uint64> lpnLengthNeeded,
  ) {
    return (_GetUserObjectInformationW ??= _dylib.lookupFunction<
        _c_GetUserObjectInformationW,
        _dart_GetUserObjectInformationW>('GetUserObjectInformationW'))(
      hObj,
      nIndex,
      pvInfo,
      nLength,
      lpnLengthNeeded,
    );
  }

  _dart_GetUserObjectInformationW? _GetUserObjectInformationW;

  int SetUserObjectInformationA(
    ffi.Pointer<ffi.Void> hObj,
    int nIndex,
    ffi.Pointer<ffi.Void> pvInfo,
    int nLength,
  ) {
    return (_SetUserObjectInformationA ??= _dylib.lookupFunction<
        _c_SetUserObjectInformationA,
        _dart_SetUserObjectInformationA>('SetUserObjectInformationA'))(
      hObj,
      nIndex,
      pvInfo,
      nLength,
    );
  }

  _dart_SetUserObjectInformationA? _SetUserObjectInformationA;

  int SetUserObjectInformationW(
    ffi.Pointer<ffi.Void> hObj,
    int nIndex,
    ffi.Pointer<ffi.Void> pvInfo,
    int nLength,
  ) {
    return (_SetUserObjectInformationW ??= _dylib.lookupFunction<
        _c_SetUserObjectInformationW,
        _dart_SetUserObjectInformationW>('SetUserObjectInformationW'))(
      hObj,
      nIndex,
      pvInfo,
      nLength,
    );
  }

  _dart_SetUserObjectInformationW? _SetUserObjectInformationW;

  int IsHungAppWindow(
    ffi.Pointer<HWND__> hwnd,
  ) {
    return (_IsHungAppWindow ??=
        _dylib.lookupFunction<_c_IsHungAppWindow, _dart_IsHungAppWindow>(
            'IsHungAppWindow'))(
      hwnd,
    );
  }

  _dart_IsHungAppWindow? _IsHungAppWindow;

  void DisableProcessWindowsGhosting() {
    return (_DisableProcessWindowsGhosting ??= _dylib.lookupFunction<
            _c_DisableProcessWindowsGhosting,
            _dart_DisableProcessWindowsGhosting>(
        'DisableProcessWindowsGhosting'))();
  }

  _dart_DisableProcessWindowsGhosting? _DisableProcessWindowsGhosting;

  int RegisterWindowMessageA(
    ffi.Pointer<ffi.Int8> lpString,
  ) {
    return (_RegisterWindowMessageA ??= _dylib.lookupFunction<
        _c_RegisterWindowMessageA,
        _dart_RegisterWindowMessageA>('RegisterWindowMessageA'))(
      lpString,
    );
  }

  _dart_RegisterWindowMessageA? _RegisterWindowMessageA;

  int RegisterWindowMessageW(
    ffi.Pointer<ffi.Uint16> lpString,
  ) {
    return (_RegisterWindowMessageW ??= _dylib.lookupFunction<
        _c_RegisterWindowMessageW,
        _dart_RegisterWindowMessageW>('RegisterWindowMessageW'))(
      lpString,
    );
  }

  _dart_RegisterWindowMessageW? _RegisterWindowMessageW;

  int TrackMouseEvent(
    ffi.Pointer<LPTRACKMOUSEEVENT> lpEventTrack,
  ) {
    return (_TrackMouseEvent ??=
        _dylib.lookupFunction<_c_TrackMouseEvent, _dart_TrackMouseEvent>(
            'TrackMouseEvent'))(
      lpEventTrack,
    );
  }

  _dart_TrackMouseEvent? _TrackMouseEvent;

  int DrawEdge(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPRECT> qrc,
    int edge,
    int grfFlags,
  ) {
    return (_DrawEdge ??=
        _dylib.lookupFunction<_c_DrawEdge, _dart_DrawEdge>('DrawEdge'))(
      hdc,
      qrc,
      edge,
      grfFlags,
    );
  }

  _dart_DrawEdge? _DrawEdge;

  int DrawFrameControl(
    ffi.Pointer<HDC__> arg0,
    ffi.Pointer<LPRECT> arg1,
    int arg2,
    int arg3,
  ) {
    return (_DrawFrameControl ??=
        _dylib.lookupFunction<_c_DrawFrameControl, _dart_DrawFrameControl>(
            'DrawFrameControl'))(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_DrawFrameControl? _DrawFrameControl;

  int DrawCaption(
    ffi.Pointer<HWND__> hwnd,
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPRECT> lprect,
    int flags,
  ) {
    return (_DrawCaption ??= _dylib
        .lookupFunction<_c_DrawCaption, _dart_DrawCaption>('DrawCaption'))(
      hwnd,
      hdc,
      lprect,
      flags,
    );
  }

  _dart_DrawCaption? _DrawCaption;

  int DrawAnimatedRects(
    ffi.Pointer<HWND__> hwnd,
    int idAni,
    ffi.Pointer<LPRECT> lprcFrom,
    ffi.Pointer<LPRECT> lprcTo,
  ) {
    return (_DrawAnimatedRects ??=
        _dylib.lookupFunction<_c_DrawAnimatedRects, _dart_DrawAnimatedRects>(
            'DrawAnimatedRects'))(
      hwnd,
      idAni,
      lprcFrom,
      lprcTo,
    );
  }

  _dart_DrawAnimatedRects? _DrawAnimatedRects;

  int GetMessageA(
    ffi.Pointer<LPMSG> lpMsg,
    ffi.Pointer<HWND__> hWnd,
    int wMsgFilterMin,
    int wMsgFilterMax,
  ) {
    return (_GetMessageA ??= _dylib
        .lookupFunction<_c_GetMessageA, _dart_GetMessageA>('GetMessageA'))(
      lpMsg,
      hWnd,
      wMsgFilterMin,
      wMsgFilterMax,
    );
  }

  _dart_GetMessageA? _GetMessageA;

  int GetMessageW(
    ffi.Pointer<LPMSG> lpMsg,
    ffi.Pointer<HWND__> hWnd,
    int wMsgFilterMin,
    int wMsgFilterMax,
  ) {
    return (_GetMessageW ??= _dylib
        .lookupFunction<_c_GetMessageW, _dart_GetMessageW>('GetMessageW'))(
      lpMsg,
      hWnd,
      wMsgFilterMin,
      wMsgFilterMax,
    );
  }

  _dart_GetMessageW? _GetMessageW;

  int TranslateMessage(
    ffi.Pointer<LPMSG> lpMsg,
  ) {
    return (_TranslateMessage ??=
        _dylib.lookupFunction<_c_TranslateMessage, _dart_TranslateMessage>(
            'TranslateMessage'))(
      lpMsg,
    );
  }

  _dart_TranslateMessage? _TranslateMessage;

  int DispatchMessageA(
    ffi.Pointer<LPMSG> lpMsg,
  ) {
    return (_DispatchMessageA ??=
        _dylib.lookupFunction<_c_DispatchMessageA, _dart_DispatchMessageA>(
            'DispatchMessageA'))(
      lpMsg,
    );
  }

  _dart_DispatchMessageA? _DispatchMessageA;

  int DispatchMessageW(
    ffi.Pointer<LPMSG> lpMsg,
  ) {
    return (_DispatchMessageW ??=
        _dylib.lookupFunction<_c_DispatchMessageW, _dart_DispatchMessageW>(
            'DispatchMessageW'))(
      lpMsg,
    );
  }

  _dart_DispatchMessageW? _DispatchMessageW;

  int SetMessageQueue(
    int cMessagesMax,
  ) {
    return (_SetMessageQueue ??=
        _dylib.lookupFunction<_c_SetMessageQueue, _dart_SetMessageQueue>(
            'SetMessageQueue'))(
      cMessagesMax,
    );
  }

  _dart_SetMessageQueue? _SetMessageQueue;

  int PeekMessageA(
    ffi.Pointer<LPMSG> lpMsg,
    ffi.Pointer<HWND__> hWnd,
    int wMsgFilterMin,
    int wMsgFilterMax,
    int wRemoveMsg,
  ) {
    return (_PeekMessageA ??= _dylib
        .lookupFunction<_c_PeekMessageA, _dart_PeekMessageA>('PeekMessageA'))(
      lpMsg,
      hWnd,
      wMsgFilterMin,
      wMsgFilterMax,
      wRemoveMsg,
    );
  }

  _dart_PeekMessageA? _PeekMessageA;

  int PeekMessageW(
    ffi.Pointer<LPMSG> lpMsg,
    ffi.Pointer<HWND__> hWnd,
    int wMsgFilterMin,
    int wMsgFilterMax,
    int wRemoveMsg,
  ) {
    return (_PeekMessageW ??= _dylib
        .lookupFunction<_c_PeekMessageW, _dart_PeekMessageW>('PeekMessageW'))(
      lpMsg,
      hWnd,
      wMsgFilterMin,
      wMsgFilterMax,
      wRemoveMsg,
    );
  }

  _dart_PeekMessageW? _PeekMessageW;

  int RegisterHotKey(
    ffi.Pointer<HWND__> hWnd,
    int id,
    int fsModifiers,
    int vk,
  ) {
    return (_RegisterHotKey ??=
        _dylib.lookupFunction<_c_RegisterHotKey, _dart_RegisterHotKey>(
            'RegisterHotKey'))(
      hWnd,
      id,
      fsModifiers,
      vk,
    );
  }

  _dart_RegisterHotKey? _RegisterHotKey;

  int UnregisterHotKey(
    ffi.Pointer<HWND__> hWnd,
    int id,
  ) {
    return (_UnregisterHotKey ??=
        _dylib.lookupFunction<_c_UnregisterHotKey, _dart_UnregisterHotKey>(
            'UnregisterHotKey'))(
      hWnd,
      id,
    );
  }

  _dart_UnregisterHotKey? _UnregisterHotKey;

  int ExitWindowsEx(
    int uFlags,
    int dwReason,
  ) {
    return (_ExitWindowsEx ??=
        _dylib.lookupFunction<_c_ExitWindowsEx, _dart_ExitWindowsEx>(
            'ExitWindowsEx'))(
      uFlags,
      dwReason,
    );
  }

  _dart_ExitWindowsEx? _ExitWindowsEx;

  int SwapMouseButton(
    int fSwap,
  ) {
    return (_SwapMouseButton ??=
        _dylib.lookupFunction<_c_SwapMouseButton, _dart_SwapMouseButton>(
            'SwapMouseButton'))(
      fSwap,
    );
  }

  _dart_SwapMouseButton? _SwapMouseButton;

  int GetMessagePos() {
    return (_GetMessagePos ??=
        _dylib.lookupFunction<_c_GetMessagePos, _dart_GetMessagePos>(
            'GetMessagePos'))();
  }

  _dart_GetMessagePos? _GetMessagePos;

  int GetMessageTime() {
    return (_GetMessageTime ??=
        _dylib.lookupFunction<_c_GetMessageTime, _dart_GetMessageTime>(
            'GetMessageTime'))();
  }

  _dart_GetMessageTime? _GetMessageTime;

  int GetMessageExtraInfo() {
    return (_GetMessageExtraInfo ??= _dylib.lookupFunction<
        _c_GetMessageExtraInfo,
        _dart_GetMessageExtraInfo>('GetMessageExtraInfo'))();
  }

  _dart_GetMessageExtraInfo? _GetMessageExtraInfo;

  int GetUnpredictedMessagePos() {
    return (_GetUnpredictedMessagePos ??= _dylib.lookupFunction<
        _c_GetUnpredictedMessagePos,
        _dart_GetUnpredictedMessagePos>('GetUnpredictedMessagePos'))();
  }

  _dart_GetUnpredictedMessagePos? _GetUnpredictedMessagePos;

  int IsWow64Message() {
    return (_IsWow64Message ??=
        _dylib.lookupFunction<_c_IsWow64Message, _dart_IsWow64Message>(
            'IsWow64Message'))();
  }

  _dart_IsWow64Message? _IsWow64Message;

  int SetMessageExtraInfo(
    int lParam,
  ) {
    return (_SetMessageExtraInfo ??= _dylib.lookupFunction<
        _c_SetMessageExtraInfo,
        _dart_SetMessageExtraInfo>('SetMessageExtraInfo'))(
      lParam,
    );
  }

  _dart_SetMessageExtraInfo? _SetMessageExtraInfo;

  int SendMessageA(
    ffi.Pointer<HWND__> hWnd,
    int Msg,
    int wParam,
    int lParam,
  ) {
    return (_SendMessageA ??= _dylib
        .lookupFunction<_c_SendMessageA, _dart_SendMessageA>('SendMessageA'))(
      hWnd,
      Msg,
      wParam,
      lParam,
    );
  }

  _dart_SendMessageA? _SendMessageA;

  int SendMessageW(
    ffi.Pointer<HWND__> hWnd,
    int Msg,
    int wParam,
    int lParam,
  ) {
    return (_SendMessageW ??= _dylib
        .lookupFunction<_c_SendMessageW, _dart_SendMessageW>('SendMessageW'))(
      hWnd,
      Msg,
      wParam,
      lParam,
    );
  }

  _dart_SendMessageW? _SendMessageW;

  int SendMessageTimeoutA(
    ffi.Pointer<HWND__> hWnd,
    int Msg,
    int wParam,
    int lParam,
    int fuFlags,
    int uTimeout,
    ffi.Pointer<ffi.Uint64> lpdwResult,
  ) {
    return (_SendMessageTimeoutA ??= _dylib.lookupFunction<
        _c_SendMessageTimeoutA,
        _dart_SendMessageTimeoutA>('SendMessageTimeoutA'))(
      hWnd,
      Msg,
      wParam,
      lParam,
      fuFlags,
      uTimeout,
      lpdwResult,
    );
  }

  _dart_SendMessageTimeoutA? _SendMessageTimeoutA;

  int SendMessageTimeoutW(
    ffi.Pointer<HWND__> hWnd,
    int Msg,
    int wParam,
    int lParam,
    int fuFlags,
    int uTimeout,
    ffi.Pointer<ffi.Uint64> lpdwResult,
  ) {
    return (_SendMessageTimeoutW ??= _dylib.lookupFunction<
        _c_SendMessageTimeoutW,
        _dart_SendMessageTimeoutW>('SendMessageTimeoutW'))(
      hWnd,
      Msg,
      wParam,
      lParam,
      fuFlags,
      uTimeout,
      lpdwResult,
    );
  }

  _dart_SendMessageTimeoutW? _SendMessageTimeoutW;

  int SendNotifyMessageA(
    ffi.Pointer<HWND__> hWnd,
    int Msg,
    int wParam,
    int lParam,
  ) {
    return (_SendNotifyMessageA ??=
        _dylib.lookupFunction<_c_SendNotifyMessageA, _dart_SendNotifyMessageA>(
            'SendNotifyMessageA'))(
      hWnd,
      Msg,
      wParam,
      lParam,
    );
  }

  _dart_SendNotifyMessageA? _SendNotifyMessageA;

  int SendNotifyMessageW(
    ffi.Pointer<HWND__> hWnd,
    int Msg,
    int wParam,
    int lParam,
  ) {
    return (_SendNotifyMessageW ??=
        _dylib.lookupFunction<_c_SendNotifyMessageW, _dart_SendNotifyMessageW>(
            'SendNotifyMessageW'))(
      hWnd,
      Msg,
      wParam,
      lParam,
    );
  }

  _dart_SendNotifyMessageW? _SendNotifyMessageW;

  int SendMessageCallbackA(
    ffi.Pointer<HWND__> hWnd,
    int Msg,
    int wParam,
    int lParam,
    ffi.Pointer<ffi.NativeFunction<SENDASYNCPROC>> lpResultCallBack,
    int dwData,
  ) {
    return (_SendMessageCallbackA ??= _dylib.lookupFunction<
        _c_SendMessageCallbackA,
        _dart_SendMessageCallbackA>('SendMessageCallbackA'))(
      hWnd,
      Msg,
      wParam,
      lParam,
      lpResultCallBack,
      dwData,
    );
  }

  _dart_SendMessageCallbackA? _SendMessageCallbackA;

  int SendMessageCallbackW(
    ffi.Pointer<HWND__> hWnd,
    int Msg,
    int wParam,
    int lParam,
    ffi.Pointer<ffi.NativeFunction<SENDASYNCPROC>> lpResultCallBack,
    int dwData,
  ) {
    return (_SendMessageCallbackW ??= _dylib.lookupFunction<
        _c_SendMessageCallbackW,
        _dart_SendMessageCallbackW>('SendMessageCallbackW'))(
      hWnd,
      Msg,
      wParam,
      lParam,
      lpResultCallBack,
      dwData,
    );
  }

  _dart_SendMessageCallbackW? _SendMessageCallbackW;

  int BroadcastSystemMessageExA(
    int flags,
    ffi.Pointer<ffi.Uint64> lpInfo,
    int Msg,
    int wParam,
    int lParam,
    ffi.Pointer<PBSMINFO> pbsmInfo,
  ) {
    return (_BroadcastSystemMessageExA ??= _dylib.lookupFunction<
        _c_BroadcastSystemMessageExA,
        _dart_BroadcastSystemMessageExA>('BroadcastSystemMessageExA'))(
      flags,
      lpInfo,
      Msg,
      wParam,
      lParam,
      pbsmInfo,
    );
  }

  _dart_BroadcastSystemMessageExA? _BroadcastSystemMessageExA;

  int BroadcastSystemMessageExW(
    int flags,
    ffi.Pointer<ffi.Uint64> lpInfo,
    int Msg,
    int wParam,
    int lParam,
    ffi.Pointer<PBSMINFO> pbsmInfo,
  ) {
    return (_BroadcastSystemMessageExW ??= _dylib.lookupFunction<
        _c_BroadcastSystemMessageExW,
        _dart_BroadcastSystemMessageExW>('BroadcastSystemMessageExW'))(
      flags,
      lpInfo,
      Msg,
      wParam,
      lParam,
      pbsmInfo,
    );
  }

  _dart_BroadcastSystemMessageExW? _BroadcastSystemMessageExW;

  int BroadcastSystemMessageA(
    int flags,
    ffi.Pointer<ffi.Uint64> lpInfo,
    int Msg,
    int wParam,
    int lParam,
  ) {
    return (_BroadcastSystemMessageA ??= _dylib.lookupFunction<
        _c_BroadcastSystemMessageA,
        _dart_BroadcastSystemMessageA>('BroadcastSystemMessageA'))(
      flags,
      lpInfo,
      Msg,
      wParam,
      lParam,
    );
  }

  _dart_BroadcastSystemMessageA? _BroadcastSystemMessageA;

  int BroadcastSystemMessageW(
    int flags,
    ffi.Pointer<ffi.Uint64> lpInfo,
    int Msg,
    int wParam,
    int lParam,
  ) {
    return (_BroadcastSystemMessageW ??= _dylib.lookupFunction<
        _c_BroadcastSystemMessageW,
        _dart_BroadcastSystemMessageW>('BroadcastSystemMessageW'))(
      flags,
      lpInfo,
      Msg,
      wParam,
      lParam,
    );
  }

  _dart_BroadcastSystemMessageW? _BroadcastSystemMessageW;

  ffi.Pointer<ffi.Void> RegisterDeviceNotificationA(
    ffi.Pointer<ffi.Void> hRecipient,
    ffi.Pointer<ffi.Void> NotificationFilter,
    int Flags,
  ) {
    return (_RegisterDeviceNotificationA ??= _dylib.lookupFunction<
        _c_RegisterDeviceNotificationA,
        _dart_RegisterDeviceNotificationA>('RegisterDeviceNotificationA'))(
      hRecipient,
      NotificationFilter,
      Flags,
    );
  }

  _dart_RegisterDeviceNotificationA? _RegisterDeviceNotificationA;

  ffi.Pointer<ffi.Void> RegisterDeviceNotificationW(
    ffi.Pointer<ffi.Void> hRecipient,
    ffi.Pointer<ffi.Void> NotificationFilter,
    int Flags,
  ) {
    return (_RegisterDeviceNotificationW ??= _dylib.lookupFunction<
        _c_RegisterDeviceNotificationW,
        _dart_RegisterDeviceNotificationW>('RegisterDeviceNotificationW'))(
      hRecipient,
      NotificationFilter,
      Flags,
    );
  }

  _dart_RegisterDeviceNotificationW? _RegisterDeviceNotificationW;

  int UnregisterDeviceNotification(
    ffi.Pointer<ffi.Void> Handle,
  ) {
    return (_UnregisterDeviceNotification ??= _dylib.lookupFunction<
        _c_UnregisterDeviceNotification,
        _dart_UnregisterDeviceNotification>('UnregisterDeviceNotification'))(
      Handle,
    );
  }

  _dart_UnregisterDeviceNotification? _UnregisterDeviceNotification;

  ffi.Pointer<ffi.Void> RegisterPowerSettingNotification(
    ffi.Pointer<ffi.Void> hRecipient,
    ffi.Pointer<GUID> PowerSettingGuid,
    int Flags,
  ) {
    return (_RegisterPowerSettingNotification ??= _dylib.lookupFunction<
            _c_RegisterPowerSettingNotification,
            _dart_RegisterPowerSettingNotification>(
        'RegisterPowerSettingNotification'))(
      hRecipient,
      PowerSettingGuid,
      Flags,
    );
  }

  _dart_RegisterPowerSettingNotification? _RegisterPowerSettingNotification;

  int UnregisterPowerSettingNotification(
    ffi.Pointer<ffi.Void> Handle,
  ) {
    return (_UnregisterPowerSettingNotification ??= _dylib.lookupFunction<
            _c_UnregisterPowerSettingNotification,
            _dart_UnregisterPowerSettingNotification>(
        'UnregisterPowerSettingNotification'))(
      Handle,
    );
  }

  _dart_UnregisterPowerSettingNotification? _UnregisterPowerSettingNotification;

  ffi.Pointer<ffi.Void> RegisterSuspendResumeNotification(
    ffi.Pointer<ffi.Void> hRecipient,
    int Flags,
  ) {
    return (_RegisterSuspendResumeNotification ??= _dylib.lookupFunction<
            _c_RegisterSuspendResumeNotification,
            _dart_RegisterSuspendResumeNotification>(
        'RegisterSuspendResumeNotification'))(
      hRecipient,
      Flags,
    );
  }

  _dart_RegisterSuspendResumeNotification? _RegisterSuspendResumeNotification;

  int UnregisterSuspendResumeNotification(
    ffi.Pointer<ffi.Void> Handle,
  ) {
    return (_UnregisterSuspendResumeNotification ??= _dylib.lookupFunction<
            _c_UnregisterSuspendResumeNotification,
            _dart_UnregisterSuspendResumeNotification>(
        'UnregisterSuspendResumeNotification'))(
      Handle,
    );
  }

  _dart_UnregisterSuspendResumeNotification?
      _UnregisterSuspendResumeNotification;

  int PostMessageA(
    ffi.Pointer<HWND__> hWnd,
    int Msg,
    int wParam,
    int lParam,
  ) {
    return (_PostMessageA ??= _dylib
        .lookupFunction<_c_PostMessageA, _dart_PostMessageA>('PostMessageA'))(
      hWnd,
      Msg,
      wParam,
      lParam,
    );
  }

  _dart_PostMessageA? _PostMessageA;

  int PostMessageW(
    ffi.Pointer<HWND__> hWnd,
    int Msg,
    int wParam,
    int lParam,
  ) {
    return (_PostMessageW ??= _dylib
        .lookupFunction<_c_PostMessageW, _dart_PostMessageW>('PostMessageW'))(
      hWnd,
      Msg,
      wParam,
      lParam,
    );
  }

  _dart_PostMessageW? _PostMessageW;

  int PostThreadMessageA(
    int idThread,
    int Msg,
    int wParam,
    int lParam,
  ) {
    return (_PostThreadMessageA ??=
        _dylib.lookupFunction<_c_PostThreadMessageA, _dart_PostThreadMessageA>(
            'PostThreadMessageA'))(
      idThread,
      Msg,
      wParam,
      lParam,
    );
  }

  _dart_PostThreadMessageA? _PostThreadMessageA;

  int PostThreadMessageW(
    int idThread,
    int Msg,
    int wParam,
    int lParam,
  ) {
    return (_PostThreadMessageW ??=
        _dylib.lookupFunction<_c_PostThreadMessageW, _dart_PostThreadMessageW>(
            'PostThreadMessageW'))(
      idThread,
      Msg,
      wParam,
      lParam,
    );
  }

  _dart_PostThreadMessageW? _PostThreadMessageW;

  int AttachThreadInput(
    int idAttach,
    int idAttachTo,
    int fAttach,
  ) {
    return (_AttachThreadInput ??=
        _dylib.lookupFunction<_c_AttachThreadInput, _dart_AttachThreadInput>(
            'AttachThreadInput'))(
      idAttach,
      idAttachTo,
      fAttach,
    );
  }

  _dart_AttachThreadInput? _AttachThreadInput;

  int ReplyMessage(
    int lResult,
  ) {
    return (_ReplyMessage ??= _dylib
        .lookupFunction<_c_ReplyMessage, _dart_ReplyMessage>('ReplyMessage'))(
      lResult,
    );
  }

  _dart_ReplyMessage? _ReplyMessage;

  int WaitMessage() {
    return (_WaitMessage ??= _dylib
        .lookupFunction<_c_WaitMessage, _dart_WaitMessage>('WaitMessage'))();
  }

  _dart_WaitMessage? _WaitMessage;

  int WaitForInputIdle(
    ffi.Pointer<ffi.Void> hProcess,
    int dwMilliseconds,
  ) {
    return (_WaitForInputIdle ??=
        _dylib.lookupFunction<_c_WaitForInputIdle, _dart_WaitForInputIdle>(
            'WaitForInputIdle'))(
      hProcess,
      dwMilliseconds,
    );
  }

  _dart_WaitForInputIdle? _WaitForInputIdle;

  int DefWindowProcA(
    ffi.Pointer<HWND__> hWnd,
    int Msg,
    int wParam,
    int lParam,
  ) {
    return (_DefWindowProcA ??=
        _dylib.lookupFunction<_c_DefWindowProcA, _dart_DefWindowProcA>(
            'DefWindowProcA'))(
      hWnd,
      Msg,
      wParam,
      lParam,
    );
  }

  _dart_DefWindowProcA? _DefWindowProcA;

  int DefWindowProcW(
    ffi.Pointer<HWND__> hWnd,
    int Msg,
    int wParam,
    int lParam,
  ) {
    return (_DefWindowProcW ??=
        _dylib.lookupFunction<_c_DefWindowProcW, _dart_DefWindowProcW>(
            'DefWindowProcW'))(
      hWnd,
      Msg,
      wParam,
      lParam,
    );
  }

  _dart_DefWindowProcW? _DefWindowProcW;

  void PostQuitMessage(
    int nExitCode,
  ) {
    return (_PostQuitMessage ??=
        _dylib.lookupFunction<_c_PostQuitMessage, _dart_PostQuitMessage>(
            'PostQuitMessage'))(
      nExitCode,
    );
  }

  _dart_PostQuitMessage? _PostQuitMessage;

  int CallWindowProcA(
    ffi.Pointer<ffi.NativeFunction<WNDPROC>> lpPrevWndFunc,
    ffi.Pointer<HWND__> hWnd,
    int Msg,
    int wParam,
    int lParam,
  ) {
    return (_CallWindowProcA ??=
        _dylib.lookupFunction<_c_CallWindowProcA, _dart_CallWindowProcA>(
            'CallWindowProcA'))(
      lpPrevWndFunc,
      hWnd,
      Msg,
      wParam,
      lParam,
    );
  }

  _dart_CallWindowProcA? _CallWindowProcA;

  int CallWindowProcW(
    ffi.Pointer<ffi.NativeFunction<WNDPROC>> lpPrevWndFunc,
    ffi.Pointer<HWND__> hWnd,
    int Msg,
    int wParam,
    int lParam,
  ) {
    return (_CallWindowProcW ??=
        _dylib.lookupFunction<_c_CallWindowProcW, _dart_CallWindowProcW>(
            'CallWindowProcW'))(
      lpPrevWndFunc,
      hWnd,
      Msg,
      wParam,
      lParam,
    );
  }

  _dart_CallWindowProcW? _CallWindowProcW;

  int InSendMessage() {
    return (_InSendMessage ??=
        _dylib.lookupFunction<_c_InSendMessage, _dart_InSendMessage>(
            'InSendMessage'))();
  }

  _dart_InSendMessage? _InSendMessage;

  int InSendMessageEx(
    ffi.Pointer<ffi.Void> lpReserved,
  ) {
    return (_InSendMessageEx ??=
        _dylib.lookupFunction<_c_InSendMessageEx, _dart_InSendMessageEx>(
            'InSendMessageEx'))(
      lpReserved,
    );
  }

  _dart_InSendMessageEx? _InSendMessageEx;

  int GetDoubleClickTime() {
    return (_GetDoubleClickTime ??=
        _dylib.lookupFunction<_c_GetDoubleClickTime, _dart_GetDoubleClickTime>(
            'GetDoubleClickTime'))();
  }

  _dart_GetDoubleClickTime? _GetDoubleClickTime;

  int SetDoubleClickTime(
    int arg0,
  ) {
    return (_SetDoubleClickTime ??=
        _dylib.lookupFunction<_c_SetDoubleClickTime, _dart_SetDoubleClickTime>(
            'SetDoubleClickTime'))(
      arg0,
    );
  }

  _dart_SetDoubleClickTime? _SetDoubleClickTime;

  int RegisterClassA(
    ffi.Pointer<LPWNDCLASSA> lpWndClass,
  ) {
    return (_RegisterClassA ??=
        _dylib.lookupFunction<_c_RegisterClassA, _dart_RegisterClassA>(
            'RegisterClassA'))(
      lpWndClass,
    );
  }

  _dart_RegisterClassA? _RegisterClassA;

  int RegisterClassW(
    ffi.Pointer<LPWNDCLASSW> lpWndClass,
  ) {
    return (_RegisterClassW ??=
        _dylib.lookupFunction<_c_RegisterClassW, _dart_RegisterClassW>(
            'RegisterClassW'))(
      lpWndClass,
    );
  }

  _dart_RegisterClassW? _RegisterClassW;

  int UnregisterClassA(
    ffi.Pointer<ffi.Int8> lpClassName,
    ffi.Pointer<HINSTANCE__> hInstance,
  ) {
    return (_UnregisterClassA ??=
        _dylib.lookupFunction<_c_UnregisterClassA, _dart_UnregisterClassA>(
            'UnregisterClassA'))(
      lpClassName,
      hInstance,
    );
  }

  _dart_UnregisterClassA? _UnregisterClassA;

  int UnregisterClassW(
    ffi.Pointer<ffi.Uint16> lpClassName,
    ffi.Pointer<HINSTANCE__> hInstance,
  ) {
    return (_UnregisterClassW ??=
        _dylib.lookupFunction<_c_UnregisterClassW, _dart_UnregisterClassW>(
            'UnregisterClassW'))(
      lpClassName,
      hInstance,
    );
  }

  _dart_UnregisterClassW? _UnregisterClassW;

  int GetClassInfoA(
    ffi.Pointer<HINSTANCE__> hInstance,
    ffi.Pointer<ffi.Int8> lpClassName,
    ffi.Pointer<LPWNDCLASSA> lpWndClass,
  ) {
    return (_GetClassInfoA ??=
        _dylib.lookupFunction<_c_GetClassInfoA, _dart_GetClassInfoA>(
            'GetClassInfoA'))(
      hInstance,
      lpClassName,
      lpWndClass,
    );
  }

  _dart_GetClassInfoA? _GetClassInfoA;

  int GetClassInfoW(
    ffi.Pointer<HINSTANCE__> hInstance,
    ffi.Pointer<ffi.Uint16> lpClassName,
    ffi.Pointer<LPWNDCLASSW> lpWndClass,
  ) {
    return (_GetClassInfoW ??=
        _dylib.lookupFunction<_c_GetClassInfoW, _dart_GetClassInfoW>(
            'GetClassInfoW'))(
      hInstance,
      lpClassName,
      lpWndClass,
    );
  }

  _dart_GetClassInfoW? _GetClassInfoW;

  int RegisterClassExA(
    ffi.Pointer<LPWNDCLASSEXA> arg0,
  ) {
    return (_RegisterClassExA ??=
        _dylib.lookupFunction<_c_RegisterClassExA, _dart_RegisterClassExA>(
            'RegisterClassExA'))(
      arg0,
    );
  }

  _dart_RegisterClassExA? _RegisterClassExA;

  int RegisterClassExW(
    ffi.Pointer<LPWNDCLASSEXW> arg0,
  ) {
    return (_RegisterClassExW ??=
        _dylib.lookupFunction<_c_RegisterClassExW, _dart_RegisterClassExW>(
            'RegisterClassExW'))(
      arg0,
    );
  }

  _dart_RegisterClassExW? _RegisterClassExW;

  int GetClassInfoExA(
    ffi.Pointer<HINSTANCE__> hInstance,
    ffi.Pointer<ffi.Int8> lpszClass,
    ffi.Pointer<LPWNDCLASSEXA> lpwcx,
  ) {
    return (_GetClassInfoExA ??=
        _dylib.lookupFunction<_c_GetClassInfoExA, _dart_GetClassInfoExA>(
            'GetClassInfoExA'))(
      hInstance,
      lpszClass,
      lpwcx,
    );
  }

  _dart_GetClassInfoExA? _GetClassInfoExA;

  int GetClassInfoExW(
    ffi.Pointer<HINSTANCE__> hInstance,
    ffi.Pointer<ffi.Uint16> lpszClass,
    ffi.Pointer<LPWNDCLASSEXW> lpwcx,
  ) {
    return (_GetClassInfoExW ??=
        _dylib.lookupFunction<_c_GetClassInfoExW, _dart_GetClassInfoExW>(
            'GetClassInfoExW'))(
      hInstance,
      lpszClass,
      lpwcx,
    );
  }

  _dart_GetClassInfoExW? _GetClassInfoExW;

  ffi.Pointer<HWND__> CreateWindowExA(
    int dwExStyle,
    ffi.Pointer<ffi.Int8> lpClassName,
    ffi.Pointer<ffi.Int8> lpWindowName,
    int dwStyle,
    int X,
    int Y,
    int nWidth,
    int nHeight,
    ffi.Pointer<HWND__> hWndParent,
    ffi.Pointer<HMENU__> hMenu,
    ffi.Pointer<HINSTANCE__> hInstance,
    ffi.Pointer<ffi.Void> lpParam,
  ) {
    return (_CreateWindowExA ??=
        _dylib.lookupFunction<_c_CreateWindowExA, _dart_CreateWindowExA>(
            'CreateWindowExA'))(
      dwExStyle,
      lpClassName,
      lpWindowName,
      dwStyle,
      X,
      Y,
      nWidth,
      nHeight,
      hWndParent,
      hMenu,
      hInstance,
      lpParam,
    );
  }

  _dart_CreateWindowExA? _CreateWindowExA;

  ffi.Pointer<HWND__> CreateWindowExW(
    int dwExStyle,
    ffi.Pointer<ffi.Uint16> lpClassName,
    ffi.Pointer<ffi.Uint16> lpWindowName,
    int dwStyle,
    int X,
    int Y,
    int nWidth,
    int nHeight,
    ffi.Pointer<HWND__> hWndParent,
    ffi.Pointer<HMENU__> hMenu,
    ffi.Pointer<HINSTANCE__> hInstance,
    ffi.Pointer<ffi.Void> lpParam,
  ) {
    return (_CreateWindowExW ??=
        _dylib.lookupFunction<_c_CreateWindowExW, _dart_CreateWindowExW>(
            'CreateWindowExW'))(
      dwExStyle,
      lpClassName,
      lpWindowName,
      dwStyle,
      X,
      Y,
      nWidth,
      nHeight,
      hWndParent,
      hMenu,
      hInstance,
      lpParam,
    );
  }

  _dart_CreateWindowExW? _CreateWindowExW;

  int IsWindow(
    ffi.Pointer<HWND__> hWnd,
  ) {
    return (_IsWindow ??=
        _dylib.lookupFunction<_c_IsWindow, _dart_IsWindow>('IsWindow'))(
      hWnd,
    );
  }

  _dart_IsWindow? _IsWindow;

  int IsMenu(
    ffi.Pointer<HMENU__> hMenu,
  ) {
    return (_IsMenu ??=
        _dylib.lookupFunction<_c_IsMenu, _dart_IsMenu>('IsMenu'))(
      hMenu,
    );
  }

  _dart_IsMenu? _IsMenu;

  int IsChild(
    ffi.Pointer<HWND__> hWndParent,
    ffi.Pointer<HWND__> hWnd,
  ) {
    return (_IsChild ??=
        _dylib.lookupFunction<_c_IsChild, _dart_IsChild>('IsChild'))(
      hWndParent,
      hWnd,
    );
  }

  _dart_IsChild? _IsChild;

  int DestroyWindow(
    ffi.Pointer<HWND__> hWnd,
  ) {
    return (_DestroyWindow ??=
        _dylib.lookupFunction<_c_DestroyWindow, _dart_DestroyWindow>(
            'DestroyWindow'))(
      hWnd,
    );
  }

  _dart_DestroyWindow? _DestroyWindow;

  int ShowWindow(
    ffi.Pointer<HWND__> hWnd,
    int nCmdShow,
  ) {
    return (_ShowWindow ??=
        _dylib.lookupFunction<_c_ShowWindow, _dart_ShowWindow>('ShowWindow'))(
      hWnd,
      nCmdShow,
    );
  }

  _dart_ShowWindow? _ShowWindow;

  int AnimateWindow(
    ffi.Pointer<HWND__> hWnd,
    int dwTime,
    int dwFlags,
  ) {
    return (_AnimateWindow ??=
        _dylib.lookupFunction<_c_AnimateWindow, _dart_AnimateWindow>(
            'AnimateWindow'))(
      hWnd,
      dwTime,
      dwFlags,
    );
  }

  _dart_AnimateWindow? _AnimateWindow;

  int UpdateLayeredWindow(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<HDC__> hdcDst,
    ffi.Pointer<LPPOINT> pptDst,
    ffi.Pointer<LPSIZE> psize,
    ffi.Pointer<HDC__> hdcSrc,
    ffi.Pointer<LPPOINT> pptSrc,
    int crKey,
    ffi.Pointer<PBLENDFUNCTION> pblend,
    int dwFlags,
  ) {
    return (_UpdateLayeredWindow ??= _dylib.lookupFunction<
        _c_UpdateLayeredWindow,
        _dart_UpdateLayeredWindow>('UpdateLayeredWindow'))(
      hWnd,
      hdcDst,
      pptDst,
      psize,
      hdcSrc,
      pptSrc,
      crKey,
      pblend,
      dwFlags,
    );
  }

  _dart_UpdateLayeredWindow? _UpdateLayeredWindow;

  int UpdateLayeredWindowIndirect(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<PUPDATELAYEREDWINDOWINFO> pULWInfo,
  ) {
    return (_UpdateLayeredWindowIndirect ??= _dylib.lookupFunction<
        _c_UpdateLayeredWindowIndirect,
        _dart_UpdateLayeredWindowIndirect>('UpdateLayeredWindowIndirect'))(
      hWnd,
      pULWInfo,
    );
  }

  _dart_UpdateLayeredWindowIndirect? _UpdateLayeredWindowIndirect;

  int GetLayeredWindowAttributes(
    ffi.Pointer<HWND__> hwnd,
    ffi.Pointer<ffi.Uint64> pcrKey,
    ffi.Pointer<ffi.Uint8> pbAlpha,
    ffi.Pointer<ffi.Uint64> pdwFlags,
  ) {
    return (_GetLayeredWindowAttributes ??= _dylib.lookupFunction<
        _c_GetLayeredWindowAttributes,
        _dart_GetLayeredWindowAttributes>('GetLayeredWindowAttributes'))(
      hwnd,
      pcrKey,
      pbAlpha,
      pdwFlags,
    );
  }

  _dart_GetLayeredWindowAttributes? _GetLayeredWindowAttributes;

  int PrintWindow(
    ffi.Pointer<HWND__> hwnd,
    ffi.Pointer<HDC__> hdcBlt,
    int nFlags,
  ) {
    return (_PrintWindow ??= _dylib
        .lookupFunction<_c_PrintWindow, _dart_PrintWindow>('PrintWindow'))(
      hwnd,
      hdcBlt,
      nFlags,
    );
  }

  _dart_PrintWindow? _PrintWindow;

  int SetLayeredWindowAttributes(
    ffi.Pointer<HWND__> hwnd,
    int crKey,
    int bAlpha,
    int dwFlags,
  ) {
    return (_SetLayeredWindowAttributes ??= _dylib.lookupFunction<
        _c_SetLayeredWindowAttributes,
        _dart_SetLayeredWindowAttributes>('SetLayeredWindowAttributes'))(
      hwnd,
      crKey,
      bAlpha,
      dwFlags,
    );
  }

  _dart_SetLayeredWindowAttributes? _SetLayeredWindowAttributes;

  int ShowWindowAsync(
    ffi.Pointer<HWND__> hWnd,
    int nCmdShow,
  ) {
    return (_ShowWindowAsync ??=
        _dylib.lookupFunction<_c_ShowWindowAsync, _dart_ShowWindowAsync>(
            'ShowWindowAsync'))(
      hWnd,
      nCmdShow,
    );
  }

  _dart_ShowWindowAsync? _ShowWindowAsync;

  int FlashWindow(
    ffi.Pointer<HWND__> hWnd,
    int bInvert,
  ) {
    return (_FlashWindow ??= _dylib
        .lookupFunction<_c_FlashWindow, _dart_FlashWindow>('FlashWindow'))(
      hWnd,
      bInvert,
    );
  }

  _dart_FlashWindow? _FlashWindow;

  int FlashWindowEx(
    ffi.Pointer<PFLASHWINFO> pfwi,
  ) {
    return (_FlashWindowEx ??=
        _dylib.lookupFunction<_c_FlashWindowEx, _dart_FlashWindowEx>(
            'FlashWindowEx'))(
      pfwi,
    );
  }

  _dart_FlashWindowEx? _FlashWindowEx;

  int ShowOwnedPopups(
    ffi.Pointer<HWND__> hWnd,
    int fShow,
  ) {
    return (_ShowOwnedPopups ??=
        _dylib.lookupFunction<_c_ShowOwnedPopups, _dart_ShowOwnedPopups>(
            'ShowOwnedPopups'))(
      hWnd,
      fShow,
    );
  }

  _dart_ShowOwnedPopups? _ShowOwnedPopups;

  int OpenIcon(
    ffi.Pointer<HWND__> hWnd,
  ) {
    return (_OpenIcon ??=
        _dylib.lookupFunction<_c_OpenIcon, _dart_OpenIcon>('OpenIcon'))(
      hWnd,
    );
  }

  _dart_OpenIcon? _OpenIcon;

  int CloseWindow(
    ffi.Pointer<HWND__> hWnd,
  ) {
    return (_CloseWindow ??= _dylib
        .lookupFunction<_c_CloseWindow, _dart_CloseWindow>('CloseWindow'))(
      hWnd,
    );
  }

  _dart_CloseWindow? _CloseWindow;

  int MoveWindow(
    ffi.Pointer<HWND__> hWnd,
    int X,
    int Y,
    int nWidth,
    int nHeight,
    int bRepaint,
  ) {
    return (_MoveWindow ??=
        _dylib.lookupFunction<_c_MoveWindow, _dart_MoveWindow>('MoveWindow'))(
      hWnd,
      X,
      Y,
      nWidth,
      nHeight,
      bRepaint,
    );
  }

  _dart_MoveWindow? _MoveWindow;

  int SetWindowPos(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<HWND__> hWndInsertAfter,
    int X,
    int Y,
    int cx,
    int cy,
    int uFlags,
  ) {
    return (_SetWindowPos ??= _dylib
        .lookupFunction<_c_SetWindowPos, _dart_SetWindowPos>('SetWindowPos'))(
      hWnd,
      hWndInsertAfter,
      X,
      Y,
      cx,
      cy,
      uFlags,
    );
  }

  _dart_SetWindowPos? _SetWindowPos;

  int GetWindowPlacement(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<WINDOWPLACEMENT> lpwndpl,
  ) {
    return (_GetWindowPlacement ??=
        _dylib.lookupFunction<_c_GetWindowPlacement, _dart_GetWindowPlacement>(
            'GetWindowPlacement'))(
      hWnd,
      lpwndpl,
    );
  }

  _dart_GetWindowPlacement? _GetWindowPlacement;

  int SetWindowPlacement(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<WINDOWPLACEMENT> lpwndpl,
  ) {
    return (_SetWindowPlacement ??=
        _dylib.lookupFunction<_c_SetWindowPlacement, _dart_SetWindowPlacement>(
            'SetWindowPlacement'))(
      hWnd,
      lpwndpl,
    );
  }

  _dart_SetWindowPlacement? _SetWindowPlacement;

  int GetWindowDisplayAffinity(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<ffi.Uint64> pdwAffinity,
  ) {
    return (_GetWindowDisplayAffinity ??= _dylib.lookupFunction<
        _c_GetWindowDisplayAffinity,
        _dart_GetWindowDisplayAffinity>('GetWindowDisplayAffinity'))(
      hWnd,
      pdwAffinity,
    );
  }

  _dart_GetWindowDisplayAffinity? _GetWindowDisplayAffinity;

  int SetWindowDisplayAffinity(
    ffi.Pointer<HWND__> hWnd,
    int dwAffinity,
  ) {
    return (_SetWindowDisplayAffinity ??= _dylib.lookupFunction<
        _c_SetWindowDisplayAffinity,
        _dart_SetWindowDisplayAffinity>('SetWindowDisplayAffinity'))(
      hWnd,
      dwAffinity,
    );
  }

  _dart_SetWindowDisplayAffinity? _SetWindowDisplayAffinity;

  ffi.Pointer<ffi.Void> BeginDeferWindowPos(
    int nNumWindows,
  ) {
    return (_BeginDeferWindowPos ??= _dylib.lookupFunction<
        _c_BeginDeferWindowPos,
        _dart_BeginDeferWindowPos>('BeginDeferWindowPos'))(
      nNumWindows,
    );
  }

  _dart_BeginDeferWindowPos? _BeginDeferWindowPos;

  ffi.Pointer<ffi.Void> DeferWindowPos(
    ffi.Pointer<ffi.Void> hWinPosInfo,
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<HWND__> hWndInsertAfter,
    int x,
    int y,
    int cx,
    int cy,
    int uFlags,
  ) {
    return (_DeferWindowPos ??=
        _dylib.lookupFunction<_c_DeferWindowPos, _dart_DeferWindowPos>(
            'DeferWindowPos'))(
      hWinPosInfo,
      hWnd,
      hWndInsertAfter,
      x,
      y,
      cx,
      cy,
      uFlags,
    );
  }

  _dart_DeferWindowPos? _DeferWindowPos;

  int EndDeferWindowPos(
    ffi.Pointer<ffi.Void> hWinPosInfo,
  ) {
    return (_EndDeferWindowPos ??=
        _dylib.lookupFunction<_c_EndDeferWindowPos, _dart_EndDeferWindowPos>(
            'EndDeferWindowPos'))(
      hWinPosInfo,
    );
  }

  _dart_EndDeferWindowPos? _EndDeferWindowPos;

  int IsWindowVisible(
    ffi.Pointer<HWND__> hWnd,
  ) {
    return (_IsWindowVisible ??=
        _dylib.lookupFunction<_c_IsWindowVisible, _dart_IsWindowVisible>(
            'IsWindowVisible'))(
      hWnd,
    );
  }

  _dart_IsWindowVisible? _IsWindowVisible;

  int IsIconic(
    ffi.Pointer<HWND__> hWnd,
  ) {
    return (_IsIconic ??=
        _dylib.lookupFunction<_c_IsIconic, _dart_IsIconic>('IsIconic'))(
      hWnd,
    );
  }

  _dart_IsIconic? _IsIconic;

  int AnyPopup() {
    return (_AnyPopup ??=
        _dylib.lookupFunction<_c_AnyPopup, _dart_AnyPopup>('AnyPopup'))();
  }

  _dart_AnyPopup? _AnyPopup;

  int BringWindowToTop(
    ffi.Pointer<HWND__> hWnd,
  ) {
    return (_BringWindowToTop ??=
        _dylib.lookupFunction<_c_BringWindowToTop, _dart_BringWindowToTop>(
            'BringWindowToTop'))(
      hWnd,
    );
  }

  _dart_BringWindowToTop? _BringWindowToTop;

  int IsZoomed(
    ffi.Pointer<HWND__> hWnd,
  ) {
    return (_IsZoomed ??=
        _dylib.lookupFunction<_c_IsZoomed, _dart_IsZoomed>('IsZoomed'))(
      hWnd,
    );
  }

  _dart_IsZoomed? _IsZoomed;

  ffi.Pointer<HWND__> CreateDialogParamA(
    ffi.Pointer<HINSTANCE__> hInstance,
    ffi.Pointer<ffi.Int8> lpTemplateName,
    ffi.Pointer<HWND__> hWndParent,
    ffi.Pointer<ffi.NativeFunction<DLGPROC>> lpDialogFunc,
    int dwInitParam,
  ) {
    return (_CreateDialogParamA ??=
        _dylib.lookupFunction<_c_CreateDialogParamA, _dart_CreateDialogParamA>(
            'CreateDialogParamA'))(
      hInstance,
      lpTemplateName,
      hWndParent,
      lpDialogFunc,
      dwInitParam,
    );
  }

  _dart_CreateDialogParamA? _CreateDialogParamA;

  ffi.Pointer<HWND__> CreateDialogParamW(
    ffi.Pointer<HINSTANCE__> hInstance,
    ffi.Pointer<ffi.Uint16> lpTemplateName,
    ffi.Pointer<HWND__> hWndParent,
    ffi.Pointer<ffi.NativeFunction<DLGPROC>> lpDialogFunc,
    int dwInitParam,
  ) {
    return (_CreateDialogParamW ??=
        _dylib.lookupFunction<_c_CreateDialogParamW, _dart_CreateDialogParamW>(
            'CreateDialogParamW'))(
      hInstance,
      lpTemplateName,
      hWndParent,
      lpDialogFunc,
      dwInitParam,
    );
  }

  _dart_CreateDialogParamW? _CreateDialogParamW;

  ffi.Pointer<HWND__> CreateDialogIndirectParamA(
    ffi.Pointer<HINSTANCE__> hInstance,
    ffi.Pointer<DLGTEMPLATE> lpTemplate,
    ffi.Pointer<HWND__> hWndParent,
    ffi.Pointer<ffi.NativeFunction<DLGPROC>> lpDialogFunc,
    int dwInitParam,
  ) {
    return (_CreateDialogIndirectParamA ??= _dylib.lookupFunction<
        _c_CreateDialogIndirectParamA,
        _dart_CreateDialogIndirectParamA>('CreateDialogIndirectParamA'))(
      hInstance,
      lpTemplate,
      hWndParent,
      lpDialogFunc,
      dwInitParam,
    );
  }

  _dart_CreateDialogIndirectParamA? _CreateDialogIndirectParamA;

  ffi.Pointer<HWND__> CreateDialogIndirectParamW(
    ffi.Pointer<HINSTANCE__> hInstance,
    ffi.Pointer<DLGTEMPLATE> lpTemplate,
    ffi.Pointer<HWND__> hWndParent,
    ffi.Pointer<ffi.NativeFunction<DLGPROC>> lpDialogFunc,
    int dwInitParam,
  ) {
    return (_CreateDialogIndirectParamW ??= _dylib.lookupFunction<
        _c_CreateDialogIndirectParamW,
        _dart_CreateDialogIndirectParamW>('CreateDialogIndirectParamW'))(
      hInstance,
      lpTemplate,
      hWndParent,
      lpDialogFunc,
      dwInitParam,
    );
  }

  _dart_CreateDialogIndirectParamW? _CreateDialogIndirectParamW;

  int DialogBoxParamA(
    ffi.Pointer<HINSTANCE__> hInstance,
    ffi.Pointer<ffi.Int8> lpTemplateName,
    ffi.Pointer<HWND__> hWndParent,
    ffi.Pointer<ffi.NativeFunction<DLGPROC>> lpDialogFunc,
    int dwInitParam,
  ) {
    return (_DialogBoxParamA ??=
        _dylib.lookupFunction<_c_DialogBoxParamA, _dart_DialogBoxParamA>(
            'DialogBoxParamA'))(
      hInstance,
      lpTemplateName,
      hWndParent,
      lpDialogFunc,
      dwInitParam,
    );
  }

  _dart_DialogBoxParamA? _DialogBoxParamA;

  int DialogBoxParamW(
    ffi.Pointer<HINSTANCE__> hInstance,
    ffi.Pointer<ffi.Uint16> lpTemplateName,
    ffi.Pointer<HWND__> hWndParent,
    ffi.Pointer<ffi.NativeFunction<DLGPROC>> lpDialogFunc,
    int dwInitParam,
  ) {
    return (_DialogBoxParamW ??=
        _dylib.lookupFunction<_c_DialogBoxParamW, _dart_DialogBoxParamW>(
            'DialogBoxParamW'))(
      hInstance,
      lpTemplateName,
      hWndParent,
      lpDialogFunc,
      dwInitParam,
    );
  }

  _dart_DialogBoxParamW? _DialogBoxParamW;

  int DialogBoxIndirectParamA(
    ffi.Pointer<HINSTANCE__> hInstance,
    ffi.Pointer<DLGTEMPLATE> hDialogTemplate,
    ffi.Pointer<HWND__> hWndParent,
    ffi.Pointer<ffi.NativeFunction<DLGPROC>> lpDialogFunc,
    int dwInitParam,
  ) {
    return (_DialogBoxIndirectParamA ??= _dylib.lookupFunction<
        _c_DialogBoxIndirectParamA,
        _dart_DialogBoxIndirectParamA>('DialogBoxIndirectParamA'))(
      hInstance,
      hDialogTemplate,
      hWndParent,
      lpDialogFunc,
      dwInitParam,
    );
  }

  _dart_DialogBoxIndirectParamA? _DialogBoxIndirectParamA;

  int DialogBoxIndirectParamW(
    ffi.Pointer<HINSTANCE__> hInstance,
    ffi.Pointer<DLGTEMPLATE> hDialogTemplate,
    ffi.Pointer<HWND__> hWndParent,
    ffi.Pointer<ffi.NativeFunction<DLGPROC>> lpDialogFunc,
    int dwInitParam,
  ) {
    return (_DialogBoxIndirectParamW ??= _dylib.lookupFunction<
        _c_DialogBoxIndirectParamW,
        _dart_DialogBoxIndirectParamW>('DialogBoxIndirectParamW'))(
      hInstance,
      hDialogTemplate,
      hWndParent,
      lpDialogFunc,
      dwInitParam,
    );
  }

  _dart_DialogBoxIndirectParamW? _DialogBoxIndirectParamW;

  int EndDialog(
    ffi.Pointer<HWND__> hDlg,
    int nResult,
  ) {
    return (_EndDialog ??=
        _dylib.lookupFunction<_c_EndDialog, _dart_EndDialog>('EndDialog'))(
      hDlg,
      nResult,
    );
  }

  _dart_EndDialog? _EndDialog;

  ffi.Pointer<HWND__> GetDlgItem(
    ffi.Pointer<HWND__> hDlg,
    int nIDDlgItem,
  ) {
    return (_GetDlgItem ??=
        _dylib.lookupFunction<_c_GetDlgItem, _dart_GetDlgItem>('GetDlgItem'))(
      hDlg,
      nIDDlgItem,
    );
  }

  _dart_GetDlgItem? _GetDlgItem;

  int SetDlgItemInt(
    ffi.Pointer<HWND__> hDlg,
    int nIDDlgItem,
    int uValue,
    int bSigned,
  ) {
    return (_SetDlgItemInt ??=
        _dylib.lookupFunction<_c_SetDlgItemInt, _dart_SetDlgItemInt>(
            'SetDlgItemInt'))(
      hDlg,
      nIDDlgItem,
      uValue,
      bSigned,
    );
  }

  _dart_SetDlgItemInt? _SetDlgItemInt;

  int GetDlgItemInt(
    ffi.Pointer<HWND__> hDlg,
    int nIDDlgItem,
    ffi.Pointer<ffi.Int32> lpTranslated,
    int bSigned,
  ) {
    return (_GetDlgItemInt ??=
        _dylib.lookupFunction<_c_GetDlgItemInt, _dart_GetDlgItemInt>(
            'GetDlgItemInt'))(
      hDlg,
      nIDDlgItem,
      lpTranslated,
      bSigned,
    );
  }

  _dart_GetDlgItemInt? _GetDlgItemInt;

  int SetDlgItemTextA(
    ffi.Pointer<HWND__> hDlg,
    int nIDDlgItem,
    ffi.Pointer<ffi.Int8> lpString,
  ) {
    return (_SetDlgItemTextA ??=
        _dylib.lookupFunction<_c_SetDlgItemTextA, _dart_SetDlgItemTextA>(
            'SetDlgItemTextA'))(
      hDlg,
      nIDDlgItem,
      lpString,
    );
  }

  _dart_SetDlgItemTextA? _SetDlgItemTextA;

  int SetDlgItemTextW(
    ffi.Pointer<HWND__> hDlg,
    int nIDDlgItem,
    ffi.Pointer<ffi.Uint16> lpString,
  ) {
    return (_SetDlgItemTextW ??=
        _dylib.lookupFunction<_c_SetDlgItemTextW, _dart_SetDlgItemTextW>(
            'SetDlgItemTextW'))(
      hDlg,
      nIDDlgItem,
      lpString,
    );
  }

  _dart_SetDlgItemTextW? _SetDlgItemTextW;

  int GetDlgItemTextA(
    ffi.Pointer<HWND__> hDlg,
    int nIDDlgItem,
    ffi.Pointer<ffi.Int8> lpString,
    int cchMax,
  ) {
    return (_GetDlgItemTextA ??=
        _dylib.lookupFunction<_c_GetDlgItemTextA, _dart_GetDlgItemTextA>(
            'GetDlgItemTextA'))(
      hDlg,
      nIDDlgItem,
      lpString,
      cchMax,
    );
  }

  _dart_GetDlgItemTextA? _GetDlgItemTextA;

  int GetDlgItemTextW(
    ffi.Pointer<HWND__> hDlg,
    int nIDDlgItem,
    ffi.Pointer<ffi.Uint16> lpString,
    int cchMax,
  ) {
    return (_GetDlgItemTextW ??=
        _dylib.lookupFunction<_c_GetDlgItemTextW, _dart_GetDlgItemTextW>(
            'GetDlgItemTextW'))(
      hDlg,
      nIDDlgItem,
      lpString,
      cchMax,
    );
  }

  _dart_GetDlgItemTextW? _GetDlgItemTextW;

  int CheckDlgButton(
    ffi.Pointer<HWND__> hDlg,
    int nIDButton,
    int uCheck,
  ) {
    return (_CheckDlgButton ??=
        _dylib.lookupFunction<_c_CheckDlgButton, _dart_CheckDlgButton>(
            'CheckDlgButton'))(
      hDlg,
      nIDButton,
      uCheck,
    );
  }

  _dart_CheckDlgButton? _CheckDlgButton;

  int CheckRadioButton(
    ffi.Pointer<HWND__> hDlg,
    int nIDFirstButton,
    int nIDLastButton,
    int nIDCheckButton,
  ) {
    return (_CheckRadioButton ??=
        _dylib.lookupFunction<_c_CheckRadioButton, _dart_CheckRadioButton>(
            'CheckRadioButton'))(
      hDlg,
      nIDFirstButton,
      nIDLastButton,
      nIDCheckButton,
    );
  }

  _dart_CheckRadioButton? _CheckRadioButton;

  int IsDlgButtonChecked(
    ffi.Pointer<HWND__> hDlg,
    int nIDButton,
  ) {
    return (_IsDlgButtonChecked ??=
        _dylib.lookupFunction<_c_IsDlgButtonChecked, _dart_IsDlgButtonChecked>(
            'IsDlgButtonChecked'))(
      hDlg,
      nIDButton,
    );
  }

  _dart_IsDlgButtonChecked? _IsDlgButtonChecked;

  int SendDlgItemMessageA(
    ffi.Pointer<HWND__> hDlg,
    int nIDDlgItem,
    int Msg,
    int wParam,
    int lParam,
  ) {
    return (_SendDlgItemMessageA ??= _dylib.lookupFunction<
        _c_SendDlgItemMessageA,
        _dart_SendDlgItemMessageA>('SendDlgItemMessageA'))(
      hDlg,
      nIDDlgItem,
      Msg,
      wParam,
      lParam,
    );
  }

  _dart_SendDlgItemMessageA? _SendDlgItemMessageA;

  int SendDlgItemMessageW(
    ffi.Pointer<HWND__> hDlg,
    int nIDDlgItem,
    int Msg,
    int wParam,
    int lParam,
  ) {
    return (_SendDlgItemMessageW ??= _dylib.lookupFunction<
        _c_SendDlgItemMessageW,
        _dart_SendDlgItemMessageW>('SendDlgItemMessageW'))(
      hDlg,
      nIDDlgItem,
      Msg,
      wParam,
      lParam,
    );
  }

  _dart_SendDlgItemMessageW? _SendDlgItemMessageW;

  ffi.Pointer<HWND__> GetNextDlgGroupItem(
    ffi.Pointer<HWND__> hDlg,
    ffi.Pointer<HWND__> hCtl,
    int bPrevious,
  ) {
    return (_GetNextDlgGroupItem ??= _dylib.lookupFunction<
        _c_GetNextDlgGroupItem,
        _dart_GetNextDlgGroupItem>('GetNextDlgGroupItem'))(
      hDlg,
      hCtl,
      bPrevious,
    );
  }

  _dart_GetNextDlgGroupItem? _GetNextDlgGroupItem;

  ffi.Pointer<HWND__> GetNextDlgTabItem(
    ffi.Pointer<HWND__> hDlg,
    ffi.Pointer<HWND__> hCtl,
    int bPrevious,
  ) {
    return (_GetNextDlgTabItem ??=
        _dylib.lookupFunction<_c_GetNextDlgTabItem, _dart_GetNextDlgTabItem>(
            'GetNextDlgTabItem'))(
      hDlg,
      hCtl,
      bPrevious,
    );
  }

  _dart_GetNextDlgTabItem? _GetNextDlgTabItem;

  int GetDlgCtrlID(
    ffi.Pointer<HWND__> hWnd,
  ) {
    return (_GetDlgCtrlID ??= _dylib
        .lookupFunction<_c_GetDlgCtrlID, _dart_GetDlgCtrlID>('GetDlgCtrlID'))(
      hWnd,
    );
  }

  _dart_GetDlgCtrlID? _GetDlgCtrlID;

  int GetDialogBaseUnits() {
    return (_GetDialogBaseUnits ??=
        _dylib.lookupFunction<_c_GetDialogBaseUnits, _dart_GetDialogBaseUnits>(
            'GetDialogBaseUnits'))();
  }

  _dart_GetDialogBaseUnits? _GetDialogBaseUnits;

  int DefDlgProcA(
    ffi.Pointer<HWND__> hDlg,
    int Msg,
    int wParam,
    int lParam,
  ) {
    return (_DefDlgProcA ??= _dylib
        .lookupFunction<_c_DefDlgProcA, _dart_DefDlgProcA>('DefDlgProcA'))(
      hDlg,
      Msg,
      wParam,
      lParam,
    );
  }

  _dart_DefDlgProcA? _DefDlgProcA;

  int DefDlgProcW(
    ffi.Pointer<HWND__> hDlg,
    int Msg,
    int wParam,
    int lParam,
  ) {
    return (_DefDlgProcW ??= _dylib
        .lookupFunction<_c_DefDlgProcW, _dart_DefDlgProcW>('DefDlgProcW'))(
      hDlg,
      Msg,
      wParam,
      lParam,
    );
  }

  _dart_DefDlgProcW? _DefDlgProcW;

  int SetDialogControlDpiChangeBehavior(
    ffi.Pointer<HWND__> hWnd,
    int mask,
    int values,
  ) {
    return (_SetDialogControlDpiChangeBehavior ??= _dylib.lookupFunction<
            _c_SetDialogControlDpiChangeBehavior,
            _dart_SetDialogControlDpiChangeBehavior>(
        'SetDialogControlDpiChangeBehavior'))(
      hWnd,
      mask,
      values,
    );
  }

  _dart_SetDialogControlDpiChangeBehavior? _SetDialogControlDpiChangeBehavior;

  int GetDialogControlDpiChangeBehavior(
    ffi.Pointer<HWND__> hWnd,
  ) {
    return (_GetDialogControlDpiChangeBehavior ??= _dylib.lookupFunction<
            _c_GetDialogControlDpiChangeBehavior,
            _dart_GetDialogControlDpiChangeBehavior>(
        'GetDialogControlDpiChangeBehavior'))(
      hWnd,
    );
  }

  _dart_GetDialogControlDpiChangeBehavior? _GetDialogControlDpiChangeBehavior;

  int SetDialogDpiChangeBehavior(
    ffi.Pointer<HWND__> hDlg,
    int mask,
    int values,
  ) {
    return (_SetDialogDpiChangeBehavior ??= _dylib.lookupFunction<
        _c_SetDialogDpiChangeBehavior,
        _dart_SetDialogDpiChangeBehavior>('SetDialogDpiChangeBehavior'))(
      hDlg,
      mask,
      values,
    );
  }

  _dart_SetDialogDpiChangeBehavior? _SetDialogDpiChangeBehavior;

  int GetDialogDpiChangeBehavior(
    ffi.Pointer<HWND__> hDlg,
  ) {
    return (_GetDialogDpiChangeBehavior ??= _dylib.lookupFunction<
        _c_GetDialogDpiChangeBehavior,
        _dart_GetDialogDpiChangeBehavior>('GetDialogDpiChangeBehavior'))(
      hDlg,
    );
  }

  _dart_GetDialogDpiChangeBehavior? _GetDialogDpiChangeBehavior;

  int CallMsgFilterA(
    ffi.Pointer<LPMSG> lpMsg,
    int nCode,
  ) {
    return (_CallMsgFilterA ??=
        _dylib.lookupFunction<_c_CallMsgFilterA, _dart_CallMsgFilterA>(
            'CallMsgFilterA'))(
      lpMsg,
      nCode,
    );
  }

  _dart_CallMsgFilterA? _CallMsgFilterA;

  int CallMsgFilterW(
    ffi.Pointer<LPMSG> lpMsg,
    int nCode,
  ) {
    return (_CallMsgFilterW ??=
        _dylib.lookupFunction<_c_CallMsgFilterW, _dart_CallMsgFilterW>(
            'CallMsgFilterW'))(
      lpMsg,
      nCode,
    );
  }

  _dart_CallMsgFilterW? _CallMsgFilterW;

  int OpenClipboard(
    ffi.Pointer<HWND__> hWndNewOwner,
  ) {
    return (_OpenClipboard ??=
        _dylib.lookupFunction<_c_OpenClipboard, _dart_OpenClipboard>(
            'OpenClipboard'))(
      hWndNewOwner,
    );
  }

  _dart_OpenClipboard? _OpenClipboard;

  int CloseClipboard() {
    return (_CloseClipboard ??=
        _dylib.lookupFunction<_c_CloseClipboard, _dart_CloseClipboard>(
            'CloseClipboard'))();
  }

  _dart_CloseClipboard? _CloseClipboard;

  int GetClipboardSequenceNumber() {
    return (_GetClipboardSequenceNumber ??= _dylib.lookupFunction<
        _c_GetClipboardSequenceNumber,
        _dart_GetClipboardSequenceNumber>('GetClipboardSequenceNumber'))();
  }

  _dart_GetClipboardSequenceNumber? _GetClipboardSequenceNumber;

  ffi.Pointer<HWND__> GetClipboardOwner() {
    return (_GetClipboardOwner ??=
        _dylib.lookupFunction<_c_GetClipboardOwner, _dart_GetClipboardOwner>(
            'GetClipboardOwner'))();
  }

  _dart_GetClipboardOwner? _GetClipboardOwner;

  ffi.Pointer<HWND__> SetClipboardViewer(
    ffi.Pointer<HWND__> hWndNewViewer,
  ) {
    return (_SetClipboardViewer ??=
        _dylib.lookupFunction<_c_SetClipboardViewer, _dart_SetClipboardViewer>(
            'SetClipboardViewer'))(
      hWndNewViewer,
    );
  }

  _dart_SetClipboardViewer? _SetClipboardViewer;

  ffi.Pointer<HWND__> GetClipboardViewer() {
    return (_GetClipboardViewer ??=
        _dylib.lookupFunction<_c_GetClipboardViewer, _dart_GetClipboardViewer>(
            'GetClipboardViewer'))();
  }

  _dart_GetClipboardViewer? _GetClipboardViewer;

  int ChangeClipboardChain(
    ffi.Pointer<HWND__> hWndRemove,
    ffi.Pointer<HWND__> hWndNewNext,
  ) {
    return (_ChangeClipboardChain ??= _dylib.lookupFunction<
        _c_ChangeClipboardChain,
        _dart_ChangeClipboardChain>('ChangeClipboardChain'))(
      hWndRemove,
      hWndNewNext,
    );
  }

  _dart_ChangeClipboardChain? _ChangeClipboardChain;

  ffi.Pointer<ffi.Void> SetClipboardData(
    int uFormat,
    ffi.Pointer<ffi.Void> hMem,
  ) {
    return (_SetClipboardData ??=
        _dylib.lookupFunction<_c_SetClipboardData, _dart_SetClipboardData>(
            'SetClipboardData'))(
      uFormat,
      hMem,
    );
  }

  _dart_SetClipboardData? _SetClipboardData;

  ffi.Pointer<ffi.Void> GetClipboardData(
    int uFormat,
  ) {
    return (_GetClipboardData ??=
        _dylib.lookupFunction<_c_GetClipboardData, _dart_GetClipboardData>(
            'GetClipboardData'))(
      uFormat,
    );
  }

  _dart_GetClipboardData? _GetClipboardData;

  int RegisterClipboardFormatA(
    ffi.Pointer<ffi.Int8> lpszFormat,
  ) {
    return (_RegisterClipboardFormatA ??= _dylib.lookupFunction<
        _c_RegisterClipboardFormatA,
        _dart_RegisterClipboardFormatA>('RegisterClipboardFormatA'))(
      lpszFormat,
    );
  }

  _dart_RegisterClipboardFormatA? _RegisterClipboardFormatA;

  int RegisterClipboardFormatW(
    ffi.Pointer<ffi.Uint16> lpszFormat,
  ) {
    return (_RegisterClipboardFormatW ??= _dylib.lookupFunction<
        _c_RegisterClipboardFormatW,
        _dart_RegisterClipboardFormatW>('RegisterClipboardFormatW'))(
      lpszFormat,
    );
  }

  _dart_RegisterClipboardFormatW? _RegisterClipboardFormatW;

  int CountClipboardFormats() {
    return (_CountClipboardFormats ??= _dylib.lookupFunction<
        _c_CountClipboardFormats,
        _dart_CountClipboardFormats>('CountClipboardFormats'))();
  }

  _dart_CountClipboardFormats? _CountClipboardFormats;

  int EnumClipboardFormats(
    int format,
  ) {
    return (_EnumClipboardFormats ??= _dylib.lookupFunction<
        _c_EnumClipboardFormats,
        _dart_EnumClipboardFormats>('EnumClipboardFormats'))(
      format,
    );
  }

  _dart_EnumClipboardFormats? _EnumClipboardFormats;

  int GetClipboardFormatNameA(
    int format,
    ffi.Pointer<ffi.Int8> lpszFormatName,
    int cchMaxCount,
  ) {
    return (_GetClipboardFormatNameA ??= _dylib.lookupFunction<
        _c_GetClipboardFormatNameA,
        _dart_GetClipboardFormatNameA>('GetClipboardFormatNameA'))(
      format,
      lpszFormatName,
      cchMaxCount,
    );
  }

  _dart_GetClipboardFormatNameA? _GetClipboardFormatNameA;

  int GetClipboardFormatNameW(
    int format,
    ffi.Pointer<ffi.Uint16> lpszFormatName,
    int cchMaxCount,
  ) {
    return (_GetClipboardFormatNameW ??= _dylib.lookupFunction<
        _c_GetClipboardFormatNameW,
        _dart_GetClipboardFormatNameW>('GetClipboardFormatNameW'))(
      format,
      lpszFormatName,
      cchMaxCount,
    );
  }

  _dart_GetClipboardFormatNameW? _GetClipboardFormatNameW;

  int EmptyClipboard() {
    return (_EmptyClipboard ??=
        _dylib.lookupFunction<_c_EmptyClipboard, _dart_EmptyClipboard>(
            'EmptyClipboard'))();
  }

  _dart_EmptyClipboard? _EmptyClipboard;

  int IsClipboardFormatAvailable(
    int format,
  ) {
    return (_IsClipboardFormatAvailable ??= _dylib.lookupFunction<
        _c_IsClipboardFormatAvailable,
        _dart_IsClipboardFormatAvailable>('IsClipboardFormatAvailable'))(
      format,
    );
  }

  _dart_IsClipboardFormatAvailable? _IsClipboardFormatAvailable;

  int GetPriorityClipboardFormat(
    ffi.Pointer<ffi.Uint32> paFormatPriorityList,
    int cFormats,
  ) {
    return (_GetPriorityClipboardFormat ??= _dylib.lookupFunction<
        _c_GetPriorityClipboardFormat,
        _dart_GetPriorityClipboardFormat>('GetPriorityClipboardFormat'))(
      paFormatPriorityList,
      cFormats,
    );
  }

  _dart_GetPriorityClipboardFormat? _GetPriorityClipboardFormat;

  ffi.Pointer<HWND__> GetOpenClipboardWindow() {
    return (_GetOpenClipboardWindow ??= _dylib.lookupFunction<
        _c_GetOpenClipboardWindow,
        _dart_GetOpenClipboardWindow>('GetOpenClipboardWindow'))();
  }

  _dart_GetOpenClipboardWindow? _GetOpenClipboardWindow;

  int AddClipboardFormatListener(
    ffi.Pointer<HWND__> hwnd,
  ) {
    return (_AddClipboardFormatListener ??= _dylib.lookupFunction<
        _c_AddClipboardFormatListener,
        _dart_AddClipboardFormatListener>('AddClipboardFormatListener'))(
      hwnd,
    );
  }

  _dart_AddClipboardFormatListener? _AddClipboardFormatListener;

  int RemoveClipboardFormatListener(
    ffi.Pointer<HWND__> hwnd,
  ) {
    return (_RemoveClipboardFormatListener ??= _dylib.lookupFunction<
        _c_RemoveClipboardFormatListener,
        _dart_RemoveClipboardFormatListener>('RemoveClipboardFormatListener'))(
      hwnd,
    );
  }

  _dart_RemoveClipboardFormatListener? _RemoveClipboardFormatListener;

  int GetUpdatedClipboardFormats(
    ffi.Pointer<ffi.Uint32> lpuiFormats,
    int cFormats,
    ffi.Pointer<ffi.Uint32> pcFormatsOut,
  ) {
    return (_GetUpdatedClipboardFormats ??= _dylib.lookupFunction<
        _c_GetUpdatedClipboardFormats,
        _dart_GetUpdatedClipboardFormats>('GetUpdatedClipboardFormats'))(
      lpuiFormats,
      cFormats,
      pcFormatsOut,
    );
  }

  _dart_GetUpdatedClipboardFormats? _GetUpdatedClipboardFormats;

  int CharToOemA(
    ffi.Pointer<ffi.Int8> pSrc,
    ffi.Pointer<ffi.Int8> pDst,
  ) {
    return (_CharToOemA ??=
        _dylib.lookupFunction<_c_CharToOemA, _dart_CharToOemA>('CharToOemA'))(
      pSrc,
      pDst,
    );
  }

  _dart_CharToOemA? _CharToOemA;

  int CharToOemW(
    ffi.Pointer<ffi.Uint16> pSrc,
    ffi.Pointer<ffi.Int8> pDst,
  ) {
    return (_CharToOemW ??=
        _dylib.lookupFunction<_c_CharToOemW, _dart_CharToOemW>('CharToOemW'))(
      pSrc,
      pDst,
    );
  }

  _dart_CharToOemW? _CharToOemW;

  int OemToCharA(
    ffi.Pointer<ffi.Int8> pSrc,
    ffi.Pointer<ffi.Int8> pDst,
  ) {
    return (_OemToCharA ??=
        _dylib.lookupFunction<_c_OemToCharA, _dart_OemToCharA>('OemToCharA'))(
      pSrc,
      pDst,
    );
  }

  _dart_OemToCharA? _OemToCharA;

  int OemToCharW(
    ffi.Pointer<ffi.Int8> pSrc,
    ffi.Pointer<ffi.Uint16> pDst,
  ) {
    return (_OemToCharW ??=
        _dylib.lookupFunction<_c_OemToCharW, _dart_OemToCharW>('OemToCharW'))(
      pSrc,
      pDst,
    );
  }

  _dart_OemToCharW? _OemToCharW;

  int CharToOemBuffA(
    ffi.Pointer<ffi.Int8> lpszSrc,
    ffi.Pointer<ffi.Int8> lpszDst,
    int cchDstLength,
  ) {
    return (_CharToOemBuffA ??=
        _dylib.lookupFunction<_c_CharToOemBuffA, _dart_CharToOemBuffA>(
            'CharToOemBuffA'))(
      lpszSrc,
      lpszDst,
      cchDstLength,
    );
  }

  _dart_CharToOemBuffA? _CharToOemBuffA;

  int CharToOemBuffW(
    ffi.Pointer<ffi.Uint16> lpszSrc,
    ffi.Pointer<ffi.Int8> lpszDst,
    int cchDstLength,
  ) {
    return (_CharToOemBuffW ??=
        _dylib.lookupFunction<_c_CharToOemBuffW, _dart_CharToOemBuffW>(
            'CharToOemBuffW'))(
      lpszSrc,
      lpszDst,
      cchDstLength,
    );
  }

  _dart_CharToOemBuffW? _CharToOemBuffW;

  int OemToCharBuffA(
    ffi.Pointer<ffi.Int8> lpszSrc,
    ffi.Pointer<ffi.Int8> lpszDst,
    int cchDstLength,
  ) {
    return (_OemToCharBuffA ??=
        _dylib.lookupFunction<_c_OemToCharBuffA, _dart_OemToCharBuffA>(
            'OemToCharBuffA'))(
      lpszSrc,
      lpszDst,
      cchDstLength,
    );
  }

  _dart_OemToCharBuffA? _OemToCharBuffA;

  int OemToCharBuffW(
    ffi.Pointer<ffi.Int8> lpszSrc,
    ffi.Pointer<ffi.Uint16> lpszDst,
    int cchDstLength,
  ) {
    return (_OemToCharBuffW ??=
        _dylib.lookupFunction<_c_OemToCharBuffW, _dart_OemToCharBuffW>(
            'OemToCharBuffW'))(
      lpszSrc,
      lpszDst,
      cchDstLength,
    );
  }

  _dart_OemToCharBuffW? _OemToCharBuffW;

  ffi.Pointer<ffi.Int8> CharUpperA(
    ffi.Pointer<ffi.Int8> lpsz,
  ) {
    return (_CharUpperA ??=
        _dylib.lookupFunction<_c_CharUpperA, _dart_CharUpperA>('CharUpperA'))(
      lpsz,
    );
  }

  _dart_CharUpperA? _CharUpperA;

  ffi.Pointer<ffi.Uint16> CharUpperW(
    ffi.Pointer<ffi.Uint16> lpsz,
  ) {
    return (_CharUpperW ??=
        _dylib.lookupFunction<_c_CharUpperW, _dart_CharUpperW>('CharUpperW'))(
      lpsz,
    );
  }

  _dart_CharUpperW? _CharUpperW;

  int CharUpperBuffA(
    ffi.Pointer<ffi.Int8> lpsz,
    int cchLength,
  ) {
    return (_CharUpperBuffA ??=
        _dylib.lookupFunction<_c_CharUpperBuffA, _dart_CharUpperBuffA>(
            'CharUpperBuffA'))(
      lpsz,
      cchLength,
    );
  }

  _dart_CharUpperBuffA? _CharUpperBuffA;

  int CharUpperBuffW(
    ffi.Pointer<ffi.Uint16> lpsz,
    int cchLength,
  ) {
    return (_CharUpperBuffW ??=
        _dylib.lookupFunction<_c_CharUpperBuffW, _dart_CharUpperBuffW>(
            'CharUpperBuffW'))(
      lpsz,
      cchLength,
    );
  }

  _dart_CharUpperBuffW? _CharUpperBuffW;

  ffi.Pointer<ffi.Int8> CharLowerA(
    ffi.Pointer<ffi.Int8> lpsz,
  ) {
    return (_CharLowerA ??=
        _dylib.lookupFunction<_c_CharLowerA, _dart_CharLowerA>('CharLowerA'))(
      lpsz,
    );
  }

  _dart_CharLowerA? _CharLowerA;

  ffi.Pointer<ffi.Uint16> CharLowerW(
    ffi.Pointer<ffi.Uint16> lpsz,
  ) {
    return (_CharLowerW ??=
        _dylib.lookupFunction<_c_CharLowerW, _dart_CharLowerW>('CharLowerW'))(
      lpsz,
    );
  }

  _dart_CharLowerW? _CharLowerW;

  int CharLowerBuffA(
    ffi.Pointer<ffi.Int8> lpsz,
    int cchLength,
  ) {
    return (_CharLowerBuffA ??=
        _dylib.lookupFunction<_c_CharLowerBuffA, _dart_CharLowerBuffA>(
            'CharLowerBuffA'))(
      lpsz,
      cchLength,
    );
  }

  _dart_CharLowerBuffA? _CharLowerBuffA;

  int CharLowerBuffW(
    ffi.Pointer<ffi.Uint16> lpsz,
    int cchLength,
  ) {
    return (_CharLowerBuffW ??=
        _dylib.lookupFunction<_c_CharLowerBuffW, _dart_CharLowerBuffW>(
            'CharLowerBuffW'))(
      lpsz,
      cchLength,
    );
  }

  _dart_CharLowerBuffW? _CharLowerBuffW;

  ffi.Pointer<ffi.Int8> CharNextA(
    ffi.Pointer<ffi.Int8> lpsz,
  ) {
    return (_CharNextA ??=
        _dylib.lookupFunction<_c_CharNextA, _dart_CharNextA>('CharNextA'))(
      lpsz,
    );
  }

  _dart_CharNextA? _CharNextA;

  ffi.Pointer<ffi.Uint16> CharNextW(
    ffi.Pointer<ffi.Uint16> lpsz,
  ) {
    return (_CharNextW ??=
        _dylib.lookupFunction<_c_CharNextW, _dart_CharNextW>('CharNextW'))(
      lpsz,
    );
  }

  _dart_CharNextW? _CharNextW;

  ffi.Pointer<ffi.Int8> CharPrevA(
    ffi.Pointer<ffi.Int8> lpszStart,
    ffi.Pointer<ffi.Int8> lpszCurrent,
  ) {
    return (_CharPrevA ??=
        _dylib.lookupFunction<_c_CharPrevA, _dart_CharPrevA>('CharPrevA'))(
      lpszStart,
      lpszCurrent,
    );
  }

  _dart_CharPrevA? _CharPrevA;

  ffi.Pointer<ffi.Uint16> CharPrevW(
    ffi.Pointer<ffi.Uint16> lpszStart,
    ffi.Pointer<ffi.Uint16> lpszCurrent,
  ) {
    return (_CharPrevW ??=
        _dylib.lookupFunction<_c_CharPrevW, _dart_CharPrevW>('CharPrevW'))(
      lpszStart,
      lpszCurrent,
    );
  }

  _dart_CharPrevW? _CharPrevW;

  ffi.Pointer<ffi.Int8> CharNextExA(
    int CodePage,
    ffi.Pointer<ffi.Int8> lpCurrentChar,
    int dwFlags,
  ) {
    return (_CharNextExA ??= _dylib
        .lookupFunction<_c_CharNextExA, _dart_CharNextExA>('CharNextExA'))(
      CodePage,
      lpCurrentChar,
      dwFlags,
    );
  }

  _dart_CharNextExA? _CharNextExA;

  ffi.Pointer<ffi.Int8> CharPrevExA(
    int CodePage,
    ffi.Pointer<ffi.Int8> lpStart,
    ffi.Pointer<ffi.Int8> lpCurrentChar,
    int dwFlags,
  ) {
    return (_CharPrevExA ??= _dylib
        .lookupFunction<_c_CharPrevExA, _dart_CharPrevExA>('CharPrevExA'))(
      CodePage,
      lpStart,
      lpCurrentChar,
      dwFlags,
    );
  }

  _dart_CharPrevExA? _CharPrevExA;

  int IsCharAlphaA(
    int ch,
  ) {
    return (_IsCharAlphaA ??= _dylib
        .lookupFunction<_c_IsCharAlphaA, _dart_IsCharAlphaA>('IsCharAlphaA'))(
      ch,
    );
  }

  _dart_IsCharAlphaA? _IsCharAlphaA;

  int IsCharAlphaW(
    int ch,
  ) {
    return (_IsCharAlphaW ??= _dylib
        .lookupFunction<_c_IsCharAlphaW, _dart_IsCharAlphaW>('IsCharAlphaW'))(
      ch,
    );
  }

  _dart_IsCharAlphaW? _IsCharAlphaW;

  int IsCharAlphaNumericA(
    int ch,
  ) {
    return (_IsCharAlphaNumericA ??= _dylib.lookupFunction<
        _c_IsCharAlphaNumericA,
        _dart_IsCharAlphaNumericA>('IsCharAlphaNumericA'))(
      ch,
    );
  }

  _dart_IsCharAlphaNumericA? _IsCharAlphaNumericA;

  int IsCharAlphaNumericW(
    int ch,
  ) {
    return (_IsCharAlphaNumericW ??= _dylib.lookupFunction<
        _c_IsCharAlphaNumericW,
        _dart_IsCharAlphaNumericW>('IsCharAlphaNumericW'))(
      ch,
    );
  }

  _dart_IsCharAlphaNumericW? _IsCharAlphaNumericW;

  int IsCharUpperA(
    int ch,
  ) {
    return (_IsCharUpperA ??= _dylib
        .lookupFunction<_c_IsCharUpperA, _dart_IsCharUpperA>('IsCharUpperA'))(
      ch,
    );
  }

  _dart_IsCharUpperA? _IsCharUpperA;

  int IsCharUpperW(
    int ch,
  ) {
    return (_IsCharUpperW ??= _dylib
        .lookupFunction<_c_IsCharUpperW, _dart_IsCharUpperW>('IsCharUpperW'))(
      ch,
    );
  }

  _dart_IsCharUpperW? _IsCharUpperW;

  int IsCharLowerA(
    int ch,
  ) {
    return (_IsCharLowerA ??= _dylib
        .lookupFunction<_c_IsCharLowerA, _dart_IsCharLowerA>('IsCharLowerA'))(
      ch,
    );
  }

  _dart_IsCharLowerA? _IsCharLowerA;

  int IsCharLowerW(
    int ch,
  ) {
    return (_IsCharLowerW ??= _dylib
        .lookupFunction<_c_IsCharLowerW, _dart_IsCharLowerW>('IsCharLowerW'))(
      ch,
    );
  }

  _dart_IsCharLowerW? _IsCharLowerW;

  ffi.Pointer<HWND__> SetFocus(
    ffi.Pointer<HWND__> hWnd,
  ) {
    return (_SetFocus ??=
        _dylib.lookupFunction<_c_SetFocus, _dart_SetFocus>('SetFocus'))(
      hWnd,
    );
  }

  _dart_SetFocus? _SetFocus;

  ffi.Pointer<HWND__> GetActiveWindow() {
    return (_GetActiveWindow ??=
        _dylib.lookupFunction<_c_GetActiveWindow, _dart_GetActiveWindow>(
            'GetActiveWindow'))();
  }

  _dart_GetActiveWindow? _GetActiveWindow;

  ffi.Pointer<HWND__> GetFocus() {
    return (_GetFocus ??=
        _dylib.lookupFunction<_c_GetFocus, _dart_GetFocus>('GetFocus'))();
  }

  _dart_GetFocus? _GetFocus;

  int GetKBCodePage() {
    return (_GetKBCodePage ??=
        _dylib.lookupFunction<_c_GetKBCodePage, _dart_GetKBCodePage>(
            'GetKBCodePage'))();
  }

  _dart_GetKBCodePage? _GetKBCodePage;

  int GetKeyState(
    int nVirtKey,
  ) {
    return (_GetKeyState ??= _dylib
        .lookupFunction<_c_GetKeyState, _dart_GetKeyState>('GetKeyState'))(
      nVirtKey,
    );
  }

  _dart_GetKeyState? _GetKeyState;

  int GetAsyncKeyState(
    int vKey,
  ) {
    return (_GetAsyncKeyState ??=
        _dylib.lookupFunction<_c_GetAsyncKeyState, _dart_GetAsyncKeyState>(
            'GetAsyncKeyState'))(
      vKey,
    );
  }

  _dart_GetAsyncKeyState? _GetAsyncKeyState;

  int GetKeyboardState(
    ffi.Pointer<ffi.Uint8> lpKeyState,
  ) {
    return (_GetKeyboardState ??=
        _dylib.lookupFunction<_c_GetKeyboardState, _dart_GetKeyboardState>(
            'GetKeyboardState'))(
      lpKeyState,
    );
  }

  _dart_GetKeyboardState? _GetKeyboardState;

  int SetKeyboardState(
    ffi.Pointer<ffi.Uint8> lpKeyState,
  ) {
    return (_SetKeyboardState ??=
        _dylib.lookupFunction<_c_SetKeyboardState, _dart_SetKeyboardState>(
            'SetKeyboardState'))(
      lpKeyState,
    );
  }

  _dart_SetKeyboardState? _SetKeyboardState;

  int GetKeyNameTextA(
    int lParam,
    ffi.Pointer<ffi.Int8> lpString,
    int cchSize,
  ) {
    return (_GetKeyNameTextA ??=
        _dylib.lookupFunction<_c_GetKeyNameTextA, _dart_GetKeyNameTextA>(
            'GetKeyNameTextA'))(
      lParam,
      lpString,
      cchSize,
    );
  }

  _dart_GetKeyNameTextA? _GetKeyNameTextA;

  int GetKeyNameTextW(
    int lParam,
    ffi.Pointer<ffi.Uint16> lpString,
    int cchSize,
  ) {
    return (_GetKeyNameTextW ??=
        _dylib.lookupFunction<_c_GetKeyNameTextW, _dart_GetKeyNameTextW>(
            'GetKeyNameTextW'))(
      lParam,
      lpString,
      cchSize,
    );
  }

  _dart_GetKeyNameTextW? _GetKeyNameTextW;

  int GetKeyboardType(
    int nTypeFlag,
  ) {
    return (_GetKeyboardType ??=
        _dylib.lookupFunction<_c_GetKeyboardType, _dart_GetKeyboardType>(
            'GetKeyboardType'))(
      nTypeFlag,
    );
  }

  _dart_GetKeyboardType? _GetKeyboardType;

  int ToAscii(
    int uVirtKey,
    int uScanCode,
    ffi.Pointer<ffi.Uint8> lpKeyState,
    ffi.Pointer<ffi.Uint16> lpChar,
    int uFlags,
  ) {
    return (_ToAscii ??=
        _dylib.lookupFunction<_c_ToAscii, _dart_ToAscii>('ToAscii'))(
      uVirtKey,
      uScanCode,
      lpKeyState,
      lpChar,
      uFlags,
    );
  }

  _dart_ToAscii? _ToAscii;

  int ToAsciiEx(
    int uVirtKey,
    int uScanCode,
    ffi.Pointer<ffi.Uint8> lpKeyState,
    ffi.Pointer<ffi.Uint16> lpChar,
    int uFlags,
    ffi.Pointer<HKL__> dwhkl,
  ) {
    return (_ToAsciiEx ??=
        _dylib.lookupFunction<_c_ToAsciiEx, _dart_ToAsciiEx>('ToAsciiEx'))(
      uVirtKey,
      uScanCode,
      lpKeyState,
      lpChar,
      uFlags,
      dwhkl,
    );
  }

  _dart_ToAsciiEx? _ToAsciiEx;

  int ToUnicode(
    int wVirtKey,
    int wScanCode,
    ffi.Pointer<ffi.Uint8> lpKeyState,
    ffi.Pointer<ffi.Uint16> pwszBuff,
    int cchBuff,
    int wFlags,
  ) {
    return (_ToUnicode ??=
        _dylib.lookupFunction<_c_ToUnicode, _dart_ToUnicode>('ToUnicode'))(
      wVirtKey,
      wScanCode,
      lpKeyState,
      pwszBuff,
      cchBuff,
      wFlags,
    );
  }

  _dart_ToUnicode? _ToUnicode;

  int OemKeyScan(
    int wOemChar,
  ) {
    return (_OemKeyScan ??=
        _dylib.lookupFunction<_c_OemKeyScan, _dart_OemKeyScan>('OemKeyScan'))(
      wOemChar,
    );
  }

  _dart_OemKeyScan? _OemKeyScan;

  int VkKeyScanA(
    int ch,
  ) {
    return (_VkKeyScanA ??=
        _dylib.lookupFunction<_c_VkKeyScanA, _dart_VkKeyScanA>('VkKeyScanA'))(
      ch,
    );
  }

  _dart_VkKeyScanA? _VkKeyScanA;

  int VkKeyScanW(
    int ch,
  ) {
    return (_VkKeyScanW ??=
        _dylib.lookupFunction<_c_VkKeyScanW, _dart_VkKeyScanW>('VkKeyScanW'))(
      ch,
    );
  }

  _dart_VkKeyScanW? _VkKeyScanW;

  int VkKeyScanExA(
    int ch,
    ffi.Pointer<HKL__> dwhkl,
  ) {
    return (_VkKeyScanExA ??= _dylib
        .lookupFunction<_c_VkKeyScanExA, _dart_VkKeyScanExA>('VkKeyScanExA'))(
      ch,
      dwhkl,
    );
  }

  _dart_VkKeyScanExA? _VkKeyScanExA;

  int VkKeyScanExW(
    int ch,
    ffi.Pointer<HKL__> dwhkl,
  ) {
    return (_VkKeyScanExW ??= _dylib
        .lookupFunction<_c_VkKeyScanExW, _dart_VkKeyScanExW>('VkKeyScanExW'))(
      ch,
      dwhkl,
    );
  }

  _dart_VkKeyScanExW? _VkKeyScanExW;

  void keybd_event(
    int bVk,
    int bScan,
    int dwFlags,
    int dwExtraInfo,
  ) {
    return (_keybd_event ??= _dylib
        .lookupFunction<_c_keybd_event, _dart_keybd_event>('keybd_event'))(
      bVk,
      bScan,
      dwFlags,
      dwExtraInfo,
    );
  }

  _dart_keybd_event? _keybd_event;

  void mouse_event(
    int dwFlags,
    int dx,
    int dy,
    int dwData,
    int dwExtraInfo,
  ) {
    return (_mouse_event ??= _dylib
        .lookupFunction<_c_mouse_event, _dart_mouse_event>('mouse_event'))(
      dwFlags,
      dx,
      dy,
      dwData,
      dwExtraInfo,
    );
  }

  _dart_mouse_event? _mouse_event;

  int SendInput(
    int cInputs,
    ffi.Pointer<LPINPUT> pInputs,
    int cbSize,
  ) {
    return (_SendInput ??=
        _dylib.lookupFunction<_c_SendInput, _dart_SendInput>('SendInput'))(
      cInputs,
      pInputs,
      cbSize,
    );
  }

  _dart_SendInput? _SendInput;

  int GetTouchInputInfo(
    ffi.Pointer<HTOUCHINPUT__> hTouchInput,
    int cInputs,
    ffi.Pointer<PTOUCHINPUT> pInputs,
    int cbSize,
  ) {
    return (_GetTouchInputInfo ??=
        _dylib.lookupFunction<_c_GetTouchInputInfo, _dart_GetTouchInputInfo>(
            'GetTouchInputInfo'))(
      hTouchInput,
      cInputs,
      pInputs,
      cbSize,
    );
  }

  _dart_GetTouchInputInfo? _GetTouchInputInfo;

  int CloseTouchInputHandle(
    ffi.Pointer<HTOUCHINPUT__> hTouchInput,
  ) {
    return (_CloseTouchInputHandle ??= _dylib.lookupFunction<
        _c_CloseTouchInputHandle,
        _dart_CloseTouchInputHandle>('CloseTouchInputHandle'))(
      hTouchInput,
    );
  }

  _dart_CloseTouchInputHandle? _CloseTouchInputHandle;

  int RegisterTouchWindow(
    ffi.Pointer<HWND__> hwnd,
    int ulFlags,
  ) {
    return (_RegisterTouchWindow ??= _dylib.lookupFunction<
        _c_RegisterTouchWindow,
        _dart_RegisterTouchWindow>('RegisterTouchWindow'))(
      hwnd,
      ulFlags,
    );
  }

  _dart_RegisterTouchWindow? _RegisterTouchWindow;

  int UnregisterTouchWindow(
    ffi.Pointer<HWND__> hwnd,
  ) {
    return (_UnregisterTouchWindow ??= _dylib.lookupFunction<
        _c_UnregisterTouchWindow,
        _dart_UnregisterTouchWindow>('UnregisterTouchWindow'))(
      hwnd,
    );
  }

  _dart_UnregisterTouchWindow? _UnregisterTouchWindow;

  int IsTouchWindow(
    ffi.Pointer<HWND__> hwnd,
    ffi.Pointer<ffi.Uint64> pulFlags,
  ) {
    return (_IsTouchWindow ??=
        _dylib.lookupFunction<_c_IsTouchWindow, _dart_IsTouchWindow>(
            'IsTouchWindow'))(
      hwnd,
      pulFlags,
    );
  }

  _dart_IsTouchWindow? _IsTouchWindow;

  int InitializeTouchInjection(
    int maxCount,
    int dwMode,
  ) {
    return (_InitializeTouchInjection ??= _dylib.lookupFunction<
        _c_InitializeTouchInjection,
        _dart_InitializeTouchInjection>('InitializeTouchInjection'))(
      maxCount,
      dwMode,
    );
  }

  _dart_InitializeTouchInjection? _InitializeTouchInjection;

  int InjectTouchInput(
    int count,
    ffi.Pointer<POINTER_TOUCH_INFO> contacts,
  ) {
    return (_InjectTouchInput ??=
        _dylib.lookupFunction<_c_InjectTouchInput, _dart_InjectTouchInput>(
            'InjectTouchInput'))(
      count,
      contacts,
    );
  }

  _dart_InjectTouchInput? _InjectTouchInput;

  int GetPointerType(
    int pointerId,
    ffi.Pointer<ffi.Uint64> pointerType,
  ) {
    return (_GetPointerType ??=
        _dylib.lookupFunction<_c_GetPointerType, _dart_GetPointerType>(
            'GetPointerType'))(
      pointerId,
      pointerType,
    );
  }

  _dart_GetPointerType? _GetPointerType;

  int GetPointerCursorId(
    int pointerId,
    ffi.Pointer<ffi.Uint32> cursorId,
  ) {
    return (_GetPointerCursorId ??=
        _dylib.lookupFunction<_c_GetPointerCursorId, _dart_GetPointerCursorId>(
            'GetPointerCursorId'))(
      pointerId,
      cursorId,
    );
  }

  _dart_GetPointerCursorId? _GetPointerCursorId;

  int GetPointerInfo(
    int pointerId,
    ffi.Pointer<POINTER_INFO> pointerInfo,
  ) {
    return (_GetPointerInfo ??=
        _dylib.lookupFunction<_c_GetPointerInfo, _dart_GetPointerInfo>(
            'GetPointerInfo'))(
      pointerId,
      pointerInfo,
    );
  }

  _dart_GetPointerInfo? _GetPointerInfo;

  int GetPointerInfoHistory(
    int pointerId,
    ffi.Pointer<ffi.Uint32> entriesCount,
    ffi.Pointer<POINTER_INFO> pointerInfo,
  ) {
    return (_GetPointerInfoHistory ??= _dylib.lookupFunction<
        _c_GetPointerInfoHistory,
        _dart_GetPointerInfoHistory>('GetPointerInfoHistory'))(
      pointerId,
      entriesCount,
      pointerInfo,
    );
  }

  _dart_GetPointerInfoHistory? _GetPointerInfoHistory;

  int GetPointerFrameInfo(
    int pointerId,
    ffi.Pointer<ffi.Uint32> pointerCount,
    ffi.Pointer<POINTER_INFO> pointerInfo,
  ) {
    return (_GetPointerFrameInfo ??= _dylib.lookupFunction<
        _c_GetPointerFrameInfo,
        _dart_GetPointerFrameInfo>('GetPointerFrameInfo'))(
      pointerId,
      pointerCount,
      pointerInfo,
    );
  }

  _dart_GetPointerFrameInfo? _GetPointerFrameInfo;

  int GetPointerFrameInfoHistory(
    int pointerId,
    ffi.Pointer<ffi.Uint32> entriesCount,
    ffi.Pointer<ffi.Uint32> pointerCount,
    ffi.Pointer<POINTER_INFO> pointerInfo,
  ) {
    return (_GetPointerFrameInfoHistory ??= _dylib.lookupFunction<
        _c_GetPointerFrameInfoHistory,
        _dart_GetPointerFrameInfoHistory>('GetPointerFrameInfoHistory'))(
      pointerId,
      entriesCount,
      pointerCount,
      pointerInfo,
    );
  }

  _dart_GetPointerFrameInfoHistory? _GetPointerFrameInfoHistory;

  int GetPointerTouchInfo(
    int pointerId,
    ffi.Pointer<POINTER_TOUCH_INFO> touchInfo,
  ) {
    return (_GetPointerTouchInfo ??= _dylib.lookupFunction<
        _c_GetPointerTouchInfo,
        _dart_GetPointerTouchInfo>('GetPointerTouchInfo'))(
      pointerId,
      touchInfo,
    );
  }

  _dart_GetPointerTouchInfo? _GetPointerTouchInfo;

  int GetPointerTouchInfoHistory(
    int pointerId,
    ffi.Pointer<ffi.Uint32> entriesCount,
    ffi.Pointer<POINTER_TOUCH_INFO> touchInfo,
  ) {
    return (_GetPointerTouchInfoHistory ??= _dylib.lookupFunction<
        _c_GetPointerTouchInfoHistory,
        _dart_GetPointerTouchInfoHistory>('GetPointerTouchInfoHistory'))(
      pointerId,
      entriesCount,
      touchInfo,
    );
  }

  _dart_GetPointerTouchInfoHistory? _GetPointerTouchInfoHistory;

  int GetPointerFrameTouchInfo(
    int pointerId,
    ffi.Pointer<ffi.Uint32> pointerCount,
    ffi.Pointer<POINTER_TOUCH_INFO> touchInfo,
  ) {
    return (_GetPointerFrameTouchInfo ??= _dylib.lookupFunction<
        _c_GetPointerFrameTouchInfo,
        _dart_GetPointerFrameTouchInfo>('GetPointerFrameTouchInfo'))(
      pointerId,
      pointerCount,
      touchInfo,
    );
  }

  _dart_GetPointerFrameTouchInfo? _GetPointerFrameTouchInfo;

  int GetPointerFrameTouchInfoHistory(
    int pointerId,
    ffi.Pointer<ffi.Uint32> entriesCount,
    ffi.Pointer<ffi.Uint32> pointerCount,
    ffi.Pointer<POINTER_TOUCH_INFO> touchInfo,
  ) {
    return (_GetPointerFrameTouchInfoHistory ??= _dylib.lookupFunction<
            _c_GetPointerFrameTouchInfoHistory,
            _dart_GetPointerFrameTouchInfoHistory>(
        'GetPointerFrameTouchInfoHistory'))(
      pointerId,
      entriesCount,
      pointerCount,
      touchInfo,
    );
  }

  _dart_GetPointerFrameTouchInfoHistory? _GetPointerFrameTouchInfoHistory;

  int GetPointerPenInfo(
    int pointerId,
    ffi.Pointer<POINTER_PEN_INFO> penInfo,
  ) {
    return (_GetPointerPenInfo ??=
        _dylib.lookupFunction<_c_GetPointerPenInfo, _dart_GetPointerPenInfo>(
            'GetPointerPenInfo'))(
      pointerId,
      penInfo,
    );
  }

  _dart_GetPointerPenInfo? _GetPointerPenInfo;

  int GetPointerPenInfoHistory(
    int pointerId,
    ffi.Pointer<ffi.Uint32> entriesCount,
    ffi.Pointer<POINTER_PEN_INFO> penInfo,
  ) {
    return (_GetPointerPenInfoHistory ??= _dylib.lookupFunction<
        _c_GetPointerPenInfoHistory,
        _dart_GetPointerPenInfoHistory>('GetPointerPenInfoHistory'))(
      pointerId,
      entriesCount,
      penInfo,
    );
  }

  _dart_GetPointerPenInfoHistory? _GetPointerPenInfoHistory;

  int GetPointerFramePenInfo(
    int pointerId,
    ffi.Pointer<ffi.Uint32> pointerCount,
    ffi.Pointer<POINTER_PEN_INFO> penInfo,
  ) {
    return (_GetPointerFramePenInfo ??= _dylib.lookupFunction<
        _c_GetPointerFramePenInfo,
        _dart_GetPointerFramePenInfo>('GetPointerFramePenInfo'))(
      pointerId,
      pointerCount,
      penInfo,
    );
  }

  _dart_GetPointerFramePenInfo? _GetPointerFramePenInfo;

  int GetPointerFramePenInfoHistory(
    int pointerId,
    ffi.Pointer<ffi.Uint32> entriesCount,
    ffi.Pointer<ffi.Uint32> pointerCount,
    ffi.Pointer<POINTER_PEN_INFO> penInfo,
  ) {
    return (_GetPointerFramePenInfoHistory ??= _dylib.lookupFunction<
        _c_GetPointerFramePenInfoHistory,
        _dart_GetPointerFramePenInfoHistory>('GetPointerFramePenInfoHistory'))(
      pointerId,
      entriesCount,
      pointerCount,
      penInfo,
    );
  }

  _dart_GetPointerFramePenInfoHistory? _GetPointerFramePenInfoHistory;

  int SkipPointerFrameMessages(
    int pointerId,
  ) {
    return (_SkipPointerFrameMessages ??= _dylib.lookupFunction<
        _c_SkipPointerFrameMessages,
        _dart_SkipPointerFrameMessages>('SkipPointerFrameMessages'))(
      pointerId,
    );
  }

  _dart_SkipPointerFrameMessages? _SkipPointerFrameMessages;

  int RegisterPointerInputTarget(
    ffi.Pointer<HWND__> hwnd,
    int pointerType,
  ) {
    return (_RegisterPointerInputTarget ??= _dylib.lookupFunction<
        _c_RegisterPointerInputTarget,
        _dart_RegisterPointerInputTarget>('RegisterPointerInputTarget'))(
      hwnd,
      pointerType,
    );
  }

  _dart_RegisterPointerInputTarget? _RegisterPointerInputTarget;

  int UnregisterPointerInputTarget(
    ffi.Pointer<HWND__> hwnd,
    int pointerType,
  ) {
    return (_UnregisterPointerInputTarget ??= _dylib.lookupFunction<
        _c_UnregisterPointerInputTarget,
        _dart_UnregisterPointerInputTarget>('UnregisterPointerInputTarget'))(
      hwnd,
      pointerType,
    );
  }

  _dart_UnregisterPointerInputTarget? _UnregisterPointerInputTarget;

  int RegisterPointerInputTargetEx(
    ffi.Pointer<HWND__> hwnd,
    int pointerType,
    int fObserve,
  ) {
    return (_RegisterPointerInputTargetEx ??= _dylib.lookupFunction<
        _c_RegisterPointerInputTargetEx,
        _dart_RegisterPointerInputTargetEx>('RegisterPointerInputTargetEx'))(
      hwnd,
      pointerType,
      fObserve,
    );
  }

  _dart_RegisterPointerInputTargetEx? _RegisterPointerInputTargetEx;

  int UnregisterPointerInputTargetEx(
    ffi.Pointer<HWND__> hwnd,
    int pointerType,
  ) {
    return (_UnregisterPointerInputTargetEx ??= _dylib.lookupFunction<
            _c_UnregisterPointerInputTargetEx,
            _dart_UnregisterPointerInputTargetEx>(
        'UnregisterPointerInputTargetEx'))(
      hwnd,
      pointerType,
    );
  }

  _dart_UnregisterPointerInputTargetEx? _UnregisterPointerInputTargetEx;

  ffi.Pointer<HSYNTHETICPOINTERDEVICE__> CreateSyntheticPointerDevice(
    int pointerType,
    int maxCount,
    int mode,
  ) {
    return (_CreateSyntheticPointerDevice ??= _dylib.lookupFunction<
        _c_CreateSyntheticPointerDevice,
        _dart_CreateSyntheticPointerDevice>('CreateSyntheticPointerDevice'))(
      pointerType,
      maxCount,
      mode,
    );
  }

  _dart_CreateSyntheticPointerDevice? _CreateSyntheticPointerDevice;

  int InjectSyntheticPointerInput(
    ffi.Pointer<HSYNTHETICPOINTERDEVICE__> device,
    ffi.Pointer<PPOINTER_TYPE_INFO> pointerInfo,
    int count,
  ) {
    return (_InjectSyntheticPointerInput ??= _dylib.lookupFunction<
        _c_InjectSyntheticPointerInput,
        _dart_InjectSyntheticPointerInput>('InjectSyntheticPointerInput'))(
      device,
      pointerInfo,
      count,
    );
  }

  _dart_InjectSyntheticPointerInput? _InjectSyntheticPointerInput;

  void DestroySyntheticPointerDevice(
    ffi.Pointer<HSYNTHETICPOINTERDEVICE__> device,
  ) {
    return (_DestroySyntheticPointerDevice ??= _dylib.lookupFunction<
        _c_DestroySyntheticPointerDevice,
        _dart_DestroySyntheticPointerDevice>('DestroySyntheticPointerDevice'))(
      device,
    );
  }

  _dart_DestroySyntheticPointerDevice? _DestroySyntheticPointerDevice;

  int EnableMouseInPointer(
    int fEnable,
  ) {
    return (_EnableMouseInPointer ??= _dylib.lookupFunction<
        _c_EnableMouseInPointer,
        _dart_EnableMouseInPointer>('EnableMouseInPointer'))(
      fEnable,
    );
  }

  _dart_EnableMouseInPointer? _EnableMouseInPointer;

  int IsMouseInPointerEnabled() {
    return (_IsMouseInPointerEnabled ??= _dylib.lookupFunction<
        _c_IsMouseInPointerEnabled,
        _dart_IsMouseInPointerEnabled>('IsMouseInPointerEnabled'))();
  }

  _dart_IsMouseInPointerEnabled? _IsMouseInPointerEnabled;

  int EnableMouseInPointerForThread() {
    return (_EnableMouseInPointerForThread ??= _dylib.lookupFunction<
            _c_EnableMouseInPointerForThread,
            _dart_EnableMouseInPointerForThread>(
        'EnableMouseInPointerForThread'))();
  }

  _dart_EnableMouseInPointerForThread? _EnableMouseInPointerForThread;

  int RegisterTouchHitTestingWindow(
    ffi.Pointer<HWND__> hwnd,
    int value,
  ) {
    return (_RegisterTouchHitTestingWindow ??= _dylib.lookupFunction<
        _c_RegisterTouchHitTestingWindow,
        _dart_RegisterTouchHitTestingWindow>('RegisterTouchHitTestingWindow'))(
      hwnd,
      value,
    );
  }

  _dart_RegisterTouchHitTestingWindow? _RegisterTouchHitTestingWindow;

  int EvaluateProximityToRect(
    ffi.Pointer<LPRECT> controlBoundingBox,
    ffi.Pointer<PTOUCH_HIT_TESTING_INPUT> pHitTestingInput,
    ffi.Pointer<PTOUCH_HIT_TESTING_PROXIMITY_EVALUATION> pProximityEval,
  ) {
    return (_EvaluateProximityToRect ??= _dylib.lookupFunction<
        _c_EvaluateProximityToRect,
        _dart_EvaluateProximityToRect>('EvaluateProximityToRect'))(
      controlBoundingBox,
      pHitTestingInput,
      pProximityEval,
    );
  }

  _dart_EvaluateProximityToRect? _EvaluateProximityToRect;

  int EvaluateProximityToPolygon(
    int numVertices,
    ffi.Pointer<LPPOINT> controlPolygon,
    ffi.Pointer<PTOUCH_HIT_TESTING_INPUT> pHitTestingInput,
    ffi.Pointer<PTOUCH_HIT_TESTING_PROXIMITY_EVALUATION> pProximityEval,
  ) {
    return (_EvaluateProximityToPolygon ??= _dylib.lookupFunction<
        _c_EvaluateProximityToPolygon,
        _dart_EvaluateProximityToPolygon>('EvaluateProximityToPolygon'))(
      numVertices,
      controlPolygon,
      pHitTestingInput,
      pProximityEval,
    );
  }

  _dart_EvaluateProximityToPolygon? _EvaluateProximityToPolygon;

  int PackTouchHitTestingProximityEvaluation(
    ffi.Pointer<PTOUCH_HIT_TESTING_INPUT> pHitTestingInput,
    ffi.Pointer<PTOUCH_HIT_TESTING_PROXIMITY_EVALUATION> pProximityEval,
  ) {
    return (_PackTouchHitTestingProximityEvaluation ??= _dylib.lookupFunction<
            _c_PackTouchHitTestingProximityEvaluation,
            _dart_PackTouchHitTestingProximityEvaluation>(
        'PackTouchHitTestingProximityEvaluation'))(
      pHitTestingInput,
      pProximityEval,
    );
  }

  _dart_PackTouchHitTestingProximityEvaluation?
      _PackTouchHitTestingProximityEvaluation;

  int GetWindowFeedbackSetting(
    ffi.Pointer<HWND__> hwnd,
    int feedback,
    int dwFlags,
    ffi.Pointer<ffi.Uint32> pSize,
    ffi.Pointer<ffi.Void> config,
  ) {
    return (_GetWindowFeedbackSetting ??= _dylib.lookupFunction<
        _c_GetWindowFeedbackSetting,
        _dart_GetWindowFeedbackSetting>('GetWindowFeedbackSetting'))(
      hwnd,
      feedback,
      dwFlags,
      pSize,
      config,
    );
  }

  _dart_GetWindowFeedbackSetting? _GetWindowFeedbackSetting;

  int SetWindowFeedbackSetting(
    ffi.Pointer<HWND__> hwnd,
    int feedback,
    int dwFlags,
    int size,
    ffi.Pointer<ffi.Void> configuration,
  ) {
    return (_SetWindowFeedbackSetting ??= _dylib.lookupFunction<
        _c_SetWindowFeedbackSetting,
        _dart_SetWindowFeedbackSetting>('SetWindowFeedbackSetting'))(
      hwnd,
      feedback,
      dwFlags,
      size,
      configuration,
    );
  }

  _dart_SetWindowFeedbackSetting? _SetWindowFeedbackSetting;

  int GetPointerInputTransform(
    int pointerId,
    int historyCount,
    ffi.Pointer<INPUT_TRANSFORM> inputTransform,
  ) {
    return (_GetPointerInputTransform ??= _dylib.lookupFunction<
        _c_GetPointerInputTransform,
        _dart_GetPointerInputTransform>('GetPointerInputTransform'))(
      pointerId,
      historyCount,
      inputTransform,
    );
  }

  _dart_GetPointerInputTransform? _GetPointerInputTransform;

  int GetLastInputInfo(
    ffi.Pointer<PLASTINPUTINFO> plii,
  ) {
    return (_GetLastInputInfo ??=
        _dylib.lookupFunction<_c_GetLastInputInfo, _dart_GetLastInputInfo>(
            'GetLastInputInfo'))(
      plii,
    );
  }

  _dart_GetLastInputInfo? _GetLastInputInfo;

  int MapVirtualKeyA(
    int uCode,
    int uMapType,
  ) {
    return (_MapVirtualKeyA ??=
        _dylib.lookupFunction<_c_MapVirtualKeyA, _dart_MapVirtualKeyA>(
            'MapVirtualKeyA'))(
      uCode,
      uMapType,
    );
  }

  _dart_MapVirtualKeyA? _MapVirtualKeyA;

  int MapVirtualKeyW(
    int uCode,
    int uMapType,
  ) {
    return (_MapVirtualKeyW ??=
        _dylib.lookupFunction<_c_MapVirtualKeyW, _dart_MapVirtualKeyW>(
            'MapVirtualKeyW'))(
      uCode,
      uMapType,
    );
  }

  _dart_MapVirtualKeyW? _MapVirtualKeyW;

  int MapVirtualKeyExA(
    int uCode,
    int uMapType,
    ffi.Pointer<HKL__> dwhkl,
  ) {
    return (_MapVirtualKeyExA ??=
        _dylib.lookupFunction<_c_MapVirtualKeyExA, _dart_MapVirtualKeyExA>(
            'MapVirtualKeyExA'))(
      uCode,
      uMapType,
      dwhkl,
    );
  }

  _dart_MapVirtualKeyExA? _MapVirtualKeyExA;

  int MapVirtualKeyExW(
    int uCode,
    int uMapType,
    ffi.Pointer<HKL__> dwhkl,
  ) {
    return (_MapVirtualKeyExW ??=
        _dylib.lookupFunction<_c_MapVirtualKeyExW, _dart_MapVirtualKeyExW>(
            'MapVirtualKeyExW'))(
      uCode,
      uMapType,
      dwhkl,
    );
  }

  _dart_MapVirtualKeyExW? _MapVirtualKeyExW;

  int GetInputState() {
    return (_GetInputState ??=
        _dylib.lookupFunction<_c_GetInputState, _dart_GetInputState>(
            'GetInputState'))();
  }

  _dart_GetInputState? _GetInputState;

  int GetQueueStatus(
    int flags,
  ) {
    return (_GetQueueStatus ??=
        _dylib.lookupFunction<_c_GetQueueStatus, _dart_GetQueueStatus>(
            'GetQueueStatus'))(
      flags,
    );
  }

  _dart_GetQueueStatus? _GetQueueStatus;

  ffi.Pointer<HWND__> GetCapture() {
    return (_GetCapture ??=
        _dylib.lookupFunction<_c_GetCapture, _dart_GetCapture>('GetCapture'))();
  }

  _dart_GetCapture? _GetCapture;

  ffi.Pointer<HWND__> SetCapture(
    ffi.Pointer<HWND__> hWnd,
  ) {
    return (_SetCapture ??=
        _dylib.lookupFunction<_c_SetCapture, _dart_SetCapture>('SetCapture'))(
      hWnd,
    );
  }

  _dart_SetCapture? _SetCapture;

  int ReleaseCapture() {
    return (_ReleaseCapture ??=
        _dylib.lookupFunction<_c_ReleaseCapture, _dart_ReleaseCapture>(
            'ReleaseCapture'))();
  }

  _dart_ReleaseCapture? _ReleaseCapture;

  int MsgWaitForMultipleObjects(
    int nCount,
    ffi.Pointer<ffi.Pointer<ffi.Void>> pHandles,
    int fWaitAll,
    int dwMilliseconds,
    int dwWakeMask,
  ) {
    return (_MsgWaitForMultipleObjects ??= _dylib.lookupFunction<
        _c_MsgWaitForMultipleObjects,
        _dart_MsgWaitForMultipleObjects>('MsgWaitForMultipleObjects'))(
      nCount,
      pHandles,
      fWaitAll,
      dwMilliseconds,
      dwWakeMask,
    );
  }

  _dart_MsgWaitForMultipleObjects? _MsgWaitForMultipleObjects;

  int MsgWaitForMultipleObjectsEx(
    int nCount,
    ffi.Pointer<ffi.Pointer<ffi.Void>> pHandles,
    int dwMilliseconds,
    int dwWakeMask,
    int dwFlags,
  ) {
    return (_MsgWaitForMultipleObjectsEx ??= _dylib.lookupFunction<
        _c_MsgWaitForMultipleObjectsEx,
        _dart_MsgWaitForMultipleObjectsEx>('MsgWaitForMultipleObjectsEx'))(
      nCount,
      pHandles,
      dwMilliseconds,
      dwWakeMask,
      dwFlags,
    );
  }

  _dart_MsgWaitForMultipleObjectsEx? _MsgWaitForMultipleObjectsEx;

  int SetTimer(
    ffi.Pointer<HWND__> hWnd,
    int nIDEvent,
    int uElapse,
    ffi.Pointer<ffi.NativeFunction<TIMERPROC>> lpTimerFunc,
  ) {
    return (_SetTimer ??=
        _dylib.lookupFunction<_c_SetTimer, _dart_SetTimer>('SetTimer'))(
      hWnd,
      nIDEvent,
      uElapse,
      lpTimerFunc,
    );
  }

  _dart_SetTimer? _SetTimer;

  int SetCoalescableTimer(
    ffi.Pointer<HWND__> hWnd,
    int nIDEvent,
    int uElapse,
    ffi.Pointer<ffi.NativeFunction<TIMERPROC>> lpTimerFunc,
    int uToleranceDelay,
  ) {
    return (_SetCoalescableTimer ??= _dylib.lookupFunction<
        _c_SetCoalescableTimer,
        _dart_SetCoalescableTimer>('SetCoalescableTimer'))(
      hWnd,
      nIDEvent,
      uElapse,
      lpTimerFunc,
      uToleranceDelay,
    );
  }

  _dart_SetCoalescableTimer? _SetCoalescableTimer;

  int KillTimer(
    ffi.Pointer<HWND__> hWnd,
    int uIDEvent,
  ) {
    return (_KillTimer ??=
        _dylib.lookupFunction<_c_KillTimer, _dart_KillTimer>('KillTimer'))(
      hWnd,
      uIDEvent,
    );
  }

  _dart_KillTimer? _KillTimer;

  int IsWindowUnicode(
    ffi.Pointer<HWND__> hWnd,
  ) {
    return (_IsWindowUnicode ??=
        _dylib.lookupFunction<_c_IsWindowUnicode, _dart_IsWindowUnicode>(
            'IsWindowUnicode'))(
      hWnd,
    );
  }

  _dart_IsWindowUnicode? _IsWindowUnicode;

  int EnableWindow(
    ffi.Pointer<HWND__> hWnd,
    int bEnable,
  ) {
    return (_EnableWindow ??= _dylib
        .lookupFunction<_c_EnableWindow, _dart_EnableWindow>('EnableWindow'))(
      hWnd,
      bEnable,
    );
  }

  _dart_EnableWindow? _EnableWindow;

  int IsWindowEnabled(
    ffi.Pointer<HWND__> hWnd,
  ) {
    return (_IsWindowEnabled ??=
        _dylib.lookupFunction<_c_IsWindowEnabled, _dart_IsWindowEnabled>(
            'IsWindowEnabled'))(
      hWnd,
    );
  }

  _dart_IsWindowEnabled? _IsWindowEnabled;

  ffi.Pointer<HACCEL__> LoadAcceleratorsA(
    ffi.Pointer<HINSTANCE__> hInstance,
    ffi.Pointer<ffi.Int8> lpTableName,
  ) {
    return (_LoadAcceleratorsA ??=
        _dylib.lookupFunction<_c_LoadAcceleratorsA, _dart_LoadAcceleratorsA>(
            'LoadAcceleratorsA'))(
      hInstance,
      lpTableName,
    );
  }

  _dart_LoadAcceleratorsA? _LoadAcceleratorsA;

  ffi.Pointer<HACCEL__> LoadAcceleratorsW(
    ffi.Pointer<HINSTANCE__> hInstance,
    ffi.Pointer<ffi.Uint16> lpTableName,
  ) {
    return (_LoadAcceleratorsW ??=
        _dylib.lookupFunction<_c_LoadAcceleratorsW, _dart_LoadAcceleratorsW>(
            'LoadAcceleratorsW'))(
      hInstance,
      lpTableName,
    );
  }

  _dart_LoadAcceleratorsW? _LoadAcceleratorsW;

  ffi.Pointer<HACCEL__> CreateAcceleratorTableA(
    ffi.Pointer<LPACCEL> paccel,
    int cAccel,
  ) {
    return (_CreateAcceleratorTableA ??= _dylib.lookupFunction<
        _c_CreateAcceleratorTableA,
        _dart_CreateAcceleratorTableA>('CreateAcceleratorTableA'))(
      paccel,
      cAccel,
    );
  }

  _dart_CreateAcceleratorTableA? _CreateAcceleratorTableA;

  ffi.Pointer<HACCEL__> CreateAcceleratorTableW(
    ffi.Pointer<LPACCEL> paccel,
    int cAccel,
  ) {
    return (_CreateAcceleratorTableW ??= _dylib.lookupFunction<
        _c_CreateAcceleratorTableW,
        _dart_CreateAcceleratorTableW>('CreateAcceleratorTableW'))(
      paccel,
      cAccel,
    );
  }

  _dart_CreateAcceleratorTableW? _CreateAcceleratorTableW;

  int DestroyAcceleratorTable(
    ffi.Pointer<HACCEL__> hAccel,
  ) {
    return (_DestroyAcceleratorTable ??= _dylib.lookupFunction<
        _c_DestroyAcceleratorTable,
        _dart_DestroyAcceleratorTable>('DestroyAcceleratorTable'))(
      hAccel,
    );
  }

  _dart_DestroyAcceleratorTable? _DestroyAcceleratorTable;

  int CopyAcceleratorTableA(
    ffi.Pointer<HACCEL__> hAccelSrc,
    ffi.Pointer<LPACCEL> lpAccelDst,
    int cAccelEntries,
  ) {
    return (_CopyAcceleratorTableA ??= _dylib.lookupFunction<
        _c_CopyAcceleratorTableA,
        _dart_CopyAcceleratorTableA>('CopyAcceleratorTableA'))(
      hAccelSrc,
      lpAccelDst,
      cAccelEntries,
    );
  }

  _dart_CopyAcceleratorTableA? _CopyAcceleratorTableA;

  int CopyAcceleratorTableW(
    ffi.Pointer<HACCEL__> hAccelSrc,
    ffi.Pointer<LPACCEL> lpAccelDst,
    int cAccelEntries,
  ) {
    return (_CopyAcceleratorTableW ??= _dylib.lookupFunction<
        _c_CopyAcceleratorTableW,
        _dart_CopyAcceleratorTableW>('CopyAcceleratorTableW'))(
      hAccelSrc,
      lpAccelDst,
      cAccelEntries,
    );
  }

  _dart_CopyAcceleratorTableW? _CopyAcceleratorTableW;

  int TranslateAcceleratorA(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<HACCEL__> hAccTable,
    ffi.Pointer<LPMSG> lpMsg,
  ) {
    return (_TranslateAcceleratorA ??= _dylib.lookupFunction<
        _c_TranslateAcceleratorA,
        _dart_TranslateAcceleratorA>('TranslateAcceleratorA'))(
      hWnd,
      hAccTable,
      lpMsg,
    );
  }

  _dart_TranslateAcceleratorA? _TranslateAcceleratorA;

  int TranslateAcceleratorW(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<HACCEL__> hAccTable,
    ffi.Pointer<LPMSG> lpMsg,
  ) {
    return (_TranslateAcceleratorW ??= _dylib.lookupFunction<
        _c_TranslateAcceleratorW,
        _dart_TranslateAcceleratorW>('TranslateAcceleratorW'))(
      hWnd,
      hAccTable,
      lpMsg,
    );
  }

  _dart_TranslateAcceleratorW? _TranslateAcceleratorW;

  int GetSystemMetrics(
    int nIndex,
  ) {
    return (_GetSystemMetrics ??=
        _dylib.lookupFunction<_c_GetSystemMetrics, _dart_GetSystemMetrics>(
            'GetSystemMetrics'))(
      nIndex,
    );
  }

  _dart_GetSystemMetrics? _GetSystemMetrics;

  int GetSystemMetricsForDpi(
    int nIndex,
    int dpi,
  ) {
    return (_GetSystemMetricsForDpi ??= _dylib.lookupFunction<
        _c_GetSystemMetricsForDpi,
        _dart_GetSystemMetricsForDpi>('GetSystemMetricsForDpi'))(
      nIndex,
      dpi,
    );
  }

  _dart_GetSystemMetricsForDpi? _GetSystemMetricsForDpi;

  ffi.Pointer<HMENU__> LoadMenuA(
    ffi.Pointer<HINSTANCE__> hInstance,
    ffi.Pointer<ffi.Int8> lpMenuName,
  ) {
    return (_LoadMenuA ??=
        _dylib.lookupFunction<_c_LoadMenuA, _dart_LoadMenuA>('LoadMenuA'))(
      hInstance,
      lpMenuName,
    );
  }

  _dart_LoadMenuA? _LoadMenuA;

  ffi.Pointer<HMENU__> LoadMenuW(
    ffi.Pointer<HINSTANCE__> hInstance,
    ffi.Pointer<ffi.Uint16> lpMenuName,
  ) {
    return (_LoadMenuW ??=
        _dylib.lookupFunction<_c_LoadMenuW, _dart_LoadMenuW>('LoadMenuW'))(
      hInstance,
      lpMenuName,
    );
  }

  _dart_LoadMenuW? _LoadMenuW;

  ffi.Pointer<HMENU__> LoadMenuIndirectA(
    ffi.Pointer<ffi.Void> lpMenuTemplate,
  ) {
    return (_LoadMenuIndirectA ??=
        _dylib.lookupFunction<_c_LoadMenuIndirectA, _dart_LoadMenuIndirectA>(
            'LoadMenuIndirectA'))(
      lpMenuTemplate,
    );
  }

  _dart_LoadMenuIndirectA? _LoadMenuIndirectA;

  ffi.Pointer<HMENU__> LoadMenuIndirectW(
    ffi.Pointer<ffi.Void> lpMenuTemplate,
  ) {
    return (_LoadMenuIndirectW ??=
        _dylib.lookupFunction<_c_LoadMenuIndirectW, _dart_LoadMenuIndirectW>(
            'LoadMenuIndirectW'))(
      lpMenuTemplate,
    );
  }

  _dart_LoadMenuIndirectW? _LoadMenuIndirectW;

  ffi.Pointer<HMENU__> GetMenu(
    ffi.Pointer<HWND__> hWnd,
  ) {
    return (_GetMenu ??=
        _dylib.lookupFunction<_c_GetMenu, _dart_GetMenu>('GetMenu'))(
      hWnd,
    );
  }

  _dart_GetMenu? _GetMenu;

  int SetMenu(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<HMENU__> hMenu,
  ) {
    return (_SetMenu ??=
        _dylib.lookupFunction<_c_SetMenu, _dart_SetMenu>('SetMenu'))(
      hWnd,
      hMenu,
    );
  }

  _dart_SetMenu? _SetMenu;

  int ChangeMenuA(
    ffi.Pointer<HMENU__> hMenu,
    int cmd,
    ffi.Pointer<ffi.Int8> lpszNewItem,
    int cmdInsert,
    int flags,
  ) {
    return (_ChangeMenuA ??= _dylib
        .lookupFunction<_c_ChangeMenuA, _dart_ChangeMenuA>('ChangeMenuA'))(
      hMenu,
      cmd,
      lpszNewItem,
      cmdInsert,
      flags,
    );
  }

  _dart_ChangeMenuA? _ChangeMenuA;

  int ChangeMenuW(
    ffi.Pointer<HMENU__> hMenu,
    int cmd,
    ffi.Pointer<ffi.Uint16> lpszNewItem,
    int cmdInsert,
    int flags,
  ) {
    return (_ChangeMenuW ??= _dylib
        .lookupFunction<_c_ChangeMenuW, _dart_ChangeMenuW>('ChangeMenuW'))(
      hMenu,
      cmd,
      lpszNewItem,
      cmdInsert,
      flags,
    );
  }

  _dart_ChangeMenuW? _ChangeMenuW;

  int HiliteMenuItem(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<HMENU__> hMenu,
    int uIDHiliteItem,
    int uHilite,
  ) {
    return (_HiliteMenuItem ??=
        _dylib.lookupFunction<_c_HiliteMenuItem, _dart_HiliteMenuItem>(
            'HiliteMenuItem'))(
      hWnd,
      hMenu,
      uIDHiliteItem,
      uHilite,
    );
  }

  _dart_HiliteMenuItem? _HiliteMenuItem;

  int GetMenuStringA(
    ffi.Pointer<HMENU__> hMenu,
    int uIDItem,
    ffi.Pointer<ffi.Int8> lpString,
    int cchMax,
    int flags,
  ) {
    return (_GetMenuStringA ??=
        _dylib.lookupFunction<_c_GetMenuStringA, _dart_GetMenuStringA>(
            'GetMenuStringA'))(
      hMenu,
      uIDItem,
      lpString,
      cchMax,
      flags,
    );
  }

  _dart_GetMenuStringA? _GetMenuStringA;

  int GetMenuStringW(
    ffi.Pointer<HMENU__> hMenu,
    int uIDItem,
    ffi.Pointer<ffi.Uint16> lpString,
    int cchMax,
    int flags,
  ) {
    return (_GetMenuStringW ??=
        _dylib.lookupFunction<_c_GetMenuStringW, _dart_GetMenuStringW>(
            'GetMenuStringW'))(
      hMenu,
      uIDItem,
      lpString,
      cchMax,
      flags,
    );
  }

  _dart_GetMenuStringW? _GetMenuStringW;

  int GetMenuState(
    ffi.Pointer<HMENU__> hMenu,
    int uId,
    int uFlags,
  ) {
    return (_GetMenuState ??= _dylib
        .lookupFunction<_c_GetMenuState, _dart_GetMenuState>('GetMenuState'))(
      hMenu,
      uId,
      uFlags,
    );
  }

  _dart_GetMenuState? _GetMenuState;

  int DrawMenuBar(
    ffi.Pointer<HWND__> hWnd,
  ) {
    return (_DrawMenuBar ??= _dylib
        .lookupFunction<_c_DrawMenuBar, _dart_DrawMenuBar>('DrawMenuBar'))(
      hWnd,
    );
  }

  _dart_DrawMenuBar? _DrawMenuBar;

  ffi.Pointer<HMENU__> GetSystemMenu(
    ffi.Pointer<HWND__> hWnd,
    int bRevert,
  ) {
    return (_GetSystemMenu ??=
        _dylib.lookupFunction<_c_GetSystemMenu, _dart_GetSystemMenu>(
            'GetSystemMenu'))(
      hWnd,
      bRevert,
    );
  }

  _dart_GetSystemMenu? _GetSystemMenu;

  ffi.Pointer<HMENU__> CreateMenu() {
    return (_CreateMenu ??=
        _dylib.lookupFunction<_c_CreateMenu, _dart_CreateMenu>('CreateMenu'))();
  }

  _dart_CreateMenu? _CreateMenu;

  ffi.Pointer<HMENU__> CreatePopupMenu() {
    return (_CreatePopupMenu ??=
        _dylib.lookupFunction<_c_CreatePopupMenu, _dart_CreatePopupMenu>(
            'CreatePopupMenu'))();
  }

  _dart_CreatePopupMenu? _CreatePopupMenu;

  int DestroyMenu(
    ffi.Pointer<HMENU__> hMenu,
  ) {
    return (_DestroyMenu ??= _dylib
        .lookupFunction<_c_DestroyMenu, _dart_DestroyMenu>('DestroyMenu'))(
      hMenu,
    );
  }

  _dart_DestroyMenu? _DestroyMenu;

  int CheckMenuItem(
    ffi.Pointer<HMENU__> hMenu,
    int uIDCheckItem,
    int uCheck,
  ) {
    return (_CheckMenuItem ??=
        _dylib.lookupFunction<_c_CheckMenuItem, _dart_CheckMenuItem>(
            'CheckMenuItem'))(
      hMenu,
      uIDCheckItem,
      uCheck,
    );
  }

  _dart_CheckMenuItem? _CheckMenuItem;

  int EnableMenuItem(
    ffi.Pointer<HMENU__> hMenu,
    int uIDEnableItem,
    int uEnable,
  ) {
    return (_EnableMenuItem ??=
        _dylib.lookupFunction<_c_EnableMenuItem, _dart_EnableMenuItem>(
            'EnableMenuItem'))(
      hMenu,
      uIDEnableItem,
      uEnable,
    );
  }

  _dart_EnableMenuItem? _EnableMenuItem;

  ffi.Pointer<HMENU__> GetSubMenu(
    ffi.Pointer<HMENU__> hMenu,
    int nPos,
  ) {
    return (_GetSubMenu ??=
        _dylib.lookupFunction<_c_GetSubMenu, _dart_GetSubMenu>('GetSubMenu'))(
      hMenu,
      nPos,
    );
  }

  _dart_GetSubMenu? _GetSubMenu;

  int GetMenuItemID(
    ffi.Pointer<HMENU__> hMenu,
    int nPos,
  ) {
    return (_GetMenuItemID ??=
        _dylib.lookupFunction<_c_GetMenuItemID, _dart_GetMenuItemID>(
            'GetMenuItemID'))(
      hMenu,
      nPos,
    );
  }

  _dart_GetMenuItemID? _GetMenuItemID;

  int GetMenuItemCount(
    ffi.Pointer<HMENU__> hMenu,
  ) {
    return (_GetMenuItemCount ??=
        _dylib.lookupFunction<_c_GetMenuItemCount, _dart_GetMenuItemCount>(
            'GetMenuItemCount'))(
      hMenu,
    );
  }

  _dart_GetMenuItemCount? _GetMenuItemCount;

  int InsertMenuA(
    ffi.Pointer<HMENU__> hMenu,
    int uPosition,
    int uFlags,
    int uIDNewItem,
    ffi.Pointer<ffi.Int8> lpNewItem,
  ) {
    return (_InsertMenuA ??= _dylib
        .lookupFunction<_c_InsertMenuA, _dart_InsertMenuA>('InsertMenuA'))(
      hMenu,
      uPosition,
      uFlags,
      uIDNewItem,
      lpNewItem,
    );
  }

  _dart_InsertMenuA? _InsertMenuA;

  int InsertMenuW(
    ffi.Pointer<HMENU__> hMenu,
    int uPosition,
    int uFlags,
    int uIDNewItem,
    ffi.Pointer<ffi.Uint16> lpNewItem,
  ) {
    return (_InsertMenuW ??= _dylib
        .lookupFunction<_c_InsertMenuW, _dart_InsertMenuW>('InsertMenuW'))(
      hMenu,
      uPosition,
      uFlags,
      uIDNewItem,
      lpNewItem,
    );
  }

  _dart_InsertMenuW? _InsertMenuW;

  int AppendMenuA(
    ffi.Pointer<HMENU__> hMenu,
    int uFlags,
    int uIDNewItem,
    ffi.Pointer<ffi.Int8> lpNewItem,
  ) {
    return (_AppendMenuA ??= _dylib
        .lookupFunction<_c_AppendMenuA, _dart_AppendMenuA>('AppendMenuA'))(
      hMenu,
      uFlags,
      uIDNewItem,
      lpNewItem,
    );
  }

  _dart_AppendMenuA? _AppendMenuA;

  int AppendMenuW(
    ffi.Pointer<HMENU__> hMenu,
    int uFlags,
    int uIDNewItem,
    ffi.Pointer<ffi.Uint16> lpNewItem,
  ) {
    return (_AppendMenuW ??= _dylib
        .lookupFunction<_c_AppendMenuW, _dart_AppendMenuW>('AppendMenuW'))(
      hMenu,
      uFlags,
      uIDNewItem,
      lpNewItem,
    );
  }

  _dart_AppendMenuW? _AppendMenuW;

  int ModifyMenuA(
    ffi.Pointer<HMENU__> hMnu,
    int uPosition,
    int uFlags,
    int uIDNewItem,
    ffi.Pointer<ffi.Int8> lpNewItem,
  ) {
    return (_ModifyMenuA ??= _dylib
        .lookupFunction<_c_ModifyMenuA, _dart_ModifyMenuA>('ModifyMenuA'))(
      hMnu,
      uPosition,
      uFlags,
      uIDNewItem,
      lpNewItem,
    );
  }

  _dart_ModifyMenuA? _ModifyMenuA;

  int ModifyMenuW(
    ffi.Pointer<HMENU__> hMnu,
    int uPosition,
    int uFlags,
    int uIDNewItem,
    ffi.Pointer<ffi.Uint16> lpNewItem,
  ) {
    return (_ModifyMenuW ??= _dylib
        .lookupFunction<_c_ModifyMenuW, _dart_ModifyMenuW>('ModifyMenuW'))(
      hMnu,
      uPosition,
      uFlags,
      uIDNewItem,
      lpNewItem,
    );
  }

  _dart_ModifyMenuW? _ModifyMenuW;

  int RemoveMenu(
    ffi.Pointer<HMENU__> hMenu,
    int uPosition,
    int uFlags,
  ) {
    return (_RemoveMenu ??=
        _dylib.lookupFunction<_c_RemoveMenu, _dart_RemoveMenu>('RemoveMenu'))(
      hMenu,
      uPosition,
      uFlags,
    );
  }

  _dart_RemoveMenu? _RemoveMenu;

  int DeleteMenu(
    ffi.Pointer<HMENU__> hMenu,
    int uPosition,
    int uFlags,
  ) {
    return (_DeleteMenu ??=
        _dylib.lookupFunction<_c_DeleteMenu, _dart_DeleteMenu>('DeleteMenu'))(
      hMenu,
      uPosition,
      uFlags,
    );
  }

  _dart_DeleteMenu? _DeleteMenu;

  int SetMenuItemBitmaps(
    ffi.Pointer<HMENU__> hMenu,
    int uPosition,
    int uFlags,
    ffi.Pointer<HBITMAP__> hBitmapUnchecked,
    ffi.Pointer<HBITMAP__> hBitmapChecked,
  ) {
    return (_SetMenuItemBitmaps ??=
        _dylib.lookupFunction<_c_SetMenuItemBitmaps, _dart_SetMenuItemBitmaps>(
            'SetMenuItemBitmaps'))(
      hMenu,
      uPosition,
      uFlags,
      hBitmapUnchecked,
      hBitmapChecked,
    );
  }

  _dart_SetMenuItemBitmaps? _SetMenuItemBitmaps;

  int GetMenuCheckMarkDimensions() {
    return (_GetMenuCheckMarkDimensions ??= _dylib.lookupFunction<
        _c_GetMenuCheckMarkDimensions,
        _dart_GetMenuCheckMarkDimensions>('GetMenuCheckMarkDimensions'))();
  }

  _dart_GetMenuCheckMarkDimensions? _GetMenuCheckMarkDimensions;

  int TrackPopupMenu(
    ffi.Pointer<HMENU__> hMenu,
    int uFlags,
    int x,
    int y,
    int nReserved,
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<LPRECT> prcRect,
  ) {
    return (_TrackPopupMenu ??=
        _dylib.lookupFunction<_c_TrackPopupMenu, _dart_TrackPopupMenu>(
            'TrackPopupMenu'))(
      hMenu,
      uFlags,
      x,
      y,
      nReserved,
      hWnd,
      prcRect,
    );
  }

  _dart_TrackPopupMenu? _TrackPopupMenu;

  int TrackPopupMenuEx(
    ffi.Pointer<HMENU__> hMenu,
    int uFlags,
    int x,
    int y,
    ffi.Pointer<HWND__> hwnd,
    ffi.Pointer<TPMPARAMS> lptpm,
  ) {
    return (_TrackPopupMenuEx ??=
        _dylib.lookupFunction<_c_TrackPopupMenuEx, _dart_TrackPopupMenuEx>(
            'TrackPopupMenuEx'))(
      hMenu,
      uFlags,
      x,
      y,
      hwnd,
      lptpm,
    );
  }

  _dart_TrackPopupMenuEx? _TrackPopupMenuEx;

  int CalculatePopupWindowPosition(
    ffi.Pointer<LPPOINT> anchorPoint,
    ffi.Pointer<LPSIZE> windowSize,
    int flags,
    ffi.Pointer<LPRECT> excludeRect,
    ffi.Pointer<LPRECT> popupWindowPosition,
  ) {
    return (_CalculatePopupWindowPosition ??= _dylib.lookupFunction<
        _c_CalculatePopupWindowPosition,
        _dart_CalculatePopupWindowPosition>('CalculatePopupWindowPosition'))(
      anchorPoint,
      windowSize,
      flags,
      excludeRect,
      popupWindowPosition,
    );
  }

  _dart_CalculatePopupWindowPosition? _CalculatePopupWindowPosition;

  int GetMenuInfo(
    ffi.Pointer<HMENU__> arg0,
    ffi.Pointer<LPMENUINFO> arg1,
  ) {
    return (_GetMenuInfo ??= _dylib
        .lookupFunction<_c_GetMenuInfo, _dart_GetMenuInfo>('GetMenuInfo'))(
      arg0,
      arg1,
    );
  }

  _dart_GetMenuInfo? _GetMenuInfo;

  int SetMenuInfo(
    ffi.Pointer<HMENU__> arg0,
    ffi.Pointer<LPMENUINFO> arg1,
  ) {
    return (_SetMenuInfo ??= _dylib
        .lookupFunction<_c_SetMenuInfo, _dart_SetMenuInfo>('SetMenuInfo'))(
      arg0,
      arg1,
    );
  }

  _dart_SetMenuInfo? _SetMenuInfo;

  int EndMenu() {
    return (_EndMenu ??=
        _dylib.lookupFunction<_c_EndMenu, _dart_EndMenu>('EndMenu'))();
  }

  _dart_EndMenu? _EndMenu;

  int InsertMenuItemA(
    ffi.Pointer<HMENU__> hmenu,
    int item,
    int fByPosition,
    ffi.Pointer<LPMENUITEMINFOA> lpmi,
  ) {
    return (_InsertMenuItemA ??=
        _dylib.lookupFunction<_c_InsertMenuItemA, _dart_InsertMenuItemA>(
            'InsertMenuItemA'))(
      hmenu,
      item,
      fByPosition,
      lpmi,
    );
  }

  _dart_InsertMenuItemA? _InsertMenuItemA;

  int InsertMenuItemW(
    ffi.Pointer<HMENU__> hmenu,
    int item,
    int fByPosition,
    ffi.Pointer<LPMENUITEMINFOW> lpmi,
  ) {
    return (_InsertMenuItemW ??=
        _dylib.lookupFunction<_c_InsertMenuItemW, _dart_InsertMenuItemW>(
            'InsertMenuItemW'))(
      hmenu,
      item,
      fByPosition,
      lpmi,
    );
  }

  _dart_InsertMenuItemW? _InsertMenuItemW;

  int GetMenuItemInfoA(
    ffi.Pointer<HMENU__> hmenu,
    int item,
    int fByPosition,
    ffi.Pointer<LPMENUITEMINFOA> lpmii,
  ) {
    return (_GetMenuItemInfoA ??=
        _dylib.lookupFunction<_c_GetMenuItemInfoA, _dart_GetMenuItemInfoA>(
            'GetMenuItemInfoA'))(
      hmenu,
      item,
      fByPosition,
      lpmii,
    );
  }

  _dart_GetMenuItemInfoA? _GetMenuItemInfoA;

  int GetMenuItemInfoW(
    ffi.Pointer<HMENU__> hmenu,
    int item,
    int fByPosition,
    ffi.Pointer<LPMENUITEMINFOW> lpmii,
  ) {
    return (_GetMenuItemInfoW ??=
        _dylib.lookupFunction<_c_GetMenuItemInfoW, _dart_GetMenuItemInfoW>(
            'GetMenuItemInfoW'))(
      hmenu,
      item,
      fByPosition,
      lpmii,
    );
  }

  _dart_GetMenuItemInfoW? _GetMenuItemInfoW;

  int SetMenuItemInfoA(
    ffi.Pointer<HMENU__> hmenu,
    int item,
    int fByPositon,
    ffi.Pointer<LPMENUITEMINFOA> lpmii,
  ) {
    return (_SetMenuItemInfoA ??=
        _dylib.lookupFunction<_c_SetMenuItemInfoA, _dart_SetMenuItemInfoA>(
            'SetMenuItemInfoA'))(
      hmenu,
      item,
      fByPositon,
      lpmii,
    );
  }

  _dart_SetMenuItemInfoA? _SetMenuItemInfoA;

  int SetMenuItemInfoW(
    ffi.Pointer<HMENU__> hmenu,
    int item,
    int fByPositon,
    ffi.Pointer<LPMENUITEMINFOW> lpmii,
  ) {
    return (_SetMenuItemInfoW ??=
        _dylib.lookupFunction<_c_SetMenuItemInfoW, _dart_SetMenuItemInfoW>(
            'SetMenuItemInfoW'))(
      hmenu,
      item,
      fByPositon,
      lpmii,
    );
  }

  _dart_SetMenuItemInfoW? _SetMenuItemInfoW;

  int GetMenuDefaultItem(
    ffi.Pointer<HMENU__> hMenu,
    int fByPos,
    int gmdiFlags,
  ) {
    return (_GetMenuDefaultItem ??=
        _dylib.lookupFunction<_c_GetMenuDefaultItem, _dart_GetMenuDefaultItem>(
            'GetMenuDefaultItem'))(
      hMenu,
      fByPos,
      gmdiFlags,
    );
  }

  _dart_GetMenuDefaultItem? _GetMenuDefaultItem;

  int SetMenuDefaultItem(
    ffi.Pointer<HMENU__> hMenu,
    int uItem,
    int fByPos,
  ) {
    return (_SetMenuDefaultItem ??=
        _dylib.lookupFunction<_c_SetMenuDefaultItem, _dart_SetMenuDefaultItem>(
            'SetMenuDefaultItem'))(
      hMenu,
      uItem,
      fByPos,
    );
  }

  _dart_SetMenuDefaultItem? _SetMenuDefaultItem;

  int GetMenuItemRect(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<HMENU__> hMenu,
    int uItem,
    ffi.Pointer<LPRECT> lprcItem,
  ) {
    return (_GetMenuItemRect ??=
        _dylib.lookupFunction<_c_GetMenuItemRect, _dart_GetMenuItemRect>(
            'GetMenuItemRect'))(
      hWnd,
      hMenu,
      uItem,
      lprcItem,
    );
  }

  _dart_GetMenuItemRect? _GetMenuItemRect;

  int DragObject(
    ffi.Pointer<HWND__> hwndParent,
    ffi.Pointer<HWND__> hwndFrom,
    int fmt,
    int data,
    ffi.Pointer<HICON__> hcur,
  ) {
    return (_DragObject ??=
        _dylib.lookupFunction<_c_DragObject, _dart_DragObject>('DragObject'))(
      hwndParent,
      hwndFrom,
      fmt,
      data,
      hcur,
    );
  }

  _dart_DragObject? _DragObject;

  int DrawIcon(
    ffi.Pointer<HDC__> hDC,
    int X,
    int Y,
    ffi.Pointer<HICON__> hIcon,
  ) {
    return (_DrawIcon ??=
        _dylib.lookupFunction<_c_DrawIcon, _dart_DrawIcon>('DrawIcon'))(
      hDC,
      X,
      Y,
      hIcon,
    );
  }

  _dart_DrawIcon? _DrawIcon;

  int DrawTextA(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<ffi.Int8> lpchText,
    int cchText,
    ffi.Pointer<LPRECT> lprc,
    int format,
  ) {
    return (_DrawTextA ??=
        _dylib.lookupFunction<_c_DrawTextA, _dart_DrawTextA>('DrawTextA'))(
      hdc,
      lpchText,
      cchText,
      lprc,
      format,
    );
  }

  _dart_DrawTextA? _DrawTextA;

  int DrawTextW(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<ffi.Uint16> lpchText,
    int cchText,
    ffi.Pointer<LPRECT> lprc,
    int format,
  ) {
    return (_DrawTextW ??=
        _dylib.lookupFunction<_c_DrawTextW, _dart_DrawTextW>('DrawTextW'))(
      hdc,
      lpchText,
      cchText,
      lprc,
      format,
    );
  }

  _dart_DrawTextW? _DrawTextW;

  int DrawTextExA(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<ffi.Int8> lpchText,
    int cchText,
    ffi.Pointer<LPRECT> lprc,
    int format,
    ffi.Pointer<LPDRAWTEXTPARAMS> lpdtp,
  ) {
    return (_DrawTextExA ??= _dylib
        .lookupFunction<_c_DrawTextExA, _dart_DrawTextExA>('DrawTextExA'))(
      hdc,
      lpchText,
      cchText,
      lprc,
      format,
      lpdtp,
    );
  }

  _dart_DrawTextExA? _DrawTextExA;

  int DrawTextExW(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<ffi.Uint16> lpchText,
    int cchText,
    ffi.Pointer<LPRECT> lprc,
    int format,
    ffi.Pointer<LPDRAWTEXTPARAMS> lpdtp,
  ) {
    return (_DrawTextExW ??= _dylib
        .lookupFunction<_c_DrawTextExW, _dart_DrawTextExW>('DrawTextExW'))(
      hdc,
      lpchText,
      cchText,
      lprc,
      format,
      lpdtp,
    );
  }

  _dart_DrawTextExW? _DrawTextExW;

  int GrayStringA(
    ffi.Pointer<HDC__> hDC,
    ffi.Pointer<HBRUSH__> hBrush,
    ffi.Pointer<ffi.NativeFunction<GRAYSTRINGPROC>> lpOutputFunc,
    int lpData,
    int nCount,
    int X,
    int Y,
    int nWidth,
    int nHeight,
  ) {
    return (_GrayStringA ??= _dylib
        .lookupFunction<_c_GrayStringA, _dart_GrayStringA>('GrayStringA'))(
      hDC,
      hBrush,
      lpOutputFunc,
      lpData,
      nCount,
      X,
      Y,
      nWidth,
      nHeight,
    );
  }

  _dart_GrayStringA? _GrayStringA;

  int GrayStringW(
    ffi.Pointer<HDC__> hDC,
    ffi.Pointer<HBRUSH__> hBrush,
    ffi.Pointer<ffi.NativeFunction<GRAYSTRINGPROC>> lpOutputFunc,
    int lpData,
    int nCount,
    int X,
    int Y,
    int nWidth,
    int nHeight,
  ) {
    return (_GrayStringW ??= _dylib
        .lookupFunction<_c_GrayStringW, _dart_GrayStringW>('GrayStringW'))(
      hDC,
      hBrush,
      lpOutputFunc,
      lpData,
      nCount,
      X,
      Y,
      nWidth,
      nHeight,
    );
  }

  _dart_GrayStringW? _GrayStringW;

  int DrawStateA(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<HBRUSH__> hbrFore,
    ffi.Pointer<ffi.NativeFunction<DRAWSTATEPROC>> qfnCallBack,
    int lData,
    int wData,
    int x,
    int y,
    int cx,
    int cy,
    int uFlags,
  ) {
    return (_DrawStateA ??=
        _dylib.lookupFunction<_c_DrawStateA, _dart_DrawStateA>('DrawStateA'))(
      hdc,
      hbrFore,
      qfnCallBack,
      lData,
      wData,
      x,
      y,
      cx,
      cy,
      uFlags,
    );
  }

  _dart_DrawStateA? _DrawStateA;

  int DrawStateW(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<HBRUSH__> hbrFore,
    ffi.Pointer<ffi.NativeFunction<DRAWSTATEPROC>> qfnCallBack,
    int lData,
    int wData,
    int x,
    int y,
    int cx,
    int cy,
    int uFlags,
  ) {
    return (_DrawStateW ??=
        _dylib.lookupFunction<_c_DrawStateW, _dart_DrawStateW>('DrawStateW'))(
      hdc,
      hbrFore,
      qfnCallBack,
      lData,
      wData,
      x,
      y,
      cx,
      cy,
      uFlags,
    );
  }

  _dart_DrawStateW? _DrawStateW;

  int TabbedTextOutA(
    ffi.Pointer<HDC__> hdc,
    int x,
    int y,
    ffi.Pointer<ffi.Int8> lpString,
    int chCount,
    int nTabPositions,
    ffi.Pointer<ffi.Int32> lpnTabStopPositions,
    int nTabOrigin,
  ) {
    return (_TabbedTextOutA ??=
        _dylib.lookupFunction<_c_TabbedTextOutA, _dart_TabbedTextOutA>(
            'TabbedTextOutA'))(
      hdc,
      x,
      y,
      lpString,
      chCount,
      nTabPositions,
      lpnTabStopPositions,
      nTabOrigin,
    );
  }

  _dart_TabbedTextOutA? _TabbedTextOutA;

  int TabbedTextOutW(
    ffi.Pointer<HDC__> hdc,
    int x,
    int y,
    ffi.Pointer<ffi.Uint16> lpString,
    int chCount,
    int nTabPositions,
    ffi.Pointer<ffi.Int32> lpnTabStopPositions,
    int nTabOrigin,
  ) {
    return (_TabbedTextOutW ??=
        _dylib.lookupFunction<_c_TabbedTextOutW, _dart_TabbedTextOutW>(
            'TabbedTextOutW'))(
      hdc,
      x,
      y,
      lpString,
      chCount,
      nTabPositions,
      lpnTabStopPositions,
      nTabOrigin,
    );
  }

  _dart_TabbedTextOutW? _TabbedTextOutW;

  int GetTabbedTextExtentA(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<ffi.Int8> lpString,
    int chCount,
    int nTabPositions,
    ffi.Pointer<ffi.Int32> lpnTabStopPositions,
  ) {
    return (_GetTabbedTextExtentA ??= _dylib.lookupFunction<
        _c_GetTabbedTextExtentA,
        _dart_GetTabbedTextExtentA>('GetTabbedTextExtentA'))(
      hdc,
      lpString,
      chCount,
      nTabPositions,
      lpnTabStopPositions,
    );
  }

  _dart_GetTabbedTextExtentA? _GetTabbedTextExtentA;

  int GetTabbedTextExtentW(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<ffi.Uint16> lpString,
    int chCount,
    int nTabPositions,
    ffi.Pointer<ffi.Int32> lpnTabStopPositions,
  ) {
    return (_GetTabbedTextExtentW ??= _dylib.lookupFunction<
        _c_GetTabbedTextExtentW,
        _dart_GetTabbedTextExtentW>('GetTabbedTextExtentW'))(
      hdc,
      lpString,
      chCount,
      nTabPositions,
      lpnTabStopPositions,
    );
  }

  _dart_GetTabbedTextExtentW? _GetTabbedTextExtentW;

  int UpdateWindow(
    ffi.Pointer<HWND__> hWnd,
  ) {
    return (_UpdateWindow ??= _dylib
        .lookupFunction<_c_UpdateWindow, _dart_UpdateWindow>('UpdateWindow'))(
      hWnd,
    );
  }

  _dart_UpdateWindow? _UpdateWindow;

  ffi.Pointer<HWND__> SetActiveWindow(
    ffi.Pointer<HWND__> hWnd,
  ) {
    return (_SetActiveWindow ??=
        _dylib.lookupFunction<_c_SetActiveWindow, _dart_SetActiveWindow>(
            'SetActiveWindow'))(
      hWnd,
    );
  }

  _dart_SetActiveWindow? _SetActiveWindow;

  ffi.Pointer<HWND__> GetForegroundWindow() {
    return (_GetForegroundWindow ??= _dylib.lookupFunction<
        _c_GetForegroundWindow,
        _dart_GetForegroundWindow>('GetForegroundWindow'))();
  }

  _dart_GetForegroundWindow? _GetForegroundWindow;

  int PaintDesktop(
    ffi.Pointer<HDC__> hdc,
  ) {
    return (_PaintDesktop ??= _dylib
        .lookupFunction<_c_PaintDesktop, _dart_PaintDesktop>('PaintDesktop'))(
      hdc,
    );
  }

  _dart_PaintDesktop? _PaintDesktop;

  void SwitchToThisWindow(
    ffi.Pointer<HWND__> hwnd,
    int fUnknown,
  ) {
    return (_SwitchToThisWindow ??=
        _dylib.lookupFunction<_c_SwitchToThisWindow, _dart_SwitchToThisWindow>(
            'SwitchToThisWindow'))(
      hwnd,
      fUnknown,
    );
  }

  _dart_SwitchToThisWindow? _SwitchToThisWindow;

  int SetForegroundWindow(
    ffi.Pointer<HWND__> hWnd,
  ) {
    return (_SetForegroundWindow ??= _dylib.lookupFunction<
        _c_SetForegroundWindow,
        _dart_SetForegroundWindow>('SetForegroundWindow'))(
      hWnd,
    );
  }

  _dart_SetForegroundWindow? _SetForegroundWindow;

  int AllowSetForegroundWindow(
    int dwProcessId,
  ) {
    return (_AllowSetForegroundWindow ??= _dylib.lookupFunction<
        _c_AllowSetForegroundWindow,
        _dart_AllowSetForegroundWindow>('AllowSetForegroundWindow'))(
      dwProcessId,
    );
  }

  _dart_AllowSetForegroundWindow? _AllowSetForegroundWindow;

  int LockSetForegroundWindow(
    int uLockCode,
  ) {
    return (_LockSetForegroundWindow ??= _dylib.lookupFunction<
        _c_LockSetForegroundWindow,
        _dart_LockSetForegroundWindow>('LockSetForegroundWindow'))(
      uLockCode,
    );
  }

  _dart_LockSetForegroundWindow? _LockSetForegroundWindow;

  ffi.Pointer<HWND__> WindowFromDC(
    ffi.Pointer<HDC__> hDC,
  ) {
    return (_WindowFromDC ??= _dylib
        .lookupFunction<_c_WindowFromDC, _dart_WindowFromDC>('WindowFromDC'))(
      hDC,
    );
  }

  _dart_WindowFromDC? _WindowFromDC;

  ffi.Pointer<HDC__> GetDC(
    ffi.Pointer<HWND__> hWnd,
  ) {
    return (_GetDC ??= _dylib.lookupFunction<_c_GetDC, _dart_GetDC>('GetDC'))(
      hWnd,
    );
  }

  _dart_GetDC? _GetDC;

  ffi.Pointer<HDC__> GetDCEx(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<HRGN__> hrgnClip,
    int flags,
  ) {
    return (_GetDCEx ??=
        _dylib.lookupFunction<_c_GetDCEx, _dart_GetDCEx>('GetDCEx'))(
      hWnd,
      hrgnClip,
      flags,
    );
  }

  _dart_GetDCEx? _GetDCEx;

  ffi.Pointer<HDC__> GetWindowDC(
    ffi.Pointer<HWND__> hWnd,
  ) {
    return (_GetWindowDC ??= _dylib
        .lookupFunction<_c_GetWindowDC, _dart_GetWindowDC>('GetWindowDC'))(
      hWnd,
    );
  }

  _dart_GetWindowDC? _GetWindowDC;

  int ReleaseDC(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<HDC__> hDC,
  ) {
    return (_ReleaseDC ??=
        _dylib.lookupFunction<_c_ReleaseDC, _dart_ReleaseDC>('ReleaseDC'))(
      hWnd,
      hDC,
    );
  }

  _dart_ReleaseDC? _ReleaseDC;

  ffi.Pointer<HDC__> BeginPaint(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<LPPAINTSTRUCT> lpPaint,
  ) {
    return (_BeginPaint ??=
        _dylib.lookupFunction<_c_BeginPaint, _dart_BeginPaint>('BeginPaint'))(
      hWnd,
      lpPaint,
    );
  }

  _dart_BeginPaint? _BeginPaint;

  int EndPaint(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<LPPAINTSTRUCT> lpPaint,
  ) {
    return (_EndPaint ??=
        _dylib.lookupFunction<_c_EndPaint, _dart_EndPaint>('EndPaint'))(
      hWnd,
      lpPaint,
    );
  }

  _dart_EndPaint? _EndPaint;

  int GetUpdateRect(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<LPRECT> lpRect,
    int bErase,
  ) {
    return (_GetUpdateRect ??=
        _dylib.lookupFunction<_c_GetUpdateRect, _dart_GetUpdateRect>(
            'GetUpdateRect'))(
      hWnd,
      lpRect,
      bErase,
    );
  }

  _dart_GetUpdateRect? _GetUpdateRect;

  int GetUpdateRgn(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<HRGN__> hRgn,
    int bErase,
  ) {
    return (_GetUpdateRgn ??= _dylib
        .lookupFunction<_c_GetUpdateRgn, _dart_GetUpdateRgn>('GetUpdateRgn'))(
      hWnd,
      hRgn,
      bErase,
    );
  }

  _dart_GetUpdateRgn? _GetUpdateRgn;

  int SetWindowRgn(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<HRGN__> hRgn,
    int bRedraw,
  ) {
    return (_SetWindowRgn ??= _dylib
        .lookupFunction<_c_SetWindowRgn, _dart_SetWindowRgn>('SetWindowRgn'))(
      hWnd,
      hRgn,
      bRedraw,
    );
  }

  _dart_SetWindowRgn? _SetWindowRgn;

  int GetWindowRgn(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<HRGN__> hRgn,
  ) {
    return (_GetWindowRgn ??= _dylib
        .lookupFunction<_c_GetWindowRgn, _dart_GetWindowRgn>('GetWindowRgn'))(
      hWnd,
      hRgn,
    );
  }

  _dart_GetWindowRgn? _GetWindowRgn;

  int GetWindowRgnBox(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<LPRECT> lprc,
  ) {
    return (_GetWindowRgnBox ??=
        _dylib.lookupFunction<_c_GetWindowRgnBox, _dart_GetWindowRgnBox>(
            'GetWindowRgnBox'))(
      hWnd,
      lprc,
    );
  }

  _dart_GetWindowRgnBox? _GetWindowRgnBox;

  int ExcludeUpdateRgn(
    ffi.Pointer<HDC__> hDC,
    ffi.Pointer<HWND__> hWnd,
  ) {
    return (_ExcludeUpdateRgn ??=
        _dylib.lookupFunction<_c_ExcludeUpdateRgn, _dart_ExcludeUpdateRgn>(
            'ExcludeUpdateRgn'))(
      hDC,
      hWnd,
    );
  }

  _dart_ExcludeUpdateRgn? _ExcludeUpdateRgn;

  int InvalidateRect(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<LPRECT> lpRect,
    int bErase,
  ) {
    return (_InvalidateRect ??=
        _dylib.lookupFunction<_c_InvalidateRect, _dart_InvalidateRect>(
            'InvalidateRect'))(
      hWnd,
      lpRect,
      bErase,
    );
  }

  _dart_InvalidateRect? _InvalidateRect;

  int ValidateRect(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<LPRECT> lpRect,
  ) {
    return (_ValidateRect ??= _dylib
        .lookupFunction<_c_ValidateRect, _dart_ValidateRect>('ValidateRect'))(
      hWnd,
      lpRect,
    );
  }

  _dart_ValidateRect? _ValidateRect;

  int InvalidateRgn(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<HRGN__> hRgn,
    int bErase,
  ) {
    return (_InvalidateRgn ??=
        _dylib.lookupFunction<_c_InvalidateRgn, _dart_InvalidateRgn>(
            'InvalidateRgn'))(
      hWnd,
      hRgn,
      bErase,
    );
  }

  _dart_InvalidateRgn? _InvalidateRgn;

  int ValidateRgn(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<HRGN__> hRgn,
  ) {
    return (_ValidateRgn ??= _dylib
        .lookupFunction<_c_ValidateRgn, _dart_ValidateRgn>('ValidateRgn'))(
      hWnd,
      hRgn,
    );
  }

  _dart_ValidateRgn? _ValidateRgn;

  int RedrawWindow(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<LPRECT> lprcUpdate,
    ffi.Pointer<HRGN__> hrgnUpdate,
    int flags,
  ) {
    return (_RedrawWindow ??= _dylib
        .lookupFunction<_c_RedrawWindow, _dart_RedrawWindow>('RedrawWindow'))(
      hWnd,
      lprcUpdate,
      hrgnUpdate,
      flags,
    );
  }

  _dart_RedrawWindow? _RedrawWindow;

  int LockWindowUpdate(
    ffi.Pointer<HWND__> hWndLock,
  ) {
    return (_LockWindowUpdate ??=
        _dylib.lookupFunction<_c_LockWindowUpdate, _dart_LockWindowUpdate>(
            'LockWindowUpdate'))(
      hWndLock,
    );
  }

  _dart_LockWindowUpdate? _LockWindowUpdate;

  int ScrollWindow(
    ffi.Pointer<HWND__> hWnd,
    int XAmount,
    int YAmount,
    ffi.Pointer<LPRECT> lpRect,
    ffi.Pointer<LPRECT> lpClipRect,
  ) {
    return (_ScrollWindow ??= _dylib
        .lookupFunction<_c_ScrollWindow, _dart_ScrollWindow>('ScrollWindow'))(
      hWnd,
      XAmount,
      YAmount,
      lpRect,
      lpClipRect,
    );
  }

  _dart_ScrollWindow? _ScrollWindow;

  int ScrollDC(
    ffi.Pointer<HDC__> hDC,
    int dx,
    int dy,
    ffi.Pointer<LPRECT> lprcScroll,
    ffi.Pointer<LPRECT> lprcClip,
    ffi.Pointer<HRGN__> hrgnUpdate,
    ffi.Pointer<LPRECT> lprcUpdate,
  ) {
    return (_ScrollDC ??=
        _dylib.lookupFunction<_c_ScrollDC, _dart_ScrollDC>('ScrollDC'))(
      hDC,
      dx,
      dy,
      lprcScroll,
      lprcClip,
      hrgnUpdate,
      lprcUpdate,
    );
  }

  _dart_ScrollDC? _ScrollDC;

  int ScrollWindowEx(
    ffi.Pointer<HWND__> hWnd,
    int dx,
    int dy,
    ffi.Pointer<LPRECT> prcScroll,
    ffi.Pointer<LPRECT> prcClip,
    ffi.Pointer<HRGN__> hrgnUpdate,
    ffi.Pointer<LPRECT> prcUpdate,
    int flags,
  ) {
    return (_ScrollWindowEx ??=
        _dylib.lookupFunction<_c_ScrollWindowEx, _dart_ScrollWindowEx>(
            'ScrollWindowEx'))(
      hWnd,
      dx,
      dy,
      prcScroll,
      prcClip,
      hrgnUpdate,
      prcUpdate,
      flags,
    );
  }

  _dart_ScrollWindowEx? _ScrollWindowEx;

  int SetScrollPos(
    ffi.Pointer<HWND__> hWnd,
    int nBar,
    int nPos,
    int bRedraw,
  ) {
    return (_SetScrollPos ??= _dylib
        .lookupFunction<_c_SetScrollPos, _dart_SetScrollPos>('SetScrollPos'))(
      hWnd,
      nBar,
      nPos,
      bRedraw,
    );
  }

  _dart_SetScrollPos? _SetScrollPos;

  int GetScrollPos(
    ffi.Pointer<HWND__> hWnd,
    int nBar,
  ) {
    return (_GetScrollPos ??= _dylib
        .lookupFunction<_c_GetScrollPos, _dart_GetScrollPos>('GetScrollPos'))(
      hWnd,
      nBar,
    );
  }

  _dart_GetScrollPos? _GetScrollPos;

  int SetScrollRange(
    ffi.Pointer<HWND__> hWnd,
    int nBar,
    int nMinPos,
    int nMaxPos,
    int bRedraw,
  ) {
    return (_SetScrollRange ??=
        _dylib.lookupFunction<_c_SetScrollRange, _dart_SetScrollRange>(
            'SetScrollRange'))(
      hWnd,
      nBar,
      nMinPos,
      nMaxPos,
      bRedraw,
    );
  }

  _dart_SetScrollRange? _SetScrollRange;

  int GetScrollRange(
    ffi.Pointer<HWND__> hWnd,
    int nBar,
    ffi.Pointer<ffi.Int32> lpMinPos,
    ffi.Pointer<ffi.Int32> lpMaxPos,
  ) {
    return (_GetScrollRange ??=
        _dylib.lookupFunction<_c_GetScrollRange, _dart_GetScrollRange>(
            'GetScrollRange'))(
      hWnd,
      nBar,
      lpMinPos,
      lpMaxPos,
    );
  }

  _dart_GetScrollRange? _GetScrollRange;

  int ShowScrollBar(
    ffi.Pointer<HWND__> hWnd,
    int wBar,
    int bShow,
  ) {
    return (_ShowScrollBar ??=
        _dylib.lookupFunction<_c_ShowScrollBar, _dart_ShowScrollBar>(
            'ShowScrollBar'))(
      hWnd,
      wBar,
      bShow,
    );
  }

  _dart_ShowScrollBar? _ShowScrollBar;

  int EnableScrollBar(
    ffi.Pointer<HWND__> hWnd,
    int wSBflags,
    int wArrows,
  ) {
    return (_EnableScrollBar ??=
        _dylib.lookupFunction<_c_EnableScrollBar, _dart_EnableScrollBar>(
            'EnableScrollBar'))(
      hWnd,
      wSBflags,
      wArrows,
    );
  }

  _dart_EnableScrollBar? _EnableScrollBar;

  int SetPropA(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<ffi.Int8> lpString,
    ffi.Pointer<ffi.Void> hData,
  ) {
    return (_SetPropA ??=
        _dylib.lookupFunction<_c_SetPropA, _dart_SetPropA>('SetPropA'))(
      hWnd,
      lpString,
      hData,
    );
  }

  _dart_SetPropA? _SetPropA;

  int SetPropW(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<ffi.Uint16> lpString,
    ffi.Pointer<ffi.Void> hData,
  ) {
    return (_SetPropW ??=
        _dylib.lookupFunction<_c_SetPropW, _dart_SetPropW>('SetPropW'))(
      hWnd,
      lpString,
      hData,
    );
  }

  _dart_SetPropW? _SetPropW;

  ffi.Pointer<ffi.Void> GetPropA(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<ffi.Int8> lpString,
  ) {
    return (_GetPropA ??=
        _dylib.lookupFunction<_c_GetPropA, _dart_GetPropA>('GetPropA'))(
      hWnd,
      lpString,
    );
  }

  _dart_GetPropA? _GetPropA;

  ffi.Pointer<ffi.Void> GetPropW(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<ffi.Uint16> lpString,
  ) {
    return (_GetPropW ??=
        _dylib.lookupFunction<_c_GetPropW, _dart_GetPropW>('GetPropW'))(
      hWnd,
      lpString,
    );
  }

  _dart_GetPropW? _GetPropW;

  ffi.Pointer<ffi.Void> RemovePropA(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<ffi.Int8> lpString,
  ) {
    return (_RemovePropA ??= _dylib
        .lookupFunction<_c_RemovePropA, _dart_RemovePropA>('RemovePropA'))(
      hWnd,
      lpString,
    );
  }

  _dart_RemovePropA? _RemovePropA;

  ffi.Pointer<ffi.Void> RemovePropW(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<ffi.Uint16> lpString,
  ) {
    return (_RemovePropW ??= _dylib
        .lookupFunction<_c_RemovePropW, _dart_RemovePropW>('RemovePropW'))(
      hWnd,
      lpString,
    );
  }

  _dart_RemovePropW? _RemovePropW;

  int EnumPropsExA(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<ffi.NativeFunction<PROPENUMPROCEXA>> lpEnumFunc,
    int lParam,
  ) {
    return (_EnumPropsExA ??= _dylib
        .lookupFunction<_c_EnumPropsExA, _dart_EnumPropsExA>('EnumPropsExA'))(
      hWnd,
      lpEnumFunc,
      lParam,
    );
  }

  _dart_EnumPropsExA? _EnumPropsExA;

  int EnumPropsExW(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<ffi.NativeFunction<PROPENUMPROCEXW>> lpEnumFunc,
    int lParam,
  ) {
    return (_EnumPropsExW ??= _dylib
        .lookupFunction<_c_EnumPropsExW, _dart_EnumPropsExW>('EnumPropsExW'))(
      hWnd,
      lpEnumFunc,
      lParam,
    );
  }

  _dart_EnumPropsExW? _EnumPropsExW;

  int EnumPropsA(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<ffi.NativeFunction<PROPENUMPROCA>> lpEnumFunc,
  ) {
    return (_EnumPropsA ??=
        _dylib.lookupFunction<_c_EnumPropsA, _dart_EnumPropsA>('EnumPropsA'))(
      hWnd,
      lpEnumFunc,
    );
  }

  _dart_EnumPropsA? _EnumPropsA;

  int EnumPropsW(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<ffi.NativeFunction<PROPENUMPROCW>> lpEnumFunc,
  ) {
    return (_EnumPropsW ??=
        _dylib.lookupFunction<_c_EnumPropsW, _dart_EnumPropsW>('EnumPropsW'))(
      hWnd,
      lpEnumFunc,
    );
  }

  _dart_EnumPropsW? _EnumPropsW;

  int SetWindowTextA(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<ffi.Int8> lpString,
  ) {
    return (_SetWindowTextA ??=
        _dylib.lookupFunction<_c_SetWindowTextA, _dart_SetWindowTextA>(
            'SetWindowTextA'))(
      hWnd,
      lpString,
    );
  }

  _dart_SetWindowTextA? _SetWindowTextA;

  int SetWindowTextW(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<ffi.Uint16> lpString,
  ) {
    return (_SetWindowTextW ??=
        _dylib.lookupFunction<_c_SetWindowTextW, _dart_SetWindowTextW>(
            'SetWindowTextW'))(
      hWnd,
      lpString,
    );
  }

  _dart_SetWindowTextW? _SetWindowTextW;

  int GetWindowTextA(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<ffi.Int8> lpString,
    int nMaxCount,
  ) {
    return (_GetWindowTextA ??=
        _dylib.lookupFunction<_c_GetWindowTextA, _dart_GetWindowTextA>(
            'GetWindowTextA'))(
      hWnd,
      lpString,
      nMaxCount,
    );
  }

  _dart_GetWindowTextA? _GetWindowTextA;

  int GetWindowTextW(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<ffi.Uint16> lpString,
    int nMaxCount,
  ) {
    return (_GetWindowTextW ??=
        _dylib.lookupFunction<_c_GetWindowTextW, _dart_GetWindowTextW>(
            'GetWindowTextW'))(
      hWnd,
      lpString,
      nMaxCount,
    );
  }

  _dart_GetWindowTextW? _GetWindowTextW;

  int GetWindowTextLengthA(
    ffi.Pointer<HWND__> hWnd,
  ) {
    return (_GetWindowTextLengthA ??= _dylib.lookupFunction<
        _c_GetWindowTextLengthA,
        _dart_GetWindowTextLengthA>('GetWindowTextLengthA'))(
      hWnd,
    );
  }

  _dart_GetWindowTextLengthA? _GetWindowTextLengthA;

  int GetWindowTextLengthW(
    ffi.Pointer<HWND__> hWnd,
  ) {
    return (_GetWindowTextLengthW ??= _dylib.lookupFunction<
        _c_GetWindowTextLengthW,
        _dart_GetWindowTextLengthW>('GetWindowTextLengthW'))(
      hWnd,
    );
  }

  _dart_GetWindowTextLengthW? _GetWindowTextLengthW;

  int GetClientRect(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<LPRECT> lpRect,
  ) {
    return (_GetClientRect ??=
        _dylib.lookupFunction<_c_GetClientRect, _dart_GetClientRect>(
            'GetClientRect'))(
      hWnd,
      lpRect,
    );
  }

  _dart_GetClientRect? _GetClientRect;

  int GetWindowRect(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<LPRECT> lpRect,
  ) {
    return (_GetWindowRect ??=
        _dylib.lookupFunction<_c_GetWindowRect, _dart_GetWindowRect>(
            'GetWindowRect'))(
      hWnd,
      lpRect,
    );
  }

  _dart_GetWindowRect? _GetWindowRect;

  int AdjustWindowRect(
    ffi.Pointer<LPRECT> lpRect,
    int dwStyle,
    int bMenu,
  ) {
    return (_AdjustWindowRect ??=
        _dylib.lookupFunction<_c_AdjustWindowRect, _dart_AdjustWindowRect>(
            'AdjustWindowRect'))(
      lpRect,
      dwStyle,
      bMenu,
    );
  }

  _dart_AdjustWindowRect? _AdjustWindowRect;

  int AdjustWindowRectEx(
    ffi.Pointer<LPRECT> lpRect,
    int dwStyle,
    int bMenu,
    int dwExStyle,
  ) {
    return (_AdjustWindowRectEx ??=
        _dylib.lookupFunction<_c_AdjustWindowRectEx, _dart_AdjustWindowRectEx>(
            'AdjustWindowRectEx'))(
      lpRect,
      dwStyle,
      bMenu,
      dwExStyle,
    );
  }

  _dart_AdjustWindowRectEx? _AdjustWindowRectEx;

  int AdjustWindowRectExForDpi(
    ffi.Pointer<LPRECT> lpRect,
    int dwStyle,
    int bMenu,
    int dwExStyle,
    int dpi,
  ) {
    return (_AdjustWindowRectExForDpi ??= _dylib.lookupFunction<
        _c_AdjustWindowRectExForDpi,
        _dart_AdjustWindowRectExForDpi>('AdjustWindowRectExForDpi'))(
      lpRect,
      dwStyle,
      bMenu,
      dwExStyle,
      dpi,
    );
  }

  _dart_AdjustWindowRectExForDpi? _AdjustWindowRectExForDpi;

  int SetWindowContextHelpId(
    ffi.Pointer<HWND__> arg0,
    int arg1,
  ) {
    return (_SetWindowContextHelpId ??= _dylib.lookupFunction<
        _c_SetWindowContextHelpId,
        _dart_SetWindowContextHelpId>('SetWindowContextHelpId'))(
      arg0,
      arg1,
    );
  }

  _dart_SetWindowContextHelpId? _SetWindowContextHelpId;

  int GetWindowContextHelpId(
    ffi.Pointer<HWND__> arg0,
  ) {
    return (_GetWindowContextHelpId ??= _dylib.lookupFunction<
        _c_GetWindowContextHelpId,
        _dart_GetWindowContextHelpId>('GetWindowContextHelpId'))(
      arg0,
    );
  }

  _dart_GetWindowContextHelpId? _GetWindowContextHelpId;

  int SetMenuContextHelpId(
    ffi.Pointer<HMENU__> arg0,
    int arg1,
  ) {
    return (_SetMenuContextHelpId ??= _dylib.lookupFunction<
        _c_SetMenuContextHelpId,
        _dart_SetMenuContextHelpId>('SetMenuContextHelpId'))(
      arg0,
      arg1,
    );
  }

  _dart_SetMenuContextHelpId? _SetMenuContextHelpId;

  int GetMenuContextHelpId(
    ffi.Pointer<HMENU__> arg0,
  ) {
    return (_GetMenuContextHelpId ??= _dylib.lookupFunction<
        _c_GetMenuContextHelpId,
        _dart_GetMenuContextHelpId>('GetMenuContextHelpId'))(
      arg0,
    );
  }

  _dart_GetMenuContextHelpId? _GetMenuContextHelpId;

  int MessageBoxA(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<ffi.Int8> lpText,
    ffi.Pointer<ffi.Int8> lpCaption,
    int uType,
  ) {
    return (_MessageBoxA ??= _dylib
        .lookupFunction<_c_MessageBoxA, _dart_MessageBoxA>('MessageBoxA'))(
      hWnd,
      lpText,
      lpCaption,
      uType,
    );
  }

  _dart_MessageBoxA? _MessageBoxA;

  int MessageBoxW(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<ffi.Uint16> lpText,
    ffi.Pointer<ffi.Uint16> lpCaption,
    int uType,
  ) {
    return (_MessageBoxW ??= _dylib
        .lookupFunction<_c_MessageBoxW, _dart_MessageBoxW>('MessageBoxW'))(
      hWnd,
      lpText,
      lpCaption,
      uType,
    );
  }

  _dart_MessageBoxW? _MessageBoxW;

  int MessageBoxExA(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<ffi.Int8> lpText,
    ffi.Pointer<ffi.Int8> lpCaption,
    int uType,
    int wLanguageId,
  ) {
    return (_MessageBoxExA ??=
        _dylib.lookupFunction<_c_MessageBoxExA, _dart_MessageBoxExA>(
            'MessageBoxExA'))(
      hWnd,
      lpText,
      lpCaption,
      uType,
      wLanguageId,
    );
  }

  _dart_MessageBoxExA? _MessageBoxExA;

  int MessageBoxExW(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<ffi.Uint16> lpText,
    ffi.Pointer<ffi.Uint16> lpCaption,
    int uType,
    int wLanguageId,
  ) {
    return (_MessageBoxExW ??=
        _dylib.lookupFunction<_c_MessageBoxExW, _dart_MessageBoxExW>(
            'MessageBoxExW'))(
      hWnd,
      lpText,
      lpCaption,
      uType,
      wLanguageId,
    );
  }

  _dart_MessageBoxExW? _MessageBoxExW;

  int MessageBoxIndirectA(
    ffi.Pointer<LPMSGBOXPARAMSA> lpmbp,
  ) {
    return (_MessageBoxIndirectA ??= _dylib.lookupFunction<
        _c_MessageBoxIndirectA,
        _dart_MessageBoxIndirectA>('MessageBoxIndirectA'))(
      lpmbp,
    );
  }

  _dart_MessageBoxIndirectA? _MessageBoxIndirectA;

  int MessageBoxIndirectW(
    ffi.Pointer<LPMSGBOXPARAMSW> lpmbp,
  ) {
    return (_MessageBoxIndirectW ??= _dylib.lookupFunction<
        _c_MessageBoxIndirectW,
        _dart_MessageBoxIndirectW>('MessageBoxIndirectW'))(
      lpmbp,
    );
  }

  _dart_MessageBoxIndirectW? _MessageBoxIndirectW;

  int MessageBeep(
    int uType,
  ) {
    return (_MessageBeep ??= _dylib
        .lookupFunction<_c_MessageBeep, _dart_MessageBeep>('MessageBeep'))(
      uType,
    );
  }

  _dart_MessageBeep? _MessageBeep;

  int ShowCursor(
    int bShow,
  ) {
    return (_ShowCursor ??=
        _dylib.lookupFunction<_c_ShowCursor, _dart_ShowCursor>('ShowCursor'))(
      bShow,
    );
  }

  _dart_ShowCursor? _ShowCursor;

  int SetCursorPos(
    int X,
    int Y,
  ) {
    return (_SetCursorPos ??= _dylib
        .lookupFunction<_c_SetCursorPos, _dart_SetCursorPos>('SetCursorPos'))(
      X,
      Y,
    );
  }

  _dart_SetCursorPos? _SetCursorPos;

  int SetPhysicalCursorPos(
    int X,
    int Y,
  ) {
    return (_SetPhysicalCursorPos ??= _dylib.lookupFunction<
        _c_SetPhysicalCursorPos,
        _dart_SetPhysicalCursorPos>('SetPhysicalCursorPos'))(
      X,
      Y,
    );
  }

  _dart_SetPhysicalCursorPos? _SetPhysicalCursorPos;

  ffi.Pointer<HICON__> SetCursor(
    ffi.Pointer<HICON__> hCursor,
  ) {
    return (_SetCursor ??=
        _dylib.lookupFunction<_c_SetCursor, _dart_SetCursor>('SetCursor'))(
      hCursor,
    );
  }

  _dart_SetCursor? _SetCursor;

  int GetCursorPos(
    ffi.Pointer<LPPOINT> lpPoint,
  ) {
    return (_GetCursorPos ??= _dylib
        .lookupFunction<_c_GetCursorPos, _dart_GetCursorPos>('GetCursorPos'))(
      lpPoint,
    );
  }

  _dart_GetCursorPos? _GetCursorPos;

  int GetPhysicalCursorPos(
    ffi.Pointer<LPPOINT> lpPoint,
  ) {
    return (_GetPhysicalCursorPos ??= _dylib.lookupFunction<
        _c_GetPhysicalCursorPos,
        _dart_GetPhysicalCursorPos>('GetPhysicalCursorPos'))(
      lpPoint,
    );
  }

  _dart_GetPhysicalCursorPos? _GetPhysicalCursorPos;

  int GetClipCursor(
    ffi.Pointer<LPRECT> lpRect,
  ) {
    return (_GetClipCursor ??=
        _dylib.lookupFunction<_c_GetClipCursor, _dart_GetClipCursor>(
            'GetClipCursor'))(
      lpRect,
    );
  }

  _dart_GetClipCursor? _GetClipCursor;

  ffi.Pointer<HICON__> GetCursor() {
    return (_GetCursor ??=
        _dylib.lookupFunction<_c_GetCursor, _dart_GetCursor>('GetCursor'))();
  }

  _dart_GetCursor? _GetCursor;

  int CreateCaret(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<HBITMAP__> hBitmap,
    int nWidth,
    int nHeight,
  ) {
    return (_CreateCaret ??= _dylib
        .lookupFunction<_c_CreateCaret, _dart_CreateCaret>('CreateCaret'))(
      hWnd,
      hBitmap,
      nWidth,
      nHeight,
    );
  }

  _dart_CreateCaret? _CreateCaret;

  int GetCaretBlinkTime() {
    return (_GetCaretBlinkTime ??=
        _dylib.lookupFunction<_c_GetCaretBlinkTime, _dart_GetCaretBlinkTime>(
            'GetCaretBlinkTime'))();
  }

  _dart_GetCaretBlinkTime? _GetCaretBlinkTime;

  int SetCaretBlinkTime(
    int uMSeconds,
  ) {
    return (_SetCaretBlinkTime ??=
        _dylib.lookupFunction<_c_SetCaretBlinkTime, _dart_SetCaretBlinkTime>(
            'SetCaretBlinkTime'))(
      uMSeconds,
    );
  }

  _dart_SetCaretBlinkTime? _SetCaretBlinkTime;

  int DestroyCaret() {
    return (_DestroyCaret ??= _dylib
        .lookupFunction<_c_DestroyCaret, _dart_DestroyCaret>('DestroyCaret'))();
  }

  _dart_DestroyCaret? _DestroyCaret;

  int HideCaret(
    ffi.Pointer<HWND__> hWnd,
  ) {
    return (_HideCaret ??=
        _dylib.lookupFunction<_c_HideCaret, _dart_HideCaret>('HideCaret'))(
      hWnd,
    );
  }

  _dart_HideCaret? _HideCaret;

  int ShowCaret(
    ffi.Pointer<HWND__> hWnd,
  ) {
    return (_ShowCaret ??=
        _dylib.lookupFunction<_c_ShowCaret, _dart_ShowCaret>('ShowCaret'))(
      hWnd,
    );
  }

  _dart_ShowCaret? _ShowCaret;

  int SetCaretPos(
    int X,
    int Y,
  ) {
    return (_SetCaretPos ??= _dylib
        .lookupFunction<_c_SetCaretPos, _dart_SetCaretPos>('SetCaretPos'))(
      X,
      Y,
    );
  }

  _dart_SetCaretPos? _SetCaretPos;

  int GetCaretPos(
    ffi.Pointer<LPPOINT> lpPoint,
  ) {
    return (_GetCaretPos ??= _dylib
        .lookupFunction<_c_GetCaretPos, _dart_GetCaretPos>('GetCaretPos'))(
      lpPoint,
    );
  }

  _dart_GetCaretPos? _GetCaretPos;

  int ClientToScreen(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<LPPOINT> lpPoint,
  ) {
    return (_ClientToScreen ??=
        _dylib.lookupFunction<_c_ClientToScreen, _dart_ClientToScreen>(
            'ClientToScreen'))(
      hWnd,
      lpPoint,
    );
  }

  _dart_ClientToScreen? _ClientToScreen;

  int ScreenToClient(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<LPPOINT> lpPoint,
  ) {
    return (_ScreenToClient ??=
        _dylib.lookupFunction<_c_ScreenToClient, _dart_ScreenToClient>(
            'ScreenToClient'))(
      hWnd,
      lpPoint,
    );
  }

  _dart_ScreenToClient? _ScreenToClient;

  int LogicalToPhysicalPoint(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<LPPOINT> lpPoint,
  ) {
    return (_LogicalToPhysicalPoint ??= _dylib.lookupFunction<
        _c_LogicalToPhysicalPoint,
        _dart_LogicalToPhysicalPoint>('LogicalToPhysicalPoint'))(
      hWnd,
      lpPoint,
    );
  }

  _dart_LogicalToPhysicalPoint? _LogicalToPhysicalPoint;

  int PhysicalToLogicalPoint(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<LPPOINT> lpPoint,
  ) {
    return (_PhysicalToLogicalPoint ??= _dylib.lookupFunction<
        _c_PhysicalToLogicalPoint,
        _dart_PhysicalToLogicalPoint>('PhysicalToLogicalPoint'))(
      hWnd,
      lpPoint,
    );
  }

  _dart_PhysicalToLogicalPoint? _PhysicalToLogicalPoint;

  int LogicalToPhysicalPointForPerMonitorDPI(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<LPPOINT> lpPoint,
  ) {
    return (_LogicalToPhysicalPointForPerMonitorDPI ??= _dylib.lookupFunction<
            _c_LogicalToPhysicalPointForPerMonitorDPI,
            _dart_LogicalToPhysicalPointForPerMonitorDPI>(
        'LogicalToPhysicalPointForPerMonitorDPI'))(
      hWnd,
      lpPoint,
    );
  }

  _dart_LogicalToPhysicalPointForPerMonitorDPI?
      _LogicalToPhysicalPointForPerMonitorDPI;

  int PhysicalToLogicalPointForPerMonitorDPI(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<LPPOINT> lpPoint,
  ) {
    return (_PhysicalToLogicalPointForPerMonitorDPI ??= _dylib.lookupFunction<
            _c_PhysicalToLogicalPointForPerMonitorDPI,
            _dart_PhysicalToLogicalPointForPerMonitorDPI>(
        'PhysicalToLogicalPointForPerMonitorDPI'))(
      hWnd,
      lpPoint,
    );
  }

  _dart_PhysicalToLogicalPointForPerMonitorDPI?
      _PhysicalToLogicalPointForPerMonitorDPI;

  int MapWindowPoints(
    ffi.Pointer<HWND__> hWndFrom,
    ffi.Pointer<HWND__> hWndTo,
    ffi.Pointer<LPPOINT> lpPoints,
    int cPoints,
  ) {
    return (_MapWindowPoints ??=
        _dylib.lookupFunction<_c_MapWindowPoints, _dart_MapWindowPoints>(
            'MapWindowPoints'))(
      hWndFrom,
      hWndTo,
      lpPoints,
      cPoints,
    );
  }

  _dart_MapWindowPoints? _MapWindowPoints;

  int ClipCursor(
    ffi.Pointer<LPRECT> lpRect,
  ) {
    return (_ClipCursor ??=
        _dylib.lookupFunction<_c_ClipCursor, _dart_ClipCursor>('ClipCursor'))(
      lpRect,
    );
  }

  _dart_ClipCursor? _ClipCursor;

  int GetSysColor(
    int nIndex,
  ) {
    return (_GetSysColor ??= _dylib
        .lookupFunction<_c_GetSysColor, _dart_GetSysColor>('GetSysColor'))(
      nIndex,
    );
  }

  _dart_GetSysColor? _GetSysColor;

  ffi.Pointer<HBRUSH__> GetSysColorBrush(
    int nIndex,
  ) {
    return (_GetSysColorBrush ??=
        _dylib.lookupFunction<_c_GetSysColorBrush, _dart_GetSysColorBrush>(
            'GetSysColorBrush'))(
      nIndex,
    );
  }

  _dart_GetSysColorBrush? _GetSysColorBrush;

  int SetSysColors(
    int cElements,
    ffi.Pointer<ffi.Int32> lpaElements,
    ffi.Pointer<ffi.Uint64> lpaRgbValues,
  ) {
    return (_SetSysColors ??= _dylib
        .lookupFunction<_c_SetSysColors, _dart_SetSysColors>('SetSysColors'))(
      cElements,
      lpaElements,
      lpaRgbValues,
    );
  }

  _dart_SetSysColors? _SetSysColors;

  int DrawFocusRect(
    ffi.Pointer<HDC__> hDC,
    ffi.Pointer<LPRECT> lprc,
  ) {
    return (_DrawFocusRect ??=
        _dylib.lookupFunction<_c_DrawFocusRect, _dart_DrawFocusRect>(
            'DrawFocusRect'))(
      hDC,
      lprc,
    );
  }

  _dart_DrawFocusRect? _DrawFocusRect;

  int FillRect(
    ffi.Pointer<HDC__> hDC,
    ffi.Pointer<LPRECT> lprc,
    ffi.Pointer<HBRUSH__> hbr,
  ) {
    return (_FillRect ??=
        _dylib.lookupFunction<_c_FillRect, _dart_FillRect>('FillRect'))(
      hDC,
      lprc,
      hbr,
    );
  }

  _dart_FillRect? _FillRect;

  int FrameRect(
    ffi.Pointer<HDC__> hDC,
    ffi.Pointer<LPRECT> lprc,
    ffi.Pointer<HBRUSH__> hbr,
  ) {
    return (_FrameRect ??=
        _dylib.lookupFunction<_c_FrameRect, _dart_FrameRect>('FrameRect'))(
      hDC,
      lprc,
      hbr,
    );
  }

  _dart_FrameRect? _FrameRect;

  int InvertRect(
    ffi.Pointer<HDC__> hDC,
    ffi.Pointer<LPRECT> lprc,
  ) {
    return (_InvertRect ??=
        _dylib.lookupFunction<_c_InvertRect, _dart_InvertRect>('InvertRect'))(
      hDC,
      lprc,
    );
  }

  _dart_InvertRect? _InvertRect;

  int SetRect(
    ffi.Pointer<LPRECT> lprc,
    int xLeft,
    int yTop,
    int xRight,
    int yBottom,
  ) {
    return (_SetRect ??=
        _dylib.lookupFunction<_c_SetRect, _dart_SetRect>('SetRect'))(
      lprc,
      xLeft,
      yTop,
      xRight,
      yBottom,
    );
  }

  _dart_SetRect? _SetRect;

  int SetRectEmpty(
    ffi.Pointer<LPRECT> lprc,
  ) {
    return (_SetRectEmpty ??= _dylib
        .lookupFunction<_c_SetRectEmpty, _dart_SetRectEmpty>('SetRectEmpty'))(
      lprc,
    );
  }

  _dart_SetRectEmpty? _SetRectEmpty;

  int CopyRect(
    ffi.Pointer<LPRECT> lprcDst,
    ffi.Pointer<LPRECT> lprcSrc,
  ) {
    return (_CopyRect ??=
        _dylib.lookupFunction<_c_CopyRect, _dart_CopyRect>('CopyRect'))(
      lprcDst,
      lprcSrc,
    );
  }

  _dart_CopyRect? _CopyRect;

  int InflateRect(
    ffi.Pointer<LPRECT> lprc,
    int dx,
    int dy,
  ) {
    return (_InflateRect ??= _dylib
        .lookupFunction<_c_InflateRect, _dart_InflateRect>('InflateRect'))(
      lprc,
      dx,
      dy,
    );
  }

  _dart_InflateRect? _InflateRect;

  int IntersectRect(
    ffi.Pointer<LPRECT> lprcDst,
    ffi.Pointer<LPRECT> lprcSrc1,
    ffi.Pointer<LPRECT> lprcSrc2,
  ) {
    return (_IntersectRect ??=
        _dylib.lookupFunction<_c_IntersectRect, _dart_IntersectRect>(
            'IntersectRect'))(
      lprcDst,
      lprcSrc1,
      lprcSrc2,
    );
  }

  _dart_IntersectRect? _IntersectRect;

  int UnionRect(
    ffi.Pointer<LPRECT> lprcDst,
    ffi.Pointer<LPRECT> lprcSrc1,
    ffi.Pointer<LPRECT> lprcSrc2,
  ) {
    return (_UnionRect ??=
        _dylib.lookupFunction<_c_UnionRect, _dart_UnionRect>('UnionRect'))(
      lprcDst,
      lprcSrc1,
      lprcSrc2,
    );
  }

  _dart_UnionRect? _UnionRect;

  int SubtractRect(
    ffi.Pointer<LPRECT> lprcDst,
    ffi.Pointer<LPRECT> lprcSrc1,
    ffi.Pointer<LPRECT> lprcSrc2,
  ) {
    return (_SubtractRect ??= _dylib
        .lookupFunction<_c_SubtractRect, _dart_SubtractRect>('SubtractRect'))(
      lprcDst,
      lprcSrc1,
      lprcSrc2,
    );
  }

  _dart_SubtractRect? _SubtractRect;

  int OffsetRect(
    ffi.Pointer<LPRECT> lprc,
    int dx,
    int dy,
  ) {
    return (_OffsetRect ??=
        _dylib.lookupFunction<_c_OffsetRect, _dart_OffsetRect>('OffsetRect'))(
      lprc,
      dx,
      dy,
    );
  }

  _dart_OffsetRect? _OffsetRect;

  int IsRectEmpty(
    ffi.Pointer<LPRECT> lprc,
  ) {
    return (_IsRectEmpty ??= _dylib
        .lookupFunction<_c_IsRectEmpty, _dart_IsRectEmpty>('IsRectEmpty'))(
      lprc,
    );
  }

  _dart_IsRectEmpty? _IsRectEmpty;

  int EqualRect(
    ffi.Pointer<LPRECT> lprc1,
    ffi.Pointer<LPRECT> lprc2,
  ) {
    return (_EqualRect ??=
        _dylib.lookupFunction<_c_EqualRect, _dart_EqualRect>('EqualRect'))(
      lprc1,
      lprc2,
    );
  }

  _dart_EqualRect? _EqualRect;

  int GetWindowWord(
    ffi.Pointer<HWND__> hWnd,
    int nIndex,
  ) {
    return (_GetWindowWord ??=
        _dylib.lookupFunction<_c_GetWindowWord, _dart_GetWindowWord>(
            'GetWindowWord'))(
      hWnd,
      nIndex,
    );
  }

  _dart_GetWindowWord? _GetWindowWord;

  int SetWindowWord(
    ffi.Pointer<HWND__> hWnd,
    int nIndex,
    int wNewWord,
  ) {
    return (_SetWindowWord ??=
        _dylib.lookupFunction<_c_SetWindowWord, _dart_SetWindowWord>(
            'SetWindowWord'))(
      hWnd,
      nIndex,
      wNewWord,
    );
  }

  _dart_SetWindowWord? _SetWindowWord;

  int GetWindowLongA(
    ffi.Pointer<HWND__> hWnd,
    int nIndex,
  ) {
    return (_GetWindowLongA ??=
        _dylib.lookupFunction<_c_GetWindowLongA, _dart_GetWindowLongA>(
            'GetWindowLongA'))(
      hWnd,
      nIndex,
    );
  }

  _dart_GetWindowLongA? _GetWindowLongA;

  int GetWindowLongW(
    ffi.Pointer<HWND__> hWnd,
    int nIndex,
  ) {
    return (_GetWindowLongW ??=
        _dylib.lookupFunction<_c_GetWindowLongW, _dart_GetWindowLongW>(
            'GetWindowLongW'))(
      hWnd,
      nIndex,
    );
  }

  _dart_GetWindowLongW? _GetWindowLongW;

  int SetWindowLongA(
    ffi.Pointer<HWND__> hWnd,
    int nIndex,
    int dwNewLong,
  ) {
    return (_SetWindowLongA ??=
        _dylib.lookupFunction<_c_SetWindowLongA, _dart_SetWindowLongA>(
            'SetWindowLongA'))(
      hWnd,
      nIndex,
      dwNewLong,
    );
  }

  _dart_SetWindowLongA? _SetWindowLongA;

  int SetWindowLongW(
    ffi.Pointer<HWND__> hWnd,
    int nIndex,
    int dwNewLong,
  ) {
    return (_SetWindowLongW ??=
        _dylib.lookupFunction<_c_SetWindowLongW, _dart_SetWindowLongW>(
            'SetWindowLongW'))(
      hWnd,
      nIndex,
      dwNewLong,
    );
  }

  _dart_SetWindowLongW? _SetWindowLongW;

  int GetWindowLongPtrA(
    ffi.Pointer<HWND__> hWnd,
    int nIndex,
  ) {
    return (_GetWindowLongPtrA ??=
        _dylib.lookupFunction<_c_GetWindowLongPtrA, _dart_GetWindowLongPtrA>(
            'GetWindowLongPtrA'))(
      hWnd,
      nIndex,
    );
  }

  _dart_GetWindowLongPtrA? _GetWindowLongPtrA;

  int GetWindowLongPtrW(
    ffi.Pointer<HWND__> hWnd,
    int nIndex,
  ) {
    return (_GetWindowLongPtrW ??=
        _dylib.lookupFunction<_c_GetWindowLongPtrW, _dart_GetWindowLongPtrW>(
            'GetWindowLongPtrW'))(
      hWnd,
      nIndex,
    );
  }

  _dart_GetWindowLongPtrW? _GetWindowLongPtrW;

  int SetWindowLongPtrA(
    ffi.Pointer<HWND__> hWnd,
    int nIndex,
    int dwNewLong,
  ) {
    return (_SetWindowLongPtrA ??=
        _dylib.lookupFunction<_c_SetWindowLongPtrA, _dart_SetWindowLongPtrA>(
            'SetWindowLongPtrA'))(
      hWnd,
      nIndex,
      dwNewLong,
    );
  }

  _dart_SetWindowLongPtrA? _SetWindowLongPtrA;

  int SetWindowLongPtrW(
    ffi.Pointer<HWND__> hWnd,
    int nIndex,
    int dwNewLong,
  ) {
    return (_SetWindowLongPtrW ??=
        _dylib.lookupFunction<_c_SetWindowLongPtrW, _dart_SetWindowLongPtrW>(
            'SetWindowLongPtrW'))(
      hWnd,
      nIndex,
      dwNewLong,
    );
  }

  _dart_SetWindowLongPtrW? _SetWindowLongPtrW;

  int GetClassWord(
    ffi.Pointer<HWND__> hWnd,
    int nIndex,
  ) {
    return (_GetClassWord ??= _dylib
        .lookupFunction<_c_GetClassWord, _dart_GetClassWord>('GetClassWord'))(
      hWnd,
      nIndex,
    );
  }

  _dart_GetClassWord? _GetClassWord;

  int SetClassWord(
    ffi.Pointer<HWND__> hWnd,
    int nIndex,
    int wNewWord,
  ) {
    return (_SetClassWord ??= _dylib
        .lookupFunction<_c_SetClassWord, _dart_SetClassWord>('SetClassWord'))(
      hWnd,
      nIndex,
      wNewWord,
    );
  }

  _dart_SetClassWord? _SetClassWord;

  int GetClassLongA(
    ffi.Pointer<HWND__> hWnd,
    int nIndex,
  ) {
    return (_GetClassLongA ??=
        _dylib.lookupFunction<_c_GetClassLongA, _dart_GetClassLongA>(
            'GetClassLongA'))(
      hWnd,
      nIndex,
    );
  }

  _dart_GetClassLongA? _GetClassLongA;

  int GetClassLongW(
    ffi.Pointer<HWND__> hWnd,
    int nIndex,
  ) {
    return (_GetClassLongW ??=
        _dylib.lookupFunction<_c_GetClassLongW, _dart_GetClassLongW>(
            'GetClassLongW'))(
      hWnd,
      nIndex,
    );
  }

  _dart_GetClassLongW? _GetClassLongW;

  int SetClassLongA(
    ffi.Pointer<HWND__> hWnd,
    int nIndex,
    int dwNewLong,
  ) {
    return (_SetClassLongA ??=
        _dylib.lookupFunction<_c_SetClassLongA, _dart_SetClassLongA>(
            'SetClassLongA'))(
      hWnd,
      nIndex,
      dwNewLong,
    );
  }

  _dart_SetClassLongA? _SetClassLongA;

  int SetClassLongW(
    ffi.Pointer<HWND__> hWnd,
    int nIndex,
    int dwNewLong,
  ) {
    return (_SetClassLongW ??=
        _dylib.lookupFunction<_c_SetClassLongW, _dart_SetClassLongW>(
            'SetClassLongW'))(
      hWnd,
      nIndex,
      dwNewLong,
    );
  }

  _dart_SetClassLongW? _SetClassLongW;

  int GetClassLongPtrA(
    ffi.Pointer<HWND__> hWnd,
    int nIndex,
  ) {
    return (_GetClassLongPtrA ??=
        _dylib.lookupFunction<_c_GetClassLongPtrA, _dart_GetClassLongPtrA>(
            'GetClassLongPtrA'))(
      hWnd,
      nIndex,
    );
  }

  _dart_GetClassLongPtrA? _GetClassLongPtrA;

  int GetClassLongPtrW(
    ffi.Pointer<HWND__> hWnd,
    int nIndex,
  ) {
    return (_GetClassLongPtrW ??=
        _dylib.lookupFunction<_c_GetClassLongPtrW, _dart_GetClassLongPtrW>(
            'GetClassLongPtrW'))(
      hWnd,
      nIndex,
    );
  }

  _dart_GetClassLongPtrW? _GetClassLongPtrW;

  int SetClassLongPtrA(
    ffi.Pointer<HWND__> hWnd,
    int nIndex,
    int dwNewLong,
  ) {
    return (_SetClassLongPtrA ??=
        _dylib.lookupFunction<_c_SetClassLongPtrA, _dart_SetClassLongPtrA>(
            'SetClassLongPtrA'))(
      hWnd,
      nIndex,
      dwNewLong,
    );
  }

  _dart_SetClassLongPtrA? _SetClassLongPtrA;

  int SetClassLongPtrW(
    ffi.Pointer<HWND__> hWnd,
    int nIndex,
    int dwNewLong,
  ) {
    return (_SetClassLongPtrW ??=
        _dylib.lookupFunction<_c_SetClassLongPtrW, _dart_SetClassLongPtrW>(
            'SetClassLongPtrW'))(
      hWnd,
      nIndex,
      dwNewLong,
    );
  }

  _dart_SetClassLongPtrW? _SetClassLongPtrW;

  int GetProcessDefaultLayout(
    ffi.Pointer<ffi.Uint64> pdwDefaultLayout,
  ) {
    return (_GetProcessDefaultLayout ??= _dylib.lookupFunction<
        _c_GetProcessDefaultLayout,
        _dart_GetProcessDefaultLayout>('GetProcessDefaultLayout'))(
      pdwDefaultLayout,
    );
  }

  _dart_GetProcessDefaultLayout? _GetProcessDefaultLayout;

  int SetProcessDefaultLayout(
    int dwDefaultLayout,
  ) {
    return (_SetProcessDefaultLayout ??= _dylib.lookupFunction<
        _c_SetProcessDefaultLayout,
        _dart_SetProcessDefaultLayout>('SetProcessDefaultLayout'))(
      dwDefaultLayout,
    );
  }

  _dart_SetProcessDefaultLayout? _SetProcessDefaultLayout;

  ffi.Pointer<HWND__> GetDesktopWindow() {
    return (_GetDesktopWindow ??=
        _dylib.lookupFunction<_c_GetDesktopWindow, _dart_GetDesktopWindow>(
            'GetDesktopWindow'))();
  }

  _dart_GetDesktopWindow? _GetDesktopWindow;

  ffi.Pointer<HWND__> GetParent(
    ffi.Pointer<HWND__> hWnd,
  ) {
    return (_GetParent ??=
        _dylib.lookupFunction<_c_GetParent, _dart_GetParent>('GetParent'))(
      hWnd,
    );
  }

  _dart_GetParent? _GetParent;

  ffi.Pointer<HWND__> SetParent(
    ffi.Pointer<HWND__> hWndChild,
    ffi.Pointer<HWND__> hWndNewParent,
  ) {
    return (_SetParent ??=
        _dylib.lookupFunction<_c_SetParent, _dart_SetParent>('SetParent'))(
      hWndChild,
      hWndNewParent,
    );
  }

  _dart_SetParent? _SetParent;

  int EnumChildWindows(
    ffi.Pointer<HWND__> hWndParent,
    ffi.Pointer<ffi.NativeFunction<WNDENUMPROC>> lpEnumFunc,
    int lParam,
  ) {
    return (_EnumChildWindows ??=
        _dylib.lookupFunction<_c_EnumChildWindows, _dart_EnumChildWindows>(
            'EnumChildWindows'))(
      hWndParent,
      lpEnumFunc,
      lParam,
    );
  }

  _dart_EnumChildWindows? _EnumChildWindows;

  ffi.Pointer<HWND__> FindWindowA(
    ffi.Pointer<ffi.Int8> lpClassName,
    ffi.Pointer<ffi.Int8> lpWindowName,
  ) {
    return (_FindWindowA ??= _dylib
        .lookupFunction<_c_FindWindowA, _dart_FindWindowA>('FindWindowA'))(
      lpClassName,
      lpWindowName,
    );
  }

  _dart_FindWindowA? _FindWindowA;

  ffi.Pointer<HWND__> FindWindowW(
    ffi.Pointer<ffi.Uint16> lpClassName,
    ffi.Pointer<ffi.Uint16> lpWindowName,
  ) {
    return (_FindWindowW ??= _dylib
        .lookupFunction<_c_FindWindowW, _dart_FindWindowW>('FindWindowW'))(
      lpClassName,
      lpWindowName,
    );
  }

  _dart_FindWindowW? _FindWindowW;

  ffi.Pointer<HWND__> FindWindowExA(
    ffi.Pointer<HWND__> hWndParent,
    ffi.Pointer<HWND__> hWndChildAfter,
    ffi.Pointer<ffi.Int8> lpszClass,
    ffi.Pointer<ffi.Int8> lpszWindow,
  ) {
    return (_FindWindowExA ??=
        _dylib.lookupFunction<_c_FindWindowExA, _dart_FindWindowExA>(
            'FindWindowExA'))(
      hWndParent,
      hWndChildAfter,
      lpszClass,
      lpszWindow,
    );
  }

  _dart_FindWindowExA? _FindWindowExA;

  ffi.Pointer<HWND__> FindWindowExW(
    ffi.Pointer<HWND__> hWndParent,
    ffi.Pointer<HWND__> hWndChildAfter,
    ffi.Pointer<ffi.Uint16> lpszClass,
    ffi.Pointer<ffi.Uint16> lpszWindow,
  ) {
    return (_FindWindowExW ??=
        _dylib.lookupFunction<_c_FindWindowExW, _dart_FindWindowExW>(
            'FindWindowExW'))(
      hWndParent,
      hWndChildAfter,
      lpszClass,
      lpszWindow,
    );
  }

  _dart_FindWindowExW? _FindWindowExW;

  ffi.Pointer<HWND__> GetShellWindow() {
    return (_GetShellWindow ??=
        _dylib.lookupFunction<_c_GetShellWindow, _dart_GetShellWindow>(
            'GetShellWindow'))();
  }

  _dart_GetShellWindow? _GetShellWindow;

  int RegisterShellHookWindow(
    ffi.Pointer<HWND__> hwnd,
  ) {
    return (_RegisterShellHookWindow ??= _dylib.lookupFunction<
        _c_RegisterShellHookWindow,
        _dart_RegisterShellHookWindow>('RegisterShellHookWindow'))(
      hwnd,
    );
  }

  _dart_RegisterShellHookWindow? _RegisterShellHookWindow;

  int DeregisterShellHookWindow(
    ffi.Pointer<HWND__> hwnd,
  ) {
    return (_DeregisterShellHookWindow ??= _dylib.lookupFunction<
        _c_DeregisterShellHookWindow,
        _dart_DeregisterShellHookWindow>('DeregisterShellHookWindow'))(
      hwnd,
    );
  }

  _dart_DeregisterShellHookWindow? _DeregisterShellHookWindow;

  int EnumWindows(
    ffi.Pointer<ffi.NativeFunction<WNDENUMPROC>> lpEnumFunc,
    int lParam,
  ) {
    return (_EnumWindows ??= _dylib
        .lookupFunction<_c_EnumWindows, _dart_EnumWindows>('EnumWindows'))(
      lpEnumFunc,
      lParam,
    );
  }

  _dart_EnumWindows? _EnumWindows;

  int EnumThreadWindows(
    int dwThreadId,
    ffi.Pointer<ffi.NativeFunction<WNDENUMPROC>> lpfn,
    int lParam,
  ) {
    return (_EnumThreadWindows ??=
        _dylib.lookupFunction<_c_EnumThreadWindows, _dart_EnumThreadWindows>(
            'EnumThreadWindows'))(
      dwThreadId,
      lpfn,
      lParam,
    );
  }

  _dart_EnumThreadWindows? _EnumThreadWindows;

  int GetClassNameA(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<ffi.Int8> lpClassName,
    int nMaxCount,
  ) {
    return (_GetClassNameA ??=
        _dylib.lookupFunction<_c_GetClassNameA, _dart_GetClassNameA>(
            'GetClassNameA'))(
      hWnd,
      lpClassName,
      nMaxCount,
    );
  }

  _dart_GetClassNameA? _GetClassNameA;

  int GetClassNameW(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<ffi.Uint16> lpClassName,
    int nMaxCount,
  ) {
    return (_GetClassNameW ??=
        _dylib.lookupFunction<_c_GetClassNameW, _dart_GetClassNameW>(
            'GetClassNameW'))(
      hWnd,
      lpClassName,
      nMaxCount,
    );
  }

  _dart_GetClassNameW? _GetClassNameW;

  ffi.Pointer<HWND__> GetTopWindow(
    ffi.Pointer<HWND__> hWnd,
  ) {
    return (_GetTopWindow ??= _dylib
        .lookupFunction<_c_GetTopWindow, _dart_GetTopWindow>('GetTopWindow'))(
      hWnd,
    );
  }

  _dart_GetTopWindow? _GetTopWindow;

  int GetWindowThreadProcessId(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<ffi.Uint64> lpdwProcessId,
  ) {
    return (_GetWindowThreadProcessId ??= _dylib.lookupFunction<
        _c_GetWindowThreadProcessId,
        _dart_GetWindowThreadProcessId>('GetWindowThreadProcessId'))(
      hWnd,
      lpdwProcessId,
    );
  }

  _dart_GetWindowThreadProcessId? _GetWindowThreadProcessId;

  int IsGUIThread(
    int bConvert,
  ) {
    return (_IsGUIThread ??= _dylib
        .lookupFunction<_c_IsGUIThread, _dart_IsGUIThread>('IsGUIThread'))(
      bConvert,
    );
  }

  _dart_IsGUIThread? _IsGUIThread;

  ffi.Pointer<HWND__> GetLastActivePopup(
    ffi.Pointer<HWND__> hWnd,
  ) {
    return (_GetLastActivePopup ??=
        _dylib.lookupFunction<_c_GetLastActivePopup, _dart_GetLastActivePopup>(
            'GetLastActivePopup'))(
      hWnd,
    );
  }

  _dart_GetLastActivePopup? _GetLastActivePopup;

  ffi.Pointer<HWND__> GetWindow(
    ffi.Pointer<HWND__> hWnd,
    int uCmd,
  ) {
    return (_GetWindow ??=
        _dylib.lookupFunction<_c_GetWindow, _dart_GetWindow>('GetWindow'))(
      hWnd,
      uCmd,
    );
  }

  _dart_GetWindow? _GetWindow;

  ffi.Pointer<HHOOK__> SetWindowsHookA(
    int nFilterType,
    ffi.Pointer<ffi.NativeFunction<HOOKPROC>> pfnFilterProc,
  ) {
    return (_SetWindowsHookA ??=
        _dylib.lookupFunction<_c_SetWindowsHookA, _dart_SetWindowsHookA>(
            'SetWindowsHookA'))(
      nFilterType,
      pfnFilterProc,
    );
  }

  _dart_SetWindowsHookA? _SetWindowsHookA;

  ffi.Pointer<HHOOK__> SetWindowsHookW(
    int nFilterType,
    ffi.Pointer<ffi.NativeFunction<HOOKPROC>> pfnFilterProc,
  ) {
    return (_SetWindowsHookW ??=
        _dylib.lookupFunction<_c_SetWindowsHookW, _dart_SetWindowsHookW>(
            'SetWindowsHookW'))(
      nFilterType,
      pfnFilterProc,
    );
  }

  _dart_SetWindowsHookW? _SetWindowsHookW;

  int UnhookWindowsHook(
    int nCode,
    ffi.Pointer<ffi.NativeFunction<HOOKPROC>> pfnFilterProc,
  ) {
    return (_UnhookWindowsHook ??=
        _dylib.lookupFunction<_c_UnhookWindowsHook, _dart_UnhookWindowsHook>(
            'UnhookWindowsHook'))(
      nCode,
      pfnFilterProc,
    );
  }

  _dart_UnhookWindowsHook? _UnhookWindowsHook;

  ffi.Pointer<HHOOK__> SetWindowsHookExA(
    int idHook,
    ffi.Pointer<ffi.NativeFunction<HOOKPROC>> lpfn,
    ffi.Pointer<HINSTANCE__> hmod,
    int dwThreadId,
  ) {
    return (_SetWindowsHookExA ??=
        _dylib.lookupFunction<_c_SetWindowsHookExA, _dart_SetWindowsHookExA>(
            'SetWindowsHookExA'))(
      idHook,
      lpfn,
      hmod,
      dwThreadId,
    );
  }

  _dart_SetWindowsHookExA? _SetWindowsHookExA;

  ffi.Pointer<HHOOK__> SetWindowsHookExW(
    int idHook,
    ffi.Pointer<ffi.NativeFunction<HOOKPROC>> lpfn,
    ffi.Pointer<HINSTANCE__> hmod,
    int dwThreadId,
  ) {
    return (_SetWindowsHookExW ??=
        _dylib.lookupFunction<_c_SetWindowsHookExW, _dart_SetWindowsHookExW>(
            'SetWindowsHookExW'))(
      idHook,
      lpfn,
      hmod,
      dwThreadId,
    );
  }

  _dart_SetWindowsHookExW? _SetWindowsHookExW;

  int UnhookWindowsHookEx(
    ffi.Pointer<HHOOK__> hhk,
  ) {
    return (_UnhookWindowsHookEx ??= _dylib.lookupFunction<
        _c_UnhookWindowsHookEx,
        _dart_UnhookWindowsHookEx>('UnhookWindowsHookEx'))(
      hhk,
    );
  }

  _dart_UnhookWindowsHookEx? _UnhookWindowsHookEx;

  int CallNextHookEx(
    ffi.Pointer<HHOOK__> hhk,
    int nCode,
    int wParam,
    int lParam,
  ) {
    return (_CallNextHookEx ??=
        _dylib.lookupFunction<_c_CallNextHookEx, _dart_CallNextHookEx>(
            'CallNextHookEx'))(
      hhk,
      nCode,
      wParam,
      lParam,
    );
  }

  _dart_CallNextHookEx? _CallNextHookEx;

  int CheckMenuRadioItem(
    ffi.Pointer<HMENU__> hmenu,
    int first,
    int last,
    int check,
    int flags,
  ) {
    return (_CheckMenuRadioItem ??=
        _dylib.lookupFunction<_c_CheckMenuRadioItem, _dart_CheckMenuRadioItem>(
            'CheckMenuRadioItem'))(
      hmenu,
      first,
      last,
      check,
      flags,
    );
  }

  _dart_CheckMenuRadioItem? _CheckMenuRadioItem;

  ffi.Pointer<HBITMAP__> LoadBitmapA(
    ffi.Pointer<HINSTANCE__> hInstance,
    ffi.Pointer<ffi.Int8> lpBitmapName,
  ) {
    return (_LoadBitmapA ??= _dylib
        .lookupFunction<_c_LoadBitmapA, _dart_LoadBitmapA>('LoadBitmapA'))(
      hInstance,
      lpBitmapName,
    );
  }

  _dart_LoadBitmapA? _LoadBitmapA;

  ffi.Pointer<HBITMAP__> LoadBitmapW(
    ffi.Pointer<HINSTANCE__> hInstance,
    ffi.Pointer<ffi.Uint16> lpBitmapName,
  ) {
    return (_LoadBitmapW ??= _dylib
        .lookupFunction<_c_LoadBitmapW, _dart_LoadBitmapW>('LoadBitmapW'))(
      hInstance,
      lpBitmapName,
    );
  }

  _dart_LoadBitmapW? _LoadBitmapW;

  ffi.Pointer<HICON__> LoadCursorA(
    ffi.Pointer<HINSTANCE__> hInstance,
    ffi.Pointer<ffi.Int8> lpCursorName,
  ) {
    return (_LoadCursorA ??= _dylib
        .lookupFunction<_c_LoadCursorA, _dart_LoadCursorA>('LoadCursorA'))(
      hInstance,
      lpCursorName,
    );
  }

  _dart_LoadCursorA? _LoadCursorA;

  ffi.Pointer<HICON__> LoadCursorW(
    ffi.Pointer<HINSTANCE__> hInstance,
    ffi.Pointer<ffi.Uint16> lpCursorName,
  ) {
    return (_LoadCursorW ??= _dylib
        .lookupFunction<_c_LoadCursorW, _dart_LoadCursorW>('LoadCursorW'))(
      hInstance,
      lpCursorName,
    );
  }

  _dart_LoadCursorW? _LoadCursorW;

  ffi.Pointer<HICON__> LoadCursorFromFileA(
    ffi.Pointer<ffi.Int8> lpFileName,
  ) {
    return (_LoadCursorFromFileA ??= _dylib.lookupFunction<
        _c_LoadCursorFromFileA,
        _dart_LoadCursorFromFileA>('LoadCursorFromFileA'))(
      lpFileName,
    );
  }

  _dart_LoadCursorFromFileA? _LoadCursorFromFileA;

  ffi.Pointer<HICON__> LoadCursorFromFileW(
    ffi.Pointer<ffi.Uint16> lpFileName,
  ) {
    return (_LoadCursorFromFileW ??= _dylib.lookupFunction<
        _c_LoadCursorFromFileW,
        _dart_LoadCursorFromFileW>('LoadCursorFromFileW'))(
      lpFileName,
    );
  }

  _dart_LoadCursorFromFileW? _LoadCursorFromFileW;

  ffi.Pointer<HICON__> CreateCursor(
    ffi.Pointer<HINSTANCE__> hInst,
    int xHotSpot,
    int yHotSpot,
    int nWidth,
    int nHeight,
    ffi.Pointer<ffi.Void> pvANDPlane,
    ffi.Pointer<ffi.Void> pvXORPlane,
  ) {
    return (_CreateCursor ??= _dylib
        .lookupFunction<_c_CreateCursor, _dart_CreateCursor>('CreateCursor'))(
      hInst,
      xHotSpot,
      yHotSpot,
      nWidth,
      nHeight,
      pvANDPlane,
      pvXORPlane,
    );
  }

  _dart_CreateCursor? _CreateCursor;

  int DestroyCursor(
    ffi.Pointer<HICON__> hCursor,
  ) {
    return (_DestroyCursor ??=
        _dylib.lookupFunction<_c_DestroyCursor, _dart_DestroyCursor>(
            'DestroyCursor'))(
      hCursor,
    );
  }

  _dart_DestroyCursor? _DestroyCursor;

  int SetSystemCursor(
    ffi.Pointer<HICON__> hcur,
    int id,
  ) {
    return (_SetSystemCursor ??=
        _dylib.lookupFunction<_c_SetSystemCursor, _dart_SetSystemCursor>(
            'SetSystemCursor'))(
      hcur,
      id,
    );
  }

  _dart_SetSystemCursor? _SetSystemCursor;

  ffi.Pointer<HICON__> LoadIconA(
    ffi.Pointer<HINSTANCE__> hInstance,
    ffi.Pointer<ffi.Int8> lpIconName,
  ) {
    return (_LoadIconA ??=
        _dylib.lookupFunction<_c_LoadIconA, _dart_LoadIconA>('LoadIconA'))(
      hInstance,
      lpIconName,
    );
  }

  _dart_LoadIconA? _LoadIconA;

  ffi.Pointer<HICON__> LoadIconW(
    ffi.Pointer<HINSTANCE__> hInstance,
    ffi.Pointer<ffi.Uint16> lpIconName,
  ) {
    return (_LoadIconW ??=
        _dylib.lookupFunction<_c_LoadIconW, _dart_LoadIconW>('LoadIconW'))(
      hInstance,
      lpIconName,
    );
  }

  _dart_LoadIconW? _LoadIconW;

  int PrivateExtractIconsA(
    ffi.Pointer<ffi.Int8> szFileName,
    int nIconIndex,
    int cxIcon,
    int cyIcon,
    ffi.Pointer<ffi.Pointer<HICON__>> phicon,
    ffi.Pointer<ffi.Uint32> piconid,
    int nIcons,
    int flags,
  ) {
    return (_PrivateExtractIconsA ??= _dylib.lookupFunction<
        _c_PrivateExtractIconsA,
        _dart_PrivateExtractIconsA>('PrivateExtractIconsA'))(
      szFileName,
      nIconIndex,
      cxIcon,
      cyIcon,
      phicon,
      piconid,
      nIcons,
      flags,
    );
  }

  _dart_PrivateExtractIconsA? _PrivateExtractIconsA;

  int PrivateExtractIconsW(
    ffi.Pointer<ffi.Uint16> szFileName,
    int nIconIndex,
    int cxIcon,
    int cyIcon,
    ffi.Pointer<ffi.Pointer<HICON__>> phicon,
    ffi.Pointer<ffi.Uint32> piconid,
    int nIcons,
    int flags,
  ) {
    return (_PrivateExtractIconsW ??= _dylib.lookupFunction<
        _c_PrivateExtractIconsW,
        _dart_PrivateExtractIconsW>('PrivateExtractIconsW'))(
      szFileName,
      nIconIndex,
      cxIcon,
      cyIcon,
      phicon,
      piconid,
      nIcons,
      flags,
    );
  }

  _dart_PrivateExtractIconsW? _PrivateExtractIconsW;

  ffi.Pointer<HICON__> CreateIcon(
    ffi.Pointer<HINSTANCE__> hInstance,
    int nWidth,
    int nHeight,
    int cPlanes,
    int cBitsPixel,
    ffi.Pointer<ffi.Uint8> lpbANDbits,
    ffi.Pointer<ffi.Uint8> lpbXORbits,
  ) {
    return (_CreateIcon ??=
        _dylib.lookupFunction<_c_CreateIcon, _dart_CreateIcon>('CreateIcon'))(
      hInstance,
      nWidth,
      nHeight,
      cPlanes,
      cBitsPixel,
      lpbANDbits,
      lpbXORbits,
    );
  }

  _dart_CreateIcon? _CreateIcon;

  int DestroyIcon(
    ffi.Pointer<HICON__> hIcon,
  ) {
    return (_DestroyIcon ??= _dylib
        .lookupFunction<_c_DestroyIcon, _dart_DestroyIcon>('DestroyIcon'))(
      hIcon,
    );
  }

  _dart_DestroyIcon? _DestroyIcon;

  int LookupIconIdFromDirectory(
    ffi.Pointer<ffi.Uint8> presbits,
    int fIcon,
  ) {
    return (_LookupIconIdFromDirectory ??= _dylib.lookupFunction<
        _c_LookupIconIdFromDirectory,
        _dart_LookupIconIdFromDirectory>('LookupIconIdFromDirectory'))(
      presbits,
      fIcon,
    );
  }

  _dart_LookupIconIdFromDirectory? _LookupIconIdFromDirectory;

  int LookupIconIdFromDirectoryEx(
    ffi.Pointer<ffi.Uint8> presbits,
    int fIcon,
    int cxDesired,
    int cyDesired,
    int Flags,
  ) {
    return (_LookupIconIdFromDirectoryEx ??= _dylib.lookupFunction<
        _c_LookupIconIdFromDirectoryEx,
        _dart_LookupIconIdFromDirectoryEx>('LookupIconIdFromDirectoryEx'))(
      presbits,
      fIcon,
      cxDesired,
      cyDesired,
      Flags,
    );
  }

  _dart_LookupIconIdFromDirectoryEx? _LookupIconIdFromDirectoryEx;

  ffi.Pointer<HICON__> CreateIconFromResource(
    ffi.Pointer<ffi.Uint8> presbits,
    int dwResSize,
    int fIcon,
    int dwVer,
  ) {
    return (_CreateIconFromResource ??= _dylib.lookupFunction<
        _c_CreateIconFromResource,
        _dart_CreateIconFromResource>('CreateIconFromResource'))(
      presbits,
      dwResSize,
      fIcon,
      dwVer,
    );
  }

  _dart_CreateIconFromResource? _CreateIconFromResource;

  ffi.Pointer<HICON__> CreateIconFromResourceEx(
    ffi.Pointer<ffi.Uint8> presbits,
    int dwResSize,
    int fIcon,
    int dwVer,
    int cxDesired,
    int cyDesired,
    int Flags,
  ) {
    return (_CreateIconFromResourceEx ??= _dylib.lookupFunction<
        _c_CreateIconFromResourceEx,
        _dart_CreateIconFromResourceEx>('CreateIconFromResourceEx'))(
      presbits,
      dwResSize,
      fIcon,
      dwVer,
      cxDesired,
      cyDesired,
      Flags,
    );
  }

  _dart_CreateIconFromResourceEx? _CreateIconFromResourceEx;

  ffi.Pointer<ffi.Void> LoadImageA(
    ffi.Pointer<HINSTANCE__> hInst,
    ffi.Pointer<ffi.Int8> name,
    int type,
    int cx,
    int cy,
    int fuLoad,
  ) {
    return (_LoadImageA ??=
        _dylib.lookupFunction<_c_LoadImageA, _dart_LoadImageA>('LoadImageA'))(
      hInst,
      name,
      type,
      cx,
      cy,
      fuLoad,
    );
  }

  _dart_LoadImageA? _LoadImageA;

  ffi.Pointer<ffi.Void> LoadImageW(
    ffi.Pointer<HINSTANCE__> hInst,
    ffi.Pointer<ffi.Uint16> name,
    int type,
    int cx,
    int cy,
    int fuLoad,
  ) {
    return (_LoadImageW ??=
        _dylib.lookupFunction<_c_LoadImageW, _dart_LoadImageW>('LoadImageW'))(
      hInst,
      name,
      type,
      cx,
      cy,
      fuLoad,
    );
  }

  _dart_LoadImageW? _LoadImageW;

  ffi.Pointer<ffi.Void> CopyImage(
    ffi.Pointer<ffi.Void> h,
    int type,
    int cx,
    int cy,
    int flags,
  ) {
    return (_CopyImage ??=
        _dylib.lookupFunction<_c_CopyImage, _dart_CopyImage>('CopyImage'))(
      h,
      type,
      cx,
      cy,
      flags,
    );
  }

  _dart_CopyImage? _CopyImage;

  int DrawIconEx(
    ffi.Pointer<HDC__> hdc,
    int xLeft,
    int yTop,
    ffi.Pointer<HICON__> hIcon,
    int cxWidth,
    int cyWidth,
    int istepIfAniCur,
    ffi.Pointer<HBRUSH__> hbrFlickerFreeDraw,
    int diFlags,
  ) {
    return (_DrawIconEx ??=
        _dylib.lookupFunction<_c_DrawIconEx, _dart_DrawIconEx>('DrawIconEx'))(
      hdc,
      xLeft,
      yTop,
      hIcon,
      cxWidth,
      cyWidth,
      istepIfAniCur,
      hbrFlickerFreeDraw,
      diFlags,
    );
  }

  _dart_DrawIconEx? _DrawIconEx;

  ffi.Pointer<HICON__> CreateIconIndirect(
    ffi.Pointer<ICONINFO> piconinfo,
  ) {
    return (_CreateIconIndirect ??=
        _dylib.lookupFunction<_c_CreateIconIndirect, _dart_CreateIconIndirect>(
            'CreateIconIndirect'))(
      piconinfo,
    );
  }

  _dart_CreateIconIndirect? _CreateIconIndirect;

  ffi.Pointer<HICON__> CopyIcon(
    ffi.Pointer<HICON__> hIcon,
  ) {
    return (_CopyIcon ??=
        _dylib.lookupFunction<_c_CopyIcon, _dart_CopyIcon>('CopyIcon'))(
      hIcon,
    );
  }

  _dart_CopyIcon? _CopyIcon;

  int GetIconInfo(
    ffi.Pointer<HICON__> hIcon,
    ffi.Pointer<ICONINFO> piconinfo,
  ) {
    return (_GetIconInfo ??= _dylib
        .lookupFunction<_c_GetIconInfo, _dart_GetIconInfo>('GetIconInfo'))(
      hIcon,
      piconinfo,
    );
  }

  _dart_GetIconInfo? _GetIconInfo;

  int GetIconInfoExA(
    ffi.Pointer<HICON__> hicon,
    ffi.Pointer<PICONINFOEXA> piconinfo,
  ) {
    return (_GetIconInfoExA ??=
        _dylib.lookupFunction<_c_GetIconInfoExA, _dart_GetIconInfoExA>(
            'GetIconInfoExA'))(
      hicon,
      piconinfo,
    );
  }

  _dart_GetIconInfoExA? _GetIconInfoExA;

  int GetIconInfoExW(
    ffi.Pointer<HICON__> hicon,
    ffi.Pointer<PICONINFOEXW> piconinfo,
  ) {
    return (_GetIconInfoExW ??=
        _dylib.lookupFunction<_c_GetIconInfoExW, _dart_GetIconInfoExW>(
            'GetIconInfoExW'))(
      hicon,
      piconinfo,
    );
  }

  _dart_GetIconInfoExW? _GetIconInfoExW;

  int IsDialogMessageA(
    ffi.Pointer<HWND__> hDlg,
    ffi.Pointer<LPMSG> lpMsg,
  ) {
    return (_IsDialogMessageA ??=
        _dylib.lookupFunction<_c_IsDialogMessageA, _dart_IsDialogMessageA>(
            'IsDialogMessageA'))(
      hDlg,
      lpMsg,
    );
  }

  _dart_IsDialogMessageA? _IsDialogMessageA;

  int IsDialogMessageW(
    ffi.Pointer<HWND__> hDlg,
    ffi.Pointer<LPMSG> lpMsg,
  ) {
    return (_IsDialogMessageW ??=
        _dylib.lookupFunction<_c_IsDialogMessageW, _dart_IsDialogMessageW>(
            'IsDialogMessageW'))(
      hDlg,
      lpMsg,
    );
  }

  _dart_IsDialogMessageW? _IsDialogMessageW;

  int MapDialogRect(
    ffi.Pointer<HWND__> hDlg,
    ffi.Pointer<LPRECT> lpRect,
  ) {
    return (_MapDialogRect ??=
        _dylib.lookupFunction<_c_MapDialogRect, _dart_MapDialogRect>(
            'MapDialogRect'))(
      hDlg,
      lpRect,
    );
  }

  _dart_MapDialogRect? _MapDialogRect;

  int DlgDirListA(
    ffi.Pointer<HWND__> hDlg,
    ffi.Pointer<ffi.Int8> lpPathSpec,
    int nIDListBox,
    int nIDStaticPath,
    int uFileType,
  ) {
    return (_DlgDirListA ??= _dylib
        .lookupFunction<_c_DlgDirListA, _dart_DlgDirListA>('DlgDirListA'))(
      hDlg,
      lpPathSpec,
      nIDListBox,
      nIDStaticPath,
      uFileType,
    );
  }

  _dart_DlgDirListA? _DlgDirListA;

  int DlgDirListW(
    ffi.Pointer<HWND__> hDlg,
    ffi.Pointer<ffi.Uint16> lpPathSpec,
    int nIDListBox,
    int nIDStaticPath,
    int uFileType,
  ) {
    return (_DlgDirListW ??= _dylib
        .lookupFunction<_c_DlgDirListW, _dart_DlgDirListW>('DlgDirListW'))(
      hDlg,
      lpPathSpec,
      nIDListBox,
      nIDStaticPath,
      uFileType,
    );
  }

  _dart_DlgDirListW? _DlgDirListW;

  int DlgDirSelectExA(
    ffi.Pointer<HWND__> hwndDlg,
    ffi.Pointer<ffi.Int8> lpString,
    int chCount,
    int idListBox,
  ) {
    return (_DlgDirSelectExA ??=
        _dylib.lookupFunction<_c_DlgDirSelectExA, _dart_DlgDirSelectExA>(
            'DlgDirSelectExA'))(
      hwndDlg,
      lpString,
      chCount,
      idListBox,
    );
  }

  _dart_DlgDirSelectExA? _DlgDirSelectExA;

  int DlgDirSelectExW(
    ffi.Pointer<HWND__> hwndDlg,
    ffi.Pointer<ffi.Uint16> lpString,
    int chCount,
    int idListBox,
  ) {
    return (_DlgDirSelectExW ??=
        _dylib.lookupFunction<_c_DlgDirSelectExW, _dart_DlgDirSelectExW>(
            'DlgDirSelectExW'))(
      hwndDlg,
      lpString,
      chCount,
      idListBox,
    );
  }

  _dart_DlgDirSelectExW? _DlgDirSelectExW;

  int DlgDirListComboBoxA(
    ffi.Pointer<HWND__> hDlg,
    ffi.Pointer<ffi.Int8> lpPathSpec,
    int nIDComboBox,
    int nIDStaticPath,
    int uFiletype,
  ) {
    return (_DlgDirListComboBoxA ??= _dylib.lookupFunction<
        _c_DlgDirListComboBoxA,
        _dart_DlgDirListComboBoxA>('DlgDirListComboBoxA'))(
      hDlg,
      lpPathSpec,
      nIDComboBox,
      nIDStaticPath,
      uFiletype,
    );
  }

  _dart_DlgDirListComboBoxA? _DlgDirListComboBoxA;

  int DlgDirListComboBoxW(
    ffi.Pointer<HWND__> hDlg,
    ffi.Pointer<ffi.Uint16> lpPathSpec,
    int nIDComboBox,
    int nIDStaticPath,
    int uFiletype,
  ) {
    return (_DlgDirListComboBoxW ??= _dylib.lookupFunction<
        _c_DlgDirListComboBoxW,
        _dart_DlgDirListComboBoxW>('DlgDirListComboBoxW'))(
      hDlg,
      lpPathSpec,
      nIDComboBox,
      nIDStaticPath,
      uFiletype,
    );
  }

  _dart_DlgDirListComboBoxW? _DlgDirListComboBoxW;

  int DlgDirSelectComboBoxExA(
    ffi.Pointer<HWND__> hwndDlg,
    ffi.Pointer<ffi.Int8> lpString,
    int cchOut,
    int idComboBox,
  ) {
    return (_DlgDirSelectComboBoxExA ??= _dylib.lookupFunction<
        _c_DlgDirSelectComboBoxExA,
        _dart_DlgDirSelectComboBoxExA>('DlgDirSelectComboBoxExA'))(
      hwndDlg,
      lpString,
      cchOut,
      idComboBox,
    );
  }

  _dart_DlgDirSelectComboBoxExA? _DlgDirSelectComboBoxExA;

  int DlgDirSelectComboBoxExW(
    ffi.Pointer<HWND__> hwndDlg,
    ffi.Pointer<ffi.Uint16> lpString,
    int cchOut,
    int idComboBox,
  ) {
    return (_DlgDirSelectComboBoxExW ??= _dylib.lookupFunction<
        _c_DlgDirSelectComboBoxExW,
        _dart_DlgDirSelectComboBoxExW>('DlgDirSelectComboBoxExW'))(
      hwndDlg,
      lpString,
      cchOut,
      idComboBox,
    );
  }

  _dart_DlgDirSelectComboBoxExW? _DlgDirSelectComboBoxExW;

  int SetScrollInfo(
    ffi.Pointer<HWND__> hwnd,
    int nBar,
    ffi.Pointer<LPSCROLLINFO> lpsi,
    int redraw,
  ) {
    return (_SetScrollInfo ??=
        _dylib.lookupFunction<_c_SetScrollInfo, _dart_SetScrollInfo>(
            'SetScrollInfo'))(
      hwnd,
      nBar,
      lpsi,
      redraw,
    );
  }

  _dart_SetScrollInfo? _SetScrollInfo;

  int GetScrollInfo(
    ffi.Pointer<HWND__> hwnd,
    int nBar,
    ffi.Pointer<LPSCROLLINFO> lpsi,
  ) {
    return (_GetScrollInfo ??=
        _dylib.lookupFunction<_c_GetScrollInfo, _dart_GetScrollInfo>(
            'GetScrollInfo'))(
      hwnd,
      nBar,
      lpsi,
    );
  }

  _dart_GetScrollInfo? _GetScrollInfo;

  int DefFrameProcA(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<HWND__> hWndMDIClient,
    int uMsg,
    int wParam,
    int lParam,
  ) {
    return (_DefFrameProcA ??=
        _dylib.lookupFunction<_c_DefFrameProcA, _dart_DefFrameProcA>(
            'DefFrameProcA'))(
      hWnd,
      hWndMDIClient,
      uMsg,
      wParam,
      lParam,
    );
  }

  _dart_DefFrameProcA? _DefFrameProcA;

  int DefFrameProcW(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<HWND__> hWndMDIClient,
    int uMsg,
    int wParam,
    int lParam,
  ) {
    return (_DefFrameProcW ??=
        _dylib.lookupFunction<_c_DefFrameProcW, _dart_DefFrameProcW>(
            'DefFrameProcW'))(
      hWnd,
      hWndMDIClient,
      uMsg,
      wParam,
      lParam,
    );
  }

  _dart_DefFrameProcW? _DefFrameProcW;

  int DefMDIChildProcA(
    ffi.Pointer<HWND__> hWnd,
    int uMsg,
    int wParam,
    int lParam,
  ) {
    return (_DefMDIChildProcA ??=
        _dylib.lookupFunction<_c_DefMDIChildProcA, _dart_DefMDIChildProcA>(
            'DefMDIChildProcA'))(
      hWnd,
      uMsg,
      wParam,
      lParam,
    );
  }

  _dart_DefMDIChildProcA? _DefMDIChildProcA;

  int DefMDIChildProcW(
    ffi.Pointer<HWND__> hWnd,
    int uMsg,
    int wParam,
    int lParam,
  ) {
    return (_DefMDIChildProcW ??=
        _dylib.lookupFunction<_c_DefMDIChildProcW, _dart_DefMDIChildProcW>(
            'DefMDIChildProcW'))(
      hWnd,
      uMsg,
      wParam,
      lParam,
    );
  }

  _dart_DefMDIChildProcW? _DefMDIChildProcW;

  int TranslateMDISysAccel(
    ffi.Pointer<HWND__> hWndClient,
    ffi.Pointer<LPMSG> lpMsg,
  ) {
    return (_TranslateMDISysAccel ??= _dylib.lookupFunction<
        _c_TranslateMDISysAccel,
        _dart_TranslateMDISysAccel>('TranslateMDISysAccel'))(
      hWndClient,
      lpMsg,
    );
  }

  _dart_TranslateMDISysAccel? _TranslateMDISysAccel;

  int ArrangeIconicWindows(
    ffi.Pointer<HWND__> hWnd,
  ) {
    return (_ArrangeIconicWindows ??= _dylib.lookupFunction<
        _c_ArrangeIconicWindows,
        _dart_ArrangeIconicWindows>('ArrangeIconicWindows'))(
      hWnd,
    );
  }

  _dart_ArrangeIconicWindows? _ArrangeIconicWindows;

  ffi.Pointer<HWND__> CreateMDIWindowA(
    ffi.Pointer<ffi.Int8> lpClassName,
    ffi.Pointer<ffi.Int8> lpWindowName,
    int dwStyle,
    int X,
    int Y,
    int nWidth,
    int nHeight,
    ffi.Pointer<HWND__> hWndParent,
    ffi.Pointer<HINSTANCE__> hInstance,
    int lParam,
  ) {
    return (_CreateMDIWindowA ??=
        _dylib.lookupFunction<_c_CreateMDIWindowA, _dart_CreateMDIWindowA>(
            'CreateMDIWindowA'))(
      lpClassName,
      lpWindowName,
      dwStyle,
      X,
      Y,
      nWidth,
      nHeight,
      hWndParent,
      hInstance,
      lParam,
    );
  }

  _dart_CreateMDIWindowA? _CreateMDIWindowA;

  ffi.Pointer<HWND__> CreateMDIWindowW(
    ffi.Pointer<ffi.Uint16> lpClassName,
    ffi.Pointer<ffi.Uint16> lpWindowName,
    int dwStyle,
    int X,
    int Y,
    int nWidth,
    int nHeight,
    ffi.Pointer<HWND__> hWndParent,
    ffi.Pointer<HINSTANCE__> hInstance,
    int lParam,
  ) {
    return (_CreateMDIWindowW ??=
        _dylib.lookupFunction<_c_CreateMDIWindowW, _dart_CreateMDIWindowW>(
            'CreateMDIWindowW'))(
      lpClassName,
      lpWindowName,
      dwStyle,
      X,
      Y,
      nWidth,
      nHeight,
      hWndParent,
      hInstance,
      lParam,
    );
  }

  _dart_CreateMDIWindowW? _CreateMDIWindowW;

  int TileWindows(
    ffi.Pointer<HWND__> hwndParent,
    int wHow,
    ffi.Pointer<LPRECT> lpRect,
    int cKids,
    ffi.Pointer<ffi.Pointer<HWND__>> lpKids,
  ) {
    return (_TileWindows ??= _dylib
        .lookupFunction<_c_TileWindows, _dart_TileWindows>('TileWindows'))(
      hwndParent,
      wHow,
      lpRect,
      cKids,
      lpKids,
    );
  }

  _dart_TileWindows? _TileWindows;

  int CascadeWindows(
    ffi.Pointer<HWND__> hwndParent,
    int wHow,
    ffi.Pointer<LPRECT> lpRect,
    int cKids,
    ffi.Pointer<ffi.Pointer<HWND__>> lpKids,
  ) {
    return (_CascadeWindows ??=
        _dylib.lookupFunction<_c_CascadeWindows, _dart_CascadeWindows>(
            'CascadeWindows'))(
      hwndParent,
      wHow,
      lpRect,
      cKids,
      lpKids,
    );
  }

  _dart_CascadeWindows? _CascadeWindows;

  int WinHelpA(
    ffi.Pointer<HWND__> hWndMain,
    ffi.Pointer<ffi.Int8> lpszHelp,
    int uCommand,
    int dwData,
  ) {
    return (_WinHelpA ??=
        _dylib.lookupFunction<_c_WinHelpA, _dart_WinHelpA>('WinHelpA'))(
      hWndMain,
      lpszHelp,
      uCommand,
      dwData,
    );
  }

  _dart_WinHelpA? _WinHelpA;

  int WinHelpW(
    ffi.Pointer<HWND__> hWndMain,
    ffi.Pointer<ffi.Uint16> lpszHelp,
    int uCommand,
    int dwData,
  ) {
    return (_WinHelpW ??=
        _dylib.lookupFunction<_c_WinHelpW, _dart_WinHelpW>('WinHelpW'))(
      hWndMain,
      lpszHelp,
      uCommand,
      dwData,
    );
  }

  _dart_WinHelpW? _WinHelpW;

  int GetGuiResources(
    ffi.Pointer<ffi.Void> hProcess,
    int uiFlags,
  ) {
    return (_GetGuiResources ??=
        _dylib.lookupFunction<_c_GetGuiResources, _dart_GetGuiResources>(
            'GetGuiResources'))(
      hProcess,
      uiFlags,
    );
  }

  _dart_GetGuiResources? _GetGuiResources;

  int ChangeDisplaySettingsA(
    ffi.Pointer<LPDEVMODEA> lpDevMode,
    int dwFlags,
  ) {
    return (_ChangeDisplaySettingsA ??= _dylib.lookupFunction<
        _c_ChangeDisplaySettingsA,
        _dart_ChangeDisplaySettingsA>('ChangeDisplaySettingsA'))(
      lpDevMode,
      dwFlags,
    );
  }

  _dart_ChangeDisplaySettingsA? _ChangeDisplaySettingsA;

  int ChangeDisplaySettingsW(
    ffi.Pointer<LPDEVMODEW> lpDevMode,
    int dwFlags,
  ) {
    return (_ChangeDisplaySettingsW ??= _dylib.lookupFunction<
        _c_ChangeDisplaySettingsW,
        _dart_ChangeDisplaySettingsW>('ChangeDisplaySettingsW'))(
      lpDevMode,
      dwFlags,
    );
  }

  _dart_ChangeDisplaySettingsW? _ChangeDisplaySettingsW;

  int ChangeDisplaySettingsExA(
    ffi.Pointer<ffi.Int8> lpszDeviceName,
    ffi.Pointer<LPDEVMODEA> lpDevMode,
    ffi.Pointer<HWND__> hwnd,
    int dwflags,
    ffi.Pointer<ffi.Void> lParam,
  ) {
    return (_ChangeDisplaySettingsExA ??= _dylib.lookupFunction<
        _c_ChangeDisplaySettingsExA,
        _dart_ChangeDisplaySettingsExA>('ChangeDisplaySettingsExA'))(
      lpszDeviceName,
      lpDevMode,
      hwnd,
      dwflags,
      lParam,
    );
  }

  _dart_ChangeDisplaySettingsExA? _ChangeDisplaySettingsExA;

  int ChangeDisplaySettingsExW(
    ffi.Pointer<ffi.Uint16> lpszDeviceName,
    ffi.Pointer<LPDEVMODEW> lpDevMode,
    ffi.Pointer<HWND__> hwnd,
    int dwflags,
    ffi.Pointer<ffi.Void> lParam,
  ) {
    return (_ChangeDisplaySettingsExW ??= _dylib.lookupFunction<
        _c_ChangeDisplaySettingsExW,
        _dart_ChangeDisplaySettingsExW>('ChangeDisplaySettingsExW'))(
      lpszDeviceName,
      lpDevMode,
      hwnd,
      dwflags,
      lParam,
    );
  }

  _dart_ChangeDisplaySettingsExW? _ChangeDisplaySettingsExW;

  int EnumDisplaySettingsA(
    ffi.Pointer<ffi.Int8> lpszDeviceName,
    int iModeNum,
    ffi.Pointer<LPDEVMODEA> lpDevMode,
  ) {
    return (_EnumDisplaySettingsA ??= _dylib.lookupFunction<
        _c_EnumDisplaySettingsA,
        _dart_EnumDisplaySettingsA>('EnumDisplaySettingsA'))(
      lpszDeviceName,
      iModeNum,
      lpDevMode,
    );
  }

  _dart_EnumDisplaySettingsA? _EnumDisplaySettingsA;

  int EnumDisplaySettingsW(
    ffi.Pointer<ffi.Uint16> lpszDeviceName,
    int iModeNum,
    ffi.Pointer<LPDEVMODEW> lpDevMode,
  ) {
    return (_EnumDisplaySettingsW ??= _dylib.lookupFunction<
        _c_EnumDisplaySettingsW,
        _dart_EnumDisplaySettingsW>('EnumDisplaySettingsW'))(
      lpszDeviceName,
      iModeNum,
      lpDevMode,
    );
  }

  _dart_EnumDisplaySettingsW? _EnumDisplaySettingsW;

  int EnumDisplaySettingsExA(
    ffi.Pointer<ffi.Int8> lpszDeviceName,
    int iModeNum,
    ffi.Pointer<LPDEVMODEA> lpDevMode,
    int dwFlags,
  ) {
    return (_EnumDisplaySettingsExA ??= _dylib.lookupFunction<
        _c_EnumDisplaySettingsExA,
        _dart_EnumDisplaySettingsExA>('EnumDisplaySettingsExA'))(
      lpszDeviceName,
      iModeNum,
      lpDevMode,
      dwFlags,
    );
  }

  _dart_EnumDisplaySettingsExA? _EnumDisplaySettingsExA;

  int EnumDisplaySettingsExW(
    ffi.Pointer<ffi.Uint16> lpszDeviceName,
    int iModeNum,
    ffi.Pointer<LPDEVMODEW> lpDevMode,
    int dwFlags,
  ) {
    return (_EnumDisplaySettingsExW ??= _dylib.lookupFunction<
        _c_EnumDisplaySettingsExW,
        _dart_EnumDisplaySettingsExW>('EnumDisplaySettingsExW'))(
      lpszDeviceName,
      iModeNum,
      lpDevMode,
      dwFlags,
    );
  }

  _dart_EnumDisplaySettingsExW? _EnumDisplaySettingsExW;

  int EnumDisplayDevicesA(
    ffi.Pointer<ffi.Int8> lpDevice,
    int iDevNum,
    ffi.Pointer<LPDISPLAY_DEVICEA> lpDisplayDevice,
    int dwFlags,
  ) {
    return (_EnumDisplayDevicesA ??= _dylib.lookupFunction<
        _c_EnumDisplayDevicesA,
        _dart_EnumDisplayDevicesA>('EnumDisplayDevicesA'))(
      lpDevice,
      iDevNum,
      lpDisplayDevice,
      dwFlags,
    );
  }

  _dart_EnumDisplayDevicesA? _EnumDisplayDevicesA;

  int EnumDisplayDevicesW(
    ffi.Pointer<ffi.Uint16> lpDevice,
    int iDevNum,
    ffi.Pointer<LPDISPLAY_DEVICEW> lpDisplayDevice,
    int dwFlags,
  ) {
    return (_EnumDisplayDevicesW ??= _dylib.lookupFunction<
        _c_EnumDisplayDevicesW,
        _dart_EnumDisplayDevicesW>('EnumDisplayDevicesW'))(
      lpDevice,
      iDevNum,
      lpDisplayDevice,
      dwFlags,
    );
  }

  _dart_EnumDisplayDevicesW? _EnumDisplayDevicesW;

  int GetDisplayConfigBufferSizes(
    int flags,
    ffi.Pointer<ffi.Uint32> numPathArrayElements,
    ffi.Pointer<ffi.Uint32> numModeInfoArrayElements,
  ) {
    return (_GetDisplayConfigBufferSizes ??= _dylib.lookupFunction<
        _c_GetDisplayConfigBufferSizes,
        _dart_GetDisplayConfigBufferSizes>('GetDisplayConfigBufferSizes'))(
      flags,
      numPathArrayElements,
      numModeInfoArrayElements,
    );
  }

  _dart_GetDisplayConfigBufferSizes? _GetDisplayConfigBufferSizes;

  int SetDisplayConfig(
    int numPathArrayElements,
    ffi.Pointer<DISPLAYCONFIG_PATH_INFO> pathArray,
    int numModeInfoArrayElements,
    ffi.Pointer<DISPLAYCONFIG_MODE_INFO> modeInfoArray,
    int flags,
  ) {
    return (_SetDisplayConfig ??=
        _dylib.lookupFunction<_c_SetDisplayConfig, _dart_SetDisplayConfig>(
            'SetDisplayConfig'))(
      numPathArrayElements,
      pathArray,
      numModeInfoArrayElements,
      modeInfoArray,
      flags,
    );
  }

  _dart_SetDisplayConfig? _SetDisplayConfig;

  int QueryDisplayConfig(
    int flags,
    ffi.Pointer<ffi.Uint32> numPathArrayElements,
    ffi.Pointer<DISPLAYCONFIG_PATH_INFO> pathArray,
    ffi.Pointer<ffi.Uint32> numModeInfoArrayElements,
    ffi.Pointer<DISPLAYCONFIG_MODE_INFO> modeInfoArray,
    ffi.Pointer<ffi.Int32> currentTopologyId,
  ) {
    return (_QueryDisplayConfig ??=
        _dylib.lookupFunction<_c_QueryDisplayConfig, _dart_QueryDisplayConfig>(
            'QueryDisplayConfig'))(
      flags,
      numPathArrayElements,
      pathArray,
      numModeInfoArrayElements,
      modeInfoArray,
      currentTopologyId,
    );
  }

  _dart_QueryDisplayConfig? _QueryDisplayConfig;

  int DisplayConfigGetDeviceInfo(
    ffi.Pointer<DISPLAYCONFIG_DEVICE_INFO_HEADER> requestPacket,
  ) {
    return (_DisplayConfigGetDeviceInfo ??= _dylib.lookupFunction<
        _c_DisplayConfigGetDeviceInfo,
        _dart_DisplayConfigGetDeviceInfo>('DisplayConfigGetDeviceInfo'))(
      requestPacket,
    );
  }

  _dart_DisplayConfigGetDeviceInfo? _DisplayConfigGetDeviceInfo;

  int DisplayConfigSetDeviceInfo(
    ffi.Pointer<DISPLAYCONFIG_DEVICE_INFO_HEADER> setPacket,
  ) {
    return (_DisplayConfigSetDeviceInfo ??= _dylib.lookupFunction<
        _c_DisplayConfigSetDeviceInfo,
        _dart_DisplayConfigSetDeviceInfo>('DisplayConfigSetDeviceInfo'))(
      setPacket,
    );
  }

  _dart_DisplayConfigSetDeviceInfo? _DisplayConfigSetDeviceInfo;

  int SystemParametersInfoA(
    int uiAction,
    int uiParam,
    ffi.Pointer<ffi.Void> pvParam,
    int fWinIni,
  ) {
    return (_SystemParametersInfoA ??= _dylib.lookupFunction<
        _c_SystemParametersInfoA,
        _dart_SystemParametersInfoA>('SystemParametersInfoA'))(
      uiAction,
      uiParam,
      pvParam,
      fWinIni,
    );
  }

  _dart_SystemParametersInfoA? _SystemParametersInfoA;

  int SystemParametersInfoW(
    int uiAction,
    int uiParam,
    ffi.Pointer<ffi.Void> pvParam,
    int fWinIni,
  ) {
    return (_SystemParametersInfoW ??= _dylib.lookupFunction<
        _c_SystemParametersInfoW,
        _dart_SystemParametersInfoW>('SystemParametersInfoW'))(
      uiAction,
      uiParam,
      pvParam,
      fWinIni,
    );
  }

  _dart_SystemParametersInfoW? _SystemParametersInfoW;

  int SystemParametersInfoForDpi(
    int uiAction,
    int uiParam,
    ffi.Pointer<ffi.Void> pvParam,
    int fWinIni,
    int dpi,
  ) {
    return (_SystemParametersInfoForDpi ??= _dylib.lookupFunction<
        _c_SystemParametersInfoForDpi,
        _dart_SystemParametersInfoForDpi>('SystemParametersInfoForDpi'))(
      uiAction,
      uiParam,
      pvParam,
      fWinIni,
      dpi,
    );
  }

  _dart_SystemParametersInfoForDpi? _SystemParametersInfoForDpi;

  int SoundSentry() {
    return (_SoundSentry ??= _dylib
        .lookupFunction<_c_SoundSentry, _dart_SoundSentry>('SoundSentry'))();
  }

  _dart_SoundSentry? _SoundSentry;

  void SetDebugErrorLevel(
    int dwLevel,
  ) {
    return (_SetDebugErrorLevel ??=
        _dylib.lookupFunction<_c_SetDebugErrorLevel, _dart_SetDebugErrorLevel>(
            'SetDebugErrorLevel'))(
      dwLevel,
    );
  }

  _dart_SetDebugErrorLevel? _SetDebugErrorLevel;

  void SetLastErrorEx(
    int dwErrCode,
    int dwType,
  ) {
    return (_SetLastErrorEx ??=
        _dylib.lookupFunction<_c_SetLastErrorEx, _dart_SetLastErrorEx>(
            'SetLastErrorEx'))(
      dwErrCode,
      dwType,
    );
  }

  _dart_SetLastErrorEx? _SetLastErrorEx;

  int InternalGetWindowText(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<ffi.Uint16> pString,
    int cchMaxCount,
  ) {
    return (_InternalGetWindowText ??= _dylib.lookupFunction<
        _c_InternalGetWindowText,
        _dart_InternalGetWindowText>('InternalGetWindowText'))(
      hWnd,
      pString,
      cchMaxCount,
    );
  }

  _dart_InternalGetWindowText? _InternalGetWindowText;

  int CancelShutdown() {
    return (_CancelShutdown ??=
        _dylib.lookupFunction<_c_CancelShutdown, _dart_CancelShutdown>(
            'CancelShutdown'))();
  }

  _dart_CancelShutdown? _CancelShutdown;

  ffi.Pointer<HMONITOR__> MonitorFromRect(
    ffi.Pointer<LPRECT> lprc,
    int dwFlags,
  ) {
    return (_MonitorFromRect ??=
        _dylib.lookupFunction<_c_MonitorFromRect, _dart_MonitorFromRect>(
            'MonitorFromRect'))(
      lprc,
      dwFlags,
    );
  }

  _dart_MonitorFromRect? _MonitorFromRect;

  ffi.Pointer<HMONITOR__> MonitorFromWindow(
    ffi.Pointer<HWND__> hwnd,
    int dwFlags,
  ) {
    return (_MonitorFromWindow ??=
        _dylib.lookupFunction<_c_MonitorFromWindow, _dart_MonitorFromWindow>(
            'MonitorFromWindow'))(
      hwnd,
      dwFlags,
    );
  }

  _dart_MonitorFromWindow? _MonitorFromWindow;

  int GetMonitorInfoA(
    ffi.Pointer<HMONITOR__> hMonitor,
    ffi.Pointer<LPMONITORINFO> lpmi,
  ) {
    return (_GetMonitorInfoA ??=
        _dylib.lookupFunction<_c_GetMonitorInfoA, _dart_GetMonitorInfoA>(
            'GetMonitorInfoA'))(
      hMonitor,
      lpmi,
    );
  }

  _dart_GetMonitorInfoA? _GetMonitorInfoA;

  int GetMonitorInfoW(
    ffi.Pointer<HMONITOR__> hMonitor,
    ffi.Pointer<LPMONITORINFO> lpmi,
  ) {
    return (_GetMonitorInfoW ??=
        _dylib.lookupFunction<_c_GetMonitorInfoW, _dart_GetMonitorInfoW>(
            'GetMonitorInfoW'))(
      hMonitor,
      lpmi,
    );
  }

  _dart_GetMonitorInfoW? _GetMonitorInfoW;

  int EnumDisplayMonitors(
    ffi.Pointer<HDC__> hdc,
    ffi.Pointer<LPRECT> lprcClip,
    ffi.Pointer<ffi.NativeFunction<MONITORENUMPROC>> lpfnEnum,
    int dwData,
  ) {
    return (_EnumDisplayMonitors ??= _dylib.lookupFunction<
        _c_EnumDisplayMonitors,
        _dart_EnumDisplayMonitors>('EnumDisplayMonitors'))(
      hdc,
      lprcClip,
      lpfnEnum,
      dwData,
    );
  }

  _dart_EnumDisplayMonitors? _EnumDisplayMonitors;

  void NotifyWinEvent(
    int event,
    ffi.Pointer<HWND__> hwnd,
    int idObject,
    int idChild,
  ) {
    return (_NotifyWinEvent ??=
        _dylib.lookupFunction<_c_NotifyWinEvent, _dart_NotifyWinEvent>(
            'NotifyWinEvent'))(
      event,
      hwnd,
      idObject,
      idChild,
    );
  }

  _dart_NotifyWinEvent? _NotifyWinEvent;

  ffi.Pointer<HWINEVENTHOOK__> SetWinEventHook(
    int eventMin,
    int eventMax,
    ffi.Pointer<HINSTANCE__> hmodWinEventProc,
    ffi.Pointer<ffi.NativeFunction<WINEVENTPROC>> pfnWinEventProc,
    int idProcess,
    int idThread,
    int dwFlags,
  ) {
    return (_SetWinEventHook ??=
        _dylib.lookupFunction<_c_SetWinEventHook, _dart_SetWinEventHook>(
            'SetWinEventHook'))(
      eventMin,
      eventMax,
      hmodWinEventProc,
      pfnWinEventProc,
      idProcess,
      idThread,
      dwFlags,
    );
  }

  _dart_SetWinEventHook? _SetWinEventHook;

  int IsWinEventHookInstalled(
    int event,
  ) {
    return (_IsWinEventHookInstalled ??= _dylib.lookupFunction<
        _c_IsWinEventHookInstalled,
        _dart_IsWinEventHookInstalled>('IsWinEventHookInstalled'))(
      event,
    );
  }

  _dart_IsWinEventHookInstalled? _IsWinEventHookInstalled;

  int UnhookWinEvent(
    ffi.Pointer<HWINEVENTHOOK__> hWinEventHook,
  ) {
    return (_UnhookWinEvent ??=
        _dylib.lookupFunction<_c_UnhookWinEvent, _dart_UnhookWinEvent>(
            'UnhookWinEvent'))(
      hWinEventHook,
    );
  }

  _dart_UnhookWinEvent? _UnhookWinEvent;

  int GetGUIThreadInfo(
    int idThread,
    ffi.Pointer<LPGUITHREADINFO> pgui,
  ) {
    return (_GetGUIThreadInfo ??=
        _dylib.lookupFunction<_c_GetGUIThreadInfo, _dart_GetGUIThreadInfo>(
            'GetGUIThreadInfo'))(
      idThread,
      pgui,
    );
  }

  _dart_GetGUIThreadInfo? _GetGUIThreadInfo;

  int BlockInput(
    int fBlockIt,
  ) {
    return (_BlockInput ??=
        _dylib.lookupFunction<_c_BlockInput, _dart_BlockInput>('BlockInput'))(
      fBlockIt,
    );
  }

  _dart_BlockInput? _BlockInput;

  int SetProcessDPIAware() {
    return (_SetProcessDPIAware ??=
        _dylib.lookupFunction<_c_SetProcessDPIAware, _dart_SetProcessDPIAware>(
            'SetProcessDPIAware'))();
  }

  _dart_SetProcessDPIAware? _SetProcessDPIAware;

  int IsProcessDPIAware() {
    return (_IsProcessDPIAware ??=
        _dylib.lookupFunction<_c_IsProcessDPIAware, _dart_IsProcessDPIAware>(
            'IsProcessDPIAware'))();
  }

  _dart_IsProcessDPIAware? _IsProcessDPIAware;

  ffi.Pointer<DPI_AWARENESS_CONTEXT__> SetThreadDpiAwarenessContext(
    ffi.Pointer<DPI_AWARENESS_CONTEXT__> dpiContext,
  ) {
    return (_SetThreadDpiAwarenessContext ??= _dylib.lookupFunction<
        _c_SetThreadDpiAwarenessContext,
        _dart_SetThreadDpiAwarenessContext>('SetThreadDpiAwarenessContext'))(
      dpiContext,
    );
  }

  _dart_SetThreadDpiAwarenessContext? _SetThreadDpiAwarenessContext;

  ffi.Pointer<DPI_AWARENESS_CONTEXT__> GetThreadDpiAwarenessContext() {
    return (_GetThreadDpiAwarenessContext ??= _dylib.lookupFunction<
        _c_GetThreadDpiAwarenessContext,
        _dart_GetThreadDpiAwarenessContext>('GetThreadDpiAwarenessContext'))();
  }

  _dart_GetThreadDpiAwarenessContext? _GetThreadDpiAwarenessContext;

  ffi.Pointer<DPI_AWARENESS_CONTEXT__> GetWindowDpiAwarenessContext(
    ffi.Pointer<HWND__> hwnd,
  ) {
    return (_GetWindowDpiAwarenessContext ??= _dylib.lookupFunction<
        _c_GetWindowDpiAwarenessContext,
        _dart_GetWindowDpiAwarenessContext>('GetWindowDpiAwarenessContext'))(
      hwnd,
    );
  }

  _dart_GetWindowDpiAwarenessContext? _GetWindowDpiAwarenessContext;

  int GetAwarenessFromDpiAwarenessContext(
    ffi.Pointer<DPI_AWARENESS_CONTEXT__> value,
  ) {
    return (_GetAwarenessFromDpiAwarenessContext ??= _dylib.lookupFunction<
            _c_GetAwarenessFromDpiAwarenessContext,
            _dart_GetAwarenessFromDpiAwarenessContext>(
        'GetAwarenessFromDpiAwarenessContext'))(
      value,
    );
  }

  _dart_GetAwarenessFromDpiAwarenessContext?
      _GetAwarenessFromDpiAwarenessContext;

  int GetDpiFromDpiAwarenessContext(
    ffi.Pointer<DPI_AWARENESS_CONTEXT__> value,
  ) {
    return (_GetDpiFromDpiAwarenessContext ??= _dylib.lookupFunction<
        _c_GetDpiFromDpiAwarenessContext,
        _dart_GetDpiFromDpiAwarenessContext>('GetDpiFromDpiAwarenessContext'))(
      value,
    );
  }

  _dart_GetDpiFromDpiAwarenessContext? _GetDpiFromDpiAwarenessContext;

  int AreDpiAwarenessContextsEqual(
    ffi.Pointer<DPI_AWARENESS_CONTEXT__> dpiContextA,
    ffi.Pointer<DPI_AWARENESS_CONTEXT__> dpiContextB,
  ) {
    return (_AreDpiAwarenessContextsEqual ??= _dylib.lookupFunction<
        _c_AreDpiAwarenessContextsEqual,
        _dart_AreDpiAwarenessContextsEqual>('AreDpiAwarenessContextsEqual'))(
      dpiContextA,
      dpiContextB,
    );
  }

  _dart_AreDpiAwarenessContextsEqual? _AreDpiAwarenessContextsEqual;

  int IsValidDpiAwarenessContext(
    ffi.Pointer<DPI_AWARENESS_CONTEXT__> value,
  ) {
    return (_IsValidDpiAwarenessContext ??= _dylib.lookupFunction<
        _c_IsValidDpiAwarenessContext,
        _dart_IsValidDpiAwarenessContext>('IsValidDpiAwarenessContext'))(
      value,
    );
  }

  _dart_IsValidDpiAwarenessContext? _IsValidDpiAwarenessContext;

  int GetDpiForWindow(
    ffi.Pointer<HWND__> hwnd,
  ) {
    return (_GetDpiForWindow ??=
        _dylib.lookupFunction<_c_GetDpiForWindow, _dart_GetDpiForWindow>(
            'GetDpiForWindow'))(
      hwnd,
    );
  }

  _dart_GetDpiForWindow? _GetDpiForWindow;

  int GetDpiForSystem() {
    return (_GetDpiForSystem ??=
        _dylib.lookupFunction<_c_GetDpiForSystem, _dart_GetDpiForSystem>(
            'GetDpiForSystem'))();
  }

  _dart_GetDpiForSystem? _GetDpiForSystem;

  int GetSystemDpiForProcess(
    ffi.Pointer<ffi.Void> hProcess,
  ) {
    return (_GetSystemDpiForProcess ??= _dylib.lookupFunction<
        _c_GetSystemDpiForProcess,
        _dart_GetSystemDpiForProcess>('GetSystemDpiForProcess'))(
      hProcess,
    );
  }

  _dart_GetSystemDpiForProcess? _GetSystemDpiForProcess;

  int EnableNonClientDpiScaling(
    ffi.Pointer<HWND__> hwnd,
  ) {
    return (_EnableNonClientDpiScaling ??= _dylib.lookupFunction<
        _c_EnableNonClientDpiScaling,
        _dart_EnableNonClientDpiScaling>('EnableNonClientDpiScaling'))(
      hwnd,
    );
  }

  _dart_EnableNonClientDpiScaling? _EnableNonClientDpiScaling;

  int InheritWindowMonitor(
    ffi.Pointer<HWND__> hwnd,
    ffi.Pointer<HWND__> hwndInherit,
  ) {
    return (_InheritWindowMonitor ??= _dylib.lookupFunction<
        _c_InheritWindowMonitor,
        _dart_InheritWindowMonitor>('InheritWindowMonitor'))(
      hwnd,
      hwndInherit,
    );
  }

  _dart_InheritWindowMonitor? _InheritWindowMonitor;

  int SetProcessDpiAwarenessContext(
    ffi.Pointer<DPI_AWARENESS_CONTEXT__> value,
  ) {
    return (_SetProcessDpiAwarenessContext ??= _dylib.lookupFunction<
        _c_SetProcessDpiAwarenessContext,
        _dart_SetProcessDpiAwarenessContext>('SetProcessDpiAwarenessContext'))(
      value,
    );
  }

  _dart_SetProcessDpiAwarenessContext? _SetProcessDpiAwarenessContext;

  ffi.Pointer<DPI_AWARENESS_CONTEXT__> GetDpiAwarenessContextForProcess(
    ffi.Pointer<ffi.Void> hProcess,
  ) {
    return (_GetDpiAwarenessContextForProcess ??= _dylib.lookupFunction<
            _c_GetDpiAwarenessContextForProcess,
            _dart_GetDpiAwarenessContextForProcess>(
        'GetDpiAwarenessContextForProcess'))(
      hProcess,
    );
  }

  _dart_GetDpiAwarenessContextForProcess? _GetDpiAwarenessContextForProcess;

  int SetThreadDpiHostingBehavior(
    int value,
  ) {
    return (_SetThreadDpiHostingBehavior ??= _dylib.lookupFunction<
        _c_SetThreadDpiHostingBehavior,
        _dart_SetThreadDpiHostingBehavior>('SetThreadDpiHostingBehavior'))(
      value,
    );
  }

  _dart_SetThreadDpiHostingBehavior? _SetThreadDpiHostingBehavior;

  int GetThreadDpiHostingBehavior() {
    return (_GetThreadDpiHostingBehavior ??= _dylib.lookupFunction<
        _c_GetThreadDpiHostingBehavior,
        _dart_GetThreadDpiHostingBehavior>('GetThreadDpiHostingBehavior'))();
  }

  _dart_GetThreadDpiHostingBehavior? _GetThreadDpiHostingBehavior;

  int GetWindowDpiHostingBehavior(
    ffi.Pointer<HWND__> hwnd,
  ) {
    return (_GetWindowDpiHostingBehavior ??= _dylib.lookupFunction<
        _c_GetWindowDpiHostingBehavior,
        _dart_GetWindowDpiHostingBehavior>('GetWindowDpiHostingBehavior'))(
      hwnd,
    );
  }

  _dart_GetWindowDpiHostingBehavior? _GetWindowDpiHostingBehavior;

  int GetWindowModuleFileNameA(
    ffi.Pointer<HWND__> hwnd,
    ffi.Pointer<ffi.Int8> pszFileName,
    int cchFileNameMax,
  ) {
    return (_GetWindowModuleFileNameA ??= _dylib.lookupFunction<
        _c_GetWindowModuleFileNameA,
        _dart_GetWindowModuleFileNameA>('GetWindowModuleFileNameA'))(
      hwnd,
      pszFileName,
      cchFileNameMax,
    );
  }

  _dart_GetWindowModuleFileNameA? _GetWindowModuleFileNameA;

  int GetWindowModuleFileNameW(
    ffi.Pointer<HWND__> hwnd,
    ffi.Pointer<ffi.Uint16> pszFileName,
    int cchFileNameMax,
  ) {
    return (_GetWindowModuleFileNameW ??= _dylib.lookupFunction<
        _c_GetWindowModuleFileNameW,
        _dart_GetWindowModuleFileNameW>('GetWindowModuleFileNameW'))(
      hwnd,
      pszFileName,
      cchFileNameMax,
    );
  }

  _dart_GetWindowModuleFileNameW? _GetWindowModuleFileNameW;

  int GetCursorInfo(
    ffi.Pointer<LPCURSORINFO> pci,
  ) {
    return (_GetCursorInfo ??=
        _dylib.lookupFunction<_c_GetCursorInfo, _dart_GetCursorInfo>(
            'GetCursorInfo'))(
      pci,
    );
  }

  _dart_GetCursorInfo? _GetCursorInfo;

  int GetWindowInfo(
    ffi.Pointer<HWND__> hwnd,
    ffi.Pointer<LPWINDOWINFO> pwi,
  ) {
    return (_GetWindowInfo ??=
        _dylib.lookupFunction<_c_GetWindowInfo, _dart_GetWindowInfo>(
            'GetWindowInfo'))(
      hwnd,
      pwi,
    );
  }

  _dart_GetWindowInfo? _GetWindowInfo;

  int GetTitleBarInfo(
    ffi.Pointer<HWND__> hwnd,
    ffi.Pointer<LPTITLEBARINFO> pti,
  ) {
    return (_GetTitleBarInfo ??=
        _dylib.lookupFunction<_c_GetTitleBarInfo, _dart_GetTitleBarInfo>(
            'GetTitleBarInfo'))(
      hwnd,
      pti,
    );
  }

  _dart_GetTitleBarInfo? _GetTitleBarInfo;

  int GetMenuBarInfo(
    ffi.Pointer<HWND__> hwnd,
    int idObject,
    int idItem,
    ffi.Pointer<LPMENUBARINFO> pmbi,
  ) {
    return (_GetMenuBarInfo ??=
        _dylib.lookupFunction<_c_GetMenuBarInfo, _dart_GetMenuBarInfo>(
            'GetMenuBarInfo'))(
      hwnd,
      idObject,
      idItem,
      pmbi,
    );
  }

  _dart_GetMenuBarInfo? _GetMenuBarInfo;

  int GetScrollBarInfo(
    ffi.Pointer<HWND__> hwnd,
    int idObject,
    ffi.Pointer<LPSCROLLBARINFO> psbi,
  ) {
    return (_GetScrollBarInfo ??=
        _dylib.lookupFunction<_c_GetScrollBarInfo, _dart_GetScrollBarInfo>(
            'GetScrollBarInfo'))(
      hwnd,
      idObject,
      psbi,
    );
  }

  _dart_GetScrollBarInfo? _GetScrollBarInfo;

  int GetComboBoxInfo(
    ffi.Pointer<HWND__> hwndCombo,
    ffi.Pointer<LPCOMBOBOXINFO> pcbi,
  ) {
    return (_GetComboBoxInfo ??=
        _dylib.lookupFunction<_c_GetComboBoxInfo, _dart_GetComboBoxInfo>(
            'GetComboBoxInfo'))(
      hwndCombo,
      pcbi,
    );
  }

  _dart_GetComboBoxInfo? _GetComboBoxInfo;

  ffi.Pointer<HWND__> GetAncestor(
    ffi.Pointer<HWND__> hwnd,
    int gaFlags,
  ) {
    return (_GetAncestor ??= _dylib
        .lookupFunction<_c_GetAncestor, _dart_GetAncestor>('GetAncestor'))(
      hwnd,
      gaFlags,
    );
  }

  _dart_GetAncestor? _GetAncestor;

  int RealGetWindowClassA(
    ffi.Pointer<HWND__> hwnd,
    ffi.Pointer<ffi.Int8> ptszClassName,
    int cchClassNameMax,
  ) {
    return (_RealGetWindowClassA ??= _dylib.lookupFunction<
        _c_RealGetWindowClassA,
        _dart_RealGetWindowClassA>('RealGetWindowClassA'))(
      hwnd,
      ptszClassName,
      cchClassNameMax,
    );
  }

  _dart_RealGetWindowClassA? _RealGetWindowClassA;

  int RealGetWindowClassW(
    ffi.Pointer<HWND__> hwnd,
    ffi.Pointer<ffi.Uint16> ptszClassName,
    int cchClassNameMax,
  ) {
    return (_RealGetWindowClassW ??= _dylib.lookupFunction<
        _c_RealGetWindowClassW,
        _dart_RealGetWindowClassW>('RealGetWindowClassW'))(
      hwnd,
      ptszClassName,
      cchClassNameMax,
    );
  }

  _dart_RealGetWindowClassW? _RealGetWindowClassW;

  int GetAltTabInfoA(
    ffi.Pointer<HWND__> hwnd,
    int iItem,
    ffi.Pointer<LPALTTABINFO> pati,
    ffi.Pointer<ffi.Int8> pszItemText,
    int cchItemText,
  ) {
    return (_GetAltTabInfoA ??=
        _dylib.lookupFunction<_c_GetAltTabInfoA, _dart_GetAltTabInfoA>(
            'GetAltTabInfoA'))(
      hwnd,
      iItem,
      pati,
      pszItemText,
      cchItemText,
    );
  }

  _dart_GetAltTabInfoA? _GetAltTabInfoA;

  int GetAltTabInfoW(
    ffi.Pointer<HWND__> hwnd,
    int iItem,
    ffi.Pointer<LPALTTABINFO> pati,
    ffi.Pointer<ffi.Uint16> pszItemText,
    int cchItemText,
  ) {
    return (_GetAltTabInfoW ??=
        _dylib.lookupFunction<_c_GetAltTabInfoW, _dart_GetAltTabInfoW>(
            'GetAltTabInfoW'))(
      hwnd,
      iItem,
      pati,
      pszItemText,
      cchItemText,
    );
  }

  _dart_GetAltTabInfoW? _GetAltTabInfoW;

  int GetListBoxInfo(
    ffi.Pointer<HWND__> hwnd,
  ) {
    return (_GetListBoxInfo ??=
        _dylib.lookupFunction<_c_GetListBoxInfo, _dart_GetListBoxInfo>(
            'GetListBoxInfo'))(
      hwnd,
    );
  }

  _dart_GetListBoxInfo? _GetListBoxInfo;

  int LockWorkStation() {
    return (_LockWorkStation ??=
        _dylib.lookupFunction<_c_LockWorkStation, _dart_LockWorkStation>(
            'LockWorkStation'))();
  }

  _dart_LockWorkStation? _LockWorkStation;

  int UserHandleGrantAccess(
    ffi.Pointer<ffi.Void> hUserHandle,
    ffi.Pointer<ffi.Void> hJob,
    int bGrant,
  ) {
    return (_UserHandleGrantAccess ??= _dylib.lookupFunction<
        _c_UserHandleGrantAccess,
        _dart_UserHandleGrantAccess>('UserHandleGrantAccess'))(
      hUserHandle,
      hJob,
      bGrant,
    );
  }

  _dart_UserHandleGrantAccess? _UserHandleGrantAccess;

  int GetRawInputData(
    ffi.Pointer<HRAWINPUT__> hRawInput,
    int uiCommand,
    ffi.Pointer<ffi.Void> pData,
    ffi.Pointer<ffi.Uint32> pcbSize,
    int cbSizeHeader,
  ) {
    return (_GetRawInputData ??=
        _dylib.lookupFunction<_c_GetRawInputData, _dart_GetRawInputData>(
            'GetRawInputData'))(
      hRawInput,
      uiCommand,
      pData,
      pcbSize,
      cbSizeHeader,
    );
  }

  _dart_GetRawInputData? _GetRawInputData;

  int GetRawInputDeviceInfoA(
    ffi.Pointer<ffi.Void> hDevice,
    int uiCommand,
    ffi.Pointer<ffi.Void> pData,
    ffi.Pointer<ffi.Uint32> pcbSize,
  ) {
    return (_GetRawInputDeviceInfoA ??= _dylib.lookupFunction<
        _c_GetRawInputDeviceInfoA,
        _dart_GetRawInputDeviceInfoA>('GetRawInputDeviceInfoA'))(
      hDevice,
      uiCommand,
      pData,
      pcbSize,
    );
  }

  _dart_GetRawInputDeviceInfoA? _GetRawInputDeviceInfoA;

  int GetRawInputDeviceInfoW(
    ffi.Pointer<ffi.Void> hDevice,
    int uiCommand,
    ffi.Pointer<ffi.Void> pData,
    ffi.Pointer<ffi.Uint32> pcbSize,
  ) {
    return (_GetRawInputDeviceInfoW ??= _dylib.lookupFunction<
        _c_GetRawInputDeviceInfoW,
        _dart_GetRawInputDeviceInfoW>('GetRawInputDeviceInfoW'))(
      hDevice,
      uiCommand,
      pData,
      pcbSize,
    );
  }

  _dart_GetRawInputDeviceInfoW? _GetRawInputDeviceInfoW;

  int GetRawInputBuffer(
    ffi.Pointer<LPRAWINPUT> pData,
    ffi.Pointer<ffi.Uint32> pcbSize,
    int cbSizeHeader,
  ) {
    return (_GetRawInputBuffer ??=
        _dylib.lookupFunction<_c_GetRawInputBuffer, _dart_GetRawInputBuffer>(
            'GetRawInputBuffer'))(
      pData,
      pcbSize,
      cbSizeHeader,
    );
  }

  _dart_GetRawInputBuffer? _GetRawInputBuffer;

  int RegisterRawInputDevices(
    ffi.Pointer<LPRAWINPUTDEVICE> pRawInputDevices,
    int uiNumDevices,
    int cbSize,
  ) {
    return (_RegisterRawInputDevices ??= _dylib.lookupFunction<
        _c_RegisterRawInputDevices,
        _dart_RegisterRawInputDevices>('RegisterRawInputDevices'))(
      pRawInputDevices,
      uiNumDevices,
      cbSize,
    );
  }

  _dart_RegisterRawInputDevices? _RegisterRawInputDevices;

  int GetRegisteredRawInputDevices(
    ffi.Pointer<LPRAWINPUTDEVICE> pRawInputDevices,
    ffi.Pointer<ffi.Uint32> puiNumDevices,
    int cbSize,
  ) {
    return (_GetRegisteredRawInputDevices ??= _dylib.lookupFunction<
        _c_GetRegisteredRawInputDevices,
        _dart_GetRegisteredRawInputDevices>('GetRegisteredRawInputDevices'))(
      pRawInputDevices,
      puiNumDevices,
      cbSize,
    );
  }

  _dart_GetRegisteredRawInputDevices? _GetRegisteredRawInputDevices;

  int GetRawInputDeviceList(
    ffi.Pointer<PRAWINPUTDEVICELIST> pRawInputDeviceList,
    ffi.Pointer<ffi.Uint32> puiNumDevices,
    int cbSize,
  ) {
    return (_GetRawInputDeviceList ??= _dylib.lookupFunction<
        _c_GetRawInputDeviceList,
        _dart_GetRawInputDeviceList>('GetRawInputDeviceList'))(
      pRawInputDeviceList,
      puiNumDevices,
      cbSize,
    );
  }

  _dart_GetRawInputDeviceList? _GetRawInputDeviceList;

  int DefRawInputProc(
    ffi.Pointer<ffi.Pointer<LPRAWINPUT>> paRawInput,
    int nInput,
    int cbSizeHeader,
  ) {
    return (_DefRawInputProc ??=
        _dylib.lookupFunction<_c_DefRawInputProc, _dart_DefRawInputProc>(
            'DefRawInputProc'))(
      paRawInput,
      nInput,
      cbSizeHeader,
    );
  }

  _dart_DefRawInputProc? _DefRawInputProc;

  int GetPointerDevices(
    ffi.Pointer<ffi.Uint32> deviceCount,
    ffi.Pointer<POINTER_DEVICE_INFO> pointerDevices,
  ) {
    return (_GetPointerDevices ??=
        _dylib.lookupFunction<_c_GetPointerDevices, _dart_GetPointerDevices>(
            'GetPointerDevices'))(
      deviceCount,
      pointerDevices,
    );
  }

  _dart_GetPointerDevices? _GetPointerDevices;

  int GetPointerDevice(
    ffi.Pointer<ffi.Void> device,
    ffi.Pointer<POINTER_DEVICE_INFO> pointerDevice,
  ) {
    return (_GetPointerDevice ??=
        _dylib.lookupFunction<_c_GetPointerDevice, _dart_GetPointerDevice>(
            'GetPointerDevice'))(
      device,
      pointerDevice,
    );
  }

  _dart_GetPointerDevice? _GetPointerDevice;

  int GetPointerDeviceProperties(
    ffi.Pointer<ffi.Void> device,
    ffi.Pointer<ffi.Uint32> propertyCount,
    ffi.Pointer<POINTER_DEVICE_PROPERTY> pointerProperties,
  ) {
    return (_GetPointerDeviceProperties ??= _dylib.lookupFunction<
        _c_GetPointerDeviceProperties,
        _dart_GetPointerDeviceProperties>('GetPointerDeviceProperties'))(
      device,
      propertyCount,
      pointerProperties,
    );
  }

  _dart_GetPointerDeviceProperties? _GetPointerDeviceProperties;

  int RegisterPointerDeviceNotifications(
    ffi.Pointer<HWND__> window,
    int notifyRange,
  ) {
    return (_RegisterPointerDeviceNotifications ??= _dylib.lookupFunction<
            _c_RegisterPointerDeviceNotifications,
            _dart_RegisterPointerDeviceNotifications>(
        'RegisterPointerDeviceNotifications'))(
      window,
      notifyRange,
    );
  }

  _dart_RegisterPointerDeviceNotifications? _RegisterPointerDeviceNotifications;

  int GetPointerDeviceRects(
    ffi.Pointer<ffi.Void> device,
    ffi.Pointer<LPRECT> pointerDeviceRect,
    ffi.Pointer<LPRECT> displayRect,
  ) {
    return (_GetPointerDeviceRects ??= _dylib.lookupFunction<
        _c_GetPointerDeviceRects,
        _dart_GetPointerDeviceRects>('GetPointerDeviceRects'))(
      device,
      pointerDeviceRect,
      displayRect,
    );
  }

  _dart_GetPointerDeviceRects? _GetPointerDeviceRects;

  int GetPointerDeviceCursors(
    ffi.Pointer<ffi.Void> device,
    ffi.Pointer<ffi.Uint32> cursorCount,
    ffi.Pointer<POINTER_DEVICE_CURSOR_INFO> deviceCursors,
  ) {
    return (_GetPointerDeviceCursors ??= _dylib.lookupFunction<
        _c_GetPointerDeviceCursors,
        _dart_GetPointerDeviceCursors>('GetPointerDeviceCursors'))(
      device,
      cursorCount,
      deviceCursors,
    );
  }

  _dart_GetPointerDeviceCursors? _GetPointerDeviceCursors;

  int GetRawPointerDeviceData(
    int pointerId,
    int historyCount,
    int propertiesCount,
    ffi.Pointer<POINTER_DEVICE_PROPERTY> pProperties,
    ffi.Pointer<ffi.Int64> pValues,
  ) {
    return (_GetRawPointerDeviceData ??= _dylib.lookupFunction<
        _c_GetRawPointerDeviceData,
        _dart_GetRawPointerDeviceData>('GetRawPointerDeviceData'))(
      pointerId,
      historyCount,
      propertiesCount,
      pProperties,
      pValues,
    );
  }

  _dart_GetRawPointerDeviceData? _GetRawPointerDeviceData;

  int ChangeWindowMessageFilter(
    int message,
    int dwFlag,
  ) {
    return (_ChangeWindowMessageFilter ??= _dylib.lookupFunction<
        _c_ChangeWindowMessageFilter,
        _dart_ChangeWindowMessageFilter>('ChangeWindowMessageFilter'))(
      message,
      dwFlag,
    );
  }

  _dart_ChangeWindowMessageFilter? _ChangeWindowMessageFilter;

  int ChangeWindowMessageFilterEx(
    ffi.Pointer<HWND__> hwnd,
    int message,
    int action,
    ffi.Pointer<PCHANGEFILTERSTRUCT> pChangeFilterStruct,
  ) {
    return (_ChangeWindowMessageFilterEx ??= _dylib.lookupFunction<
        _c_ChangeWindowMessageFilterEx,
        _dart_ChangeWindowMessageFilterEx>('ChangeWindowMessageFilterEx'))(
      hwnd,
      message,
      action,
      pChangeFilterStruct,
    );
  }

  _dart_ChangeWindowMessageFilterEx? _ChangeWindowMessageFilterEx;

  int GetGestureInfo(
    ffi.Pointer<HGESTUREINFO__> hGestureInfo,
    ffi.Pointer<PGESTUREINFO> pGestureInfo,
  ) {
    return (_GetGestureInfo ??=
        _dylib.lookupFunction<_c_GetGestureInfo, _dart_GetGestureInfo>(
            'GetGestureInfo'))(
      hGestureInfo,
      pGestureInfo,
    );
  }

  _dart_GetGestureInfo? _GetGestureInfo;

  int GetGestureExtraArgs(
    ffi.Pointer<HGESTUREINFO__> hGestureInfo,
    int cbExtraArgs,
    ffi.Pointer<ffi.Uint8> pExtraArgs,
  ) {
    return (_GetGestureExtraArgs ??= _dylib.lookupFunction<
        _c_GetGestureExtraArgs,
        _dart_GetGestureExtraArgs>('GetGestureExtraArgs'))(
      hGestureInfo,
      cbExtraArgs,
      pExtraArgs,
    );
  }

  _dart_GetGestureExtraArgs? _GetGestureExtraArgs;

  int CloseGestureInfoHandle(
    ffi.Pointer<HGESTUREINFO__> hGestureInfo,
  ) {
    return (_CloseGestureInfoHandle ??= _dylib.lookupFunction<
        _c_CloseGestureInfoHandle,
        _dart_CloseGestureInfoHandle>('CloseGestureInfoHandle'))(
      hGestureInfo,
    );
  }

  _dart_CloseGestureInfoHandle? _CloseGestureInfoHandle;

  int SetGestureConfig(
    ffi.Pointer<HWND__> hwnd,
    int dwReserved,
    int cIDs,
    ffi.Pointer<PGESTURECONFIG> pGestureConfig,
    int cbSize,
  ) {
    return (_SetGestureConfig ??=
        _dylib.lookupFunction<_c_SetGestureConfig, _dart_SetGestureConfig>(
            'SetGestureConfig'))(
      hwnd,
      dwReserved,
      cIDs,
      pGestureConfig,
      cbSize,
    );
  }

  _dart_SetGestureConfig? _SetGestureConfig;

  int GetGestureConfig(
    ffi.Pointer<HWND__> hwnd,
    int dwReserved,
    int dwFlags,
    ffi.Pointer<ffi.Uint32> pcIDs,
    ffi.Pointer<PGESTURECONFIG> pGestureConfig,
    int cbSize,
  ) {
    return (_GetGestureConfig ??=
        _dylib.lookupFunction<_c_GetGestureConfig, _dart_GetGestureConfig>(
            'GetGestureConfig'))(
      hwnd,
      dwReserved,
      dwFlags,
      pcIDs,
      pGestureConfig,
      cbSize,
    );
  }

  _dart_GetGestureConfig? _GetGestureConfig;

  int ShutdownBlockReasonCreate(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<ffi.Uint16> pwszReason,
  ) {
    return (_ShutdownBlockReasonCreate ??= _dylib.lookupFunction<
        _c_ShutdownBlockReasonCreate,
        _dart_ShutdownBlockReasonCreate>('ShutdownBlockReasonCreate'))(
      hWnd,
      pwszReason,
    );
  }

  _dart_ShutdownBlockReasonCreate? _ShutdownBlockReasonCreate;

  int ShutdownBlockReasonQuery(
    ffi.Pointer<HWND__> hWnd,
    ffi.Pointer<ffi.Uint16> pwszBuff,
    ffi.Pointer<ffi.Uint64> pcchBuff,
  ) {
    return (_ShutdownBlockReasonQuery ??= _dylib.lookupFunction<
        _c_ShutdownBlockReasonQuery,
        _dart_ShutdownBlockReasonQuery>('ShutdownBlockReasonQuery'))(
      hWnd,
      pwszBuff,
      pcchBuff,
    );
  }

  _dart_ShutdownBlockReasonQuery? _ShutdownBlockReasonQuery;

  int ShutdownBlockReasonDestroy(
    ffi.Pointer<HWND__> hWnd,
  ) {
    return (_ShutdownBlockReasonDestroy ??= _dylib.lookupFunction<
        _c_ShutdownBlockReasonDestroy,
        _dart_ShutdownBlockReasonDestroy>('ShutdownBlockReasonDestroy'))(
      hWnd,
    );
  }

  _dart_ShutdownBlockReasonDestroy? _ShutdownBlockReasonDestroy;

  int GetCurrentInputMessageSource(
    ffi.Pointer<INPUT_MESSAGE_SOURCE> inputMessageSource,
  ) {
    return (_GetCurrentInputMessageSource ??= _dylib.lookupFunction<
        _c_GetCurrentInputMessageSource,
        _dart_GetCurrentInputMessageSource>('GetCurrentInputMessageSource'))(
      inputMessageSource,
    );
  }

  _dart_GetCurrentInputMessageSource? _GetCurrentInputMessageSource;

  int GetCIMSSM(
    ffi.Pointer<INPUT_MESSAGE_SOURCE> inputMessageSource,
  ) {
    return (_GetCIMSSM ??=
        _dylib.lookupFunction<_c_GetCIMSSM, _dart_GetCIMSSM>('GetCIMSSM'))(
      inputMessageSource,
    );
  }

  _dart_GetCIMSSM? _GetCIMSSM;

  int GetAutoRotationState(
    ffi.Pointer<ffi.Int32> pState,
  ) {
    return (_GetAutoRotationState ??= _dylib.lookupFunction<
        _c_GetAutoRotationState,
        _dart_GetAutoRotationState>('GetAutoRotationState'))(
      pState,
    );
  }

  _dart_GetAutoRotationState? _GetAutoRotationState;

  int GetDisplayAutoRotationPreferences(
    ffi.Pointer<ffi.Int32> pOrientation,
  ) {
    return (_GetDisplayAutoRotationPreferences ??= _dylib.lookupFunction<
            _c_GetDisplayAutoRotationPreferences,
            _dart_GetDisplayAutoRotationPreferences>(
        'GetDisplayAutoRotationPreferences'))(
      pOrientation,
    );
  }

  _dart_GetDisplayAutoRotationPreferences? _GetDisplayAutoRotationPreferences;

  int GetDisplayAutoRotationPreferencesByProcessId(
    int dwProcessId,
    ffi.Pointer<ffi.Int32> pOrientation,
    ffi.Pointer<ffi.Int32> fRotateScreen,
  ) {
    return (_GetDisplayAutoRotationPreferencesByProcessId ??=
        _dylib.lookupFunction<_c_GetDisplayAutoRotationPreferencesByProcessId,
                _dart_GetDisplayAutoRotationPreferencesByProcessId>(
            'GetDisplayAutoRotationPreferencesByProcessId'))(
      dwProcessId,
      pOrientation,
      fRotateScreen,
    );
  }

  _dart_GetDisplayAutoRotationPreferencesByProcessId?
      _GetDisplayAutoRotationPreferencesByProcessId;

  int SetDisplayAutoRotationPreferences(
    int orientation,
  ) {
    return (_SetDisplayAutoRotationPreferences ??= _dylib.lookupFunction<
            _c_SetDisplayAutoRotationPreferences,
            _dart_SetDisplayAutoRotationPreferences>(
        'SetDisplayAutoRotationPreferences'))(
      orientation,
    );
  }

  _dart_SetDisplayAutoRotationPreferences? _SetDisplayAutoRotationPreferences;

  int IsImmersiveProcess(
    ffi.Pointer<ffi.Void> hProcess,
  ) {
    return (_IsImmersiveProcess ??=
        _dylib.lookupFunction<_c_IsImmersiveProcess, _dart_IsImmersiveProcess>(
            'IsImmersiveProcess'))(
      hProcess,
    );
  }

  _dart_IsImmersiveProcess? _IsImmersiveProcess;

  int SetProcessRestrictionExemption(
    int fEnableExemption,
  ) {
    return (_SetProcessRestrictionExemption ??= _dylib.lookupFunction<
            _c_SetProcessRestrictionExemption,
            _dart_SetProcessRestrictionExemption>(
        'SetProcessRestrictionExemption'))(
      fEnableExemption,
    );
  }

  _dart_SetProcessRestrictionExemption? _SetProcessRestrictionExemption;

  int GetDateFormatA(
    int Locale,
    int dwFlags,
    ffi.Pointer<LPSYSTEMTIME> lpDate,
    ffi.Pointer<ffi.Int8> lpFormat,
    ffi.Pointer<ffi.Int8> lpDateStr,
    int cchDate,
  ) {
    return (_GetDateFormatA ??=
        _dylib.lookupFunction<_c_GetDateFormatA, _dart_GetDateFormatA>(
            'GetDateFormatA'))(
      Locale,
      dwFlags,
      lpDate,
      lpFormat,
      lpDateStr,
      cchDate,
    );
  }

  _dart_GetDateFormatA? _GetDateFormatA;

  int GetDateFormatW(
    int Locale,
    int dwFlags,
    ffi.Pointer<LPSYSTEMTIME> lpDate,
    ffi.Pointer<ffi.Uint16> lpFormat,
    ffi.Pointer<ffi.Uint16> lpDateStr,
    int cchDate,
  ) {
    return (_GetDateFormatW ??=
        _dylib.lookupFunction<_c_GetDateFormatW, _dart_GetDateFormatW>(
            'GetDateFormatW'))(
      Locale,
      dwFlags,
      lpDate,
      lpFormat,
      lpDateStr,
      cchDate,
    );
  }

  _dart_GetDateFormatW? _GetDateFormatW;

  int GetTimeFormatA(
    int Locale,
    int dwFlags,
    ffi.Pointer<LPSYSTEMTIME> lpTime,
    ffi.Pointer<ffi.Int8> lpFormat,
    ffi.Pointer<ffi.Int8> lpTimeStr,
    int cchTime,
  ) {
    return (_GetTimeFormatA ??=
        _dylib.lookupFunction<_c_GetTimeFormatA, _dart_GetTimeFormatA>(
            'GetTimeFormatA'))(
      Locale,
      dwFlags,
      lpTime,
      lpFormat,
      lpTimeStr,
      cchTime,
    );
  }

  _dart_GetTimeFormatA? _GetTimeFormatA;

  int GetTimeFormatW(
    int Locale,
    int dwFlags,
    ffi.Pointer<LPSYSTEMTIME> lpTime,
    ffi.Pointer<ffi.Uint16> lpFormat,
    ffi.Pointer<ffi.Uint16> lpTimeStr,
    int cchTime,
  ) {
    return (_GetTimeFormatW ??=
        _dylib.lookupFunction<_c_GetTimeFormatW, _dart_GetTimeFormatW>(
            'GetTimeFormatW'))(
      Locale,
      dwFlags,
      lpTime,
      lpFormat,
      lpTimeStr,
      cchTime,
    );
  }

  _dart_GetTimeFormatW? _GetTimeFormatW;

  int GetTimeFormatEx(
    ffi.Pointer<ffi.Uint16> lpLocaleName,
    int dwFlags,
    ffi.Pointer<LPSYSTEMTIME> lpTime,
    ffi.Pointer<ffi.Uint16> lpFormat,
    ffi.Pointer<ffi.Uint16> lpTimeStr,
    int cchTime,
  ) {
    return (_GetTimeFormatEx ??=
        _dylib.lookupFunction<_c_GetTimeFormatEx, _dart_GetTimeFormatEx>(
            'GetTimeFormatEx'))(
      lpLocaleName,
      dwFlags,
      lpTime,
      lpFormat,
      lpTimeStr,
      cchTime,
    );
  }

  _dart_GetTimeFormatEx? _GetTimeFormatEx;

  int GetDateFormatEx(
    ffi.Pointer<ffi.Uint16> lpLocaleName,
    int dwFlags,
    ffi.Pointer<LPSYSTEMTIME> lpDate,
    ffi.Pointer<ffi.Uint16> lpFormat,
    ffi.Pointer<ffi.Uint16> lpDateStr,
    int cchDate,
    ffi.Pointer<ffi.Uint16> lpCalendar,
  ) {
    return (_GetDateFormatEx ??=
        _dylib.lookupFunction<_c_GetDateFormatEx, _dart_GetDateFormatEx>(
            'GetDateFormatEx'))(
      lpLocaleName,
      dwFlags,
      lpDate,
      lpFormat,
      lpDateStr,
      cchDate,
      lpCalendar,
    );
  }

  _dart_GetDateFormatEx? _GetDateFormatEx;

  int GetDurationFormatEx(
    ffi.Pointer<ffi.Uint16> lpLocaleName,
    int dwFlags,
    ffi.Pointer<LPSYSTEMTIME> lpDuration,
    int ullDuration,
    ffi.Pointer<ffi.Uint16> lpFormat,
    ffi.Pointer<ffi.Uint16> lpDurationStr,
    int cchDuration,
  ) {
    return (_GetDurationFormatEx ??= _dylib.lookupFunction<
        _c_GetDurationFormatEx,
        _dart_GetDurationFormatEx>('GetDurationFormatEx'))(
      lpLocaleName,
      dwFlags,
      lpDuration,
      ullDuration,
      lpFormat,
      lpDurationStr,
      cchDuration,
    );
  }

  _dart_GetDurationFormatEx? _GetDurationFormatEx;

  int CompareStringEx(
    ffi.Pointer<ffi.Uint16> lpLocaleName,
    int dwCmpFlags,
    ffi.Pointer<ffi.Uint16> lpString1,
    int cchCount1,
    ffi.Pointer<ffi.Uint16> lpString2,
    int cchCount2,
    ffi.Pointer<LPNLSVERSIONINFO> lpVersionInformation,
    ffi.Pointer<ffi.Void> lpReserved,
    int lParam,
  ) {
    return (_CompareStringEx ??=
        _dylib.lookupFunction<_c_CompareStringEx, _dart_CompareStringEx>(
            'CompareStringEx'))(
      lpLocaleName,
      dwCmpFlags,
      lpString1,
      cchCount1,
      lpString2,
      cchCount2,
      lpVersionInformation,
      lpReserved,
      lParam,
    );
  }

  _dart_CompareStringEx? _CompareStringEx;

  int CompareStringOrdinal(
    ffi.Pointer<ffi.Uint16> lpString1,
    int cchCount1,
    ffi.Pointer<ffi.Uint16> lpString2,
    int cchCount2,
    int bIgnoreCase,
  ) {
    return (_CompareStringOrdinal ??= _dylib.lookupFunction<
        _c_CompareStringOrdinal,
        _dart_CompareStringOrdinal>('CompareStringOrdinal'))(
      lpString1,
      cchCount1,
      lpString2,
      cchCount2,
      bIgnoreCase,
    );
  }

  _dart_CompareStringOrdinal? _CompareStringOrdinal;

  int CompareStringW(
    int Locale,
    int dwCmpFlags,
    ffi.Pointer<ffi.Uint16> lpString1,
    int cchCount1,
    ffi.Pointer<ffi.Uint16> lpString2,
    int cchCount2,
  ) {
    return (_CompareStringW ??=
        _dylib.lookupFunction<_c_CompareStringW, _dart_CompareStringW>(
            'CompareStringW'))(
      Locale,
      dwCmpFlags,
      lpString1,
      cchCount1,
      lpString2,
      cchCount2,
    );
  }

  _dart_CompareStringW? _CompareStringW;

  int FoldStringW(
    int dwMapFlags,
    ffi.Pointer<ffi.Uint16> lpSrcStr,
    int cchSrc,
    ffi.Pointer<ffi.Uint16> lpDestStr,
    int cchDest,
  ) {
    return (_FoldStringW ??= _dylib
        .lookupFunction<_c_FoldStringW, _dart_FoldStringW>('FoldStringW'))(
      dwMapFlags,
      lpSrcStr,
      cchSrc,
      lpDestStr,
      cchDest,
    );
  }

  _dart_FoldStringW? _FoldStringW;

  int GetStringTypeExW(
    int Locale,
    int dwInfoType,
    ffi.Pointer<ffi.Uint16> lpSrcStr,
    int cchSrc,
    ffi.Pointer<ffi.Uint16> lpCharType,
  ) {
    return (_GetStringTypeExW ??=
        _dylib.lookupFunction<_c_GetStringTypeExW, _dart_GetStringTypeExW>(
            'GetStringTypeExW'))(
      Locale,
      dwInfoType,
      lpSrcStr,
      cchSrc,
      lpCharType,
    );
  }

  _dart_GetStringTypeExW? _GetStringTypeExW;

  int GetStringTypeW(
    int dwInfoType,
    ffi.Pointer<ffi.Uint16> lpSrcStr,
    int cchSrc,
    ffi.Pointer<ffi.Uint16> lpCharType,
  ) {
    return (_GetStringTypeW ??=
        _dylib.lookupFunction<_c_GetStringTypeW, _dart_GetStringTypeW>(
            'GetStringTypeW'))(
      dwInfoType,
      lpSrcStr,
      cchSrc,
      lpCharType,
    );
  }

  _dart_GetStringTypeW? _GetStringTypeW;

  int MultiByteToWideChar(
    int CodePage,
    int dwFlags,
    ffi.Pointer<ffi.Int8> lpMultiByteStr,
    int cbMultiByte,
    ffi.Pointer<ffi.Uint16> lpWideCharStr,
    int cchWideChar,
  ) {
    return (_MultiByteToWideChar ??= _dylib.lookupFunction<
        _c_MultiByteToWideChar,
        _dart_MultiByteToWideChar>('MultiByteToWideChar'))(
      CodePage,
      dwFlags,
      lpMultiByteStr,
      cbMultiByte,
      lpWideCharStr,
      cchWideChar,
    );
  }

  _dart_MultiByteToWideChar? _MultiByteToWideChar;

  int WideCharToMultiByte(
    int CodePage,
    int dwFlags,
    ffi.Pointer<ffi.Uint16> lpWideCharStr,
    int cchWideChar,
    ffi.Pointer<ffi.Int8> lpMultiByteStr,
    int cbMultiByte,
    ffi.Pointer<ffi.Int8> lpDefaultChar,
    ffi.Pointer<ffi.Int32> lpUsedDefaultChar,
  ) {
    return (_WideCharToMultiByte ??= _dylib.lookupFunction<
        _c_WideCharToMultiByte,
        _dart_WideCharToMultiByte>('WideCharToMultiByte'))(
      CodePage,
      dwFlags,
      lpWideCharStr,
      cchWideChar,
      lpMultiByteStr,
      cbMultiByte,
      lpDefaultChar,
      lpUsedDefaultChar,
    );
  }

  _dart_WideCharToMultiByte? _WideCharToMultiByte;

  int IsValidCodePage(
    int CodePage,
  ) {
    return (_IsValidCodePage ??=
        _dylib.lookupFunction<_c_IsValidCodePage, _dart_IsValidCodePage>(
            'IsValidCodePage'))(
      CodePage,
    );
  }

  _dart_IsValidCodePage? _IsValidCodePage;

  int GetACP() {
    return (_GetACP ??=
        _dylib.lookupFunction<_c_GetACP, _dart_GetACP>('GetACP'))();
  }

  _dart_GetACP? _GetACP;

  int GetOEMCP() {
    return (_GetOEMCP ??=
        _dylib.lookupFunction<_c_GetOEMCP, _dart_GetOEMCP>('GetOEMCP'))();
  }

  _dart_GetOEMCP? _GetOEMCP;

  int GetCPInfo(
    int CodePage,
    ffi.Pointer<LPCPINFO> lpCPInfo,
  ) {
    return (_GetCPInfo ??=
        _dylib.lookupFunction<_c_GetCPInfo, _dart_GetCPInfo>('GetCPInfo'))(
      CodePage,
      lpCPInfo,
    );
  }

  _dart_GetCPInfo? _GetCPInfo;

  int GetCPInfoExA(
    int CodePage,
    int dwFlags,
    ffi.Pointer<LPCPINFOEXA> lpCPInfoEx,
  ) {
    return (_GetCPInfoExA ??= _dylib
        .lookupFunction<_c_GetCPInfoExA, _dart_GetCPInfoExA>('GetCPInfoExA'))(
      CodePage,
      dwFlags,
      lpCPInfoEx,
    );
  }

  _dart_GetCPInfoExA? _GetCPInfoExA;

  int GetCPInfoExW(
    int CodePage,
    int dwFlags,
    ffi.Pointer<LPCPINFOEXW> lpCPInfoEx,
  ) {
    return (_GetCPInfoExW ??= _dylib
        .lookupFunction<_c_GetCPInfoExW, _dart_GetCPInfoExW>('GetCPInfoExW'))(
      CodePage,
      dwFlags,
      lpCPInfoEx,
    );
  }

  _dart_GetCPInfoExW? _GetCPInfoExW;

  int CompareStringA(
    int Locale,
    int dwCmpFlags,
    ffi.Pointer<ffi.Int8> lpString1,
    int cchCount1,
    ffi.Pointer<ffi.Int8> lpString2,
    int cchCount2,
  ) {
    return (_CompareStringA ??=
        _dylib.lookupFunction<_c_CompareStringA, _dart_CompareStringA>(
            'CompareStringA'))(
      Locale,
      dwCmpFlags,
      lpString1,
      cchCount1,
      lpString2,
      cchCount2,
    );
  }

  _dart_CompareStringA? _CompareStringA;

  int FindNLSString(
    int Locale,
    int dwFindNLSStringFlags,
    ffi.Pointer<ffi.Uint16> lpStringSource,
    int cchSource,
    ffi.Pointer<ffi.Uint16> lpStringValue,
    int cchValue,
    ffi.Pointer<ffi.Int32> pcchFound,
  ) {
    return (_FindNLSString ??=
        _dylib.lookupFunction<_c_FindNLSString, _dart_FindNLSString>(
            'FindNLSString'))(
      Locale,
      dwFindNLSStringFlags,
      lpStringSource,
      cchSource,
      lpStringValue,
      cchValue,
      pcchFound,
    );
  }

  _dart_FindNLSString? _FindNLSString;

  int LCMapStringW(
    int Locale,
    int dwMapFlags,
    ffi.Pointer<ffi.Uint16> lpSrcStr,
    int cchSrc,
    ffi.Pointer<ffi.Uint16> lpDestStr,
    int cchDest,
  ) {
    return (_LCMapStringW ??= _dylib
        .lookupFunction<_c_LCMapStringW, _dart_LCMapStringW>('LCMapStringW'))(
      Locale,
      dwMapFlags,
      lpSrcStr,
      cchSrc,
      lpDestStr,
      cchDest,
    );
  }

  _dart_LCMapStringW? _LCMapStringW;

  int LCMapStringA(
    int Locale,
    int dwMapFlags,
    ffi.Pointer<ffi.Int8> lpSrcStr,
    int cchSrc,
    ffi.Pointer<ffi.Int8> lpDestStr,
    int cchDest,
  ) {
    return (_LCMapStringA ??= _dylib
        .lookupFunction<_c_LCMapStringA, _dart_LCMapStringA>('LCMapStringA'))(
      Locale,
      dwMapFlags,
      lpSrcStr,
      cchSrc,
      lpDestStr,
      cchDest,
    );
  }

  _dart_LCMapStringA? _LCMapStringA;

  int GetLocaleInfoW(
    int Locale,
    int LCType,
    ffi.Pointer<ffi.Uint16> lpLCData,
    int cchData,
  ) {
    return (_GetLocaleInfoW ??=
        _dylib.lookupFunction<_c_GetLocaleInfoW, _dart_GetLocaleInfoW>(
            'GetLocaleInfoW'))(
      Locale,
      LCType,
      lpLCData,
      cchData,
    );
  }

  _dart_GetLocaleInfoW? _GetLocaleInfoW;

  int GetLocaleInfoA(
    int Locale,
    int LCType,
    ffi.Pointer<ffi.Int8> lpLCData,
    int cchData,
  ) {
    return (_GetLocaleInfoA ??=
        _dylib.lookupFunction<_c_GetLocaleInfoA, _dart_GetLocaleInfoA>(
            'GetLocaleInfoA'))(
      Locale,
      LCType,
      lpLCData,
      cchData,
    );
  }

  _dart_GetLocaleInfoA? _GetLocaleInfoA;

  int SetLocaleInfoA(
    int Locale,
    int LCType,
    ffi.Pointer<ffi.Int8> lpLCData,
  ) {
    return (_SetLocaleInfoA ??=
        _dylib.lookupFunction<_c_SetLocaleInfoA, _dart_SetLocaleInfoA>(
            'SetLocaleInfoA'))(
      Locale,
      LCType,
      lpLCData,
    );
  }

  _dart_SetLocaleInfoA? _SetLocaleInfoA;

  int SetLocaleInfoW(
    int Locale,
    int LCType,
    ffi.Pointer<ffi.Uint16> lpLCData,
  ) {
    return (_SetLocaleInfoW ??=
        _dylib.lookupFunction<_c_SetLocaleInfoW, _dart_SetLocaleInfoW>(
            'SetLocaleInfoW'))(
      Locale,
      LCType,
      lpLCData,
    );
  }

  _dart_SetLocaleInfoW? _SetLocaleInfoW;

  int GetCalendarInfoA(
    int Locale,
    int Calendar,
    int CalType,
    ffi.Pointer<ffi.Int8> lpCalData,
    int cchData,
    ffi.Pointer<ffi.Uint64> lpValue,
  ) {
    return (_GetCalendarInfoA ??=
        _dylib.lookupFunction<_c_GetCalendarInfoA, _dart_GetCalendarInfoA>(
            'GetCalendarInfoA'))(
      Locale,
      Calendar,
      CalType,
      lpCalData,
      cchData,
      lpValue,
    );
  }

  _dart_GetCalendarInfoA? _GetCalendarInfoA;

  int GetCalendarInfoW(
    int Locale,
    int Calendar,
    int CalType,
    ffi.Pointer<ffi.Uint16> lpCalData,
    int cchData,
    ffi.Pointer<ffi.Uint64> lpValue,
  ) {
    return (_GetCalendarInfoW ??=
        _dylib.lookupFunction<_c_GetCalendarInfoW, _dart_GetCalendarInfoW>(
            'GetCalendarInfoW'))(
      Locale,
      Calendar,
      CalType,
      lpCalData,
      cchData,
      lpValue,
    );
  }

  _dart_GetCalendarInfoW? _GetCalendarInfoW;

  int SetCalendarInfoA(
    int Locale,
    int Calendar,
    int CalType,
    ffi.Pointer<ffi.Int8> lpCalData,
  ) {
    return (_SetCalendarInfoA ??=
        _dylib.lookupFunction<_c_SetCalendarInfoA, _dart_SetCalendarInfoA>(
            'SetCalendarInfoA'))(
      Locale,
      Calendar,
      CalType,
      lpCalData,
    );
  }

  _dart_SetCalendarInfoA? _SetCalendarInfoA;

  int SetCalendarInfoW(
    int Locale,
    int Calendar,
    int CalType,
    ffi.Pointer<ffi.Uint16> lpCalData,
  ) {
    return (_SetCalendarInfoW ??=
        _dylib.lookupFunction<_c_SetCalendarInfoW, _dart_SetCalendarInfoW>(
            'SetCalendarInfoW'))(
      Locale,
      Calendar,
      CalType,
      lpCalData,
    );
  }

  _dart_SetCalendarInfoW? _SetCalendarInfoW;

  int LoadStringByReference(
    int Flags,
    ffi.Pointer<ffi.Uint16> Language,
    ffi.Pointer<ffi.Uint16> SourceString,
    ffi.Pointer<ffi.Uint16> Buffer,
    int cchBuffer,
    ffi.Pointer<ffi.Uint16> Directory,
    ffi.Pointer<ffi.Uint64> pcchBufferOut,
  ) {
    return (_LoadStringByReference ??= _dylib.lookupFunction<
        _c_LoadStringByReference,
        _dart_LoadStringByReference>('LoadStringByReference'))(
      Flags,
      Language,
      SourceString,
      Buffer,
      cchBuffer,
      Directory,
      pcchBufferOut,
    );
  }

  _dart_LoadStringByReference? _LoadStringByReference;

  int IsDBCSLeadByte(
    int TestChar,
  ) {
    return (_IsDBCSLeadByte ??=
        _dylib.lookupFunction<_c_IsDBCSLeadByte, _dart_IsDBCSLeadByte>(
            'IsDBCSLeadByte'))(
      TestChar,
    );
  }

  _dart_IsDBCSLeadByte? _IsDBCSLeadByte;

  int IsDBCSLeadByteEx(
    int CodePage,
    int TestChar,
  ) {
    return (_IsDBCSLeadByteEx ??=
        _dylib.lookupFunction<_c_IsDBCSLeadByteEx, _dart_IsDBCSLeadByteEx>(
            'IsDBCSLeadByteEx'))(
      CodePage,
      TestChar,
    );
  }

  _dart_IsDBCSLeadByteEx? _IsDBCSLeadByteEx;

  int LocaleNameToLCID(
    ffi.Pointer<ffi.Uint16> lpName,
    int dwFlags,
  ) {
    return (_LocaleNameToLCID ??=
        _dylib.lookupFunction<_c_LocaleNameToLCID, _dart_LocaleNameToLCID>(
            'LocaleNameToLCID'))(
      lpName,
      dwFlags,
    );
  }

  _dart_LocaleNameToLCID? _LocaleNameToLCID;

  int LCIDToLocaleName(
    int Locale,
    ffi.Pointer<ffi.Uint16> lpName,
    int cchName,
    int dwFlags,
  ) {
    return (_LCIDToLocaleName ??=
        _dylib.lookupFunction<_c_LCIDToLocaleName, _dart_LCIDToLocaleName>(
            'LCIDToLocaleName'))(
      Locale,
      lpName,
      cchName,
      dwFlags,
    );
  }

  _dart_LCIDToLocaleName? _LCIDToLocaleName;

  int GetDurationFormat(
    int Locale,
    int dwFlags,
    ffi.Pointer<LPSYSTEMTIME> lpDuration,
    int ullDuration,
    ffi.Pointer<ffi.Uint16> lpFormat,
    ffi.Pointer<ffi.Uint16> lpDurationStr,
    int cchDuration,
  ) {
    return (_GetDurationFormat ??=
        _dylib.lookupFunction<_c_GetDurationFormat, _dart_GetDurationFormat>(
            'GetDurationFormat'))(
      Locale,
      dwFlags,
      lpDuration,
      ullDuration,
      lpFormat,
      lpDurationStr,
      cchDuration,
    );
  }

  _dart_GetDurationFormat? _GetDurationFormat;

  int GetNumberFormatA(
    int Locale,
    int dwFlags,
    ffi.Pointer<ffi.Int8> lpValue,
    ffi.Pointer<LPNUMBERFMTA> lpFormat,
    ffi.Pointer<ffi.Int8> lpNumberStr,
    int cchNumber,
  ) {
    return (_GetNumberFormatA ??=
        _dylib.lookupFunction<_c_GetNumberFormatA, _dart_GetNumberFormatA>(
            'GetNumberFormatA'))(
      Locale,
      dwFlags,
      lpValue,
      lpFormat,
      lpNumberStr,
      cchNumber,
    );
  }

  _dart_GetNumberFormatA? _GetNumberFormatA;

  int GetNumberFormatW(
    int Locale,
    int dwFlags,
    ffi.Pointer<ffi.Uint16> lpValue,
    ffi.Pointer<LPNUMBERFMTW> lpFormat,
    ffi.Pointer<ffi.Uint16> lpNumberStr,
    int cchNumber,
  ) {
    return (_GetNumberFormatW ??=
        _dylib.lookupFunction<_c_GetNumberFormatW, _dart_GetNumberFormatW>(
            'GetNumberFormatW'))(
      Locale,
      dwFlags,
      lpValue,
      lpFormat,
      lpNumberStr,
      cchNumber,
    );
  }

  _dart_GetNumberFormatW? _GetNumberFormatW;

  int GetCurrencyFormatA(
    int Locale,
    int dwFlags,
    ffi.Pointer<ffi.Int8> lpValue,
    ffi.Pointer<LPCURRENCYFMTA> lpFormat,
    ffi.Pointer<ffi.Int8> lpCurrencyStr,
    int cchCurrency,
  ) {
    return (_GetCurrencyFormatA ??=
        _dylib.lookupFunction<_c_GetCurrencyFormatA, _dart_GetCurrencyFormatA>(
            'GetCurrencyFormatA'))(
      Locale,
      dwFlags,
      lpValue,
      lpFormat,
      lpCurrencyStr,
      cchCurrency,
    );
  }

  _dart_GetCurrencyFormatA? _GetCurrencyFormatA;

  int GetCurrencyFormatW(
    int Locale,
    int dwFlags,
    ffi.Pointer<ffi.Uint16> lpValue,
    ffi.Pointer<LPCURRENCYFMTW> lpFormat,
    ffi.Pointer<ffi.Uint16> lpCurrencyStr,
    int cchCurrency,
  ) {
    return (_GetCurrencyFormatW ??=
        _dylib.lookupFunction<_c_GetCurrencyFormatW, _dart_GetCurrencyFormatW>(
            'GetCurrencyFormatW'))(
      Locale,
      dwFlags,
      lpValue,
      lpFormat,
      lpCurrencyStr,
      cchCurrency,
    );
  }

  _dart_GetCurrencyFormatW? _GetCurrencyFormatW;

  int EnumCalendarInfoA(
    ffi.Pointer<ffi.NativeFunction<CALINFO_ENUMPROCA>> lpCalInfoEnumProc,
    int Locale,
    int Calendar,
    int CalType,
  ) {
    return (_EnumCalendarInfoA ??=
        _dylib.lookupFunction<_c_EnumCalendarInfoA, _dart_EnumCalendarInfoA>(
            'EnumCalendarInfoA'))(
      lpCalInfoEnumProc,
      Locale,
      Calendar,
      CalType,
    );
  }

  _dart_EnumCalendarInfoA? _EnumCalendarInfoA;

  int EnumCalendarInfoW(
    ffi.Pointer<ffi.NativeFunction<CALINFO_ENUMPROCW>> lpCalInfoEnumProc,
    int Locale,
    int Calendar,
    int CalType,
  ) {
    return (_EnumCalendarInfoW ??=
        _dylib.lookupFunction<_c_EnumCalendarInfoW, _dart_EnumCalendarInfoW>(
            'EnumCalendarInfoW'))(
      lpCalInfoEnumProc,
      Locale,
      Calendar,
      CalType,
    );
  }

  _dart_EnumCalendarInfoW? _EnumCalendarInfoW;

  int EnumCalendarInfoExA(
    ffi.Pointer<ffi.NativeFunction<CALINFO_ENUMPROCEXA>> lpCalInfoEnumProcEx,
    int Locale,
    int Calendar,
    int CalType,
  ) {
    return (_EnumCalendarInfoExA ??= _dylib.lookupFunction<
        _c_EnumCalendarInfoExA,
        _dart_EnumCalendarInfoExA>('EnumCalendarInfoExA'))(
      lpCalInfoEnumProcEx,
      Locale,
      Calendar,
      CalType,
    );
  }

  _dart_EnumCalendarInfoExA? _EnumCalendarInfoExA;

  int EnumCalendarInfoExW(
    ffi.Pointer<ffi.NativeFunction<CALINFO_ENUMPROCEXW>> lpCalInfoEnumProcEx,
    int Locale,
    int Calendar,
    int CalType,
  ) {
    return (_EnumCalendarInfoExW ??= _dylib.lookupFunction<
        _c_EnumCalendarInfoExW,
        _dart_EnumCalendarInfoExW>('EnumCalendarInfoExW'))(
      lpCalInfoEnumProcEx,
      Locale,
      Calendar,
      CalType,
    );
  }

  _dart_EnumCalendarInfoExW? _EnumCalendarInfoExW;

  int EnumTimeFormatsA(
    ffi.Pointer<ffi.NativeFunction<TIMEFMT_ENUMPROCA>> lpTimeFmtEnumProc,
    int Locale,
    int dwFlags,
  ) {
    return (_EnumTimeFormatsA ??=
        _dylib.lookupFunction<_c_EnumTimeFormatsA, _dart_EnumTimeFormatsA>(
            'EnumTimeFormatsA'))(
      lpTimeFmtEnumProc,
      Locale,
      dwFlags,
    );
  }

  _dart_EnumTimeFormatsA? _EnumTimeFormatsA;

  int EnumTimeFormatsW(
    ffi.Pointer<ffi.NativeFunction<TIMEFMT_ENUMPROCW>> lpTimeFmtEnumProc,
    int Locale,
    int dwFlags,
  ) {
    return (_EnumTimeFormatsW ??=
        _dylib.lookupFunction<_c_EnumTimeFormatsW, _dart_EnumTimeFormatsW>(
            'EnumTimeFormatsW'))(
      lpTimeFmtEnumProc,
      Locale,
      dwFlags,
    );
  }

  _dart_EnumTimeFormatsW? _EnumTimeFormatsW;

  int EnumDateFormatsA(
    ffi.Pointer<ffi.NativeFunction<DATEFMT_ENUMPROCA>> lpDateFmtEnumProc,
    int Locale,
    int dwFlags,
  ) {
    return (_EnumDateFormatsA ??=
        _dylib.lookupFunction<_c_EnumDateFormatsA, _dart_EnumDateFormatsA>(
            'EnumDateFormatsA'))(
      lpDateFmtEnumProc,
      Locale,
      dwFlags,
    );
  }

  _dart_EnumDateFormatsA? _EnumDateFormatsA;

  int EnumDateFormatsW(
    ffi.Pointer<ffi.NativeFunction<DATEFMT_ENUMPROCW>> lpDateFmtEnumProc,
    int Locale,
    int dwFlags,
  ) {
    return (_EnumDateFormatsW ??=
        _dylib.lookupFunction<_c_EnumDateFormatsW, _dart_EnumDateFormatsW>(
            'EnumDateFormatsW'))(
      lpDateFmtEnumProc,
      Locale,
      dwFlags,
    );
  }

  _dart_EnumDateFormatsW? _EnumDateFormatsW;

  int EnumDateFormatsExA(
    ffi.Pointer<ffi.NativeFunction<DATEFMT_ENUMPROCEXA>> lpDateFmtEnumProcEx,
    int Locale,
    int dwFlags,
  ) {
    return (_EnumDateFormatsExA ??=
        _dylib.lookupFunction<_c_EnumDateFormatsExA, _dart_EnumDateFormatsExA>(
            'EnumDateFormatsExA'))(
      lpDateFmtEnumProcEx,
      Locale,
      dwFlags,
    );
  }

  _dart_EnumDateFormatsExA? _EnumDateFormatsExA;

  int EnumDateFormatsExW(
    ffi.Pointer<ffi.NativeFunction<DATEFMT_ENUMPROCEXW>> lpDateFmtEnumProcEx,
    int Locale,
    int dwFlags,
  ) {
    return (_EnumDateFormatsExW ??=
        _dylib.lookupFunction<_c_EnumDateFormatsExW, _dart_EnumDateFormatsExW>(
            'EnumDateFormatsExW'))(
      lpDateFmtEnumProcEx,
      Locale,
      dwFlags,
    );
  }

  _dart_EnumDateFormatsExW? _EnumDateFormatsExW;

  int IsValidLanguageGroup(
    int LanguageGroup,
    int dwFlags,
  ) {
    return (_IsValidLanguageGroup ??= _dylib.lookupFunction<
        _c_IsValidLanguageGroup,
        _dart_IsValidLanguageGroup>('IsValidLanguageGroup'))(
      LanguageGroup,
      dwFlags,
    );
  }

  _dart_IsValidLanguageGroup? _IsValidLanguageGroup;

  int GetNLSVersion(
    int Function_1,
    int Locale,
    ffi.Pointer<LPNLSVERSIONINFO> lpVersionInformation,
  ) {
    return (_GetNLSVersion ??=
        _dylib.lookupFunction<_c_GetNLSVersion, _dart_GetNLSVersion>(
            'GetNLSVersion'))(
      Function_1,
      Locale,
      lpVersionInformation,
    );
  }

  _dart_GetNLSVersion? _GetNLSVersion;

  int IsValidLocale(
    int Locale,
    int dwFlags,
  ) {
    return (_IsValidLocale ??=
        _dylib.lookupFunction<_c_IsValidLocale, _dart_IsValidLocale>(
            'IsValidLocale'))(
      Locale,
      dwFlags,
    );
  }

  _dart_IsValidLocale? _IsValidLocale;

  int GetGeoInfoA(
    int Location,
    int GeoType,
    ffi.Pointer<ffi.Int8> lpGeoData,
    int cchData,
    int LangId,
  ) {
    return (_GetGeoInfoA ??= _dylib
        .lookupFunction<_c_GetGeoInfoA, _dart_GetGeoInfoA>('GetGeoInfoA'))(
      Location,
      GeoType,
      lpGeoData,
      cchData,
      LangId,
    );
  }

  _dart_GetGeoInfoA? _GetGeoInfoA;

  int GetGeoInfoW(
    int Location,
    int GeoType,
    ffi.Pointer<ffi.Uint16> lpGeoData,
    int cchData,
    int LangId,
  ) {
    return (_GetGeoInfoW ??= _dylib
        .lookupFunction<_c_GetGeoInfoW, _dart_GetGeoInfoW>('GetGeoInfoW'))(
      Location,
      GeoType,
      lpGeoData,
      cchData,
      LangId,
    );
  }

  _dart_GetGeoInfoW? _GetGeoInfoW;

  int GetGeoInfoEx(
    ffi.Pointer<ffi.Uint16> location,
    int geoType,
    ffi.Pointer<ffi.Uint16> geoData,
    int geoDataCount,
  ) {
    return (_GetGeoInfoEx ??= _dylib
        .lookupFunction<_c_GetGeoInfoEx, _dart_GetGeoInfoEx>('GetGeoInfoEx'))(
      location,
      geoType,
      geoData,
      geoDataCount,
    );
  }

  _dart_GetGeoInfoEx? _GetGeoInfoEx;

  int EnumSystemGeoID(
    int GeoClass,
    int ParentGeoId,
    ffi.Pointer<ffi.NativeFunction<GEO_ENUMPROC>> lpGeoEnumProc,
  ) {
    return (_EnumSystemGeoID ??=
        _dylib.lookupFunction<_c_EnumSystemGeoID, _dart_EnumSystemGeoID>(
            'EnumSystemGeoID'))(
      GeoClass,
      ParentGeoId,
      lpGeoEnumProc,
    );
  }

  _dart_EnumSystemGeoID? _EnumSystemGeoID;

  int EnumSystemGeoNames(
    int geoClass,
    ffi.Pointer<ffi.NativeFunction<GEO_ENUMNAMEPROC>> geoEnumProc,
    int data,
  ) {
    return (_EnumSystemGeoNames ??=
        _dylib.lookupFunction<_c_EnumSystemGeoNames, _dart_EnumSystemGeoNames>(
            'EnumSystemGeoNames'))(
      geoClass,
      geoEnumProc,
      data,
    );
  }

  _dart_EnumSystemGeoNames? _EnumSystemGeoNames;

  int GetUserGeoID(
    int GeoClass,
  ) {
    return (_GetUserGeoID ??= _dylib
        .lookupFunction<_c_GetUserGeoID, _dart_GetUserGeoID>('GetUserGeoID'))(
      GeoClass,
    );
  }

  _dart_GetUserGeoID? _GetUserGeoID;

  int GetUserDefaultGeoName(
    ffi.Pointer<ffi.Uint16> geoName,
    int geoNameCount,
  ) {
    return (_GetUserDefaultGeoName ??= _dylib.lookupFunction<
        _c_GetUserDefaultGeoName,
        _dart_GetUserDefaultGeoName>('GetUserDefaultGeoName'))(
      geoName,
      geoNameCount,
    );
  }

  _dart_GetUserDefaultGeoName? _GetUserDefaultGeoName;

  int SetUserGeoID(
    int GeoId,
  ) {
    return (_SetUserGeoID ??= _dylib
        .lookupFunction<_c_SetUserGeoID, _dart_SetUserGeoID>('SetUserGeoID'))(
      GeoId,
    );
  }

  _dart_SetUserGeoID? _SetUserGeoID;

  int SetUserGeoName(
    ffi.Pointer<ffi.Uint16> geoName,
  ) {
    return (_SetUserGeoName ??=
        _dylib.lookupFunction<_c_SetUserGeoName, _dart_SetUserGeoName>(
            'SetUserGeoName'))(
      geoName,
    );
  }

  _dart_SetUserGeoName? _SetUserGeoName;

  int ConvertDefaultLocale(
    int Locale,
  ) {
    return (_ConvertDefaultLocale ??= _dylib.lookupFunction<
        _c_ConvertDefaultLocale,
        _dart_ConvertDefaultLocale>('ConvertDefaultLocale'))(
      Locale,
    );
  }

  _dart_ConvertDefaultLocale? _ConvertDefaultLocale;

  int GetSystemDefaultUILanguage() {
    return (_GetSystemDefaultUILanguage ??= _dylib.lookupFunction<
        _c_GetSystemDefaultUILanguage,
        _dart_GetSystemDefaultUILanguage>('GetSystemDefaultUILanguage'))();
  }

  _dart_GetSystemDefaultUILanguage? _GetSystemDefaultUILanguage;

  int GetThreadLocale() {
    return (_GetThreadLocale ??=
        _dylib.lookupFunction<_c_GetThreadLocale, _dart_GetThreadLocale>(
            'GetThreadLocale'))();
  }

  _dart_GetThreadLocale? _GetThreadLocale;

  int SetThreadLocale(
    int Locale,
  ) {
    return (_SetThreadLocale ??=
        _dylib.lookupFunction<_c_SetThreadLocale, _dart_SetThreadLocale>(
            'SetThreadLocale'))(
      Locale,
    );
  }

  _dart_SetThreadLocale? _SetThreadLocale;

  int GetUserDefaultUILanguage() {
    return (_GetUserDefaultUILanguage ??= _dylib.lookupFunction<
        _c_GetUserDefaultUILanguage,
        _dart_GetUserDefaultUILanguage>('GetUserDefaultUILanguage'))();
  }

  _dart_GetUserDefaultUILanguage? _GetUserDefaultUILanguage;

  int GetUserDefaultLangID() {
    return (_GetUserDefaultLangID ??= _dylib.lookupFunction<
        _c_GetUserDefaultLangID,
        _dart_GetUserDefaultLangID>('GetUserDefaultLangID'))();
  }

  _dart_GetUserDefaultLangID? _GetUserDefaultLangID;

  int GetSystemDefaultLangID() {
    return (_GetSystemDefaultLangID ??= _dylib.lookupFunction<
        _c_GetSystemDefaultLangID,
        _dart_GetSystemDefaultLangID>('GetSystemDefaultLangID'))();
  }

  _dart_GetSystemDefaultLangID? _GetSystemDefaultLangID;

  int GetSystemDefaultLCID() {
    return (_GetSystemDefaultLCID ??= _dylib.lookupFunction<
        _c_GetSystemDefaultLCID,
        _dart_GetSystemDefaultLCID>('GetSystemDefaultLCID'))();
  }

  _dart_GetSystemDefaultLCID? _GetSystemDefaultLCID;

  int GetUserDefaultLCID() {
    return (_GetUserDefaultLCID ??=
        _dylib.lookupFunction<_c_GetUserDefaultLCID, _dart_GetUserDefaultLCID>(
            'GetUserDefaultLCID'))();
  }

  _dart_GetUserDefaultLCID? _GetUserDefaultLCID;

  int SetThreadUILanguage(
    int LangId,
  ) {
    return (_SetThreadUILanguage ??= _dylib.lookupFunction<
        _c_SetThreadUILanguage,
        _dart_SetThreadUILanguage>('SetThreadUILanguage'))(
      LangId,
    );
  }

  _dart_SetThreadUILanguage? _SetThreadUILanguage;

  int GetThreadUILanguage() {
    return (_GetThreadUILanguage ??= _dylib.lookupFunction<
        _c_GetThreadUILanguage,
        _dart_GetThreadUILanguage>('GetThreadUILanguage'))();
  }

  _dart_GetThreadUILanguage? _GetThreadUILanguage;

  int GetProcessPreferredUILanguages(
    int dwFlags,
    ffi.Pointer<ffi.Uint64> pulNumLanguages,
    ffi.Pointer<ffi.Uint16> pwszLanguagesBuffer,
    ffi.Pointer<ffi.Uint64> pcchLanguagesBuffer,
  ) {
    return (_GetProcessPreferredUILanguages ??= _dylib.lookupFunction<
            _c_GetProcessPreferredUILanguages,
            _dart_GetProcessPreferredUILanguages>(
        'GetProcessPreferredUILanguages'))(
      dwFlags,
      pulNumLanguages,
      pwszLanguagesBuffer,
      pcchLanguagesBuffer,
    );
  }

  _dart_GetProcessPreferredUILanguages? _GetProcessPreferredUILanguages;

  int SetProcessPreferredUILanguages(
    int dwFlags,
    ffi.Pointer<ffi.Uint16> pwszLanguagesBuffer,
    ffi.Pointer<ffi.Uint64> pulNumLanguages,
  ) {
    return (_SetProcessPreferredUILanguages ??= _dylib.lookupFunction<
            _c_SetProcessPreferredUILanguages,
            _dart_SetProcessPreferredUILanguages>(
        'SetProcessPreferredUILanguages'))(
      dwFlags,
      pwszLanguagesBuffer,
      pulNumLanguages,
    );
  }

  _dart_SetProcessPreferredUILanguages? _SetProcessPreferredUILanguages;

  int GetUserPreferredUILanguages(
    int dwFlags,
    ffi.Pointer<ffi.Uint64> pulNumLanguages,
    ffi.Pointer<ffi.Uint16> pwszLanguagesBuffer,
    ffi.Pointer<ffi.Uint64> pcchLanguagesBuffer,
  ) {
    return (_GetUserPreferredUILanguages ??= _dylib.lookupFunction<
        _c_GetUserPreferredUILanguages,
        _dart_GetUserPreferredUILanguages>('GetUserPreferredUILanguages'))(
      dwFlags,
      pulNumLanguages,
      pwszLanguagesBuffer,
      pcchLanguagesBuffer,
    );
  }

  _dart_GetUserPreferredUILanguages? _GetUserPreferredUILanguages;

  int GetSystemPreferredUILanguages(
    int dwFlags,
    ffi.Pointer<ffi.Uint64> pulNumLanguages,
    ffi.Pointer<ffi.Uint16> pwszLanguagesBuffer,
    ffi.Pointer<ffi.Uint64> pcchLanguagesBuffer,
  ) {
    return (_GetSystemPreferredUILanguages ??= _dylib.lookupFunction<
        _c_GetSystemPreferredUILanguages,
        _dart_GetSystemPreferredUILanguages>('GetSystemPreferredUILanguages'))(
      dwFlags,
      pulNumLanguages,
      pwszLanguagesBuffer,
      pcchLanguagesBuffer,
    );
  }

  _dart_GetSystemPreferredUILanguages? _GetSystemPreferredUILanguages;

  int GetThreadPreferredUILanguages(
    int dwFlags,
    ffi.Pointer<ffi.Uint64> pulNumLanguages,
    ffi.Pointer<ffi.Uint16> pwszLanguagesBuffer,
    ffi.Pointer<ffi.Uint64> pcchLanguagesBuffer,
  ) {
    return (_GetThreadPreferredUILanguages ??= _dylib.lookupFunction<
        _c_GetThreadPreferredUILanguages,
        _dart_GetThreadPreferredUILanguages>('GetThreadPreferredUILanguages'))(
      dwFlags,
      pulNumLanguages,
      pwszLanguagesBuffer,
      pcchLanguagesBuffer,
    );
  }

  _dart_GetThreadPreferredUILanguages? _GetThreadPreferredUILanguages;

  int SetThreadPreferredUILanguages(
    int dwFlags,
    ffi.Pointer<ffi.Uint16> pwszLanguagesBuffer,
    ffi.Pointer<ffi.Uint64> pulNumLanguages,
  ) {
    return (_SetThreadPreferredUILanguages ??= _dylib.lookupFunction<
        _c_SetThreadPreferredUILanguages,
        _dart_SetThreadPreferredUILanguages>('SetThreadPreferredUILanguages'))(
      dwFlags,
      pwszLanguagesBuffer,
      pulNumLanguages,
    );
  }

  _dart_SetThreadPreferredUILanguages? _SetThreadPreferredUILanguages;

  int GetFileMUIInfo(
    int dwFlags,
    ffi.Pointer<ffi.Uint16> pcwszFilePath,
    ffi.Pointer<PFILEMUIINFO> pFileMUIInfo,
    ffi.Pointer<ffi.Uint64> pcbFileMUIInfo,
  ) {
    return (_GetFileMUIInfo ??=
        _dylib.lookupFunction<_c_GetFileMUIInfo, _dart_GetFileMUIInfo>(
            'GetFileMUIInfo'))(
      dwFlags,
      pcwszFilePath,
      pFileMUIInfo,
      pcbFileMUIInfo,
    );
  }

  _dart_GetFileMUIInfo? _GetFileMUIInfo;

  int GetFileMUIPath(
    int dwFlags,
    ffi.Pointer<ffi.Uint16> pcwszFilePath,
    ffi.Pointer<ffi.Uint16> pwszLanguage,
    ffi.Pointer<ffi.Uint64> pcchLanguage,
    ffi.Pointer<ffi.Uint16> pwszFileMUIPath,
    ffi.Pointer<ffi.Uint64> pcchFileMUIPath,
    ffi.Pointer<ffi.Uint64> pululEnumerator,
  ) {
    return (_GetFileMUIPath ??=
        _dylib.lookupFunction<_c_GetFileMUIPath, _dart_GetFileMUIPath>(
            'GetFileMUIPath'))(
      dwFlags,
      pcwszFilePath,
      pwszLanguage,
      pcchLanguage,
      pwszFileMUIPath,
      pcchFileMUIPath,
      pululEnumerator,
    );
  }

  _dart_GetFileMUIPath? _GetFileMUIPath;

  int GetUILanguageInfo(
    int dwFlags,
    ffi.Pointer<ffi.Uint16> pwmszLanguage,
    ffi.Pointer<ffi.Uint16> pwszFallbackLanguages,
    ffi.Pointer<ffi.Uint64> pcchFallbackLanguages,
    ffi.Pointer<ffi.Uint64> pAttributes,
  ) {
    return (_GetUILanguageInfo ??=
        _dylib.lookupFunction<_c_GetUILanguageInfo, _dart_GetUILanguageInfo>(
            'GetUILanguageInfo'))(
      dwFlags,
      pwmszLanguage,
      pwszFallbackLanguages,
      pcchFallbackLanguages,
      pAttributes,
    );
  }

  _dart_GetUILanguageInfo? _GetUILanguageInfo;

  int SetThreadPreferredUILanguages2(
    int flags,
    ffi.Pointer<ffi.Uint16> languages,
    ffi.Pointer<ffi.Uint64> numLanguagesSet,
    ffi.Pointer<ffi.Pointer<HSAVEDUILANGUAGES__>> snapshot,
  ) {
    return (_SetThreadPreferredUILanguages2 ??= _dylib.lookupFunction<
            _c_SetThreadPreferredUILanguages2,
            _dart_SetThreadPreferredUILanguages2>(
        'SetThreadPreferredUILanguages2'))(
      flags,
      languages,
      numLanguagesSet,
      snapshot,
    );
  }

  _dart_SetThreadPreferredUILanguages2? _SetThreadPreferredUILanguages2;

  void RestoreThreadPreferredUILanguages(
    ffi.Pointer<HSAVEDUILANGUAGES__> snapshot,
  ) {
    return (_RestoreThreadPreferredUILanguages ??= _dylib.lookupFunction<
            _c_RestoreThreadPreferredUILanguages,
            _dart_RestoreThreadPreferredUILanguages>(
        'RestoreThreadPreferredUILanguages'))(
      snapshot,
    );
  }

  _dart_RestoreThreadPreferredUILanguages? _RestoreThreadPreferredUILanguages;

  int NotifyUILanguageChange(
    int dwFlags,
    ffi.Pointer<ffi.Uint16> pcwstrNewLanguage,
    ffi.Pointer<ffi.Uint16> pcwstrPreviousLanguage,
    int dwReserved,
    ffi.Pointer<ffi.Uint64> pdwStatusRtrn,
  ) {
    return (_NotifyUILanguageChange ??= _dylib.lookupFunction<
        _c_NotifyUILanguageChange,
        _dart_NotifyUILanguageChange>('NotifyUILanguageChange'))(
      dwFlags,
      pcwstrNewLanguage,
      pcwstrPreviousLanguage,
      dwReserved,
      pdwStatusRtrn,
    );
  }

  _dart_NotifyUILanguageChange? _NotifyUILanguageChange;

  int GetStringTypeExA(
    int Locale,
    int dwInfoType,
    ffi.Pointer<ffi.Int8> lpSrcStr,
    int cchSrc,
    ffi.Pointer<ffi.Uint16> lpCharType,
  ) {
    return (_GetStringTypeExA ??=
        _dylib.lookupFunction<_c_GetStringTypeExA, _dart_GetStringTypeExA>(
            'GetStringTypeExA'))(
      Locale,
      dwInfoType,
      lpSrcStr,
      cchSrc,
      lpCharType,
    );
  }

  _dart_GetStringTypeExA? _GetStringTypeExA;

  int GetStringTypeA(
    int Locale,
    int dwInfoType,
    ffi.Pointer<ffi.Int8> lpSrcStr,
    int cchSrc,
    ffi.Pointer<ffi.Uint16> lpCharType,
  ) {
    return (_GetStringTypeA ??=
        _dylib.lookupFunction<_c_GetStringTypeA, _dart_GetStringTypeA>(
            'GetStringTypeA'))(
      Locale,
      dwInfoType,
      lpSrcStr,
      cchSrc,
      lpCharType,
    );
  }

  _dart_GetStringTypeA? _GetStringTypeA;

  int FoldStringA(
    int dwMapFlags,
    ffi.Pointer<ffi.Int8> lpSrcStr,
    int cchSrc,
    ffi.Pointer<ffi.Int8> lpDestStr,
    int cchDest,
  ) {
    return (_FoldStringA ??= _dylib
        .lookupFunction<_c_FoldStringA, _dart_FoldStringA>('FoldStringA'))(
      dwMapFlags,
      lpSrcStr,
      cchSrc,
      lpDestStr,
      cchDest,
    );
  }

  _dart_FoldStringA? _FoldStringA;

  int EnumSystemLocalesA(
    ffi.Pointer<ffi.NativeFunction<LOCALE_ENUMPROCA>> lpLocaleEnumProc,
    int dwFlags,
  ) {
    return (_EnumSystemLocalesA ??=
        _dylib.lookupFunction<_c_EnumSystemLocalesA, _dart_EnumSystemLocalesA>(
            'EnumSystemLocalesA'))(
      lpLocaleEnumProc,
      dwFlags,
    );
  }

  _dart_EnumSystemLocalesA? _EnumSystemLocalesA;

  int EnumSystemLocalesW(
    ffi.Pointer<ffi.NativeFunction<LOCALE_ENUMPROCW>> lpLocaleEnumProc,
    int dwFlags,
  ) {
    return (_EnumSystemLocalesW ??=
        _dylib.lookupFunction<_c_EnumSystemLocalesW, _dart_EnumSystemLocalesW>(
            'EnumSystemLocalesW'))(
      lpLocaleEnumProc,
      dwFlags,
    );
  }

  _dart_EnumSystemLocalesW? _EnumSystemLocalesW;

  int EnumSystemLanguageGroupsA(
    ffi.Pointer<ffi.NativeFunction<LANGUAGEGROUP_ENUMPROCA>>
        lpLanguageGroupEnumProc,
    int dwFlags,
    int lParam,
  ) {
    return (_EnumSystemLanguageGroupsA ??= _dylib.lookupFunction<
        _c_EnumSystemLanguageGroupsA,
        _dart_EnumSystemLanguageGroupsA>('EnumSystemLanguageGroupsA'))(
      lpLanguageGroupEnumProc,
      dwFlags,
      lParam,
    );
  }

  _dart_EnumSystemLanguageGroupsA? _EnumSystemLanguageGroupsA;

  int EnumSystemLanguageGroupsW(
    ffi.Pointer<ffi.NativeFunction<LANGUAGEGROUP_ENUMPROCW>>
        lpLanguageGroupEnumProc,
    int dwFlags,
    int lParam,
  ) {
    return (_EnumSystemLanguageGroupsW ??= _dylib.lookupFunction<
        _c_EnumSystemLanguageGroupsW,
        _dart_EnumSystemLanguageGroupsW>('EnumSystemLanguageGroupsW'))(
      lpLanguageGroupEnumProc,
      dwFlags,
      lParam,
    );
  }

  _dart_EnumSystemLanguageGroupsW? _EnumSystemLanguageGroupsW;

  int EnumLanguageGroupLocalesA(
    ffi.Pointer<ffi.NativeFunction<LANGGROUPLOCALE_ENUMPROCA>>
        lpLangGroupLocaleEnumProc,
    int LanguageGroup,
    int dwFlags,
    int lParam,
  ) {
    return (_EnumLanguageGroupLocalesA ??= _dylib.lookupFunction<
        _c_EnumLanguageGroupLocalesA,
        _dart_EnumLanguageGroupLocalesA>('EnumLanguageGroupLocalesA'))(
      lpLangGroupLocaleEnumProc,
      LanguageGroup,
      dwFlags,
      lParam,
    );
  }

  _dart_EnumLanguageGroupLocalesA? _EnumLanguageGroupLocalesA;

  int EnumLanguageGroupLocalesW(
    ffi.Pointer<ffi.NativeFunction<LANGGROUPLOCALE_ENUMPROCW>>
        lpLangGroupLocaleEnumProc,
    int LanguageGroup,
    int dwFlags,
    int lParam,
  ) {
    return (_EnumLanguageGroupLocalesW ??= _dylib.lookupFunction<
        _c_EnumLanguageGroupLocalesW,
        _dart_EnumLanguageGroupLocalesW>('EnumLanguageGroupLocalesW'))(
      lpLangGroupLocaleEnumProc,
      LanguageGroup,
      dwFlags,
      lParam,
    );
  }

  _dart_EnumLanguageGroupLocalesW? _EnumLanguageGroupLocalesW;

  int EnumUILanguagesA(
    ffi.Pointer<ffi.NativeFunction<UILANGUAGE_ENUMPROCA>> lpUILanguageEnumProc,
    int dwFlags,
    int lParam,
  ) {
    return (_EnumUILanguagesA ??=
        _dylib.lookupFunction<_c_EnumUILanguagesA, _dart_EnumUILanguagesA>(
            'EnumUILanguagesA'))(
      lpUILanguageEnumProc,
      dwFlags,
      lParam,
    );
  }

  _dart_EnumUILanguagesA? _EnumUILanguagesA;

  int EnumUILanguagesW(
    ffi.Pointer<ffi.NativeFunction<UILANGUAGE_ENUMPROCW>> lpUILanguageEnumProc,
    int dwFlags,
    int lParam,
  ) {
    return (_EnumUILanguagesW ??=
        _dylib.lookupFunction<_c_EnumUILanguagesW, _dart_EnumUILanguagesW>(
            'EnumUILanguagesW'))(
      lpUILanguageEnumProc,
      dwFlags,
      lParam,
    );
  }

  _dart_EnumUILanguagesW? _EnumUILanguagesW;

  int EnumSystemCodePagesA(
    ffi.Pointer<ffi.NativeFunction<CODEPAGE_ENUMPROCA>> lpCodePageEnumProc,
    int dwFlags,
  ) {
    return (_EnumSystemCodePagesA ??= _dylib.lookupFunction<
        _c_EnumSystemCodePagesA,
        _dart_EnumSystemCodePagesA>('EnumSystemCodePagesA'))(
      lpCodePageEnumProc,
      dwFlags,
    );
  }

  _dart_EnumSystemCodePagesA? _EnumSystemCodePagesA;

  int EnumSystemCodePagesW(
    ffi.Pointer<ffi.NativeFunction<CODEPAGE_ENUMPROCW>> lpCodePageEnumProc,
    int dwFlags,
  ) {
    return (_EnumSystemCodePagesW ??= _dylib.lookupFunction<
        _c_EnumSystemCodePagesW,
        _dart_EnumSystemCodePagesW>('EnumSystemCodePagesW'))(
      lpCodePageEnumProc,
      dwFlags,
    );
  }

  _dart_EnumSystemCodePagesW? _EnumSystemCodePagesW;

  int IdnToAscii(
    int dwFlags,
    ffi.Pointer<ffi.Uint16> lpUnicodeCharStr,
    int cchUnicodeChar,
    ffi.Pointer<ffi.Uint16> lpASCIICharStr,
    int cchASCIIChar,
  ) {
    return (_IdnToAscii ??=
        _dylib.lookupFunction<_c_IdnToAscii, _dart_IdnToAscii>('IdnToAscii'))(
      dwFlags,
      lpUnicodeCharStr,
      cchUnicodeChar,
      lpASCIICharStr,
      cchASCIIChar,
    );
  }

  _dart_IdnToAscii? _IdnToAscii;

  int IdnToUnicode(
    int dwFlags,
    ffi.Pointer<ffi.Uint16> lpASCIICharStr,
    int cchASCIIChar,
    ffi.Pointer<ffi.Uint16> lpUnicodeCharStr,
    int cchUnicodeChar,
  ) {
    return (_IdnToUnicode ??= _dylib
        .lookupFunction<_c_IdnToUnicode, _dart_IdnToUnicode>('IdnToUnicode'))(
      dwFlags,
      lpASCIICharStr,
      cchASCIIChar,
      lpUnicodeCharStr,
      cchUnicodeChar,
    );
  }

  _dart_IdnToUnicode? _IdnToUnicode;

  int IdnToNameprepUnicode(
    int dwFlags,
    ffi.Pointer<ffi.Uint16> lpUnicodeCharStr,
    int cchUnicodeChar,
    ffi.Pointer<ffi.Uint16> lpNameprepCharStr,
    int cchNameprepChar,
  ) {
    return (_IdnToNameprepUnicode ??= _dylib.lookupFunction<
        _c_IdnToNameprepUnicode,
        _dart_IdnToNameprepUnicode>('IdnToNameprepUnicode'))(
      dwFlags,
      lpUnicodeCharStr,
      cchUnicodeChar,
      lpNameprepCharStr,
      cchNameprepChar,
    );
  }

  _dart_IdnToNameprepUnicode? _IdnToNameprepUnicode;

  int NormalizeString(
    int NormForm,
    ffi.Pointer<ffi.Uint16> lpSrcString,
    int cwSrcLength,
    ffi.Pointer<ffi.Uint16> lpDstString,
    int cwDstLength,
  ) {
    return (_NormalizeString ??=
        _dylib.lookupFunction<_c_NormalizeString, _dart_NormalizeString>(
            'NormalizeString'))(
      NormForm,
      lpSrcString,
      cwSrcLength,
      lpDstString,
      cwDstLength,
    );
  }

  _dart_NormalizeString? _NormalizeString;

  int IsNormalizedString(
    int NormForm,
    ffi.Pointer<ffi.Uint16> lpString,
    int cwLength,
  ) {
    return (_IsNormalizedString ??=
        _dylib.lookupFunction<_c_IsNormalizedString, _dart_IsNormalizedString>(
            'IsNormalizedString'))(
      NormForm,
      lpString,
      cwLength,
    );
  }

  _dart_IsNormalizedString? _IsNormalizedString;

  int VerifyScripts(
    int dwFlags,
    ffi.Pointer<ffi.Uint16> lpLocaleScripts,
    int cchLocaleScripts,
    ffi.Pointer<ffi.Uint16> lpTestScripts,
    int cchTestScripts,
  ) {
    return (_VerifyScripts ??=
        _dylib.lookupFunction<_c_VerifyScripts, _dart_VerifyScripts>(
            'VerifyScripts'))(
      dwFlags,
      lpLocaleScripts,
      cchLocaleScripts,
      lpTestScripts,
      cchTestScripts,
    );
  }

  _dart_VerifyScripts? _VerifyScripts;

  int GetStringScripts(
    int dwFlags,
    ffi.Pointer<ffi.Uint16> lpString,
    int cchString,
    ffi.Pointer<ffi.Uint16> lpScripts,
    int cchScripts,
  ) {
    return (_GetStringScripts ??=
        _dylib.lookupFunction<_c_GetStringScripts, _dart_GetStringScripts>(
            'GetStringScripts'))(
      dwFlags,
      lpString,
      cchString,
      lpScripts,
      cchScripts,
    );
  }

  _dart_GetStringScripts? _GetStringScripts;

  int GetLocaleInfoEx(
    ffi.Pointer<ffi.Uint16> lpLocaleName,
    int LCType,
    ffi.Pointer<ffi.Uint16> lpLCData,
    int cchData,
  ) {
    return (_GetLocaleInfoEx ??=
        _dylib.lookupFunction<_c_GetLocaleInfoEx, _dart_GetLocaleInfoEx>(
            'GetLocaleInfoEx'))(
      lpLocaleName,
      LCType,
      lpLCData,
      cchData,
    );
  }

  _dart_GetLocaleInfoEx? _GetLocaleInfoEx;

  int GetCalendarInfoEx(
    ffi.Pointer<ffi.Uint16> lpLocaleName,
    int Calendar,
    ffi.Pointer<ffi.Uint16> lpReserved,
    int CalType,
    ffi.Pointer<ffi.Uint16> lpCalData,
    int cchData,
    ffi.Pointer<ffi.Uint64> lpValue,
  ) {
    return (_GetCalendarInfoEx ??=
        _dylib.lookupFunction<_c_GetCalendarInfoEx, _dart_GetCalendarInfoEx>(
            'GetCalendarInfoEx'))(
      lpLocaleName,
      Calendar,
      lpReserved,
      CalType,
      lpCalData,
      cchData,
      lpValue,
    );
  }

  _dart_GetCalendarInfoEx? _GetCalendarInfoEx;

  int GetNumberFormatEx(
    ffi.Pointer<ffi.Uint16> lpLocaleName,
    int dwFlags,
    ffi.Pointer<ffi.Uint16> lpValue,
    ffi.Pointer<LPNUMBERFMTW> lpFormat,
    ffi.Pointer<ffi.Uint16> lpNumberStr,
    int cchNumber,
  ) {
    return (_GetNumberFormatEx ??=
        _dylib.lookupFunction<_c_GetNumberFormatEx, _dart_GetNumberFormatEx>(
            'GetNumberFormatEx'))(
      lpLocaleName,
      dwFlags,
      lpValue,
      lpFormat,
      lpNumberStr,
      cchNumber,
    );
  }

  _dart_GetNumberFormatEx? _GetNumberFormatEx;

  int GetCurrencyFormatEx(
    ffi.Pointer<ffi.Uint16> lpLocaleName,
    int dwFlags,
    ffi.Pointer<ffi.Uint16> lpValue,
    ffi.Pointer<LPCURRENCYFMTW> lpFormat,
    ffi.Pointer<ffi.Uint16> lpCurrencyStr,
    int cchCurrency,
  ) {
    return (_GetCurrencyFormatEx ??= _dylib.lookupFunction<
        _c_GetCurrencyFormatEx,
        _dart_GetCurrencyFormatEx>('GetCurrencyFormatEx'))(
      lpLocaleName,
      dwFlags,
      lpValue,
      lpFormat,
      lpCurrencyStr,
      cchCurrency,
    );
  }

  _dart_GetCurrencyFormatEx? _GetCurrencyFormatEx;

  int GetUserDefaultLocaleName(
    ffi.Pointer<ffi.Uint16> lpLocaleName,
    int cchLocaleName,
  ) {
    return (_GetUserDefaultLocaleName ??= _dylib.lookupFunction<
        _c_GetUserDefaultLocaleName,
        _dart_GetUserDefaultLocaleName>('GetUserDefaultLocaleName'))(
      lpLocaleName,
      cchLocaleName,
    );
  }

  _dart_GetUserDefaultLocaleName? _GetUserDefaultLocaleName;

  int GetSystemDefaultLocaleName(
    ffi.Pointer<ffi.Uint16> lpLocaleName,
    int cchLocaleName,
  ) {
    return (_GetSystemDefaultLocaleName ??= _dylib.lookupFunction<
        _c_GetSystemDefaultLocaleName,
        _dart_GetSystemDefaultLocaleName>('GetSystemDefaultLocaleName'))(
      lpLocaleName,
      cchLocaleName,
    );
  }

  _dart_GetSystemDefaultLocaleName? _GetSystemDefaultLocaleName;

  int IsNLSDefinedString(
    int Function_1,
    int dwFlags,
    ffi.Pointer<LPNLSVERSIONINFO> lpVersionInformation,
    ffi.Pointer<ffi.Uint16> lpString,
    int cchStr,
  ) {
    return (_IsNLSDefinedString ??=
        _dylib.lookupFunction<_c_IsNLSDefinedString, _dart_IsNLSDefinedString>(
            'IsNLSDefinedString'))(
      Function_1,
      dwFlags,
      lpVersionInformation,
      lpString,
      cchStr,
    );
  }

  _dart_IsNLSDefinedString? _IsNLSDefinedString;

  int GetNLSVersionEx(
    int function,
    ffi.Pointer<ffi.Uint16> lpLocaleName,
    ffi.Pointer<LPNLSVERSIONINFOEX> lpVersionInformation,
  ) {
    return (_GetNLSVersionEx ??=
        _dylib.lookupFunction<_c_GetNLSVersionEx, _dart_GetNLSVersionEx>(
            'GetNLSVersionEx'))(
      function,
      lpLocaleName,
      lpVersionInformation,
    );
  }

  _dart_GetNLSVersionEx? _GetNLSVersionEx;

  int IsValidNLSVersion(
    int function,
    ffi.Pointer<ffi.Uint16> lpLocaleName,
    ffi.Pointer<LPNLSVERSIONINFOEX> lpVersionInformation,
  ) {
    return (_IsValidNLSVersion ??=
        _dylib.lookupFunction<_c_IsValidNLSVersion, _dart_IsValidNLSVersion>(
            'IsValidNLSVersion'))(
      function,
      lpLocaleName,
      lpVersionInformation,
    );
  }

  _dart_IsValidNLSVersion? _IsValidNLSVersion;

  int FindNLSStringEx(
    ffi.Pointer<ffi.Uint16> lpLocaleName,
    int dwFindNLSStringFlags,
    ffi.Pointer<ffi.Uint16> lpStringSource,
    int cchSource,
    ffi.Pointer<ffi.Uint16> lpStringValue,
    int cchValue,
    ffi.Pointer<ffi.Int32> pcchFound,
    ffi.Pointer<LPNLSVERSIONINFO> lpVersionInformation,
    ffi.Pointer<ffi.Void> lpReserved,
    int sortHandle,
  ) {
    return (_FindNLSStringEx ??=
        _dylib.lookupFunction<_c_FindNLSStringEx, _dart_FindNLSStringEx>(
            'FindNLSStringEx'))(
      lpLocaleName,
      dwFindNLSStringFlags,
      lpStringSource,
      cchSource,
      lpStringValue,
      cchValue,
      pcchFound,
      lpVersionInformation,
      lpReserved,
      sortHandle,
    );
  }

  _dart_FindNLSStringEx? _FindNLSStringEx;

  int LCMapStringEx(
    ffi.Pointer<ffi.Uint16> lpLocaleName,
    int dwMapFlags,
    ffi.Pointer<ffi.Uint16> lpSrcStr,
    int cchSrc,
    ffi.Pointer<ffi.Uint16> lpDestStr,
    int cchDest,
    ffi.Pointer<LPNLSVERSIONINFO> lpVersionInformation,
    ffi.Pointer<ffi.Void> lpReserved,
    int sortHandle,
  ) {
    return (_LCMapStringEx ??=
        _dylib.lookupFunction<_c_LCMapStringEx, _dart_LCMapStringEx>(
            'LCMapStringEx'))(
      lpLocaleName,
      dwMapFlags,
      lpSrcStr,
      cchSrc,
      lpDestStr,
      cchDest,
      lpVersionInformation,
      lpReserved,
      sortHandle,
    );
  }

  _dart_LCMapStringEx? _LCMapStringEx;

  int IsValidLocaleName(
    ffi.Pointer<ffi.Uint16> lpLocaleName,
  ) {
    return (_IsValidLocaleName ??=
        _dylib.lookupFunction<_c_IsValidLocaleName, _dart_IsValidLocaleName>(
            'IsValidLocaleName'))(
      lpLocaleName,
    );
  }

  _dart_IsValidLocaleName? _IsValidLocaleName;

  int EnumCalendarInfoExEx(
    ffi.Pointer<ffi.NativeFunction<CALINFO_ENUMPROCEXEX>> pCalInfoEnumProcExEx,
    ffi.Pointer<ffi.Uint16> lpLocaleName,
    int Calendar,
    ffi.Pointer<ffi.Uint16> lpReserved,
    int CalType,
    int lParam,
  ) {
    return (_EnumCalendarInfoExEx ??= _dylib.lookupFunction<
        _c_EnumCalendarInfoExEx,
        _dart_EnumCalendarInfoExEx>('EnumCalendarInfoExEx'))(
      pCalInfoEnumProcExEx,
      lpLocaleName,
      Calendar,
      lpReserved,
      CalType,
      lParam,
    );
  }

  _dart_EnumCalendarInfoExEx? _EnumCalendarInfoExEx;

  int EnumDateFormatsExEx(
    ffi.Pointer<ffi.NativeFunction<DATEFMT_ENUMPROCEXEX>> lpDateFmtEnumProcExEx,
    ffi.Pointer<ffi.Uint16> lpLocaleName,
    int dwFlags,
    int lParam,
  ) {
    return (_EnumDateFormatsExEx ??= _dylib.lookupFunction<
        _c_EnumDateFormatsExEx,
        _dart_EnumDateFormatsExEx>('EnumDateFormatsExEx'))(
      lpDateFmtEnumProcExEx,
      lpLocaleName,
      dwFlags,
      lParam,
    );
  }

  _dart_EnumDateFormatsExEx? _EnumDateFormatsExEx;

  int EnumTimeFormatsEx(
    ffi.Pointer<ffi.NativeFunction<TIMEFMT_ENUMPROCEX>> lpTimeFmtEnumProcEx,
    ffi.Pointer<ffi.Uint16> lpLocaleName,
    int dwFlags,
    int lParam,
  ) {
    return (_EnumTimeFormatsEx ??=
        _dylib.lookupFunction<_c_EnumTimeFormatsEx, _dart_EnumTimeFormatsEx>(
            'EnumTimeFormatsEx'))(
      lpTimeFmtEnumProcEx,
      lpLocaleName,
      dwFlags,
      lParam,
    );
  }

  _dart_EnumTimeFormatsEx? _EnumTimeFormatsEx;

  int EnumSystemLocalesEx(
    ffi.Pointer<ffi.NativeFunction<LOCALE_ENUMPROCEX>> lpLocaleEnumProcEx,
    int dwFlags,
    int lParam,
    ffi.Pointer<ffi.Void> lpReserved,
  ) {
    return (_EnumSystemLocalesEx ??= _dylib.lookupFunction<
        _c_EnumSystemLocalesEx,
        _dart_EnumSystemLocalesEx>('EnumSystemLocalesEx'))(
      lpLocaleEnumProcEx,
      dwFlags,
      lParam,
      lpReserved,
    );
  }

  _dart_EnumSystemLocalesEx? _EnumSystemLocalesEx;

  int ResolveLocaleName(
    ffi.Pointer<ffi.Uint16> lpNameToResolve,
    ffi.Pointer<ffi.Uint16> lpLocaleName,
    int cchLocaleName,
  ) {
    return (_ResolveLocaleName ??=
        _dylib.lookupFunction<_c_ResolveLocaleName, _dart_ResolveLocaleName>(
            'ResolveLocaleName'))(
      lpNameToResolve,
      lpLocaleName,
      cchLocaleName,
    );
  }

  _dart_ResolveLocaleName? _ResolveLocaleName;

  int AllocConsole() {
    return (_AllocConsole ??= _dylib
        .lookupFunction<_c_AllocConsole, _dart_AllocConsole>('AllocConsole'))();
  }

  _dart_AllocConsole? _AllocConsole;

  int FreeConsole() {
    return (_FreeConsole ??= _dylib
        .lookupFunction<_c_FreeConsole, _dart_FreeConsole>('FreeConsole'))();
  }

  _dart_FreeConsole? _FreeConsole;

  int AttachConsole(
    int dwProcessId,
  ) {
    return (_AttachConsole ??=
        _dylib.lookupFunction<_c_AttachConsole, _dart_AttachConsole>(
            'AttachConsole'))(
      dwProcessId,
    );
  }

  _dart_AttachConsole? _AttachConsole;

  int GetConsoleCP() {
    return (_GetConsoleCP ??= _dylib
        .lookupFunction<_c_GetConsoleCP, _dart_GetConsoleCP>('GetConsoleCP'))();
  }

  _dart_GetConsoleCP? _GetConsoleCP;

  int GetConsoleOutputCP() {
    return (_GetConsoleOutputCP ??=
        _dylib.lookupFunction<_c_GetConsoleOutputCP, _dart_GetConsoleOutputCP>(
            'GetConsoleOutputCP'))();
  }

  _dart_GetConsoleOutputCP? _GetConsoleOutputCP;

  int GetConsoleMode(
    ffi.Pointer<ffi.Void> hConsoleHandle,
    ffi.Pointer<ffi.Uint64> lpMode,
  ) {
    return (_GetConsoleMode ??=
        _dylib.lookupFunction<_c_GetConsoleMode, _dart_GetConsoleMode>(
            'GetConsoleMode'))(
      hConsoleHandle,
      lpMode,
    );
  }

  _dart_GetConsoleMode? _GetConsoleMode;

  int SetConsoleMode(
    ffi.Pointer<ffi.Void> hConsoleHandle,
    int dwMode,
  ) {
    return (_SetConsoleMode ??=
        _dylib.lookupFunction<_c_SetConsoleMode, _dart_SetConsoleMode>(
            'SetConsoleMode'))(
      hConsoleHandle,
      dwMode,
    );
  }

  _dart_SetConsoleMode? _SetConsoleMode;

  int GetNumberOfConsoleInputEvents(
    ffi.Pointer<ffi.Void> hConsoleInput,
    ffi.Pointer<ffi.Uint64> lpNumberOfEvents,
  ) {
    return (_GetNumberOfConsoleInputEvents ??= _dylib.lookupFunction<
        _c_GetNumberOfConsoleInputEvents,
        _dart_GetNumberOfConsoleInputEvents>('GetNumberOfConsoleInputEvents'))(
      hConsoleInput,
      lpNumberOfEvents,
    );
  }

  _dart_GetNumberOfConsoleInputEvents? _GetNumberOfConsoleInputEvents;

  int ReadConsoleInputA(
    ffi.Pointer<ffi.Void> hConsoleInput,
    ffi.Pointer<PINPUT_RECORD> lpBuffer,
    int nLength,
    ffi.Pointer<ffi.Uint64> lpNumberOfEventsRead,
  ) {
    return (_ReadConsoleInputA ??=
        _dylib.lookupFunction<_c_ReadConsoleInputA, _dart_ReadConsoleInputA>(
            'ReadConsoleInputA'))(
      hConsoleInput,
      lpBuffer,
      nLength,
      lpNumberOfEventsRead,
    );
  }

  _dart_ReadConsoleInputA? _ReadConsoleInputA;

  int ReadConsoleInputW(
    ffi.Pointer<ffi.Void> hConsoleInput,
    ffi.Pointer<PINPUT_RECORD> lpBuffer,
    int nLength,
    ffi.Pointer<ffi.Uint64> lpNumberOfEventsRead,
  ) {
    return (_ReadConsoleInputW ??=
        _dylib.lookupFunction<_c_ReadConsoleInputW, _dart_ReadConsoleInputW>(
            'ReadConsoleInputW'))(
      hConsoleInput,
      lpBuffer,
      nLength,
      lpNumberOfEventsRead,
    );
  }

  _dart_ReadConsoleInputW? _ReadConsoleInputW;

  int PeekConsoleInputA(
    ffi.Pointer<ffi.Void> hConsoleInput,
    ffi.Pointer<PINPUT_RECORD> lpBuffer,
    int nLength,
    ffi.Pointer<ffi.Uint64> lpNumberOfEventsRead,
  ) {
    return (_PeekConsoleInputA ??=
        _dylib.lookupFunction<_c_PeekConsoleInputA, _dart_PeekConsoleInputA>(
            'PeekConsoleInputA'))(
      hConsoleInput,
      lpBuffer,
      nLength,
      lpNumberOfEventsRead,
    );
  }

  _dart_PeekConsoleInputA? _PeekConsoleInputA;

  int PeekConsoleInputW(
    ffi.Pointer<ffi.Void> hConsoleInput,
    ffi.Pointer<PINPUT_RECORD> lpBuffer,
    int nLength,
    ffi.Pointer<ffi.Uint64> lpNumberOfEventsRead,
  ) {
    return (_PeekConsoleInputW ??=
        _dylib.lookupFunction<_c_PeekConsoleInputW, _dart_PeekConsoleInputW>(
            'PeekConsoleInputW'))(
      hConsoleInput,
      lpBuffer,
      nLength,
      lpNumberOfEventsRead,
    );
  }

  _dart_PeekConsoleInputW? _PeekConsoleInputW;

  int ReadConsoleA(
    ffi.Pointer<ffi.Void> hConsoleInput,
    ffi.Pointer<ffi.Void> lpBuffer,
    int nNumberOfCharsToRead,
    ffi.Pointer<ffi.Uint64> lpNumberOfCharsRead,
    ffi.Pointer<PCONSOLE_READCONSOLE_CONTROL> pInputControl,
  ) {
    return (_ReadConsoleA ??= _dylib
        .lookupFunction<_c_ReadConsoleA, _dart_ReadConsoleA>('ReadConsoleA'))(
      hConsoleInput,
      lpBuffer,
      nNumberOfCharsToRead,
      lpNumberOfCharsRead,
      pInputControl,
    );
  }

  _dart_ReadConsoleA? _ReadConsoleA;

  int ReadConsoleW(
    ffi.Pointer<ffi.Void> hConsoleInput,
    ffi.Pointer<ffi.Void> lpBuffer,
    int nNumberOfCharsToRead,
    ffi.Pointer<ffi.Uint64> lpNumberOfCharsRead,
    ffi.Pointer<PCONSOLE_READCONSOLE_CONTROL> pInputControl,
  ) {
    return (_ReadConsoleW ??= _dylib
        .lookupFunction<_c_ReadConsoleW, _dart_ReadConsoleW>('ReadConsoleW'))(
      hConsoleInput,
      lpBuffer,
      nNumberOfCharsToRead,
      lpNumberOfCharsRead,
      pInputControl,
    );
  }

  _dart_ReadConsoleW? _ReadConsoleW;

  int WriteConsoleA(
    ffi.Pointer<ffi.Void> hConsoleOutput,
    ffi.Pointer<ffi.Void> lpBuffer,
    int nNumberOfCharsToWrite,
    ffi.Pointer<ffi.Uint64> lpNumberOfCharsWritten,
    ffi.Pointer<ffi.Void> lpReserved,
  ) {
    return (_WriteConsoleA ??=
        _dylib.lookupFunction<_c_WriteConsoleA, _dart_WriteConsoleA>(
            'WriteConsoleA'))(
      hConsoleOutput,
      lpBuffer,
      nNumberOfCharsToWrite,
      lpNumberOfCharsWritten,
      lpReserved,
    );
  }

  _dart_WriteConsoleA? _WriteConsoleA;

  int WriteConsoleW(
    ffi.Pointer<ffi.Void> hConsoleOutput,
    ffi.Pointer<ffi.Void> lpBuffer,
    int nNumberOfCharsToWrite,
    ffi.Pointer<ffi.Uint64> lpNumberOfCharsWritten,
    ffi.Pointer<ffi.Void> lpReserved,
  ) {
    return (_WriteConsoleW ??=
        _dylib.lookupFunction<_c_WriteConsoleW, _dart_WriteConsoleW>(
            'WriteConsoleW'))(
      hConsoleOutput,
      lpBuffer,
      nNumberOfCharsToWrite,
      lpNumberOfCharsWritten,
      lpReserved,
    );
  }

  _dart_WriteConsoleW? _WriteConsoleW;

  int SetConsoleCtrlHandler(
    ffi.Pointer<ffi.NativeFunction<PHANDLER_ROUTINE>> HandlerRoutine,
    int Add,
  ) {
    return (_SetConsoleCtrlHandler ??= _dylib.lookupFunction<
        _c_SetConsoleCtrlHandler,
        _dart_SetConsoleCtrlHandler>('SetConsoleCtrlHandler'))(
      HandlerRoutine,
      Add,
    );
  }

  _dart_SetConsoleCtrlHandler? _SetConsoleCtrlHandler;

  void ClosePseudoConsole(
    ffi.Pointer<ffi.Void> hPC,
  ) {
    return (_ClosePseudoConsole ??=
        _dylib.lookupFunction<_c_ClosePseudoConsole, _dart_ClosePseudoConsole>(
            'ClosePseudoConsole'))(
      hPC,
    );
  }

  _dart_ClosePseudoConsole? _ClosePseudoConsole;

  int GenerateConsoleCtrlEvent(
    int dwCtrlEvent,
    int dwProcessGroupId,
  ) {
    return (_GenerateConsoleCtrlEvent ??= _dylib.lookupFunction<
        _c_GenerateConsoleCtrlEvent,
        _dart_GenerateConsoleCtrlEvent>('GenerateConsoleCtrlEvent'))(
      dwCtrlEvent,
      dwProcessGroupId,
    );
  }

  _dart_GenerateConsoleCtrlEvent? _GenerateConsoleCtrlEvent;

  ffi.Pointer<ffi.Void> CreateConsoleScreenBuffer(
    int dwDesiredAccess,
    int dwShareMode,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
    int dwFlags,
    ffi.Pointer<ffi.Void> lpScreenBufferData,
  ) {
    return (_CreateConsoleScreenBuffer ??= _dylib.lookupFunction<
        _c_CreateConsoleScreenBuffer,
        _dart_CreateConsoleScreenBuffer>('CreateConsoleScreenBuffer'))(
      dwDesiredAccess,
      dwShareMode,
      lpSecurityAttributes,
      dwFlags,
      lpScreenBufferData,
    );
  }

  _dart_CreateConsoleScreenBuffer? _CreateConsoleScreenBuffer;

  int SetConsoleActiveScreenBuffer(
    ffi.Pointer<ffi.Void> hConsoleOutput,
  ) {
    return (_SetConsoleActiveScreenBuffer ??= _dylib.lookupFunction<
        _c_SetConsoleActiveScreenBuffer,
        _dart_SetConsoleActiveScreenBuffer>('SetConsoleActiveScreenBuffer'))(
      hConsoleOutput,
    );
  }

  _dart_SetConsoleActiveScreenBuffer? _SetConsoleActiveScreenBuffer;

  int FlushConsoleInputBuffer(
    ffi.Pointer<ffi.Void> hConsoleInput,
  ) {
    return (_FlushConsoleInputBuffer ??= _dylib.lookupFunction<
        _c_FlushConsoleInputBuffer,
        _dart_FlushConsoleInputBuffer>('FlushConsoleInputBuffer'))(
      hConsoleInput,
    );
  }

  _dart_FlushConsoleInputBuffer? _FlushConsoleInputBuffer;

  int SetConsoleCP(
    int wCodePageID,
  ) {
    return (_SetConsoleCP ??= _dylib
        .lookupFunction<_c_SetConsoleCP, _dart_SetConsoleCP>('SetConsoleCP'))(
      wCodePageID,
    );
  }

  _dart_SetConsoleCP? _SetConsoleCP;

  int SetConsoleOutputCP(
    int wCodePageID,
  ) {
    return (_SetConsoleOutputCP ??=
        _dylib.lookupFunction<_c_SetConsoleOutputCP, _dart_SetConsoleOutputCP>(
            'SetConsoleOutputCP'))(
      wCodePageID,
    );
  }

  _dart_SetConsoleOutputCP? _SetConsoleOutputCP;

  int GetConsoleCursorInfo(
    ffi.Pointer<ffi.Void> hConsoleOutput,
    ffi.Pointer<PCONSOLE_CURSOR_INFO> lpConsoleCursorInfo,
  ) {
    return (_GetConsoleCursorInfo ??= _dylib.lookupFunction<
        _c_GetConsoleCursorInfo,
        _dart_GetConsoleCursorInfo>('GetConsoleCursorInfo'))(
      hConsoleOutput,
      lpConsoleCursorInfo,
    );
  }

  _dart_GetConsoleCursorInfo? _GetConsoleCursorInfo;

  int SetConsoleCursorInfo(
    ffi.Pointer<ffi.Void> hConsoleOutput,
    ffi.Pointer<PCONSOLE_CURSOR_INFO> lpConsoleCursorInfo,
  ) {
    return (_SetConsoleCursorInfo ??= _dylib.lookupFunction<
        _c_SetConsoleCursorInfo,
        _dart_SetConsoleCursorInfo>('SetConsoleCursorInfo'))(
      hConsoleOutput,
      lpConsoleCursorInfo,
    );
  }

  _dart_SetConsoleCursorInfo? _SetConsoleCursorInfo;

  int GetConsoleScreenBufferInfo(
    ffi.Pointer<ffi.Void> hConsoleOutput,
    ffi.Pointer<PCONSOLE_SCREEN_BUFFER_INFO> lpConsoleScreenBufferInfo,
  ) {
    return (_GetConsoleScreenBufferInfo ??= _dylib.lookupFunction<
        _c_GetConsoleScreenBufferInfo,
        _dart_GetConsoleScreenBufferInfo>('GetConsoleScreenBufferInfo'))(
      hConsoleOutput,
      lpConsoleScreenBufferInfo,
    );
  }

  _dart_GetConsoleScreenBufferInfo? _GetConsoleScreenBufferInfo;

  int GetConsoleScreenBufferInfoEx(
    ffi.Pointer<ffi.Void> hConsoleOutput,
    ffi.Pointer<PCONSOLE_SCREEN_BUFFER_INFOEX> lpConsoleScreenBufferInfoEx,
  ) {
    return (_GetConsoleScreenBufferInfoEx ??= _dylib.lookupFunction<
        _c_GetConsoleScreenBufferInfoEx,
        _dart_GetConsoleScreenBufferInfoEx>('GetConsoleScreenBufferInfoEx'))(
      hConsoleOutput,
      lpConsoleScreenBufferInfoEx,
    );
  }

  _dart_GetConsoleScreenBufferInfoEx? _GetConsoleScreenBufferInfoEx;

  int SetConsoleScreenBufferInfoEx(
    ffi.Pointer<ffi.Void> hConsoleOutput,
    ffi.Pointer<PCONSOLE_SCREEN_BUFFER_INFOEX> lpConsoleScreenBufferInfoEx,
  ) {
    return (_SetConsoleScreenBufferInfoEx ??= _dylib.lookupFunction<
        _c_SetConsoleScreenBufferInfoEx,
        _dart_SetConsoleScreenBufferInfoEx>('SetConsoleScreenBufferInfoEx'))(
      hConsoleOutput,
      lpConsoleScreenBufferInfoEx,
    );
  }

  _dart_SetConsoleScreenBufferInfoEx? _SetConsoleScreenBufferInfoEx;

  int SetConsoleTextAttribute(
    ffi.Pointer<ffi.Void> hConsoleOutput,
    int wAttributes,
  ) {
    return (_SetConsoleTextAttribute ??= _dylib.lookupFunction<
        _c_SetConsoleTextAttribute,
        _dart_SetConsoleTextAttribute>('SetConsoleTextAttribute'))(
      hConsoleOutput,
      wAttributes,
    );
  }

  _dart_SetConsoleTextAttribute? _SetConsoleTextAttribute;

  int SetConsoleWindowInfo(
    ffi.Pointer<ffi.Void> hConsoleOutput,
    int bAbsolute,
    ffi.Pointer<PSMALL_RECT> lpConsoleWindow,
  ) {
    return (_SetConsoleWindowInfo ??= _dylib.lookupFunction<
        _c_SetConsoleWindowInfo,
        _dart_SetConsoleWindowInfo>('SetConsoleWindowInfo'))(
      hConsoleOutput,
      bAbsolute,
      lpConsoleWindow,
    );
  }

  _dart_SetConsoleWindowInfo? _SetConsoleWindowInfo;

  int WriteConsoleInputA(
    ffi.Pointer<ffi.Void> hConsoleInput,
    ffi.Pointer<PINPUT_RECORD> lpBuffer,
    int nLength,
    ffi.Pointer<ffi.Uint64> lpNumberOfEventsWritten,
  ) {
    return (_WriteConsoleInputA ??=
        _dylib.lookupFunction<_c_WriteConsoleInputA, _dart_WriteConsoleInputA>(
            'WriteConsoleInputA'))(
      hConsoleInput,
      lpBuffer,
      nLength,
      lpNumberOfEventsWritten,
    );
  }

  _dart_WriteConsoleInputA? _WriteConsoleInputA;

  int WriteConsoleInputW(
    ffi.Pointer<ffi.Void> hConsoleInput,
    ffi.Pointer<PINPUT_RECORD> lpBuffer,
    int nLength,
    ffi.Pointer<ffi.Uint64> lpNumberOfEventsWritten,
  ) {
    return (_WriteConsoleInputW ??=
        _dylib.lookupFunction<_c_WriteConsoleInputW, _dart_WriteConsoleInputW>(
            'WriteConsoleInputW'))(
      hConsoleInput,
      lpBuffer,
      nLength,
      lpNumberOfEventsWritten,
    );
  }

  _dart_WriteConsoleInputW? _WriteConsoleInputW;

  int GetConsoleTitleA(
    ffi.Pointer<ffi.Int8> lpConsoleTitle,
    int nSize,
  ) {
    return (_GetConsoleTitleA ??=
        _dylib.lookupFunction<_c_GetConsoleTitleA, _dart_GetConsoleTitleA>(
            'GetConsoleTitleA'))(
      lpConsoleTitle,
      nSize,
    );
  }

  _dart_GetConsoleTitleA? _GetConsoleTitleA;

  int GetConsoleTitleW(
    ffi.Pointer<ffi.Uint16> lpConsoleTitle,
    int nSize,
  ) {
    return (_GetConsoleTitleW ??=
        _dylib.lookupFunction<_c_GetConsoleTitleW, _dart_GetConsoleTitleW>(
            'GetConsoleTitleW'))(
      lpConsoleTitle,
      nSize,
    );
  }

  _dart_GetConsoleTitleW? _GetConsoleTitleW;

  int GetConsoleOriginalTitleA(
    ffi.Pointer<ffi.Int8> lpConsoleTitle,
    int nSize,
  ) {
    return (_GetConsoleOriginalTitleA ??= _dylib.lookupFunction<
        _c_GetConsoleOriginalTitleA,
        _dart_GetConsoleOriginalTitleA>('GetConsoleOriginalTitleA'))(
      lpConsoleTitle,
      nSize,
    );
  }

  _dart_GetConsoleOriginalTitleA? _GetConsoleOriginalTitleA;

  int GetConsoleOriginalTitleW(
    ffi.Pointer<ffi.Uint16> lpConsoleTitle,
    int nSize,
  ) {
    return (_GetConsoleOriginalTitleW ??= _dylib.lookupFunction<
        _c_GetConsoleOriginalTitleW,
        _dart_GetConsoleOriginalTitleW>('GetConsoleOriginalTitleW'))(
      lpConsoleTitle,
      nSize,
    );
  }

  _dart_GetConsoleOriginalTitleW? _GetConsoleOriginalTitleW;

  int SetConsoleTitleA(
    ffi.Pointer<ffi.Int8> lpConsoleTitle,
  ) {
    return (_SetConsoleTitleA ??=
        _dylib.lookupFunction<_c_SetConsoleTitleA, _dart_SetConsoleTitleA>(
            'SetConsoleTitleA'))(
      lpConsoleTitle,
    );
  }

  _dart_SetConsoleTitleA? _SetConsoleTitleA;

  int SetConsoleTitleW(
    ffi.Pointer<ffi.Uint16> lpConsoleTitle,
  ) {
    return (_SetConsoleTitleW ??=
        _dylib.lookupFunction<_c_SetConsoleTitleW, _dart_SetConsoleTitleW>(
            'SetConsoleTitleW'))(
      lpConsoleTitle,
    );
  }

  _dart_SetConsoleTitleW? _SetConsoleTitleW;

  int GetNumberOfConsoleMouseButtons(
    ffi.Pointer<ffi.Uint64> lpNumberOfMouseButtons,
  ) {
    return (_GetNumberOfConsoleMouseButtons ??= _dylib.lookupFunction<
            _c_GetNumberOfConsoleMouseButtons,
            _dart_GetNumberOfConsoleMouseButtons>(
        'GetNumberOfConsoleMouseButtons'))(
      lpNumberOfMouseButtons,
    );
  }

  _dart_GetNumberOfConsoleMouseButtons? _GetNumberOfConsoleMouseButtons;

  int GetCurrentConsoleFont(
    ffi.Pointer<ffi.Void> hConsoleOutput,
    int bMaximumWindow,
    ffi.Pointer<PCONSOLE_FONT_INFO> lpConsoleCurrentFont,
  ) {
    return (_GetCurrentConsoleFont ??= _dylib.lookupFunction<
        _c_GetCurrentConsoleFont,
        _dart_GetCurrentConsoleFont>('GetCurrentConsoleFont'))(
      hConsoleOutput,
      bMaximumWindow,
      lpConsoleCurrentFont,
    );
  }

  _dart_GetCurrentConsoleFont? _GetCurrentConsoleFont;

  int GetCurrentConsoleFontEx(
    ffi.Pointer<ffi.Void> hConsoleOutput,
    int bMaximumWindow,
    ffi.Pointer<PCONSOLE_FONT_INFOEX> lpConsoleCurrentFontEx,
  ) {
    return (_GetCurrentConsoleFontEx ??= _dylib.lookupFunction<
        _c_GetCurrentConsoleFontEx,
        _dart_GetCurrentConsoleFontEx>('GetCurrentConsoleFontEx'))(
      hConsoleOutput,
      bMaximumWindow,
      lpConsoleCurrentFontEx,
    );
  }

  _dart_GetCurrentConsoleFontEx? _GetCurrentConsoleFontEx;

  int SetCurrentConsoleFontEx(
    ffi.Pointer<ffi.Void> hConsoleOutput,
    int bMaximumWindow,
    ffi.Pointer<PCONSOLE_FONT_INFOEX> lpConsoleCurrentFontEx,
  ) {
    return (_SetCurrentConsoleFontEx ??= _dylib.lookupFunction<
        _c_SetCurrentConsoleFontEx,
        _dart_SetCurrentConsoleFontEx>('SetCurrentConsoleFontEx'))(
      hConsoleOutput,
      bMaximumWindow,
      lpConsoleCurrentFontEx,
    );
  }

  _dart_SetCurrentConsoleFontEx? _SetCurrentConsoleFontEx;

  int GetConsoleSelectionInfo(
    ffi.Pointer<PCONSOLE_SELECTION_INFO> lpConsoleSelectionInfo,
  ) {
    return (_GetConsoleSelectionInfo ??= _dylib.lookupFunction<
        _c_GetConsoleSelectionInfo,
        _dart_GetConsoleSelectionInfo>('GetConsoleSelectionInfo'))(
      lpConsoleSelectionInfo,
    );
  }

  _dart_GetConsoleSelectionInfo? _GetConsoleSelectionInfo;

  int GetConsoleHistoryInfo(
    ffi.Pointer<PCONSOLE_HISTORY_INFO> lpConsoleHistoryInfo,
  ) {
    return (_GetConsoleHistoryInfo ??= _dylib.lookupFunction<
        _c_GetConsoleHistoryInfo,
        _dart_GetConsoleHistoryInfo>('GetConsoleHistoryInfo'))(
      lpConsoleHistoryInfo,
    );
  }

  _dart_GetConsoleHistoryInfo? _GetConsoleHistoryInfo;

  int SetConsoleHistoryInfo(
    ffi.Pointer<PCONSOLE_HISTORY_INFO> lpConsoleHistoryInfo,
  ) {
    return (_SetConsoleHistoryInfo ??= _dylib.lookupFunction<
        _c_SetConsoleHistoryInfo,
        _dart_SetConsoleHistoryInfo>('SetConsoleHistoryInfo'))(
      lpConsoleHistoryInfo,
    );
  }

  _dart_SetConsoleHistoryInfo? _SetConsoleHistoryInfo;

  int GetConsoleDisplayMode(
    ffi.Pointer<ffi.Uint64> lpModeFlags,
  ) {
    return (_GetConsoleDisplayMode ??= _dylib.lookupFunction<
        _c_GetConsoleDisplayMode,
        _dart_GetConsoleDisplayMode>('GetConsoleDisplayMode'))(
      lpModeFlags,
    );
  }

  _dart_GetConsoleDisplayMode? _GetConsoleDisplayMode;

  int SetConsoleDisplayMode(
    ffi.Pointer<ffi.Void> hConsoleOutput,
    int dwFlags,
    ffi.Pointer<PCOORD> lpNewScreenBufferDimensions,
  ) {
    return (_SetConsoleDisplayMode ??= _dylib.lookupFunction<
        _c_SetConsoleDisplayMode,
        _dart_SetConsoleDisplayMode>('SetConsoleDisplayMode'))(
      hConsoleOutput,
      dwFlags,
      lpNewScreenBufferDimensions,
    );
  }

  _dart_SetConsoleDisplayMode? _SetConsoleDisplayMode;

  ffi.Pointer<HWND__> GetConsoleWindow() {
    return (_GetConsoleWindow ??=
        _dylib.lookupFunction<_c_GetConsoleWindow, _dart_GetConsoleWindow>(
            'GetConsoleWindow'))();
  }

  _dart_GetConsoleWindow? _GetConsoleWindow;

  int AddConsoleAliasA(
    ffi.Pointer<ffi.Int8> Source,
    ffi.Pointer<ffi.Int8> Target,
    ffi.Pointer<ffi.Int8> ExeName,
  ) {
    return (_AddConsoleAliasA ??=
        _dylib.lookupFunction<_c_AddConsoleAliasA, _dart_AddConsoleAliasA>(
            'AddConsoleAliasA'))(
      Source,
      Target,
      ExeName,
    );
  }

  _dart_AddConsoleAliasA? _AddConsoleAliasA;

  int AddConsoleAliasW(
    ffi.Pointer<ffi.Uint16> Source,
    ffi.Pointer<ffi.Uint16> Target,
    ffi.Pointer<ffi.Uint16> ExeName,
  ) {
    return (_AddConsoleAliasW ??=
        _dylib.lookupFunction<_c_AddConsoleAliasW, _dart_AddConsoleAliasW>(
            'AddConsoleAliasW'))(
      Source,
      Target,
      ExeName,
    );
  }

  _dart_AddConsoleAliasW? _AddConsoleAliasW;

  int GetConsoleAliasA(
    ffi.Pointer<ffi.Int8> Source,
    ffi.Pointer<ffi.Int8> TargetBuffer,
    int TargetBufferLength,
    ffi.Pointer<ffi.Int8> ExeName,
  ) {
    return (_GetConsoleAliasA ??=
        _dylib.lookupFunction<_c_GetConsoleAliasA, _dart_GetConsoleAliasA>(
            'GetConsoleAliasA'))(
      Source,
      TargetBuffer,
      TargetBufferLength,
      ExeName,
    );
  }

  _dart_GetConsoleAliasA? _GetConsoleAliasA;

  int GetConsoleAliasW(
    ffi.Pointer<ffi.Uint16> Source,
    ffi.Pointer<ffi.Uint16> TargetBuffer,
    int TargetBufferLength,
    ffi.Pointer<ffi.Uint16> ExeName,
  ) {
    return (_GetConsoleAliasW ??=
        _dylib.lookupFunction<_c_GetConsoleAliasW, _dart_GetConsoleAliasW>(
            'GetConsoleAliasW'))(
      Source,
      TargetBuffer,
      TargetBufferLength,
      ExeName,
    );
  }

  _dart_GetConsoleAliasW? _GetConsoleAliasW;

  int GetConsoleAliasesLengthA(
    ffi.Pointer<ffi.Int8> ExeName,
  ) {
    return (_GetConsoleAliasesLengthA ??= _dylib.lookupFunction<
        _c_GetConsoleAliasesLengthA,
        _dart_GetConsoleAliasesLengthA>('GetConsoleAliasesLengthA'))(
      ExeName,
    );
  }

  _dart_GetConsoleAliasesLengthA? _GetConsoleAliasesLengthA;

  int GetConsoleAliasesLengthW(
    ffi.Pointer<ffi.Uint16> ExeName,
  ) {
    return (_GetConsoleAliasesLengthW ??= _dylib.lookupFunction<
        _c_GetConsoleAliasesLengthW,
        _dart_GetConsoleAliasesLengthW>('GetConsoleAliasesLengthW'))(
      ExeName,
    );
  }

  _dart_GetConsoleAliasesLengthW? _GetConsoleAliasesLengthW;

  int GetConsoleAliasExesLengthA() {
    return (_GetConsoleAliasExesLengthA ??= _dylib.lookupFunction<
        _c_GetConsoleAliasExesLengthA,
        _dart_GetConsoleAliasExesLengthA>('GetConsoleAliasExesLengthA'))();
  }

  _dart_GetConsoleAliasExesLengthA? _GetConsoleAliasExesLengthA;

  int GetConsoleAliasExesLengthW() {
    return (_GetConsoleAliasExesLengthW ??= _dylib.lookupFunction<
        _c_GetConsoleAliasExesLengthW,
        _dart_GetConsoleAliasExesLengthW>('GetConsoleAliasExesLengthW'))();
  }

  _dart_GetConsoleAliasExesLengthW? _GetConsoleAliasExesLengthW;

  int GetConsoleAliasesA(
    ffi.Pointer<ffi.Int8> AliasBuffer,
    int AliasBufferLength,
    ffi.Pointer<ffi.Int8> ExeName,
  ) {
    return (_GetConsoleAliasesA ??=
        _dylib.lookupFunction<_c_GetConsoleAliasesA, _dart_GetConsoleAliasesA>(
            'GetConsoleAliasesA'))(
      AliasBuffer,
      AliasBufferLength,
      ExeName,
    );
  }

  _dart_GetConsoleAliasesA? _GetConsoleAliasesA;

  int GetConsoleAliasesW(
    ffi.Pointer<ffi.Uint16> AliasBuffer,
    int AliasBufferLength,
    ffi.Pointer<ffi.Uint16> ExeName,
  ) {
    return (_GetConsoleAliasesW ??=
        _dylib.lookupFunction<_c_GetConsoleAliasesW, _dart_GetConsoleAliasesW>(
            'GetConsoleAliasesW'))(
      AliasBuffer,
      AliasBufferLength,
      ExeName,
    );
  }

  _dart_GetConsoleAliasesW? _GetConsoleAliasesW;

  int GetConsoleAliasExesA(
    ffi.Pointer<ffi.Int8> ExeNameBuffer,
    int ExeNameBufferLength,
  ) {
    return (_GetConsoleAliasExesA ??= _dylib.lookupFunction<
        _c_GetConsoleAliasExesA,
        _dart_GetConsoleAliasExesA>('GetConsoleAliasExesA'))(
      ExeNameBuffer,
      ExeNameBufferLength,
    );
  }

  _dart_GetConsoleAliasExesA? _GetConsoleAliasExesA;

  int GetConsoleAliasExesW(
    ffi.Pointer<ffi.Uint16> ExeNameBuffer,
    int ExeNameBufferLength,
  ) {
    return (_GetConsoleAliasExesW ??= _dylib.lookupFunction<
        _c_GetConsoleAliasExesW,
        _dart_GetConsoleAliasExesW>('GetConsoleAliasExesW'))(
      ExeNameBuffer,
      ExeNameBufferLength,
    );
  }

  _dart_GetConsoleAliasExesW? _GetConsoleAliasExesW;

  void ExpungeConsoleCommandHistoryA(
    ffi.Pointer<ffi.Int8> ExeName,
  ) {
    return (_ExpungeConsoleCommandHistoryA ??= _dylib.lookupFunction<
        _c_ExpungeConsoleCommandHistoryA,
        _dart_ExpungeConsoleCommandHistoryA>('ExpungeConsoleCommandHistoryA'))(
      ExeName,
    );
  }

  _dart_ExpungeConsoleCommandHistoryA? _ExpungeConsoleCommandHistoryA;

  void ExpungeConsoleCommandHistoryW(
    ffi.Pointer<ffi.Uint16> ExeName,
  ) {
    return (_ExpungeConsoleCommandHistoryW ??= _dylib.lookupFunction<
        _c_ExpungeConsoleCommandHistoryW,
        _dart_ExpungeConsoleCommandHistoryW>('ExpungeConsoleCommandHistoryW'))(
      ExeName,
    );
  }

  _dart_ExpungeConsoleCommandHistoryW? _ExpungeConsoleCommandHistoryW;

  int SetConsoleNumberOfCommandsA(
    int Number,
    ffi.Pointer<ffi.Int8> ExeName,
  ) {
    return (_SetConsoleNumberOfCommandsA ??= _dylib.lookupFunction<
        _c_SetConsoleNumberOfCommandsA,
        _dart_SetConsoleNumberOfCommandsA>('SetConsoleNumberOfCommandsA'))(
      Number,
      ExeName,
    );
  }

  _dart_SetConsoleNumberOfCommandsA? _SetConsoleNumberOfCommandsA;

  int SetConsoleNumberOfCommandsW(
    int Number,
    ffi.Pointer<ffi.Uint16> ExeName,
  ) {
    return (_SetConsoleNumberOfCommandsW ??= _dylib.lookupFunction<
        _c_SetConsoleNumberOfCommandsW,
        _dart_SetConsoleNumberOfCommandsW>('SetConsoleNumberOfCommandsW'))(
      Number,
      ExeName,
    );
  }

  _dart_SetConsoleNumberOfCommandsW? _SetConsoleNumberOfCommandsW;

  int GetConsoleCommandHistoryLengthA(
    ffi.Pointer<ffi.Int8> ExeName,
  ) {
    return (_GetConsoleCommandHistoryLengthA ??= _dylib.lookupFunction<
            _c_GetConsoleCommandHistoryLengthA,
            _dart_GetConsoleCommandHistoryLengthA>(
        'GetConsoleCommandHistoryLengthA'))(
      ExeName,
    );
  }

  _dart_GetConsoleCommandHistoryLengthA? _GetConsoleCommandHistoryLengthA;

  int GetConsoleCommandHistoryLengthW(
    ffi.Pointer<ffi.Uint16> ExeName,
  ) {
    return (_GetConsoleCommandHistoryLengthW ??= _dylib.lookupFunction<
            _c_GetConsoleCommandHistoryLengthW,
            _dart_GetConsoleCommandHistoryLengthW>(
        'GetConsoleCommandHistoryLengthW'))(
      ExeName,
    );
  }

  _dart_GetConsoleCommandHistoryLengthW? _GetConsoleCommandHistoryLengthW;

  int GetConsoleCommandHistoryA(
    ffi.Pointer<ffi.Int8> Commands,
    int CommandBufferLength,
    ffi.Pointer<ffi.Int8> ExeName,
  ) {
    return (_GetConsoleCommandHistoryA ??= _dylib.lookupFunction<
        _c_GetConsoleCommandHistoryA,
        _dart_GetConsoleCommandHistoryA>('GetConsoleCommandHistoryA'))(
      Commands,
      CommandBufferLength,
      ExeName,
    );
  }

  _dart_GetConsoleCommandHistoryA? _GetConsoleCommandHistoryA;

  int GetConsoleCommandHistoryW(
    ffi.Pointer<ffi.Uint16> Commands,
    int CommandBufferLength,
    ffi.Pointer<ffi.Uint16> ExeName,
  ) {
    return (_GetConsoleCommandHistoryW ??= _dylib.lookupFunction<
        _c_GetConsoleCommandHistoryW,
        _dart_GetConsoleCommandHistoryW>('GetConsoleCommandHistoryW'))(
      Commands,
      CommandBufferLength,
      ExeName,
    );
  }

  _dart_GetConsoleCommandHistoryW? _GetConsoleCommandHistoryW;

  int GetConsoleProcessList(
    ffi.Pointer<ffi.Uint64> lpdwProcessList,
    int dwProcessCount,
  ) {
    return (_GetConsoleProcessList ??= _dylib.lookupFunction<
        _c_GetConsoleProcessList,
        _dart_GetConsoleProcessList>('GetConsoleProcessList'))(
      lpdwProcessList,
      dwProcessCount,
    );
  }

  _dart_GetConsoleProcessList? _GetConsoleProcessList;

  int VerFindFileA(
    int uFlags,
    ffi.Pointer<ffi.Int8> szFileName,
    ffi.Pointer<ffi.Int8> szWinDir,
    ffi.Pointer<ffi.Int8> szAppDir,
    ffi.Pointer<ffi.Int8> szCurDir,
    ffi.Pointer<ffi.Uint32> puCurDirLen,
    ffi.Pointer<ffi.Int8> szDestDir,
    ffi.Pointer<ffi.Uint32> puDestDirLen,
  ) {
    return (_VerFindFileA ??= _dylib
        .lookupFunction<_c_VerFindFileA, _dart_VerFindFileA>('VerFindFileA'))(
      uFlags,
      szFileName,
      szWinDir,
      szAppDir,
      szCurDir,
      puCurDirLen,
      szDestDir,
      puDestDirLen,
    );
  }

  _dart_VerFindFileA? _VerFindFileA;

  int VerFindFileW(
    int uFlags,
    ffi.Pointer<ffi.Uint16> szFileName,
    ffi.Pointer<ffi.Uint16> szWinDir,
    ffi.Pointer<ffi.Uint16> szAppDir,
    ffi.Pointer<ffi.Uint16> szCurDir,
    ffi.Pointer<ffi.Uint32> puCurDirLen,
    ffi.Pointer<ffi.Uint16> szDestDir,
    ffi.Pointer<ffi.Uint32> puDestDirLen,
  ) {
    return (_VerFindFileW ??= _dylib
        .lookupFunction<_c_VerFindFileW, _dart_VerFindFileW>('VerFindFileW'))(
      uFlags,
      szFileName,
      szWinDir,
      szAppDir,
      szCurDir,
      puCurDirLen,
      szDestDir,
      puDestDirLen,
    );
  }

  _dart_VerFindFileW? _VerFindFileW;

  int VerInstallFileA(
    int uFlags,
    ffi.Pointer<ffi.Int8> szSrcFileName,
    ffi.Pointer<ffi.Int8> szDestFileName,
    ffi.Pointer<ffi.Int8> szSrcDir,
    ffi.Pointer<ffi.Int8> szDestDir,
    ffi.Pointer<ffi.Int8> szCurDir,
    ffi.Pointer<ffi.Int8> szTmpFile,
    ffi.Pointer<ffi.Uint32> puTmpFileLen,
  ) {
    return (_VerInstallFileA ??=
        _dylib.lookupFunction<_c_VerInstallFileA, _dart_VerInstallFileA>(
            'VerInstallFileA'))(
      uFlags,
      szSrcFileName,
      szDestFileName,
      szSrcDir,
      szDestDir,
      szCurDir,
      szTmpFile,
      puTmpFileLen,
    );
  }

  _dart_VerInstallFileA? _VerInstallFileA;

  int VerInstallFileW(
    int uFlags,
    ffi.Pointer<ffi.Uint16> szSrcFileName,
    ffi.Pointer<ffi.Uint16> szDestFileName,
    ffi.Pointer<ffi.Uint16> szSrcDir,
    ffi.Pointer<ffi.Uint16> szDestDir,
    ffi.Pointer<ffi.Uint16> szCurDir,
    ffi.Pointer<ffi.Uint16> szTmpFile,
    ffi.Pointer<ffi.Uint32> puTmpFileLen,
  ) {
    return (_VerInstallFileW ??=
        _dylib.lookupFunction<_c_VerInstallFileW, _dart_VerInstallFileW>(
            'VerInstallFileW'))(
      uFlags,
      szSrcFileName,
      szDestFileName,
      szSrcDir,
      szDestDir,
      szCurDir,
      szTmpFile,
      puTmpFileLen,
    );
  }

  _dart_VerInstallFileW? _VerInstallFileW;

  int GetFileVersionInfoSizeA(
    ffi.Pointer<ffi.Int8> lptstrFilename,
    ffi.Pointer<ffi.Uint64> lpdwHandle,
  ) {
    return (_GetFileVersionInfoSizeA ??= _dylib.lookupFunction<
        _c_GetFileVersionInfoSizeA,
        _dart_GetFileVersionInfoSizeA>('GetFileVersionInfoSizeA'))(
      lptstrFilename,
      lpdwHandle,
    );
  }

  _dart_GetFileVersionInfoSizeA? _GetFileVersionInfoSizeA;

  int GetFileVersionInfoSizeW(
    ffi.Pointer<ffi.Uint16> lptstrFilename,
    ffi.Pointer<ffi.Uint64> lpdwHandle,
  ) {
    return (_GetFileVersionInfoSizeW ??= _dylib.lookupFunction<
        _c_GetFileVersionInfoSizeW,
        _dart_GetFileVersionInfoSizeW>('GetFileVersionInfoSizeW'))(
      lptstrFilename,
      lpdwHandle,
    );
  }

  _dart_GetFileVersionInfoSizeW? _GetFileVersionInfoSizeW;

  int GetFileVersionInfoA(
    ffi.Pointer<ffi.Int8> lptstrFilename,
    int dwHandle,
    int dwLen,
    ffi.Pointer<ffi.Void> lpData,
  ) {
    return (_GetFileVersionInfoA ??= _dylib.lookupFunction<
        _c_GetFileVersionInfoA,
        _dart_GetFileVersionInfoA>('GetFileVersionInfoA'))(
      lptstrFilename,
      dwHandle,
      dwLen,
      lpData,
    );
  }

  _dart_GetFileVersionInfoA? _GetFileVersionInfoA;

  int GetFileVersionInfoW(
    ffi.Pointer<ffi.Uint16> lptstrFilename,
    int dwHandle,
    int dwLen,
    ffi.Pointer<ffi.Void> lpData,
  ) {
    return (_GetFileVersionInfoW ??= _dylib.lookupFunction<
        _c_GetFileVersionInfoW,
        _dart_GetFileVersionInfoW>('GetFileVersionInfoW'))(
      lptstrFilename,
      dwHandle,
      dwLen,
      lpData,
    );
  }

  _dart_GetFileVersionInfoW? _GetFileVersionInfoW;

  int GetFileVersionInfoSizeExA(
    int dwFlags,
    ffi.Pointer<ffi.Int8> lpwstrFilename,
    ffi.Pointer<ffi.Uint64> lpdwHandle,
  ) {
    return (_GetFileVersionInfoSizeExA ??= _dylib.lookupFunction<
        _c_GetFileVersionInfoSizeExA,
        _dart_GetFileVersionInfoSizeExA>('GetFileVersionInfoSizeExA'))(
      dwFlags,
      lpwstrFilename,
      lpdwHandle,
    );
  }

  _dart_GetFileVersionInfoSizeExA? _GetFileVersionInfoSizeExA;

  int GetFileVersionInfoSizeExW(
    int dwFlags,
    ffi.Pointer<ffi.Uint16> lpwstrFilename,
    ffi.Pointer<ffi.Uint64> lpdwHandle,
  ) {
    return (_GetFileVersionInfoSizeExW ??= _dylib.lookupFunction<
        _c_GetFileVersionInfoSizeExW,
        _dart_GetFileVersionInfoSizeExW>('GetFileVersionInfoSizeExW'))(
      dwFlags,
      lpwstrFilename,
      lpdwHandle,
    );
  }

  _dart_GetFileVersionInfoSizeExW? _GetFileVersionInfoSizeExW;

  int GetFileVersionInfoExA(
    int dwFlags,
    ffi.Pointer<ffi.Int8> lpwstrFilename,
    int dwHandle,
    int dwLen,
    ffi.Pointer<ffi.Void> lpData,
  ) {
    return (_GetFileVersionInfoExA ??= _dylib.lookupFunction<
        _c_GetFileVersionInfoExA,
        _dart_GetFileVersionInfoExA>('GetFileVersionInfoExA'))(
      dwFlags,
      lpwstrFilename,
      dwHandle,
      dwLen,
      lpData,
    );
  }

  _dart_GetFileVersionInfoExA? _GetFileVersionInfoExA;

  int GetFileVersionInfoExW(
    int dwFlags,
    ffi.Pointer<ffi.Uint16> lpwstrFilename,
    int dwHandle,
    int dwLen,
    ffi.Pointer<ffi.Void> lpData,
  ) {
    return (_GetFileVersionInfoExW ??= _dylib.lookupFunction<
        _c_GetFileVersionInfoExW,
        _dart_GetFileVersionInfoExW>('GetFileVersionInfoExW'))(
      dwFlags,
      lpwstrFilename,
      dwHandle,
      dwLen,
      lpData,
    );
  }

  _dart_GetFileVersionInfoExW? _GetFileVersionInfoExW;

  int VerLanguageNameA(
    int wLang,
    ffi.Pointer<ffi.Int8> szLang,
    int cchLang,
  ) {
    return (_VerLanguageNameA ??=
        _dylib.lookupFunction<_c_VerLanguageNameA, _dart_VerLanguageNameA>(
            'VerLanguageNameA'))(
      wLang,
      szLang,
      cchLang,
    );
  }

  _dart_VerLanguageNameA? _VerLanguageNameA;

  int VerLanguageNameW(
    int wLang,
    ffi.Pointer<ffi.Uint16> szLang,
    int cchLang,
  ) {
    return (_VerLanguageNameW ??=
        _dylib.lookupFunction<_c_VerLanguageNameW, _dart_VerLanguageNameW>(
            'VerLanguageNameW'))(
      wLang,
      szLang,
      cchLang,
    );
  }

  _dart_VerLanguageNameW? _VerLanguageNameW;

  int VerQueryValueA(
    ffi.Pointer<ffi.Void> pBlock,
    ffi.Pointer<ffi.Int8> lpSubBlock,
    ffi.Pointer<ffi.Pointer<ffi.Void>> lplpBuffer,
    ffi.Pointer<ffi.Uint32> puLen,
  ) {
    return (_VerQueryValueA ??=
        _dylib.lookupFunction<_c_VerQueryValueA, _dart_VerQueryValueA>(
            'VerQueryValueA'))(
      pBlock,
      lpSubBlock,
      lplpBuffer,
      puLen,
    );
  }

  _dart_VerQueryValueA? _VerQueryValueA;

  int VerQueryValueW(
    ffi.Pointer<ffi.Void> pBlock,
    ffi.Pointer<ffi.Uint16> lpSubBlock,
    ffi.Pointer<ffi.Pointer<ffi.Void>> lplpBuffer,
    ffi.Pointer<ffi.Uint32> puLen,
  ) {
    return (_VerQueryValueW ??=
        _dylib.lookupFunction<_c_VerQueryValueW, _dart_VerQueryValueW>(
            'VerQueryValueW'))(
      pBlock,
      lpSubBlock,
      lplpBuffer,
      puLen,
    );
  }

  _dart_VerQueryValueW? _VerQueryValueW;

  int RegCloseKey(
    ffi.Pointer<HKEY__> hKey,
  ) {
    return (_RegCloseKey ??= _dylib
        .lookupFunction<_c_RegCloseKey, _dart_RegCloseKey>('RegCloseKey'))(
      hKey,
    );
  }

  _dart_RegCloseKey? _RegCloseKey;

  int RegOverridePredefKey(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<HKEY__> hNewHKey,
  ) {
    return (_RegOverridePredefKey ??= _dylib.lookupFunction<
        _c_RegOverridePredefKey,
        _dart_RegOverridePredefKey>('RegOverridePredefKey'))(
      hKey,
      hNewHKey,
    );
  }

  _dart_RegOverridePredefKey? _RegOverridePredefKey;

  int RegOpenUserClassesRoot(
    ffi.Pointer<ffi.Void> hToken,
    int dwOptions,
    int samDesired,
    ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
  ) {
    return (_RegOpenUserClassesRoot ??= _dylib.lookupFunction<
        _c_RegOpenUserClassesRoot,
        _dart_RegOpenUserClassesRoot>('RegOpenUserClassesRoot'))(
      hToken,
      dwOptions,
      samDesired,
      phkResult,
    );
  }

  _dart_RegOpenUserClassesRoot? _RegOpenUserClassesRoot;

  int RegOpenCurrentUser(
    int samDesired,
    ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
  ) {
    return (_RegOpenCurrentUser ??=
        _dylib.lookupFunction<_c_RegOpenCurrentUser, _dart_RegOpenCurrentUser>(
            'RegOpenCurrentUser'))(
      samDesired,
      phkResult,
    );
  }

  _dart_RegOpenCurrentUser? _RegOpenCurrentUser;

  int RegDisablePredefinedCache() {
    return (_RegDisablePredefinedCache ??= _dylib.lookupFunction<
        _c_RegDisablePredefinedCache,
        _dart_RegDisablePredefinedCache>('RegDisablePredefinedCache'))();
  }

  _dart_RegDisablePredefinedCache? _RegDisablePredefinedCache;

  int RegDisablePredefinedCacheEx() {
    return (_RegDisablePredefinedCacheEx ??= _dylib.lookupFunction<
        _c_RegDisablePredefinedCacheEx,
        _dart_RegDisablePredefinedCacheEx>('RegDisablePredefinedCacheEx'))();
  }

  _dart_RegDisablePredefinedCacheEx? _RegDisablePredefinedCacheEx;

  int RegConnectRegistryA(
    ffi.Pointer<ffi.Int8> lpMachineName,
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
  ) {
    return (_RegConnectRegistryA ??= _dylib.lookupFunction<
        _c_RegConnectRegistryA,
        _dart_RegConnectRegistryA>('RegConnectRegistryA'))(
      lpMachineName,
      hKey,
      phkResult,
    );
  }

  _dart_RegConnectRegistryA? _RegConnectRegistryA;

  int RegConnectRegistryW(
    ffi.Pointer<ffi.Uint16> lpMachineName,
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
  ) {
    return (_RegConnectRegistryW ??= _dylib.lookupFunction<
        _c_RegConnectRegistryW,
        _dart_RegConnectRegistryW>('RegConnectRegistryW'))(
      lpMachineName,
      hKey,
      phkResult,
    );
  }

  _dart_RegConnectRegistryW? _RegConnectRegistryW;

  int RegConnectRegistryExA(
    ffi.Pointer<ffi.Int8> lpMachineName,
    ffi.Pointer<HKEY__> hKey,
    int Flags,
    ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
  ) {
    return (_RegConnectRegistryExA ??= _dylib.lookupFunction<
        _c_RegConnectRegistryExA,
        _dart_RegConnectRegistryExA>('RegConnectRegistryExA'))(
      lpMachineName,
      hKey,
      Flags,
      phkResult,
    );
  }

  _dart_RegConnectRegistryExA? _RegConnectRegistryExA;

  int RegConnectRegistryExW(
    ffi.Pointer<ffi.Uint16> lpMachineName,
    ffi.Pointer<HKEY__> hKey,
    int Flags,
    ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
  ) {
    return (_RegConnectRegistryExW ??= _dylib.lookupFunction<
        _c_RegConnectRegistryExW,
        _dart_RegConnectRegistryExW>('RegConnectRegistryExW'))(
      lpMachineName,
      hKey,
      Flags,
      phkResult,
    );
  }

  _dart_RegConnectRegistryExW? _RegConnectRegistryExW;

  int RegCreateKeyA(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Int8> lpSubKey,
    ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
  ) {
    return (_RegCreateKeyA ??=
        _dylib.lookupFunction<_c_RegCreateKeyA, _dart_RegCreateKeyA>(
            'RegCreateKeyA'))(
      hKey,
      lpSubKey,
      phkResult,
    );
  }

  _dart_RegCreateKeyA? _RegCreateKeyA;

  int RegCreateKeyW(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Uint16> lpSubKey,
    ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
  ) {
    return (_RegCreateKeyW ??=
        _dylib.lookupFunction<_c_RegCreateKeyW, _dart_RegCreateKeyW>(
            'RegCreateKeyW'))(
      hKey,
      lpSubKey,
      phkResult,
    );
  }

  _dart_RegCreateKeyW? _RegCreateKeyW;

  int RegCreateKeyExA(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Int8> lpSubKey,
    int Reserved,
    ffi.Pointer<ffi.Int8> lpClass,
    int dwOptions,
    int samDesired,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
    ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
    ffi.Pointer<ffi.Uint64> lpdwDisposition,
  ) {
    return (_RegCreateKeyExA ??=
        _dylib.lookupFunction<_c_RegCreateKeyExA, _dart_RegCreateKeyExA>(
            'RegCreateKeyExA'))(
      hKey,
      lpSubKey,
      Reserved,
      lpClass,
      dwOptions,
      samDesired,
      lpSecurityAttributes,
      phkResult,
      lpdwDisposition,
    );
  }

  _dart_RegCreateKeyExA? _RegCreateKeyExA;

  int RegCreateKeyExW(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Uint16> lpSubKey,
    int Reserved,
    ffi.Pointer<ffi.Uint16> lpClass,
    int dwOptions,
    int samDesired,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
    ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
    ffi.Pointer<ffi.Uint64> lpdwDisposition,
  ) {
    return (_RegCreateKeyExW ??=
        _dylib.lookupFunction<_c_RegCreateKeyExW, _dart_RegCreateKeyExW>(
            'RegCreateKeyExW'))(
      hKey,
      lpSubKey,
      Reserved,
      lpClass,
      dwOptions,
      samDesired,
      lpSecurityAttributes,
      phkResult,
      lpdwDisposition,
    );
  }

  _dart_RegCreateKeyExW? _RegCreateKeyExW;

  int RegCreateKeyTransactedA(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Int8> lpSubKey,
    int Reserved,
    ffi.Pointer<ffi.Int8> lpClass,
    int dwOptions,
    int samDesired,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
    ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
    ffi.Pointer<ffi.Uint64> lpdwDisposition,
    ffi.Pointer<ffi.Void> hTransaction,
    ffi.Pointer<ffi.Void> pExtendedParemeter,
  ) {
    return (_RegCreateKeyTransactedA ??= _dylib.lookupFunction<
        _c_RegCreateKeyTransactedA,
        _dart_RegCreateKeyTransactedA>('RegCreateKeyTransactedA'))(
      hKey,
      lpSubKey,
      Reserved,
      lpClass,
      dwOptions,
      samDesired,
      lpSecurityAttributes,
      phkResult,
      lpdwDisposition,
      hTransaction,
      pExtendedParemeter,
    );
  }

  _dart_RegCreateKeyTransactedA? _RegCreateKeyTransactedA;

  int RegCreateKeyTransactedW(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Uint16> lpSubKey,
    int Reserved,
    ffi.Pointer<ffi.Uint16> lpClass,
    int dwOptions,
    int samDesired,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
    ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
    ffi.Pointer<ffi.Uint64> lpdwDisposition,
    ffi.Pointer<ffi.Void> hTransaction,
    ffi.Pointer<ffi.Void> pExtendedParemeter,
  ) {
    return (_RegCreateKeyTransactedW ??= _dylib.lookupFunction<
        _c_RegCreateKeyTransactedW,
        _dart_RegCreateKeyTransactedW>('RegCreateKeyTransactedW'))(
      hKey,
      lpSubKey,
      Reserved,
      lpClass,
      dwOptions,
      samDesired,
      lpSecurityAttributes,
      phkResult,
      lpdwDisposition,
      hTransaction,
      pExtendedParemeter,
    );
  }

  _dart_RegCreateKeyTransactedW? _RegCreateKeyTransactedW;

  int RegDeleteKeyA(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Int8> lpSubKey,
  ) {
    return (_RegDeleteKeyA ??=
        _dylib.lookupFunction<_c_RegDeleteKeyA, _dart_RegDeleteKeyA>(
            'RegDeleteKeyA'))(
      hKey,
      lpSubKey,
    );
  }

  _dart_RegDeleteKeyA? _RegDeleteKeyA;

  int RegDeleteKeyW(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Uint16> lpSubKey,
  ) {
    return (_RegDeleteKeyW ??=
        _dylib.lookupFunction<_c_RegDeleteKeyW, _dart_RegDeleteKeyW>(
            'RegDeleteKeyW'))(
      hKey,
      lpSubKey,
    );
  }

  _dart_RegDeleteKeyW? _RegDeleteKeyW;

  int RegDeleteKeyExA(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Int8> lpSubKey,
    int samDesired,
    int Reserved,
  ) {
    return (_RegDeleteKeyExA ??=
        _dylib.lookupFunction<_c_RegDeleteKeyExA, _dart_RegDeleteKeyExA>(
            'RegDeleteKeyExA'))(
      hKey,
      lpSubKey,
      samDesired,
      Reserved,
    );
  }

  _dart_RegDeleteKeyExA? _RegDeleteKeyExA;

  int RegDeleteKeyExW(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Uint16> lpSubKey,
    int samDesired,
    int Reserved,
  ) {
    return (_RegDeleteKeyExW ??=
        _dylib.lookupFunction<_c_RegDeleteKeyExW, _dart_RegDeleteKeyExW>(
            'RegDeleteKeyExW'))(
      hKey,
      lpSubKey,
      samDesired,
      Reserved,
    );
  }

  _dart_RegDeleteKeyExW? _RegDeleteKeyExW;

  int RegDeleteKeyTransactedA(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Int8> lpSubKey,
    int samDesired,
    int Reserved,
    ffi.Pointer<ffi.Void> hTransaction,
    ffi.Pointer<ffi.Void> pExtendedParameter,
  ) {
    return (_RegDeleteKeyTransactedA ??= _dylib.lookupFunction<
        _c_RegDeleteKeyTransactedA,
        _dart_RegDeleteKeyTransactedA>('RegDeleteKeyTransactedA'))(
      hKey,
      lpSubKey,
      samDesired,
      Reserved,
      hTransaction,
      pExtendedParameter,
    );
  }

  _dart_RegDeleteKeyTransactedA? _RegDeleteKeyTransactedA;

  int RegDeleteKeyTransactedW(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Uint16> lpSubKey,
    int samDesired,
    int Reserved,
    ffi.Pointer<ffi.Void> hTransaction,
    ffi.Pointer<ffi.Void> pExtendedParameter,
  ) {
    return (_RegDeleteKeyTransactedW ??= _dylib.lookupFunction<
        _c_RegDeleteKeyTransactedW,
        _dart_RegDeleteKeyTransactedW>('RegDeleteKeyTransactedW'))(
      hKey,
      lpSubKey,
      samDesired,
      Reserved,
      hTransaction,
      pExtendedParameter,
    );
  }

  _dart_RegDeleteKeyTransactedW? _RegDeleteKeyTransactedW;

  int RegDisableReflectionKey(
    ffi.Pointer<HKEY__> hBase,
  ) {
    return (_RegDisableReflectionKey ??= _dylib.lookupFunction<
        _c_RegDisableReflectionKey,
        _dart_RegDisableReflectionKey>('RegDisableReflectionKey'))(
      hBase,
    );
  }

  _dart_RegDisableReflectionKey? _RegDisableReflectionKey;

  int RegEnableReflectionKey(
    ffi.Pointer<HKEY__> hBase,
  ) {
    return (_RegEnableReflectionKey ??= _dylib.lookupFunction<
        _c_RegEnableReflectionKey,
        _dart_RegEnableReflectionKey>('RegEnableReflectionKey'))(
      hBase,
    );
  }

  _dart_RegEnableReflectionKey? _RegEnableReflectionKey;

  int RegQueryReflectionKey(
    ffi.Pointer<HKEY__> hBase,
    ffi.Pointer<ffi.Int32> bIsReflectionDisabled,
  ) {
    return (_RegQueryReflectionKey ??= _dylib.lookupFunction<
        _c_RegQueryReflectionKey,
        _dart_RegQueryReflectionKey>('RegQueryReflectionKey'))(
      hBase,
      bIsReflectionDisabled,
    );
  }

  _dart_RegQueryReflectionKey? _RegQueryReflectionKey;

  int RegDeleteValueA(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Int8> lpValueName,
  ) {
    return (_RegDeleteValueA ??=
        _dylib.lookupFunction<_c_RegDeleteValueA, _dart_RegDeleteValueA>(
            'RegDeleteValueA'))(
      hKey,
      lpValueName,
    );
  }

  _dart_RegDeleteValueA? _RegDeleteValueA;

  int RegDeleteValueW(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Uint16> lpValueName,
  ) {
    return (_RegDeleteValueW ??=
        _dylib.lookupFunction<_c_RegDeleteValueW, _dart_RegDeleteValueW>(
            'RegDeleteValueW'))(
      hKey,
      lpValueName,
    );
  }

  _dart_RegDeleteValueW? _RegDeleteValueW;

  int RegEnumKeyA(
    ffi.Pointer<HKEY__> hKey,
    int dwIndex,
    ffi.Pointer<ffi.Int8> lpName,
    int cchName,
  ) {
    return (_RegEnumKeyA ??= _dylib
        .lookupFunction<_c_RegEnumKeyA, _dart_RegEnumKeyA>('RegEnumKeyA'))(
      hKey,
      dwIndex,
      lpName,
      cchName,
    );
  }

  _dart_RegEnumKeyA? _RegEnumKeyA;

  int RegEnumKeyW(
    ffi.Pointer<HKEY__> hKey,
    int dwIndex,
    ffi.Pointer<ffi.Uint16> lpName,
    int cchName,
  ) {
    return (_RegEnumKeyW ??= _dylib
        .lookupFunction<_c_RegEnumKeyW, _dart_RegEnumKeyW>('RegEnumKeyW'))(
      hKey,
      dwIndex,
      lpName,
      cchName,
    );
  }

  _dart_RegEnumKeyW? _RegEnumKeyW;

  int RegEnumKeyExA(
    ffi.Pointer<HKEY__> hKey,
    int dwIndex,
    ffi.Pointer<ffi.Int8> lpName,
    ffi.Pointer<ffi.Uint64> lpcchName,
    ffi.Pointer<ffi.Uint64> lpReserved,
    ffi.Pointer<ffi.Int8> lpClass,
    ffi.Pointer<ffi.Uint64> lpcchClass,
    ffi.Pointer<LPFILETIME> lpftLastWriteTime,
  ) {
    return (_RegEnumKeyExA ??=
        _dylib.lookupFunction<_c_RegEnumKeyExA, _dart_RegEnumKeyExA>(
            'RegEnumKeyExA'))(
      hKey,
      dwIndex,
      lpName,
      lpcchName,
      lpReserved,
      lpClass,
      lpcchClass,
      lpftLastWriteTime,
    );
  }

  _dart_RegEnumKeyExA? _RegEnumKeyExA;

  int RegEnumKeyExW(
    ffi.Pointer<HKEY__> hKey,
    int dwIndex,
    ffi.Pointer<ffi.Uint16> lpName,
    ffi.Pointer<ffi.Uint64> lpcchName,
    ffi.Pointer<ffi.Uint64> lpReserved,
    ffi.Pointer<ffi.Uint16> lpClass,
    ffi.Pointer<ffi.Uint64> lpcchClass,
    ffi.Pointer<LPFILETIME> lpftLastWriteTime,
  ) {
    return (_RegEnumKeyExW ??=
        _dylib.lookupFunction<_c_RegEnumKeyExW, _dart_RegEnumKeyExW>(
            'RegEnumKeyExW'))(
      hKey,
      dwIndex,
      lpName,
      lpcchName,
      lpReserved,
      lpClass,
      lpcchClass,
      lpftLastWriteTime,
    );
  }

  _dart_RegEnumKeyExW? _RegEnumKeyExW;

  int RegEnumValueA(
    ffi.Pointer<HKEY__> hKey,
    int dwIndex,
    ffi.Pointer<ffi.Int8> lpValueName,
    ffi.Pointer<ffi.Uint64> lpcchValueName,
    ffi.Pointer<ffi.Uint64> lpReserved,
    ffi.Pointer<ffi.Uint64> lpType,
    ffi.Pointer<ffi.Uint8> lpData,
    ffi.Pointer<ffi.Uint64> lpcbData,
  ) {
    return (_RegEnumValueA ??=
        _dylib.lookupFunction<_c_RegEnumValueA, _dart_RegEnumValueA>(
            'RegEnumValueA'))(
      hKey,
      dwIndex,
      lpValueName,
      lpcchValueName,
      lpReserved,
      lpType,
      lpData,
      lpcbData,
    );
  }

  _dart_RegEnumValueA? _RegEnumValueA;

  int RegEnumValueW(
    ffi.Pointer<HKEY__> hKey,
    int dwIndex,
    ffi.Pointer<ffi.Uint16> lpValueName,
    ffi.Pointer<ffi.Uint64> lpcchValueName,
    ffi.Pointer<ffi.Uint64> lpReserved,
    ffi.Pointer<ffi.Uint64> lpType,
    ffi.Pointer<ffi.Uint8> lpData,
    ffi.Pointer<ffi.Uint64> lpcbData,
  ) {
    return (_RegEnumValueW ??=
        _dylib.lookupFunction<_c_RegEnumValueW, _dart_RegEnumValueW>(
            'RegEnumValueW'))(
      hKey,
      dwIndex,
      lpValueName,
      lpcchValueName,
      lpReserved,
      lpType,
      lpData,
      lpcbData,
    );
  }

  _dart_RegEnumValueW? _RegEnumValueW;

  int RegFlushKey(
    ffi.Pointer<HKEY__> hKey,
  ) {
    return (_RegFlushKey ??= _dylib
        .lookupFunction<_c_RegFlushKey, _dart_RegFlushKey>('RegFlushKey'))(
      hKey,
    );
  }

  _dart_RegFlushKey? _RegFlushKey;

  int RegGetKeySecurity(
    ffi.Pointer<HKEY__> hKey,
    int SecurityInformation,
    ffi.Pointer<ffi.Void> pSecurityDescriptor,
    ffi.Pointer<ffi.Uint64> lpcbSecurityDescriptor,
  ) {
    return (_RegGetKeySecurity ??=
        _dylib.lookupFunction<_c_RegGetKeySecurity, _dart_RegGetKeySecurity>(
            'RegGetKeySecurity'))(
      hKey,
      SecurityInformation,
      pSecurityDescriptor,
      lpcbSecurityDescriptor,
    );
  }

  _dart_RegGetKeySecurity? _RegGetKeySecurity;

  int RegLoadKeyA(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Int8> lpSubKey,
    ffi.Pointer<ffi.Int8> lpFile,
  ) {
    return (_RegLoadKeyA ??= _dylib
        .lookupFunction<_c_RegLoadKeyA, _dart_RegLoadKeyA>('RegLoadKeyA'))(
      hKey,
      lpSubKey,
      lpFile,
    );
  }

  _dart_RegLoadKeyA? _RegLoadKeyA;

  int RegLoadKeyW(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Uint16> lpSubKey,
    ffi.Pointer<ffi.Uint16> lpFile,
  ) {
    return (_RegLoadKeyW ??= _dylib
        .lookupFunction<_c_RegLoadKeyW, _dart_RegLoadKeyW>('RegLoadKeyW'))(
      hKey,
      lpSubKey,
      lpFile,
    );
  }

  _dart_RegLoadKeyW? _RegLoadKeyW;

  int RegNotifyChangeKeyValue(
    ffi.Pointer<HKEY__> hKey,
    int bWatchSubtree,
    int dwNotifyFilter,
    ffi.Pointer<ffi.Void> hEvent,
    int fAsynchronous,
  ) {
    return (_RegNotifyChangeKeyValue ??= _dylib.lookupFunction<
        _c_RegNotifyChangeKeyValue,
        _dart_RegNotifyChangeKeyValue>('RegNotifyChangeKeyValue'))(
      hKey,
      bWatchSubtree,
      dwNotifyFilter,
      hEvent,
      fAsynchronous,
    );
  }

  _dart_RegNotifyChangeKeyValue? _RegNotifyChangeKeyValue;

  int RegOpenKeyA(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Int8> lpSubKey,
    ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
  ) {
    return (_RegOpenKeyA ??= _dylib
        .lookupFunction<_c_RegOpenKeyA, _dart_RegOpenKeyA>('RegOpenKeyA'))(
      hKey,
      lpSubKey,
      phkResult,
    );
  }

  _dart_RegOpenKeyA? _RegOpenKeyA;

  int RegOpenKeyW(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Uint16> lpSubKey,
    ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
  ) {
    return (_RegOpenKeyW ??= _dylib
        .lookupFunction<_c_RegOpenKeyW, _dart_RegOpenKeyW>('RegOpenKeyW'))(
      hKey,
      lpSubKey,
      phkResult,
    );
  }

  _dart_RegOpenKeyW? _RegOpenKeyW;

  int RegOpenKeyExA(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Int8> lpSubKey,
    int ulOptions,
    int samDesired,
    ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
  ) {
    return (_RegOpenKeyExA ??=
        _dylib.lookupFunction<_c_RegOpenKeyExA, _dart_RegOpenKeyExA>(
            'RegOpenKeyExA'))(
      hKey,
      lpSubKey,
      ulOptions,
      samDesired,
      phkResult,
    );
  }

  _dart_RegOpenKeyExA? _RegOpenKeyExA;

  int RegOpenKeyExW(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Uint16> lpSubKey,
    int ulOptions,
    int samDesired,
    ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
  ) {
    return (_RegOpenKeyExW ??=
        _dylib.lookupFunction<_c_RegOpenKeyExW, _dart_RegOpenKeyExW>(
            'RegOpenKeyExW'))(
      hKey,
      lpSubKey,
      ulOptions,
      samDesired,
      phkResult,
    );
  }

  _dart_RegOpenKeyExW? _RegOpenKeyExW;

  int RegOpenKeyTransactedA(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Int8> lpSubKey,
    int ulOptions,
    int samDesired,
    ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
    ffi.Pointer<ffi.Void> hTransaction,
    ffi.Pointer<ffi.Void> pExtendedParemeter,
  ) {
    return (_RegOpenKeyTransactedA ??= _dylib.lookupFunction<
        _c_RegOpenKeyTransactedA,
        _dart_RegOpenKeyTransactedA>('RegOpenKeyTransactedA'))(
      hKey,
      lpSubKey,
      ulOptions,
      samDesired,
      phkResult,
      hTransaction,
      pExtendedParemeter,
    );
  }

  _dart_RegOpenKeyTransactedA? _RegOpenKeyTransactedA;

  int RegOpenKeyTransactedW(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Uint16> lpSubKey,
    int ulOptions,
    int samDesired,
    ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
    ffi.Pointer<ffi.Void> hTransaction,
    ffi.Pointer<ffi.Void> pExtendedParemeter,
  ) {
    return (_RegOpenKeyTransactedW ??= _dylib.lookupFunction<
        _c_RegOpenKeyTransactedW,
        _dart_RegOpenKeyTransactedW>('RegOpenKeyTransactedW'))(
      hKey,
      lpSubKey,
      ulOptions,
      samDesired,
      phkResult,
      hTransaction,
      pExtendedParemeter,
    );
  }

  _dart_RegOpenKeyTransactedW? _RegOpenKeyTransactedW;

  int RegQueryInfoKeyA(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Int8> lpClass,
    ffi.Pointer<ffi.Uint64> lpcchClass,
    ffi.Pointer<ffi.Uint64> lpReserved,
    ffi.Pointer<ffi.Uint64> lpcSubKeys,
    ffi.Pointer<ffi.Uint64> lpcbMaxSubKeyLen,
    ffi.Pointer<ffi.Uint64> lpcbMaxClassLen,
    ffi.Pointer<ffi.Uint64> lpcValues,
    ffi.Pointer<ffi.Uint64> lpcbMaxValueNameLen,
    ffi.Pointer<ffi.Uint64> lpcbMaxValueLen,
    ffi.Pointer<ffi.Uint64> lpcbSecurityDescriptor,
    ffi.Pointer<LPFILETIME> lpftLastWriteTime,
  ) {
    return (_RegQueryInfoKeyA ??=
        _dylib.lookupFunction<_c_RegQueryInfoKeyA, _dart_RegQueryInfoKeyA>(
            'RegQueryInfoKeyA'))(
      hKey,
      lpClass,
      lpcchClass,
      lpReserved,
      lpcSubKeys,
      lpcbMaxSubKeyLen,
      lpcbMaxClassLen,
      lpcValues,
      lpcbMaxValueNameLen,
      lpcbMaxValueLen,
      lpcbSecurityDescriptor,
      lpftLastWriteTime,
    );
  }

  _dart_RegQueryInfoKeyA? _RegQueryInfoKeyA;

  int RegQueryInfoKeyW(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Uint16> lpClass,
    ffi.Pointer<ffi.Uint64> lpcchClass,
    ffi.Pointer<ffi.Uint64> lpReserved,
    ffi.Pointer<ffi.Uint64> lpcSubKeys,
    ffi.Pointer<ffi.Uint64> lpcbMaxSubKeyLen,
    ffi.Pointer<ffi.Uint64> lpcbMaxClassLen,
    ffi.Pointer<ffi.Uint64> lpcValues,
    ffi.Pointer<ffi.Uint64> lpcbMaxValueNameLen,
    ffi.Pointer<ffi.Uint64> lpcbMaxValueLen,
    ffi.Pointer<ffi.Uint64> lpcbSecurityDescriptor,
    ffi.Pointer<LPFILETIME> lpftLastWriteTime,
  ) {
    return (_RegQueryInfoKeyW ??=
        _dylib.lookupFunction<_c_RegQueryInfoKeyW, _dart_RegQueryInfoKeyW>(
            'RegQueryInfoKeyW'))(
      hKey,
      lpClass,
      lpcchClass,
      lpReserved,
      lpcSubKeys,
      lpcbMaxSubKeyLen,
      lpcbMaxClassLen,
      lpcValues,
      lpcbMaxValueNameLen,
      lpcbMaxValueLen,
      lpcbSecurityDescriptor,
      lpftLastWriteTime,
    );
  }

  _dart_RegQueryInfoKeyW? _RegQueryInfoKeyW;

  int RegQueryValueA(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Int8> lpSubKey,
    ffi.Pointer<ffi.Int8> lpData,
    ffi.Pointer<ffi.Int64> lpcbData,
  ) {
    return (_RegQueryValueA ??=
        _dylib.lookupFunction<_c_RegQueryValueA, _dart_RegQueryValueA>(
            'RegQueryValueA'))(
      hKey,
      lpSubKey,
      lpData,
      lpcbData,
    );
  }

  _dart_RegQueryValueA? _RegQueryValueA;

  int RegQueryValueW(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Uint16> lpSubKey,
    ffi.Pointer<ffi.Uint16> lpData,
    ffi.Pointer<ffi.Int64> lpcbData,
  ) {
    return (_RegQueryValueW ??=
        _dylib.lookupFunction<_c_RegQueryValueW, _dart_RegQueryValueW>(
            'RegQueryValueW'))(
      hKey,
      lpSubKey,
      lpData,
      lpcbData,
    );
  }

  _dart_RegQueryValueW? _RegQueryValueW;

  int RegQueryMultipleValuesA(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<PVALENTA> val_list,
    int num_vals,
    ffi.Pointer<ffi.Int8> lpValueBuf,
    ffi.Pointer<ffi.Uint64> ldwTotsize,
  ) {
    return (_RegQueryMultipleValuesA ??= _dylib.lookupFunction<
        _c_RegQueryMultipleValuesA,
        _dart_RegQueryMultipleValuesA>('RegQueryMultipleValuesA'))(
      hKey,
      val_list,
      num_vals,
      lpValueBuf,
      ldwTotsize,
    );
  }

  _dart_RegQueryMultipleValuesA? _RegQueryMultipleValuesA;

  int RegQueryMultipleValuesW(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<PVALENTW> val_list,
    int num_vals,
    ffi.Pointer<ffi.Uint16> lpValueBuf,
    ffi.Pointer<ffi.Uint64> ldwTotsize,
  ) {
    return (_RegQueryMultipleValuesW ??= _dylib.lookupFunction<
        _c_RegQueryMultipleValuesW,
        _dart_RegQueryMultipleValuesW>('RegQueryMultipleValuesW'))(
      hKey,
      val_list,
      num_vals,
      lpValueBuf,
      ldwTotsize,
    );
  }

  _dart_RegQueryMultipleValuesW? _RegQueryMultipleValuesW;

  int RegQueryValueExA(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Int8> lpValueName,
    ffi.Pointer<ffi.Uint64> lpReserved,
    ffi.Pointer<ffi.Uint64> lpType,
    ffi.Pointer<ffi.Uint8> lpData,
    ffi.Pointer<ffi.Uint64> lpcbData,
  ) {
    return (_RegQueryValueExA ??=
        _dylib.lookupFunction<_c_RegQueryValueExA, _dart_RegQueryValueExA>(
            'RegQueryValueExA'))(
      hKey,
      lpValueName,
      lpReserved,
      lpType,
      lpData,
      lpcbData,
    );
  }

  _dart_RegQueryValueExA? _RegQueryValueExA;

  int RegQueryValueExW(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Uint16> lpValueName,
    ffi.Pointer<ffi.Uint64> lpReserved,
    ffi.Pointer<ffi.Uint64> lpType,
    ffi.Pointer<ffi.Uint8> lpData,
    ffi.Pointer<ffi.Uint64> lpcbData,
  ) {
    return (_RegQueryValueExW ??=
        _dylib.lookupFunction<_c_RegQueryValueExW, _dart_RegQueryValueExW>(
            'RegQueryValueExW'))(
      hKey,
      lpValueName,
      lpReserved,
      lpType,
      lpData,
      lpcbData,
    );
  }

  _dart_RegQueryValueExW? _RegQueryValueExW;

  int RegReplaceKeyA(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Int8> lpSubKey,
    ffi.Pointer<ffi.Int8> lpNewFile,
    ffi.Pointer<ffi.Int8> lpOldFile,
  ) {
    return (_RegReplaceKeyA ??=
        _dylib.lookupFunction<_c_RegReplaceKeyA, _dart_RegReplaceKeyA>(
            'RegReplaceKeyA'))(
      hKey,
      lpSubKey,
      lpNewFile,
      lpOldFile,
    );
  }

  _dart_RegReplaceKeyA? _RegReplaceKeyA;

  int RegReplaceKeyW(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Uint16> lpSubKey,
    ffi.Pointer<ffi.Uint16> lpNewFile,
    ffi.Pointer<ffi.Uint16> lpOldFile,
  ) {
    return (_RegReplaceKeyW ??=
        _dylib.lookupFunction<_c_RegReplaceKeyW, _dart_RegReplaceKeyW>(
            'RegReplaceKeyW'))(
      hKey,
      lpSubKey,
      lpNewFile,
      lpOldFile,
    );
  }

  _dart_RegReplaceKeyW? _RegReplaceKeyW;

  int RegRestoreKeyA(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Int8> lpFile,
    int dwFlags,
  ) {
    return (_RegRestoreKeyA ??=
        _dylib.lookupFunction<_c_RegRestoreKeyA, _dart_RegRestoreKeyA>(
            'RegRestoreKeyA'))(
      hKey,
      lpFile,
      dwFlags,
    );
  }

  _dart_RegRestoreKeyA? _RegRestoreKeyA;

  int RegRestoreKeyW(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Uint16> lpFile,
    int dwFlags,
  ) {
    return (_RegRestoreKeyW ??=
        _dylib.lookupFunction<_c_RegRestoreKeyW, _dart_RegRestoreKeyW>(
            'RegRestoreKeyW'))(
      hKey,
      lpFile,
      dwFlags,
    );
  }

  _dart_RegRestoreKeyW? _RegRestoreKeyW;

  int RegRenameKey(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Uint16> lpSubKeyName,
    ffi.Pointer<ffi.Uint16> lpNewKeyName,
  ) {
    return (_RegRenameKey ??= _dylib
        .lookupFunction<_c_RegRenameKey, _dart_RegRenameKey>('RegRenameKey'))(
      hKey,
      lpSubKeyName,
      lpNewKeyName,
    );
  }

  _dart_RegRenameKey? _RegRenameKey;

  int RegSaveKeyA(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Int8> lpFile,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  ) {
    return (_RegSaveKeyA ??= _dylib
        .lookupFunction<_c_RegSaveKeyA, _dart_RegSaveKeyA>('RegSaveKeyA'))(
      hKey,
      lpFile,
      lpSecurityAttributes,
    );
  }

  _dart_RegSaveKeyA? _RegSaveKeyA;

  int RegSaveKeyW(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Uint16> lpFile,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  ) {
    return (_RegSaveKeyW ??= _dylib
        .lookupFunction<_c_RegSaveKeyW, _dart_RegSaveKeyW>('RegSaveKeyW'))(
      hKey,
      lpFile,
      lpSecurityAttributes,
    );
  }

  _dart_RegSaveKeyW? _RegSaveKeyW;

  int RegSetKeySecurity(
    ffi.Pointer<HKEY__> hKey,
    int SecurityInformation,
    ffi.Pointer<ffi.Void> pSecurityDescriptor,
  ) {
    return (_RegSetKeySecurity ??=
        _dylib.lookupFunction<_c_RegSetKeySecurity, _dart_RegSetKeySecurity>(
            'RegSetKeySecurity'))(
      hKey,
      SecurityInformation,
      pSecurityDescriptor,
    );
  }

  _dart_RegSetKeySecurity? _RegSetKeySecurity;

  int RegSetValueA(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Int8> lpSubKey,
    int dwType,
    ffi.Pointer<ffi.Int8> lpData,
    int cbData,
  ) {
    return (_RegSetValueA ??= _dylib
        .lookupFunction<_c_RegSetValueA, _dart_RegSetValueA>('RegSetValueA'))(
      hKey,
      lpSubKey,
      dwType,
      lpData,
      cbData,
    );
  }

  _dart_RegSetValueA? _RegSetValueA;

  int RegSetValueW(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Uint16> lpSubKey,
    int dwType,
    ffi.Pointer<ffi.Uint16> lpData,
    int cbData,
  ) {
    return (_RegSetValueW ??= _dylib
        .lookupFunction<_c_RegSetValueW, _dart_RegSetValueW>('RegSetValueW'))(
      hKey,
      lpSubKey,
      dwType,
      lpData,
      cbData,
    );
  }

  _dart_RegSetValueW? _RegSetValueW;

  int RegSetValueExA(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Int8> lpValueName,
    int Reserved,
    int dwType,
    ffi.Pointer<ffi.Uint8> lpData,
    int cbData,
  ) {
    return (_RegSetValueExA ??=
        _dylib.lookupFunction<_c_RegSetValueExA, _dart_RegSetValueExA>(
            'RegSetValueExA'))(
      hKey,
      lpValueName,
      Reserved,
      dwType,
      lpData,
      cbData,
    );
  }

  _dart_RegSetValueExA? _RegSetValueExA;

  int RegSetValueExW(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Uint16> lpValueName,
    int Reserved,
    int dwType,
    ffi.Pointer<ffi.Uint8> lpData,
    int cbData,
  ) {
    return (_RegSetValueExW ??=
        _dylib.lookupFunction<_c_RegSetValueExW, _dart_RegSetValueExW>(
            'RegSetValueExW'))(
      hKey,
      lpValueName,
      Reserved,
      dwType,
      lpData,
      cbData,
    );
  }

  _dart_RegSetValueExW? _RegSetValueExW;

  int RegUnLoadKeyA(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Int8> lpSubKey,
  ) {
    return (_RegUnLoadKeyA ??=
        _dylib.lookupFunction<_c_RegUnLoadKeyA, _dart_RegUnLoadKeyA>(
            'RegUnLoadKeyA'))(
      hKey,
      lpSubKey,
    );
  }

  _dart_RegUnLoadKeyA? _RegUnLoadKeyA;

  int RegUnLoadKeyW(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Uint16> lpSubKey,
  ) {
    return (_RegUnLoadKeyW ??=
        _dylib.lookupFunction<_c_RegUnLoadKeyW, _dart_RegUnLoadKeyW>(
            'RegUnLoadKeyW'))(
      hKey,
      lpSubKey,
    );
  }

  _dart_RegUnLoadKeyW? _RegUnLoadKeyW;

  int RegDeleteKeyValueA(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Int8> lpSubKey,
    ffi.Pointer<ffi.Int8> lpValueName,
  ) {
    return (_RegDeleteKeyValueA ??=
        _dylib.lookupFunction<_c_RegDeleteKeyValueA, _dart_RegDeleteKeyValueA>(
            'RegDeleteKeyValueA'))(
      hKey,
      lpSubKey,
      lpValueName,
    );
  }

  _dart_RegDeleteKeyValueA? _RegDeleteKeyValueA;

  int RegDeleteKeyValueW(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Uint16> lpSubKey,
    ffi.Pointer<ffi.Uint16> lpValueName,
  ) {
    return (_RegDeleteKeyValueW ??=
        _dylib.lookupFunction<_c_RegDeleteKeyValueW, _dart_RegDeleteKeyValueW>(
            'RegDeleteKeyValueW'))(
      hKey,
      lpSubKey,
      lpValueName,
    );
  }

  _dart_RegDeleteKeyValueW? _RegDeleteKeyValueW;

  int RegSetKeyValueA(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Int8> lpSubKey,
    ffi.Pointer<ffi.Int8> lpValueName,
    int dwType,
    ffi.Pointer<ffi.Void> lpData,
    int cbData,
  ) {
    return (_RegSetKeyValueA ??=
        _dylib.lookupFunction<_c_RegSetKeyValueA, _dart_RegSetKeyValueA>(
            'RegSetKeyValueA'))(
      hKey,
      lpSubKey,
      lpValueName,
      dwType,
      lpData,
      cbData,
    );
  }

  _dart_RegSetKeyValueA? _RegSetKeyValueA;

  int RegSetKeyValueW(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Uint16> lpSubKey,
    ffi.Pointer<ffi.Uint16> lpValueName,
    int dwType,
    ffi.Pointer<ffi.Void> lpData,
    int cbData,
  ) {
    return (_RegSetKeyValueW ??=
        _dylib.lookupFunction<_c_RegSetKeyValueW, _dart_RegSetKeyValueW>(
            'RegSetKeyValueW'))(
      hKey,
      lpSubKey,
      lpValueName,
      dwType,
      lpData,
      cbData,
    );
  }

  _dart_RegSetKeyValueW? _RegSetKeyValueW;

  int RegDeleteTreeA(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Int8> lpSubKey,
  ) {
    return (_RegDeleteTreeA ??=
        _dylib.lookupFunction<_c_RegDeleteTreeA, _dart_RegDeleteTreeA>(
            'RegDeleteTreeA'))(
      hKey,
      lpSubKey,
    );
  }

  _dart_RegDeleteTreeA? _RegDeleteTreeA;

  int RegDeleteTreeW(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Uint16> lpSubKey,
  ) {
    return (_RegDeleteTreeW ??=
        _dylib.lookupFunction<_c_RegDeleteTreeW, _dart_RegDeleteTreeW>(
            'RegDeleteTreeW'))(
      hKey,
      lpSubKey,
    );
  }

  _dart_RegDeleteTreeW? _RegDeleteTreeW;

  int RegCopyTreeA(
    ffi.Pointer<HKEY__> hKeySrc,
    ffi.Pointer<ffi.Int8> lpSubKey,
    ffi.Pointer<HKEY__> hKeyDest,
  ) {
    return (_RegCopyTreeA ??= _dylib
        .lookupFunction<_c_RegCopyTreeA, _dart_RegCopyTreeA>('RegCopyTreeA'))(
      hKeySrc,
      lpSubKey,
      hKeyDest,
    );
  }

  _dart_RegCopyTreeA? _RegCopyTreeA;

  int RegGetValueA(
    ffi.Pointer<HKEY__> hkey,
    ffi.Pointer<ffi.Int8> lpSubKey,
    ffi.Pointer<ffi.Int8> lpValue,
    int dwFlags,
    ffi.Pointer<ffi.Uint64> pdwType,
    ffi.Pointer<ffi.Void> pvData,
    ffi.Pointer<ffi.Uint64> pcbData,
  ) {
    return (_RegGetValueA ??= _dylib
        .lookupFunction<_c_RegGetValueA, _dart_RegGetValueA>('RegGetValueA'))(
      hkey,
      lpSubKey,
      lpValue,
      dwFlags,
      pdwType,
      pvData,
      pcbData,
    );
  }

  _dart_RegGetValueA? _RegGetValueA;

  int RegGetValueW(
    ffi.Pointer<HKEY__> hkey,
    ffi.Pointer<ffi.Uint16> lpSubKey,
    ffi.Pointer<ffi.Uint16> lpValue,
    int dwFlags,
    ffi.Pointer<ffi.Uint64> pdwType,
    ffi.Pointer<ffi.Void> pvData,
    ffi.Pointer<ffi.Uint64> pcbData,
  ) {
    return (_RegGetValueW ??= _dylib
        .lookupFunction<_c_RegGetValueW, _dart_RegGetValueW>('RegGetValueW'))(
      hkey,
      lpSubKey,
      lpValue,
      dwFlags,
      pdwType,
      pvData,
      pcbData,
    );
  }

  _dart_RegGetValueW? _RegGetValueW;

  int RegCopyTreeW(
    ffi.Pointer<HKEY__> hKeySrc,
    ffi.Pointer<ffi.Uint16> lpSubKey,
    ffi.Pointer<HKEY__> hKeyDest,
  ) {
    return (_RegCopyTreeW ??= _dylib
        .lookupFunction<_c_RegCopyTreeW, _dart_RegCopyTreeW>('RegCopyTreeW'))(
      hKeySrc,
      lpSubKey,
      hKeyDest,
    );
  }

  _dart_RegCopyTreeW? _RegCopyTreeW;

  int RegLoadMUIStringA(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Int8> pszValue,
    ffi.Pointer<ffi.Int8> pszOutBuf,
    int cbOutBuf,
    ffi.Pointer<ffi.Uint64> pcbData,
    int Flags,
    ffi.Pointer<ffi.Int8> pszDirectory,
  ) {
    return (_RegLoadMUIStringA ??=
        _dylib.lookupFunction<_c_RegLoadMUIStringA, _dart_RegLoadMUIStringA>(
            'RegLoadMUIStringA'))(
      hKey,
      pszValue,
      pszOutBuf,
      cbOutBuf,
      pcbData,
      Flags,
      pszDirectory,
    );
  }

  _dart_RegLoadMUIStringA? _RegLoadMUIStringA;

  int RegLoadMUIStringW(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Uint16> pszValue,
    ffi.Pointer<ffi.Uint16> pszOutBuf,
    int cbOutBuf,
    ffi.Pointer<ffi.Uint64> pcbData,
    int Flags,
    ffi.Pointer<ffi.Uint16> pszDirectory,
  ) {
    return (_RegLoadMUIStringW ??=
        _dylib.lookupFunction<_c_RegLoadMUIStringW, _dart_RegLoadMUIStringW>(
            'RegLoadMUIStringW'))(
      hKey,
      pszValue,
      pszOutBuf,
      cbOutBuf,
      pcbData,
      Flags,
      pszDirectory,
    );
  }

  _dart_RegLoadMUIStringW? _RegLoadMUIStringW;

  int RegLoadAppKeyA(
    ffi.Pointer<ffi.Int8> lpFile,
    ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
    int samDesired,
    int dwOptions,
    int Reserved,
  ) {
    return (_RegLoadAppKeyA ??=
        _dylib.lookupFunction<_c_RegLoadAppKeyA, _dart_RegLoadAppKeyA>(
            'RegLoadAppKeyA'))(
      lpFile,
      phkResult,
      samDesired,
      dwOptions,
      Reserved,
    );
  }

  _dart_RegLoadAppKeyA? _RegLoadAppKeyA;

  int RegLoadAppKeyW(
    ffi.Pointer<ffi.Uint16> lpFile,
    ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
    int samDesired,
    int dwOptions,
    int Reserved,
  ) {
    return (_RegLoadAppKeyW ??=
        _dylib.lookupFunction<_c_RegLoadAppKeyW, _dart_RegLoadAppKeyW>(
            'RegLoadAppKeyW'))(
      lpFile,
      phkResult,
      samDesired,
      dwOptions,
      Reserved,
    );
  }

  _dart_RegLoadAppKeyW? _RegLoadAppKeyW;

  int InitiateSystemShutdownA(
    ffi.Pointer<ffi.Int8> lpMachineName,
    ffi.Pointer<ffi.Int8> lpMessage,
    int dwTimeout,
    int bForceAppsClosed,
    int bRebootAfterShutdown,
  ) {
    return (_InitiateSystemShutdownA ??= _dylib.lookupFunction<
        _c_InitiateSystemShutdownA,
        _dart_InitiateSystemShutdownA>('InitiateSystemShutdownA'))(
      lpMachineName,
      lpMessage,
      dwTimeout,
      bForceAppsClosed,
      bRebootAfterShutdown,
    );
  }

  _dart_InitiateSystemShutdownA? _InitiateSystemShutdownA;

  int InitiateSystemShutdownW(
    ffi.Pointer<ffi.Uint16> lpMachineName,
    ffi.Pointer<ffi.Uint16> lpMessage,
    int dwTimeout,
    int bForceAppsClosed,
    int bRebootAfterShutdown,
  ) {
    return (_InitiateSystemShutdownW ??= _dylib.lookupFunction<
        _c_InitiateSystemShutdownW,
        _dart_InitiateSystemShutdownW>('InitiateSystemShutdownW'))(
      lpMachineName,
      lpMessage,
      dwTimeout,
      bForceAppsClosed,
      bRebootAfterShutdown,
    );
  }

  _dart_InitiateSystemShutdownW? _InitiateSystemShutdownW;

  int AbortSystemShutdownA(
    ffi.Pointer<ffi.Int8> lpMachineName,
  ) {
    return (_AbortSystemShutdownA ??= _dylib.lookupFunction<
        _c_AbortSystemShutdownA,
        _dart_AbortSystemShutdownA>('AbortSystemShutdownA'))(
      lpMachineName,
    );
  }

  _dart_AbortSystemShutdownA? _AbortSystemShutdownA;

  int AbortSystemShutdownW(
    ffi.Pointer<ffi.Uint16> lpMachineName,
  ) {
    return (_AbortSystemShutdownW ??= _dylib.lookupFunction<
        _c_AbortSystemShutdownW,
        _dart_AbortSystemShutdownW>('AbortSystemShutdownW'))(
      lpMachineName,
    );
  }

  _dart_AbortSystemShutdownW? _AbortSystemShutdownW;

  int InitiateSystemShutdownExA(
    ffi.Pointer<ffi.Int8> lpMachineName,
    ffi.Pointer<ffi.Int8> lpMessage,
    int dwTimeout,
    int bForceAppsClosed,
    int bRebootAfterShutdown,
    int dwReason,
  ) {
    return (_InitiateSystemShutdownExA ??= _dylib.lookupFunction<
        _c_InitiateSystemShutdownExA,
        _dart_InitiateSystemShutdownExA>('InitiateSystemShutdownExA'))(
      lpMachineName,
      lpMessage,
      dwTimeout,
      bForceAppsClosed,
      bRebootAfterShutdown,
      dwReason,
    );
  }

  _dart_InitiateSystemShutdownExA? _InitiateSystemShutdownExA;

  int InitiateSystemShutdownExW(
    ffi.Pointer<ffi.Uint16> lpMachineName,
    ffi.Pointer<ffi.Uint16> lpMessage,
    int dwTimeout,
    int bForceAppsClosed,
    int bRebootAfterShutdown,
    int dwReason,
  ) {
    return (_InitiateSystemShutdownExW ??= _dylib.lookupFunction<
        _c_InitiateSystemShutdownExW,
        _dart_InitiateSystemShutdownExW>('InitiateSystemShutdownExW'))(
      lpMachineName,
      lpMessage,
      dwTimeout,
      bForceAppsClosed,
      bRebootAfterShutdown,
      dwReason,
    );
  }

  _dart_InitiateSystemShutdownExW? _InitiateSystemShutdownExW;

  int InitiateShutdownA(
    ffi.Pointer<ffi.Int8> lpMachineName,
    ffi.Pointer<ffi.Int8> lpMessage,
    int dwGracePeriod,
    int dwShutdownFlags,
    int dwReason,
  ) {
    return (_InitiateShutdownA ??=
        _dylib.lookupFunction<_c_InitiateShutdownA, _dart_InitiateShutdownA>(
            'InitiateShutdownA'))(
      lpMachineName,
      lpMessage,
      dwGracePeriod,
      dwShutdownFlags,
      dwReason,
    );
  }

  _dart_InitiateShutdownA? _InitiateShutdownA;

  int InitiateShutdownW(
    ffi.Pointer<ffi.Uint16> lpMachineName,
    ffi.Pointer<ffi.Uint16> lpMessage,
    int dwGracePeriod,
    int dwShutdownFlags,
    int dwReason,
  ) {
    return (_InitiateShutdownW ??=
        _dylib.lookupFunction<_c_InitiateShutdownW, _dart_InitiateShutdownW>(
            'InitiateShutdownW'))(
      lpMachineName,
      lpMessage,
      dwGracePeriod,
      dwShutdownFlags,
      dwReason,
    );
  }

  _dart_InitiateShutdownW? _InitiateShutdownW;

  int CheckForHiberboot(
    ffi.Pointer<ffi.Uint8> pHiberboot,
    int bClearFlag,
  ) {
    return (_CheckForHiberboot ??=
        _dylib.lookupFunction<_c_CheckForHiberboot, _dart_CheckForHiberboot>(
            'CheckForHiberboot'))(
      pHiberboot,
      bClearFlag,
    );
  }

  _dart_CheckForHiberboot? _CheckForHiberboot;

  int RegSaveKeyExA(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Int8> lpFile,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
    int Flags,
  ) {
    return (_RegSaveKeyExA ??=
        _dylib.lookupFunction<_c_RegSaveKeyExA, _dart_RegSaveKeyExA>(
            'RegSaveKeyExA'))(
      hKey,
      lpFile,
      lpSecurityAttributes,
      Flags,
    );
  }

  _dart_RegSaveKeyExA? _RegSaveKeyExA;

  int RegSaveKeyExW(
    ffi.Pointer<HKEY__> hKey,
    ffi.Pointer<ffi.Uint16> lpFile,
    ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
    int Flags,
  ) {
    return (_RegSaveKeyExW ??=
        _dylib.lookupFunction<_c_RegSaveKeyExW, _dart_RegSaveKeyExW>(
            'RegSaveKeyExW'))(
      hKey,
      lpFile,
      lpSecurityAttributes,
      Flags,
    );
  }

  _dart_RegSaveKeyExW? _RegSaveKeyExW;

  int WNetAddConnectionA(
    ffi.Pointer<ffi.Int8> lpRemoteName,
    ffi.Pointer<ffi.Int8> lpPassword,
    ffi.Pointer<ffi.Int8> lpLocalName,
  ) {
    return (_WNetAddConnectionA ??=
        _dylib.lookupFunction<_c_WNetAddConnectionA, _dart_WNetAddConnectionA>(
            'WNetAddConnectionA'))(
      lpRemoteName,
      lpPassword,
      lpLocalName,
    );
  }

  _dart_WNetAddConnectionA? _WNetAddConnectionA;

  int WNetAddConnectionW(
    ffi.Pointer<ffi.Uint16> lpRemoteName,
    ffi.Pointer<ffi.Uint16> lpPassword,
    ffi.Pointer<ffi.Uint16> lpLocalName,
  ) {
    return (_WNetAddConnectionW ??=
        _dylib.lookupFunction<_c_WNetAddConnectionW, _dart_WNetAddConnectionW>(
            'WNetAddConnectionW'))(
      lpRemoteName,
      lpPassword,
      lpLocalName,
    );
  }

  _dart_WNetAddConnectionW? _WNetAddConnectionW;

  int WNetAddConnection2A(
    ffi.Pointer<LPNETRESOURCEA> lpNetResource,
    ffi.Pointer<ffi.Int8> lpPassword,
    ffi.Pointer<ffi.Int8> lpUserName,
    int dwFlags,
  ) {
    return (_WNetAddConnection2A ??= _dylib.lookupFunction<
        _c_WNetAddConnection2A,
        _dart_WNetAddConnection2A>('WNetAddConnection2A'))(
      lpNetResource,
      lpPassword,
      lpUserName,
      dwFlags,
    );
  }

  _dart_WNetAddConnection2A? _WNetAddConnection2A;

  int WNetAddConnection2W(
    ffi.Pointer<LPNETRESOURCEW> lpNetResource,
    ffi.Pointer<ffi.Uint16> lpPassword,
    ffi.Pointer<ffi.Uint16> lpUserName,
    int dwFlags,
  ) {
    return (_WNetAddConnection2W ??= _dylib.lookupFunction<
        _c_WNetAddConnection2W,
        _dart_WNetAddConnection2W>('WNetAddConnection2W'))(
      lpNetResource,
      lpPassword,
      lpUserName,
      dwFlags,
    );
  }

  _dart_WNetAddConnection2W? _WNetAddConnection2W;

  int WNetAddConnection3A(
    ffi.Pointer<HWND__> hwndOwner,
    ffi.Pointer<LPNETRESOURCEA> lpNetResource,
    ffi.Pointer<ffi.Int8> lpPassword,
    ffi.Pointer<ffi.Int8> lpUserName,
    int dwFlags,
  ) {
    return (_WNetAddConnection3A ??= _dylib.lookupFunction<
        _c_WNetAddConnection3A,
        _dart_WNetAddConnection3A>('WNetAddConnection3A'))(
      hwndOwner,
      lpNetResource,
      lpPassword,
      lpUserName,
      dwFlags,
    );
  }

  _dart_WNetAddConnection3A? _WNetAddConnection3A;

  int WNetAddConnection3W(
    ffi.Pointer<HWND__> hwndOwner,
    ffi.Pointer<LPNETRESOURCEW> lpNetResource,
    ffi.Pointer<ffi.Uint16> lpPassword,
    ffi.Pointer<ffi.Uint16> lpUserName,
    int dwFlags,
  ) {
    return (_WNetAddConnection3W ??= _dylib.lookupFunction<
        _c_WNetAddConnection3W,
        _dart_WNetAddConnection3W>('WNetAddConnection3W'))(
      hwndOwner,
      lpNetResource,
      lpPassword,
      lpUserName,
      dwFlags,
    );
  }

  _dart_WNetAddConnection3W? _WNetAddConnection3W;

  int WNetAddConnection4A(
    ffi.Pointer<HWND__> hwndOwner,
    ffi.Pointer<LPNETRESOURCEA> lpNetResource,
    ffi.Pointer<ffi.Void> pAuthBuffer,
    int cbAuthBuffer,
    int dwFlags,
    ffi.Pointer<ffi.Uint8> lpUseOptions,
    int cbUseOptions,
  ) {
    return (_WNetAddConnection4A ??= _dylib.lookupFunction<
        _c_WNetAddConnection4A,
        _dart_WNetAddConnection4A>('WNetAddConnection4A'))(
      hwndOwner,
      lpNetResource,
      pAuthBuffer,
      cbAuthBuffer,
      dwFlags,
      lpUseOptions,
      cbUseOptions,
    );
  }

  _dart_WNetAddConnection4A? _WNetAddConnection4A;

  int WNetAddConnection4W(
    ffi.Pointer<HWND__> hwndOwner,
    ffi.Pointer<LPNETRESOURCEW> lpNetResource,
    ffi.Pointer<ffi.Void> pAuthBuffer,
    int cbAuthBuffer,
    int dwFlags,
    ffi.Pointer<ffi.Uint8> lpUseOptions,
    int cbUseOptions,
  ) {
    return (_WNetAddConnection4W ??= _dylib.lookupFunction<
        _c_WNetAddConnection4W,
        _dart_WNetAddConnection4W>('WNetAddConnection4W'))(
      hwndOwner,
      lpNetResource,
      pAuthBuffer,
      cbAuthBuffer,
      dwFlags,
      lpUseOptions,
      cbUseOptions,
    );
  }

  _dart_WNetAddConnection4W? _WNetAddConnection4W;

  int WNetCancelConnectionA(
    ffi.Pointer<ffi.Int8> lpName,
    int fForce,
  ) {
    return (_WNetCancelConnectionA ??= _dylib.lookupFunction<
        _c_WNetCancelConnectionA,
        _dart_WNetCancelConnectionA>('WNetCancelConnectionA'))(
      lpName,
      fForce,
    );
  }

  _dart_WNetCancelConnectionA? _WNetCancelConnectionA;

  int WNetCancelConnectionW(
    ffi.Pointer<ffi.Uint16> lpName,
    int fForce,
  ) {
    return (_WNetCancelConnectionW ??= _dylib.lookupFunction<
        _c_WNetCancelConnectionW,
        _dart_WNetCancelConnectionW>('WNetCancelConnectionW'))(
      lpName,
      fForce,
    );
  }

  _dart_WNetCancelConnectionW? _WNetCancelConnectionW;

  int WNetCancelConnection2A(
    ffi.Pointer<ffi.Int8> lpName,
    int dwFlags,
    int fForce,
  ) {
    return (_WNetCancelConnection2A ??= _dylib.lookupFunction<
        _c_WNetCancelConnection2A,
        _dart_WNetCancelConnection2A>('WNetCancelConnection2A'))(
      lpName,
      dwFlags,
      fForce,
    );
  }

  _dart_WNetCancelConnection2A? _WNetCancelConnection2A;

  int WNetCancelConnection2W(
    ffi.Pointer<ffi.Uint16> lpName,
    int dwFlags,
    int fForce,
  ) {
    return (_WNetCancelConnection2W ??= _dylib.lookupFunction<
        _c_WNetCancelConnection2W,
        _dart_WNetCancelConnection2W>('WNetCancelConnection2W'))(
      lpName,
      dwFlags,
      fForce,
    );
  }

  _dart_WNetCancelConnection2W? _WNetCancelConnection2W;

  int WNetGetConnectionA(
    ffi.Pointer<ffi.Int8> lpLocalName,
    ffi.Pointer<ffi.Int8> lpRemoteName,
    ffi.Pointer<ffi.Uint64> lpnLength,
  ) {
    return (_WNetGetConnectionA ??=
        _dylib.lookupFunction<_c_WNetGetConnectionA, _dart_WNetGetConnectionA>(
            'WNetGetConnectionA'))(
      lpLocalName,
      lpRemoteName,
      lpnLength,
    );
  }

  _dart_WNetGetConnectionA? _WNetGetConnectionA;

  int WNetGetConnectionW(
    ffi.Pointer<ffi.Uint16> lpLocalName,
    ffi.Pointer<ffi.Uint16> lpRemoteName,
    ffi.Pointer<ffi.Uint64> lpnLength,
  ) {
    return (_WNetGetConnectionW ??=
        _dylib.lookupFunction<_c_WNetGetConnectionW, _dart_WNetGetConnectionW>(
            'WNetGetConnectionW'))(
      lpLocalName,
      lpRemoteName,
      lpnLength,
    );
  }

  _dart_WNetGetConnectionW? _WNetGetConnectionW;

  int WNetRestoreSingleConnectionW(
    ffi.Pointer<HWND__> hwndParent,
    ffi.Pointer<ffi.Uint16> lpDevice,
    int fUseUI,
  ) {
    return (_WNetRestoreSingleConnectionW ??= _dylib.lookupFunction<
        _c_WNetRestoreSingleConnectionW,
        _dart_WNetRestoreSingleConnectionW>('WNetRestoreSingleConnectionW'))(
      hwndParent,
      lpDevice,
      fUseUI,
    );
  }

  _dart_WNetRestoreSingleConnectionW? _WNetRestoreSingleConnectionW;

  int WNetUseConnectionA(
    ffi.Pointer<HWND__> hwndOwner,
    ffi.Pointer<LPNETRESOURCEA> lpNetResource,
    ffi.Pointer<ffi.Int8> lpPassword,
    ffi.Pointer<ffi.Int8> lpUserId,
    int dwFlags,
    ffi.Pointer<ffi.Int8> lpAccessName,
    ffi.Pointer<ffi.Uint64> lpBufferSize,
    ffi.Pointer<ffi.Uint64> lpResult,
  ) {
    return (_WNetUseConnectionA ??=
        _dylib.lookupFunction<_c_WNetUseConnectionA, _dart_WNetUseConnectionA>(
            'WNetUseConnectionA'))(
      hwndOwner,
      lpNetResource,
      lpPassword,
      lpUserId,
      dwFlags,
      lpAccessName,
      lpBufferSize,
      lpResult,
    );
  }

  _dart_WNetUseConnectionA? _WNetUseConnectionA;

  int WNetUseConnectionW(
    ffi.Pointer<HWND__> hwndOwner,
    ffi.Pointer<LPNETRESOURCEW> lpNetResource,
    ffi.Pointer<ffi.Uint16> lpPassword,
    ffi.Pointer<ffi.Uint16> lpUserId,
    int dwFlags,
    ffi.Pointer<ffi.Uint16> lpAccessName,
    ffi.Pointer<ffi.Uint64> lpBufferSize,
    ffi.Pointer<ffi.Uint64> lpResult,
  ) {
    return (_WNetUseConnectionW ??=
        _dylib.lookupFunction<_c_WNetUseConnectionW, _dart_WNetUseConnectionW>(
            'WNetUseConnectionW'))(
      hwndOwner,
      lpNetResource,
      lpPassword,
      lpUserId,
      dwFlags,
      lpAccessName,
      lpBufferSize,
      lpResult,
    );
  }

  _dart_WNetUseConnectionW? _WNetUseConnectionW;

  int WNetUseConnection4A(
    ffi.Pointer<HWND__> hwndOwner,
    ffi.Pointer<LPNETRESOURCEA> lpNetResource,
    ffi.Pointer<ffi.Void> pAuthBuffer,
    int cbAuthBuffer,
    int dwFlags,
    ffi.Pointer<ffi.Uint8> lpUseOptions,
    int cbUseOptions,
    ffi.Pointer<ffi.Int8> lpAccessName,
    ffi.Pointer<ffi.Uint64> lpBufferSize,
    ffi.Pointer<ffi.Uint64> lpResult,
  ) {
    return (_WNetUseConnection4A ??= _dylib.lookupFunction<
        _c_WNetUseConnection4A,
        _dart_WNetUseConnection4A>('WNetUseConnection4A'))(
      hwndOwner,
      lpNetResource,
      pAuthBuffer,
      cbAuthBuffer,
      dwFlags,
      lpUseOptions,
      cbUseOptions,
      lpAccessName,
      lpBufferSize,
      lpResult,
    );
  }

  _dart_WNetUseConnection4A? _WNetUseConnection4A;

  int WNetUseConnection4W(
    ffi.Pointer<HWND__> hwndOwner,
    ffi.Pointer<LPNETRESOURCEW> lpNetResource,
    ffi.Pointer<ffi.Void> pAuthBuffer,
    int cbAuthBuffer,
    int dwFlags,
    ffi.Pointer<ffi.Uint8> lpUseOptions,
    int cbUseOptions,
    ffi.Pointer<ffi.Uint16> lpAccessName,
    ffi.Pointer<ffi.Uint64> lpBufferSize,
    ffi.Pointer<ffi.Uint64> lpResult,
  ) {
    return (_WNetUseConnection4W ??= _dylib.lookupFunction<
        _c_WNetUseConnection4W,
        _dart_WNetUseConnection4W>('WNetUseConnection4W'))(
      hwndOwner,
      lpNetResource,
      pAuthBuffer,
      cbAuthBuffer,
      dwFlags,
      lpUseOptions,
      cbUseOptions,
      lpAccessName,
      lpBufferSize,
      lpResult,
    );
  }

  _dart_WNetUseConnection4W? _WNetUseConnection4W;

  int WNetConnectionDialog(
    ffi.Pointer<HWND__> hwnd,
    int dwType,
  ) {
    return (_WNetConnectionDialog ??= _dylib.lookupFunction<
        _c_WNetConnectionDialog,
        _dart_WNetConnectionDialog>('WNetConnectionDialog'))(
      hwnd,
      dwType,
    );
  }

  _dart_WNetConnectionDialog? _WNetConnectionDialog;

  int WNetDisconnectDialog(
    ffi.Pointer<HWND__> hwnd,
    int dwType,
  ) {
    return (_WNetDisconnectDialog ??= _dylib.lookupFunction<
        _c_WNetDisconnectDialog,
        _dart_WNetDisconnectDialog>('WNetDisconnectDialog'))(
      hwnd,
      dwType,
    );
  }

  _dart_WNetDisconnectDialog? _WNetDisconnectDialog;

  int WNetConnectionDialog1A(
    ffi.Pointer<LPCONNECTDLGSTRUCTA> lpConnDlgStruct,
  ) {
    return (_WNetConnectionDialog1A ??= _dylib.lookupFunction<
        _c_WNetConnectionDialog1A,
        _dart_WNetConnectionDialog1A>('WNetConnectionDialog1A'))(
      lpConnDlgStruct,
    );
  }

  _dart_WNetConnectionDialog1A? _WNetConnectionDialog1A;

  int WNetConnectionDialog1W(
    ffi.Pointer<LPCONNECTDLGSTRUCTW> lpConnDlgStruct,
  ) {
    return (_WNetConnectionDialog1W ??= _dylib.lookupFunction<
        _c_WNetConnectionDialog1W,
        _dart_WNetConnectionDialog1W>('WNetConnectionDialog1W'))(
      lpConnDlgStruct,
    );
  }

  _dart_WNetConnectionDialog1W? _WNetConnectionDialog1W;

  int WNetDisconnectDialog1A(
    ffi.Pointer<LPDISCDLGSTRUCTA> lpConnDlgStruct,
  ) {
    return (_WNetDisconnectDialog1A ??= _dylib.lookupFunction<
        _c_WNetDisconnectDialog1A,
        _dart_WNetDisconnectDialog1A>('WNetDisconnectDialog1A'))(
      lpConnDlgStruct,
    );
  }

  _dart_WNetDisconnectDialog1A? _WNetDisconnectDialog1A;

  int WNetDisconnectDialog1W(
    ffi.Pointer<LPDISCDLGSTRUCTW> lpConnDlgStruct,
  ) {
    return (_WNetDisconnectDialog1W ??= _dylib.lookupFunction<
        _c_WNetDisconnectDialog1W,
        _dart_WNetDisconnectDialog1W>('WNetDisconnectDialog1W'))(
      lpConnDlgStruct,
    );
  }

  _dart_WNetDisconnectDialog1W? _WNetDisconnectDialog1W;

  int WNetOpenEnumA(
    int dwScope,
    int dwType,
    int dwUsage,
    ffi.Pointer<LPNETRESOURCEA> lpNetResource,
    ffi.Pointer<ffi.Pointer<ffi.Void>> lphEnum,
  ) {
    return (_WNetOpenEnumA ??=
        _dylib.lookupFunction<_c_WNetOpenEnumA, _dart_WNetOpenEnumA>(
            'WNetOpenEnumA'))(
      dwScope,
      dwType,
      dwUsage,
      lpNetResource,
      lphEnum,
    );
  }

  _dart_WNetOpenEnumA? _WNetOpenEnumA;

  int WNetOpenEnumW(
    int dwScope,
    int dwType,
    int dwUsage,
    ffi.Pointer<LPNETRESOURCEW> lpNetResource,
    ffi.Pointer<ffi.Pointer<ffi.Void>> lphEnum,
  ) {
    return (_WNetOpenEnumW ??=
        _dylib.lookupFunction<_c_WNetOpenEnumW, _dart_WNetOpenEnumW>(
            'WNetOpenEnumW'))(
      dwScope,
      dwType,
      dwUsage,
      lpNetResource,
      lphEnum,
    );
  }

  _dart_WNetOpenEnumW? _WNetOpenEnumW;

  int WNetEnumResourceA(
    ffi.Pointer<ffi.Void> hEnum,
    ffi.Pointer<ffi.Uint64> lpcCount,
    ffi.Pointer<ffi.Void> lpBuffer,
    ffi.Pointer<ffi.Uint64> lpBufferSize,
  ) {
    return (_WNetEnumResourceA ??=
        _dylib.lookupFunction<_c_WNetEnumResourceA, _dart_WNetEnumResourceA>(
            'WNetEnumResourceA'))(
      hEnum,
      lpcCount,
      lpBuffer,
      lpBufferSize,
    );
  }

  _dart_WNetEnumResourceA? _WNetEnumResourceA;

  int WNetEnumResourceW(
    ffi.Pointer<ffi.Void> hEnum,
    ffi.Pointer<ffi.Uint64> lpcCount,
    ffi.Pointer<ffi.Void> lpBuffer,
    ffi.Pointer<ffi.Uint64> lpBufferSize,
  ) {
    return (_WNetEnumResourceW ??=
        _dylib.lookupFunction<_c_WNetEnumResourceW, _dart_WNetEnumResourceW>(
            'WNetEnumResourceW'))(
      hEnum,
      lpcCount,
      lpBuffer,
      lpBufferSize,
    );
  }

  _dart_WNetEnumResourceW? _WNetEnumResourceW;

  int WNetCloseEnum(
    ffi.Pointer<ffi.Void> hEnum,
  ) {
    return (_WNetCloseEnum ??=
        _dylib.lookupFunction<_c_WNetCloseEnum, _dart_WNetCloseEnum>(
            'WNetCloseEnum'))(
      hEnum,
    );
  }

  _dart_WNetCloseEnum? _WNetCloseEnum;

  int WNetGetResourceParentA(
    ffi.Pointer<LPNETRESOURCEA> lpNetResource,
    ffi.Pointer<ffi.Void> lpBuffer,
    ffi.Pointer<ffi.Uint64> lpcbBuffer,
  ) {
    return (_WNetGetResourceParentA ??= _dylib.lookupFunction<
        _c_WNetGetResourceParentA,
        _dart_WNetGetResourceParentA>('WNetGetResourceParentA'))(
      lpNetResource,
      lpBuffer,
      lpcbBuffer,
    );
  }

  _dart_WNetGetResourceParentA? _WNetGetResourceParentA;

  int WNetGetResourceParentW(
    ffi.Pointer<LPNETRESOURCEW> lpNetResource,
    ffi.Pointer<ffi.Void> lpBuffer,
    ffi.Pointer<ffi.Uint64> lpcbBuffer,
  ) {
    return (_WNetGetResourceParentW ??= _dylib.lookupFunction<
        _c_WNetGetResourceParentW,
        _dart_WNetGetResourceParentW>('WNetGetResourceParentW'))(
      lpNetResource,
      lpBuffer,
      lpcbBuffer,
    );
  }

  _dart_WNetGetResourceParentW? _WNetGetResourceParentW;

  int WNetGetResourceInformationA(
    ffi.Pointer<LPNETRESOURCEA> lpNetResource,
    ffi.Pointer<ffi.Void> lpBuffer,
    ffi.Pointer<ffi.Uint64> lpcbBuffer,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> lplpSystem,
  ) {
    return (_WNetGetResourceInformationA ??= _dylib.lookupFunction<
        _c_WNetGetResourceInformationA,
        _dart_WNetGetResourceInformationA>('WNetGetResourceInformationA'))(
      lpNetResource,
      lpBuffer,
      lpcbBuffer,
      lplpSystem,
    );
  }

  _dart_WNetGetResourceInformationA? _WNetGetResourceInformationA;

  int WNetGetResourceInformationW(
    ffi.Pointer<LPNETRESOURCEW> lpNetResource,
    ffi.Pointer<ffi.Void> lpBuffer,
    ffi.Pointer<ffi.Uint64> lpcbBuffer,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> lplpSystem,
  ) {
    return (_WNetGetResourceInformationW ??= _dylib.lookupFunction<
        _c_WNetGetResourceInformationW,
        _dart_WNetGetResourceInformationW>('WNetGetResourceInformationW'))(
      lpNetResource,
      lpBuffer,
      lpcbBuffer,
      lplpSystem,
    );
  }

  _dart_WNetGetResourceInformationW? _WNetGetResourceInformationW;

  int WNetGetUniversalNameA(
    ffi.Pointer<ffi.Int8> lpLocalPath,
    int dwInfoLevel,
    ffi.Pointer<ffi.Void> lpBuffer,
    ffi.Pointer<ffi.Uint64> lpBufferSize,
  ) {
    return (_WNetGetUniversalNameA ??= _dylib.lookupFunction<
        _c_WNetGetUniversalNameA,
        _dart_WNetGetUniversalNameA>('WNetGetUniversalNameA'))(
      lpLocalPath,
      dwInfoLevel,
      lpBuffer,
      lpBufferSize,
    );
  }

  _dart_WNetGetUniversalNameA? _WNetGetUniversalNameA;

  int WNetGetUniversalNameW(
    ffi.Pointer<ffi.Uint16> lpLocalPath,
    int dwInfoLevel,
    ffi.Pointer<ffi.Void> lpBuffer,
    ffi.Pointer<ffi.Uint64> lpBufferSize,
  ) {
    return (_WNetGetUniversalNameW ??= _dylib.lookupFunction<
        _c_WNetGetUniversalNameW,
        _dart_WNetGetUniversalNameW>('WNetGetUniversalNameW'))(
      lpLocalPath,
      dwInfoLevel,
      lpBuffer,
      lpBufferSize,
    );
  }

  _dart_WNetGetUniversalNameW? _WNetGetUniversalNameW;

  int WNetGetUserA(
    ffi.Pointer<ffi.Int8> lpName,
    ffi.Pointer<ffi.Int8> lpUserName,
    ffi.Pointer<ffi.Uint64> lpnLength,
  ) {
    return (_WNetGetUserA ??= _dylib
        .lookupFunction<_c_WNetGetUserA, _dart_WNetGetUserA>('WNetGetUserA'))(
      lpName,
      lpUserName,
      lpnLength,
    );
  }

  _dart_WNetGetUserA? _WNetGetUserA;

  int WNetGetUserW(
    ffi.Pointer<ffi.Uint16> lpName,
    ffi.Pointer<ffi.Uint16> lpUserName,
    ffi.Pointer<ffi.Uint64> lpnLength,
  ) {
    return (_WNetGetUserW ??= _dylib
        .lookupFunction<_c_WNetGetUserW, _dart_WNetGetUserW>('WNetGetUserW'))(
      lpName,
      lpUserName,
      lpnLength,
    );
  }

  _dart_WNetGetUserW? _WNetGetUserW;

  int WNetGetProviderNameA(
    int dwNetType,
    ffi.Pointer<ffi.Int8> lpProviderName,
    ffi.Pointer<ffi.Uint64> lpBufferSize,
  ) {
    return (_WNetGetProviderNameA ??= _dylib.lookupFunction<
        _c_WNetGetProviderNameA,
        _dart_WNetGetProviderNameA>('WNetGetProviderNameA'))(
      dwNetType,
      lpProviderName,
      lpBufferSize,
    );
  }

  _dart_WNetGetProviderNameA? _WNetGetProviderNameA;

  int WNetGetProviderNameW(
    int dwNetType,
    ffi.Pointer<ffi.Uint16> lpProviderName,
    ffi.Pointer<ffi.Uint64> lpBufferSize,
  ) {
    return (_WNetGetProviderNameW ??= _dylib.lookupFunction<
        _c_WNetGetProviderNameW,
        _dart_WNetGetProviderNameW>('WNetGetProviderNameW'))(
      dwNetType,
      lpProviderName,
      lpBufferSize,
    );
  }

  _dart_WNetGetProviderNameW? _WNetGetProviderNameW;

  int WNetGetNetworkInformationA(
    ffi.Pointer<ffi.Int8> lpProvider,
    ffi.Pointer<LPNETINFOSTRUCT> lpNetInfoStruct,
  ) {
    return (_WNetGetNetworkInformationA ??= _dylib.lookupFunction<
        _c_WNetGetNetworkInformationA,
        _dart_WNetGetNetworkInformationA>('WNetGetNetworkInformationA'))(
      lpProvider,
      lpNetInfoStruct,
    );
  }

  _dart_WNetGetNetworkInformationA? _WNetGetNetworkInformationA;

  int WNetGetNetworkInformationW(
    ffi.Pointer<ffi.Uint16> lpProvider,
    ffi.Pointer<LPNETINFOSTRUCT> lpNetInfoStruct,
  ) {
    return (_WNetGetNetworkInformationW ??= _dylib.lookupFunction<
        _c_WNetGetNetworkInformationW,
        _dart_WNetGetNetworkInformationW>('WNetGetNetworkInformationW'))(
      lpProvider,
      lpNetInfoStruct,
    );
  }

  _dart_WNetGetNetworkInformationW? _WNetGetNetworkInformationW;

  int WNetGetLastErrorA(
    ffi.Pointer<ffi.Uint64> lpError,
    ffi.Pointer<ffi.Int8> lpErrorBuf,
    int nErrorBufSize,
    ffi.Pointer<ffi.Int8> lpNameBuf,
    int nNameBufSize,
  ) {
    return (_WNetGetLastErrorA ??=
        _dylib.lookupFunction<_c_WNetGetLastErrorA, _dart_WNetGetLastErrorA>(
            'WNetGetLastErrorA'))(
      lpError,
      lpErrorBuf,
      nErrorBufSize,
      lpNameBuf,
      nNameBufSize,
    );
  }

  _dart_WNetGetLastErrorA? _WNetGetLastErrorA;

  int WNetGetLastErrorW(
    ffi.Pointer<ffi.Uint64> lpError,
    ffi.Pointer<ffi.Uint16> lpErrorBuf,
    int nErrorBufSize,
    ffi.Pointer<ffi.Uint16> lpNameBuf,
    int nNameBufSize,
  ) {
    return (_WNetGetLastErrorW ??=
        _dylib.lookupFunction<_c_WNetGetLastErrorW, _dart_WNetGetLastErrorW>(
            'WNetGetLastErrorW'))(
      lpError,
      lpErrorBuf,
      nErrorBufSize,
      lpNameBuf,
      nNameBufSize,
    );
  }

  _dart_WNetGetLastErrorW? _WNetGetLastErrorW;

  int MultinetGetConnectionPerformanceA(
    ffi.Pointer<LPNETRESOURCEA> lpNetResource,
    ffi.Pointer<LPNETCONNECTINFOSTRUCT> lpNetConnectInfoStruct,
  ) {
    return (_MultinetGetConnectionPerformanceA ??= _dylib.lookupFunction<
            _c_MultinetGetConnectionPerformanceA,
            _dart_MultinetGetConnectionPerformanceA>(
        'MultinetGetConnectionPerformanceA'))(
      lpNetResource,
      lpNetConnectInfoStruct,
    );
  }

  _dart_MultinetGetConnectionPerformanceA? _MultinetGetConnectionPerformanceA;

  int MultinetGetConnectionPerformanceW(
    ffi.Pointer<LPNETRESOURCEW> lpNetResource,
    ffi.Pointer<LPNETCONNECTINFOSTRUCT> lpNetConnectInfoStruct,
  ) {
    return (_MultinetGetConnectionPerformanceW ??= _dylib.lookupFunction<
            _c_MultinetGetConnectionPerformanceW,
            _dart_MultinetGetConnectionPerformanceW>(
        'MultinetGetConnectionPerformanceW'))(
      lpNetResource,
      lpNetConnectInfoStruct,
    );
  }

  _dart_MultinetGetConnectionPerformanceW? _MultinetGetConnectionPerformanceW;

  ffi.Pointer<ffi.Uint16> uaw_CharUpperW(
    ffi.Pointer<ffi.Uint16> String,
  ) {
    return (_uaw_CharUpperW ??=
        _dylib.lookupFunction<_c_uaw_CharUpperW, _dart_uaw_CharUpperW>(
            'uaw_CharUpperW'))(
      String,
    );
  }

  _dart_uaw_CharUpperW? _uaw_CharUpperW;

  int uaw_lstrcmpW(
    ffi.Pointer<ffi.Uint16> String1,
    ffi.Pointer<ffi.Uint16> String2,
  ) {
    return (_uaw_lstrcmpW ??= _dylib
        .lookupFunction<_c_uaw_lstrcmpW, _dart_uaw_lstrcmpW>('uaw_lstrcmpW'))(
      String1,
      String2,
    );
  }

  _dart_uaw_lstrcmpW? _uaw_lstrcmpW;

  int uaw_lstrcmpiW(
    ffi.Pointer<ffi.Uint16> String1,
    ffi.Pointer<ffi.Uint16> String2,
  ) {
    return (_uaw_lstrcmpiW ??=
        _dylib.lookupFunction<_c_uaw_lstrcmpiW, _dart_uaw_lstrcmpiW>(
            'uaw_lstrcmpiW'))(
      String1,
      String2,
    );
  }

  _dart_uaw_lstrcmpiW? _uaw_lstrcmpiW;

  int uaw_lstrlenW(
    ffi.Pointer<ffi.Uint16> String,
  ) {
    return (_uaw_lstrlenW ??= _dylib
        .lookupFunction<_c_uaw_lstrlenW, _dart_uaw_lstrlenW>('uaw_lstrlenW'))(
      String,
    );
  }

  _dart_uaw_lstrlenW? _uaw_lstrlenW;

  ffi.Pointer<ffi.Uint16> uaw_wcschr(
    ffi.Pointer<ffi.Uint16> String,
    int Character,
  ) {
    return (_uaw_wcschr ??=
        _dylib.lookupFunction<_c_uaw_wcschr, _dart_uaw_wcschr>('uaw_wcschr'))(
      String,
      Character,
    );
  }

  _dart_uaw_wcschr? _uaw_wcschr;

  ffi.Pointer<ffi.Uint16> uaw_wcscpy(
    ffi.Pointer<ffi.Uint16> Destination,
    ffi.Pointer<ffi.Uint16> Source,
  ) {
    return (_uaw_wcscpy ??=
        _dylib.lookupFunction<_c_uaw_wcscpy, _dart_uaw_wcscpy>('uaw_wcscpy'))(
      Destination,
      Source,
    );
  }

  _dart_uaw_wcscpy? _uaw_wcscpy;

  int uaw_wcsicmp(
    ffi.Pointer<ffi.Uint16> String1,
    ffi.Pointer<ffi.Uint16> String2,
  ) {
    return (_uaw_wcsicmp ??= _dylib
        .lookupFunction<_c_uaw_wcsicmp, _dart_uaw_wcsicmp>('uaw_wcsicmp'))(
      String1,
      String2,
    );
  }

  _dart_uaw_wcsicmp? _uaw_wcsicmp;

  int uaw_wcslen(
    ffi.Pointer<ffi.Uint16> String,
  ) {
    return (_uaw_wcslen ??=
        _dylib.lookupFunction<_c_uaw_wcslen, _dart_uaw_wcslen>('uaw_wcslen'))(
      String,
    );
  }

  _dart_uaw_wcslen? _uaw_wcslen;

  ffi.Pointer<ffi.Uint16> uaw_wcsrchr(
    ffi.Pointer<ffi.Uint16> String,
    int Character,
  ) {
    return (_uaw_wcsrchr ??= _dylib
        .lookupFunction<_c_uaw_wcsrchr, _dart_uaw_wcsrchr>('uaw_wcsrchr'))(
      String,
      Character,
    );
  }

  _dart_uaw_wcsrchr? _uaw_wcsrchr;

  ffi.Pointer<ffi.Uint16> ua_CharUpperW(
    ffi.Pointer<ffi.Uint16> String,
  ) {
    return (_ua_CharUpperW ??=
        _dylib.lookupFunction<_c_ua_CharUpperW, _dart_ua_CharUpperW>(
            'ua_CharUpperW'))(
      String,
    );
  }

  _dart_ua_CharUpperW? _ua_CharUpperW;

  int ua_lstrcmpW(
    ffi.Pointer<ffi.Uint16> String1,
    ffi.Pointer<ffi.Uint16> String2,
  ) {
    return (_ua_lstrcmpW ??= _dylib
        .lookupFunction<_c_ua_lstrcmpW, _dart_ua_lstrcmpW>('ua_lstrcmpW'))(
      String1,
      String2,
    );
  }

  _dart_ua_lstrcmpW? _ua_lstrcmpW;

  int ua_lstrcmpiW(
    ffi.Pointer<ffi.Uint16> String1,
    ffi.Pointer<ffi.Uint16> String2,
  ) {
    return (_ua_lstrcmpiW ??= _dylib
        .lookupFunction<_c_ua_lstrcmpiW, _dart_ua_lstrcmpiW>('ua_lstrcmpiW'))(
      String1,
      String2,
    );
  }

  _dart_ua_lstrcmpiW? _ua_lstrcmpiW;

  int ua_lstrlenW(
    ffi.Pointer<ffi.Uint16> String,
  ) {
    return (_ua_lstrlenW ??= _dylib
        .lookupFunction<_c_ua_lstrlenW, _dart_ua_lstrlenW>('ua_lstrlenW'))(
      String,
    );
  }

  _dart_ua_lstrlenW? _ua_lstrlenW;

  ffi.Pointer<ffi.Uint16> ua_wcschr(
    ffi.Pointer<ffi.Uint16> String,
    int Character,
  ) {
    return (_ua_wcschr ??=
        _dylib.lookupFunction<_c_ua_wcschr, _dart_ua_wcschr>('ua_wcschr'))(
      String,
      Character,
    );
  }

  _dart_ua_wcschr? _ua_wcschr;

  ffi.Pointer<ffi.Uint16> ua_wcsrchr(
    ffi.Pointer<ffi.Uint16> String,
    int Character,
  ) {
    return (_ua_wcsrchr ??=
        _dylib.lookupFunction<_c_ua_wcsrchr, _dart_ua_wcsrchr>('ua_wcsrchr'))(
      String,
      Character,
    );
  }

  _dart_ua_wcsrchr? _ua_wcsrchr;

  ffi.Pointer<ffi.Uint16> ua_wcscpy(
    ffi.Pointer<ffi.Uint16> Destination,
    ffi.Pointer<ffi.Uint16> Source,
  ) {
    return (_ua_wcscpy ??=
        _dylib.lookupFunction<_c_ua_wcscpy, _dart_ua_wcscpy>('ua_wcscpy'))(
      Destination,
      Source,
    );
  }

  _dart_ua_wcscpy? _ua_wcscpy;

  ffi.Pointer<ffi.Uint16> ua_wcscpy_s(
    ffi.Pointer<ffi.Uint16> Destination,
    int DestinationSize,
    ffi.Pointer<ffi.Uint16> Source,
  ) {
    return (_ua_wcscpy_s ??= _dylib
        .lookupFunction<_c_ua_wcscpy_s, _dart_ua_wcscpy_s>('ua_wcscpy_s'))(
      Destination,
      DestinationSize,
      Source,
    );
  }

  _dart_ua_wcscpy_s? _ua_wcscpy_s;

  int ua_wcslen(
    ffi.Pointer<ffi.Uint16> String,
  ) {
    return (_ua_wcslen ??=
        _dylib.lookupFunction<_c_ua_wcslen, _dart_ua_wcslen>('ua_wcslen'))(
      String,
    );
  }

  _dart_ua_wcslen? _ua_wcslen;

  int ua_wcsicmp(
    ffi.Pointer<ffi.Uint16> String1,
    ffi.Pointer<ffi.Uint16> String2,
  ) {
    return (_ua_wcsicmp ??=
        _dylib.lookupFunction<_c_ua_wcsicmp, _dart_ua_wcsicmp>('ua_wcsicmp'))(
      String1,
      String2,
    );
  }

  _dart_ua_wcsicmp? _ua_wcsicmp;

  int ChangeServiceConfigA(
    ffi.Pointer<SC_HANDLE__> hService,
    int dwServiceType,
    int dwStartType,
    int dwErrorControl,
    ffi.Pointer<ffi.Int8> lpBinaryPathName,
    ffi.Pointer<ffi.Int8> lpLoadOrderGroup,
    ffi.Pointer<ffi.Uint64> lpdwTagId,
    ffi.Pointer<ffi.Int8> lpDependencies,
    ffi.Pointer<ffi.Int8> lpServiceStartName,
    ffi.Pointer<ffi.Int8> lpPassword,
    ffi.Pointer<ffi.Int8> lpDisplayName,
  ) {
    return (_ChangeServiceConfigA ??= _dylib.lookupFunction<
        _c_ChangeServiceConfigA,
        _dart_ChangeServiceConfigA>('ChangeServiceConfigA'))(
      hService,
      dwServiceType,
      dwStartType,
      dwErrorControl,
      lpBinaryPathName,
      lpLoadOrderGroup,
      lpdwTagId,
      lpDependencies,
      lpServiceStartName,
      lpPassword,
      lpDisplayName,
    );
  }

  _dart_ChangeServiceConfigA? _ChangeServiceConfigA;

  int ChangeServiceConfigW(
    ffi.Pointer<SC_HANDLE__> hService,
    int dwServiceType,
    int dwStartType,
    int dwErrorControl,
    ffi.Pointer<ffi.Uint16> lpBinaryPathName,
    ffi.Pointer<ffi.Uint16> lpLoadOrderGroup,
    ffi.Pointer<ffi.Uint64> lpdwTagId,
    ffi.Pointer<ffi.Uint16> lpDependencies,
    ffi.Pointer<ffi.Uint16> lpServiceStartName,
    ffi.Pointer<ffi.Uint16> lpPassword,
    ffi.Pointer<ffi.Uint16> lpDisplayName,
  ) {
    return (_ChangeServiceConfigW ??= _dylib.lookupFunction<
        _c_ChangeServiceConfigW,
        _dart_ChangeServiceConfigW>('ChangeServiceConfigW'))(
      hService,
      dwServiceType,
      dwStartType,
      dwErrorControl,
      lpBinaryPathName,
      lpLoadOrderGroup,
      lpdwTagId,
      lpDependencies,
      lpServiceStartName,
      lpPassword,
      lpDisplayName,
    );
  }

  _dart_ChangeServiceConfigW? _ChangeServiceConfigW;

  int ChangeServiceConfig2A(
    ffi.Pointer<SC_HANDLE__> hService,
    int dwInfoLevel,
    ffi.Pointer<ffi.Void> lpInfo,
  ) {
    return (_ChangeServiceConfig2A ??= _dylib.lookupFunction<
        _c_ChangeServiceConfig2A,
        _dart_ChangeServiceConfig2A>('ChangeServiceConfig2A'))(
      hService,
      dwInfoLevel,
      lpInfo,
    );
  }

  _dart_ChangeServiceConfig2A? _ChangeServiceConfig2A;

  int ChangeServiceConfig2W(
    ffi.Pointer<SC_HANDLE__> hService,
    int dwInfoLevel,
    ffi.Pointer<ffi.Void> lpInfo,
  ) {
    return (_ChangeServiceConfig2W ??= _dylib.lookupFunction<
        _c_ChangeServiceConfig2W,
        _dart_ChangeServiceConfig2W>('ChangeServiceConfig2W'))(
      hService,
      dwInfoLevel,
      lpInfo,
    );
  }

  _dart_ChangeServiceConfig2W? _ChangeServiceConfig2W;

  int CloseServiceHandle(
    ffi.Pointer<SC_HANDLE__> hSCObject,
  ) {
    return (_CloseServiceHandle ??=
        _dylib.lookupFunction<_c_CloseServiceHandle, _dart_CloseServiceHandle>(
            'CloseServiceHandle'))(
      hSCObject,
    );
  }

  _dart_CloseServiceHandle? _CloseServiceHandle;

  int ControlService(
    ffi.Pointer<SC_HANDLE__> hService,
    int dwControl,
    ffi.Pointer<LPSERVICE_STATUS> lpServiceStatus,
  ) {
    return (_ControlService ??=
        _dylib.lookupFunction<_c_ControlService, _dart_ControlService>(
            'ControlService'))(
      hService,
      dwControl,
      lpServiceStatus,
    );
  }

  _dart_ControlService? _ControlService;

  ffi.Pointer<SC_HANDLE__> CreateServiceA(
    ffi.Pointer<SC_HANDLE__> hSCManager,
    ffi.Pointer<ffi.Int8> lpServiceName,
    ffi.Pointer<ffi.Int8> lpDisplayName,
    int dwDesiredAccess,
    int dwServiceType,
    int dwStartType,
    int dwErrorControl,
    ffi.Pointer<ffi.Int8> lpBinaryPathName,
    ffi.Pointer<ffi.Int8> lpLoadOrderGroup,
    ffi.Pointer<ffi.Uint64> lpdwTagId,
    ffi.Pointer<ffi.Int8> lpDependencies,
    ffi.Pointer<ffi.Int8> lpServiceStartName,
    ffi.Pointer<ffi.Int8> lpPassword,
  ) {
    return (_CreateServiceA ??=
        _dylib.lookupFunction<_c_CreateServiceA, _dart_CreateServiceA>(
            'CreateServiceA'))(
      hSCManager,
      lpServiceName,
      lpDisplayName,
      dwDesiredAccess,
      dwServiceType,
      dwStartType,
      dwErrorControl,
      lpBinaryPathName,
      lpLoadOrderGroup,
      lpdwTagId,
      lpDependencies,
      lpServiceStartName,
      lpPassword,
    );
  }

  _dart_CreateServiceA? _CreateServiceA;

  ffi.Pointer<SC_HANDLE__> CreateServiceW(
    ffi.Pointer<SC_HANDLE__> hSCManager,
    ffi.Pointer<ffi.Uint16> lpServiceName,
    ffi.Pointer<ffi.Uint16> lpDisplayName,
    int dwDesiredAccess,
    int dwServiceType,
    int dwStartType,
    int dwErrorControl,
    ffi.Pointer<ffi.Uint16> lpBinaryPathName,
    ffi.Pointer<ffi.Uint16> lpLoadOrderGroup,
    ffi.Pointer<ffi.Uint64> lpdwTagId,
    ffi.Pointer<ffi.Uint16> lpDependencies,
    ffi.Pointer<ffi.Uint16> lpServiceStartName,
    ffi.Pointer<ffi.Uint16> lpPassword,
  ) {
    return (_CreateServiceW ??=
        _dylib.lookupFunction<_c_CreateServiceW, _dart_CreateServiceW>(
            'CreateServiceW'))(
      hSCManager,
      lpServiceName,
      lpDisplayName,
      dwDesiredAccess,
      dwServiceType,
      dwStartType,
      dwErrorControl,
      lpBinaryPathName,
      lpLoadOrderGroup,
      lpdwTagId,
      lpDependencies,
      lpServiceStartName,
      lpPassword,
    );
  }

  _dart_CreateServiceW? _CreateServiceW;

  int DeleteService(
    ffi.Pointer<SC_HANDLE__> hService,
  ) {
    return (_DeleteService ??=
        _dylib.lookupFunction<_c_DeleteService, _dart_DeleteService>(
            'DeleteService'))(
      hService,
    );
  }

  _dart_DeleteService? _DeleteService;

  int EnumDependentServicesA(
    ffi.Pointer<SC_HANDLE__> hService,
    int dwServiceState,
    ffi.Pointer<LPENUM_SERVICE_STATUSA> lpServices,
    int cbBufSize,
    ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
    ffi.Pointer<ffi.Uint64> lpServicesReturned,
  ) {
    return (_EnumDependentServicesA ??= _dylib.lookupFunction<
        _c_EnumDependentServicesA,
        _dart_EnumDependentServicesA>('EnumDependentServicesA'))(
      hService,
      dwServiceState,
      lpServices,
      cbBufSize,
      pcbBytesNeeded,
      lpServicesReturned,
    );
  }

  _dart_EnumDependentServicesA? _EnumDependentServicesA;

  int EnumDependentServicesW(
    ffi.Pointer<SC_HANDLE__> hService,
    int dwServiceState,
    ffi.Pointer<LPENUM_SERVICE_STATUSW> lpServices,
    int cbBufSize,
    ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
    ffi.Pointer<ffi.Uint64> lpServicesReturned,
  ) {
    return (_EnumDependentServicesW ??= _dylib.lookupFunction<
        _c_EnumDependentServicesW,
        _dart_EnumDependentServicesW>('EnumDependentServicesW'))(
      hService,
      dwServiceState,
      lpServices,
      cbBufSize,
      pcbBytesNeeded,
      lpServicesReturned,
    );
  }

  _dart_EnumDependentServicesW? _EnumDependentServicesW;

  int EnumServicesStatusA(
    ffi.Pointer<SC_HANDLE__> hSCManager,
    int dwServiceType,
    int dwServiceState,
    ffi.Pointer<LPENUM_SERVICE_STATUSA> lpServices,
    int cbBufSize,
    ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
    ffi.Pointer<ffi.Uint64> lpServicesReturned,
    ffi.Pointer<ffi.Uint64> lpResumeHandle,
  ) {
    return (_EnumServicesStatusA ??= _dylib.lookupFunction<
        _c_EnumServicesStatusA,
        _dart_EnumServicesStatusA>('EnumServicesStatusA'))(
      hSCManager,
      dwServiceType,
      dwServiceState,
      lpServices,
      cbBufSize,
      pcbBytesNeeded,
      lpServicesReturned,
      lpResumeHandle,
    );
  }

  _dart_EnumServicesStatusA? _EnumServicesStatusA;

  int EnumServicesStatusW(
    ffi.Pointer<SC_HANDLE__> hSCManager,
    int dwServiceType,
    int dwServiceState,
    ffi.Pointer<LPENUM_SERVICE_STATUSW> lpServices,
    int cbBufSize,
    ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
    ffi.Pointer<ffi.Uint64> lpServicesReturned,
    ffi.Pointer<ffi.Uint64> lpResumeHandle,
  ) {
    return (_EnumServicesStatusW ??= _dylib.lookupFunction<
        _c_EnumServicesStatusW,
        _dart_EnumServicesStatusW>('EnumServicesStatusW'))(
      hSCManager,
      dwServiceType,
      dwServiceState,
      lpServices,
      cbBufSize,
      pcbBytesNeeded,
      lpServicesReturned,
      lpResumeHandle,
    );
  }

  _dart_EnumServicesStatusW? _EnumServicesStatusW;

  int EnumServicesStatusExA(
    ffi.Pointer<SC_HANDLE__> hSCManager,
    int InfoLevel,
    int dwServiceType,
    int dwServiceState,
    ffi.Pointer<ffi.Uint8> lpServices,
    int cbBufSize,
    ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
    ffi.Pointer<ffi.Uint64> lpServicesReturned,
    ffi.Pointer<ffi.Uint64> lpResumeHandle,
    ffi.Pointer<ffi.Int8> pszGroupName,
  ) {
    return (_EnumServicesStatusExA ??= _dylib.lookupFunction<
        _c_EnumServicesStatusExA,
        _dart_EnumServicesStatusExA>('EnumServicesStatusExA'))(
      hSCManager,
      InfoLevel,
      dwServiceType,
      dwServiceState,
      lpServices,
      cbBufSize,
      pcbBytesNeeded,
      lpServicesReturned,
      lpResumeHandle,
      pszGroupName,
    );
  }

  _dart_EnumServicesStatusExA? _EnumServicesStatusExA;

  int EnumServicesStatusExW(
    ffi.Pointer<SC_HANDLE__> hSCManager,
    int InfoLevel,
    int dwServiceType,
    int dwServiceState,
    ffi.Pointer<ffi.Uint8> lpServices,
    int cbBufSize,
    ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
    ffi.Pointer<ffi.Uint64> lpServicesReturned,
    ffi.Pointer<ffi.Uint64> lpResumeHandle,
    ffi.Pointer<ffi.Uint16> pszGroupName,
  ) {
    return (_EnumServicesStatusExW ??= _dylib.lookupFunction<
        _c_EnumServicesStatusExW,
        _dart_EnumServicesStatusExW>('EnumServicesStatusExW'))(
      hSCManager,
      InfoLevel,
      dwServiceType,
      dwServiceState,
      lpServices,
      cbBufSize,
      pcbBytesNeeded,
      lpServicesReturned,
      lpResumeHandle,
      pszGroupName,
    );
  }

  _dart_EnumServicesStatusExW? _EnumServicesStatusExW;

  int GetServiceKeyNameA(
    ffi.Pointer<SC_HANDLE__> hSCManager,
    ffi.Pointer<ffi.Int8> lpDisplayName,
    ffi.Pointer<ffi.Int8> lpServiceName,
    ffi.Pointer<ffi.Uint64> lpcchBuffer,
  ) {
    return (_GetServiceKeyNameA ??=
        _dylib.lookupFunction<_c_GetServiceKeyNameA, _dart_GetServiceKeyNameA>(
            'GetServiceKeyNameA'))(
      hSCManager,
      lpDisplayName,
      lpServiceName,
      lpcchBuffer,
    );
  }

  _dart_GetServiceKeyNameA? _GetServiceKeyNameA;

  int GetServiceKeyNameW(
    ffi.Pointer<SC_HANDLE__> hSCManager,
    ffi.Pointer<ffi.Uint16> lpDisplayName,
    ffi.Pointer<ffi.Uint16> lpServiceName,
    ffi.Pointer<ffi.Uint64> lpcchBuffer,
  ) {
    return (_GetServiceKeyNameW ??=
        _dylib.lookupFunction<_c_GetServiceKeyNameW, _dart_GetServiceKeyNameW>(
            'GetServiceKeyNameW'))(
      hSCManager,
      lpDisplayName,
      lpServiceName,
      lpcchBuffer,
    );
  }

  _dart_GetServiceKeyNameW? _GetServiceKeyNameW;

  int GetServiceDisplayNameA(
    ffi.Pointer<SC_HANDLE__> hSCManager,
    ffi.Pointer<ffi.Int8> lpServiceName,
    ffi.Pointer<ffi.Int8> lpDisplayName,
    ffi.Pointer<ffi.Uint64> lpcchBuffer,
  ) {
    return (_GetServiceDisplayNameA ??= _dylib.lookupFunction<
        _c_GetServiceDisplayNameA,
        _dart_GetServiceDisplayNameA>('GetServiceDisplayNameA'))(
      hSCManager,
      lpServiceName,
      lpDisplayName,
      lpcchBuffer,
    );
  }

  _dart_GetServiceDisplayNameA? _GetServiceDisplayNameA;

  int GetServiceDisplayNameW(
    ffi.Pointer<SC_HANDLE__> hSCManager,
    ffi.Pointer<ffi.Uint16> lpServiceName,
    ffi.Pointer<ffi.Uint16> lpDisplayName,
    ffi.Pointer<ffi.Uint64> lpcchBuffer,
  ) {
    return (_GetServiceDisplayNameW ??= _dylib.lookupFunction<
        _c_GetServiceDisplayNameW,
        _dart_GetServiceDisplayNameW>('GetServiceDisplayNameW'))(
      hSCManager,
      lpServiceName,
      lpDisplayName,
      lpcchBuffer,
    );
  }

  _dart_GetServiceDisplayNameW? _GetServiceDisplayNameW;

  ffi.Pointer<ffi.Void> LockServiceDatabase(
    ffi.Pointer<SC_HANDLE__> hSCManager,
  ) {
    return (_LockServiceDatabase ??= _dylib.lookupFunction<
        _c_LockServiceDatabase,
        _dart_LockServiceDatabase>('LockServiceDatabase'))(
      hSCManager,
    );
  }

  _dart_LockServiceDatabase? _LockServiceDatabase;

  int NotifyBootConfigStatus(
    int BootAcceptable,
  ) {
    return (_NotifyBootConfigStatus ??= _dylib.lookupFunction<
        _c_NotifyBootConfigStatus,
        _dart_NotifyBootConfigStatus>('NotifyBootConfigStatus'))(
      BootAcceptable,
    );
  }

  _dart_NotifyBootConfigStatus? _NotifyBootConfigStatus;

  ffi.Pointer<SC_HANDLE__> OpenSCManagerA(
    ffi.Pointer<ffi.Int8> lpMachineName,
    ffi.Pointer<ffi.Int8> lpDatabaseName,
    int dwDesiredAccess,
  ) {
    return (_OpenSCManagerA ??=
        _dylib.lookupFunction<_c_OpenSCManagerA, _dart_OpenSCManagerA>(
            'OpenSCManagerA'))(
      lpMachineName,
      lpDatabaseName,
      dwDesiredAccess,
    );
  }

  _dart_OpenSCManagerA? _OpenSCManagerA;

  ffi.Pointer<SC_HANDLE__> OpenSCManagerW(
    ffi.Pointer<ffi.Uint16> lpMachineName,
    ffi.Pointer<ffi.Uint16> lpDatabaseName,
    int dwDesiredAccess,
  ) {
    return (_OpenSCManagerW ??=
        _dylib.lookupFunction<_c_OpenSCManagerW, _dart_OpenSCManagerW>(
            'OpenSCManagerW'))(
      lpMachineName,
      lpDatabaseName,
      dwDesiredAccess,
    );
  }

  _dart_OpenSCManagerW? _OpenSCManagerW;

  ffi.Pointer<SC_HANDLE__> OpenServiceA(
    ffi.Pointer<SC_HANDLE__> hSCManager,
    ffi.Pointer<ffi.Int8> lpServiceName,
    int dwDesiredAccess,
  ) {
    return (_OpenServiceA ??= _dylib
        .lookupFunction<_c_OpenServiceA, _dart_OpenServiceA>('OpenServiceA'))(
      hSCManager,
      lpServiceName,
      dwDesiredAccess,
    );
  }

  _dart_OpenServiceA? _OpenServiceA;

  ffi.Pointer<SC_HANDLE__> OpenServiceW(
    ffi.Pointer<SC_HANDLE__> hSCManager,
    ffi.Pointer<ffi.Uint16> lpServiceName,
    int dwDesiredAccess,
  ) {
    return (_OpenServiceW ??= _dylib
        .lookupFunction<_c_OpenServiceW, _dart_OpenServiceW>('OpenServiceW'))(
      hSCManager,
      lpServiceName,
      dwDesiredAccess,
    );
  }

  _dart_OpenServiceW? _OpenServiceW;

  int QueryServiceConfigA(
    ffi.Pointer<SC_HANDLE__> hService,
    ffi.Pointer<LPQUERY_SERVICE_CONFIGA> lpServiceConfig,
    int cbBufSize,
    ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
  ) {
    return (_QueryServiceConfigA ??= _dylib.lookupFunction<
        _c_QueryServiceConfigA,
        _dart_QueryServiceConfigA>('QueryServiceConfigA'))(
      hService,
      lpServiceConfig,
      cbBufSize,
      pcbBytesNeeded,
    );
  }

  _dart_QueryServiceConfigA? _QueryServiceConfigA;

  int QueryServiceConfigW(
    ffi.Pointer<SC_HANDLE__> hService,
    ffi.Pointer<LPQUERY_SERVICE_CONFIGW> lpServiceConfig,
    int cbBufSize,
    ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
  ) {
    return (_QueryServiceConfigW ??= _dylib.lookupFunction<
        _c_QueryServiceConfigW,
        _dart_QueryServiceConfigW>('QueryServiceConfigW'))(
      hService,
      lpServiceConfig,
      cbBufSize,
      pcbBytesNeeded,
    );
  }

  _dart_QueryServiceConfigW? _QueryServiceConfigW;

  int QueryServiceConfig2A(
    ffi.Pointer<SC_HANDLE__> hService,
    int dwInfoLevel,
    ffi.Pointer<ffi.Uint8> lpBuffer,
    int cbBufSize,
    ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
  ) {
    return (_QueryServiceConfig2A ??= _dylib.lookupFunction<
        _c_QueryServiceConfig2A,
        _dart_QueryServiceConfig2A>('QueryServiceConfig2A'))(
      hService,
      dwInfoLevel,
      lpBuffer,
      cbBufSize,
      pcbBytesNeeded,
    );
  }

  _dart_QueryServiceConfig2A? _QueryServiceConfig2A;

  int QueryServiceConfig2W(
    ffi.Pointer<SC_HANDLE__> hService,
    int dwInfoLevel,
    ffi.Pointer<ffi.Uint8> lpBuffer,
    int cbBufSize,
    ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
  ) {
    return (_QueryServiceConfig2W ??= _dylib.lookupFunction<
        _c_QueryServiceConfig2W,
        _dart_QueryServiceConfig2W>('QueryServiceConfig2W'))(
      hService,
      dwInfoLevel,
      lpBuffer,
      cbBufSize,
      pcbBytesNeeded,
    );
  }

  _dart_QueryServiceConfig2W? _QueryServiceConfig2W;

  int QueryServiceLockStatusA(
    ffi.Pointer<SC_HANDLE__> hSCManager,
    ffi.Pointer<LPQUERY_SERVICE_LOCK_STATUSA> lpLockStatus,
    int cbBufSize,
    ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
  ) {
    return (_QueryServiceLockStatusA ??= _dylib.lookupFunction<
        _c_QueryServiceLockStatusA,
        _dart_QueryServiceLockStatusA>('QueryServiceLockStatusA'))(
      hSCManager,
      lpLockStatus,
      cbBufSize,
      pcbBytesNeeded,
    );
  }

  _dart_QueryServiceLockStatusA? _QueryServiceLockStatusA;

  int QueryServiceLockStatusW(
    ffi.Pointer<SC_HANDLE__> hSCManager,
    ffi.Pointer<LPQUERY_SERVICE_LOCK_STATUSW> lpLockStatus,
    int cbBufSize,
    ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
  ) {
    return (_QueryServiceLockStatusW ??= _dylib.lookupFunction<
        _c_QueryServiceLockStatusW,
        _dart_QueryServiceLockStatusW>('QueryServiceLockStatusW'))(
      hSCManager,
      lpLockStatus,
      cbBufSize,
      pcbBytesNeeded,
    );
  }

  _dart_QueryServiceLockStatusW? _QueryServiceLockStatusW;

  int QueryServiceObjectSecurity(
    ffi.Pointer<SC_HANDLE__> hService,
    int dwSecurityInformation,
    ffi.Pointer<ffi.Void> lpSecurityDescriptor,
    int cbBufSize,
    ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
  ) {
    return (_QueryServiceObjectSecurity ??= _dylib.lookupFunction<
        _c_QueryServiceObjectSecurity,
        _dart_QueryServiceObjectSecurity>('QueryServiceObjectSecurity'))(
      hService,
      dwSecurityInformation,
      lpSecurityDescriptor,
      cbBufSize,
      pcbBytesNeeded,
    );
  }

  _dart_QueryServiceObjectSecurity? _QueryServiceObjectSecurity;

  int QueryServiceStatus(
    ffi.Pointer<SC_HANDLE__> hService,
    ffi.Pointer<LPSERVICE_STATUS> lpServiceStatus,
  ) {
    return (_QueryServiceStatus ??=
        _dylib.lookupFunction<_c_QueryServiceStatus, _dart_QueryServiceStatus>(
            'QueryServiceStatus'))(
      hService,
      lpServiceStatus,
    );
  }

  _dart_QueryServiceStatus? _QueryServiceStatus;

  int QueryServiceStatusEx(
    ffi.Pointer<SC_HANDLE__> hService,
    int InfoLevel,
    ffi.Pointer<ffi.Uint8> lpBuffer,
    int cbBufSize,
    ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
  ) {
    return (_QueryServiceStatusEx ??= _dylib.lookupFunction<
        _c_QueryServiceStatusEx,
        _dart_QueryServiceStatusEx>('QueryServiceStatusEx'))(
      hService,
      InfoLevel,
      lpBuffer,
      cbBufSize,
      pcbBytesNeeded,
    );
  }

  _dart_QueryServiceStatusEx? _QueryServiceStatusEx;

  ffi.Pointer<SERVICE_STATUS_HANDLE__> RegisterServiceCtrlHandlerA(
    ffi.Pointer<ffi.Int8> lpServiceName,
    ffi.Pointer<ffi.NativeFunction<LPHANDLER_FUNCTION>> lpHandlerProc,
  ) {
    return (_RegisterServiceCtrlHandlerA ??= _dylib.lookupFunction<
        _c_RegisterServiceCtrlHandlerA,
        _dart_RegisterServiceCtrlHandlerA>('RegisterServiceCtrlHandlerA'))(
      lpServiceName,
      lpHandlerProc,
    );
  }

  _dart_RegisterServiceCtrlHandlerA? _RegisterServiceCtrlHandlerA;

  ffi.Pointer<SERVICE_STATUS_HANDLE__> RegisterServiceCtrlHandlerW(
    ffi.Pointer<ffi.Uint16> lpServiceName,
    ffi.Pointer<ffi.NativeFunction<LPHANDLER_FUNCTION>> lpHandlerProc,
  ) {
    return (_RegisterServiceCtrlHandlerW ??= _dylib.lookupFunction<
        _c_RegisterServiceCtrlHandlerW,
        _dart_RegisterServiceCtrlHandlerW>('RegisterServiceCtrlHandlerW'))(
      lpServiceName,
      lpHandlerProc,
    );
  }

  _dart_RegisterServiceCtrlHandlerW? _RegisterServiceCtrlHandlerW;

  ffi.Pointer<SERVICE_STATUS_HANDLE__> RegisterServiceCtrlHandlerExA(
    ffi.Pointer<ffi.Int8> lpServiceName,
    ffi.Pointer<ffi.NativeFunction<LPHANDLER_FUNCTION_EX>> lpHandlerProc,
    ffi.Pointer<ffi.Void> lpContext,
  ) {
    return (_RegisterServiceCtrlHandlerExA ??= _dylib.lookupFunction<
        _c_RegisterServiceCtrlHandlerExA,
        _dart_RegisterServiceCtrlHandlerExA>('RegisterServiceCtrlHandlerExA'))(
      lpServiceName,
      lpHandlerProc,
      lpContext,
    );
  }

  _dart_RegisterServiceCtrlHandlerExA? _RegisterServiceCtrlHandlerExA;

  ffi.Pointer<SERVICE_STATUS_HANDLE__> RegisterServiceCtrlHandlerExW(
    ffi.Pointer<ffi.Uint16> lpServiceName,
    ffi.Pointer<ffi.NativeFunction<LPHANDLER_FUNCTION_EX>> lpHandlerProc,
    ffi.Pointer<ffi.Void> lpContext,
  ) {
    return (_RegisterServiceCtrlHandlerExW ??= _dylib.lookupFunction<
        _c_RegisterServiceCtrlHandlerExW,
        _dart_RegisterServiceCtrlHandlerExW>('RegisterServiceCtrlHandlerExW'))(
      lpServiceName,
      lpHandlerProc,
      lpContext,
    );
  }

  _dart_RegisterServiceCtrlHandlerExW? _RegisterServiceCtrlHandlerExW;

  int SetServiceObjectSecurity(
    ffi.Pointer<SC_HANDLE__> hService,
    int dwSecurityInformation,
    ffi.Pointer<ffi.Void> lpSecurityDescriptor,
  ) {
    return (_SetServiceObjectSecurity ??= _dylib.lookupFunction<
        _c_SetServiceObjectSecurity,
        _dart_SetServiceObjectSecurity>('SetServiceObjectSecurity'))(
      hService,
      dwSecurityInformation,
      lpSecurityDescriptor,
    );
  }

  _dart_SetServiceObjectSecurity? _SetServiceObjectSecurity;

  int SetServiceStatus(
    ffi.Pointer<SERVICE_STATUS_HANDLE__> hServiceStatus,
    ffi.Pointer<LPSERVICE_STATUS> lpServiceStatus,
  ) {
    return (_SetServiceStatus ??=
        _dylib.lookupFunction<_c_SetServiceStatus, _dart_SetServiceStatus>(
            'SetServiceStatus'))(
      hServiceStatus,
      lpServiceStatus,
    );
  }

  _dart_SetServiceStatus? _SetServiceStatus;

  int StartServiceCtrlDispatcherA(
    ffi.Pointer<LPSERVICE_TABLE_ENTRYA> lpServiceStartTable,
  ) {
    return (_StartServiceCtrlDispatcherA ??= _dylib.lookupFunction<
        _c_StartServiceCtrlDispatcherA,
        _dart_StartServiceCtrlDispatcherA>('StartServiceCtrlDispatcherA'))(
      lpServiceStartTable,
    );
  }

  _dart_StartServiceCtrlDispatcherA? _StartServiceCtrlDispatcherA;

  int StartServiceCtrlDispatcherW(
    ffi.Pointer<LPSERVICE_TABLE_ENTRYW> lpServiceStartTable,
  ) {
    return (_StartServiceCtrlDispatcherW ??= _dylib.lookupFunction<
        _c_StartServiceCtrlDispatcherW,
        _dart_StartServiceCtrlDispatcherW>('StartServiceCtrlDispatcherW'))(
      lpServiceStartTable,
    );
  }

  _dart_StartServiceCtrlDispatcherW? _StartServiceCtrlDispatcherW;

  int StartServiceA(
    ffi.Pointer<SC_HANDLE__> hService,
    int dwNumServiceArgs,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> lpServiceArgVectors,
  ) {
    return (_StartServiceA ??=
        _dylib.lookupFunction<_c_StartServiceA, _dart_StartServiceA>(
            'StartServiceA'))(
      hService,
      dwNumServiceArgs,
      lpServiceArgVectors,
    );
  }

  _dart_StartServiceA? _StartServiceA;

  int StartServiceW(
    ffi.Pointer<SC_HANDLE__> hService,
    int dwNumServiceArgs,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> lpServiceArgVectors,
  ) {
    return (_StartServiceW ??=
        _dylib.lookupFunction<_c_StartServiceW, _dart_StartServiceW>(
            'StartServiceW'))(
      hService,
      dwNumServiceArgs,
      lpServiceArgVectors,
    );
  }

  _dart_StartServiceW? _StartServiceW;

  int UnlockServiceDatabase(
    ffi.Pointer<ffi.Void> ScLock,
  ) {
    return (_UnlockServiceDatabase ??= _dylib.lookupFunction<
        _c_UnlockServiceDatabase,
        _dart_UnlockServiceDatabase>('UnlockServiceDatabase'))(
      ScLock,
    );
  }

  _dart_UnlockServiceDatabase? _UnlockServiceDatabase;

  int NotifyServiceStatusChangeA(
    ffi.Pointer<SC_HANDLE__> hService,
    int dwNotifyMask,
    ffi.Pointer<PSERVICE_NOTIFY_2A> pNotifyBuffer,
  ) {
    return (_NotifyServiceStatusChangeA ??= _dylib.lookupFunction<
        _c_NotifyServiceStatusChangeA,
        _dart_NotifyServiceStatusChangeA>('NotifyServiceStatusChangeA'))(
      hService,
      dwNotifyMask,
      pNotifyBuffer,
    );
  }

  _dart_NotifyServiceStatusChangeA? _NotifyServiceStatusChangeA;

  int NotifyServiceStatusChangeW(
    ffi.Pointer<SC_HANDLE__> hService,
    int dwNotifyMask,
    ffi.Pointer<PSERVICE_NOTIFY_2W> pNotifyBuffer,
  ) {
    return (_NotifyServiceStatusChangeW ??= _dylib.lookupFunction<
        _c_NotifyServiceStatusChangeW,
        _dart_NotifyServiceStatusChangeW>('NotifyServiceStatusChangeW'))(
      hService,
      dwNotifyMask,
      pNotifyBuffer,
    );
  }

  _dart_NotifyServiceStatusChangeW? _NotifyServiceStatusChangeW;

  int ControlServiceExA(
    ffi.Pointer<SC_HANDLE__> hService,
    int dwControl,
    int dwInfoLevel,
    ffi.Pointer<ffi.Void> pControlParams,
  ) {
    return (_ControlServiceExA ??=
        _dylib.lookupFunction<_c_ControlServiceExA, _dart_ControlServiceExA>(
            'ControlServiceExA'))(
      hService,
      dwControl,
      dwInfoLevel,
      pControlParams,
    );
  }

  _dart_ControlServiceExA? _ControlServiceExA;

  int ControlServiceExW(
    ffi.Pointer<SC_HANDLE__> hService,
    int dwControl,
    int dwInfoLevel,
    ffi.Pointer<ffi.Void> pControlParams,
  ) {
    return (_ControlServiceExW ??=
        _dylib.lookupFunction<_c_ControlServiceExW, _dart_ControlServiceExW>(
            'ControlServiceExW'))(
      hService,
      dwControl,
      dwInfoLevel,
      pControlParams,
    );
  }

  _dart_ControlServiceExW? _ControlServiceExW;

  int QueryServiceDynamicInformation(
    ffi.Pointer<SERVICE_STATUS_HANDLE__> hServiceStatus,
    int dwInfoLevel,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppDynamicInfo,
  ) {
    return (_QueryServiceDynamicInformation ??= _dylib.lookupFunction<
            _c_QueryServiceDynamicInformation,
            _dart_QueryServiceDynamicInformation>(
        'QueryServiceDynamicInformation'))(
      hServiceStatus,
      dwInfoLevel,
      ppDynamicInfo,
    );
  }

  _dart_QueryServiceDynamicInformation? _QueryServiceDynamicInformation;

  int SubscribeServiceChangeNotifications(
    ffi.Pointer<SC_HANDLE__> hService,
    int eEventType,
    ffi.Pointer<ffi.NativeFunction<PSC_NOTIFICATION_CALLBACK>> pCallback,
    ffi.Pointer<ffi.Void> pCallbackContext,
    ffi.Pointer<ffi.Pointer<_SC_NOTIFICATION_REGISTRATION>> pSubscription,
  ) {
    return (_SubscribeServiceChangeNotifications ??= _dylib.lookupFunction<
            _c_SubscribeServiceChangeNotifications,
            _dart_SubscribeServiceChangeNotifications>(
        'SubscribeServiceChangeNotifications'))(
      hService,
      eEventType,
      pCallback,
      pCallbackContext,
      pSubscription,
    );
  }

  _dart_SubscribeServiceChangeNotifications?
      _SubscribeServiceChangeNotifications;

  void UnsubscribeServiceChangeNotifications(
    ffi.Pointer<_SC_NOTIFICATION_REGISTRATION> pSubscription,
  ) {
    return (_UnsubscribeServiceChangeNotifications ??= _dylib.lookupFunction<
            _c_UnsubscribeServiceChangeNotifications,
            _dart_UnsubscribeServiceChangeNotifications>(
        'UnsubscribeServiceChangeNotifications'))(
      pSubscription,
    );
  }

  _dart_UnsubscribeServiceChangeNotifications?
      _UnsubscribeServiceChangeNotifications;

  int WaitServiceState(
    ffi.Pointer<SC_HANDLE__> hService,
    int dwNotify,
    int dwTimeout,
    ffi.Pointer<ffi.Void> hCancelEvent,
  ) {
    return (_WaitServiceState ??=
        _dylib.lookupFunction<_c_WaitServiceState, _dart_WaitServiceState>(
            'WaitServiceState'))(
      hService,
      dwNotify,
      dwTimeout,
      hCancelEvent,
    );
  }

  _dart_WaitServiceState? _WaitServiceState;

  int GetServiceRegistryStateKey(
    ffi.Pointer<SERVICE_STATUS_HANDLE__> ServiceStatusHandle,
    int StateType,
    int AccessMask,
    ffi.Pointer<ffi.Pointer<HKEY__>> ServiceStateKey,
  ) {
    return (_GetServiceRegistryStateKey ??= _dylib.lookupFunction<
        _c_GetServiceRegistryStateKey,
        _dart_GetServiceRegistryStateKey>('GetServiceRegistryStateKey'))(
      ServiceStatusHandle,
      StateType,
      AccessMask,
      ServiceStateKey,
    );
  }

  _dart_GetServiceRegistryStateKey? _GetServiceRegistryStateKey;

  int GetServiceDirectory(
    ffi.Pointer<SERVICE_STATUS_HANDLE__> hServiceStatus,
    int eDirectoryType,
    ffi.Pointer<ffi.Uint16> lpPathBuffer,
    int cchPathBufferLength,
    ffi.Pointer<ffi.Uint64> lpcchRequiredBufferLength,
  ) {
    return (_GetServiceDirectory ??= _dylib.lookupFunction<
        _c_GetServiceDirectory,
        _dart_GetServiceDirectory>('GetServiceDirectory'))(
      hServiceStatus,
      eDirectoryType,
      lpPathBuffer,
      cchPathBufferLength,
      lpcchRequiredBufferLength,
    );
  }

  _dart_GetServiceDirectory? _GetServiceDirectory;

  ffi.Pointer<HKL__> ImmInstallIMEA(
    ffi.Pointer<ffi.Int8> lpszIMEFileName,
    ffi.Pointer<ffi.Int8> lpszLayoutText,
  ) {
    return (_ImmInstallIMEA ??=
        _dylib.lookupFunction<_c_ImmInstallIMEA, _dart_ImmInstallIMEA>(
            'ImmInstallIMEA'))(
      lpszIMEFileName,
      lpszLayoutText,
    );
  }

  _dart_ImmInstallIMEA? _ImmInstallIMEA;

  ffi.Pointer<HKL__> ImmInstallIMEW(
    ffi.Pointer<ffi.Uint16> lpszIMEFileName,
    ffi.Pointer<ffi.Uint16> lpszLayoutText,
  ) {
    return (_ImmInstallIMEW ??=
        _dylib.lookupFunction<_c_ImmInstallIMEW, _dart_ImmInstallIMEW>(
            'ImmInstallIMEW'))(
      lpszIMEFileName,
      lpszLayoutText,
    );
  }

  _dart_ImmInstallIMEW? _ImmInstallIMEW;

  ffi.Pointer<HWND__> ImmGetDefaultIMEWnd(
    ffi.Pointer<HWND__> arg0,
  ) {
    return (_ImmGetDefaultIMEWnd ??= _dylib.lookupFunction<
        _c_ImmGetDefaultIMEWnd,
        _dart_ImmGetDefaultIMEWnd>('ImmGetDefaultIMEWnd'))(
      arg0,
    );
  }

  _dart_ImmGetDefaultIMEWnd? _ImmGetDefaultIMEWnd;

  int ImmGetDescriptionA(
    ffi.Pointer<HKL__> arg0,
    ffi.Pointer<ffi.Int8> lpszDescription,
    int uBufLen,
  ) {
    return (_ImmGetDescriptionA ??=
        _dylib.lookupFunction<_c_ImmGetDescriptionA, _dart_ImmGetDescriptionA>(
            'ImmGetDescriptionA'))(
      arg0,
      lpszDescription,
      uBufLen,
    );
  }

  _dart_ImmGetDescriptionA? _ImmGetDescriptionA;

  int ImmGetDescriptionW(
    ffi.Pointer<HKL__> arg0,
    ffi.Pointer<ffi.Uint16> lpszDescription,
    int uBufLen,
  ) {
    return (_ImmGetDescriptionW ??=
        _dylib.lookupFunction<_c_ImmGetDescriptionW, _dart_ImmGetDescriptionW>(
            'ImmGetDescriptionW'))(
      arg0,
      lpszDescription,
      uBufLen,
    );
  }

  _dart_ImmGetDescriptionW? _ImmGetDescriptionW;

  int ImmGetIMEFileNameA(
    ffi.Pointer<HKL__> arg0,
    ffi.Pointer<ffi.Int8> lpszFileName,
    int uBufLen,
  ) {
    return (_ImmGetIMEFileNameA ??=
        _dylib.lookupFunction<_c_ImmGetIMEFileNameA, _dart_ImmGetIMEFileNameA>(
            'ImmGetIMEFileNameA'))(
      arg0,
      lpszFileName,
      uBufLen,
    );
  }

  _dart_ImmGetIMEFileNameA? _ImmGetIMEFileNameA;

  int ImmGetIMEFileNameW(
    ffi.Pointer<HKL__> arg0,
    ffi.Pointer<ffi.Uint16> lpszFileName,
    int uBufLen,
  ) {
    return (_ImmGetIMEFileNameW ??=
        _dylib.lookupFunction<_c_ImmGetIMEFileNameW, _dart_ImmGetIMEFileNameW>(
            'ImmGetIMEFileNameW'))(
      arg0,
      lpszFileName,
      uBufLen,
    );
  }

  _dart_ImmGetIMEFileNameW? _ImmGetIMEFileNameW;

  int ImmGetProperty(
    ffi.Pointer<HKL__> arg0,
    int arg1,
  ) {
    return (_ImmGetProperty ??=
        _dylib.lookupFunction<_c_ImmGetProperty, _dart_ImmGetProperty>(
            'ImmGetProperty'))(
      arg0,
      arg1,
    );
  }

  _dart_ImmGetProperty? _ImmGetProperty;

  int ImmIsIME(
    ffi.Pointer<HKL__> arg0,
  ) {
    return (_ImmIsIME ??=
        _dylib.lookupFunction<_c_ImmIsIME, _dart_ImmIsIME>('ImmIsIME'))(
      arg0,
    );
  }

  _dart_ImmIsIME? _ImmIsIME;

  int ImmSimulateHotKey(
    ffi.Pointer<HWND__> arg0,
    int arg1,
  ) {
    return (_ImmSimulateHotKey ??=
        _dylib.lookupFunction<_c_ImmSimulateHotKey, _dart_ImmSimulateHotKey>(
            'ImmSimulateHotKey'))(
      arg0,
      arg1,
    );
  }

  _dart_ImmSimulateHotKey? _ImmSimulateHotKey;

  ffi.Pointer<HIMC__> ImmCreateContext() {
    return (_ImmCreateContext ??=
        _dylib.lookupFunction<_c_ImmCreateContext, _dart_ImmCreateContext>(
            'ImmCreateContext'))();
  }

  _dart_ImmCreateContext? _ImmCreateContext;

  int ImmDestroyContext(
    ffi.Pointer<HIMC__> arg0,
  ) {
    return (_ImmDestroyContext ??=
        _dylib.lookupFunction<_c_ImmDestroyContext, _dart_ImmDestroyContext>(
            'ImmDestroyContext'))(
      arg0,
    );
  }

  _dart_ImmDestroyContext? _ImmDestroyContext;

  ffi.Pointer<HIMC__> ImmGetContext(
    ffi.Pointer<HWND__> arg0,
  ) {
    return (_ImmGetContext ??=
        _dylib.lookupFunction<_c_ImmGetContext, _dart_ImmGetContext>(
            'ImmGetContext'))(
      arg0,
    );
  }

  _dart_ImmGetContext? _ImmGetContext;

  int ImmReleaseContext(
    ffi.Pointer<HWND__> arg0,
    ffi.Pointer<HIMC__> arg1,
  ) {
    return (_ImmReleaseContext ??=
        _dylib.lookupFunction<_c_ImmReleaseContext, _dart_ImmReleaseContext>(
            'ImmReleaseContext'))(
      arg0,
      arg1,
    );
  }

  _dart_ImmReleaseContext? _ImmReleaseContext;

  ffi.Pointer<HIMC__> ImmAssociateContext(
    ffi.Pointer<HWND__> arg0,
    ffi.Pointer<HIMC__> arg1,
  ) {
    return (_ImmAssociateContext ??= _dylib.lookupFunction<
        _c_ImmAssociateContext,
        _dart_ImmAssociateContext>('ImmAssociateContext'))(
      arg0,
      arg1,
    );
  }

  _dart_ImmAssociateContext? _ImmAssociateContext;

  int ImmAssociateContextEx(
    ffi.Pointer<HWND__> arg0,
    ffi.Pointer<HIMC__> arg1,
    int arg2,
  ) {
    return (_ImmAssociateContextEx ??= _dylib.lookupFunction<
        _c_ImmAssociateContextEx,
        _dart_ImmAssociateContextEx>('ImmAssociateContextEx'))(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_ImmAssociateContextEx? _ImmAssociateContextEx;

  int ImmGetCompositionStringA(
    ffi.Pointer<HIMC__> arg0,
    int arg1,
    ffi.Pointer<ffi.Void> lpBuf,
    int dwBufLen,
  ) {
    return (_ImmGetCompositionStringA ??= _dylib.lookupFunction<
        _c_ImmGetCompositionStringA,
        _dart_ImmGetCompositionStringA>('ImmGetCompositionStringA'))(
      arg0,
      arg1,
      lpBuf,
      dwBufLen,
    );
  }

  _dart_ImmGetCompositionStringA? _ImmGetCompositionStringA;

  int ImmGetCompositionStringW(
    ffi.Pointer<HIMC__> arg0,
    int arg1,
    ffi.Pointer<ffi.Void> lpBuf,
    int dwBufLen,
  ) {
    return (_ImmGetCompositionStringW ??= _dylib.lookupFunction<
        _c_ImmGetCompositionStringW,
        _dart_ImmGetCompositionStringW>('ImmGetCompositionStringW'))(
      arg0,
      arg1,
      lpBuf,
      dwBufLen,
    );
  }

  _dart_ImmGetCompositionStringW? _ImmGetCompositionStringW;

  int ImmSetCompositionStringA(
    ffi.Pointer<HIMC__> arg0,
    int dwIndex,
    ffi.Pointer<ffi.Void> lpComp,
    int dwCompLen,
    ffi.Pointer<ffi.Void> lpRead,
    int dwReadLen,
  ) {
    return (_ImmSetCompositionStringA ??= _dylib.lookupFunction<
        _c_ImmSetCompositionStringA,
        _dart_ImmSetCompositionStringA>('ImmSetCompositionStringA'))(
      arg0,
      dwIndex,
      lpComp,
      dwCompLen,
      lpRead,
      dwReadLen,
    );
  }

  _dart_ImmSetCompositionStringA? _ImmSetCompositionStringA;

  int ImmSetCompositionStringW(
    ffi.Pointer<HIMC__> arg0,
    int dwIndex,
    ffi.Pointer<ffi.Void> lpComp,
    int dwCompLen,
    ffi.Pointer<ffi.Void> lpRead,
    int dwReadLen,
  ) {
    return (_ImmSetCompositionStringW ??= _dylib.lookupFunction<
        _c_ImmSetCompositionStringW,
        _dart_ImmSetCompositionStringW>('ImmSetCompositionStringW'))(
      arg0,
      dwIndex,
      lpComp,
      dwCompLen,
      lpRead,
      dwReadLen,
    );
  }

  _dart_ImmSetCompositionStringW? _ImmSetCompositionStringW;

  int ImmGetCandidateListCountA(
    ffi.Pointer<HIMC__> arg0,
    ffi.Pointer<ffi.Uint64> lpdwListCount,
  ) {
    return (_ImmGetCandidateListCountA ??= _dylib.lookupFunction<
        _c_ImmGetCandidateListCountA,
        _dart_ImmGetCandidateListCountA>('ImmGetCandidateListCountA'))(
      arg0,
      lpdwListCount,
    );
  }

  _dart_ImmGetCandidateListCountA? _ImmGetCandidateListCountA;

  int ImmGetCandidateListCountW(
    ffi.Pointer<HIMC__> arg0,
    ffi.Pointer<ffi.Uint64> lpdwListCount,
  ) {
    return (_ImmGetCandidateListCountW ??= _dylib.lookupFunction<
        _c_ImmGetCandidateListCountW,
        _dart_ImmGetCandidateListCountW>('ImmGetCandidateListCountW'))(
      arg0,
      lpdwListCount,
    );
  }

  _dart_ImmGetCandidateListCountW? _ImmGetCandidateListCountW;

  int ImmGetCandidateListA(
    ffi.Pointer<HIMC__> arg0,
    int deIndex,
    ffi.Pointer<LPCANDIDATELIST> lpCandList,
    int dwBufLen,
  ) {
    return (_ImmGetCandidateListA ??= _dylib.lookupFunction<
        _c_ImmGetCandidateListA,
        _dart_ImmGetCandidateListA>('ImmGetCandidateListA'))(
      arg0,
      deIndex,
      lpCandList,
      dwBufLen,
    );
  }

  _dart_ImmGetCandidateListA? _ImmGetCandidateListA;

  int ImmGetCandidateListW(
    ffi.Pointer<HIMC__> arg0,
    int deIndex,
    ffi.Pointer<LPCANDIDATELIST> lpCandList,
    int dwBufLen,
  ) {
    return (_ImmGetCandidateListW ??= _dylib.lookupFunction<
        _c_ImmGetCandidateListW,
        _dart_ImmGetCandidateListW>('ImmGetCandidateListW'))(
      arg0,
      deIndex,
      lpCandList,
      dwBufLen,
    );
  }

  _dart_ImmGetCandidateListW? _ImmGetCandidateListW;

  int ImmGetGuideLineA(
    ffi.Pointer<HIMC__> arg0,
    int dwIndex,
    ffi.Pointer<ffi.Int8> lpBuf,
    int dwBufLen,
  ) {
    return (_ImmGetGuideLineA ??=
        _dylib.lookupFunction<_c_ImmGetGuideLineA, _dart_ImmGetGuideLineA>(
            'ImmGetGuideLineA'))(
      arg0,
      dwIndex,
      lpBuf,
      dwBufLen,
    );
  }

  _dart_ImmGetGuideLineA? _ImmGetGuideLineA;

  int ImmGetGuideLineW(
    ffi.Pointer<HIMC__> arg0,
    int dwIndex,
    ffi.Pointer<ffi.Uint16> lpBuf,
    int dwBufLen,
  ) {
    return (_ImmGetGuideLineW ??=
        _dylib.lookupFunction<_c_ImmGetGuideLineW, _dart_ImmGetGuideLineW>(
            'ImmGetGuideLineW'))(
      arg0,
      dwIndex,
      lpBuf,
      dwBufLen,
    );
  }

  _dart_ImmGetGuideLineW? _ImmGetGuideLineW;

  int ImmGetConversionStatus(
    ffi.Pointer<HIMC__> arg0,
    ffi.Pointer<ffi.Uint64> lpfdwConversion,
    ffi.Pointer<ffi.Uint64> lpfdwSentence,
  ) {
    return (_ImmGetConversionStatus ??= _dylib.lookupFunction<
        _c_ImmGetConversionStatus,
        _dart_ImmGetConversionStatus>('ImmGetConversionStatus'))(
      arg0,
      lpfdwConversion,
      lpfdwSentence,
    );
  }

  _dart_ImmGetConversionStatus? _ImmGetConversionStatus;

  int ImmSetConversionStatus(
    ffi.Pointer<HIMC__> arg0,
    int arg1,
    int arg2,
  ) {
    return (_ImmSetConversionStatus ??= _dylib.lookupFunction<
        _c_ImmSetConversionStatus,
        _dart_ImmSetConversionStatus>('ImmSetConversionStatus'))(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_ImmSetConversionStatus? _ImmSetConversionStatus;

  int ImmGetOpenStatus(
    ffi.Pointer<HIMC__> arg0,
  ) {
    return (_ImmGetOpenStatus ??=
        _dylib.lookupFunction<_c_ImmGetOpenStatus, _dart_ImmGetOpenStatus>(
            'ImmGetOpenStatus'))(
      arg0,
    );
  }

  _dart_ImmGetOpenStatus? _ImmGetOpenStatus;

  int ImmSetOpenStatus(
    ffi.Pointer<HIMC__> arg0,
    int arg1,
  ) {
    return (_ImmSetOpenStatus ??=
        _dylib.lookupFunction<_c_ImmSetOpenStatus, _dart_ImmSetOpenStatus>(
            'ImmSetOpenStatus'))(
      arg0,
      arg1,
    );
  }

  _dart_ImmSetOpenStatus? _ImmSetOpenStatus;

  int ImmGetCompositionFontA(
    ffi.Pointer<HIMC__> arg0,
    ffi.Pointer<LPLOGFONTA> lplf,
  ) {
    return (_ImmGetCompositionFontA ??= _dylib.lookupFunction<
        _c_ImmGetCompositionFontA,
        _dart_ImmGetCompositionFontA>('ImmGetCompositionFontA'))(
      arg0,
      lplf,
    );
  }

  _dart_ImmGetCompositionFontA? _ImmGetCompositionFontA;

  int ImmGetCompositionFontW(
    ffi.Pointer<HIMC__> arg0,
    ffi.Pointer<LPLOGFONTW> lplf,
  ) {
    return (_ImmGetCompositionFontW ??= _dylib.lookupFunction<
        _c_ImmGetCompositionFontW,
        _dart_ImmGetCompositionFontW>('ImmGetCompositionFontW'))(
      arg0,
      lplf,
    );
  }

  _dart_ImmGetCompositionFontW? _ImmGetCompositionFontW;

  int ImmSetCompositionFontA(
    ffi.Pointer<HIMC__> arg0,
    ffi.Pointer<LPLOGFONTA> lplf,
  ) {
    return (_ImmSetCompositionFontA ??= _dylib.lookupFunction<
        _c_ImmSetCompositionFontA,
        _dart_ImmSetCompositionFontA>('ImmSetCompositionFontA'))(
      arg0,
      lplf,
    );
  }

  _dart_ImmSetCompositionFontA? _ImmSetCompositionFontA;

  int ImmSetCompositionFontW(
    ffi.Pointer<HIMC__> arg0,
    ffi.Pointer<LPLOGFONTW> lplf,
  ) {
    return (_ImmSetCompositionFontW ??= _dylib.lookupFunction<
        _c_ImmSetCompositionFontW,
        _dart_ImmSetCompositionFontW>('ImmSetCompositionFontW'))(
      arg0,
      lplf,
    );
  }

  _dart_ImmSetCompositionFontW? _ImmSetCompositionFontW;

  int ImmConfigureIMEA(
    ffi.Pointer<HKL__> arg0,
    ffi.Pointer<HWND__> arg1,
    int arg2,
    ffi.Pointer<ffi.Void> arg3,
  ) {
    return (_ImmConfigureIMEA ??=
        _dylib.lookupFunction<_c_ImmConfigureIMEA, _dart_ImmConfigureIMEA>(
            'ImmConfigureIMEA'))(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_ImmConfigureIMEA? _ImmConfigureIMEA;

  int ImmConfigureIMEW(
    ffi.Pointer<HKL__> arg0,
    ffi.Pointer<HWND__> arg1,
    int arg2,
    ffi.Pointer<ffi.Void> arg3,
  ) {
    return (_ImmConfigureIMEW ??=
        _dylib.lookupFunction<_c_ImmConfigureIMEW, _dart_ImmConfigureIMEW>(
            'ImmConfigureIMEW'))(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_ImmConfigureIMEW? _ImmConfigureIMEW;

  int ImmEscapeA(
    ffi.Pointer<HKL__> arg0,
    ffi.Pointer<HIMC__> arg1,
    int arg2,
    ffi.Pointer<ffi.Void> arg3,
  ) {
    return (_ImmEscapeA ??=
        _dylib.lookupFunction<_c_ImmEscapeA, _dart_ImmEscapeA>('ImmEscapeA'))(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_ImmEscapeA? _ImmEscapeA;

  int ImmEscapeW(
    ffi.Pointer<HKL__> arg0,
    ffi.Pointer<HIMC__> arg1,
    int arg2,
    ffi.Pointer<ffi.Void> arg3,
  ) {
    return (_ImmEscapeW ??=
        _dylib.lookupFunction<_c_ImmEscapeW, _dart_ImmEscapeW>('ImmEscapeW'))(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_ImmEscapeW? _ImmEscapeW;

  int ImmGetConversionListA(
    ffi.Pointer<HKL__> arg0,
    ffi.Pointer<HIMC__> arg1,
    ffi.Pointer<ffi.Int8> lpSrc,
    ffi.Pointer<LPCANDIDATELIST> lpDst,
    int dwBufLen,
    int uFlag,
  ) {
    return (_ImmGetConversionListA ??= _dylib.lookupFunction<
        _c_ImmGetConversionListA,
        _dart_ImmGetConversionListA>('ImmGetConversionListA'))(
      arg0,
      arg1,
      lpSrc,
      lpDst,
      dwBufLen,
      uFlag,
    );
  }

  _dart_ImmGetConversionListA? _ImmGetConversionListA;

  int ImmGetConversionListW(
    ffi.Pointer<HKL__> arg0,
    ffi.Pointer<HIMC__> arg1,
    ffi.Pointer<ffi.Uint16> lpSrc,
    ffi.Pointer<LPCANDIDATELIST> lpDst,
    int dwBufLen,
    int uFlag,
  ) {
    return (_ImmGetConversionListW ??= _dylib.lookupFunction<
        _c_ImmGetConversionListW,
        _dart_ImmGetConversionListW>('ImmGetConversionListW'))(
      arg0,
      arg1,
      lpSrc,
      lpDst,
      dwBufLen,
      uFlag,
    );
  }

  _dart_ImmGetConversionListW? _ImmGetConversionListW;

  int ImmNotifyIME(
    ffi.Pointer<HIMC__> arg0,
    int dwAction,
    int dwIndex,
    int dwValue,
  ) {
    return (_ImmNotifyIME ??= _dylib
        .lookupFunction<_c_ImmNotifyIME, _dart_ImmNotifyIME>('ImmNotifyIME'))(
      arg0,
      dwAction,
      dwIndex,
      dwValue,
    );
  }

  _dart_ImmNotifyIME? _ImmNotifyIME;

  int ImmGetStatusWindowPos(
    ffi.Pointer<HIMC__> arg0,
    ffi.Pointer<LPPOINT> lpptPos,
  ) {
    return (_ImmGetStatusWindowPos ??= _dylib.lookupFunction<
        _c_ImmGetStatusWindowPos,
        _dart_ImmGetStatusWindowPos>('ImmGetStatusWindowPos'))(
      arg0,
      lpptPos,
    );
  }

  _dart_ImmGetStatusWindowPos? _ImmGetStatusWindowPos;

  int ImmSetStatusWindowPos(
    ffi.Pointer<HIMC__> arg0,
    ffi.Pointer<LPPOINT> lpptPos,
  ) {
    return (_ImmSetStatusWindowPos ??= _dylib.lookupFunction<
        _c_ImmSetStatusWindowPos,
        _dart_ImmSetStatusWindowPos>('ImmSetStatusWindowPos'))(
      arg0,
      lpptPos,
    );
  }

  _dart_ImmSetStatusWindowPos? _ImmSetStatusWindowPos;

  int ImmGetCompositionWindow(
    ffi.Pointer<HIMC__> arg0,
    ffi.Pointer<LPCOMPOSITIONFORM> lpCompForm,
  ) {
    return (_ImmGetCompositionWindow ??= _dylib.lookupFunction<
        _c_ImmGetCompositionWindow,
        _dart_ImmGetCompositionWindow>('ImmGetCompositionWindow'))(
      arg0,
      lpCompForm,
    );
  }

  _dart_ImmGetCompositionWindow? _ImmGetCompositionWindow;

  int ImmSetCompositionWindow(
    ffi.Pointer<HIMC__> arg0,
    ffi.Pointer<LPCOMPOSITIONFORM> lpCompForm,
  ) {
    return (_ImmSetCompositionWindow ??= _dylib.lookupFunction<
        _c_ImmSetCompositionWindow,
        _dart_ImmSetCompositionWindow>('ImmSetCompositionWindow'))(
      arg0,
      lpCompForm,
    );
  }

  _dart_ImmSetCompositionWindow? _ImmSetCompositionWindow;

  int ImmGetCandidateWindow(
    ffi.Pointer<HIMC__> arg0,
    int arg1,
    ffi.Pointer<LPCANDIDATEFORM> lpCandidate,
  ) {
    return (_ImmGetCandidateWindow ??= _dylib.lookupFunction<
        _c_ImmGetCandidateWindow,
        _dart_ImmGetCandidateWindow>('ImmGetCandidateWindow'))(
      arg0,
      arg1,
      lpCandidate,
    );
  }

  _dart_ImmGetCandidateWindow? _ImmGetCandidateWindow;

  int ImmSetCandidateWindow(
    ffi.Pointer<HIMC__> arg0,
    ffi.Pointer<LPCANDIDATEFORM> lpCandidate,
  ) {
    return (_ImmSetCandidateWindow ??= _dylib.lookupFunction<
        _c_ImmSetCandidateWindow,
        _dart_ImmSetCandidateWindow>('ImmSetCandidateWindow'))(
      arg0,
      lpCandidate,
    );
  }

  _dart_ImmSetCandidateWindow? _ImmSetCandidateWindow;

  int ImmIsUIMessageA(
    ffi.Pointer<HWND__> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return (_ImmIsUIMessageA ??=
        _dylib.lookupFunction<_c_ImmIsUIMessageA, _dart_ImmIsUIMessageA>(
            'ImmIsUIMessageA'))(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_ImmIsUIMessageA? _ImmIsUIMessageA;

  int ImmIsUIMessageW(
    ffi.Pointer<HWND__> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return (_ImmIsUIMessageW ??=
        _dylib.lookupFunction<_c_ImmIsUIMessageW, _dart_ImmIsUIMessageW>(
            'ImmIsUIMessageW'))(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_ImmIsUIMessageW? _ImmIsUIMessageW;

  int ImmGetVirtualKey(
    ffi.Pointer<HWND__> arg0,
  ) {
    return (_ImmGetVirtualKey ??=
        _dylib.lookupFunction<_c_ImmGetVirtualKey, _dart_ImmGetVirtualKey>(
            'ImmGetVirtualKey'))(
      arg0,
    );
  }

  _dart_ImmGetVirtualKey? _ImmGetVirtualKey;

  int ImmRegisterWordA(
    ffi.Pointer<HKL__> arg0,
    ffi.Pointer<ffi.Int8> lpszReading,
    int arg2,
    ffi.Pointer<ffi.Int8> lpszRegister,
  ) {
    return (_ImmRegisterWordA ??=
        _dylib.lookupFunction<_c_ImmRegisterWordA, _dart_ImmRegisterWordA>(
            'ImmRegisterWordA'))(
      arg0,
      lpszReading,
      arg2,
      lpszRegister,
    );
  }

  _dart_ImmRegisterWordA? _ImmRegisterWordA;

  int ImmRegisterWordW(
    ffi.Pointer<HKL__> arg0,
    ffi.Pointer<ffi.Uint16> lpszReading,
    int arg2,
    ffi.Pointer<ffi.Uint16> lpszRegister,
  ) {
    return (_ImmRegisterWordW ??=
        _dylib.lookupFunction<_c_ImmRegisterWordW, _dart_ImmRegisterWordW>(
            'ImmRegisterWordW'))(
      arg0,
      lpszReading,
      arg2,
      lpszRegister,
    );
  }

  _dart_ImmRegisterWordW? _ImmRegisterWordW;

  int ImmUnregisterWordA(
    ffi.Pointer<HKL__> arg0,
    ffi.Pointer<ffi.Int8> lpszReading,
    int arg2,
    ffi.Pointer<ffi.Int8> lpszUnregister,
  ) {
    return (_ImmUnregisterWordA ??=
        _dylib.lookupFunction<_c_ImmUnregisterWordA, _dart_ImmUnregisterWordA>(
            'ImmUnregisterWordA'))(
      arg0,
      lpszReading,
      arg2,
      lpszUnregister,
    );
  }

  _dart_ImmUnregisterWordA? _ImmUnregisterWordA;

  int ImmUnregisterWordW(
    ffi.Pointer<HKL__> arg0,
    ffi.Pointer<ffi.Uint16> lpszReading,
    int arg2,
    ffi.Pointer<ffi.Uint16> lpszUnregister,
  ) {
    return (_ImmUnregisterWordW ??=
        _dylib.lookupFunction<_c_ImmUnregisterWordW, _dart_ImmUnregisterWordW>(
            'ImmUnregisterWordW'))(
      arg0,
      lpszReading,
      arg2,
      lpszUnregister,
    );
  }

  _dart_ImmUnregisterWordW? _ImmUnregisterWordW;

  int ImmGetRegisterWordStyleA(
    ffi.Pointer<HKL__> arg0,
    int nItem,
    ffi.Pointer<LPSTYLEBUFA> lpStyleBuf,
  ) {
    return (_ImmGetRegisterWordStyleA ??= _dylib.lookupFunction<
        _c_ImmGetRegisterWordStyleA,
        _dart_ImmGetRegisterWordStyleA>('ImmGetRegisterWordStyleA'))(
      arg0,
      nItem,
      lpStyleBuf,
    );
  }

  _dart_ImmGetRegisterWordStyleA? _ImmGetRegisterWordStyleA;

  int ImmGetRegisterWordStyleW(
    ffi.Pointer<HKL__> arg0,
    int nItem,
    ffi.Pointer<LPSTYLEBUFW> lpStyleBuf,
  ) {
    return (_ImmGetRegisterWordStyleW ??= _dylib.lookupFunction<
        _c_ImmGetRegisterWordStyleW,
        _dart_ImmGetRegisterWordStyleW>('ImmGetRegisterWordStyleW'))(
      arg0,
      nItem,
      lpStyleBuf,
    );
  }

  _dart_ImmGetRegisterWordStyleW? _ImmGetRegisterWordStyleW;

  int ImmEnumRegisterWordA(
    ffi.Pointer<HKL__> arg0,
    ffi.Pointer<ffi.NativeFunction<REGISTERWORDENUMPROCA>> arg1,
    ffi.Pointer<ffi.Int8> lpszReading,
    int arg3,
    ffi.Pointer<ffi.Int8> lpszRegister,
    ffi.Pointer<ffi.Void> arg5,
  ) {
    return (_ImmEnumRegisterWordA ??= _dylib.lookupFunction<
        _c_ImmEnumRegisterWordA,
        _dart_ImmEnumRegisterWordA>('ImmEnumRegisterWordA'))(
      arg0,
      arg1,
      lpszReading,
      arg3,
      lpszRegister,
      arg5,
    );
  }

  _dart_ImmEnumRegisterWordA? _ImmEnumRegisterWordA;

  int ImmEnumRegisterWordW(
    ffi.Pointer<HKL__> arg0,
    ffi.Pointer<ffi.NativeFunction<REGISTERWORDENUMPROCW>> arg1,
    ffi.Pointer<ffi.Uint16> lpszReading,
    int arg3,
    ffi.Pointer<ffi.Uint16> lpszRegister,
    ffi.Pointer<ffi.Void> arg5,
  ) {
    return (_ImmEnumRegisterWordW ??= _dylib.lookupFunction<
        _c_ImmEnumRegisterWordW,
        _dart_ImmEnumRegisterWordW>('ImmEnumRegisterWordW'))(
      arg0,
      arg1,
      lpszReading,
      arg3,
      lpszRegister,
      arg5,
    );
  }

  _dart_ImmEnumRegisterWordW? _ImmEnumRegisterWordW;

  int ImmDisableIME(
    int arg0,
  ) {
    return (_ImmDisableIME ??=
        _dylib.lookupFunction<_c_ImmDisableIME, _dart_ImmDisableIME>(
            'ImmDisableIME'))(
      arg0,
    );
  }

  _dart_ImmDisableIME? _ImmDisableIME;

  int ImmEnumInputContext(
    int idThread,
    ffi.Pointer<ffi.NativeFunction<IMCENUMPROC>> lpfn,
    int lParam,
  ) {
    return (_ImmEnumInputContext ??= _dylib.lookupFunction<
        _c_ImmEnumInputContext,
        _dart_ImmEnumInputContext>('ImmEnumInputContext'))(
      idThread,
      lpfn,
      lParam,
    );
  }

  _dart_ImmEnumInputContext? _ImmEnumInputContext;

  int ImmGetImeMenuItemsA(
    ffi.Pointer<HIMC__> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<LPIMEMENUITEMINFOA> lpImeParentMenu,
    ffi.Pointer<LPIMEMENUITEMINFOA> lpImeMenu,
    int dwSize,
  ) {
    return (_ImmGetImeMenuItemsA ??= _dylib.lookupFunction<
        _c_ImmGetImeMenuItemsA,
        _dart_ImmGetImeMenuItemsA>('ImmGetImeMenuItemsA'))(
      arg0,
      arg1,
      arg2,
      lpImeParentMenu,
      lpImeMenu,
      dwSize,
    );
  }

  _dart_ImmGetImeMenuItemsA? _ImmGetImeMenuItemsA;

  int ImmGetImeMenuItemsW(
    ffi.Pointer<HIMC__> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<LPIMEMENUITEMINFOW> lpImeParentMenu,
    ffi.Pointer<LPIMEMENUITEMINFOW> lpImeMenu,
    int dwSize,
  ) {
    return (_ImmGetImeMenuItemsW ??= _dylib.lookupFunction<
        _c_ImmGetImeMenuItemsW,
        _dart_ImmGetImeMenuItemsW>('ImmGetImeMenuItemsW'))(
      arg0,
      arg1,
      arg2,
      lpImeParentMenu,
      lpImeMenu,
      dwSize,
    );
  }

  _dart_ImmGetImeMenuItemsW? _ImmGetImeMenuItemsW;

  int ImmDisableTextFrameService(
    int idThread,
  ) {
    return (_ImmDisableTextFrameService ??= _dylib.lookupFunction<
        _c_ImmDisableTextFrameService,
        _dart_ImmDisableTextFrameService>('ImmDisableTextFrameService'))(
      idThread,
    );
  }

  _dart_ImmDisableTextFrameService? _ImmDisableTextFrameService;

  int ImmDisableLegacyIME() {
    return (_ImmDisableLegacyIME ??= _dylib.lookupFunction<
        _c_ImmDisableLegacyIME,
        _dart_ImmDisableLegacyIME>('ImmDisableLegacyIME'))();
  }

  _dart_ImmDisableLegacyIME? _ImmDisableLegacyIME;

  void _fperrraise(
    int _Except,
  ) {
    return (__fperrraise ??= _dylib
        .lookupFunction<_c__fperrraise, _dart__fperrraise>('_fperrraise'))(
      _Except,
    );
  }

  _dart__fperrraise? __fperrraise;

  int _dclass(
    double _X,
  ) {
    return (__dclass ??=
        _dylib.lookupFunction<_c__dclass, _dart__dclass>('_dclass'))(
      _X,
    );
  }

  _dart__dclass? __dclass;

  int _fdclass(
    double _X,
  ) {
    return (__fdclass ??=
        _dylib.lookupFunction<_c__fdclass, _dart__fdclass>('_fdclass'))(
      _X,
    );
  }

  _dart__fdclass? __fdclass;

  int _dsign(
    double _X,
  ) {
    return (__dsign ??=
        _dylib.lookupFunction<_c__dsign, _dart__dsign>('_dsign'))(
      _X,
    );
  }

  _dart__dsign? __dsign;

  int _fdsign(
    double _X,
  ) {
    return (__fdsign ??=
        _dylib.lookupFunction<_c__fdsign, _dart__fdsign>('_fdsign'))(
      _X,
    );
  }

  _dart__fdsign? __fdsign;

  int _dpcomp(
    double _X,
    double _Y,
  ) {
    return (__dpcomp ??=
        _dylib.lookupFunction<_c__dpcomp, _dart__dpcomp>('_dpcomp'))(
      _X,
      _Y,
    );
  }

  _dart__dpcomp? __dpcomp;

  int _fdpcomp(
    double _X,
    double _Y,
  ) {
    return (__fdpcomp ??=
        _dylib.lookupFunction<_c__fdpcomp, _dart__fdpcomp>('_fdpcomp'))(
      _X,
      _Y,
    );
  }

  _dart__fdpcomp? __fdpcomp;

  int _dtest(
    ffi.Pointer<ffi.Double> _Px,
  ) {
    return (__dtest ??=
        _dylib.lookupFunction<_c__dtest, _dart__dtest>('_dtest'))(
      _Px,
    );
  }

  _dart__dtest? __dtest;

  int _fdtest(
    ffi.Pointer<ffi.Float> _Px,
  ) {
    return (__fdtest ??=
        _dylib.lookupFunction<_c__fdtest, _dart__fdtest>('_fdtest'))(
      _Px,
    );
  }

  _dart__fdtest? __fdtest;

  int _d_int(
    ffi.Pointer<ffi.Double> _Px,
    int _Xexp,
  ) {
    return (__d_int ??=
        _dylib.lookupFunction<_c__d_int, _dart__d_int>('_d_int'))(
      _Px,
      _Xexp,
    );
  }

  _dart__d_int? __d_int;

  int _fd_int(
    ffi.Pointer<ffi.Float> _Px,
    int _Xexp,
  ) {
    return (__fd_int ??=
        _dylib.lookupFunction<_c__fd_int, _dart__fd_int>('_fd_int'))(
      _Px,
      _Xexp,
    );
  }

  _dart__fd_int? __fd_int;

  int _dscale(
    ffi.Pointer<ffi.Double> _Px,
    int _Lexp,
  ) {
    return (__dscale ??=
        _dylib.lookupFunction<_c__dscale, _dart__dscale>('_dscale'))(
      _Px,
      _Lexp,
    );
  }

  _dart__dscale? __dscale;

  int _fdscale(
    ffi.Pointer<ffi.Float> _Px,
    int _Lexp,
  ) {
    return (__fdscale ??=
        _dylib.lookupFunction<_c__fdscale, _dart__fdscale>('_fdscale'))(
      _Px,
      _Lexp,
    );
  }

  _dart__fdscale? __fdscale;

  int _dunscale(
    ffi.Pointer<ffi.Int16> _Pex,
    ffi.Pointer<ffi.Double> _Px,
  ) {
    return (__dunscale ??=
        _dylib.lookupFunction<_c__dunscale, _dart__dunscale>('_dunscale'))(
      _Pex,
      _Px,
    );
  }

  _dart__dunscale? __dunscale;

  int _fdunscale(
    ffi.Pointer<ffi.Int16> _Pex,
    ffi.Pointer<ffi.Float> _Px,
  ) {
    return (__fdunscale ??=
        _dylib.lookupFunction<_c__fdunscale, _dart__fdunscale>('_fdunscale'))(
      _Pex,
      _Px,
    );
  }

  _dart__fdunscale? __fdunscale;

  int _dexp(
    ffi.Pointer<ffi.Double> _Px,
    double _Y,
    int _Eoff,
  ) {
    return (__dexp ??= _dylib.lookupFunction<_c__dexp, _dart__dexp>('_dexp'))(
      _Px,
      _Y,
      _Eoff,
    );
  }

  _dart__dexp? __dexp;

  int _fdexp(
    ffi.Pointer<ffi.Float> _Px,
    double _Y,
    int _Eoff,
  ) {
    return (__fdexp ??=
        _dylib.lookupFunction<_c__fdexp, _dart__fdexp>('_fdexp'))(
      _Px,
      _Y,
      _Eoff,
    );
  }

  _dart__fdexp? __fdexp;

  int _dnorm(
    ffi.Pointer<ffi.Uint16> _Ps,
  ) {
    return (__dnorm ??=
        _dylib.lookupFunction<_c__dnorm, _dart__dnorm>('_dnorm'))(
      _Ps,
    );
  }

  _dart__dnorm? __dnorm;

  int _fdnorm(
    ffi.Pointer<ffi.Uint16> _Ps,
  ) {
    return (__fdnorm ??=
        _dylib.lookupFunction<_c__fdnorm, _dart__fdnorm>('_fdnorm'))(
      _Ps,
    );
  }

  _dart__fdnorm? __fdnorm;

  double _dpoly(
    double _X,
    ffi.Pointer<ffi.Double> _Tab,
    int _N,
  ) {
    return (__dpoly ??=
        _dylib.lookupFunction<_c__dpoly, _dart__dpoly>('_dpoly'))(
      _X,
      _Tab,
      _N,
    );
  }

  _dart__dpoly? __dpoly;

  double _fdpoly(
    double _X,
    ffi.Pointer<ffi.Float> _Tab,
    int _N,
  ) {
    return (__fdpoly ??=
        _dylib.lookupFunction<_c__fdpoly, _dart__fdpoly>('_fdpoly'))(
      _X,
      _Tab,
      _N,
    );
  }

  _dart__fdpoly? __fdpoly;

  double _dlog(
    double _X,
    int _Baseflag,
  ) {
    return (__dlog ??= _dylib.lookupFunction<_c__dlog, _dart__dlog>('_dlog'))(
      _X,
      _Baseflag,
    );
  }

  _dart__dlog? __dlog;

  double _fdlog(
    double _X,
    int _Baseflag,
  ) {
    return (__fdlog ??=
        _dylib.lookupFunction<_c__fdlog, _dart__fdlog>('_fdlog'))(
      _X,
      _Baseflag,
    );
  }

  _dart__fdlog? __fdlog;

  double _dsin(
    double _X,
    int _Qoff,
  ) {
    return (__dsin ??= _dylib.lookupFunction<_c__dsin, _dart__dsin>('_dsin'))(
      _X,
      _Qoff,
    );
  }

  _dart__dsin? __dsin;

  double _fdsin(
    double _X,
    int _Qoff,
  ) {
    return (__fdsin ??=
        _dylib.lookupFunction<_c__fdsin, _dart__fdsin>('_fdsin'))(
      _X,
      _Qoff,
    );
  }

  _dart__fdsin? __fdsin;

  int abs(
    int _X,
  ) {
    return (_abs ??= _dylib.lookupFunction<_c_abs, _dart_abs>('abs'))(
      _X,
    );
  }

  _dart_abs? _abs;

  int labs(
    int _X,
  ) {
    return (_labs ??= _dylib.lookupFunction<_c_labs, _dart_labs>('labs'))(
      _X,
    );
  }

  _dart_labs? _labs;

  int llabs(
    int _X,
  ) {
    return (_llabs ??= _dylib.lookupFunction<_c_llabs, _dart_llabs>('llabs'))(
      _X,
    );
  }

  _dart_llabs? _llabs;

  double acos(
    double _X,
  ) {
    return (_acos ??= _dylib.lookupFunction<_c_acos, _dart_acos>('acos'))(
      _X,
    );
  }

  _dart_acos? _acos;

  double asin(
    double _X,
  ) {
    return (_asin ??= _dylib.lookupFunction<_c_asin, _dart_asin>('asin'))(
      _X,
    );
  }

  _dart_asin? _asin;

  double atan(
    double _X,
  ) {
    return (_atan ??= _dylib.lookupFunction<_c_atan, _dart_atan>('atan'))(
      _X,
    );
  }

  _dart_atan? _atan;

  double atan2(
    double _Y,
    double _X,
  ) {
    return (_atan2 ??= _dylib.lookupFunction<_c_atan2, _dart_atan2>('atan2'))(
      _Y,
      _X,
    );
  }

  _dart_atan2? _atan2;

  double cos(
    double _X,
  ) {
    return (_cos ??= _dylib.lookupFunction<_c_cos, _dart_cos>('cos'))(
      _X,
    );
  }

  _dart_cos? _cos;

  double cosh(
    double _X,
  ) {
    return (_cosh ??= _dylib.lookupFunction<_c_cosh, _dart_cosh>('cosh'))(
      _X,
    );
  }

  _dart_cosh? _cosh;

  double exp(
    double _X,
  ) {
    return (_exp ??= _dylib.lookupFunction<_c_exp, _dart_exp>('exp'))(
      _X,
    );
  }

  _dart_exp? _exp;

  double fabs(
    double _X,
  ) {
    return (_fabs ??= _dylib.lookupFunction<_c_fabs, _dart_fabs>('fabs'))(
      _X,
    );
  }

  _dart_fabs? _fabs;

  double fmod(
    double _X,
    double _Y,
  ) {
    return (_fmod ??= _dylib.lookupFunction<_c_fmod, _dart_fmod>('fmod'))(
      _X,
      _Y,
    );
  }

  _dart_fmod? _fmod;

  double log(
    double _X,
  ) {
    return (_log ??= _dylib.lookupFunction<_c_log, _dart_log>('log'))(
      _X,
    );
  }

  _dart_log? _log;

  double log10(
    double _X,
  ) {
    return (_log10 ??= _dylib.lookupFunction<_c_log10, _dart_log10>('log10'))(
      _X,
    );
  }

  _dart_log10? _log10;

  double pow(
    double _X,
    double _Y,
  ) {
    return (_pow ??= _dylib.lookupFunction<_c_pow, _dart_pow>('pow'))(
      _X,
      _Y,
    );
  }

  _dart_pow? _pow;

  double sin(
    double _X,
  ) {
    return (_sin ??= _dylib.lookupFunction<_c_sin, _dart_sin>('sin'))(
      _X,
    );
  }

  _dart_sin? _sin;

  double sinh(
    double _X,
  ) {
    return (_sinh ??= _dylib.lookupFunction<_c_sinh, _dart_sinh>('sinh'))(
      _X,
    );
  }

  _dart_sinh? _sinh;

  double sqrt(
    double _X,
  ) {
    return (_sqrt ??= _dylib.lookupFunction<_c_sqrt, _dart_sqrt>('sqrt'))(
      _X,
    );
  }

  _dart_sqrt? _sqrt;

  double tan(
    double _X,
  ) {
    return (_tan ??= _dylib.lookupFunction<_c_tan, _dart_tan>('tan'))(
      _X,
    );
  }

  _dart_tan? _tan;

  double tanh(
    double _X,
  ) {
    return (_tanh ??= _dylib.lookupFunction<_c_tanh, _dart_tanh>('tanh'))(
      _X,
    );
  }

  _dart_tanh? _tanh;

  double acosh(
    double _X,
  ) {
    return (_acosh ??= _dylib.lookupFunction<_c_acosh, _dart_acosh>('acosh'))(
      _X,
    );
  }

  _dart_acosh? _acosh;

  double asinh(
    double _X,
  ) {
    return (_asinh ??= _dylib.lookupFunction<_c_asinh, _dart_asinh>('asinh'))(
      _X,
    );
  }

  _dart_asinh? _asinh;

  double atanh(
    double _X,
  ) {
    return (_atanh ??= _dylib.lookupFunction<_c_atanh, _dart_atanh>('atanh'))(
      _X,
    );
  }

  _dart_atanh? _atanh;

  double atof(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return (_atof ??= _dylib.lookupFunction<_c_atof, _dart_atof>('atof'))(
      _String,
    );
  }

  _dart_atof? _atof;

  double _atof_l(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__atof_l ??=
        _dylib.lookupFunction<_c__atof_l, _dart__atof_l>('_atof_l'))(
      _String,
      _Locale,
    );
  }

  _dart__atof_l? __atof_l;

  double cbrt(
    double _X,
  ) {
    return (_cbrt ??= _dylib.lookupFunction<_c_cbrt, _dart_cbrt>('cbrt'))(
      _X,
    );
  }

  _dart_cbrt? _cbrt;

  double ceil(
    double _X,
  ) {
    return (_ceil ??= _dylib.lookupFunction<_c_ceil, _dart_ceil>('ceil'))(
      _X,
    );
  }

  _dart_ceil? _ceil;

  double _chgsign(
    double _X,
  ) {
    return (__chgsign ??=
        _dylib.lookupFunction<_c__chgsign, _dart__chgsign>('_chgsign'))(
      _X,
    );
  }

  _dart__chgsign? __chgsign;

  double copysign(
    double _Number,
    double _Sign,
  ) {
    return (_copysign_1 ??=
        _dylib.lookupFunction<_c_copysign, _dart_copysign>('copysign'))(
      _Number,
      _Sign,
    );
  }

  _dart_copysign? _copysign_1;

  double _copysign(
    double _Number,
    double _Sign,
  ) {
    return (__copysign ??=
        _dylib.lookupFunction<_c__copysign, _dart__copysign>('_copysign'))(
      _Number,
      _Sign,
    );
  }

  _dart__copysign? __copysign;

  double erf(
    double _X,
  ) {
    return (_erf ??= _dylib.lookupFunction<_c_erf, _dart_erf>('erf'))(
      _X,
    );
  }

  _dart_erf? _erf;

  double erfc(
    double _X,
  ) {
    return (_erfc ??= _dylib.lookupFunction<_c_erfc, _dart_erfc>('erfc'))(
      _X,
    );
  }

  _dart_erfc? _erfc;

  double exp2(
    double _X,
  ) {
    return (_exp2 ??= _dylib.lookupFunction<_c_exp2, _dart_exp2>('exp2'))(
      _X,
    );
  }

  _dart_exp2? _exp2;

  double expm1(
    double _X,
  ) {
    return (_expm1 ??= _dylib.lookupFunction<_c_expm1, _dart_expm1>('expm1'))(
      _X,
    );
  }

  _dart_expm1? _expm1;

  double fdim(
    double _X,
    double _Y,
  ) {
    return (_fdim ??= _dylib.lookupFunction<_c_fdim, _dart_fdim>('fdim'))(
      _X,
      _Y,
    );
  }

  _dart_fdim? _fdim;

  double floor(
    double _X,
  ) {
    return (_floor ??= _dylib.lookupFunction<_c_floor, _dart_floor>('floor'))(
      _X,
    );
  }

  _dart_floor? _floor;

  double fma(
    double _X,
    double _Y,
    double _Z,
  ) {
    return (_fma ??= _dylib.lookupFunction<_c_fma, _dart_fma>('fma'))(
      _X,
      _Y,
      _Z,
    );
  }

  _dart_fma? _fma;

  double fmax(
    double _X,
    double _Y,
  ) {
    return (_fmax ??= _dylib.lookupFunction<_c_fmax, _dart_fmax>('fmax'))(
      _X,
      _Y,
    );
  }

  _dart_fmax? _fmax;

  double fmin(
    double _X,
    double _Y,
  ) {
    return (_fmin ??= _dylib.lookupFunction<_c_fmin, _dart_fmin>('fmin'))(
      _X,
      _Y,
    );
  }

  _dart_fmin? _fmin;

  double frexp(
    double _X,
    ffi.Pointer<ffi.Int32> _Y,
  ) {
    return (_frexp ??= _dylib.lookupFunction<_c_frexp, _dart_frexp>('frexp'))(
      _X,
      _Y,
    );
  }

  _dart_frexp? _frexp;

  double hypot(
    double _X,
    double _Y,
  ) {
    return (_hypot_1 ??= _dylib.lookupFunction<_c_hypot, _dart_hypot>('hypot'))(
      _X,
      _Y,
    );
  }

  _dart_hypot? _hypot_1;

  double _hypot(
    double _X,
    double _Y,
  ) {
    return (__hypot ??=
        _dylib.lookupFunction<_c__hypot, _dart__hypot>('_hypot'))(
      _X,
      _Y,
    );
  }

  _dart__hypot? __hypot;

  int ilogb(
    double _X,
  ) {
    return (_ilogb ??= _dylib.lookupFunction<_c_ilogb, _dart_ilogb>('ilogb'))(
      _X,
    );
  }

  _dart_ilogb? _ilogb;

  double ldexp(
    double _X,
    int _Y,
  ) {
    return (_ldexp ??= _dylib.lookupFunction<_c_ldexp, _dart_ldexp>('ldexp'))(
      _X,
      _Y,
    );
  }

  _dart_ldexp? _ldexp;

  double lgamma(
    double _X,
  ) {
    return (_lgamma ??=
        _dylib.lookupFunction<_c_lgamma, _dart_lgamma>('lgamma'))(
      _X,
    );
  }

  _dart_lgamma? _lgamma;

  int llrint(
    double _X,
  ) {
    return (_llrint ??=
        _dylib.lookupFunction<_c_llrint, _dart_llrint>('llrint'))(
      _X,
    );
  }

  _dart_llrint? _llrint;

  int llround(
    double _X,
  ) {
    return (_llround ??=
        _dylib.lookupFunction<_c_llround, _dart_llround>('llround'))(
      _X,
    );
  }

  _dart_llround? _llround;

  double log1p(
    double _X,
  ) {
    return (_log1p ??= _dylib.lookupFunction<_c_log1p, _dart_log1p>('log1p'))(
      _X,
    );
  }

  _dart_log1p? _log1p;

  double log2(
    double _X,
  ) {
    return (_log2 ??= _dylib.lookupFunction<_c_log2, _dart_log2>('log2'))(
      _X,
    );
  }

  _dart_log2? _log2;

  double logb(
    double _X,
  ) {
    return (_logb ??= _dylib.lookupFunction<_c_logb, _dart_logb>('logb'))(
      _X,
    );
  }

  _dart_logb? _logb;

  int lrint(
    double _X,
  ) {
    return (_lrint ??= _dylib.lookupFunction<_c_lrint, _dart_lrint>('lrint'))(
      _X,
    );
  }

  _dart_lrint? _lrint;

  int lround(
    double _X,
  ) {
    return (_lround ??=
        _dylib.lookupFunction<_c_lround, _dart_lround>('lround'))(
      _X,
    );
  }

  _dart_lround? _lround;

  int _matherr(
    ffi.Pointer<_exception> _Except,
  ) {
    return (__matherr ??=
        _dylib.lookupFunction<_c__matherr, _dart__matherr>('_matherr'))(
      _Except,
    );
  }

  _dart__matherr? __matherr;

  double modf(
    double _X,
    ffi.Pointer<ffi.Double> _Y,
  ) {
    return (_modf ??= _dylib.lookupFunction<_c_modf, _dart_modf>('modf'))(
      _X,
      _Y,
    );
  }

  _dart_modf? _modf;

  double nan(
    ffi.Pointer<ffi.Int8> _X,
  ) {
    return (_nan ??= _dylib.lookupFunction<_c_nan, _dart_nan>('nan'))(
      _X,
    );
  }

  _dart_nan? _nan;

  double nearbyint(
    double _X,
  ) {
    return (_nearbyint ??=
        _dylib.lookupFunction<_c_nearbyint, _dart_nearbyint>('nearbyint'))(
      _X,
    );
  }

  _dart_nearbyint? _nearbyint;

  double nextafter(
    double _X,
    double _Y,
  ) {
    return (_nextafter ??=
        _dylib.lookupFunction<_c_nextafter, _dart_nextafter>('nextafter'))(
      _X,
      _Y,
    );
  }

  _dart_nextafter? _nextafter;

  double remainder(
    double _X,
    double _Y,
  ) {
    return (_remainder ??=
        _dylib.lookupFunction<_c_remainder, _dart_remainder>('remainder'))(
      _X,
      _Y,
    );
  }

  _dart_remainder? _remainder;

  double remquo(
    double _X,
    double _Y,
    ffi.Pointer<ffi.Int32> _Z,
  ) {
    return (_remquo ??=
        _dylib.lookupFunction<_c_remquo, _dart_remquo>('remquo'))(
      _X,
      _Y,
      _Z,
    );
  }

  _dart_remquo? _remquo;

  double rint(
    double _X,
  ) {
    return (_rint ??= _dylib.lookupFunction<_c_rint, _dart_rint>('rint'))(
      _X,
    );
  }

  _dart_rint? _rint;

  double round(
    double _X,
  ) {
    return (_round ??= _dylib.lookupFunction<_c_round, _dart_round>('round'))(
      _X,
    );
  }

  _dart_round? _round;

  double scalbln(
    double _X,
    int _Y,
  ) {
    return (_scalbln ??=
        _dylib.lookupFunction<_c_scalbln, _dart_scalbln>('scalbln'))(
      _X,
      _Y,
    );
  }

  _dart_scalbln? _scalbln;

  double scalbn(
    double _X,
    int _Y,
  ) {
    return (_scalbn ??=
        _dylib.lookupFunction<_c_scalbn, _dart_scalbn>('scalbn'))(
      _X,
      _Y,
    );
  }

  _dart_scalbn? _scalbn;

  double tgamma(
    double _X,
  ) {
    return (_tgamma ??=
        _dylib.lookupFunction<_c_tgamma, _dart_tgamma>('tgamma'))(
      _X,
    );
  }

  _dart_tgamma? _tgamma;

  double trunc(
    double _X,
  ) {
    return (_trunc ??= _dylib.lookupFunction<_c_trunc, _dart_trunc>('trunc'))(
      _X,
    );
  }

  _dart_trunc? _trunc;

  double _j0(
    double _X,
  ) {
    return (__j0 ??= _dylib.lookupFunction<_c__j0, _dart__j0>('_j0'))(
      _X,
    );
  }

  _dart__j0? __j0;

  double _j1(
    double _X,
  ) {
    return (__j1 ??= _dylib.lookupFunction<_c__j1, _dart__j1>('_j1'))(
      _X,
    );
  }

  _dart__j1? __j1;

  double _jn(
    int _X,
    double _Y,
  ) {
    return (__jn ??= _dylib.lookupFunction<_c__jn, _dart__jn>('_jn'))(
      _X,
      _Y,
    );
  }

  _dart__jn? __jn;

  double _y0(
    double _X,
  ) {
    return (__y0 ??= _dylib.lookupFunction<_c__y0, _dart__y0>('_y0'))(
      _X,
    );
  }

  _dart__y0? __y0;

  double _y1(
    double _X,
  ) {
    return (__y1 ??= _dylib.lookupFunction<_c__y1, _dart__y1>('_y1'))(
      _X,
    );
  }

  _dart__y1? __y1;

  double _yn(
    int _X,
    double _Y,
  ) {
    return (__yn ??= _dylib.lookupFunction<_c__yn, _dart__yn>('_yn'))(
      _X,
      _Y,
    );
  }

  _dart__yn? __yn;

  double acoshf(
    double _X,
  ) {
    return (_acoshf ??=
        _dylib.lookupFunction<_c_acoshf, _dart_acoshf>('acoshf'))(
      _X,
    );
  }

  _dart_acoshf? _acoshf;

  double asinhf(
    double _X,
  ) {
    return (_asinhf ??=
        _dylib.lookupFunction<_c_asinhf, _dart_asinhf>('asinhf'))(
      _X,
    );
  }

  _dart_asinhf? _asinhf;

  double atanhf(
    double _X,
  ) {
    return (_atanhf ??=
        _dylib.lookupFunction<_c_atanhf, _dart_atanhf>('atanhf'))(
      _X,
    );
  }

  _dart_atanhf? _atanhf;

  double cbrtf(
    double _X,
  ) {
    return (_cbrtf ??= _dylib.lookupFunction<_c_cbrtf, _dart_cbrtf>('cbrtf'))(
      _X,
    );
  }

  _dart_cbrtf? _cbrtf;

  double _chgsignf(
    double _X,
  ) {
    return (__chgsignf ??=
        _dylib.lookupFunction<_c__chgsignf, _dart__chgsignf>('_chgsignf'))(
      _X,
    );
  }

  _dart__chgsignf? __chgsignf;

  double copysignf(
    double _Number,
    double _Sign,
  ) {
    return (_copysignf_1 ??=
        _dylib.lookupFunction<_c_copysignf, _dart_copysignf>('copysignf'))(
      _Number,
      _Sign,
    );
  }

  _dart_copysignf? _copysignf_1;

  double _copysignf(
    double _Number,
    double _Sign,
  ) {
    return (__copysignf ??=
        _dylib.lookupFunction<_c__copysignf, _dart__copysignf>('_copysignf'))(
      _Number,
      _Sign,
    );
  }

  _dart__copysignf? __copysignf;

  double erff(
    double _X,
  ) {
    return (_erff ??= _dylib.lookupFunction<_c_erff, _dart_erff>('erff'))(
      _X,
    );
  }

  _dart_erff? _erff;

  double erfcf(
    double _X,
  ) {
    return (_erfcf ??= _dylib.lookupFunction<_c_erfcf, _dart_erfcf>('erfcf'))(
      _X,
    );
  }

  _dart_erfcf? _erfcf;

  double expm1f(
    double _X,
  ) {
    return (_expm1f ??=
        _dylib.lookupFunction<_c_expm1f, _dart_expm1f>('expm1f'))(
      _X,
    );
  }

  _dart_expm1f? _expm1f;

  double exp2f(
    double _X,
  ) {
    return (_exp2f ??= _dylib.lookupFunction<_c_exp2f, _dart_exp2f>('exp2f'))(
      _X,
    );
  }

  _dart_exp2f? _exp2f;

  double fdimf(
    double _X,
    double _Y,
  ) {
    return (_fdimf ??= _dylib.lookupFunction<_c_fdimf, _dart_fdimf>('fdimf'))(
      _X,
      _Y,
    );
  }

  _dart_fdimf? _fdimf;

  double fmaf(
    double _X,
    double _Y,
    double _Z,
  ) {
    return (_fmaf ??= _dylib.lookupFunction<_c_fmaf, _dart_fmaf>('fmaf'))(
      _X,
      _Y,
      _Z,
    );
  }

  _dart_fmaf? _fmaf;

  double fmaxf(
    double _X,
    double _Y,
  ) {
    return (_fmaxf ??= _dylib.lookupFunction<_c_fmaxf, _dart_fmaxf>('fmaxf'))(
      _X,
      _Y,
    );
  }

  _dart_fmaxf? _fmaxf;

  double fminf(
    double _X,
    double _Y,
  ) {
    return (_fminf ??= _dylib.lookupFunction<_c_fminf, _dart_fminf>('fminf'))(
      _X,
      _Y,
    );
  }

  _dart_fminf? _fminf;

  double _hypotf(
    double _X,
    double _Y,
  ) {
    return (__hypotf ??=
        _dylib.lookupFunction<_c__hypotf, _dart__hypotf>('_hypotf'))(
      _X,
      _Y,
    );
  }

  _dart__hypotf? __hypotf;

  int ilogbf(
    double _X,
  ) {
    return (_ilogbf ??=
        _dylib.lookupFunction<_c_ilogbf, _dart_ilogbf>('ilogbf'))(
      _X,
    );
  }

  _dart_ilogbf? _ilogbf;

  double lgammaf(
    double _X,
  ) {
    return (_lgammaf ??=
        _dylib.lookupFunction<_c_lgammaf, _dart_lgammaf>('lgammaf'))(
      _X,
    );
  }

  _dart_lgammaf? _lgammaf;

  int llrintf(
    double _X,
  ) {
    return (_llrintf ??=
        _dylib.lookupFunction<_c_llrintf, _dart_llrintf>('llrintf'))(
      _X,
    );
  }

  _dart_llrintf? _llrintf;

  int llroundf(
    double _X,
  ) {
    return (_llroundf ??=
        _dylib.lookupFunction<_c_llroundf, _dart_llroundf>('llroundf'))(
      _X,
    );
  }

  _dart_llroundf? _llroundf;

  double log1pf(
    double _X,
  ) {
    return (_log1pf ??=
        _dylib.lookupFunction<_c_log1pf, _dart_log1pf>('log1pf'))(
      _X,
    );
  }

  _dart_log1pf? _log1pf;

  double log2f(
    double _X,
  ) {
    return (_log2f ??= _dylib.lookupFunction<_c_log2f, _dart_log2f>('log2f'))(
      _X,
    );
  }

  _dart_log2f? _log2f;

  double logbf(
    double _X,
  ) {
    return (_logbf_1 ??= _dylib.lookupFunction<_c_logbf, _dart_logbf>('logbf'))(
      _X,
    );
  }

  _dart_logbf? _logbf_1;

  int lrintf(
    double _X,
  ) {
    return (_lrintf ??=
        _dylib.lookupFunction<_c_lrintf, _dart_lrintf>('lrintf'))(
      _X,
    );
  }

  _dart_lrintf? _lrintf;

  int lroundf(
    double _X,
  ) {
    return (_lroundf ??=
        _dylib.lookupFunction<_c_lroundf, _dart_lroundf>('lroundf'))(
      _X,
    );
  }

  _dart_lroundf? _lroundf;

  double nanf(
    ffi.Pointer<ffi.Int8> _X,
  ) {
    return (_nanf ??= _dylib.lookupFunction<_c_nanf, _dart_nanf>('nanf'))(
      _X,
    );
  }

  _dart_nanf? _nanf;

  double nearbyintf(
    double _X,
  ) {
    return (_nearbyintf ??=
        _dylib.lookupFunction<_c_nearbyintf, _dart_nearbyintf>('nearbyintf'))(
      _X,
    );
  }

  _dart_nearbyintf? _nearbyintf;

  double nextafterf(
    double _X,
    double _Y,
  ) {
    return (_nextafterf_1 ??=
        _dylib.lookupFunction<_c_nextafterf, _dart_nextafterf>('nextafterf'))(
      _X,
      _Y,
    );
  }

  _dart_nextafterf? _nextafterf_1;

  double remainderf(
    double _X,
    double _Y,
  ) {
    return (_remainderf ??=
        _dylib.lookupFunction<_c_remainderf, _dart_remainderf>('remainderf'))(
      _X,
      _Y,
    );
  }

  _dart_remainderf? _remainderf;

  double remquof(
    double _X,
    double _Y,
    ffi.Pointer<ffi.Int32> _Z,
  ) {
    return (_remquof ??=
        _dylib.lookupFunction<_c_remquof, _dart_remquof>('remquof'))(
      _X,
      _Y,
      _Z,
    );
  }

  _dart_remquof? _remquof;

  double rintf(
    double _X,
  ) {
    return (_rintf ??= _dylib.lookupFunction<_c_rintf, _dart_rintf>('rintf'))(
      _X,
    );
  }

  _dart_rintf? _rintf;

  double roundf(
    double _X,
  ) {
    return (_roundf ??=
        _dylib.lookupFunction<_c_roundf, _dart_roundf>('roundf'))(
      _X,
    );
  }

  _dart_roundf? _roundf;

  double scalblnf(
    double _X,
    int _Y,
  ) {
    return (_scalblnf ??=
        _dylib.lookupFunction<_c_scalblnf, _dart_scalblnf>('scalblnf'))(
      _X,
      _Y,
    );
  }

  _dart_scalblnf? _scalblnf;

  double scalbnf(
    double _X,
    int _Y,
  ) {
    return (_scalbnf ??=
        _dylib.lookupFunction<_c_scalbnf, _dart_scalbnf>('scalbnf'))(
      _X,
      _Y,
    );
  }

  _dart_scalbnf? _scalbnf;

  double tgammaf(
    double _X,
  ) {
    return (_tgammaf ??=
        _dylib.lookupFunction<_c_tgammaf, _dart_tgammaf>('tgammaf'))(
      _X,
    );
  }

  _dart_tgammaf? _tgammaf;

  double truncf(
    double _X,
  ) {
    return (_truncf ??=
        _dylib.lookupFunction<_c_truncf, _dart_truncf>('truncf'))(
      _X,
    );
  }

  _dart_truncf? _truncf;

  double _logbf(
    double _X,
  ) {
    return (__logbf ??=
        _dylib.lookupFunction<_c__logbf, _dart__logbf>('_logbf'))(
      _X,
    );
  }

  _dart__logbf? __logbf;

  double _nextafterf(
    double _X,
    double _Y,
  ) {
    return (__nextafterf ??= _dylib
        .lookupFunction<_c__nextafterf, _dart__nextafterf>('_nextafterf'))(
      _X,
      _Y,
    );
  }

  _dart__nextafterf? __nextafterf;

  int _finitef(
    double _X,
  ) {
    return (__finitef ??=
        _dylib.lookupFunction<_c__finitef, _dart__finitef>('_finitef'))(
      _X,
    );
  }

  _dart__finitef? __finitef;

  int _isnanf(
    double _X,
  ) {
    return (__isnanf ??=
        _dylib.lookupFunction<_c__isnanf, _dart__isnanf>('_isnanf'))(
      _X,
    );
  }

  _dart__isnanf? __isnanf;

  int _fpclassf(
    double _X,
  ) {
    return (__fpclassf ??=
        _dylib.lookupFunction<_c__fpclassf, _dart__fpclassf>('_fpclassf'))(
      _X,
    );
  }

  _dart__fpclassf? __fpclassf;

  int _set_FMA3_enable(
    int _Flag,
  ) {
    return (__set_FMA3_enable ??=
        _dylib.lookupFunction<_c__set_FMA3_enable, _dart__set_FMA3_enable>(
            '_set_FMA3_enable'))(
      _Flag,
    );
  }

  _dart__set_FMA3_enable? __set_FMA3_enable;

  int _get_FMA3_enable() {
    return (__get_FMA3_enable ??=
        _dylib.lookupFunction<_c__get_FMA3_enable, _dart__get_FMA3_enable>(
            '_get_FMA3_enable'))();
  }

  _dart__get_FMA3_enable? __get_FMA3_enable;

  double acosf(
    double _X,
  ) {
    return (_acosf ??= _dylib.lookupFunction<_c_acosf, _dart_acosf>('acosf'))(
      _X,
    );
  }

  _dart_acosf? _acosf;

  double asinf(
    double _X,
  ) {
    return (_asinf ??= _dylib.lookupFunction<_c_asinf, _dart_asinf>('asinf'))(
      _X,
    );
  }

  _dart_asinf? _asinf;

  double atan2f(
    double _Y,
    double _X,
  ) {
    return (_atan2f ??=
        _dylib.lookupFunction<_c_atan2f, _dart_atan2f>('atan2f'))(
      _Y,
      _X,
    );
  }

  _dart_atan2f? _atan2f;

  double atanf(
    double _X,
  ) {
    return (_atanf ??= _dylib.lookupFunction<_c_atanf, _dart_atanf>('atanf'))(
      _X,
    );
  }

  _dart_atanf? _atanf;

  double ceilf(
    double _X,
  ) {
    return (_ceilf ??= _dylib.lookupFunction<_c_ceilf, _dart_ceilf>('ceilf'))(
      _X,
    );
  }

  _dart_ceilf? _ceilf;

  double cosf(
    double _X,
  ) {
    return (_cosf ??= _dylib.lookupFunction<_c_cosf, _dart_cosf>('cosf'))(
      _X,
    );
  }

  _dart_cosf? _cosf;

  double coshf(
    double _X,
  ) {
    return (_coshf ??= _dylib.lookupFunction<_c_coshf, _dart_coshf>('coshf'))(
      _X,
    );
  }

  _dart_coshf? _coshf;

  double expf(
    double _X,
  ) {
    return (_expf ??= _dylib.lookupFunction<_c_expf, _dart_expf>('expf'))(
      _X,
    );
  }

  _dart_expf? _expf;

  double fabsf(
    double _X,
  ) {
    return (_fabsf ??= _dylib.lookupFunction<_c_fabsf, _dart_fabsf>('fabsf'))(
      _X,
    );
  }

  _dart_fabsf? _fabsf;

  double floorf(
    double _X,
  ) {
    return (_floorf ??=
        _dylib.lookupFunction<_c_floorf, _dart_floorf>('floorf'))(
      _X,
    );
  }

  _dart_floorf? _floorf;

  double fmodf(
    double _X,
    double _Y,
  ) {
    return (_fmodf ??= _dylib.lookupFunction<_c_fmodf, _dart_fmodf>('fmodf'))(
      _X,
      _Y,
    );
  }

  _dart_fmodf? _fmodf;

  double frexpf(
    double _X,
    ffi.Pointer<ffi.Int32> _Y,
  ) {
    return (_frexpf ??=
        _dylib.lookupFunction<_c_frexpf, _dart_frexpf>('frexpf'))(
      _X,
      _Y,
    );
  }

  _dart_frexpf? _frexpf;

  double hypotf(
    double _X,
    double _Y,
  ) {
    return (_hypotf_1 ??=
        _dylib.lookupFunction<_c_hypotf, _dart_hypotf>('hypotf'))(
      _X,
      _Y,
    );
  }

  _dart_hypotf? _hypotf_1;

  double ldexpf(
    double _X,
    int _Y,
  ) {
    return (_ldexpf ??=
        _dylib.lookupFunction<_c_ldexpf, _dart_ldexpf>('ldexpf'))(
      _X,
      _Y,
    );
  }

  _dart_ldexpf? _ldexpf;

  double log10f(
    double _X,
  ) {
    return (_log10f ??=
        _dylib.lookupFunction<_c_log10f, _dart_log10f>('log10f'))(
      _X,
    );
  }

  _dart_log10f? _log10f;

  double logf(
    double _X,
  ) {
    return (_logf ??= _dylib.lookupFunction<_c_logf, _dart_logf>('logf'))(
      _X,
    );
  }

  _dart_logf? _logf;

  double modff(
    double _X,
    ffi.Pointer<ffi.Float> _Y,
  ) {
    return (_modff ??= _dylib.lookupFunction<_c_modff, _dart_modff>('modff'))(
      _X,
      _Y,
    );
  }

  _dart_modff? _modff;

  double powf(
    double _X,
    double _Y,
  ) {
    return (_powf ??= _dylib.lookupFunction<_c_powf, _dart_powf>('powf'))(
      _X,
      _Y,
    );
  }

  _dart_powf? _powf;

  double sinf(
    double _X,
  ) {
    return (_sinf ??= _dylib.lookupFunction<_c_sinf, _dart_sinf>('sinf'))(
      _X,
    );
  }

  _dart_sinf? _sinf;

  double sinhf(
    double _X,
  ) {
    return (_sinhf ??= _dylib.lookupFunction<_c_sinhf, _dart_sinhf>('sinhf'))(
      _X,
    );
  }

  _dart_sinhf? _sinhf;

  double sqrtf(
    double _X,
  ) {
    return (_sqrtf ??= _dylib.lookupFunction<_c_sqrtf, _dart_sqrtf>('sqrtf'))(
      _X,
    );
  }

  _dart_sqrtf? _sqrtf;

  double tanf(
    double _X,
  ) {
    return (_tanf ??= _dylib.lookupFunction<_c_tanf, _dart_tanf>('tanf'))(
      _X,
    );
  }

  _dart_tanf? _tanf;

  double tanhf(
    double _X,
  ) {
    return (_tanhf ??= _dylib.lookupFunction<_c_tanhf, _dart_tanhf>('tanhf'))(
      _X,
    );
  }

  _dart_tanhf? _tanhf;

  double j0(
    double _X,
  ) {
    return (_j0_1 ??= _dylib.lookupFunction<_c_j0, _dart_j0>('j0'))(
      _X,
    );
  }

  _dart_j0? _j0_1;

  double j1(
    double _X,
  ) {
    return (_j1_1 ??= _dylib.lookupFunction<_c_j1, _dart_j1>('j1'))(
      _X,
    );
  }

  _dart_j1? _j1_1;

  double jn(
    int _X,
    double _Y,
  ) {
    return (_jn_1 ??= _dylib.lookupFunction<_c_jn, _dart_jn>('jn'))(
      _X,
      _Y,
    );
  }

  _dart_jn? _jn_1;

  double y0(
    double _X,
  ) {
    return (_y0_1 ??= _dylib.lookupFunction<_c_y0, _dart_y0>('y0'))(
      _X,
    );
  }

  _dart_y0? _y0_1;

  double y1(
    double _X,
  ) {
    return (_y1_1 ??= _dylib.lookupFunction<_c_y1, _dart_y1>('y1'))(
      _X,
    );
  }

  _dart_y1? _y1_1;

  double yn(
    int _X,
    double _Y,
  ) {
    return (_yn_1 ??= _dylib.lookupFunction<_c_yn, _dart_yn>('yn'))(
      _X,
      _Y,
    );
  }

  _dart_yn? _yn_1;

  ffi.Pointer<ffi.Void> _calloc_base(
    int _Count,
    int _Size,
  ) {
    return (__calloc_base ??= _dylib
        .lookupFunction<_c__calloc_base, _dart__calloc_base>('_calloc_base'))(
      _Count,
      _Size,
    );
  }

  _dart__calloc_base? __calloc_base;

  ffi.Pointer<ffi.Void> calloc(
    int _Count,
    int _Size,
  ) {
    return (_calloc ??=
        _dylib.lookupFunction<_c_calloc, _dart_calloc>('calloc'))(
      _Count,
      _Size,
    );
  }

  _dart_calloc? _calloc;

  int _callnewh(
    int _Size,
  ) {
    return (__callnewh ??=
        _dylib.lookupFunction<_c__callnewh, _dart__callnewh>('_callnewh'))(
      _Size,
    );
  }

  _dart__callnewh? __callnewh;

  ffi.Pointer<ffi.Void> _expand(
    ffi.Pointer<ffi.Void> _Block,
    int _Size,
  ) {
    return (__expand ??=
        _dylib.lookupFunction<_c__expand, _dart__expand>('_expand'))(
      _Block,
      _Size,
    );
  }

  _dart__expand? __expand;

  void _free_base(
    ffi.Pointer<ffi.Void> _Block,
  ) {
    return (__free_base ??=
        _dylib.lookupFunction<_c__free_base, _dart__free_base>('_free_base'))(
      _Block,
    );
  }

  _dart__free_base? __free_base;

  void free(
    ffi.Pointer<ffi.Void> _Block,
  ) {
    return (_free ??= _dylib.lookupFunction<_c_free, _dart_free>('free'))(
      _Block,
    );
  }

  _dart_free? _free;

  ffi.Pointer<ffi.Void> _malloc_base(
    int _Size,
  ) {
    return (__malloc_base ??= _dylib
        .lookupFunction<_c__malloc_base, _dart__malloc_base>('_malloc_base'))(
      _Size,
    );
  }

  _dart__malloc_base? __malloc_base;

  ffi.Pointer<ffi.Void> malloc(
    int _Size,
  ) {
    return (_malloc ??=
        _dylib.lookupFunction<_c_malloc, _dart_malloc>('malloc'))(
      _Size,
    );
  }

  _dart_malloc? _malloc;

  int _msize_base(
    ffi.Pointer<ffi.Void> _Block,
  ) {
    return (__msize_base ??= _dylib
        .lookupFunction<_c__msize_base, _dart__msize_base>('_msize_base'))(
      _Block,
    );
  }

  _dart__msize_base? __msize_base;

  int _msize(
    ffi.Pointer<ffi.Void> _Block,
  ) {
    return (__msize ??=
        _dylib.lookupFunction<_c__msize, _dart__msize>('_msize'))(
      _Block,
    );
  }

  _dart__msize? __msize;

  ffi.Pointer<ffi.Void> _realloc_base(
    ffi.Pointer<ffi.Void> _Block,
    int _Size,
  ) {
    return (__realloc_base ??=
        _dylib.lookupFunction<_c__realloc_base, _dart__realloc_base>(
            '_realloc_base'))(
      _Block,
      _Size,
    );
  }

  _dart__realloc_base? __realloc_base;

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> _Block,
    int _Size,
  ) {
    return (_realloc ??=
        _dylib.lookupFunction<_c_realloc, _dart_realloc>('realloc'))(
      _Block,
      _Size,
    );
  }

  _dart_realloc? _realloc;

  ffi.Pointer<ffi.Void> _recalloc_base(
    ffi.Pointer<ffi.Void> _Block,
    int _Count,
    int _Size,
  ) {
    return (__recalloc_base ??=
        _dylib.lookupFunction<_c__recalloc_base, _dart__recalloc_base>(
            '_recalloc_base'))(
      _Block,
      _Count,
      _Size,
    );
  }

  _dart__recalloc_base? __recalloc_base;

  ffi.Pointer<ffi.Void> _recalloc(
    ffi.Pointer<ffi.Void> _Block,
    int _Count,
    int _Size,
  ) {
    return (__recalloc ??=
        _dylib.lookupFunction<_c__recalloc, _dart__recalloc>('_recalloc'))(
      _Block,
      _Count,
      _Size,
    );
  }

  _dart__recalloc? __recalloc;

  void _aligned_free(
    ffi.Pointer<ffi.Void> _Block,
  ) {
    return (__aligned_free ??=
        _dylib.lookupFunction<_c__aligned_free, _dart__aligned_free>(
            '_aligned_free'))(
      _Block,
    );
  }

  _dart__aligned_free? __aligned_free;

  ffi.Pointer<ffi.Void> _aligned_malloc(
    int _Size,
    int _Alignment,
  ) {
    return (__aligned_malloc ??=
        _dylib.lookupFunction<_c__aligned_malloc, _dart__aligned_malloc>(
            '_aligned_malloc'))(
      _Size,
      _Alignment,
    );
  }

  _dart__aligned_malloc? __aligned_malloc;

  ffi.Pointer<ffi.Void> _aligned_offset_malloc(
    int _Size,
    int _Alignment,
    int _Offset,
  ) {
    return (__aligned_offset_malloc ??= _dylib.lookupFunction<
        _c__aligned_offset_malloc,
        _dart__aligned_offset_malloc>('_aligned_offset_malloc'))(
      _Size,
      _Alignment,
      _Offset,
    );
  }

  _dart__aligned_offset_malloc? __aligned_offset_malloc;

  int _aligned_msize(
    ffi.Pointer<ffi.Void> _Block,
    int _Alignment,
    int _Offset,
  ) {
    return (__aligned_msize ??=
        _dylib.lookupFunction<_c__aligned_msize, _dart__aligned_msize>(
            '_aligned_msize'))(
      _Block,
      _Alignment,
      _Offset,
    );
  }

  _dart__aligned_msize? __aligned_msize;

  ffi.Pointer<ffi.Void> _aligned_offset_realloc(
    ffi.Pointer<ffi.Void> _Block,
    int _Size,
    int _Alignment,
    int _Offset,
  ) {
    return (__aligned_offset_realloc ??= _dylib.lookupFunction<
        _c__aligned_offset_realloc,
        _dart__aligned_offset_realloc>('_aligned_offset_realloc'))(
      _Block,
      _Size,
      _Alignment,
      _Offset,
    );
  }

  _dart__aligned_offset_realloc? __aligned_offset_realloc;

  ffi.Pointer<ffi.Void> _aligned_offset_recalloc(
    ffi.Pointer<ffi.Void> _Block,
    int _Count,
    int _Size,
    int _Alignment,
    int _Offset,
  ) {
    return (__aligned_offset_recalloc ??= _dylib.lookupFunction<
        _c__aligned_offset_recalloc,
        _dart__aligned_offset_recalloc>('_aligned_offset_recalloc'))(
      _Block,
      _Count,
      _Size,
      _Alignment,
      _Offset,
    );
  }

  _dart__aligned_offset_recalloc? __aligned_offset_recalloc;

  ffi.Pointer<ffi.Void> _aligned_realloc(
    ffi.Pointer<ffi.Void> _Block,
    int _Size,
    int _Alignment,
  ) {
    return (__aligned_realloc ??=
        _dylib.lookupFunction<_c__aligned_realloc, _dart__aligned_realloc>(
            '_aligned_realloc'))(
      _Block,
      _Size,
      _Alignment,
    );
  }

  _dart__aligned_realloc? __aligned_realloc;

  ffi.Pointer<ffi.Void> _aligned_recalloc(
    ffi.Pointer<ffi.Void> _Block,
    int _Count,
    int _Size,
    int _Alignment,
  ) {
    return (__aligned_recalloc ??=
        _dylib.lookupFunction<_c__aligned_recalloc, _dart__aligned_recalloc>(
            '_aligned_recalloc'))(
      _Block,
      _Count,
      _Size,
      _Alignment,
    );
  }

  _dart__aligned_recalloc? __aligned_recalloc;

  int __threadid() {
    return (___threadid ??=
        _dylib.lookupFunction<_c___threadid, _dart___threadid>('__threadid'))();
  }

  _dart___threadid? ___threadid;

  int __threadhandle() {
    return (___threadhandle ??=
        _dylib.lookupFunction<_c___threadhandle, _dart___threadhandle>(
            '__threadhandle'))();
  }

  _dart___threadhandle? ___threadhandle;

  ffi.Pointer<ffi.Void> bsearch_s(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    int _NumOfElements,
    int _SizeOfElements,
    ffi.Pointer<ffi.NativeFunction<_CoreCrtSecureSearchSortCompareFunction>>
        _CompareFunction,
    ffi.Pointer<ffi.Void> _Context,
  ) {
    return (_bsearch_s ??=
        _dylib.lookupFunction<_c_bsearch_s, _dart_bsearch_s>('bsearch_s'))(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
      _Context,
    );
  }

  _dart_bsearch_s? _bsearch_s;

  void qsort_s(
    ffi.Pointer<ffi.Void> _Base,
    int _NumOfElements,
    int _SizeOfElements,
    ffi.Pointer<ffi.NativeFunction<_CoreCrtSecureSearchSortCompareFunction>>
        _CompareFunction,
    ffi.Pointer<ffi.Void> _Context,
  ) {
    return (_qsort_s ??=
        _dylib.lookupFunction<_c_qsort_s, _dart_qsort_s>('qsort_s'))(
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
      _Context,
    );
  }

  _dart_qsort_s? _qsort_s;

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    int _NumOfElements,
    int _SizeOfElements,
    ffi.Pointer<ffi.NativeFunction<_CoreCrtNonSecureSearchSortCompareFunction>>
        _CompareFunction,
  ) {
    return (_bsearch ??=
        _dylib.lookupFunction<_c_bsearch, _dart_bsearch>('bsearch'))(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  _dart_bsearch? _bsearch;

  void qsort(
    ffi.Pointer<ffi.Void> _Base,
    int _NumOfElements,
    int _SizeOfElements,
    ffi.Pointer<ffi.NativeFunction<_CoreCrtNonSecureSearchSortCompareFunction>>
        _CompareFunction,
  ) {
    return (_qsort ??= _dylib.lookupFunction<_c_qsort, _dart_qsort>('qsort'))(
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  _dart_qsort? _qsort;

  ffi.Pointer<ffi.Void> _lfind_s(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.Uint32> _NumOfElements,
    int _SizeOfElements,
    ffi.Pointer<ffi.NativeFunction<_CoreCrtSecureSearchSortCompareFunction>>
        _CompareFunction,
    ffi.Pointer<ffi.Void> _Context,
  ) {
    return (__lfind_s ??=
        _dylib.lookupFunction<_c__lfind_s, _dart__lfind_s>('_lfind_s'))(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
      _Context,
    );
  }

  _dart__lfind_s? __lfind_s;

  ffi.Pointer<ffi.Void> _lfind(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.Uint32> _NumOfElements,
    int _SizeOfElements,
    ffi.Pointer<ffi.NativeFunction<_CoreCrtNonSecureSearchSortCompareFunction>>
        _CompareFunction,
  ) {
    return (__lfind ??=
        _dylib.lookupFunction<_c__lfind, _dart__lfind>('_lfind'))(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  _dart__lfind? __lfind;

  ffi.Pointer<ffi.Void> _lsearch_s(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.Uint32> _NumOfElements,
    int _SizeOfElements,
    ffi.Pointer<ffi.NativeFunction<_CoreCrtSecureSearchSortCompareFunction>>
        _CompareFunction,
    ffi.Pointer<ffi.Void> _Context,
  ) {
    return (__lsearch_s ??=
        _dylib.lookupFunction<_c__lsearch_s, _dart__lsearch_s>('_lsearch_s'))(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
      _Context,
    );
  }

  _dart__lsearch_s? __lsearch_s;

  ffi.Pointer<ffi.Void> _lsearch(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.Uint32> _NumOfElements,
    int _SizeOfElements,
    ffi.Pointer<ffi.NativeFunction<_CoreCrtNonSecureSearchSortCompareFunction>>
        _CompareFunction,
  ) {
    return (__lsearch ??=
        _dylib.lookupFunction<_c__lsearch, _dart__lsearch>('_lsearch'))(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  _dart__lsearch? __lsearch;

  ffi.Pointer<ffi.Void> lfind(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.Uint32> _NumOfElements,
    int _SizeOfElements,
    ffi.Pointer<ffi.NativeFunction<_CoreCrtNonSecureSearchSortCompareFunction>>
        _CompareFunction,
  ) {
    return (_lfind_1 ??= _dylib.lookupFunction<_c_lfind, _dart_lfind>('lfind'))(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  _dart_lfind? _lfind_1;

  ffi.Pointer<ffi.Void> lsearch(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.Uint32> _NumOfElements,
    int _SizeOfElements,
    ffi.Pointer<ffi.NativeFunction<_CoreCrtNonSecureSearchSortCompareFunction>>
        _CompareFunction,
  ) {
    return (_lsearch_1 ??=
        _dylib.lookupFunction<_c_lsearch, _dart_lsearch>('lsearch'))(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  _dart_lsearch? _lsearch_1;

  int _itow_s(
    int _Value,
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return (__itow_s ??=
        _dylib.lookupFunction<_c__itow_s, _dart__itow_s>('_itow_s'))(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  _dart__itow_s? __itow_s;

  ffi.Pointer<ffi.Uint16> _itow(
    int _Value,
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _Radix,
  ) {
    return (__itow ??= _dylib.lookupFunction<_c__itow, _dart__itow>('_itow'))(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  _dart__itow? __itow;

  int _ltow_s(
    int _Value,
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return (__ltow_s ??=
        _dylib.lookupFunction<_c__ltow_s, _dart__ltow_s>('_ltow_s'))(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  _dart__ltow_s? __ltow_s;

  ffi.Pointer<ffi.Uint16> _ltow(
    int _Value,
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _Radix,
  ) {
    return (__ltow ??= _dylib.lookupFunction<_c__ltow, _dart__ltow>('_ltow'))(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  _dart__ltow? __ltow;

  int _ultow_s(
    int _Value,
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return (__ultow_s ??=
        _dylib.lookupFunction<_c__ultow_s, _dart__ultow_s>('_ultow_s'))(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  _dart__ultow_s? __ultow_s;

  ffi.Pointer<ffi.Uint16> _ultow(
    int _Value,
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _Radix,
  ) {
    return (__ultow ??=
        _dylib.lookupFunction<_c__ultow, _dart__ultow>('_ultow'))(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  _dart__ultow? __ultow;

  double wcstod(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  ) {
    return (_wcstod ??=
        _dylib.lookupFunction<_c_wcstod, _dart_wcstod>('wcstod'))(
      _String,
      _EndPtr,
    );
  }

  _dart_wcstod? _wcstod;

  double _wcstod_l(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__wcstod_l ??=
        _dylib.lookupFunction<_c__wcstod_l, _dart__wcstod_l>('_wcstod_l'))(
      _String,
      _EndPtr,
      _Locale,
    );
  }

  _dart__wcstod_l? __wcstod_l;

  int wcstol(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
    int _Radix,
  ) {
    return (_wcstol ??=
        _dylib.lookupFunction<_c_wcstol, _dart_wcstol>('wcstol'))(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  _dart_wcstol? _wcstol;

  int _wcstol_l(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
    int _Radix,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__wcstol_l ??=
        _dylib.lookupFunction<_c__wcstol_l, _dart__wcstol_l>('_wcstol_l'))(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  _dart__wcstol_l? __wcstol_l;

  int wcstoll(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
    int _Radix,
  ) {
    return (_wcstoll ??=
        _dylib.lookupFunction<_c_wcstoll, _dart_wcstoll>('wcstoll'))(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  _dart_wcstoll? _wcstoll;

  int _wcstoll_l(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
    int _Radix,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__wcstoll_l ??=
        _dylib.lookupFunction<_c__wcstoll_l, _dart__wcstoll_l>('_wcstoll_l'))(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  _dart__wcstoll_l? __wcstoll_l;

  int wcstoul(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
    int _Radix,
  ) {
    return (_wcstoul ??=
        _dylib.lookupFunction<_c_wcstoul, _dart_wcstoul>('wcstoul'))(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  _dart_wcstoul? _wcstoul;

  int _wcstoul_l(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
    int _Radix,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__wcstoul_l ??=
        _dylib.lookupFunction<_c__wcstoul_l, _dart__wcstoul_l>('_wcstoul_l'))(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  _dart__wcstoul_l? __wcstoul_l;

  int wcstoull(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
    int _Radix,
  ) {
    return (_wcstoull ??=
        _dylib.lookupFunction<_c_wcstoull, _dart_wcstoull>('wcstoull'))(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  _dart_wcstoull? _wcstoull;

  int _wcstoull_l(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
    int _Radix,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__wcstoull_l ??= _dylib
        .lookupFunction<_c__wcstoull_l, _dart__wcstoull_l>('_wcstoull_l'))(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  _dart__wcstoull_l? __wcstoull_l;

  double wcstof(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  ) {
    return (_wcstof ??=
        _dylib.lookupFunction<_c_wcstof, _dart_wcstof>('wcstof'))(
      _String,
      _EndPtr,
    );
  }

  _dart_wcstof? _wcstof;

  double _wcstof_l(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__wcstof_l ??=
        _dylib.lookupFunction<_c__wcstof_l, _dart__wcstof_l>('_wcstof_l'))(
      _String,
      _EndPtr,
      _Locale,
    );
  }

  _dart__wcstof_l? __wcstof_l;

  double _wtof(
    ffi.Pointer<ffi.Uint16> _String,
  ) {
    return (__wtof ??= _dylib.lookupFunction<_c__wtof, _dart__wtof>('_wtof'))(
      _String,
    );
  }

  _dart__wtof? __wtof;

  double _wtof_l(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__wtof_l ??=
        _dylib.lookupFunction<_c__wtof_l, _dart__wtof_l>('_wtof_l'))(
      _String,
      _Locale,
    );
  }

  _dart__wtof_l? __wtof_l;

  int _wtoi(
    ffi.Pointer<ffi.Uint16> _String,
  ) {
    return (__wtoi ??= _dylib.lookupFunction<_c__wtoi, _dart__wtoi>('_wtoi'))(
      _String,
    );
  }

  _dart__wtoi? __wtoi;

  int _wtoi_l(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__wtoi_l ??=
        _dylib.lookupFunction<_c__wtoi_l, _dart__wtoi_l>('_wtoi_l'))(
      _String,
      _Locale,
    );
  }

  _dart__wtoi_l? __wtoi_l;

  int _wtol(
    ffi.Pointer<ffi.Uint16> _String,
  ) {
    return (__wtol ??= _dylib.lookupFunction<_c__wtol, _dart__wtol>('_wtol'))(
      _String,
    );
  }

  _dart__wtol? __wtol;

  int _wtol_l(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__wtol_l ??=
        _dylib.lookupFunction<_c__wtol_l, _dart__wtol_l>('_wtol_l'))(
      _String,
      _Locale,
    );
  }

  _dart__wtol_l? __wtol_l;

  int _wtoll(
    ffi.Pointer<ffi.Uint16> _String,
  ) {
    return (__wtoll ??=
        _dylib.lookupFunction<_c__wtoll, _dart__wtoll>('_wtoll'))(
      _String,
    );
  }

  _dart__wtoll? __wtoll;

  int _wtoll_l(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__wtoll_l ??=
        _dylib.lookupFunction<_c__wtoll_l, _dart__wtoll_l>('_wtoll_l'))(
      _String,
      _Locale,
    );
  }

  _dart__wtoll_l? __wtoll_l;

  int _i64tow_s(
    int _Value,
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return (__i64tow_s ??=
        _dylib.lookupFunction<_c__i64tow_s, _dart__i64tow_s>('_i64tow_s'))(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  _dart__i64tow_s? __i64tow_s;

  ffi.Pointer<ffi.Uint16> _i64tow(
    int _Value,
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _Radix,
  ) {
    return (__i64tow ??=
        _dylib.lookupFunction<_c__i64tow, _dart__i64tow>('_i64tow'))(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  _dart__i64tow? __i64tow;

  int _ui64tow_s(
    int _Value,
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return (__ui64tow_s ??=
        _dylib.lookupFunction<_c__ui64tow_s, _dart__ui64tow_s>('_ui64tow_s'))(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  _dart__ui64tow_s? __ui64tow_s;

  ffi.Pointer<ffi.Uint16> _ui64tow(
    int _Value,
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _Radix,
  ) {
    return (__ui64tow ??=
        _dylib.lookupFunction<_c__ui64tow, _dart__ui64tow>('_ui64tow'))(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  _dart__ui64tow? __ui64tow;

  int _wtoi64(
    ffi.Pointer<ffi.Uint16> _String,
  ) {
    return (__wtoi64 ??=
        _dylib.lookupFunction<_c__wtoi64, _dart__wtoi64>('_wtoi64'))(
      _String,
    );
  }

  _dart__wtoi64? __wtoi64;

  int _wtoi64_l(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__wtoi64_l ??=
        _dylib.lookupFunction<_c__wtoi64_l, _dart__wtoi64_l>('_wtoi64_l'))(
      _String,
      _Locale,
    );
  }

  _dart__wtoi64_l? __wtoi64_l;

  int _wcstoi64(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
    int _Radix,
  ) {
    return (__wcstoi64 ??=
        _dylib.lookupFunction<_c__wcstoi64, _dart__wcstoi64>('_wcstoi64'))(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  _dart__wcstoi64? __wcstoi64;

  int _wcstoi64_l(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
    int _Radix,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__wcstoi64_l ??= _dylib
        .lookupFunction<_c__wcstoi64_l, _dart__wcstoi64_l>('_wcstoi64_l'))(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  _dart__wcstoi64_l? __wcstoi64_l;

  int _wcstoui64(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
    int _Radix,
  ) {
    return (__wcstoui64 ??=
        _dylib.lookupFunction<_c__wcstoui64, _dart__wcstoui64>('_wcstoui64'))(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  _dart__wcstoui64? __wcstoui64;

  int _wcstoui64_l(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
    int _Radix,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__wcstoui64_l ??= _dylib
        .lookupFunction<_c__wcstoui64_l, _dart__wcstoui64_l>('_wcstoui64_l'))(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  _dart__wcstoui64_l? __wcstoui64_l;

  ffi.Pointer<ffi.Uint16> _wfullpath(
    ffi.Pointer<ffi.Uint16> _Buffer,
    ffi.Pointer<ffi.Uint16> _Path,
    int _BufferCount,
  ) {
    return (__wfullpath ??=
        _dylib.lookupFunction<_c__wfullpath, _dart__wfullpath>('_wfullpath'))(
      _Buffer,
      _Path,
      _BufferCount,
    );
  }

  _dart__wfullpath? __wfullpath;

  int _wmakepath_s(
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Uint16> _Drive,
    ffi.Pointer<ffi.Uint16> _Dir,
    ffi.Pointer<ffi.Uint16> _Filename,
    ffi.Pointer<ffi.Uint16> _Ext,
  ) {
    return (__wmakepath_s ??= _dylib
        .lookupFunction<_c__wmakepath_s, _dart__wmakepath_s>('_wmakepath_s'))(
      _Buffer,
      _BufferCount,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  _dart__wmakepath_s? __wmakepath_s;

  void _wmakepath(
    ffi.Pointer<ffi.Uint16> _Buffer,
    ffi.Pointer<ffi.Uint16> _Drive,
    ffi.Pointer<ffi.Uint16> _Dir,
    ffi.Pointer<ffi.Uint16> _Filename,
    ffi.Pointer<ffi.Uint16> _Ext,
  ) {
    return (__wmakepath ??=
        _dylib.lookupFunction<_c__wmakepath, _dart__wmakepath>('_wmakepath'))(
      _Buffer,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  _dart__wmakepath? __wmakepath;

  void _wperror(
    ffi.Pointer<ffi.Uint16> _ErrorMessage,
  ) {
    return (__wperror ??=
        _dylib.lookupFunction<_c__wperror, _dart__wperror>('_wperror'))(
      _ErrorMessage,
    );
  }

  _dart__wperror? __wperror;

  void _wsplitpath(
    ffi.Pointer<ffi.Uint16> _FullPath,
    ffi.Pointer<ffi.Uint16> _Drive,
    ffi.Pointer<ffi.Uint16> _Dir,
    ffi.Pointer<ffi.Uint16> _Filename,
    ffi.Pointer<ffi.Uint16> _Ext,
  ) {
    return (__wsplitpath ??= _dylib
        .lookupFunction<_c__wsplitpath, _dart__wsplitpath>('_wsplitpath'))(
      _FullPath,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  _dart__wsplitpath? __wsplitpath;

  int _wsplitpath_s(
    ffi.Pointer<ffi.Uint16> _FullPath,
    ffi.Pointer<ffi.Uint16> _Drive,
    int _DriveCount,
    ffi.Pointer<ffi.Uint16> _Dir,
    int _DirCount,
    ffi.Pointer<ffi.Uint16> _Filename,
    int _FilenameCount,
    ffi.Pointer<ffi.Uint16> _Ext,
    int _ExtCount,
  ) {
    return (__wsplitpath_s ??=
        _dylib.lookupFunction<_c__wsplitpath_s, _dart__wsplitpath_s>(
            '_wsplitpath_s'))(
      _FullPath,
      _Drive,
      _DriveCount,
      _Dir,
      _DirCount,
      _Filename,
      _FilenameCount,
      _Ext,
      _ExtCount,
    );
  }

  _dart__wsplitpath_s? __wsplitpath_s;

  int _wdupenv_s(
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Buffer,
    ffi.Pointer<ffi.Uint64> _BufferCount,
    ffi.Pointer<ffi.Uint16> _VarName,
  ) {
    return (__wdupenv_s ??=
        _dylib.lookupFunction<_c__wdupenv_s, _dart__wdupenv_s>('_wdupenv_s'))(
      _Buffer,
      _BufferCount,
      _VarName,
    );
  }

  _dart__wdupenv_s? __wdupenv_s;

  ffi.Pointer<ffi.Uint16> _wgetenv(
    ffi.Pointer<ffi.Uint16> _VarName,
  ) {
    return (__wgetenv ??=
        _dylib.lookupFunction<_c__wgetenv, _dart__wgetenv>('_wgetenv'))(
      _VarName,
    );
  }

  _dart__wgetenv? __wgetenv;

  int _wgetenv_s(
    ffi.Pointer<ffi.Uint64> _RequiredCount,
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Uint16> _VarName,
  ) {
    return (__wgetenv_s ??=
        _dylib.lookupFunction<_c__wgetenv_s, _dart__wgetenv_s>('_wgetenv_s'))(
      _RequiredCount,
      _Buffer,
      _BufferCount,
      _VarName,
    );
  }

  _dart__wgetenv_s? __wgetenv_s;

  int _wputenv(
    ffi.Pointer<ffi.Uint16> _EnvString,
  ) {
    return (__wputenv ??=
        _dylib.lookupFunction<_c__wputenv, _dart__wputenv>('_wputenv'))(
      _EnvString,
    );
  }

  _dart__wputenv? __wputenv;

  int _wputenv_s(
    ffi.Pointer<ffi.Uint16> _Name,
    ffi.Pointer<ffi.Uint16> _Value,
  ) {
    return (__wputenv_s ??=
        _dylib.lookupFunction<_c__wputenv_s, _dart__wputenv_s>('_wputenv_s'))(
      _Name,
      _Value,
    );
  }

  _dart__wputenv_s? __wputenv_s;

  int _wsearchenv_s(
    ffi.Pointer<ffi.Uint16> _Filename,
    ffi.Pointer<ffi.Uint16> _VarName,
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _BufferCount,
  ) {
    return (__wsearchenv_s ??=
        _dylib.lookupFunction<_c__wsearchenv_s, _dart__wsearchenv_s>(
            '_wsearchenv_s'))(
      _Filename,
      _VarName,
      _Buffer,
      _BufferCount,
    );
  }

  _dart__wsearchenv_s? __wsearchenv_s;

  void _wsearchenv(
    ffi.Pointer<ffi.Uint16> _Filename,
    ffi.Pointer<ffi.Uint16> _VarName,
    ffi.Pointer<ffi.Uint16> _ResultPath,
  ) {
    return (__wsearchenv ??= _dylib
        .lookupFunction<_c__wsearchenv, _dart__wsearchenv>('_wsearchenv'))(
      _Filename,
      _VarName,
      _ResultPath,
    );
  }

  _dart__wsearchenv? __wsearchenv;

  int _wsystem(
    ffi.Pointer<ffi.Uint16> _Command,
  ) {
    return (__wsystem ??=
        _dylib.lookupFunction<_c__wsystem, _dart__wsystem>('_wsystem'))(
      _Command,
    );
  }

  _dart__wsystem? __wsystem;

  void _swab(
    ffi.Pointer<ffi.Int8> _Buf1,
    ffi.Pointer<ffi.Int8> _Buf2,
    int _SizeInBytes,
  ) {
    return (__swab ??= _dylib.lookupFunction<_c__swab, _dart__swab>('_swab'))(
      _Buf1,
      _Buf2,
      _SizeInBytes,
    );
  }

  _dart__swab? __swab;

  void exit(
    int _Code,
  ) {
    return (_exit_1 ??= _dylib.lookupFunction<_c_exit, _dart_exit>('exit'))(
      _Code,
    );
  }

  _dart_exit? _exit_1;

  void _exit(
    int _Code,
  ) {
    return (__exit ??= _dylib.lookupFunction<_c__exit, _dart__exit>('_exit'))(
      _Code,
    );
  }

  _dart__exit? __exit;

  void _Exit(
    int _Code,
  ) {
    return (__Exit ??= _dylib.lookupFunction<_c__Exit, _dart__Exit>('_Exit'))(
      _Code,
    );
  }

  _dart__Exit? __Exit;

  void quick_exit(
    int _Code,
  ) {
    return (_quick_exit ??=
        _dylib.lookupFunction<_c_quick_exit, _dart_quick_exit>('quick_exit'))(
      _Code,
    );
  }

  _dart_quick_exit? _quick_exit;

  void abort() {
    return (_abort ??= _dylib.lookupFunction<_c_abort, _dart_abort>('abort'))();
  }

  _dart_abort? _abort;

  int _set_abort_behavior(
    int _Flags,
    int _Mask,
  ) {
    return (__set_abort_behavior ??= _dylib.lookupFunction<
        _c__set_abort_behavior,
        _dart__set_abort_behavior>('_set_abort_behavior'))(
      _Flags,
      _Mask,
    );
  }

  _dart__set_abort_behavior? __set_abort_behavior;

  int atexit(
    ffi.Pointer<ffi.NativeFunction<_typedefC_1>> arg0,
  ) {
    return (_atexit ??=
        _dylib.lookupFunction<_c_atexit, _dart_atexit>('atexit'))(
      arg0,
    );
  }

  _dart_atexit? _atexit;

  ffi.Pointer<ffi.NativeFunction<_onexit_t>> _onexit(
    ffi.Pointer<ffi.NativeFunction<_onexit_t>> _Func,
  ) {
    return (__onexit ??=
        _dylib.lookupFunction<_c__onexit, _dart__onexit>('_onexit'))(
      _Func,
    );
  }

  _dart__onexit? __onexit;

  int at_quick_exit(
    ffi.Pointer<ffi.NativeFunction<_typedefC_2>> arg0,
  ) {
    return (_at_quick_exit ??=
        _dylib.lookupFunction<_c_at_quick_exit, _dart_at_quick_exit>(
            'at_quick_exit'))(
      arg0,
    );
  }

  _dart_at_quick_exit? _at_quick_exit;

  ffi.Pointer<ffi.NativeFunction<_purecall_handler>> _set_purecall_handler(
    ffi.Pointer<ffi.NativeFunction<_purecall_handler>> _Handler,
  ) {
    return (__set_purecall_handler ??= _dylib.lookupFunction<
        _c__set_purecall_handler,
        _dart__set_purecall_handler>('_set_purecall_handler'))(
      _Handler,
    );
  }

  _dart__set_purecall_handler? __set_purecall_handler;

  ffi.Pointer<ffi.NativeFunction<_purecall_handler>> _get_purecall_handler() {
    return (__get_purecall_handler ??= _dylib.lookupFunction<
        _c__get_purecall_handler,
        _dart__get_purecall_handler>('_get_purecall_handler'))();
  }

  _dart__get_purecall_handler? __get_purecall_handler;

  ffi.Pointer<ffi.NativeFunction<_invalid_parameter_handler>>
      _set_invalid_parameter_handler(
    ffi.Pointer<ffi.NativeFunction<_invalid_parameter_handler>> _Handler,
  ) {
    return (__set_invalid_parameter_handler ??= _dylib.lookupFunction<
            _c__set_invalid_parameter_handler,
            _dart__set_invalid_parameter_handler>(
        '_set_invalid_parameter_handler'))(
      _Handler,
    );
  }

  _dart__set_invalid_parameter_handler? __set_invalid_parameter_handler;

  ffi.Pointer<ffi.NativeFunction<_invalid_parameter_handler>>
      _get_invalid_parameter_handler() {
    return (__get_invalid_parameter_handler ??= _dylib.lookupFunction<
            _c__get_invalid_parameter_handler,
            _dart__get_invalid_parameter_handler>(
        '_get_invalid_parameter_handler'))();
  }

  _dart__get_invalid_parameter_handler? __get_invalid_parameter_handler;

  ffi.Pointer<ffi.NativeFunction<_invalid_parameter_handler>>
      _set_thread_local_invalid_parameter_handler(
    ffi.Pointer<ffi.NativeFunction<_invalid_parameter_handler>> _Handler,
  ) {
    return (__set_thread_local_invalid_parameter_handler ??=
        _dylib.lookupFunction<_c__set_thread_local_invalid_parameter_handler,
                _dart__set_thread_local_invalid_parameter_handler>(
            '_set_thread_local_invalid_parameter_handler'))(
      _Handler,
    );
  }

  _dart__set_thread_local_invalid_parameter_handler?
      __set_thread_local_invalid_parameter_handler;

  ffi.Pointer<ffi.NativeFunction<_invalid_parameter_handler>>
      _get_thread_local_invalid_parameter_handler() {
    return (__get_thread_local_invalid_parameter_handler ??=
        _dylib.lookupFunction<_c__get_thread_local_invalid_parameter_handler,
                _dart__get_thread_local_invalid_parameter_handler>(
            '_get_thread_local_invalid_parameter_handler'))();
  }

  _dart__get_thread_local_invalid_parameter_handler?
      __get_thread_local_invalid_parameter_handler;

  int _set_error_mode(
    int _Mode,
  ) {
    return (__set_error_mode ??=
        _dylib.lookupFunction<_c__set_error_mode, _dart__set_error_mode>(
            '_set_error_mode'))(
      _Mode,
    );
  }

  _dart__set_error_mode? __set_error_mode;

  ffi.Pointer<ffi.Pointer<ffi.Int8>> __sys_errlist() {
    return (___sys_errlist ??=
        _dylib.lookupFunction<_c___sys_errlist, _dart___sys_errlist>(
            '__sys_errlist'))();
  }

  _dart___sys_errlist? ___sys_errlist;

  ffi.Pointer<ffi.Int32> __sys_nerr() {
    return (___sys_nerr ??=
        _dylib.lookupFunction<_c___sys_nerr, _dart___sys_nerr>('__sys_nerr'))();
  }

  _dart___sys_nerr? ___sys_nerr;

  void perror(
    ffi.Pointer<ffi.Int8> _ErrMsg,
  ) {
    return (_perror ??=
        _dylib.lookupFunction<_c_perror, _dart_perror>('perror'))(
      _ErrMsg,
    );
  }

  _dart_perror? _perror;

  ffi.Pointer<ffi.Pointer<ffi.Int8>> __p__pgmptr() {
    return (___p__pgmptr ??= _dylib
        .lookupFunction<_c___p__pgmptr, _dart___p__pgmptr>('__p__pgmptr'))();
  }

  _dart___p__pgmptr? ___p__pgmptr;

  ffi.Pointer<ffi.Pointer<ffi.Uint16>> __p__wpgmptr() {
    return (___p__wpgmptr ??= _dylib
        .lookupFunction<_c___p__wpgmptr, _dart___p__wpgmptr>('__p__wpgmptr'))();
  }

  _dart___p__wpgmptr? ___p__wpgmptr;

  ffi.Pointer<ffi.Int32> __p__fmode() {
    return (___p__fmode ??=
        _dylib.lookupFunction<_c___p__fmode, _dart___p__fmode>('__p__fmode'))();
  }

  _dart___p__fmode? ___p__fmode;

  int _get_pgmptr(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _Value,
  ) {
    return (__get_pgmptr ??= _dylib
        .lookupFunction<_c__get_pgmptr, _dart__get_pgmptr>('_get_pgmptr'))(
      _Value,
    );
  }

  _dart__get_pgmptr? __get_pgmptr;

  int _get_wpgmptr(
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Value,
  ) {
    return (__get_wpgmptr ??= _dylib
        .lookupFunction<_c__get_wpgmptr, _dart__get_wpgmptr>('_get_wpgmptr'))(
      _Value,
    );
  }

  _dart__get_wpgmptr? __get_wpgmptr;

  int _set_fmode(
    int _Mode,
  ) {
    return (__set_fmode ??=
        _dylib.lookupFunction<_c__set_fmode, _dart__set_fmode>('_set_fmode'))(
      _Mode,
    );
  }

  _dart__set_fmode? __set_fmode;

  int _get_fmode(
    ffi.Pointer<ffi.Int32> _PMode,
  ) {
    return (__get_fmode ??=
        _dylib.lookupFunction<_c__get_fmode, _dart__get_fmode>('_get_fmode'))(
      _PMode,
    );
  }

  _dart__get_fmode? __get_fmode;

  int _abs64(
    int _Number,
  ) {
    return (__abs64 ??=
        _dylib.lookupFunction<_c__abs64, _dart__abs64>('_abs64'))(
      _Number,
    );
  }

  _dart__abs64? __abs64;

  int _byteswap_ushort(
    int _Number,
  ) {
    return (__byteswap_ushort ??=
        _dylib.lookupFunction<_c__byteswap_ushort, _dart__byteswap_ushort>(
            '_byteswap_ushort'))(
      _Number,
    );
  }

  _dart__byteswap_ushort? __byteswap_ushort;

  int _byteswap_ulong(
    int _Number,
  ) {
    return (__byteswap_ulong ??=
        _dylib.lookupFunction<_c__byteswap_ulong, _dart__byteswap_ulong>(
            '_byteswap_ulong'))(
      _Number,
    );
  }

  _dart__byteswap_ulong? __byteswap_ulong;

  int _byteswap_uint64(
    int _Number,
  ) {
    return (__byteswap_uint64 ??=
        _dylib.lookupFunction<_c__byteswap_uint64, _dart__byteswap_uint64>(
            '_byteswap_uint64'))(
      _Number,
    );
  }

  _dart__byteswap_uint64? __byteswap_uint64;

  int _lrotl(
    int _Value,
    int _Shift,
  ) {
    return (__lrotl ??=
        _dylib.lookupFunction<_c__lrotl, _dart__lrotl>('_lrotl'))(
      _Value,
      _Shift,
    );
  }

  _dart__lrotl? __lrotl;

  int _lrotr(
    int _Value,
    int _Shift,
  ) {
    return (__lrotr ??=
        _dylib.lookupFunction<_c__lrotr, _dart__lrotr>('_lrotr'))(
      _Value,
      _Shift,
    );
  }

  _dart__lrotr? __lrotr;

  void srand(
    int _Seed,
  ) {
    return (_srand ??= _dylib.lookupFunction<_c_srand, _dart_srand>('srand'))(
      _Seed,
    );
  }

  _dart_srand? _srand;

  int rand() {
    return (_rand ??= _dylib.lookupFunction<_c_rand, _dart_rand>('rand'))();
  }

  _dart_rand? _rand;

  int atoi(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return (_atoi ??= _dylib.lookupFunction<_c_atoi, _dart_atoi>('atoi'))(
      _String,
    );
  }

  _dart_atoi? _atoi;

  int atol(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return (_atol ??= _dylib.lookupFunction<_c_atol, _dart_atol>('atol'))(
      _String,
    );
  }

  _dart_atol? _atol;

  int atoll(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return (_atoll ??= _dylib.lookupFunction<_c_atoll, _dart_atoll>('atoll'))(
      _String,
    );
  }

  _dart_atoll? _atoll;

  int _atoi64(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return (__atoi64 ??=
        _dylib.lookupFunction<_c__atoi64, _dart__atoi64>('_atoi64'))(
      _String,
    );
  }

  _dart__atoi64? __atoi64;

  int _atoi_l(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__atoi_l ??=
        _dylib.lookupFunction<_c__atoi_l, _dart__atoi_l>('_atoi_l'))(
      _String,
      _Locale,
    );
  }

  _dart__atoi_l? __atoi_l;

  int _atol_l(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__atol_l ??=
        _dylib.lookupFunction<_c__atol_l, _dart__atol_l>('_atol_l'))(
      _String,
      _Locale,
    );
  }

  _dart__atol_l? __atol_l;

  int _atoll_l(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__atoll_l ??=
        _dylib.lookupFunction<_c__atoll_l, _dart__atoll_l>('_atoll_l'))(
      _String,
      _Locale,
    );
  }

  _dart__atoll_l? __atoll_l;

  int _atoi64_l(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__atoi64_l ??=
        _dylib.lookupFunction<_c__atoi64_l, _dart__atoi64_l>('_atoi64_l'))(
      _String,
      _Locale,
    );
  }

  _dart__atoi64_l? __atoi64_l;

  int _atoflt(
    ffi.Pointer<_CRT_FLOAT> _Result,
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return (__atoflt ??=
        _dylib.lookupFunction<_c__atoflt, _dart__atoflt>('_atoflt'))(
      _Result,
      _String,
    );
  }

  _dart__atoflt? __atoflt;

  int _atodbl(
    ffi.Pointer<_CRT_DOUBLE> _Result,
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return (__atodbl ??=
        _dylib.lookupFunction<_c__atodbl, _dart__atodbl>('_atodbl'))(
      _Result,
      _String,
    );
  }

  _dart__atodbl? __atodbl;

  int _atoldbl(
    ffi.Pointer<_LDOUBLE> _Result,
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return (__atoldbl ??=
        _dylib.lookupFunction<_c__atoldbl, _dart__atoldbl>('_atoldbl'))(
      _Result,
      _String,
    );
  }

  _dart__atoldbl? __atoldbl;

  int _atoflt_l(
    ffi.Pointer<_CRT_FLOAT> _Result,
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__atoflt_l ??=
        _dylib.lookupFunction<_c__atoflt_l, _dart__atoflt_l>('_atoflt_l'))(
      _Result,
      _String,
      _Locale,
    );
  }

  _dart__atoflt_l? __atoflt_l;

  int _atodbl_l(
    ffi.Pointer<_CRT_DOUBLE> _Result,
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__atodbl_l ??=
        _dylib.lookupFunction<_c__atodbl_l, _dart__atodbl_l>('_atodbl_l'))(
      _Result,
      _String,
      _Locale,
    );
  }

  _dart__atodbl_l? __atodbl_l;

  int _atoldbl_l(
    ffi.Pointer<_LDOUBLE> _Result,
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__atoldbl_l ??=
        _dylib.lookupFunction<_c__atoldbl_l, _dart__atoldbl_l>('_atoldbl_l'))(
      _Result,
      _String,
      _Locale,
    );
  }

  _dart__atoldbl_l? __atoldbl_l;

  double strtof(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  ) {
    return (_strtof ??=
        _dylib.lookupFunction<_c_strtof, _dart_strtof>('strtof'))(
      _String,
      _EndPtr,
    );
  }

  _dart_strtof? _strtof;

  double _strtof_l(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__strtof_l ??=
        _dylib.lookupFunction<_c__strtof_l, _dart__strtof_l>('_strtof_l'))(
      _String,
      _EndPtr,
      _Locale,
    );
  }

  _dart__strtof_l? __strtof_l;

  double strtod(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  ) {
    return (_strtod ??=
        _dylib.lookupFunction<_c_strtod, _dart_strtod>('strtod'))(
      _String,
      _EndPtr,
    );
  }

  _dart_strtod? _strtod;

  double _strtod_l(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__strtod_l ??=
        _dylib.lookupFunction<_c__strtod_l, _dart__strtod_l>('_strtod_l'))(
      _String,
      _EndPtr,
      _Locale,
    );
  }

  _dart__strtod_l? __strtod_l;

  int strtol(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    int _Radix,
  ) {
    return (_strtol ??=
        _dylib.lookupFunction<_c_strtol, _dart_strtol>('strtol'))(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  _dart_strtol? _strtol;

  int _strtol_l(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    int _Radix,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__strtol_l ??=
        _dylib.lookupFunction<_c__strtol_l, _dart__strtol_l>('_strtol_l'))(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  _dart__strtol_l? __strtol_l;

  int strtoll(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    int _Radix,
  ) {
    return (_strtoll ??=
        _dylib.lookupFunction<_c_strtoll, _dart_strtoll>('strtoll'))(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  _dart_strtoll? _strtoll;

  int _strtoll_l(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    int _Radix,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__strtoll_l ??=
        _dylib.lookupFunction<_c__strtoll_l, _dart__strtoll_l>('_strtoll_l'))(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  _dart__strtoll_l? __strtoll_l;

  int strtoul(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    int _Radix,
  ) {
    return (_strtoul ??=
        _dylib.lookupFunction<_c_strtoul, _dart_strtoul>('strtoul'))(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  _dart_strtoul? _strtoul;

  int _strtoul_l(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    int _Radix,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__strtoul_l ??=
        _dylib.lookupFunction<_c__strtoul_l, _dart__strtoul_l>('_strtoul_l'))(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  _dart__strtoul_l? __strtoul_l;

  int strtoull(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    int _Radix,
  ) {
    return (_strtoull ??=
        _dylib.lookupFunction<_c_strtoull, _dart_strtoull>('strtoull'))(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  _dart_strtoull? _strtoull;

  int _strtoull_l(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    int _Radix,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__strtoull_l ??= _dylib
        .lookupFunction<_c__strtoull_l, _dart__strtoull_l>('_strtoull_l'))(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  _dart__strtoull_l? __strtoull_l;

  int _strtoi64(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    int _Radix,
  ) {
    return (__strtoi64 ??=
        _dylib.lookupFunction<_c__strtoi64, _dart__strtoi64>('_strtoi64'))(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  _dart__strtoi64? __strtoi64;

  int _strtoi64_l(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    int _Radix,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__strtoi64_l ??= _dylib
        .lookupFunction<_c__strtoi64_l, _dart__strtoi64_l>('_strtoi64_l'))(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  _dart__strtoi64_l? __strtoi64_l;

  int _strtoui64(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    int _Radix,
  ) {
    return (__strtoui64 ??=
        _dylib.lookupFunction<_c__strtoui64, _dart__strtoui64>('_strtoui64'))(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  _dart__strtoui64? __strtoui64;

  int _strtoui64_l(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    int _Radix,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__strtoui64_l ??= _dylib
        .lookupFunction<_c__strtoui64_l, _dart__strtoui64_l>('_strtoui64_l'))(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  _dart__strtoui64_l? __strtoui64_l;

  int _itoa_s(
    int _Value,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return (__itoa_s ??=
        _dylib.lookupFunction<_c__itoa_s, _dart__itoa_s>('_itoa_s'))(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  _dart__itoa_s? __itoa_s;

  ffi.Pointer<ffi.Int8> _itoa(
    int _Value,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _Radix,
  ) {
    return (__itoa ??= _dylib.lookupFunction<_c__itoa, _dart__itoa>('_itoa'))(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  _dart__itoa? __itoa;

  int _ltoa_s(
    int _Value,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return (__ltoa_s ??=
        _dylib.lookupFunction<_c__ltoa_s, _dart__ltoa_s>('_ltoa_s'))(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  _dart__ltoa_s? __ltoa_s;

  ffi.Pointer<ffi.Int8> _ltoa(
    int _Value,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _Radix,
  ) {
    return (__ltoa ??= _dylib.lookupFunction<_c__ltoa, _dart__ltoa>('_ltoa'))(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  _dart__ltoa? __ltoa;

  int _ultoa_s(
    int _Value,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return (__ultoa_s ??=
        _dylib.lookupFunction<_c__ultoa_s, _dart__ultoa_s>('_ultoa_s'))(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  _dart__ultoa_s? __ultoa_s;

  ffi.Pointer<ffi.Int8> _ultoa(
    int _Value,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _Radix,
  ) {
    return (__ultoa ??=
        _dylib.lookupFunction<_c__ultoa, _dart__ultoa>('_ultoa'))(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  _dart__ultoa? __ultoa;

  int _i64toa_s(
    int _Value,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return (__i64toa_s ??=
        _dylib.lookupFunction<_c__i64toa_s, _dart__i64toa_s>('_i64toa_s'))(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  _dart__i64toa_s? __i64toa_s;

  ffi.Pointer<ffi.Int8> _i64toa(
    int _Value,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _Radix,
  ) {
    return (__i64toa ??=
        _dylib.lookupFunction<_c__i64toa, _dart__i64toa>('_i64toa'))(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  _dart__i64toa? __i64toa;

  int _ui64toa_s(
    int _Value,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return (__ui64toa_s ??=
        _dylib.lookupFunction<_c__ui64toa_s, _dart__ui64toa_s>('_ui64toa_s'))(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  _dart__ui64toa_s? __ui64toa_s;

  ffi.Pointer<ffi.Int8> _ui64toa(
    int _Value,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _Radix,
  ) {
    return (__ui64toa ??=
        _dylib.lookupFunction<_c__ui64toa, _dart__ui64toa>('_ui64toa'))(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  _dart__ui64toa? __ui64toa;

  int _ecvt_s(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    double _Value,
    int _DigitCount,
    ffi.Pointer<ffi.Int32> _PtDec,
    ffi.Pointer<ffi.Int32> _PtSign,
  ) {
    return (__ecvt_s ??=
        _dylib.lookupFunction<_c__ecvt_s, _dart__ecvt_s>('_ecvt_s'))(
      _Buffer,
      _BufferCount,
      _Value,
      _DigitCount,
      _PtDec,
      _PtSign,
    );
  }

  _dart__ecvt_s? __ecvt_s;

  ffi.Pointer<ffi.Int8> _ecvt(
    double _Value,
    int _DigitCount,
    ffi.Pointer<ffi.Int32> _PtDec,
    ffi.Pointer<ffi.Int32> _PtSign,
  ) {
    return (__ecvt ??= _dylib.lookupFunction<_c__ecvt, _dart__ecvt>('_ecvt'))(
      _Value,
      _DigitCount,
      _PtDec,
      _PtSign,
    );
  }

  _dart__ecvt? __ecvt;

  int _fcvt_s(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    double _Value,
    int _FractionalDigitCount,
    ffi.Pointer<ffi.Int32> _PtDec,
    ffi.Pointer<ffi.Int32> _PtSign,
  ) {
    return (__fcvt_s ??=
        _dylib.lookupFunction<_c__fcvt_s, _dart__fcvt_s>('_fcvt_s'))(
      _Buffer,
      _BufferCount,
      _Value,
      _FractionalDigitCount,
      _PtDec,
      _PtSign,
    );
  }

  _dart__fcvt_s? __fcvt_s;

  ffi.Pointer<ffi.Int8> _fcvt(
    double _Value,
    int _FractionalDigitCount,
    ffi.Pointer<ffi.Int32> _PtDec,
    ffi.Pointer<ffi.Int32> _PtSign,
  ) {
    return (__fcvt ??= _dylib.lookupFunction<_c__fcvt, _dart__fcvt>('_fcvt'))(
      _Value,
      _FractionalDigitCount,
      _PtDec,
      _PtSign,
    );
  }

  _dart__fcvt? __fcvt;

  int _gcvt_s(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    double _Value,
    int _DigitCount,
  ) {
    return (__gcvt_s ??=
        _dylib.lookupFunction<_c__gcvt_s, _dart__gcvt_s>('_gcvt_s'))(
      _Buffer,
      _BufferCount,
      _Value,
      _DigitCount,
    );
  }

  _dart__gcvt_s? __gcvt_s;

  ffi.Pointer<ffi.Int8> _gcvt(
    double _Value,
    int _DigitCount,
    ffi.Pointer<ffi.Int8> _Buffer,
  ) {
    return (__gcvt ??= _dylib.lookupFunction<_c__gcvt, _dart__gcvt>('_gcvt'))(
      _Value,
      _DigitCount,
      _Buffer,
    );
  }

  _dart__gcvt? __gcvt;

  int mblen(
    ffi.Pointer<ffi.Int8> _Ch,
    int _MaxCount,
  ) {
    return (_mblen ??= _dylib.lookupFunction<_c_mblen, _dart_mblen>('mblen'))(
      _Ch,
      _MaxCount,
    );
  }

  _dart_mblen? _mblen;

  int _mblen_l(
    ffi.Pointer<ffi.Int8> _Ch,
    int _MaxCount,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__mblen_l ??=
        _dylib.lookupFunction<_c__mblen_l, _dart__mblen_l>('_mblen_l'))(
      _Ch,
      _MaxCount,
      _Locale,
    );
  }

  _dart__mblen_l? __mblen_l;

  int _mbstrlen(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return (__mbstrlen ??=
        _dylib.lookupFunction<_c__mbstrlen, _dart__mbstrlen>('_mbstrlen'))(
      _String,
    );
  }

  _dart__mbstrlen? __mbstrlen;

  int _mbstrlen_l(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__mbstrlen_l ??= _dylib
        .lookupFunction<_c__mbstrlen_l, _dart__mbstrlen_l>('_mbstrlen_l'))(
      _String,
      _Locale,
    );
  }

  _dart__mbstrlen_l? __mbstrlen_l;

  int _mbstrnlen(
    ffi.Pointer<ffi.Int8> _String,
    int _MaxCount,
  ) {
    return (__mbstrnlen ??=
        _dylib.lookupFunction<_c__mbstrnlen, _dart__mbstrnlen>('_mbstrnlen'))(
      _String,
      _MaxCount,
    );
  }

  _dart__mbstrnlen? __mbstrnlen;

  int _mbstrnlen_l(
    ffi.Pointer<ffi.Int8> _String,
    int _MaxCount,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__mbstrnlen_l ??= _dylib
        .lookupFunction<_c__mbstrnlen_l, _dart__mbstrnlen_l>('_mbstrnlen_l'))(
      _String,
      _MaxCount,
      _Locale,
    );
  }

  _dart__mbstrnlen_l? __mbstrnlen_l;

  int mbtowc(
    ffi.Pointer<ffi.Uint16> _DstCh,
    ffi.Pointer<ffi.Int8> _SrcCh,
    int _SrcSizeInBytes,
  ) {
    return (_mbtowc ??=
        _dylib.lookupFunction<_c_mbtowc, _dart_mbtowc>('mbtowc'))(
      _DstCh,
      _SrcCh,
      _SrcSizeInBytes,
    );
  }

  _dart_mbtowc? _mbtowc;

  int _mbtowc_l(
    ffi.Pointer<ffi.Uint16> _DstCh,
    ffi.Pointer<ffi.Int8> _SrcCh,
    int _SrcSizeInBytes,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__mbtowc_l ??=
        _dylib.lookupFunction<_c__mbtowc_l, _dart__mbtowc_l>('_mbtowc_l'))(
      _DstCh,
      _SrcCh,
      _SrcSizeInBytes,
      _Locale,
    );
  }

  _dart__mbtowc_l? __mbtowc_l;

  int mbstowcs_s(
    ffi.Pointer<ffi.Uint64> _PtNumOfCharConverted,
    ffi.Pointer<ffi.Uint16> _DstBuf,
    int _SizeInWords,
    ffi.Pointer<ffi.Int8> _SrcBuf,
    int _MaxCount,
  ) {
    return (_mbstowcs_s ??=
        _dylib.lookupFunction<_c_mbstowcs_s, _dart_mbstowcs_s>('mbstowcs_s'))(
      _PtNumOfCharConverted,
      _DstBuf,
      _SizeInWords,
      _SrcBuf,
      _MaxCount,
    );
  }

  _dart_mbstowcs_s? _mbstowcs_s;

  int mbstowcs(
    ffi.Pointer<ffi.Uint16> _Dest,
    ffi.Pointer<ffi.Int8> _Source,
    int _MaxCount,
  ) {
    return (_mbstowcs ??=
        _dylib.lookupFunction<_c_mbstowcs, _dart_mbstowcs>('mbstowcs'))(
      _Dest,
      _Source,
      _MaxCount,
    );
  }

  _dart_mbstowcs? _mbstowcs;

  int _mbstowcs_s_l(
    ffi.Pointer<ffi.Uint64> _PtNumOfCharConverted,
    ffi.Pointer<ffi.Uint16> _DstBuf,
    int _SizeInWords,
    ffi.Pointer<ffi.Int8> _SrcBuf,
    int _MaxCount,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__mbstowcs_s_l ??=
        _dylib.lookupFunction<_c__mbstowcs_s_l, _dart__mbstowcs_s_l>(
            '_mbstowcs_s_l'))(
      _PtNumOfCharConverted,
      _DstBuf,
      _SizeInWords,
      _SrcBuf,
      _MaxCount,
      _Locale,
    );
  }

  _dart__mbstowcs_s_l? __mbstowcs_s_l;

  int _mbstowcs_l(
    ffi.Pointer<ffi.Uint16> _Dest,
    ffi.Pointer<ffi.Int8> _Source,
    int _MaxCount,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__mbstowcs_l ??= _dylib
        .lookupFunction<_c__mbstowcs_l, _dart__mbstowcs_l>('_mbstowcs_l'))(
      _Dest,
      _Source,
      _MaxCount,
      _Locale,
    );
  }

  _dart__mbstowcs_l? __mbstowcs_l;

  int wctomb(
    ffi.Pointer<ffi.Int8> _MbCh,
    int _WCh,
  ) {
    return (_wctomb ??=
        _dylib.lookupFunction<_c_wctomb, _dart_wctomb>('wctomb'))(
      _MbCh,
      _WCh,
    );
  }

  _dart_wctomb? _wctomb;

  int _wctomb_l(
    ffi.Pointer<ffi.Int8> _MbCh,
    int _WCh,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__wctomb_l ??=
        _dylib.lookupFunction<_c__wctomb_l, _dart__wctomb_l>('_wctomb_l'))(
      _MbCh,
      _WCh,
      _Locale,
    );
  }

  _dart__wctomb_l? __wctomb_l;

  int wctomb_s(
    ffi.Pointer<ffi.Int32> _SizeConverted,
    ffi.Pointer<ffi.Int8> _MbCh,
    int _SizeInBytes,
    int _WCh,
  ) {
    return (_wctomb_s ??=
        _dylib.lookupFunction<_c_wctomb_s, _dart_wctomb_s>('wctomb_s'))(
      _SizeConverted,
      _MbCh,
      _SizeInBytes,
      _WCh,
    );
  }

  _dart_wctomb_s? _wctomb_s;

  int _wctomb_s_l(
    ffi.Pointer<ffi.Int32> _SizeConverted,
    ffi.Pointer<ffi.Int8> _MbCh,
    int _SizeInBytes,
    int _WCh,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__wctomb_s_l ??= _dylib
        .lookupFunction<_c__wctomb_s_l, _dart__wctomb_s_l>('_wctomb_s_l'))(
      _SizeConverted,
      _MbCh,
      _SizeInBytes,
      _WCh,
      _Locale,
    );
  }

  _dart__wctomb_s_l? __wctomb_s_l;

  int wcstombs_s(
    ffi.Pointer<ffi.Uint64> _PtNumOfCharConverted,
    ffi.Pointer<ffi.Int8> _Dst,
    int _DstSizeInBytes,
    ffi.Pointer<ffi.Uint16> _Src,
    int _MaxCountInBytes,
  ) {
    return (_wcstombs_s ??=
        _dylib.lookupFunction<_c_wcstombs_s, _dart_wcstombs_s>('wcstombs_s'))(
      _PtNumOfCharConverted,
      _Dst,
      _DstSizeInBytes,
      _Src,
      _MaxCountInBytes,
    );
  }

  _dart_wcstombs_s? _wcstombs_s;

  int wcstombs(
    ffi.Pointer<ffi.Int8> _Dest,
    ffi.Pointer<ffi.Uint16> _Source,
    int _MaxCount,
  ) {
    return (_wcstombs ??=
        _dylib.lookupFunction<_c_wcstombs, _dart_wcstombs>('wcstombs'))(
      _Dest,
      _Source,
      _MaxCount,
    );
  }

  _dart_wcstombs? _wcstombs;

  int _wcstombs_s_l(
    ffi.Pointer<ffi.Uint64> _PtNumOfCharConverted,
    ffi.Pointer<ffi.Int8> _Dst,
    int _DstSizeInBytes,
    ffi.Pointer<ffi.Uint16> _Src,
    int _MaxCountInBytes,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__wcstombs_s_l ??=
        _dylib.lookupFunction<_c__wcstombs_s_l, _dart__wcstombs_s_l>(
            '_wcstombs_s_l'))(
      _PtNumOfCharConverted,
      _Dst,
      _DstSizeInBytes,
      _Src,
      _MaxCountInBytes,
      _Locale,
    );
  }

  _dart__wcstombs_s_l? __wcstombs_s_l;

  int _wcstombs_l(
    ffi.Pointer<ffi.Int8> _Dest,
    ffi.Pointer<ffi.Uint16> _Source,
    int _MaxCount,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return (__wcstombs_l ??= _dylib
        .lookupFunction<_c__wcstombs_l, _dart__wcstombs_l>('_wcstombs_l'))(
      _Dest,
      _Source,
      _MaxCount,
      _Locale,
    );
  }

  _dart__wcstombs_l? __wcstombs_l;

  ffi.Pointer<ffi.Int8> _fullpath(
    ffi.Pointer<ffi.Int8> _Buffer,
    ffi.Pointer<ffi.Int8> _Path,
    int _BufferCount,
  ) {
    return (__fullpath ??=
        _dylib.lookupFunction<_c__fullpath, _dart__fullpath>('_fullpath'))(
      _Buffer,
      _Path,
      _BufferCount,
    );
  }

  _dart__fullpath? __fullpath;

  int _makepath_s(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Int8> _Drive,
    ffi.Pointer<ffi.Int8> _Dir,
    ffi.Pointer<ffi.Int8> _Filename,
    ffi.Pointer<ffi.Int8> _Ext,
  ) {
    return (__makepath_s ??= _dylib
        .lookupFunction<_c__makepath_s, _dart__makepath_s>('_makepath_s'))(
      _Buffer,
      _BufferCount,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  _dart__makepath_s? __makepath_s;

  void _makepath(
    ffi.Pointer<ffi.Int8> _Buffer,
    ffi.Pointer<ffi.Int8> _Drive,
    ffi.Pointer<ffi.Int8> _Dir,
    ffi.Pointer<ffi.Int8> _Filename,
    ffi.Pointer<ffi.Int8> _Ext,
  ) {
    return (__makepath ??=
        _dylib.lookupFunction<_c__makepath, _dart__makepath>('_makepath'))(
      _Buffer,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  _dart__makepath? __makepath;

  void _splitpath(
    ffi.Pointer<ffi.Int8> _FullPath,
    ffi.Pointer<ffi.Int8> _Drive,
    ffi.Pointer<ffi.Int8> _Dir,
    ffi.Pointer<ffi.Int8> _Filename,
    ffi.Pointer<ffi.Int8> _Ext,
  ) {
    return (__splitpath ??=
        _dylib.lookupFunction<_c__splitpath, _dart__splitpath>('_splitpath'))(
      _FullPath,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  _dart__splitpath? __splitpath;

  int _splitpath_s(
    ffi.Pointer<ffi.Int8> _FullPath,
    ffi.Pointer<ffi.Int8> _Drive,
    int _DriveCount,
    ffi.Pointer<ffi.Int8> _Dir,
    int _DirCount,
    ffi.Pointer<ffi.Int8> _Filename,
    int _FilenameCount,
    ffi.Pointer<ffi.Int8> _Ext,
    int _ExtCount,
  ) {
    return (__splitpath_s ??= _dylib
        .lookupFunction<_c__splitpath_s, _dart__splitpath_s>('_splitpath_s'))(
      _FullPath,
      _Drive,
      _DriveCount,
      _Dir,
      _DirCount,
      _Filename,
      _FilenameCount,
      _Ext,
      _ExtCount,
    );
  }

  _dart__splitpath_s? __splitpath_s;

  int getenv_s(
    ffi.Pointer<ffi.Uint64> _RequiredCount,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Int8> _VarName,
  ) {
    return (_getenv_s ??=
        _dylib.lookupFunction<_c_getenv_s, _dart_getenv_s>('getenv_s'))(
      _RequiredCount,
      _Buffer,
      _BufferCount,
      _VarName,
    );
  }

  _dart_getenv_s? _getenv_s;

  ffi.Pointer<ffi.Int32> __p___argc() {
    return (___p___argc ??=
        _dylib.lookupFunction<_c___p___argc, _dart___p___argc>('__p___argc'))();
  }

  _dart___p___argc? ___p___argc;

  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> __p___argv() {
    return (___p___argv ??=
        _dylib.lookupFunction<_c___p___argv, _dart___p___argv>('__p___argv'))();
  }

  _dart___p___argv? ___p___argv;

  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Uint16>>> __p___wargv() {
    return (___p___wargv ??= _dylib
        .lookupFunction<_c___p___wargv, _dart___p___wargv>('__p___wargv'))();
  }

  _dart___p___wargv? ___p___wargv;

  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> __p__environ() {
    return (___p__environ ??= _dylib
        .lookupFunction<_c___p__environ, _dart___p__environ>('__p__environ'))();
  }

  _dart___p__environ? ___p__environ;

  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Uint16>>> __p__wenviron() {
    return (___p__wenviron ??=
        _dylib.lookupFunction<_c___p__wenviron, _dart___p__wenviron>(
            '__p__wenviron'))();
  }

  _dart___p__wenviron? ___p__wenviron;

  ffi.Pointer<ffi.Int8> getenv(
    ffi.Pointer<ffi.Int8> _VarName,
  ) {
    return (_getenv ??=
        _dylib.lookupFunction<_c_getenv, _dart_getenv>('getenv'))(
      _VarName,
    );
  }

  _dart_getenv? _getenv;

  int _dupenv_s(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _Buffer,
    ffi.Pointer<ffi.Uint64> _BufferCount,
    ffi.Pointer<ffi.Int8> _VarName,
  ) {
    return (__dupenv_s ??=
        _dylib.lookupFunction<_c__dupenv_s, _dart__dupenv_s>('_dupenv_s'))(
      _Buffer,
      _BufferCount,
      _VarName,
    );
  }

  _dart__dupenv_s? __dupenv_s;

  int system(
    ffi.Pointer<ffi.Int8> _Command,
  ) {
    return (_system ??=
        _dylib.lookupFunction<_c_system, _dart_system>('system'))(
      _Command,
    );
  }

  _dart_system? _system;

  int _putenv(
    ffi.Pointer<ffi.Int8> _EnvString,
  ) {
    return (__putenv ??=
        _dylib.lookupFunction<_c__putenv, _dart__putenv>('_putenv'))(
      _EnvString,
    );
  }

  _dart__putenv? __putenv;

  int _putenv_s(
    ffi.Pointer<ffi.Int8> _Name,
    ffi.Pointer<ffi.Int8> _Value,
  ) {
    return (__putenv_s ??=
        _dylib.lookupFunction<_c__putenv_s, _dart__putenv_s>('_putenv_s'))(
      _Name,
      _Value,
    );
  }

  _dart__putenv_s? __putenv_s;

  int _searchenv_s(
    ffi.Pointer<ffi.Int8> _Filename,
    ffi.Pointer<ffi.Int8> _VarName,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
  ) {
    return (__searchenv_s ??= _dylib
        .lookupFunction<_c__searchenv_s, _dart__searchenv_s>('_searchenv_s'))(
      _Filename,
      _VarName,
      _Buffer,
      _BufferCount,
    );
  }

  _dart__searchenv_s? __searchenv_s;

  void _searchenv(
    ffi.Pointer<ffi.Int8> _Filename,
    ffi.Pointer<ffi.Int8> _VarName,
    ffi.Pointer<ffi.Int8> _Buffer,
  ) {
    return (__searchenv ??=
        _dylib.lookupFunction<_c__searchenv, _dart__searchenv>('_searchenv'))(
      _Filename,
      _VarName,
      _Buffer,
    );
  }

  _dart__searchenv? __searchenv;

  void _seterrormode(
    int _Mode,
  ) {
    return (__seterrormode ??=
        _dylib.lookupFunction<_c__seterrormode, _dart__seterrormode>(
            '_seterrormode'))(
      _Mode,
    );
  }

  _dart__seterrormode? __seterrormode;

  void _beep(
    int _Frequency,
    int _Duration,
  ) {
    return (__beep ??= _dylib.lookupFunction<_c__beep, _dart__beep>('_beep'))(
      _Frequency,
      _Duration,
    );
  }

  _dart__beep? __beep;

  void _sleep(
    int _Duration,
  ) {
    return (__sleep ??=
        _dylib.lookupFunction<_c__sleep, _dart__sleep>('_sleep'))(
      _Duration,
    );
  }

  _dart__sleep? __sleep;

  ffi.Pointer<ffi.Int8> ecvt(
    double _Value,
    int _DigitCount,
    ffi.Pointer<ffi.Int32> _PtDec,
    ffi.Pointer<ffi.Int32> _PtSign,
  ) {
    return (_ecvt_1 ??= _dylib.lookupFunction<_c_ecvt, _dart_ecvt>('ecvt'))(
      _Value,
      _DigitCount,
      _PtDec,
      _PtSign,
    );
  }

  _dart_ecvt? _ecvt_1;

  ffi.Pointer<ffi.Int8> fcvt(
    double _Value,
    int _FractionalDigitCount,
    ffi.Pointer<ffi.Int32> _PtDec,
    ffi.Pointer<ffi.Int32> _PtSign,
  ) {
    return (_fcvt_1 ??= _dylib.lookupFunction<_c_fcvt, _dart_fcvt>('fcvt'))(
      _Value,
      _FractionalDigitCount,
      _PtDec,
      _PtSign,
    );
  }

  _dart_fcvt? _fcvt_1;

  ffi.Pointer<ffi.Int8> gcvt(
    double _Value,
    int _DigitCount,
    ffi.Pointer<ffi.Int8> _DstBuf,
  ) {
    return (_gcvt_1 ??= _dylib.lookupFunction<_c_gcvt, _dart_gcvt>('gcvt'))(
      _Value,
      _DigitCount,
      _DstBuf,
    );
  }

  _dart_gcvt? _gcvt_1;

  ffi.Pointer<ffi.Int8> itoa(
    int _Value,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _Radix,
  ) {
    return (_itoa_1 ??= _dylib.lookupFunction<_c_itoa, _dart_itoa>('itoa'))(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  _dart_itoa? _itoa_1;

  ffi.Pointer<ffi.Int8> ltoa(
    int _Value,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _Radix,
  ) {
    return (_ltoa_1 ??= _dylib.lookupFunction<_c_ltoa, _dart_ltoa>('ltoa'))(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  _dart_ltoa? _ltoa_1;

  void swab(
    ffi.Pointer<ffi.Int8> _Buf1,
    ffi.Pointer<ffi.Int8> _Buf2,
    int _SizeInBytes,
  ) {
    return (_swab_1 ??= _dylib.lookupFunction<_c_swab, _dart_swab>('swab'))(
      _Buf1,
      _Buf2,
      _SizeInBytes,
    );
  }

  _dart_swab? _swab_1;

  ffi.Pointer<ffi.Int8> ultoa(
    int _Value,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _Radix,
  ) {
    return (_ultoa_1 ??= _dylib.lookupFunction<_c_ultoa, _dart_ultoa>('ultoa'))(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  _dart_ultoa? _ultoa_1;

  int putenv(
    ffi.Pointer<ffi.Int8> _EnvString,
  ) {
    return (_putenv_1 ??=
        _dylib.lookupFunction<_c_putenv, _dart_putenv>('putenv'))(
      _EnvString,
    );
  }

  _dart_putenv? _putenv_1;

  ffi.Pointer<ffi.NativeFunction<_onexit_t>> onexit(
    ffi.Pointer<ffi.NativeFunction<_onexit_t>> _Func,
  ) {
    return (_onexit_1 ??=
        _dylib.lookupFunction<_c_onexit, _dart_onexit>('onexit'))(
      _Func,
    );
  }

  _dart_onexit? _onexit_1;
}

class AHardwareBuffer extends ffi.Opaque {}

class EGLClientPixmapHI extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pData;

  @ffi.Int32()
  external int iWidth;

  @ffi.Int32()
  external int iHeight;

  @ffi.Int32()
  external int iStride;
}

abstract class EXCEPTION_DISPOSITION {
  static const int ExceptionContinueExecution = 0;
  static const int ExceptionContinueSearch = 1;
  static const int ExceptionNestedException = 2;
  static const int ExceptionCollidedUnwind = 3;
}

class EXCEPTION_RECORD extends ffi.Opaque {}

class PCONTEXT extends ffi.Opaque {}

class PDISPATCHER_CONTEXT extends ffi.Opaque {}

class __crt_locale_data_public extends ffi.Struct {
  external ffi.Pointer<ffi.Uint16> _locale_pctype;

  @ffi.Int32()
  external int _locale_mb_cur_max;

  @ffi.Uint32()
  external int _locale_lc_codepage;
}

class __crt_locale_data extends ffi.Opaque {}

class __crt_multibyte_data extends ffi.Opaque {}

class __crt_locale_pointers extends ffi.Struct {
  external ffi.Pointer<__crt_locale_data> locinfo;

  external ffi.Pointer<__crt_multibyte_data> mbcinfo;
}

class _Mbstatet extends ffi.Struct {
  @ffi.Uint64()
  external int _Wchar;

  @ffi.Uint16()
  external int _Byte;

  @ffi.Uint16()
  external int _State;
}

class PPROCESSOR_NUMBER extends ffi.Struct {
  @ffi.Uint16()
  external int Group;

  @ffi.Uint8()
  external int Number;

  @ffi.Uint8()
  external int Reserved;
}

class PGROUP_AFFINITY extends ffi.Opaque {}

abstract class PCOMPARTMENT_ID {
  static const int UNSPECIFIED_COMPARTMENT_ID = 0;
  static const int DEFAULT_COMPARTMENT_ID = 1;
}

class FLOAT128 extends ffi.Struct {
  @ffi.Int64()
  external int LowPart;

  @ffi.Int64()
  external int HighPart;
}

class PLUID extends ffi.Struct {
  @ffi.Uint64()
  external int LowPart;

  @ffi.Int64()
  external int HighPart;
}

class PRLIST_ENTRY extends ffi.Struct {
  external ffi.Pointer<PRLIST_ENTRY> Flink;

  external ffi.Pointer<PRLIST_ENTRY> Blink;
}

class PSINGLE_LIST_ENTRY extends ffi.Struct {
  external ffi.Pointer<PSINGLE_LIST_ENTRY> Next;
}

class LIST_ENTRY32 extends ffi.Struct {
  @ffi.Uint64()
  external int Flink;

  @ffi.Uint64()
  external int Blink;
}

class LIST_ENTRY64 extends ffi.Struct {
  @ffi.Uint64()
  external int Flink;

  @ffi.Uint64()
  external int Blink;
}

class GUID extends ffi.Opaque {}

class OBJECTID extends ffi.Opaque {}

class PM128A extends ffi.Struct {
  @ffi.Uint64()
  external int Low;

  @ffi.Int64()
  external int High;
}

class PXSAVE_FORMAT extends ffi.Opaque {}

class PXSAVE_CET_U_FORMAT extends ffi.Struct {
  @ffi.Uint64()
  external int Ia32CetUMsr;

  @ffi.Uint64()
  external int Ia32Pl3SspMsr;
}

class PXSAVE_AREA_HEADER extends ffi.Opaque {}

class PXSAVE_AREA extends ffi.Opaque {}

class PXSTATE_CONTEXT extends ffi.Struct {
  @ffi.Uint64()
  external int Mask;

  @ffi.Uint64()
  external int Length;

  @ffi.Uint64()
  external int Reserved1;

  external ffi.Pointer<PXSAVE_AREA> Area;

  external ffi.Pointer<ffi.Void> Buffer;
}

class PSCOPE_TABLE_AMD64 extends ffi.Opaque {}

class _PIMAGE_RUNTIME_FUNCTION_ENTRY extends ffi.Opaque {}

class PUNWIND_HISTORY_TABLE_ENTRY extends ffi.Struct {
  @ffi.Uint64()
  external int ImageBase;

  external ffi.Pointer<_PIMAGE_RUNTIME_FUNCTION_ENTRY> FunctionEntry;
}

class PUNWIND_HISTORY_TABLE extends ffi.Opaque {}

class PEXCEPTION_POINTERS extends ffi.Opaque {}

class PKNONVOLATILE_CONTEXT_POINTERS extends ffi.Opaque {}

class PSCOPE_TABLE_ARM extends ffi.Opaque {}

class PSCOPE_TABLE_ARM64 extends ffi.Opaque {}

class PKNONVOLATILE_CONTEXT_POINTERS_ARM64 extends ffi.Struct {
  external ffi.Pointer<ffi.Uint64> X19;

  external ffi.Pointer<ffi.Uint64> X20;

  external ffi.Pointer<ffi.Uint64> X21;

  external ffi.Pointer<ffi.Uint64> X22;

  external ffi.Pointer<ffi.Uint64> X23;

  external ffi.Pointer<ffi.Uint64> X24;

  external ffi.Pointer<ffi.Uint64> X25;

  external ffi.Pointer<ffi.Uint64> X26;

  external ffi.Pointer<ffi.Uint64> X27;

  external ffi.Pointer<ffi.Uint64> X28;

  external ffi.Pointer<ffi.Uint64> Fp;

  external ffi.Pointer<ffi.Uint64> Lr;

  external ffi.Pointer<ffi.Uint64> D8;

  external ffi.Pointer<ffi.Uint64> D9;

  external ffi.Pointer<ffi.Uint64> D10;

  external ffi.Pointer<ffi.Uint64> D11;

  external ffi.Pointer<ffi.Uint64> D12;

  external ffi.Pointer<ffi.Uint64> D13;

  external ffi.Pointer<ffi.Uint64> D14;

  external ffi.Pointer<ffi.Uint64> D15;
}

class PLDT_ENTRY extends ffi.Opaque {}

class WOW64_FLOATING_SAVE_AREA extends ffi.Opaque {}

class WOW64_CONTEXT extends ffi.Opaque {}

class PWOW64_LDT_ENTRY extends ffi.Opaque {}

class PWOW64_DESCRIPTOR_TABLE_ENTRY extends ffi.Opaque {}

class PEXCEPTION_RECORD32 extends ffi.Opaque {}

class PEXCEPTION_RECORD64 extends ffi.Opaque {}

class GENERIC_MAPPING extends ffi.Struct {
  @ffi.Uint64()
  external int GenericRead;

  @ffi.Uint64()
  external int GenericWrite;

  @ffi.Uint64()
  external int GenericExecute;

  @ffi.Uint64()
  external int GenericAll;
}

class PLUID_AND_ATTRIBUTES extends ffi.Opaque {}

class PSID_IDENTIFIER_AUTHORITY extends ffi.Opaque {}

class PISID extends ffi.Opaque {}

abstract class PSID_NAME_USE {
  static const int SidTypeUser = 1;
  static const int SidTypeGroup = 2;
  static const int SidTypeDomain = 3;
  static const int SidTypeAlias = 4;
  static const int SidTypeWellKnownGroup = 5;
  static const int SidTypeDeletedAccount = 6;
  static const int SidTypeInvalid = 7;
  static const int SidTypeUnknown = 8;
  static const int SidTypeComputer = 9;
  static const int SidTypeLabel = 10;
  static const int SidTypeLogonSession = 11;
}

class PSID_AND_ATTRIBUTES extends ffi.Struct {
  external ffi.Pointer<ffi.Void> Sid;

  @ffi.Uint64()
  external int Attributes;
}

class PSID_AND_ATTRIBUTES_HASH extends ffi.Opaque {}

abstract class WELL_KNOWN_SID_TYPE {
  static const int WinNullSid = 0;
  static const int WinWorldSid = 1;
  static const int WinLocalSid = 2;
  static const int WinCreatorOwnerSid = 3;
  static const int WinCreatorGroupSid = 4;
  static const int WinCreatorOwnerServerSid = 5;
  static const int WinCreatorGroupServerSid = 6;
  static const int WinNtAuthoritySid = 7;
  static const int WinDialupSid = 8;
  static const int WinNetworkSid = 9;
  static const int WinBatchSid = 10;
  static const int WinInteractiveSid = 11;
  static const int WinServiceSid = 12;
  static const int WinAnonymousSid = 13;
  static const int WinProxySid = 14;
  static const int WinEnterpriseControllersSid = 15;
  static const int WinSelfSid = 16;
  static const int WinAuthenticatedUserSid = 17;
  static const int WinRestrictedCodeSid = 18;
  static const int WinTerminalServerSid = 19;
  static const int WinRemoteLogonIdSid = 20;
  static const int WinLogonIdsSid = 21;
  static const int WinLocalSystemSid = 22;
  static const int WinLocalServiceSid = 23;
  static const int WinNetworkServiceSid = 24;
  static const int WinBuiltinDomainSid = 25;
  static const int WinBuiltinAdministratorsSid = 26;
  static const int WinBuiltinUsersSid = 27;
  static const int WinBuiltinGuestsSid = 28;
  static const int WinBuiltinPowerUsersSid = 29;
  static const int WinBuiltinAccountOperatorsSid = 30;
  static const int WinBuiltinSystemOperatorsSid = 31;
  static const int WinBuiltinPrintOperatorsSid = 32;
  static const int WinBuiltinBackupOperatorsSid = 33;
  static const int WinBuiltinReplicatorSid = 34;
  static const int WinBuiltinPreWindows2000CompatibleAccessSid = 35;
  static const int WinBuiltinRemoteDesktopUsersSid = 36;
  static const int WinBuiltinNetworkConfigurationOperatorsSid = 37;
  static const int WinAccountAdministratorSid = 38;
  static const int WinAccountGuestSid = 39;
  static const int WinAccountKrbtgtSid = 40;
  static const int WinAccountDomainAdminsSid = 41;
  static const int WinAccountDomainUsersSid = 42;
  static const int WinAccountDomainGuestsSid = 43;
  static const int WinAccountComputersSid = 44;
  static const int WinAccountControllersSid = 45;
  static const int WinAccountCertAdminsSid = 46;
  static const int WinAccountSchemaAdminsSid = 47;
  static const int WinAccountEnterpriseAdminsSid = 48;
  static const int WinAccountPolicyAdminsSid = 49;
  static const int WinAccountRasAndIasServersSid = 50;
  static const int WinNTLMAuthenticationSid = 51;
  static const int WinDigestAuthenticationSid = 52;
  static const int WinSChannelAuthenticationSid = 53;
  static const int WinThisOrganizationSid = 54;
  static const int WinOtherOrganizationSid = 55;
  static const int WinBuiltinIncomingForestTrustBuildersSid = 56;
  static const int WinBuiltinPerfMonitoringUsersSid = 57;
  static const int WinBuiltinPerfLoggingUsersSid = 58;
  static const int WinBuiltinAuthorizationAccessSid = 59;
  static const int WinBuiltinTerminalServerLicenseServersSid = 60;
  static const int WinBuiltinDCOMUsersSid = 61;
  static const int WinBuiltinIUsersSid = 62;
  static const int WinIUserSid = 63;
  static const int WinBuiltinCryptoOperatorsSid = 64;
  static const int WinUntrustedLabelSid = 65;
  static const int WinLowLabelSid = 66;
  static const int WinMediumLabelSid = 67;
  static const int WinHighLabelSid = 68;
  static const int WinSystemLabelSid = 69;
  static const int WinWriteRestrictedCodeSid = 70;
  static const int WinCreatorOwnerRightsSid = 71;
  static const int WinCacheablePrincipalsGroupSid = 72;
  static const int WinNonCacheablePrincipalsGroupSid = 73;
  static const int WinEnterpriseReadonlyControllersSid = 74;
  static const int WinAccountReadonlyControllersSid = 75;
  static const int WinBuiltinEventLogReadersGroup = 76;
  static const int WinNewEnterpriseReadonlyControllersSid = 77;
  static const int WinBuiltinCertSvcDComAccessGroup = 78;
  static const int WinMediumPlusLabelSid = 79;
  static const int WinLocalLogonSid = 80;
  static const int WinConsoleLogonSid = 81;
  static const int WinThisOrganizationCertificateSid = 82;
  static const int WinApplicationPackageAuthoritySid = 83;
  static const int WinBuiltinAnyPackageSid = 84;
  static const int WinCapabilityInternetClientSid = 85;
  static const int WinCapabilityInternetClientServerSid = 86;
  static const int WinCapabilityPrivateNetworkClientServerSid = 87;
  static const int WinCapabilityPicturesLibrarySid = 88;
  static const int WinCapabilityVideosLibrarySid = 89;
  static const int WinCapabilityMusicLibrarySid = 90;
  static const int WinCapabilityDocumentsLibrarySid = 91;
  static const int WinCapabilitySharedUserCertificatesSid = 92;
  static const int WinCapabilityEnterpriseAuthenticationSid = 93;
  static const int WinCapabilityRemovableStorageSid = 94;
  static const int WinBuiltinRDSRemoteAccessServersSid = 95;
  static const int WinBuiltinRDSEndpointServersSid = 96;
  static const int WinBuiltinRDSManagementServersSid = 97;
  static const int WinUserModeDriversSid = 98;
  static const int WinBuiltinHyperVAdminsSid = 99;
  static const int WinAccountCloneableControllersSid = 100;
  static const int WinBuiltinAccessControlAssistanceOperatorsSid = 101;
  static const int WinBuiltinRemoteManagementUsersSid = 102;
  static const int WinAuthenticationAuthorityAssertedSid = 103;
  static const int WinAuthenticationServiceAssertedSid = 104;
  static const int WinLocalAccountSid = 105;
  static const int WinLocalAccountAndAdministratorSid = 106;
  static const int WinAccountProtectedUsersSid = 107;
  static const int WinCapabilityAppointmentsSid = 108;
  static const int WinCapabilityContactsSid = 109;
  static const int WinAccountDefaultSystemManagedSid = 110;
  static const int WinBuiltinDefaultSystemManagedGroupSid = 111;
  static const int WinBuiltinStorageReplicaAdminsSid = 112;
  static const int WinAccountKeyAdminsSid = 113;
  static const int WinAccountEnterpriseKeyAdminsSid = 114;
  static const int WinAuthenticationKeyTrustSid = 115;
  static const int WinAuthenticationKeyPropertyMFASid = 116;
  static const int WinAuthenticationKeyPropertyAttestationSid = 117;
  static const int WinAuthenticationFreshKeyAuthSid = 118;
  static const int WinBuiltinDeviceOwnersSid = 119;
}

class ACL extends ffi.Struct {
  @ffi.Uint8()
  external int AclRevision;

  @ffi.Uint8()
  external int Sbz1;

  @ffi.Uint16()
  external int AclSize;

  @ffi.Uint16()
  external int AceCount;

  @ffi.Uint16()
  external int Sbz2;
}

class ACE_HEADER extends ffi.Struct {
  @ffi.Uint8()
  external int AceType;

  @ffi.Uint8()
  external int AceFlags;

  @ffi.Uint16()
  external int AceSize;
}

class ACCESS_ALLOWED_ACE extends ffi.Opaque {}

class ACCESS_DENIED_ACE extends ffi.Opaque {}

class SYSTEM_AUDIT_ACE extends ffi.Opaque {}

class SYSTEM_ALARM_ACE extends ffi.Opaque {}

class PSYSTEM_RESOURCE_ATTRIBUTE_ACE extends ffi.Opaque {}

class PSYSTEM_SCOPED_POLICY_ID_ACE extends ffi.Opaque {}

class PSYSTEM_MANDATORY_LABEL_ACE extends ffi.Opaque {}

class PSYSTEM_PROCESS_TRUST_LABEL_ACE extends ffi.Opaque {}

class PSYSTEM_ACCESS_FILTER_ACE extends ffi.Opaque {}

class PACCESS_ALLOWED_OBJECT_ACE extends ffi.Opaque {}

class PACCESS_DENIED_OBJECT_ACE extends ffi.Opaque {}

class PSYSTEM_AUDIT_OBJECT_ACE extends ffi.Opaque {}

class PSYSTEM_ALARM_OBJECT_ACE extends ffi.Opaque {}

class PACCESS_ALLOWED_CALLBACK_ACE extends ffi.Opaque {}

class PACCESS_DENIED_CALLBACK_ACE extends ffi.Opaque {}

class PSYSTEM_AUDIT_CALLBACK_ACE extends ffi.Opaque {}

class PSYSTEM_ALARM_CALLBACK_ACE extends ffi.Opaque {}

class PACCESS_ALLOWED_CALLBACK_OBJECT_ACE extends ffi.Opaque {}

class PACCESS_DENIED_CALLBACK_OBJECT_ACE extends ffi.Opaque {}

class PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE extends ffi.Opaque {}

class PSYSTEM_ALARM_CALLBACK_OBJECT_ACE extends ffi.Opaque {}

abstract class ACL_INFORMATION_CLASS {
  static const int AclRevisionInformation = 1;
  static const int AclSizeInformation = 2;
}

class ACL_REVISION_INFORMATION extends ffi.Struct {
  @ffi.Uint64()
  external int AclRevision;
}

class ACL_SIZE_INFORMATION extends ffi.Struct {
  @ffi.Uint64()
  external int AceCount;

  @ffi.Uint64()
  external int AclBytesInUse;

  @ffi.Uint64()
  external int AclBytesFree;
}

class PISECURITY_DESCRIPTOR_RELATIVE extends ffi.Struct {
  @ffi.Uint8()
  external int Revision;

  @ffi.Uint8()
  external int Sbz1;

  @ffi.Uint16()
  external int Control;

  @ffi.Uint64()
  external int Owner;

  @ffi.Uint64()
  external int Group;

  @ffi.Uint64()
  external int Sacl;

  @ffi.Uint64()
  external int Dacl;
}

class PISECURITY_DESCRIPTOR extends ffi.Struct {
  @ffi.Uint8()
  external int Revision;

  @ffi.Uint8()
  external int Sbz1;

  @ffi.Uint16()
  external int Control;

  external ffi.Pointer<ffi.Void> Owner;

  external ffi.Pointer<ffi.Void> Group;

  external ffi.Pointer<ACL> Sacl;

  external ffi.Pointer<ACL> Dacl;
}

class PSECURITY_OBJECT_AI_PARAMS extends ffi.Struct {
  @ffi.Uint64()
  external int Size;

  @ffi.Uint64()
  external int ConstraintMask;
}

class POBJECT_TYPE_LIST extends ffi.Struct {
  @ffi.Uint16()
  external int Level;

  @ffi.Uint16()
  external int Sbz;

  external ffi.Pointer<GUID> ObjectType;
}

abstract class PAUDIT_EVENT_TYPE {
  static const int AuditEventObjectAccess = 0;
  static const int AuditEventDirectoryServiceAccess = 1;
}

class PPRIVILEGE_SET extends ffi.Opaque {}

abstract class ACCESS_REASON_TYPE {
  static const int AccessReasonNone = 0;
  static const int AccessReasonAllowedAce = 65536;
  static const int AccessReasonDeniedAce = 131072;
  static const int AccessReasonAllowedParentAce = 196608;
  static const int AccessReasonDeniedParentAce = 262144;
  static const int AccessReasonNotGrantedByCape = 327680;
  static const int AccessReasonNotGrantedByParentCape = 393216;
  static const int AccessReasonNotGrantedToAppContainer = 458752;
  static const int AccessReasonMissingPrivilege = 1048576;
  static const int AccessReasonFromPrivilege = 2097152;
  static const int AccessReasonIntegrityLevel = 3145728;
  static const int AccessReasonOwnership = 4194304;
  static const int AccessReasonNullDacl = 5242880;
  static const int AccessReasonEmptyDacl = 6291456;
  static const int AccessReasonNoSD = 7340032;
  static const int AccessReasonNoGrant = 8388608;
  static const int AccessReasonTrustLabel = 9437184;
  static const int AccessReasonFilterAce = 10485760;
}

class PACCESS_REASONS extends ffi.Opaque {}

class PSE_SECURITY_DESCRIPTOR extends ffi.Struct {
  @ffi.Uint64()
  external int Size;

  @ffi.Uint64()
  external int Flags;

  external ffi.Pointer<ffi.Void> SecurityDescriptor;
}

class PSE_ACCESS_REQUEST extends ffi.Struct {
  @ffi.Uint64()
  external int Size;

  external ffi.Pointer<PSE_SECURITY_DESCRIPTOR> SeSecurityDescriptor;

  @ffi.Uint64()
  external int DesiredAccess;

  @ffi.Uint64()
  external int PreviouslyGrantedAccess;

  external ffi.Pointer<ffi.Void> PrincipalSelfSid;

  external ffi.Pointer<GENERIC_MAPPING> GenericMapping;

  @ffi.Uint64()
  external int ObjectTypeListCount;

  external ffi.Pointer<POBJECT_TYPE_LIST> ObjectTypeList;
}

class PSE_ACCESS_REPLY extends ffi.Struct {
  @ffi.Uint64()
  external int Size;

  @ffi.Uint64()
  external int ResultListCount;

  external ffi.Pointer<ffi.Uint64> GrantedAccess;

  external ffi.Pointer<ffi.Uint64> AccessStatus;

  external ffi.Pointer<PACCESS_REASONS> AccessReason;

  external ffi.Pointer<ffi.Pointer<PPRIVILEGE_SET>> Privileges;
}

abstract class PSECURITY_IMPERSONATION_LEVEL {
  static const int SecurityAnonymous = 0;
  static const int SecurityIdentification = 1;
  static const int SecurityImpersonation = 2;
  static const int SecurityDelegation = 3;
}

abstract class TOKEN_TYPE {
  static const int TokenPrimary = 1;
  static const int TokenImpersonation = 2;
}

abstract class PTOKEN_ELEVATION_TYPE {
  static const int TokenElevationTypeDefault = 1;
  static const int TokenElevationTypeFull = 2;
  static const int TokenElevationTypeLimited = 3;
}

abstract class PTOKEN_INFORMATION_CLASS {
  static const int TokenUser = 1;
  static const int TokenGroups = 2;
  static const int TokenPrivileges = 3;
  static const int TokenOwner = 4;
  static const int TokenPrimaryGroup = 5;
  static const int TokenDefaultDacl = 6;
  static const int TokenSource = 7;
  static const int TokenType = 8;
  static const int TokenImpersonationLevel = 9;
  static const int TokenStatistics = 10;
  static const int TokenRestrictedSids = 11;
  static const int TokenSessionId = 12;
  static const int TokenGroupsAndPrivileges = 13;
  static const int TokenSessionReference = 14;
  static const int TokenSandBoxInert = 15;
  static const int TokenAuditPolicy = 16;
  static const int TokenOrigin = 17;
  static const int TokenElevationType = 18;
  static const int TokenLinkedToken = 19;
  static const int TokenElevation = 20;
  static const int TokenHasRestrictions = 21;
  static const int TokenAccessInformation = 22;
  static const int TokenVirtualizationAllowed = 23;
  static const int TokenVirtualizationEnabled = 24;
  static const int TokenIntegrityLevel = 25;
  static const int TokenUIAccess = 26;
  static const int TokenMandatoryPolicy = 27;
  static const int TokenLogonSid = 28;
  static const int TokenIsAppContainer = 29;
  static const int TokenCapabilities = 30;
  static const int TokenAppContainerSid = 31;
  static const int TokenAppContainerNumber = 32;
  static const int TokenUserClaimAttributes = 33;
  static const int TokenDeviceClaimAttributes = 34;
  static const int TokenRestrictedUserClaimAttributes = 35;
  static const int TokenRestrictedDeviceClaimAttributes = 36;
  static const int TokenDeviceGroups = 37;
  static const int TokenRestrictedDeviceGroups = 38;
  static const int TokenSecurityAttributes = 39;
  static const int TokenIsRestricted = 40;
  static const int TokenProcessTrustLevel = 41;
  static const int TokenPrivateNameSpace = 42;
  static const int TokenSingletonAttributes = 43;
  static const int TokenBnoIsolation = 44;
  static const int TokenChildProcessFlags = 45;
  static const int TokenIsLessPrivilegedAppContainer = 46;
  static const int TokenIsSandboxed = 47;
  static const int TokenOriginatingProcessTrustLevel = 48;
  static const int MaxTokenInfoClass = 49;
}

class PTOKEN_USER extends ffi.Opaque {}

class PSE_TOKEN_USER extends ffi.Opaque {}

class PTOKEN_GROUPS extends ffi.Opaque {}

class PTOKEN_PRIVILEGES extends ffi.Opaque {}

class PTOKEN_OWNER extends ffi.Struct {
  external ffi.Pointer<ffi.Void> Owner;
}

class PTOKEN_PRIMARY_GROUP extends ffi.Struct {
  external ffi.Pointer<ffi.Void> PrimaryGroup;
}

class PTOKEN_DEFAULT_DACL extends ffi.Struct {
  external ffi.Pointer<ACL> DefaultDacl;
}

class PTOKEN_USER_CLAIMS extends ffi.Struct {
  external ffi.Pointer<ffi.Void> UserClaims;
}

class PTOKEN_DEVICE_CLAIMS extends ffi.Struct {
  external ffi.Pointer<ffi.Void> DeviceClaims;
}

class PTOKEN_GROUPS_AND_PRIVILEGES extends ffi.Opaque {}

class PTOKEN_LINKED_TOKEN extends ffi.Struct {
  external ffi.Pointer<ffi.Void> LinkedToken;
}

class PTOKEN_ELEVATION extends ffi.Struct {
  @ffi.Uint64()
  external int TokenIsElevated;
}

class PTOKEN_MANDATORY_LABEL extends ffi.Opaque {}

class PTOKEN_MANDATORY_POLICY extends ffi.Struct {
  @ffi.Uint64()
  external int Policy;
}

class PTOKEN_ACCESS_INFORMATION extends ffi.Opaque {}

class PTOKEN_AUDIT_POLICY extends ffi.Opaque {}

class PTOKEN_SOURCE extends ffi.Opaque {}

class PTOKEN_STATISTICS extends ffi.Opaque {}

class PTOKEN_CONTROL extends ffi.Opaque {}

class PTOKEN_ORIGIN extends ffi.Opaque {}

abstract class PMANDATORY_LEVEL {
  static const int MandatoryLevelUntrusted = 0;
  static const int MandatoryLevelLow = 1;
  static const int MandatoryLevelMedium = 2;
  static const int MandatoryLevelHigh = 3;
  static const int MandatoryLevelSystem = 4;
  static const int MandatoryLevelSecureProcess = 5;
  static const int MandatoryLevelCount = 6;
}

class PTOKEN_APPCONTAINER_INFORMATION extends ffi.Struct {
  external ffi.Pointer<ffi.Void> TokenAppContainer;
}

class PTOKEN_SID_INFORMATION extends ffi.Struct {
  external ffi.Pointer<ffi.Void> Sid;
}

class PTOKEN_BNO_ISOLATION_INFORMATION extends ffi.Struct {
  external ffi.Pointer<ffi.Uint16> IsolationPrefix;

  @ffi.Uint8()
  external int IsolationEnabled;
}

class PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE extends ffi.Struct {
  @ffi.Uint64()
  external int Version;

  external ffi.Pointer<ffi.Uint16> Name;
}

class PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pValue;

  @ffi.Uint64()
  external int ValueLength;
}

class PCLAIM_SECURITY_ATTRIBUTE_V1 extends ffi.Opaque {}

class PCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 extends ffi.Opaque {}

class PCLAIM_SECURITY_ATTRIBUTES_INFORMATION extends ffi.Opaque {}

class PSECURITY_QUALITY_OF_SERVICE extends ffi.Struct {
  @ffi.Uint64()
  external int Length;

  @ffi.Int32()
  external int ImpersonationLevel;

  @ffi.Uint8()
  external int ContextTrackingMode;

  @ffi.Uint8()
  external int EffectiveOnly;
}

class PSE_IMPERSONATION_STATE extends ffi.Struct {
  external ffi.Pointer<ffi.Void> Token;

  @ffi.Uint8()
  external int CopyOnOpen;

  @ffi.Uint8()
  external int EffectiveOnly;

  @ffi.Int32()
  external int Level;
}

abstract class PSE_IMAGE_SIGNATURE_TYPE {
  static const int SeImageSignatureNone = 0;
  static const int SeImageSignatureEmbedded = 1;
  static const int SeImageSignatureCache = 2;
  static const int SeImageSignatureCatalogCached = 3;
  static const int SeImageSignatureCatalogNotCached = 4;
  static const int SeImageSignatureCatalogHint = 5;
  static const int SeImageSignaturePackageCatalog = 6;
}

abstract class SE_LEARNING_MODE_DATA_TYPE {
  static const int SeLearningModeInvalidType = 0;
  static const int SeLearningModeSettings = 1;
  static const int SeLearningModeMax = 2;
}

class LPSECURITY_CAPABILITIES extends ffi.Struct {
  external ffi.Pointer<ffi.Void> AppContainerSid;

  external ffi.Pointer<PSID_AND_ATTRIBUTES> Capabilities;

  @ffi.Uint64()
  external int CapabilityCount;

  @ffi.Uint64()
  external int Reserved;
}

class PJOB_SET_ARRAY extends ffi.Struct {
  external ffi.Pointer<ffi.Void> JobHandle;

  @ffi.Uint64()
  external int MemberLevel;

  @ffi.Uint64()
  external int Flags;
}

class EXCEPTION_REGISTRATION_RECORD extends ffi.Struct {
  external ffi.Pointer<EXCEPTION_REGISTRATION_RECORD> Next;

  external ffi.Pointer<ffi.NativeFunction<PEXCEPTION_ROUTINE>> Handler;
}

class NT_TIB extends ffi.Struct {
  external ffi.Pointer<EXCEPTION_REGISTRATION_RECORD> ExceptionList;

  external ffi.Pointer<ffi.Void> StackBase;

  external ffi.Pointer<ffi.Void> StackLimit;

  external ffi.Pointer<ffi.Void> SubSystemTib;

  external ffi.Pointer<ffi.Void> ArbitraryUserPointer;

  external ffi.Pointer<NT_TIB> Self;
}

class PNT_TIB32 extends ffi.Struct {
  @ffi.Uint64()
  external int ExceptionList;

  @ffi.Uint64()
  external int StackBase;

  @ffi.Uint64()
  external int StackLimit;

  @ffi.Uint64()
  external int SubSystemTib;

  @ffi.Uint64()
  external int ArbitraryUserPointer;

  @ffi.Uint64()
  external int Self;
}

class PNT_TIB64 extends ffi.Struct {
  @ffi.Uint64()
  external int ExceptionList;

  @ffi.Uint64()
  external int StackBase;

  @ffi.Uint64()
  external int StackLimit;

  @ffi.Uint64()
  external int SubSystemTib;

  @ffi.Uint64()
  external int ArbitraryUserPointer;

  @ffi.Uint64()
  external int Self;
}

class PUMS_CREATE_THREAD_ATTRIBUTES extends ffi.Struct {
  @ffi.Uint64()
  external int UmsVersion;

  external ffi.Pointer<ffi.Void> UmsContext;

  external ffi.Pointer<ffi.Void> UmsCompletionList;
}

class WOW64_ARCHITECTURE_INFORMATION extends ffi.Opaque {}

class PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET extends ffi.Struct {
  @ffi.Uint64()
  external int TargetAddress;

  @ffi.Uint64()
  external int Flags;
}

class PPROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION extends ffi.Struct {
  @ffi.Uint16()
  external int NumberOfTargets;

  @ffi.Uint16()
  external int Reserved;

  @ffi.Uint64()
  external int Reserved2;

  external ffi.Pointer<PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET> Targets;
}

class PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE extends ffi.Struct {
  @ffi.Uint64()
  external int BaseAddress;

  @ffi.Uint64()
  external int Size;

  @ffi.Uint64()
  external int Flags;
}

class PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION extends ffi.Struct {
  @ffi.Uint16()
  external int NumberOfRanges;

  @ffi.Uint16()
  external int Reserved;

  @ffi.Uint64()
  external int Reserved2;

  external ffi.Pointer<PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE> Ranges;
}

class PQUOTA_LIMITS extends ffi.Opaque {}

class PQUOTA_LIMITS_EX extends ffi.Opaque {}

class IO_COUNTERS extends ffi.Struct {
  @ffi.Uint64()
  external int ReadOperationCount;

  @ffi.Uint64()
  external int WriteOperationCount;

  @ffi.Uint64()
  external int OtherOperationCount;

  @ffi.Uint64()
  external int ReadTransferCount;

  @ffi.Uint64()
  external int WriteTransferCount;

  @ffi.Uint64()
  external int OtherTransferCount;
}

abstract class PHARDWARE_COUNTER_TYPE {
  static const int PMCCounter = 0;
  static const int MaxHardwareCounterType = 1;
}

abstract class PPROCESS_MITIGATION_POLICY {
  static const int ProcessDEPPolicy = 0;
  static const int ProcessASLRPolicy = 1;
  static const int ProcessDynamicCodePolicy = 2;
  static const int ProcessStrictHandleCheckPolicy = 3;
  static const int ProcessSystemCallDisablePolicy = 4;
  static const int ProcessMitigationOptionsMask = 5;
  static const int ProcessExtensionPointDisablePolicy = 6;
  static const int ProcessControlFlowGuardPolicy = 7;
  static const int ProcessSignaturePolicy = 8;
  static const int ProcessFontDisablePolicy = 9;
  static const int ProcessImageLoadPolicy = 10;
  static const int ProcessSystemCallFilterPolicy = 11;
  static const int ProcessPayloadRestrictionPolicy = 12;
  static const int ProcessChildProcessPolicy = 13;
  static const int ProcessSideChannelIsolationPolicy = 14;
  static const int ProcessUserShadowStackPolicy = 15;
  static const int MaxProcessMitigationPolicy = 16;
}

class PPROCESS_MITIGATION_ASLR_POLICY extends ffi.Opaque {}

class PPROCESS_MITIGATION_DEP_POLICY extends ffi.Struct {
  @ffi.Uint8()
  external int Permanent;
}

class PPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY extends ffi.Opaque {}

class PPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY extends ffi.Opaque {}

class PPROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY extends ffi.Opaque {}

class PPROCESS_MITIGATION_DYNAMIC_CODE_POLICY extends ffi.Opaque {}

class PPROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY extends ffi.Opaque {}

class PPROCESS_MITIGATION_BINARY_SIGNATURE_POLICY extends ffi.Opaque {}

class PPROCESS_MITIGATION_FONT_DISABLE_POLICY extends ffi.Opaque {}

class PPROCESS_MITIGATION_IMAGE_LOAD_POLICY extends ffi.Opaque {}

class PPROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY extends ffi.Opaque {}

class PPROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY extends ffi.Opaque {}

class PPROCESS_MITIGATION_CHILD_PROCESS_POLICY extends ffi.Opaque {}

class PPROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY extends ffi.Opaque {}

class PPROCESS_MITIGATION_USER_SHADOW_STACK_POLICY extends ffi.Opaque {}

class PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION extends ffi.Opaque {}

class PJOBOBJECT_BASIC_LIMIT_INFORMATION extends ffi.Opaque {}

class PJOBOBJECT_EXTENDED_LIMIT_INFORMATION extends ffi.Opaque {}

class PJOBOBJECT_BASIC_PROCESS_ID_LIST extends ffi.Opaque {}

class PJOBOBJECT_BASIC_UI_RESTRICTIONS extends ffi.Struct {
  @ffi.Uint64()
  external int UIRestrictionsClass;
}

class PJOBOBJECT_SECURITY_LIMIT_INFORMATION extends ffi.Struct {
  @ffi.Uint64()
  external int SecurityLimitFlags;

  external ffi.Pointer<ffi.Void> JobToken;

  external ffi.Pointer<PTOKEN_GROUPS> SidsToDisable;

  external ffi.Pointer<PTOKEN_PRIVILEGES> PrivilegesToDelete;

  external ffi.Pointer<PTOKEN_GROUPS> RestrictedSids;
}

class PJOBOBJECT_END_OF_JOB_TIME_INFORMATION extends ffi.Struct {
  @ffi.Uint64()
  external int EndOfJobTimeAction;
}

class PJOBOBJECT_ASSOCIATE_COMPLETION_PORT extends ffi.Struct {
  external ffi.Pointer<ffi.Void> CompletionKey;

  external ffi.Pointer<ffi.Void> CompletionPort;
}

class PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION extends ffi.Opaque {}

class PJOBOBJECT_JOBSET_INFORMATION extends ffi.Struct {
  @ffi.Uint64()
  external int MemberLevel;
}

abstract class PJOBOBJECT_RATE_CONTROL_TOLERANCE {
  static const int ToleranceLow = 1;
  static const int ToleranceMedium = 2;
  static const int ToleranceHigh = 3;
}

abstract class PJOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL {
  static const int ToleranceIntervalShort = 1;
  static const int ToleranceIntervalMedium = 2;
  static const int ToleranceIntervalLong = 3;
}

class PJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION extends ffi.Opaque {}

class JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2 extends ffi.Opaque {}

class PJOBOBJECT_LIMIT_VIOLATION_INFORMATION extends ffi.Opaque {}

class JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2 extends ffi.Opaque {}

class PJOBOBJECT_CPU_RATE_CONTROL_INFORMATION extends ffi.Struct {
  @ffi.Uint64()
  external int ControlFlags;
}

abstract class JOB_OBJECT_NET_RATE_CONTROL_FLAGS {
  static const int JOB_OBJECT_NET_RATE_CONTROL_ENABLE = 1;
  static const int JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH = 2;
  static const int JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG = 4;
  static const int JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS = 7;
}

class JOBOBJECT_NET_RATE_CONTROL_INFORMATION extends ffi.Struct {
  @ffi.Uint64()
  external int MaxBandwidth;

  @ffi.Int32()
  external int ControlFlags;

  @ffi.Uint8()
  external int DscpTag;
}

abstract class JOB_OBJECT_IO_RATE_CONTROL_FLAGS {
  static const int JOB_OBJECT_IO_RATE_CONTROL_ENABLE = 1;
  static const int JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME = 2;
  static const int JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL = 4;
  static const int JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP = 8;
  static const int JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS = 15;
}

class JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE extends ffi.Struct {
  @ffi.Int64()
  external int MaxIops;

  @ffi.Int64()
  external int MaxBandwidth;

  @ffi.Int64()
  external int ReservationIops;

  external ffi.Pointer<ffi.Uint16> VolumeName;

  @ffi.Uint64()
  external int BaseIoSize;

  @ffi.Int32()
  external int ControlFlags;

  @ffi.Uint16()
  external int VolumeNameLength;
}

class JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2 extends ffi.Struct {
  @ffi.Int64()
  external int MaxIops;

  @ffi.Int64()
  external int MaxBandwidth;

  @ffi.Int64()
  external int ReservationIops;

  external ffi.Pointer<ffi.Uint16> VolumeName;

  @ffi.Uint64()
  external int BaseIoSize;

  @ffi.Int32()
  external int ControlFlags;

  @ffi.Uint16()
  external int VolumeNameLength;

  @ffi.Int64()
  external int CriticalReservationIops;

  @ffi.Int64()
  external int ReservationBandwidth;

  @ffi.Int64()
  external int CriticalReservationBandwidth;

  @ffi.Int64()
  external int MaxTimePercent;

  @ffi.Int64()
  external int ReservationTimePercent;

  @ffi.Int64()
  external int CriticalReservationTimePercent;
}

class JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3 extends ffi.Struct {
  @ffi.Int64()
  external int MaxIops;

  @ffi.Int64()
  external int MaxBandwidth;

  @ffi.Int64()
  external int ReservationIops;

  external ffi.Pointer<ffi.Uint16> VolumeName;

  @ffi.Uint64()
  external int BaseIoSize;

  @ffi.Int32()
  external int ControlFlags;

  @ffi.Uint16()
  external int VolumeNameLength;

  @ffi.Int64()
  external int CriticalReservationIops;

  @ffi.Int64()
  external int ReservationBandwidth;

  @ffi.Int64()
  external int CriticalReservationBandwidth;

  @ffi.Int64()
  external int MaxTimePercent;

  @ffi.Int64()
  external int ReservationTimePercent;

  @ffi.Int64()
  external int CriticalReservationTimePercent;

  @ffi.Int64()
  external int SoftMaxIops;

  @ffi.Int64()
  external int SoftMaxBandwidth;

  @ffi.Int64()
  external int SoftMaxTimePercent;

  @ffi.Int64()
  external int LimitExcessNotifyIops;

  @ffi.Int64()
  external int LimitExcessNotifyBandwidth;

  @ffi.Int64()
  external int LimitExcessNotifyTimePercent;
}

abstract class JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS {
  static const int JOBOBJECT_IO_ATTRIBUTION_CONTROL_ENABLE = 1;
  static const int JOBOBJECT_IO_ATTRIBUTION_CONTROL_DISABLE = 2;
  static const int JOBOBJECT_IO_ATTRIBUTION_CONTROL_VALID_FLAGS = 3;
}

class PJOBOBJECT_IO_ATTRIBUTION_STATS extends ffi.Struct {
  @ffi.Uint64()
  external int IoCount;

  @ffi.Uint64()
  external int TotalNonOverlappedQueueTime;

  @ffi.Uint64()
  external int TotalNonOverlappedServiceTime;

  @ffi.Uint64()
  external int TotalSize;
}

class PJOBOBJECT_IO_ATTRIBUTION_INFORMATION extends ffi.Opaque {}

abstract class JOBOBJECTINFOCLASS {
  static const int JobObjectBasicAccountingInformation = 1;
  static const int JobObjectBasicLimitInformation = 2;
  static const int JobObjectBasicProcessIdList = 3;
  static const int JobObjectBasicUIRestrictions = 4;
  static const int JobObjectSecurityLimitInformation = 5;
  static const int JobObjectEndOfJobTimeInformation = 6;
  static const int JobObjectAssociateCompletionPortInformation = 7;
  static const int JobObjectBasicAndIoAccountingInformation = 8;
  static const int JobObjectExtendedLimitInformation = 9;
  static const int JobObjectJobSetInformation = 10;
  static const int JobObjectGroupInformation = 11;
  static const int JobObjectNotificationLimitInformation = 12;
  static const int JobObjectLimitViolationInformation = 13;
  static const int JobObjectGroupInformationEx = 14;
  static const int JobObjectCpuRateControlInformation = 15;
  static const int JobObjectCompletionFilter = 16;
  static const int JobObjectCompletionCounter = 17;
  static const int JobObjectReserved1Information = 18;
  static const int JobObjectReserved2Information = 19;
  static const int JobObjectReserved3Information = 20;
  static const int JobObjectReserved4Information = 21;
  static const int JobObjectReserved5Information = 22;
  static const int JobObjectReserved6Information = 23;
  static const int JobObjectReserved7Information = 24;
  static const int JobObjectReserved8Information = 25;
  static const int JobObjectReserved9Information = 26;
  static const int JobObjectReserved10Information = 27;
  static const int JobObjectReserved11Information = 28;
  static const int JobObjectReserved12Information = 29;
  static const int JobObjectReserved13Information = 30;
  static const int JobObjectReserved14Information = 31;
  static const int JobObjectNetRateControlInformation = 32;
  static const int JobObjectNotificationLimitInformation2 = 33;
  static const int JobObjectLimitViolationInformation2 = 34;
  static const int JobObjectCreateSilo = 35;
  static const int JobObjectSiloBasicInformation = 36;
  static const int JobObjectReserved15Information = 37;
  static const int JobObjectReserved16Information = 38;
  static const int JobObjectReserved17Information = 39;
  static const int JobObjectReserved18Information = 40;
  static const int JobObjectReserved19Information = 41;
  static const int JobObjectReserved20Information = 42;
  static const int JobObjectReserved21Information = 43;
  static const int JobObjectReserved22Information = 44;
  static const int JobObjectReserved23Information = 45;
  static const int JobObjectReserved24Information = 46;
  static const int JobObjectReserved25Information = 47;
  static const int MaxJobObjectInfoClass = 48;
}

class PSILOOBJECT_BASIC_INFORMATION extends ffi.Opaque {}

abstract class PSERVERSILO_STATE {
  static const int SERVERSILO_INITING = 0;
  static const int SERVERSILO_STARTED = 1;
  static const int SERVERSILO_SHUTTING_DOWN = 2;
  static const int SERVERSILO_TERMINATING = 3;
  static const int SERVERSILO_TERMINATED = 4;
}

class PSERVERSILO_BASIC_INFORMATION extends ffi.Struct {
  @ffi.Uint64()
  external int ServiceSessionId;

  @ffi.Int32()
  external int State;

  @ffi.Uint64()
  external int ExitStatus;

  @ffi.Uint8()
  external int IsDownlevelContainer;

  external ffi.Pointer<ffi.Void> ApiSetSchema;

  external ffi.Pointer<ffi.Void> HostApiSetSchema;
}

abstract class PFIRMWARE_TYPE {
  static const int FirmwareTypeUnknown = 0;
  static const int FirmwareTypeBios = 1;
  static const int FirmwareTypeUefi = 2;
  static const int FirmwareTypeMax = 3;
}

abstract class LOGICAL_PROCESSOR_RELATIONSHIP {
  static const int RelationProcessorCore = 0;
  static const int RelationNumaNode = 1;
  static const int RelationCache = 2;
  static const int RelationProcessorPackage = 3;
  static const int RelationGroup = 4;
  static const int RelationAll = 65535;
}

abstract class PROCESSOR_CACHE_TYPE {
  static const int CacheUnified = 0;
  static const int CacheInstruction = 1;
  static const int CacheData = 2;
  static const int CacheTrace = 3;
}

class PCACHE_DESCRIPTOR extends ffi.Struct {
  @ffi.Uint8()
  external int Level;

  @ffi.Uint8()
  external int Associativity;

  @ffi.Uint16()
  external int LineSize;

  @ffi.Uint64()
  external int Size;

  @ffi.Int32()
  external int Type;
}

class PSYSTEM_LOGICAL_PROCESSOR_INFORMATION extends ffi.Struct {
  @ffi.Uint64()
  external int ProcessorMask;

  @ffi.Int32()
  external int Relationship;
}

class PPROCESSOR_RELATIONSHIP extends ffi.Opaque {}

class PNUMA_NODE_RELATIONSHIP extends ffi.Opaque {}

class PCACHE_RELATIONSHIP extends ffi.Opaque {}

class PPROCESSOR_GROUP_INFO extends ffi.Opaque {}

class PGROUP_RELATIONSHIP extends ffi.Opaque {}

class _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX extends ffi.Struct {
  @ffi.Int32()
  external int Relationship;

  @ffi.Uint64()
  external int Size;
}

abstract class PCPU_SET_INFORMATION_TYPE {
  static const int CpuSetInformation = 0;
}

class _SYSTEM_CPU_SET_INFORMATION extends ffi.Struct {
  @ffi.Uint64()
  external int Size;

  @ffi.Int32()
  external int Type;
}

class PSYSTEM_POOL_ZEROING_INFORMATION extends ffi.Struct {
  @ffi.Uint8()
  external int PoolZeroingSupportPresent;
}

class PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION extends ffi.Struct {
  @ffi.Uint64()
  external int CycleTime;
}

class PXSTATE_FEATURE extends ffi.Struct {
  @ffi.Uint64()
  external int Offset;

  @ffi.Uint64()
  external int Size;
}

class PXSTATE_CONFIGURATION extends ffi.Opaque {}

class PMEMORY_BASIC_INFORMATION extends ffi.Struct {
  external ffi.Pointer<ffi.Void> BaseAddress;

  external ffi.Pointer<ffi.Void> AllocationBase;

  @ffi.Uint64()
  external int AllocationProtect;

  @ffi.Uint16()
  external int PartitionId;

  @ffi.Uint64()
  external int RegionSize;

  @ffi.Uint64()
  external int State;

  @ffi.Uint64()
  external int Protect;

  @ffi.Uint64()
  external int Type;
}

class PMEMORY_BASIC_INFORMATION32 extends ffi.Struct {
  @ffi.Uint64()
  external int BaseAddress;

  @ffi.Uint64()
  external int AllocationBase;

  @ffi.Uint64()
  external int AllocationProtect;

  @ffi.Uint64()
  external int RegionSize;

  @ffi.Uint64()
  external int State;

  @ffi.Uint64()
  external int Protect;

  @ffi.Uint64()
  external int Type;
}

class PMEMORY_BASIC_INFORMATION64 extends ffi.Struct {
  @ffi.Uint64()
  external int BaseAddress;

  @ffi.Uint64()
  external int AllocationBase;

  @ffi.Uint64()
  external int AllocationProtect;

  @ffi.Uint64()
  external int __alignment1;

  @ffi.Uint64()
  external int RegionSize;

  @ffi.Uint64()
  external int State;

  @ffi.Uint64()
  external int Protect;

  @ffi.Uint64()
  external int Type;

  @ffi.Uint64()
  external int __alignment2;
}

class PCFG_CALL_TARGET_INFO extends ffi.Struct {
  @ffi.Uint64()
  external int Offset;

  @ffi.Uint64()
  external int Flags;
}

class PMEM_ADDRESS_REQUIREMENTS extends ffi.Struct {
  external ffi.Pointer<ffi.Void> LowestStartingAddress;

  external ffi.Pointer<ffi.Void> HighestEndingAddress;

  @ffi.Uint64()
  external int Alignment;
}

abstract class PMEM_EXTENDED_PARAMETER_TYPE {
  static const int MemExtendedParameterInvalidType = 0;
  static const int MemExtendedParameterAddressRequirements = 1;
  static const int MemExtendedParameterNumaNode = 2;
  static const int MemExtendedParameterPartitionHandle = 3;
  static const int MemExtendedParameterUserPhysicalHandle = 4;
  static const int MemExtendedParameterAttributeFlags = 5;
  static const int MemExtendedParameterMax = 6;
}

class PMEM_EXTENDED_PARAMETER extends ffi.Opaque {}

abstract class PMEM_SECTION_EXTENDED_PARAMETER_TYPE {
  static const int MemSectionExtendedParameterInvalidType = 0;
  static const int MemSectionExtendedParameterUserPhysicalFlags = 1;
  static const int MemSectionExtendedParameterNumaNode = 2;
  static const int MemSectionExtendedParameterMax = 3;
}

class PENCLAVE_CREATE_INFO_SGX extends ffi.Opaque {}

class PENCLAVE_INIT_INFO_SGX extends ffi.Opaque {}

class PENCLAVE_CREATE_INFO_VBS extends ffi.Opaque {}

class PENCLAVE_CREATE_INFO_VBS_BASIC extends ffi.Opaque {}

class PENCLAVE_LOAD_DATA_VBS_BASIC extends ffi.Struct {
  @ffi.Uint64()
  external int PageType;
}

class PENCLAVE_INIT_INFO_VBS_BASIC extends ffi.Opaque {}

class PENCLAVE_INIT_INFO_VBS extends ffi.Struct {
  @ffi.Uint64()
  external int Length;

  @ffi.Uint64()
  external int ThreadCount;
}

class PFILE_ID_128 extends ffi.Opaque {}

class PFILE_NOTIFY_INFORMATION extends ffi.Opaque {}

class PFILE_NOTIFY_EXTENDED_INFORMATION extends ffi.Opaque {}

class PREPARSE_GUID_DATA_BUFFER extends ffi.Opaque {}

class PSCRUB_DATA_INPUT extends ffi.Opaque {}

class PSCRUB_PARITY_EXTENT extends ffi.Struct {
  @ffi.Int64()
  external int Offset;

  @ffi.Uint64()
  external int Length;
}

class PSCRUB_PARITY_EXTENT_DATA extends ffi.Opaque {}

class PSCRUB_DATA_OUTPUT extends ffi.Opaque {}

abstract class SharedVirtualDiskSupportType {
  static const int SharedVirtualDisksUnsupported = 0;
  static const int SharedVirtualDisksSupported = 1;
  static const int SharedVirtualDiskSnapshotsSupported = 3;
  static const int SharedVirtualDiskCDPSnapshotsSupported = 7;
}

abstract class SharedVirtualDiskHandleState {
  static const int SharedVirtualDiskHandleStateNone = 0;
  static const int SharedVirtualDiskHandleStateFileShared = 1;
  static const int SharedVirtualDiskHandleStateHandleShared = 3;
}

class PSHARED_VIRTUAL_DISK_SUPPORT extends ffi.Struct {
  @ffi.Int32()
  external int SharedVirtualDiskSupport;

  @ffi.Int32()
  external int HandleState;
}

class PREARRANGE_FILE_DATA extends ffi.Struct {
  @ffi.Uint64()
  external int SourceStartingOffset;

  @ffi.Uint64()
  external int TargetOffset;

  external ffi.Pointer<ffi.Void> SourceFileHandle;

  @ffi.Uint64()
  external int Length;

  @ffi.Uint64()
  external int Flags;
}

class PREARRANGE_FILE_DATA32 extends ffi.Struct {
  @ffi.Uint64()
  external int SourceStartingOffset;

  @ffi.Uint64()
  external int TargetOffset;

  @ffi.Uint32()
  external int SourceFileHandle;

  @ffi.Uint64()
  external int Length;

  @ffi.Uint64()
  external int Flags;
}

class PSHUFFLE_FILE_DATA extends ffi.Struct {
  @ffi.Int64()
  external int StartingOffset;

  @ffi.Int64()
  external int Length;

  @ffi.Uint64()
  external int Flags;
}

class PNETWORK_APP_INSTANCE_EA extends ffi.Opaque {}

abstract class PSYSTEM_POWER_STATE {
  static const int PowerSystemUnspecified = 0;
  static const int PowerSystemWorking = 1;
  static const int PowerSystemSleeping1 = 2;
  static const int PowerSystemSleeping2 = 3;
  static const int PowerSystemSleeping3 = 4;
  static const int PowerSystemHibernate = 5;
  static const int PowerSystemShutdown = 6;
  static const int PowerSystemMaximum = 7;
}

abstract class PPOWER_ACTION {
  static const int PowerActionNone = 0;
  static const int PowerActionReserved = 1;
  static const int PowerActionSleep = 2;
  static const int PowerActionHibernate = 3;
  static const int PowerActionShutdown = 4;
  static const int PowerActionShutdownReset = 5;
  static const int PowerActionShutdownOff = 6;
  static const int PowerActionWarmEject = 7;
  static const int PowerActionDisplayOff = 8;
}

abstract class PDEVICE_POWER_STATE {
  static const int PowerDeviceUnspecified = 0;
  static const int PowerDeviceD0 = 1;
  static const int PowerDeviceD1 = 2;
  static const int PowerDeviceD2 = 3;
  static const int PowerDeviceD3 = 4;
  static const int PowerDeviceMaximum = 5;
}

abstract class PMONITOR_DISPLAY_STATE {
  static const int PowerMonitorOff = 0;
  static const int PowerMonitorOn = 1;
  static const int PowerMonitorDim = 2;
}

abstract class PUSER_ACTIVITY_PRESENCE {
  static const int PowerUserPresent = 0;
  static const int PowerUserNotPresent = 1;
  static const int PowerUserInactive = 2;
  static const int PowerUserMaximum = 3;
  static const int PowerUserInvalid = 3;
}

abstract class LATENCY_TIME {
  static const int LT_DONT_CARE = 0;
  static const int LT_LOWEST_LATENCY = 1;
}

abstract class PPOWER_REQUEST_TYPE {
  static const int PowerRequestDisplayRequired = 0;
  static const int PowerRequestSystemRequired = 1;
  static const int PowerRequestAwayModeRequired = 2;
  static const int PowerRequestExecutionRequired = 3;
}

class PCM_POWER_DATA extends ffi.Opaque {}

abstract class POWER_INFORMATION_LEVEL {
  static const int SystemPowerPolicyAc = 0;
  static const int SystemPowerPolicyDc = 1;
  static const int VerifySystemPolicyAc = 2;
  static const int VerifySystemPolicyDc = 3;
  static const int SystemPowerCapabilities = 4;
  static const int SystemBatteryState = 5;
  static const int SystemPowerStateHandler = 6;
  static const int ProcessorStateHandler = 7;
  static const int SystemPowerPolicyCurrent = 8;
  static const int AdministratorPowerPolicy = 9;
  static const int SystemReserveHiberFile = 10;
  static const int ProcessorInformation = 11;
  static const int SystemPowerInformation = 12;
  static const int ProcessorStateHandler2 = 13;
  static const int LastWakeTime = 14;
  static const int LastSleepTime = 15;
  static const int SystemExecutionState = 16;
  static const int SystemPowerStateNotifyHandler = 17;
  static const int ProcessorPowerPolicyAc = 18;
  static const int ProcessorPowerPolicyDc = 19;
  static const int VerifyProcessorPowerPolicyAc = 20;
  static const int VerifyProcessorPowerPolicyDc = 21;
  static const int ProcessorPowerPolicyCurrent = 22;
  static const int SystemPowerStateLogging = 23;
  static const int SystemPowerLoggingEntry = 24;
  static const int SetPowerSettingValue = 25;
  static const int NotifyUserPowerSetting = 26;
  static const int PowerInformationLevelUnused0 = 27;
  static const int SystemMonitorHiberBootPowerOff = 28;
  static const int SystemVideoState = 29;
  static const int TraceApplicationPowerMessage = 30;
  static const int TraceApplicationPowerMessageEnd = 31;
  static const int ProcessorPerfStates = 32;
  static const int ProcessorIdleStates = 33;
  static const int ProcessorCap = 34;
  static const int SystemWakeSource = 35;
  static const int SystemHiberFileInformation = 36;
  static const int TraceServicePowerMessage = 37;
  static const int ProcessorLoad = 38;
  static const int PowerShutdownNotification = 39;
  static const int MonitorCapabilities = 40;
  static const int SessionPowerInit = 41;
  static const int SessionDisplayState = 42;
  static const int PowerRequestCreate = 43;
  static const int PowerRequestAction = 44;
  static const int GetPowerRequestList = 45;
  static const int ProcessorInformationEx = 46;
  static const int NotifyUserModeLegacyPowerEvent = 47;
  static const int GroupPark = 48;
  static const int ProcessorIdleDomains = 49;
  static const int WakeTimerList = 50;
  static const int SystemHiberFileSize = 51;
  static const int ProcessorIdleStatesHv = 52;
  static const int ProcessorPerfStatesHv = 53;
  static const int ProcessorPerfCapHv = 54;
  static const int ProcessorSetIdle = 55;
  static const int LogicalProcessorIdling = 56;
  static const int UserPresence = 57;
  static const int PowerSettingNotificationName = 58;
  static const int GetPowerSettingValue = 59;
  static const int IdleResiliency = 60;
  static const int SessionRITState = 61;
  static const int SessionConnectNotification = 62;
  static const int SessionPowerCleanup = 63;
  static const int SessionLockState = 64;
  static const int SystemHiberbootState = 65;
  static const int PlatformInformation = 66;
  static const int PdcInvocation = 67;
  static const int MonitorInvocation = 68;
  static const int FirmwareTableInformationRegistered = 69;
  static const int SetShutdownSelectedTime = 70;
  static const int SuspendResumeInvocation = 71;
  static const int PlmPowerRequestCreate = 72;
  static const int ScreenOff = 73;
  static const int CsDeviceNotification = 74;
  static const int PlatformRole = 75;
  static const int LastResumePerformance = 76;
  static const int DisplayBurst = 77;
  static const int ExitLatencySamplingPercentage = 78;
  static const int RegisterSpmPowerSettings = 79;
  static const int PlatformIdleStates = 80;
  static const int ProcessorIdleVeto = 81;
  static const int PlatformIdleVeto = 82;
  static const int SystemBatteryStatePrecise = 83;
  static const int ThermalEvent = 84;
  static const int PowerRequestActionInternal = 85;
  static const int BatteryDeviceState = 86;
  static const int PowerInformationInternal = 87;
  static const int ThermalStandby = 88;
  static const int SystemHiberFileType = 89;
  static const int PhysicalPowerButtonPress = 90;
  static const int QueryPotentialDripsConstraint = 91;
  static const int EnergyTrackerCreate = 92;
  static const int EnergyTrackerQuery = 93;
  static const int UpdateBlackBoxRecorder = 94;
  static const int SessionAllowExternalDmaDevices = 95;
  static const int PowerInformationLevelMaximum = 96;
}

abstract class PPOWER_USER_PRESENCE_TYPE {
  static const int UserNotPresent = 0;
  static const int UserPresent = 1;
  static const int UserUnknown = 255;
}

class PPOWER_USER_PRESENCE extends ffi.Struct {
  @ffi.Int32()
  external int UserPresence;
}

class PPOWER_SESSION_CONNECT extends ffi.Struct {
  @ffi.Uint8()
  external int Connected;

  @ffi.Uint8()
  external int Console;
}

class PPOWER_SESSION_TIMEOUTS extends ffi.Struct {
  @ffi.Uint64()
  external int InputTimeout;

  @ffi.Uint64()
  external int DisplayTimeout;
}

class PPOWER_SESSION_RIT_STATE extends ffi.Struct {
  @ffi.Uint8()
  external int Active;

  @ffi.Uint64()
  external int LastInputTime;
}

class PPOWER_SESSION_WINLOGON extends ffi.Struct {
  @ffi.Uint64()
  external int SessionId;

  @ffi.Uint8()
  external int Console;

  @ffi.Uint8()
  external int Locked;
}

class PPOWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES extends ffi.Struct {
  @ffi.Uint8()
  external int IsAllowed;
}

class PPOWER_IDLE_RESILIENCY extends ffi.Struct {
  @ffi.Uint64()
  external int CoalescingTimeout;

  @ffi.Uint64()
  external int IdleResiliencyPeriod;
}

abstract class POWER_MONITOR_REQUEST_REASON {
  static const int MonitorRequestReasonUnknown = 0;
  static const int MonitorRequestReasonPowerButton = 1;
  static const int MonitorRequestReasonRemoteConnection = 2;
  static const int MonitorRequestReasonScMonitorpower = 3;
  static const int MonitorRequestReasonUserInput = 4;
  static const int MonitorRequestReasonAcDcDisplayBurst = 5;
  static const int MonitorRequestReasonUserDisplayBurst = 6;
  static const int MonitorRequestReasonPoSetSystemState = 7;
  static const int MonitorRequestReasonSetThreadExecutionState = 8;
  static const int MonitorRequestReasonFullWake = 9;
  static const int MonitorRequestReasonSessionUnlock = 10;
  static const int MonitorRequestReasonScreenOffRequest = 11;
  static const int MonitorRequestReasonIdleTimeout = 12;
  static const int MonitorRequestReasonPolicyChange = 13;
  static const int MonitorRequestReasonSleepButton = 14;
  static const int MonitorRequestReasonLid = 15;
  static const int MonitorRequestReasonBatteryCountChange = 16;
  static const int MonitorRequestReasonGracePeriod = 17;
  static const int MonitorRequestReasonPnP = 18;
  static const int MonitorRequestReasonDP = 19;
  static const int MonitorRequestReasonSxTransition = 20;
  static const int MonitorRequestReasonSystemIdle = 21;
  static const int MonitorRequestReasonNearProximity = 22;
  static const int MonitorRequestReasonThermalStandby = 23;
  static const int MonitorRequestReasonResumePdc = 24;
  static const int MonitorRequestReasonResumeS4 = 25;
  static const int MonitorRequestReasonTerminal = 26;
  static const int MonitorRequestReasonPdcSignal = 27;
  static const int MonitorRequestReasonAcDcDisplayBurstSuppressed = 28;
  static const int MonitorRequestReasonSystemStateEntered = 29;
  static const int MonitorRequestReasonWinrt = 30;
  static const int MonitorRequestReasonUserInputKeyboard = 31;
  static const int MonitorRequestReasonUserInputMouse = 32;
  static const int MonitorRequestReasonUserInputTouch = 33;
  static const int MonitorRequestReasonUserInputPen = 34;
  static const int MonitorRequestReasonUserInputAccelerometer = 35;
  static const int MonitorRequestReasonUserInputHid = 36;
  static const int MonitorRequestReasonUserInputPoUserPresent = 37;
  static const int MonitorRequestReasonUserInputSessionSwitch = 38;
  static const int MonitorRequestReasonUserInputInitialization = 39;
  static const int MonitorRequestReasonPdcSignalWindowsMobilePwrNotif = 40;
  static const int MonitorRequestReasonPdcSignalWindowsMobileShell = 41;
  static const int MonitorRequestReasonPdcSignalHeyCortana = 42;
  static const int MonitorRequestReasonPdcSignalHolographicShell = 43;
  static const int MonitorRequestReasonPdcSignalFingerprint = 44;
  static const int MonitorRequestReasonDirectedDrips = 45;
  static const int MonitorRequestReasonDim = 46;
  static const int MonitorRequestReasonBuiltinPanel = 47;
  static const int MonitorRequestReasonDisplayRequiredUnDim = 48;
  static const int MonitorRequestReasonBatteryCountChangeSuppressed = 49;
  static const int MonitorRequestReasonResumeModernStandby = 50;
  static const int MonitorRequestReasonMax = 51;
}

abstract class POWER_MONITOR_REQUEST_TYPE {
  static const int MonitorRequestTypeOff = 0;
  static const int MonitorRequestTypeOnAndPresent = 1;
  static const int MonitorRequestTypeToggleOn = 2;
}

class PPOWER_MONITOR_INVOCATION extends ffi.Struct {
  @ffi.Uint8()
  external int Console;

  @ffi.Int32()
  external int RequestReason;
}

class PRESUME_PERFORMANCE extends ffi.Struct {
  @ffi.Uint64()
  external int PostTimeMs;

  @ffi.Uint64()
  external int TotalResumeTimeMs;

  @ffi.Uint64()
  external int ResumeCompleteTimestamp;
}

abstract class SYSTEM_POWER_CONDITION {
  static const int PoAc = 0;
  static const int PoDc = 1;
  static const int PoHot = 2;
  static const int PoConditionMaximum = 3;
}

class PSET_POWER_SETTING_VALUE extends ffi.Opaque {}

class PNOTIFY_USER_POWER_SETTING extends ffi.Opaque {}

class PAPPLICATIONLAUNCH_SETTING_VALUE extends ffi.Opaque {}

abstract class PPOWER_PLATFORM_ROLE {
  static const int PlatformRoleUnspecified = 0;
  static const int PlatformRoleDesktop = 1;
  static const int PlatformRoleMobile = 2;
  static const int PlatformRoleWorkstation = 3;
  static const int PlatformRoleEnterpriseServer = 4;
  static const int PlatformRoleSOHOServer = 5;
  static const int PlatformRoleAppliancePC = 6;
  static const int PlatformRolePerformanceServer = 7;
  static const int PlatformRoleSlate = 8;
  static const int PlatformRoleMaximum = 9;
}

class PPOWER_PLATFORM_INFORMATION extends ffi.Struct {
  @ffi.Uint8()
  external int AoAc;
}

class PBATTERY_REPORTING_SCALE extends ffi.Struct {
  @ffi.Uint64()
  external int Granularity;

  @ffi.Uint64()
  external int Capacity;
}

class PPPM_WMI_LEGACY_PERFSTATE extends ffi.Struct {
  @ffi.Uint64()
  external int Frequency;

  @ffi.Uint64()
  external int Flags;

  @ffi.Uint64()
  external int PercentFrequency;
}

class PPPM_WMI_IDLE_STATE extends ffi.Struct {
  @ffi.Uint64()
  external int Latency;

  @ffi.Uint64()
  external int Power;

  @ffi.Uint64()
  external int TimeCheck;

  @ffi.Uint8()
  external int PromotePercent;

  @ffi.Uint8()
  external int DemotePercent;

  @ffi.Uint8()
  external int StateType;

  @ffi.Uint8()
  external int Reserved;

  @ffi.Uint64()
  external int StateFlags;

  @ffi.Uint64()
  external int Context;

  @ffi.Uint64()
  external int IdleHandler;

  @ffi.Uint64()
  external int Reserved1;
}

class PPPM_WMI_IDLE_STATES extends ffi.Opaque {}

class PPPM_WMI_IDLE_STATES_EX extends ffi.Opaque {}

class PPPM_WMI_PERF_STATE extends ffi.Struct {
  @ffi.Uint64()
  external int Frequency;

  @ffi.Uint64()
  external int Power;

  @ffi.Uint8()
  external int PercentFrequency;

  @ffi.Uint8()
  external int IncreaseLevel;

  @ffi.Uint8()
  external int DecreaseLevel;

  @ffi.Uint8()
  external int Type;

  @ffi.Uint64()
  external int IncreaseTime;

  @ffi.Uint64()
  external int DecreaseTime;

  @ffi.Uint64()
  external int Control;

  @ffi.Uint64()
  external int Status;

  @ffi.Uint64()
  external int HitCount;

  @ffi.Uint64()
  external int Reserved1;

  @ffi.Uint64()
  external int Reserved2;

  @ffi.Uint64()
  external int Reserved3;
}

class PPPM_WMI_PERF_STATES extends ffi.Opaque {}

class PPPM_WMI_PERF_STATES_EX extends ffi.Opaque {}

class PPPM_IDLE_STATE_ACCOUNTING extends ffi.Opaque {}

class PPPM_IDLE_ACCOUNTING extends ffi.Opaque {}

class PPPM_IDLE_STATE_BUCKET_EX extends ffi.Struct {
  @ffi.Uint64()
  external int TotalTimeUs;

  @ffi.Uint64()
  external int MinTimeUs;

  @ffi.Uint64()
  external int MaxTimeUs;

  @ffi.Uint64()
  external int Count;
}

class PPPM_IDLE_STATE_ACCOUNTING_EX extends ffi.Opaque {}

class PPPM_IDLE_ACCOUNTING_EX extends ffi.Opaque {}

class PPPM_PERFSTATE_EVENT extends ffi.Struct {
  @ffi.Uint64()
  external int State;

  @ffi.Uint64()
  external int Status;

  @ffi.Uint64()
  external int Latency;

  @ffi.Uint64()
  external int Speed;

  @ffi.Uint64()
  external int Processor;
}

class PPPM_PERFSTATE_DOMAIN_EVENT extends ffi.Struct {
  @ffi.Uint64()
  external int State;

  @ffi.Uint64()
  external int Latency;

  @ffi.Uint64()
  external int Speed;

  @ffi.Uint64()
  external int Processors;
}

class PPPM_IDLESTATE_EVENT extends ffi.Struct {
  @ffi.Uint64()
  external int NewState;

  @ffi.Uint64()
  external int OldState;

  @ffi.Uint64()
  external int Processors;
}

class PPPM_THERMALCHANGE_EVENT extends ffi.Struct {
  @ffi.Uint64()
  external int ThermalConstraint;

  @ffi.Uint64()
  external int Processors;
}

class PPPM_THERMAL_POLICY_EVENT extends ffi.Struct {
  @ffi.Uint8()
  external int Mode;

  @ffi.Uint64()
  external int Processors;
}

class PPOWER_ACTION_POLICY extends ffi.Struct {
  @ffi.Int32()
  external int Action;

  @ffi.Uint64()
  external int Flags;

  @ffi.Uint64()
  external int EventCode;
}

class PSYSTEM_POWER_LEVEL extends ffi.Opaque {}

class PSYSTEM_POWER_POLICY extends ffi.Opaque {}

class PPROCESSOR_IDLESTATE_INFO extends ffi.Opaque {}

class PPROCESSOR_IDLESTATE_POLICY extends ffi.Opaque {}

class PPROCESSOR_POWER_POLICY_INFO extends ffi.Opaque {}

class PPROCESSOR_POWER_POLICY extends ffi.Opaque {}

class PPROCESSOR_PERFSTATE_POLICY extends ffi.Struct {
  @ffi.Uint64()
  external int Revision;

  @ffi.Uint8()
  external int MaxThrottle;

  @ffi.Uint8()
  external int MinThrottle;

  @ffi.Uint8()
  external int BusyAdjThreshold;

  @ffi.Uint64()
  external int TimeCheck;

  @ffi.Uint64()
  external int IncreaseTime;

  @ffi.Uint64()
  external int DecreaseTime;

  @ffi.Uint64()
  external int IncreasePercent;

  @ffi.Uint64()
  external int DecreasePercent;
}

class PADMINISTRATOR_POWER_POLICY extends ffi.Struct {
  @ffi.Int32()
  external int MinSleep;

  @ffi.Int32()
  external int MaxSleep;

  @ffi.Uint64()
  external int MinVideoTimeout;

  @ffi.Uint64()
  external int MaxVideoTimeout;

  @ffi.Uint64()
  external int MinSpindownTimeout;

  @ffi.Uint64()
  external int MaxSpindownTimeout;
}

abstract class PHIBERFILE_BUCKET_SIZE {
  static const int HiberFileBucket1GB = 0;
  static const int HiberFileBucket2GB = 1;
  static const int HiberFileBucket4GB = 2;
  static const int HiberFileBucket8GB = 3;
  static const int HiberFileBucket16GB = 4;
  static const int HiberFileBucket32GB = 5;
  static const int HiberFileBucketUnlimited = 6;
  static const int HiberFileBucketMax = 7;
}

class PHIBERFILE_BUCKET extends ffi.Opaque {}

class PSYSTEM_POWER_CAPABILITIES extends ffi.Opaque {}

class PSYSTEM_BATTERY_STATE extends ffi.Opaque {}

class PIMAGE_DOS_HEADER extends ffi.Opaque {}

class PIMAGE_OS2_HEADER extends ffi.Struct {
  @ffi.Uint16()
  external int ne_magic;

  @ffi.Int8()
  external int ne_ver;

  @ffi.Int8()
  external int ne_rev;

  @ffi.Uint16()
  external int ne_enttab;

  @ffi.Uint16()
  external int ne_cbenttab;

  @ffi.Int64()
  external int ne_crc;

  @ffi.Uint16()
  external int ne_flags;

  @ffi.Uint16()
  external int ne_autodata;

  @ffi.Uint16()
  external int ne_heap;

  @ffi.Uint16()
  external int ne_stack;

  @ffi.Int64()
  external int ne_csip;

  @ffi.Int64()
  external int ne_sssp;

  @ffi.Uint16()
  external int ne_cseg;

  @ffi.Uint16()
  external int ne_cmod;

  @ffi.Uint16()
  external int ne_cbnrestab;

  @ffi.Uint16()
  external int ne_segtab;

  @ffi.Uint16()
  external int ne_rsrctab;

  @ffi.Uint16()
  external int ne_restab;

  @ffi.Uint16()
  external int ne_modtab;

  @ffi.Uint16()
  external int ne_imptab;

  @ffi.Int64()
  external int ne_nrestab;

  @ffi.Uint16()
  external int ne_cmovent;

  @ffi.Uint16()
  external int ne_align;

  @ffi.Uint16()
  external int ne_cres;

  @ffi.Uint8()
  external int ne_exetyp;

  @ffi.Uint8()
  external int ne_flagsothers;

  @ffi.Uint16()
  external int ne_pretthunks;

  @ffi.Uint16()
  external int ne_psegrefbytes;

  @ffi.Uint16()
  external int ne_swaparea;

  @ffi.Uint16()
  external int ne_expver;
}

class PIMAGE_VXD_HEADER extends ffi.Opaque {}

class PIMAGE_FILE_HEADER extends ffi.Struct {
  @ffi.Uint16()
  external int Machine;

  @ffi.Uint16()
  external int NumberOfSections;

  @ffi.Uint64()
  external int TimeDateStamp;

  @ffi.Uint64()
  external int PointerToSymbolTable;

  @ffi.Uint64()
  external int NumberOfSymbols;

  @ffi.Uint16()
  external int SizeOfOptionalHeader;

  @ffi.Uint16()
  external int Characteristics;
}

class PIMAGE_DATA_DIRECTORY extends ffi.Struct {
  @ffi.Uint64()
  external int VirtualAddress;

  @ffi.Uint64()
  external int Size;
}

class PIMAGE_OPTIONAL_HEADER32 extends ffi.Opaque {}

class PIMAGE_ROM_OPTIONAL_HEADER extends ffi.Opaque {}

class PIMAGE_OPTIONAL_HEADER64 extends ffi.Opaque {}

class PIMAGE_NT_HEADERS64 extends ffi.Opaque {}

class PIMAGE_NT_HEADERS32 extends ffi.Opaque {}

class PIMAGE_ROM_HEADERS extends ffi.Opaque {}

class ANON_OBJECT_HEADER extends ffi.Opaque {}

class ANON_OBJECT_HEADER_V2 extends ffi.Opaque {}

class ANON_OBJECT_HEADER_BIGOBJ extends ffi.Opaque {}

class PIMAGE_SECTION_HEADER extends ffi.Opaque {}

class IMAGE_SYMBOL extends ffi.Opaque {}

class IMAGE_SYMBOL_EX extends ffi.Opaque {}

class IMAGE_AUX_SYMBOL_TOKEN_DEF extends ffi.Opaque {}

abstract class IMAGE_AUX_SYMBOL_TYPE {
  static const int IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1;
}

class IMAGE_RELOCATION extends ffi.Struct {
  @ffi.Uint64()
  external int SymbolTableIndex;

  @ffi.Uint16()
  external int Type;
}

class IMAGE_LINENUMBER extends ffi.Opaque {}

class IMAGE_BASE_RELOCATION extends ffi.Struct {
  @ffi.Uint64()
  external int VirtualAddress;

  @ffi.Uint64()
  external int SizeOfBlock;
}

class PIMAGE_ARCHIVE_MEMBER_HEADER extends ffi.Opaque {}

class PIMAGE_EXPORT_DIRECTORY extends ffi.Struct {
  @ffi.Uint64()
  external int Characteristics;

  @ffi.Uint64()
  external int TimeDateStamp;

  @ffi.Uint16()
  external int MajorVersion;

  @ffi.Uint16()
  external int MinorVersion;

  @ffi.Uint64()
  external int Name;

  @ffi.Uint64()
  external int Base;

  @ffi.Uint64()
  external int NumberOfFunctions;

  @ffi.Uint64()
  external int NumberOfNames;

  @ffi.Uint64()
  external int AddressOfFunctions;

  @ffi.Uint64()
  external int AddressOfNames;

  @ffi.Uint64()
  external int AddressOfNameOrdinals;
}

class PIMAGE_IMPORT_BY_NAME extends ffi.Opaque {}

class IMAGE_THUNK_DATA64 extends ffi.Opaque {}

class IMAGE_THUNK_DATA32 extends ffi.Opaque {}

class IMAGE_TLS_DIRECTORY64 extends ffi.Struct {
  @ffi.Uint64()
  external int StartAddressOfRawData;

  @ffi.Uint64()
  external int EndAddressOfRawData;

  @ffi.Uint64()
  external int AddressOfIndex;

  @ffi.Uint64()
  external int AddressOfCallBacks;

  @ffi.Uint64()
  external int SizeOfZeroFill;
}

class IMAGE_TLS_DIRECTORY32 extends ffi.Struct {
  @ffi.Uint64()
  external int StartAddressOfRawData;

  @ffi.Uint64()
  external int EndAddressOfRawData;

  @ffi.Uint64()
  external int AddressOfIndex;

  @ffi.Uint64()
  external int AddressOfCallBacks;

  @ffi.Uint64()
  external int SizeOfZeroFill;
}

class IMAGE_IMPORT_DESCRIPTOR extends ffi.Struct {
  @ffi.Uint64()
  external int TimeDateStamp;

  @ffi.Uint64()
  external int ForwarderChain;

  @ffi.Uint64()
  external int Name;

  @ffi.Uint64()
  external int FirstThunk;
}

class PIMAGE_BOUND_IMPORT_DESCRIPTOR extends ffi.Struct {
  @ffi.Uint64()
  external int TimeDateStamp;

  @ffi.Uint16()
  external int OffsetModuleName;

  @ffi.Uint16()
  external int NumberOfModuleForwarderRefs;
}

class PIMAGE_BOUND_FORWARDER_REF extends ffi.Struct {
  @ffi.Uint64()
  external int TimeDateStamp;

  @ffi.Uint16()
  external int OffsetModuleName;

  @ffi.Uint16()
  external int Reserved;
}

class PIMAGE_DELAYLOAD_DESCRIPTOR extends ffi.Opaque {}

class PIMAGE_RESOURCE_DIRECTORY extends ffi.Struct {
  @ffi.Uint64()
  external int Characteristics;

  @ffi.Uint64()
  external int TimeDateStamp;

  @ffi.Uint16()
  external int MajorVersion;

  @ffi.Uint16()
  external int MinorVersion;

  @ffi.Uint16()
  external int NumberOfNamedEntries;

  @ffi.Uint16()
  external int NumberOfIdEntries;
}

class PIMAGE_RESOURCE_DIRECTORY_ENTRY extends ffi.Opaque {}

class PIMAGE_RESOURCE_DIRECTORY_STRING extends ffi.Opaque {}

class PIMAGE_RESOURCE_DIR_STRING_U extends ffi.Opaque {}

class PIMAGE_RESOURCE_DATA_ENTRY extends ffi.Struct {
  @ffi.Uint64()
  external int OffsetToData;

  @ffi.Uint64()
  external int Size;

  @ffi.Uint64()
  external int CodePage;

  @ffi.Uint64()
  external int Reserved;
}

class PIMAGE_LOAD_CONFIG_CODE_INTEGRITY extends ffi.Struct {
  @ffi.Uint16()
  external int Flags;

  @ffi.Uint16()
  external int Catalog;

  @ffi.Uint64()
  external int CatalogOffset;

  @ffi.Uint64()
  external int Reserved;
}

class PIMAGE_DYNAMIC_RELOCATION_TABLE extends ffi.Struct {
  @ffi.Uint64()
  external int Version;

  @ffi.Uint64()
  external int Size;
}

class PIMAGE_DYNAMIC_RELOCATION32 extends ffi.Struct {
  @ffi.Uint64()
  external int Symbol;

  @ffi.Uint64()
  external int BaseRelocSize;
}

class PIMAGE_DYNAMIC_RELOCATION64 extends ffi.Struct {
  @ffi.Uint64()
  external int Symbol;

  @ffi.Uint64()
  external int BaseRelocSize;
}

class PIMAGE_DYNAMIC_RELOCATION32_V2 extends ffi.Struct {
  @ffi.Uint64()
  external int HeaderSize;

  @ffi.Uint64()
  external int FixupInfoSize;

  @ffi.Uint64()
  external int Symbol;

  @ffi.Uint64()
  external int SymbolGroup;

  @ffi.Uint64()
  external int Flags;
}

class PIMAGE_DYNAMIC_RELOCATION64_V2 extends ffi.Struct {
  @ffi.Uint64()
  external int HeaderSize;

  @ffi.Uint64()
  external int FixupInfoSize;

  @ffi.Uint64()
  external int Symbol;

  @ffi.Uint64()
  external int SymbolGroup;

  @ffi.Uint64()
  external int Flags;
}

class IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER extends ffi.Struct {
  @ffi.Uint8()
  external int PrologueByteCount;
}

class IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER extends ffi.Struct {
  @ffi.Uint64()
  external int EpilogueCount;

  @ffi.Uint8()
  external int EpilogueByteCount;

  @ffi.Uint8()
  external int BranchDescriptorElementSize;

  @ffi.Uint16()
  external int BranchDescriptorCount;
}

class IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION extends ffi.Opaque {}

class IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION extends ffi.Opaque {}

class IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION extends ffi.Opaque {}

class PIMAGE_LOAD_CONFIG_DIRECTORY32 extends ffi.Opaque {}

class PIMAGE_LOAD_CONFIG_DIRECTORY64 extends ffi.Opaque {}

class PIMAGE_HOT_PATCH_INFO extends ffi.Struct {
  @ffi.Uint64()
  external int Version;

  @ffi.Uint64()
  external int Size;

  @ffi.Uint64()
  external int SequenceNumber;

  @ffi.Uint64()
  external int BaseImageList;

  @ffi.Uint64()
  external int BaseImageCount;

  @ffi.Uint64()
  external int BufferOffset;

  @ffi.Uint64()
  external int ExtraPatchSize;
}

class PIMAGE_HOT_PATCH_BASE extends ffi.Struct {
  @ffi.Uint64()
  external int SequenceNumber;

  @ffi.Uint64()
  external int Flags;

  @ffi.Uint64()
  external int OriginalTimeDateStamp;

  @ffi.Uint64()
  external int OriginalCheckSum;

  @ffi.Uint64()
  external int CodeIntegrityInfo;

  @ffi.Uint64()
  external int CodeIntegritySize;

  @ffi.Uint64()
  external int PatchTable;

  @ffi.Uint64()
  external int BufferOffset;
}

class PIMAGE_HOT_PATCH_HASHES extends ffi.Opaque {}

class PIMAGE_CE_RUNTIME_FUNCTION_ENTRY extends ffi.Opaque {}

class PIMAGE_ARM_RUNTIME_FUNCTION_ENTRY extends ffi.Struct {
  @ffi.Uint64()
  external int BeginAddress;
}

abstract class ARM64_FNPDATA_FLAGS {
  static const int PdataRefToFullXdata = 0;
  static const int PdataPackedUnwindFunction = 1;
  static const int PdataPackedUnwindFragment = 2;
}

abstract class ARM64_FNPDATA_CR {
  static const int PdataCrUnchained = 0;
  static const int PdataCrUnchainedSavedLr = 1;
  static const int PdataCrChainedWithPac = 2;
  static const int PdataCrChained = 3;
}

class PIMAGE_ARM64_RUNTIME_FUNCTION_ENTRY extends ffi.Struct {
  @ffi.Uint64()
  external int BeginAddress;
}

class PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY extends ffi.Struct {
  @ffi.Uint64()
  external int BeginAddress;

  @ffi.Uint64()
  external int EndAddress;

  @ffi.Uint64()
  external int ExceptionHandler;

  @ffi.Uint64()
  external int HandlerData;

  @ffi.Uint64()
  external int PrologEndAddress;
}

class PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY extends ffi.Struct {
  @ffi.Uint64()
  external int BeginAddress;

  @ffi.Uint64()
  external int EndAddress;

  @ffi.Uint64()
  external int ExceptionHandler;

  @ffi.Uint64()
  external int HandlerData;

  @ffi.Uint64()
  external int PrologEndAddress;
}

class PIMAGE_ENCLAVE_CONFIG32 extends ffi.Opaque {}

class PIMAGE_ENCLAVE_CONFIG64 extends ffi.Opaque {}

class PIMAGE_ENCLAVE_IMPORT extends ffi.Opaque {}

class PIMAGE_DEBUG_DIRECTORY extends ffi.Struct {
  @ffi.Uint64()
  external int Characteristics;

  @ffi.Uint64()
  external int TimeDateStamp;

  @ffi.Uint16()
  external int MajorVersion;

  @ffi.Uint16()
  external int MinorVersion;

  @ffi.Uint64()
  external int Type;

  @ffi.Uint64()
  external int SizeOfData;

  @ffi.Uint64()
  external int AddressOfRawData;

  @ffi.Uint64()
  external int PointerToRawData;
}

class PIMAGE_COFF_SYMBOLS_HEADER extends ffi.Struct {
  @ffi.Uint64()
  external int NumberOfSymbols;

  @ffi.Uint64()
  external int LvaToFirstSymbol;

  @ffi.Uint64()
  external int NumberOfLinenumbers;

  @ffi.Uint64()
  external int LvaToFirstLinenumber;

  @ffi.Uint64()
  external int RvaToFirstByteOfCode;

  @ffi.Uint64()
  external int RvaToLastByteOfCode;

  @ffi.Uint64()
  external int RvaToFirstByteOfData;

  @ffi.Uint64()
  external int RvaToLastByteOfData;
}

class PFPO_DATA extends ffi.Opaque {}

class PIMAGE_DEBUG_MISC extends ffi.Opaque {}

class PIMAGE_FUNCTION_ENTRY extends ffi.Struct {
  @ffi.Uint64()
  external int StartingAddress;

  @ffi.Uint64()
  external int EndingAddress;

  @ffi.Uint64()
  external int EndOfPrologue;
}

class PIMAGE_FUNCTION_ENTRY64 extends ffi.Struct {
  @ffi.Uint64()
  external int StartingAddress;

  @ffi.Uint64()
  external int EndingAddress;
}

class PIMAGE_SEPARATE_DEBUG_HEADER extends ffi.Opaque {}

class PNON_PAGED_DEBUG_INFO extends ffi.Struct {
  @ffi.Uint16()
  external int Signature;

  @ffi.Uint16()
  external int Flags;

  @ffi.Uint64()
  external int Size;

  @ffi.Uint16()
  external int Machine;

  @ffi.Uint16()
  external int Characteristics;

  @ffi.Uint64()
  external int TimeDateStamp;

  @ffi.Uint64()
  external int CheckSum;

  @ffi.Uint64()
  external int SizeOfImage;

  @ffi.Uint64()
  external int ImageBase;
}

class PIMAGE_ARCHITECTURE_HEADER extends ffi.Opaque {}

class PIMAGE_ARCHITECTURE_ENTRY extends ffi.Struct {
  @ffi.Uint64()
  external int FixupInstRVA;

  @ffi.Uint64()
  external int NewInst;
}

class IMPORT_OBJECT_HEADER extends ffi.Opaque {}

abstract class IMPORT_OBJECT_TYPE {
  static const int IMPORT_OBJECT_CODE = 0;
  static const int IMPORT_OBJECT_DATA = 1;
  static const int IMPORT_OBJECT_CONST = 2;
}

abstract class IMPORT_OBJECT_NAME_TYPE {
  static const int IMPORT_OBJECT_ORDINAL = 0;
  static const int IMPORT_OBJECT_NAME = 1;
  static const int IMPORT_OBJECT_NAME_NO_PREFIX = 2;
  static const int IMPORT_OBJECT_NAME_UNDECORATE = 3;
  static const int IMPORT_OBJECT_NAME_EXPORTAS = 4;
}

abstract class ReplacesCorHdrNumericDefines {
  static const int COMIMAGE_FLAGS_ILONLY = 1;
  static const int COMIMAGE_FLAGS_32BITREQUIRED = 2;
  static const int COMIMAGE_FLAGS_IL_LIBRARY = 4;
  static const int COMIMAGE_FLAGS_STRONGNAMESIGNED = 8;
  static const int COMIMAGE_FLAGS_NATIVE_ENTRYPOINT = 16;
  static const int COMIMAGE_FLAGS_TRACKDEBUGDATA = 65536;
  static const int COMIMAGE_FLAGS_32BITPREFERRED = 131072;
  static const int COR_VERSION_MAJOR_V2 = 2;
  static const int COR_VERSION_MAJOR = 2;
  static const int COR_VERSION_MINOR = 5;
  static const int COR_DELETED_NAME_LENGTH = 8;
  static const int COR_VTABLEGAP_NAME_LENGTH = 8;
  static const int NATIVE_TYPE_MAX_CB = 1;
  static const int COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 255;
  static const int IMAGE_COR_MIH_METHODRVA = 1;
  static const int IMAGE_COR_MIH_EHRVA = 2;
  static const int IMAGE_COR_MIH_BASICBLOCK = 8;
  static const int COR_VTABLE_32BIT = 1;
  static const int COR_VTABLE_64BIT = 2;
  static const int COR_VTABLE_FROM_UNMANAGED = 4;
  static const int COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 8;
  static const int COR_VTABLE_CALL_MOST_DERIVED = 16;
  static const int IMAGE_COR_EATJ_THUNK_SIZE = 32;
  static const int MAX_CLASS_NAME = 1024;
  static const int MAX_PACKAGE_NAME = 1024;
}

class PIMAGE_COR20_HEADER extends ffi.Opaque {}

class PSLIST_ENTRY extends ffi.Struct {
  external ffi.Pointer<PSLIST_ENTRY> Next;
}

class PRTL_BARRIER extends ffi.Opaque {}

class PMESSAGE_RESOURCE_ENTRY extends ffi.Opaque {}

class PMESSAGE_RESOURCE_BLOCK extends ffi.Struct {
  @ffi.Uint64()
  external int LowId;

  @ffi.Uint64()
  external int HighId;

  @ffi.Uint64()
  external int OffsetToEntries;
}

class PMESSAGE_RESOURCE_DATA extends ffi.Opaque {}

class LPOSVERSIONINFOA extends ffi.Opaque {}

class PRTL_OSVERSIONINFOW extends ffi.Opaque {}

class LPOSVERSIONINFOEXA extends ffi.Opaque {}

class PRTL_OSVERSIONINFOEXW extends ffi.Opaque {}

abstract class PRTL_UMS_THREAD_INFO_CLASS {
  static const int UmsThreadInvalidInfoClass = 0;
  static const int UmsThreadUserContext = 1;
  static const int UmsThreadPriority = 2;
  static const int UmsThreadAffinity = 3;
  static const int UmsThreadTeb = 4;
  static const int UmsThreadIsSuspended = 5;
  static const int UmsThreadIsTerminated = 6;
  static const int UmsThreadMaxInfoClass = 7;
}

abstract class PRTL_UMS_SCHEDULER_REASON {
  static const int UmsSchedulerStartup = 0;
  static const int UmsSchedulerThreadBlocked = 1;
  static const int UmsSchedulerThreadYield = 2;
}

abstract class OS_DEPLOYEMENT_STATE_VALUES {
  static const int OS_DEPLOYMENT_STANDARD = 1;
  static const int OS_DEPLOYMENT_COMPACT = 2;
}

class PNV_MEMORY_RANGE extends ffi.Struct {
  external ffi.Pointer<ffi.Void> BaseAddress;

  @ffi.Uint64()
  external int Length;
}

class CORRELATION_VECTOR extends ffi.Opaque {}

class PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG extends ffi.Struct {
  @ffi.Uint64()
  external int Size;

  external ffi.Pointer<ffi.Uint16> TriggerId;
}

abstract class IMAGE_POLICY_ENTRY_TYPE {
  static const int ImagePolicyEntryTypeNone = 0;
  static const int ImagePolicyEntryTypeBool = 1;
  static const int ImagePolicyEntryTypeInt8 = 2;
  static const int ImagePolicyEntryTypeUInt8 = 3;
  static const int ImagePolicyEntryTypeInt16 = 4;
  static const int ImagePolicyEntryTypeUInt16 = 5;
  static const int ImagePolicyEntryTypeInt32 = 6;
  static const int ImagePolicyEntryTypeUInt32 = 7;
  static const int ImagePolicyEntryTypeInt64 = 8;
  static const int ImagePolicyEntryTypeUInt64 = 9;
  static const int ImagePolicyEntryTypeAnsiString = 10;
  static const int ImagePolicyEntryTypeUnicodeString = 11;
  static const int ImagePolicyEntryTypeOverride = 12;
  static const int ImagePolicyEntryTypeMaximum = 13;
}

abstract class IMAGE_POLICY_ID {
  static const int ImagePolicyIdNone = 0;
  static const int ImagePolicyIdEtw = 1;
  static const int ImagePolicyIdDebug = 2;
  static const int ImagePolicyIdCrashDump = 3;
  static const int ImagePolicyIdCrashDumpKey = 4;
  static const int ImagePolicyIdCrashDumpKeyGuid = 5;
  static const int ImagePolicyIdParentSd = 6;
  static const int ImagePolicyIdParentSdRev = 7;
  static const int ImagePolicyIdSvn = 8;
  static const int ImagePolicyIdDeviceId = 9;
  static const int ImagePolicyIdCapability = 10;
  static const int ImagePolicyIdScenarioId = 11;
  static const int ImagePolicyIdMaximum = 12;
}

class IMAGE_POLICY_ENTRY extends ffi.Opaque {}

class IMAGE_POLICY_METADATA extends ffi.Opaque {}

class PRTL_CRITICAL_SECTION extends ffi.Struct {
  external ffi.Pointer<PRTL_RESOURCE_DEBUG> DebugInfo;

  @ffi.Int64()
  external int LockCount;

  @ffi.Int64()
  external int RecursionCount;

  external ffi.Pointer<ffi.Void> OwningThread;

  external ffi.Pointer<ffi.Void> LockSemaphore;

  @ffi.Uint64()
  external int SpinCount;
}

class PRTL_RESOURCE_DEBUG extends ffi.Opaque {}

class PRTL_SRWLOCK extends ffi.Struct {
  external ffi.Pointer<ffi.Void> Ptr;
}

class PRTL_CONDITION_VARIABLE extends ffi.Struct {
  external ffi.Pointer<ffi.Void> Ptr;
}

abstract class HEAP_INFORMATION_CLASS {
  static const int HeapCompatibilityInformation = 0;
  static const int HeapEnableTerminationOnCorruption = 1;
  static const int HeapOptimizeResources = 3;
}

class PHEAP_OPTIMIZE_RESOURCES_INFORMATION extends ffi.Struct {
  @ffi.Uint64()
  external int Version;

  @ffi.Uint64()
  external int Flags;
}

abstract class ACTIVATION_CONTEXT_INFO_CLASS {
  static const int ActivationContextBasicInformation = 1;
  static const int ActivationContextDetailedInformation = 2;
  static const int AssemblyDetailedInformationInActivationContext = 3;
  static const int FileInformationInAssemblyOfAssemblyInActivationContext = 4;
  static const int RunlevelInformationInActivationContext = 5;
  static const int CompatibilityInformationInActivationContext = 6;
  static const int ActivationContextManifestResourceName = 7;
  static const int MaxActivationContextInfoClass = 8;
  static const int AssemblyDetailedInformationInActivationContxt = 3;
  static const int FileInformationInAssemblyOfAssemblyInActivationContxt = 4;
}

class PACTIVATION_CONTEXT_QUERY_INDEX extends ffi.Struct {
  @ffi.Uint64()
  external int ulAssemblyIndex;

  @ffi.Uint64()
  external int ulFileIndexInAssembly;
}

class PASSEMBLY_FILE_DETAILED_INFORMATION extends ffi.Struct {
  @ffi.Uint64()
  external int ulFlags;

  @ffi.Uint64()
  external int ulFilenameLength;

  @ffi.Uint64()
  external int ulPathLength;

  external ffi.Pointer<ffi.Uint16> lpFileName;

  external ffi.Pointer<ffi.Uint16> lpFilePath;
}

class PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION extends ffi.Opaque {}

abstract class ACTCTX_REQUESTED_RUN_LEVEL {
  static const int ACTCTX_RUN_LEVEL_UNSPECIFIED = 0;
  static const int ACTCTX_RUN_LEVEL_AS_INVOKER = 1;
  static const int ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE = 2;
  static const int ACTCTX_RUN_LEVEL_REQUIRE_ADMIN = 3;
  static const int ACTCTX_RUN_LEVEL_NUMBERS = 4;
}

class PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION extends ffi.Struct {
  @ffi.Uint64()
  external int ulFlags;

  @ffi.Int32()
  external int RunLevel;

  @ffi.Uint64()
  external int UiAccess;
}

abstract class ACTCTX_COMPATIBILITY_ELEMENT_TYPE {
  static const int ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN = 0;
  static const int ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS = 1;
  static const int ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION = 2;
  static const int ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MAXVERSIONTESTED = 3;
}

class PCOMPATIBILITY_CONTEXT_ELEMENT extends ffi.Opaque {}

class PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION extends ffi.Opaque {}

class PSUPPORTED_OS_INFO extends ffi.Struct {
  @ffi.Uint16()
  external int MajorVersion;

  @ffi.Uint16()
  external int MinorVersion;
}

class PMAXVERSIONTESTED_INFO extends ffi.Struct {
  @ffi.Uint64()
  external int MaxVersionTested;
}

class PACTIVATION_CONTEXT_DETAILED_INFORMATION extends ffi.Struct {
  @ffi.Uint64()
  external int dwFlags;

  @ffi.Uint64()
  external int ulFormatVersion;

  @ffi.Uint64()
  external int ulAssemblyCount;

  @ffi.Uint64()
  external int ulRootManifestPathType;

  @ffi.Uint64()
  external int ulRootManifestPathChars;

  @ffi.Uint64()
  external int ulRootConfigurationPathType;

  @ffi.Uint64()
  external int ulRootConfigurationPathChars;

  @ffi.Uint64()
  external int ulAppDirPathType;

  @ffi.Uint64()
  external int ulAppDirPathChars;

  external ffi.Pointer<ffi.Uint16> lpRootManifestPath;

  external ffi.Pointer<ffi.Uint16> lpRootConfigurationPath;

  external ffi.Pointer<ffi.Uint16> lpAppDirPath;
}

class PHARDWARE_COUNTER_DATA extends ffi.Struct {
  @ffi.Int32()
  external int Type;

  @ffi.Uint64()
  external int Reserved;

  @ffi.Uint64()
  external int Value;
}

class PPERFORMANCE_DATA extends ffi.Opaque {}

class PEVENTLOGRECORD extends ffi.Struct {
  @ffi.Uint64()
  external int Length;

  @ffi.Uint64()
  external int Reserved;

  @ffi.Uint64()
  external int RecordNumber;

  @ffi.Uint64()
  external int TimeGenerated;

  @ffi.Uint64()
  external int TimeWritten;

  @ffi.Uint64()
  external int EventID;

  @ffi.Uint16()
  external int EventType;

  @ffi.Uint16()
  external int NumStrings;

  @ffi.Uint16()
  external int EventCategory;

  @ffi.Uint16()
  external int ReservedFlags;

  @ffi.Uint64()
  external int ClosingRecordNumber;

  @ffi.Uint64()
  external int StringOffset;

  @ffi.Uint64()
  external int UserSidLength;

  @ffi.Uint64()
  external int UserSidOffset;

  @ffi.Uint64()
  external int DataLength;

  @ffi.Uint64()
  external int DataOffset;
}

class _EVENTSFORLOGFILE extends ffi.Opaque {}

class _PACKEDEVENTINFO extends ffi.Opaque {}

abstract class SERVICE_NODE_TYPE {
  static const int DriverType = 1;
  static const int FileSystemType = 2;
  static const int Win32ServiceOwnProcess = 16;
  static const int Win32ServiceShareProcess = 32;
  static const int AdapterType = 4;
  static const int RecognizerType = 8;
}

abstract class SERVICE_LOAD_TYPE {
  static const int BootLoad = 0;
  static const int SystemLoad = 1;
  static const int AutoLoad = 2;
  static const int DemandLoad = 3;
  static const int DisableLoad = 4;
}

abstract class SERVICE_ERROR_TYPE {
  static const int IgnoreError = 0;
  static const int NormalError = 1;
  static const int SevereError = 2;
  static const int CriticalError = 3;
}

class PTAPE_ERASE extends ffi.Struct {
  @ffi.Uint64()
  external int Type;

  @ffi.Uint8()
  external int Immediate;
}

class PTAPE_PREPARE extends ffi.Struct {
  @ffi.Uint64()
  external int Operation;

  @ffi.Uint8()
  external int Immediate;
}

class PTAPE_WRITE_MARKS extends ffi.Struct {
  @ffi.Uint64()
  external int Type;

  @ffi.Uint64()
  external int Count;

  @ffi.Uint8()
  external int Immediate;
}

class PTAPE_GET_POSITION extends ffi.Opaque {}

class PTAPE_SET_POSITION extends ffi.Opaque {}

class PTAPE_GET_DRIVE_PARAMETERS extends ffi.Struct {
  @ffi.Uint8()
  external int ECC;

  @ffi.Uint8()
  external int Compression;

  @ffi.Uint8()
  external int DataPadding;

  @ffi.Uint8()
  external int ReportSetmarks;

  @ffi.Uint64()
  external int DefaultBlockSize;

  @ffi.Uint64()
  external int MaximumBlockSize;

  @ffi.Uint64()
  external int MinimumBlockSize;

  @ffi.Uint64()
  external int MaximumPartitionCount;

  @ffi.Uint64()
  external int FeaturesLow;

  @ffi.Uint64()
  external int FeaturesHigh;

  @ffi.Uint64()
  external int EOTWarningZoneSize;
}

class PTAPE_SET_DRIVE_PARAMETERS extends ffi.Struct {
  @ffi.Uint8()
  external int ECC;

  @ffi.Uint8()
  external int Compression;

  @ffi.Uint8()
  external int DataPadding;

  @ffi.Uint8()
  external int ReportSetmarks;

  @ffi.Uint64()
  external int EOTWarningZoneSize;
}

class PTAPE_GET_MEDIA_PARAMETERS extends ffi.Opaque {}

class PTAPE_SET_MEDIA_PARAMETERS extends ffi.Struct {
  @ffi.Uint64()
  external int BlockSize;
}

class PTAPE_CREATE_PARTITION extends ffi.Struct {
  @ffi.Uint64()
  external int Method;

  @ffi.Uint64()
  external int Count;

  @ffi.Uint64()
  external int Size;
}

class PTAPE_WMI_OPERATIONS extends ffi.Struct {
  @ffi.Uint64()
  external int Method;

  @ffi.Uint64()
  external int DataBufferSize;

  external ffi.Pointer<ffi.Void> DataBuffer;
}

abstract class TAPE_DRIVE_PROBLEM_TYPE {
  static const int TapeDriveProblemNone = 0;
  static const int TapeDriveReadWriteWarning = 1;
  static const int TapeDriveReadWriteError = 2;
  static const int TapeDriveReadWarning = 3;
  static const int TapeDriveWriteWarning = 4;
  static const int TapeDriveReadError = 5;
  static const int TapeDriveWriteError = 6;
  static const int TapeDriveHardwareError = 7;
  static const int TapeDriveUnsupportedMedia = 8;
  static const int TapeDriveScsiConnectionError = 9;
  static const int TapeDriveTimetoClean = 10;
  static const int TapeDriveCleanDriveNow = 11;
  static const int TapeDriveMediaLifeExpired = 12;
  static const int TapeDriveSnappedTape = 13;
}

class PTRANSACTION_NOTIFICATION extends ffi.Opaque {}

class PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT extends ffi.Opaque {}

class PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT extends ffi.Opaque {}

class PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT extends ffi.Struct {
  @ffi.Uint64()
  external int SavepointId;
}

class PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT extends ffi.Opaque {}

class PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT extends ffi.Opaque {}

class PRKCRM_MARSHAL_HEADER extends ffi.Struct {
  @ffi.Uint64()
  external int VersionMajor;

  @ffi.Uint64()
  external int VersionMinor;

  @ffi.Uint64()
  external int NumProtocols;

  @ffi.Uint64()
  external int Unused;
}

class PRKCRM_TRANSACTION_BLOB extends ffi.Opaque {}

class PRKCRM_PROTOCOL_BLOB extends ffi.Opaque {}

abstract class TRANSACTION_OUTCOME {
  static const int TransactionOutcomeUndetermined = 1;
  static const int TransactionOutcomeCommitted = 2;
  static const int TransactionOutcomeAborted = 3;
}

abstract class TRANSACTION_STATE {
  static const int TransactionStateNormal = 1;
  static const int TransactionStateIndoubt = 2;
  static const int TransactionStateCommittedNotify = 3;
}

class PTRANSACTION_BASIC_INFORMATION extends ffi.Opaque {}

class PTRANSACTIONMANAGER_BASIC_INFORMATION extends ffi.Opaque {}

class PTRANSACTIONMANAGER_LOG_INFORMATION extends ffi.Opaque {}

class PTRANSACTIONMANAGER_LOGPATH_INFORMATION extends ffi.Opaque {}

class PTRANSACTIONMANAGER_RECOVERY_INFORMATION extends ffi.Struct {
  @ffi.Uint64()
  external int LastRecoveredLsn;
}

class PTRANSACTIONMANAGER_OLDEST_INFORMATION extends ffi.Opaque {}

class PTRANSACTION_PROPERTIES_INFORMATION extends ffi.Opaque {}

class PTRANSACTION_BIND_INFORMATION extends ffi.Struct {
  external ffi.Pointer<ffi.Void> TmHandle;
}

class PTRANSACTION_ENLISTMENT_PAIR extends ffi.Opaque {}

class PTRANSACTION_ENLISTMENTS_INFORMATION extends ffi.Opaque {}

class PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION extends ffi.Opaque {}

class PRESOURCEMANAGER_BASIC_INFORMATION extends ffi.Opaque {}

class PRESOURCEMANAGER_COMPLETION_INFORMATION extends ffi.Struct {
  external ffi.Pointer<ffi.Void> IoCompletionPortHandle;

  @ffi.Uint64()
  external int CompletionKey;
}

abstract class TRANSACTION_INFORMATION_CLASS {
  static const int TransactionBasicInformation = 0;
  static const int TransactionPropertiesInformation = 1;
  static const int TransactionEnlistmentInformation = 2;
  static const int TransactionSuperiorEnlistmentInformation = 3;
  static const int TransactionBindInformation = 4;
  static const int TransactionDTCPrivateInformation = 5;
}

abstract class TRANSACTIONMANAGER_INFORMATION_CLASS {
  static const int TransactionManagerBasicInformation = 0;
  static const int TransactionManagerLogInformation = 1;
  static const int TransactionManagerLogPathInformation = 2;
  static const int TransactionManagerRecoveryInformation = 4;
  static const int TransactionManagerOnlineProbeInformation = 3;
  static const int TransactionManagerOldestTransactionInformation = 5;
}

abstract class RESOURCEMANAGER_INFORMATION_CLASS {
  static const int ResourceManagerBasicInformation = 0;
  static const int ResourceManagerCompletionInformation = 1;
}

class PENLISTMENT_BASIC_INFORMATION extends ffi.Opaque {}

class PENLISTMENT_CRM_INFORMATION extends ffi.Opaque {}

abstract class ENLISTMENT_INFORMATION_CLASS {
  static const int EnlistmentBasicInformation = 0;
  static const int EnlistmentRecoveryInformation = 1;
  static const int EnlistmentCrmInformation = 2;
}

class PTRANSACTION_LIST_ENTRY extends ffi.Opaque {}

class PTRANSACTION_LIST_INFORMATION extends ffi.Opaque {}

abstract class PKTMOBJECT_TYPE {
  static const int KTMOBJECT_TRANSACTION = 0;
  static const int KTMOBJECT_TRANSACTION_MANAGER = 1;
  static const int KTMOBJECT_RESOURCE_MANAGER = 2;
  static const int KTMOBJECT_ENLISTMENT = 3;
  static const int KTMOBJECT_INVALID = 4;
}

class PKTMOBJECT_CURSOR extends ffi.Opaque {}

class _TP_CALLBACK_INSTANCE extends ffi.Opaque {}

class _TP_POOL extends ffi.Opaque {}

abstract class TP_CALLBACK_PRIORITY {
  static const int TP_CALLBACK_PRIORITY_HIGH = 0;
  static const int TP_CALLBACK_PRIORITY_NORMAL = 1;
  static const int TP_CALLBACK_PRIORITY_LOW = 2;
  static const int TP_CALLBACK_PRIORITY_INVALID = 3;
  static const int TP_CALLBACK_PRIORITY_COUNT = 3;
}

class PTP_POOL_STACK_INFORMATION extends ffi.Struct {
  @ffi.Uint64()
  external int StackReserve;

  @ffi.Uint64()
  external int StackCommit;
}

class _TP_CLEANUP_GROUP extends ffi.Opaque {}

class _ACTIVATION_CONTEXT extends ffi.Opaque {}

class TP_CALLBACK_ENVIRON_V3 extends ffi.Opaque {}

class _TP_WORK extends ffi.Opaque {}

class _TP_TIMER extends ffi.Opaque {}

class _TP_WAIT extends ffi.Opaque {}

class _TP_IO extends ffi.Opaque {}

class _TEB extends ffi.Opaque {}

class HKEY__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

class HMETAFILE__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

class HINSTANCE__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

class HRGN__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

class HRSRC__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

class HSPRITE__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

class HLSURF__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

class HSTR__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

class HTASK__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

class HWINSTA__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

class HKL__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

class LPFILETIME extends ffi.Struct {
  @ffi.Uint64()
  external int dwLowDateTime;

  @ffi.Uint64()
  external int dwHighDateTime;
}

class HWND__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

class HHOOK__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

class HACCEL__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

class HBITMAP__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

class HBRUSH__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

class HCOLORSPACE__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

class HDC__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

class HGLRC__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

class HDESK__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

class HENHMETAFILE__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

class HFONT__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

class HICON__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

class HMENU__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

class HPALETTE__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

class HPEN__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

class HWINEVENTHOOK__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

class HMONITOR__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

class HUMPD__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

class LPRECT extends ffi.Struct {
  @ffi.Int64()
  external int left;

  @ffi.Int64()
  external int top;

  @ffi.Int64()
  external int right;

  @ffi.Int64()
  external int bottom;
}

class LPRECTL extends ffi.Struct {
  @ffi.Int64()
  external int left;

  @ffi.Int64()
  external int top;

  @ffi.Int64()
  external int right;

  @ffi.Int64()
  external int bottom;
}

class LPPOINT extends ffi.Struct {
  @ffi.Int64()
  external int x;

  @ffi.Int64()
  external int y;
}

class PPOINTL extends ffi.Struct {
  @ffi.Int64()
  external int x;

  @ffi.Int64()
  external int y;
}

class LPSIZE extends ffi.Struct {
  @ffi.Int64()
  external int cx;

  @ffi.Int64()
  external int cy;
}

class LPPOINTS extends ffi.Struct {
  @ffi.Int16()
  external int x;

  @ffi.Int16()
  external int y;
}

class APP_LOCAL_DEVICE_ID extends ffi.Opaque {}

class DPI_AWARENESS_CONTEXT__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

abstract class DPI_AWARENESS {
  static const int DPI_AWARENESS_INVALID = -1;
  static const int DPI_AWARENESS_UNAWARE = 0;
  static const int DPI_AWARENESS_SYSTEM_AWARE = 1;
  static const int DPI_AWARENESS_PER_MONITOR_AWARE = 2;
}

abstract class DPI_HOSTING_BEHAVIOR {
  static const int DPI_HOSTING_BEHAVIOR_INVALID = -1;
  static const int DPI_HOSTING_BEHAVIOR_DEFAULT = 0;
  static const int DPI_HOSTING_BEHAVIOR_MIXED = 1;
}

class LPSECURITY_ATTRIBUTES extends ffi.Struct {
  @ffi.Uint64()
  external int nLength;

  external ffi.Pointer<ffi.Void> lpSecurityDescriptor;

  @ffi.Int32()
  external int bInheritHandle;
}

class LPOVERLAPPED extends ffi.Struct {
  @ffi.Uint64()
  external int Internal;

  @ffi.Uint64()
  external int InternalHigh;

  external ffi.Pointer<ffi.Void> hEvent;
}

class LPOVERLAPPED_ENTRY extends ffi.Struct {
  @ffi.Uint64()
  external int lpCompletionKey;

  external ffi.Pointer<LPOVERLAPPED> lpOverlapped;

  @ffi.Uint64()
  external int Internal;

  @ffi.Uint64()
  external int dwNumberOfBytesTransferred;
}

class LPSYSTEMTIME extends ffi.Struct {
  @ffi.Uint16()
  external int wYear;

  @ffi.Uint16()
  external int wMonth;

  @ffi.Uint16()
  external int wDayOfWeek;

  @ffi.Uint16()
  external int wDay;

  @ffi.Uint16()
  external int wHour;

  @ffi.Uint16()
  external int wMinute;

  @ffi.Uint16()
  external int wSecond;

  @ffi.Uint16()
  external int wMilliseconds;
}

class LPWIN32_FIND_DATAA extends ffi.Opaque {}

class LPWIN32_FIND_DATAW extends ffi.Opaque {}

abstract class FINDEX_INFO_LEVELS {
  static const int FindExInfoStandard = 0;
  static const int FindExInfoBasic = 1;
  static const int FindExInfoMaxInfoLevel = 2;
}

abstract class FINDEX_SEARCH_OPS {
  static const int FindExSearchNameMatch = 0;
  static const int FindExSearchLimitToDirectories = 1;
  static const int FindExSearchLimitToDevices = 2;
  static const int FindExSearchMaxSearchOp = 3;
}

abstract class PREAD_DIRECTORY_NOTIFY_INFORMATION_CLASS {
  static const int ReadDirectoryNotifyInformation = 1;
  static const int ReadDirectoryNotifyExtendedInformation = 2;
}

abstract class GET_FILEEX_INFO_LEVELS {
  static const int GetFileExInfoStandard = 0;
  static const int GetFileExMaxInfoLevel = 1;
}

abstract class PFILE_INFO_BY_HANDLE_CLASS {
  static const int FileBasicInfo = 0;
  static const int FileStandardInfo = 1;
  static const int FileNameInfo = 2;
  static const int FileRenameInfo = 3;
  static const int FileDispositionInfo = 4;
  static const int FileAllocationInfo = 5;
  static const int FileEndOfFileInfo = 6;
  static const int FileStreamInfo = 7;
  static const int FileCompressionInfo = 8;
  static const int FileAttributeTagInfo = 9;
  static const int FileIdBothDirectoryInfo = 10;
  static const int FileIdBothDirectoryRestartInfo = 11;
  static const int FileIoPriorityHintInfo = 12;
  static const int FileRemoteProtocolInfo = 13;
  static const int FileFullDirectoryInfo = 14;
  static const int FileFullDirectoryRestartInfo = 15;
  static const int FileStorageInfo = 16;
  static const int FileAlignmentInfo = 17;
  static const int FileIdInfo = 18;
  static const int FileIdExtdDirectoryInfo = 19;
  static const int FileIdExtdDirectoryRestartInfo = 20;
  static const int FileDispositionInfoEx = 21;
  static const int FileRenameInfoEx = 22;
  static const int FileCaseSensitiveInfo = 23;
  static const int FileNormalizedNameInfo = 24;
  static const int MaximumFileInfoByHandleClass = 25;
}

class PPROCESS_HEAP_ENTRY extends ffi.Struct {
  external ffi.Pointer<ffi.Void> lpData;

  @ffi.Uint64()
  external int cbData;

  @ffi.Uint8()
  external int cbOverhead;

  @ffi.Uint8()
  external int iRegionIndex;

  @ffi.Uint16()
  external int wFlags;
}

class PREASON_CONTEXT extends ffi.Opaque {}

class LPEXCEPTION_DEBUG_INFO extends ffi.Opaque {}

class LPCREATE_THREAD_DEBUG_INFO extends ffi.Struct {
  external ffi.Pointer<ffi.Void> hThread;

  external ffi.Pointer<ffi.Void> lpThreadLocalBase;

  external ffi.Pointer<ffi.NativeFunction<LPTHREAD_START_ROUTINE>>
      lpStartAddress;
}

class LPCREATE_PROCESS_DEBUG_INFO extends ffi.Struct {
  external ffi.Pointer<ffi.Void> hFile;

  external ffi.Pointer<ffi.Void> hProcess;

  external ffi.Pointer<ffi.Void> hThread;

  external ffi.Pointer<ffi.Void> lpBaseOfImage;

  @ffi.Uint64()
  external int dwDebugInfoFileOffset;

  @ffi.Uint64()
  external int nDebugInfoSize;

  external ffi.Pointer<ffi.Void> lpThreadLocalBase;

  external ffi.Pointer<ffi.NativeFunction<LPTHREAD_START_ROUTINE>>
      lpStartAddress;

  external ffi.Pointer<ffi.Void> lpImageName;

  @ffi.Uint16()
  external int fUnicode;
}

class LPEXIT_THREAD_DEBUG_INFO extends ffi.Struct {
  @ffi.Uint64()
  external int dwExitCode;
}

class LPEXIT_PROCESS_DEBUG_INFO extends ffi.Struct {
  @ffi.Uint64()
  external int dwExitCode;
}

class LPLOAD_DLL_DEBUG_INFO extends ffi.Struct {
  external ffi.Pointer<ffi.Void> hFile;

  external ffi.Pointer<ffi.Void> lpBaseOfDll;

  @ffi.Uint64()
  external int dwDebugInfoFileOffset;

  @ffi.Uint64()
  external int nDebugInfoSize;

  external ffi.Pointer<ffi.Void> lpImageName;

  @ffi.Uint16()
  external int fUnicode;
}

class LPUNLOAD_DLL_DEBUG_INFO extends ffi.Struct {
  external ffi.Pointer<ffi.Void> lpBaseOfDll;
}

class LPOUTPUT_DEBUG_STRING_INFO extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> lpDebugStringData;

  @ffi.Uint16()
  external int fUnicode;

  @ffi.Uint16()
  external int nDebugStringLength;
}

class LPRIP_INFO extends ffi.Struct {
  @ffi.Uint64()
  external int dwError;

  @ffi.Uint64()
  external int dwType;
}

class LPDEBUG_EVENT extends ffi.Opaque {}

class DISK_SPACE_INFORMATION extends ffi.Struct {
  @ffi.Uint64()
  external int ActualTotalAllocationUnits;

  @ffi.Uint64()
  external int ActualAvailableAllocationUnits;

  @ffi.Uint64()
  external int ActualPoolUnavailableAllocationUnits;

  @ffi.Uint64()
  external int CallerTotalAllocationUnits;

  @ffi.Uint64()
  external int CallerAvailableAllocationUnits;

  @ffi.Uint64()
  external int CallerPoolUnavailableAllocationUnits;

  @ffi.Uint64()
  external int UsedAllocationUnits;

  @ffi.Uint64()
  external int TotalReservedAllocationUnits;

  @ffi.Uint64()
  external int VolumeStorageReserveAllocationUnits;

  @ffi.Uint64()
  external int AvailableCommittedAllocationUnits;

  @ffi.Uint64()
  external int PoolAvailableAllocationUnits;

  @ffi.Uint64()
  external int SectorsPerAllocationUnit;

  @ffi.Uint64()
  external int BytesPerSector;
}

class LPWIN32_FILE_ATTRIBUTE_DATA extends ffi.Opaque {}

class LPBY_HANDLE_FILE_INFORMATION extends ffi.Opaque {}

class LPCREATEFILE2_EXTENDED_PARAMETERS extends ffi.Struct {
  @ffi.Uint64()
  external int dwSize;

  @ffi.Uint64()
  external int dwFileAttributes;

  @ffi.Uint64()
  external int dwFileFlags;

  @ffi.Uint64()
  external int dwSecurityQosFlags;

  external ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes;

  external ffi.Pointer<ffi.Void> hTemplateFile;
}

abstract class STREAM_INFO_LEVELS {
  static const int FindStreamInfoStandard = 0;
  static const int FindStreamInfoMaxInfoLevel = 1;
}

class PWIN32_FIND_STREAM_DATA extends ffi.Opaque {}

class PHEAP_SUMMARY extends ffi.Struct {
  @ffi.Uint64()
  external int cb;

  @ffi.Uint64()
  external int cbAllocated;

  @ffi.Uint64()
  external int cbCommitted;

  @ffi.Uint64()
  external int cbReserved;

  @ffi.Uint64()
  external int cbMaxReserve;
}

class LPPROCESS_INFORMATION extends ffi.Struct {
  external ffi.Pointer<ffi.Void> hProcess;

  external ffi.Pointer<ffi.Void> hThread;

  @ffi.Uint64()
  external int dwProcessId;

  @ffi.Uint64()
  external int dwThreadId;
}

class LPSTARTUPINFOA extends ffi.Struct {
  @ffi.Uint64()
  external int cb;

  external ffi.Pointer<ffi.Int8> lpReserved;

  external ffi.Pointer<ffi.Int8> lpDesktop;

  external ffi.Pointer<ffi.Int8> lpTitle;

  @ffi.Uint64()
  external int dwX;

  @ffi.Uint64()
  external int dwY;

  @ffi.Uint64()
  external int dwXSize;

  @ffi.Uint64()
  external int dwYSize;

  @ffi.Uint64()
  external int dwXCountChars;

  @ffi.Uint64()
  external int dwYCountChars;

  @ffi.Uint64()
  external int dwFillAttribute;

  @ffi.Uint64()
  external int dwFlags;

  @ffi.Uint16()
  external int wShowWindow;

  @ffi.Uint16()
  external int cbReserved2;

  external ffi.Pointer<ffi.Uint8> lpReserved2;

  external ffi.Pointer<ffi.Void> hStdInput;

  external ffi.Pointer<ffi.Void> hStdOutput;

  external ffi.Pointer<ffi.Void> hStdError;
}

class LPSTARTUPINFOW extends ffi.Struct {
  @ffi.Uint64()
  external int cb;

  external ffi.Pointer<ffi.Uint16> lpReserved;

  external ffi.Pointer<ffi.Uint16> lpDesktop;

  external ffi.Pointer<ffi.Uint16> lpTitle;

  @ffi.Uint64()
  external int dwX;

  @ffi.Uint64()
  external int dwY;

  @ffi.Uint64()
  external int dwXSize;

  @ffi.Uint64()
  external int dwYSize;

  @ffi.Uint64()
  external int dwXCountChars;

  @ffi.Uint64()
  external int dwYCountChars;

  @ffi.Uint64()
  external int dwFillAttribute;

  @ffi.Uint64()
  external int dwFlags;

  @ffi.Uint16()
  external int wShowWindow;

  @ffi.Uint16()
  external int cbReserved2;

  external ffi.Pointer<ffi.Uint8> lpReserved2;

  external ffi.Pointer<ffi.Void> hStdInput;

  external ffi.Pointer<ffi.Void> hStdOutput;

  external ffi.Pointer<ffi.Void> hStdError;
}

class _PROC_THREAD_ATTRIBUTE_LIST extends ffi.Opaque {}

abstract class THREAD_INFORMATION_CLASS {
  static const int ThreadMemoryPriority = 0;
  static const int ThreadAbsoluteCpuPriority = 1;
  static const int ThreadDynamicCodePolicy = 2;
  static const int ThreadPowerThrottling = 3;
  static const int ThreadInformationClassMax = 4;
}

class PMEMORY_PRIORITY_INFORMATION extends ffi.Struct {
  @ffi.Uint64()
  external int MemoryPriority;
}

class THREAD_POWER_THROTTLING_STATE extends ffi.Struct {
  @ffi.Uint64()
  external int Version;

  @ffi.Uint64()
  external int ControlMask;

  @ffi.Uint64()
  external int StateMask;
}

abstract class PROCESS_INFORMATION_CLASS {
  static const int ProcessMemoryPriority = 0;
  static const int ProcessMemoryExhaustionInfo = 1;
  static const int ProcessAppMemoryInfo = 2;
  static const int ProcessInPrivateInfo = 3;
  static const int ProcessPowerThrottling = 4;
  static const int ProcessReservedValue1 = 5;
  static const int ProcessTelemetryCoverageInfo = 6;
  static const int ProcessProtectionLevelInfo = 7;
  static const int ProcessLeapSecondInfo = 8;
  static const int ProcessInformationClassMax = 9;
}

class PAPP_MEMORY_INFORMATION extends ffi.Struct {
  @ffi.Uint64()
  external int AvailableCommit;

  @ffi.Uint64()
  external int PrivateCommitUsage;

  @ffi.Uint64()
  external int PeakPrivateCommitUsage;

  @ffi.Uint64()
  external int TotalCommitUsage;
}

abstract class PPROCESS_MEMORY_EXHAUSTION_TYPE {
  static const int PMETypeFailFastOnCommitFailure = 0;
  static const int PMETypeMax = 1;
}

class PPROCESS_MEMORY_EXHAUSTION_INFO extends ffi.Struct {
  @ffi.Uint16()
  external int Version;

  @ffi.Uint16()
  external int Reserved;

  @ffi.Int32()
  external int Type;

  @ffi.Uint64()
  external int Value;
}

class PPROCESS_POWER_THROTTLING_STATE extends ffi.Struct {
  @ffi.Uint64()
  external int Version;

  @ffi.Uint64()
  external int ControlMask;

  @ffi.Uint64()
  external int StateMask;
}

class PROCESS_PROTECTION_LEVEL_INFORMATION extends ffi.Struct {
  @ffi.Uint64()
  external int ProtectionLevel;
}

class PPROCESS_LEAP_SECOND_INFO extends ffi.Struct {
  @ffi.Uint64()
  external int Flags;

  @ffi.Uint64()
  external int Reserved;
}

class LPSYSTEM_INFO extends ffi.Struct {
  @ffi.Uint64()
  external int dwPageSize;

  external ffi.Pointer<ffi.Void> lpMinimumApplicationAddress;

  external ffi.Pointer<ffi.Void> lpMaximumApplicationAddress;

  @ffi.Uint64()
  external int dwActiveProcessorMask;

  @ffi.Uint64()
  external int dwNumberOfProcessors;

  @ffi.Uint64()
  external int dwProcessorType;

  @ffi.Uint64()
  external int dwAllocationGranularity;

  @ffi.Uint16()
  external int wProcessorLevel;

  @ffi.Uint16()
  external int wProcessorRevision;
}

class LPMEMORYSTATUSEX extends ffi.Struct {
  @ffi.Uint64()
  external int dwLength;

  @ffi.Uint64()
  external int dwMemoryLoad;

  @ffi.Uint64()
  external int ullTotalPhys;

  @ffi.Uint64()
  external int ullAvailPhys;

  @ffi.Uint64()
  external int ullTotalPageFile;

  @ffi.Uint64()
  external int ullAvailPageFile;

  @ffi.Uint64()
  external int ullTotalVirtual;

  @ffi.Uint64()
  external int ullAvailVirtual;

  @ffi.Uint64()
  external int ullAvailExtendedVirtual;
}

abstract class COMPUTER_NAME_FORMAT {
  static const int ComputerNameNetBIOS = 0;
  static const int ComputerNameDnsHostname = 1;
  static const int ComputerNameDnsDomain = 2;
  static const int ComputerNameDnsFullyQualified = 3;
  static const int ComputerNamePhysicalNetBIOS = 4;
  static const int ComputerNamePhysicalDnsHostname = 5;
  static const int ComputerNamePhysicalDnsDomain = 6;
  static const int ComputerNamePhysicalDnsFullyQualified = 7;
  static const int ComputerNameMax = 8;
}

abstract class MEMORY_RESOURCE_NOTIFICATION_TYPE {
  static const int LowMemoryResourceNotification = 0;
  static const int HighMemoryResourceNotification = 1;
}

class PWIN32_MEMORY_RANGE_ENTRY extends ffi.Struct {
  external ffi.Pointer<ffi.Void> VirtualAddress;

  @ffi.Uint64()
  external int NumberOfBytes;
}

abstract class OFFER_PRIORITY {
  static const int VmOfferPriorityVeryLow = 1;
  static const int VmOfferPriorityLow = 2;
  static const int VmOfferPriorityBelowNormal = 3;
  static const int VmOfferPriorityNormal = 4;
}

abstract class WIN32_MEMORY_INFORMATION_CLASS {
  static const int MemoryRegionInfo = 0;
}

class WIN32_MEMORY_REGION_INFORMATION extends ffi.Struct {
  external ffi.Pointer<ffi.Void> AllocationBase;

  @ffi.Uint64()
  external int AllocationProtect;

  @ffi.Uint64()
  external int RegionSize;

  @ffi.Uint64()
  external int CommitSize;
}

class JOBOBJECT_IO_RATE_CONTROL_INFORMATION extends ffi.Struct {
  @ffi.Int64()
  external int MaxIops;

  @ffi.Int64()
  external int MaxBandwidth;

  @ffi.Int64()
  external int ReservationIops;

  external ffi.Pointer<ffi.Uint16> VolumeName;

  @ffi.Uint64()
  external int BaseIoSize;

  @ffi.Uint64()
  external int ControlFlags;
}

class PENUMUILANG extends ffi.Struct {
  @ffi.Uint64()
  external int NumOfEnumUILang;

  @ffi.Uint64()
  external int SizeOfEnumUIBuffer;

  external ffi.Pointer<ffi.Uint16> pEnumUIBuffer;
}

class PREDIRECTION_FUNCTION_DESCRIPTOR extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> DllName;

  external ffi.Pointer<ffi.Int8> FunctionName;

  external ffi.Pointer<ffi.Void> RedirectionTarget;
}

class PREDIRECTION_DESCRIPTOR extends ffi.Struct {
  @ffi.Uint64()
  external int Version;

  @ffi.Uint64()
  external int FunctionCount;

  external ffi.Pointer<PREDIRECTION_FUNCTION_DESCRIPTOR> Redirections;
}

class LPCOMMPROP extends ffi.Opaque {}

class LPCOMSTAT extends ffi.Opaque {}

class LPDCB extends ffi.Opaque {}

class LPCOMMTIMEOUTS extends ffi.Struct {
  @ffi.Uint64()
  external int ReadIntervalTimeout;

  @ffi.Uint64()
  external int ReadTotalTimeoutMultiplier;

  @ffi.Uint64()
  external int ReadTotalTimeoutConstant;

  @ffi.Uint64()
  external int WriteTotalTimeoutMultiplier;

  @ffi.Uint64()
  external int WriteTotalTimeoutConstant;
}

class LPCOMMCONFIG extends ffi.Opaque {}

class LPMEMORYSTATUS extends ffi.Struct {
  @ffi.Uint64()
  external int dwLength;

  @ffi.Uint64()
  external int dwMemoryLoad;

  @ffi.Uint64()
  external int dwTotalPhys;

  @ffi.Uint64()
  external int dwAvailPhys;

  @ffi.Uint64()
  external int dwTotalPageFile;

  @ffi.Uint64()
  external int dwAvailPageFile;

  @ffi.Uint64()
  external int dwTotalVirtual;

  @ffi.Uint64()
  external int dwAvailVirtual;
}

class LPJIT_DEBUG_INFO extends ffi.Struct {
  @ffi.Uint64()
  external int dwSize;

  @ffi.Uint64()
  external int dwProcessorArchitecture;

  @ffi.Uint64()
  external int dwThreadID;

  @ffi.Uint64()
  external int dwReserved0;

  @ffi.Uint64()
  external int lpExceptionAddress;

  @ffi.Uint64()
  external int lpExceptionRecord;

  @ffi.Uint64()
  external int lpContextRecord;
}

class POFSTRUCT extends ffi.Opaque {}

class PUMS_SCHEDULER_STARTUP_INFO extends ffi.Struct {
  @ffi.Uint64()
  external int UmsVersion;

  external ffi.Pointer<ffi.Void> CompletionList;

  external ffi.Pointer<ffi.NativeFunction<PUMS_SCHEDULER_ENTRY_POINT>>
      SchedulerProc;

  external ffi.Pointer<ffi.Void> SchedulerParam;
}

class PUMS_SYSTEM_THREAD_INFORMATION extends ffi.Struct {
  @ffi.Uint64()
  external int UmsVersion;
}

abstract class DEP_SYSTEM_POLICY_TYPE {
  static const int DEPPolicyAlwaysOff = 0;
  static const int DEPPolicyAlwaysOn = 1;
  static const int DEPPolicyOptIn = 2;
  static const int DEPPolicyOptOut = 3;
  static const int DEPTotalPolicyCount = 4;
}

class LPWIN32_STREAM_ID extends ffi.Opaque {}

class LPSTARTUPINFOEXA extends ffi.Opaque {}

class LPSTARTUPINFOEXW extends ffi.Opaque {}

abstract class PROC_THREAD_ATTRIBUTE_NUM {
  static const int ProcThreadAttributeParentProcess = 0;
  static const int ProcThreadAttributeHandleList = 2;
  static const int ProcThreadAttributeGroupAffinity = 3;
  static const int ProcThreadAttributePreferredNode = 4;
  static const int ProcThreadAttributeIdealProcessor = 5;
  static const int ProcThreadAttributeUmsThread = 6;
  static const int ProcThreadAttributeMitigationPolicy = 7;
  static const int ProcThreadAttributeSecurityCapabilities = 9;
  static const int ProcThreadAttributeProtectionLevel = 11;
  static const int ProcThreadAttributeJobList = 13;
  static const int ProcThreadAttributeChildProcessPolicy = 14;
  static const int ProcThreadAttributeAllApplicationPackagesPolicy = 15;
  static const int ProcThreadAttributeWin32kFilter = 16;
  static const int ProcThreadAttributeSafeOpenPromptOriginClaim = 17;
  static const int ProcThreadAttributeDesktopAppPolicy = 18;
  static const int ProcThreadAttributePseudoConsole = 22;
  static const int ProcThreadAttributeMitigationAuditPolicy = 24;
}

abstract class COPYFILE2_MESSAGE_TYPE {
  static const int COPYFILE2_CALLBACK_NONE = 0;
  static const int COPYFILE2_CALLBACK_CHUNK_STARTED = 1;
  static const int COPYFILE2_CALLBACK_CHUNK_FINISHED = 2;
  static const int COPYFILE2_CALLBACK_STREAM_STARTED = 3;
  static const int COPYFILE2_CALLBACK_STREAM_FINISHED = 4;
  static const int COPYFILE2_CALLBACK_POLL_CONTINUE = 5;
  static const int COPYFILE2_CALLBACK_ERROR = 6;
  static const int COPYFILE2_CALLBACK_MAX = 7;
}

abstract class COPYFILE2_MESSAGE_ACTION {
  static const int COPYFILE2_PROGRESS_CONTINUE = 0;
  static const int COPYFILE2_PROGRESS_CANCEL = 1;
  static const int COPYFILE2_PROGRESS_STOP = 2;
  static const int COPYFILE2_PROGRESS_QUIET = 3;
  static const int COPYFILE2_PROGRESS_PAUSE = 4;
}

abstract class COPYFILE2_COPY_PHASE {
  static const int COPYFILE2_PHASE_NONE = 0;
  static const int COPYFILE2_PHASE_PREPARE_SOURCE = 1;
  static const int COPYFILE2_PHASE_PREPARE_DEST = 2;
  static const int COPYFILE2_PHASE_READ_SOURCE = 3;
  static const int COPYFILE2_PHASE_WRITE_DESTINATION = 4;
  static const int COPYFILE2_PHASE_SERVER_COPY = 5;
  static const int COPYFILE2_PHASE_NAMEGRAFT_COPY = 6;
  static const int COPYFILE2_PHASE_MAX = 7;
}

class COPYFILE2_MESSAGE extends ffi.Opaque {}

class COPYFILE2_EXTENDED_PARAMETERS extends ffi.Struct {
  @ffi.Uint64()
  external int dwSize;

  @ffi.Uint64()
  external int dwCopyFlags;

  external ffi.Pointer<ffi.Int32> pfCancel;

  external ffi.Pointer<ffi.NativeFunction<PCOPYFILE2_PROGRESS_ROUTINE>>
      pProgressRoutine;

  external ffi.Pointer<ffi.Void> pvCallbackContext;
}

class LPEVENTLOG_FULL_INFORMATION extends ffi.Struct {
  @ffi.Uint64()
  external int dwFull;
}

class POPERATION_START_PARAMETERS extends ffi.Struct {
  @ffi.Uint64()
  external int Version;

  @ffi.Uint64()
  external int OperationId;

  @ffi.Uint64()
  external int Flags;
}

class POPERATION_END_PARAMETERS extends ffi.Struct {
  @ffi.Uint64()
  external int Version;

  @ffi.Uint64()
  external int OperationId;

  @ffi.Uint64()
  external int Flags;
}

class LPHW_PROFILE_INFOA extends ffi.Opaque {}

class LPHW_PROFILE_INFOW extends ffi.Opaque {}

class LPTIME_ZONE_INFORMATION extends ffi.Opaque {}

class PDYNAMIC_TIME_ZONE_INFORMATION extends ffi.Opaque {}

class LPSYSTEM_POWER_STATUS extends ffi.Struct {
  @ffi.Uint8()
  external int ACLineStatus;

  @ffi.Uint8()
  external int BatteryFlag;

  @ffi.Uint8()
  external int BatteryLifePercent;

  @ffi.Uint8()
  external int SystemStatusFlag;

  @ffi.Uint64()
  external int BatteryLifeTime;

  @ffi.Uint64()
  external int BatteryFullLifeTime;
}

class PACTCTXA extends ffi.Struct {
  @ffi.Uint64()
  external int cbSize;

  @ffi.Uint64()
  external int dwFlags;

  external ffi.Pointer<ffi.Int8> lpSource;

  @ffi.Uint16()
  external int wProcessorArchitecture;

  @ffi.Uint16()
  external int wLangId;

  external ffi.Pointer<ffi.Int8> lpAssemblyDirectory;

  external ffi.Pointer<ffi.Int8> lpResourceName;

  external ffi.Pointer<ffi.Int8> lpApplicationName;

  external ffi.Pointer<HINSTANCE__> hModule;
}

class PACTCTXW extends ffi.Struct {
  @ffi.Uint64()
  external int cbSize;

  @ffi.Uint64()
  external int dwFlags;

  external ffi.Pointer<ffi.Uint16> lpSource;

  @ffi.Uint16()
  external int wProcessorArchitecture;

  @ffi.Uint16()
  external int wLangId;

  external ffi.Pointer<ffi.Uint16> lpAssemblyDirectory;

  external ffi.Pointer<ffi.Uint16> lpResourceName;

  external ffi.Pointer<ffi.Uint16> lpApplicationName;

  external ffi.Pointer<HINSTANCE__> hModule;
}

class PACTCTX_SECTION_KEYED_DATA_2600 extends ffi.Struct {
  @ffi.Uint64()
  external int cbSize;

  @ffi.Uint64()
  external int ulDataFormatVersion;

  external ffi.Pointer<ffi.Void> lpData;

  @ffi.Uint64()
  external int ulLength;

  external ffi.Pointer<ffi.Void> lpSectionGlobalData;

  @ffi.Uint64()
  external int ulSectionGlobalDataLength;

  external ffi.Pointer<ffi.Void> lpSectionBase;

  @ffi.Uint64()
  external int ulSectionTotalLength;

  external ffi.Pointer<ffi.Void> hActCtx;

  @ffi.Uint64()
  external int ulAssemblyRosterIndex;
}

class PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA extends ffi.Struct {
  external ffi.Pointer<ffi.Void> lpInformation;

  external ffi.Pointer<ffi.Void> lpSectionBase;

  @ffi.Uint64()
  external int ulSectionLength;

  external ffi.Pointer<ffi.Void> lpSectionGlobalDataBase;

  @ffi.Uint64()
  external int ulSectionGlobalDataLength;
}

class PACTCTX_SECTION_KEYED_DATA extends ffi.Opaque {}

class PACTIVATION_CONTEXT_BASIC_INFORMATION extends ffi.Struct {
  external ffi.Pointer<ffi.Void> hActCtx;

  @ffi.Uint64()
  external int dwFlags;
}

class PFILE_BASIC_INFO extends ffi.Opaque {}

class PFILE_STANDARD_INFO extends ffi.Opaque {}

class PFILE_NAME_INFO extends ffi.Opaque {}

class PFILE_CASE_SENSITIVE_INFO extends ffi.Struct {
  @ffi.Uint64()
  external int Flags;
}

class PFILE_RENAME_INFO extends ffi.Opaque {}

class PFILE_ALLOCATION_INFO extends ffi.Opaque {}

class PFILE_END_OF_FILE_INFO extends ffi.Opaque {}

class PFILE_STREAM_INFO extends ffi.Opaque {}

class PFILE_COMPRESSION_INFO extends ffi.Opaque {}

class PFILE_ATTRIBUTE_TAG_INFO extends ffi.Struct {
  @ffi.Uint64()
  external int FileAttributes;

  @ffi.Uint64()
  external int ReparseTag;
}

class PFILE_DISPOSITION_INFO extends ffi.Struct {
  @ffi.Uint8()
  external int DeleteFileA;
}

class PFILE_DISPOSITION_INFO_EX extends ffi.Struct {
  @ffi.Uint64()
  external int Flags;
}

class PFILE_ID_BOTH_DIR_INFO extends ffi.Opaque {}

class PFILE_FULL_DIR_INFO extends ffi.Opaque {}

abstract class PRIORITY_HINT {
  static const int IoPriorityHintVeryLow = 0;
  static const int IoPriorityHintLow = 1;
  static const int IoPriorityHintNormal = 2;
  static const int MaximumIoPriorityHintType = 3;
}

class PFILE_IO_PRIORITY_HINT_INFO extends ffi.Struct {
  @ffi.Int32()
  external int PriorityHint;
}

class PFILE_ALIGNMENT_INFO extends ffi.Struct {
  @ffi.Uint64()
  external int AlignmentRequirement;
}

class PFILE_STORAGE_INFO extends ffi.Struct {
  @ffi.Uint64()
  external int LogicalBytesPerSector;

  @ffi.Uint64()
  external int PhysicalBytesPerSectorForAtomicity;

  @ffi.Uint64()
  external int PhysicalBytesPerSectorForPerformance;

  @ffi.Uint64()
  external int FileSystemEffectivePhysicalBytesPerSectorForAtomicity;

  @ffi.Uint64()
  external int Flags;

  @ffi.Uint64()
  external int ByteOffsetForSectorAlignment;

  @ffi.Uint64()
  external int ByteOffsetForPartitionAlignment;
}

class PFILE_ID_INFO extends ffi.Opaque {}

class PFILE_ID_EXTD_DIR_INFO extends ffi.Opaque {}

class PFILE_REMOTE_PROTOCOL_INFO extends ffi.Opaque {}

abstract class PFILE_ID_TYPE {
  static const int FileIdType = 0;
  static const int ObjectIdType = 1;
  static const int ExtendedFileIdType = 2;
  static const int MaximumFileIdType = 3;
}

class LPFILE_ID_DESCRIPTOR extends ffi.Struct {
  @ffi.Uint64()
  external int dwSize;

  @ffi.Int32()
  external int Type;
}

class PDRAWPATRECT extends ffi.Opaque {}

class PPSINJECTDATA extends ffi.Struct {
  @ffi.Uint64()
  external int DataBytes;

  @ffi.Uint16()
  external int InjectionPoint;

  @ffi.Uint16()
  external int PageNumber;
}

class PPSFEATURE_OUTPUT extends ffi.Struct {
  @ffi.Int32()
  external int bPageIndependent;

  @ffi.Int32()
  external int bSetPageDevice;
}

class PPSFEATURE_CUSTPAPER extends ffi.Struct {
  @ffi.Int64()
  external int lOrientation;

  @ffi.Int64()
  external int lWidth;

  @ffi.Int64()
  external int lHeight;

  @ffi.Int64()
  external int lWidthOffset;

  @ffi.Int64()
  external int lHeightOffset;
}

class LPXFORM extends ffi.Struct {
  @ffi.Float()
  external double eM11;

  @ffi.Float()
  external double eM12;

  @ffi.Float()
  external double eM21;

  @ffi.Float()
  external double eM22;

  @ffi.Float()
  external double eDx;

  @ffi.Float()
  external double eDy;
}

class LPBITMAP extends ffi.Struct {
  @ffi.Int64()
  external int bmType;

  @ffi.Int64()
  external int bmWidth;

  @ffi.Int64()
  external int bmHeight;

  @ffi.Int64()
  external int bmWidthBytes;

  @ffi.Uint16()
  external int bmPlanes;

  @ffi.Uint16()
  external int bmBitsPixel;

  external ffi.Pointer<ffi.Void> bmBits;
}

class LPRGBTRIPLE extends ffi.Struct {
  @ffi.Uint8()
  external int rgbtBlue;

  @ffi.Uint8()
  external int rgbtGreen;

  @ffi.Uint8()
  external int rgbtRed;
}

class RGBQUAD extends ffi.Struct {
  @ffi.Uint8()
  external int rgbBlue;

  @ffi.Uint8()
  external int rgbGreen;

  @ffi.Uint8()
  external int rgbRed;

  @ffi.Uint8()
  external int rgbReserved;
}

class CIEXYZ extends ffi.Struct {
  @ffi.Int64()
  external int ciexyzX;

  @ffi.Int64()
  external int ciexyzY;

  @ffi.Int64()
  external int ciexyzZ;
}

class CIEXYZTRIPLE extends ffi.Opaque {}

class LPLOGCOLORSPACEA extends ffi.Opaque {}

class LPLOGCOLORSPACEW extends ffi.Opaque {}

class PBITMAPCOREHEADER extends ffi.Struct {
  @ffi.Uint64()
  external int bcSize;

  @ffi.Uint16()
  external int bcWidth;

  @ffi.Uint16()
  external int bcHeight;

  @ffi.Uint16()
  external int bcPlanes;

  @ffi.Uint16()
  external int bcBitCount;
}

class PBITMAPINFOHEADER extends ffi.Struct {
  @ffi.Uint64()
  external int biSize;

  @ffi.Int64()
  external int biWidth;

  @ffi.Int64()
  external int biHeight;

  @ffi.Uint16()
  external int biPlanes;

  @ffi.Uint16()
  external int biBitCount;

  @ffi.Uint64()
  external int biCompression;

  @ffi.Uint64()
  external int biSizeImage;

  @ffi.Int64()
  external int biXPelsPerMeter;

  @ffi.Int64()
  external int biYPelsPerMeter;

  @ffi.Uint64()
  external int biClrUsed;

  @ffi.Uint64()
  external int biClrImportant;
}

class PBITMAPV4HEADER extends ffi.Opaque {}

class PBITMAPV5HEADER extends ffi.Opaque {}

class PBITMAPINFO extends ffi.Opaque {}

class PBITMAPCOREINFO extends ffi.Opaque {}

class PBITMAPFILEHEADER extends ffi.Struct {
  @ffi.Uint16()
  external int bfType;

  @ffi.Uint64()
  external int bfSize;

  @ffi.Uint16()
  external int bfReserved1;

  @ffi.Uint16()
  external int bfReserved2;

  @ffi.Uint64()
  external int bfOffBits;
}

class LPFONTSIGNATURE extends ffi.Opaque {}

class LPCHARSETINFO extends ffi.Opaque {}

class LPLOCALESIGNATURE extends ffi.Opaque {}

class LPHANDLETABLE extends ffi.Opaque {}

class METARECORD extends ffi.Opaque {}

class LPMETAFILEPICT extends ffi.Struct {
  @ffi.Int64()
  external int mm;

  @ffi.Int64()
  external int xExt;

  @ffi.Int64()
  external int yExt;

  external ffi.Pointer<HMETAFILE__> hMF;
}

class METAHEADER extends ffi.Struct {
  @ffi.Uint16()
  external int mtType;

  @ffi.Uint16()
  external int mtHeaderSize;

  @ffi.Uint16()
  external int mtVersion;

  @ffi.Uint64()
  external int mtSize;

  @ffi.Uint16()
  external int mtNoObjects;

  @ffi.Uint64()
  external int mtMaxRecord;

  @ffi.Uint16()
  external int mtNoParameters;
}

class LPENHMETARECORD extends ffi.Opaque {}

class LPENHMETAHEADER extends ffi.Opaque {}

class LPTEXTMETRICA extends ffi.Struct {
  @ffi.Int64()
  external int tmHeight;

  @ffi.Int64()
  external int tmAscent;

  @ffi.Int64()
  external int tmDescent;

  @ffi.Int64()
  external int tmInternalLeading;

  @ffi.Int64()
  external int tmExternalLeading;

  @ffi.Int64()
  external int tmAveCharWidth;

  @ffi.Int64()
  external int tmMaxCharWidth;

  @ffi.Int64()
  external int tmWeight;

  @ffi.Int64()
  external int tmOverhang;

  @ffi.Int64()
  external int tmDigitizedAspectX;

  @ffi.Int64()
  external int tmDigitizedAspectY;

  @ffi.Uint8()
  external int tmFirstChar;

  @ffi.Uint8()
  external int tmLastChar;

  @ffi.Uint8()
  external int tmDefaultChar;

  @ffi.Uint8()
  external int tmBreakChar;

  @ffi.Uint8()
  external int tmItalic;

  @ffi.Uint8()
  external int tmUnderlined;

  @ffi.Uint8()
  external int tmStruckOut;

  @ffi.Uint8()
  external int tmPitchAndFamily;

  @ffi.Uint8()
  external int tmCharSet;
}

class LPTEXTMETRICW extends ffi.Struct {
  @ffi.Int64()
  external int tmHeight;

  @ffi.Int64()
  external int tmAscent;

  @ffi.Int64()
  external int tmDescent;

  @ffi.Int64()
  external int tmInternalLeading;

  @ffi.Int64()
  external int tmExternalLeading;

  @ffi.Int64()
  external int tmAveCharWidth;

  @ffi.Int64()
  external int tmMaxCharWidth;

  @ffi.Int64()
  external int tmWeight;

  @ffi.Int64()
  external int tmOverhang;

  @ffi.Int64()
  external int tmDigitizedAspectX;

  @ffi.Int64()
  external int tmDigitizedAspectY;

  @ffi.Uint16()
  external int tmFirstChar;

  @ffi.Uint16()
  external int tmLastChar;

  @ffi.Uint16()
  external int tmDefaultChar;

  @ffi.Uint16()
  external int tmBreakChar;

  @ffi.Uint8()
  external int tmItalic;

  @ffi.Uint8()
  external int tmUnderlined;

  @ffi.Uint8()
  external int tmStruckOut;

  @ffi.Uint8()
  external int tmPitchAndFamily;

  @ffi.Uint8()
  external int tmCharSet;
}

class LPNEWTEXTMETRICA extends ffi.Struct {
  @ffi.Int64()
  external int tmHeight;

  @ffi.Int64()
  external int tmAscent;

  @ffi.Int64()
  external int tmDescent;

  @ffi.Int64()
  external int tmInternalLeading;

  @ffi.Int64()
  external int tmExternalLeading;

  @ffi.Int64()
  external int tmAveCharWidth;

  @ffi.Int64()
  external int tmMaxCharWidth;

  @ffi.Int64()
  external int tmWeight;

  @ffi.Int64()
  external int tmOverhang;

  @ffi.Int64()
  external int tmDigitizedAspectX;

  @ffi.Int64()
  external int tmDigitizedAspectY;

  @ffi.Uint8()
  external int tmFirstChar;

  @ffi.Uint8()
  external int tmLastChar;

  @ffi.Uint8()
  external int tmDefaultChar;

  @ffi.Uint8()
  external int tmBreakChar;

  @ffi.Uint8()
  external int tmItalic;

  @ffi.Uint8()
  external int tmUnderlined;

  @ffi.Uint8()
  external int tmStruckOut;

  @ffi.Uint8()
  external int tmPitchAndFamily;

  @ffi.Uint8()
  external int tmCharSet;

  @ffi.Uint64()
  external int ntmFlags;

  @ffi.Uint32()
  external int ntmSizeEM;

  @ffi.Uint32()
  external int ntmCellHeight;

  @ffi.Uint32()
  external int ntmAvgWidth;
}

class LPNEWTEXTMETRICW extends ffi.Struct {
  @ffi.Int64()
  external int tmHeight;

  @ffi.Int64()
  external int tmAscent;

  @ffi.Int64()
  external int tmDescent;

  @ffi.Int64()
  external int tmInternalLeading;

  @ffi.Int64()
  external int tmExternalLeading;

  @ffi.Int64()
  external int tmAveCharWidth;

  @ffi.Int64()
  external int tmMaxCharWidth;

  @ffi.Int64()
  external int tmWeight;

  @ffi.Int64()
  external int tmOverhang;

  @ffi.Int64()
  external int tmDigitizedAspectX;

  @ffi.Int64()
  external int tmDigitizedAspectY;

  @ffi.Uint16()
  external int tmFirstChar;

  @ffi.Uint16()
  external int tmLastChar;

  @ffi.Uint16()
  external int tmDefaultChar;

  @ffi.Uint16()
  external int tmBreakChar;

  @ffi.Uint8()
  external int tmItalic;

  @ffi.Uint8()
  external int tmUnderlined;

  @ffi.Uint8()
  external int tmStruckOut;

  @ffi.Uint8()
  external int tmPitchAndFamily;

  @ffi.Uint8()
  external int tmCharSet;

  @ffi.Uint64()
  external int ntmFlags;

  @ffi.Uint32()
  external int ntmSizeEM;

  @ffi.Uint32()
  external int ntmCellHeight;

  @ffi.Uint32()
  external int ntmAvgWidth;
}

class NEWTEXTMETRICEXA extends ffi.Opaque {}

class NEWTEXTMETRICEXW extends ffi.Opaque {}

class LPPELARRAY extends ffi.Struct {
  @ffi.Int64()
  external int paXCount;

  @ffi.Int64()
  external int paYCount;

  @ffi.Int64()
  external int paXExt;

  @ffi.Int64()
  external int paYExt;

  @ffi.Uint8()
  external int paRGBs;
}

class LPLOGBRUSH extends ffi.Struct {
  @ffi.Uint32()
  external int lbStyle;

  @ffi.Uint64()
  external int lbColor;

  @ffi.Uint64()
  external int lbHatch;
}

class LPLOGBRUSH32 extends ffi.Struct {
  @ffi.Uint32()
  external int lbStyle;

  @ffi.Uint64()
  external int lbColor;

  @ffi.Uint64()
  external int lbHatch;
}

class LPLOGPEN extends ffi.Opaque {}

class LPEXTLOGPEN extends ffi.Opaque {}

class LPEXTLOGPEN32 extends ffi.Opaque {}

class LPPALETTEENTRY extends ffi.Struct {
  @ffi.Uint8()
  external int peRed;

  @ffi.Uint8()
  external int peGreen;

  @ffi.Uint8()
  external int peBlue;

  @ffi.Uint8()
  external int peFlags;
}

class LPLOGPALETTE extends ffi.Opaque {}

class LPLOGFONTA extends ffi.Opaque {}

class LPLOGFONTW extends ffi.Opaque {}

class LPENUMLOGFONTA extends ffi.Opaque {}

class LPENUMLOGFONTW extends ffi.Opaque {}

class LPENUMLOGFONTEXA extends ffi.Opaque {}

class LPENUMLOGFONTEXW extends ffi.Opaque {}

class LPPANOSE extends ffi.Struct {
  @ffi.Uint8()
  external int bFamilyType;

  @ffi.Uint8()
  external int bSerifStyle;

  @ffi.Uint8()
  external int bWeight;

  @ffi.Uint8()
  external int bProportion;

  @ffi.Uint8()
  external int bContrast;

  @ffi.Uint8()
  external int bStrokeVariation;

  @ffi.Uint8()
  external int bArmStyle;

  @ffi.Uint8()
  external int bLetterform;

  @ffi.Uint8()
  external int bMidline;

  @ffi.Uint8()
  external int bXHeight;
}

class LPEXTLOGFONTA extends ffi.Opaque {}

class LPEXTLOGFONTW extends ffi.Opaque {}

class LPDEVMODEA extends ffi.Opaque {}

class LPDEVMODEW extends ffi.Opaque {}

class LPDISPLAY_DEVICEA extends ffi.Opaque {}

class LPDISPLAY_DEVICEW extends ffi.Opaque {}

class DISPLAYCONFIG_RATIONAL extends ffi.Struct {
  @ffi.Uint32()
  external int Numerator;

  @ffi.Uint32()
  external int Denominator;
}

abstract class DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY {
  static const int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER = -1;
  static const int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15 = 0;
  static const int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO = 1;
  static const int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO = 2;
  static const int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO = 3;
  static const int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI = 4;
  static const int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI = 5;
  static const int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS = 6;
  static const int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN = 8;
  static const int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI = 9;
  static const int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL = 10;
  static const int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED = 11;
  static const int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL = 12;
  static const int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED = 13;
  static const int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE = 14;
  static const int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST = 15;
  static const int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_WIRED = 16;
  static const int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_VIRTUAL = 17;
  static const int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL = -2147483648;
  static const int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32 = -1;
}

abstract class DISPLAYCONFIG_SCANLINE_ORDERING {
  static const int DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED = 0;
  static const int DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE = 1;
  static const int DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED = 2;
  static const int DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST =
      2;
  static const int DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST =
      3;
  static const int DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32 = -1;
}

class DISPLAYCONFIG_2DREGION extends ffi.Struct {
  @ffi.Uint32()
  external int cx;

  @ffi.Uint32()
  external int cy;
}

class DISPLAYCONFIG_VIDEO_SIGNAL_INFO extends ffi.Opaque {}

abstract class DISPLAYCONFIG_SCALING {
  static const int DISPLAYCONFIG_SCALING_IDENTITY = 1;
  static const int DISPLAYCONFIG_SCALING_CENTERED = 2;
  static const int DISPLAYCONFIG_SCALING_STRETCHED = 3;
  static const int DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX = 4;
  static const int DISPLAYCONFIG_SCALING_CUSTOM = 5;
  static const int DISPLAYCONFIG_SCALING_PREFERRED = 128;
  static const int DISPLAYCONFIG_SCALING_FORCE_UINT32 = -1;
}

abstract class DISPLAYCONFIG_ROTATION {
  static const int DISPLAYCONFIG_ROTATION_IDENTITY = 1;
  static const int DISPLAYCONFIG_ROTATION_ROTATE90 = 2;
  static const int DISPLAYCONFIG_ROTATION_ROTATE180 = 3;
  static const int DISPLAYCONFIG_ROTATION_ROTATE270 = 4;
  static const int DISPLAYCONFIG_ROTATION_FORCE_UINT32 = -1;
}

abstract class DISPLAYCONFIG_MODE_INFO_TYPE {
  static const int DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE = 1;
  static const int DISPLAYCONFIG_MODE_INFO_TYPE_TARGET = 2;
  static const int DISPLAYCONFIG_MODE_INFO_TYPE_DESKTOP_IMAGE = 3;
  static const int DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32 = -1;
}

abstract class DISPLAYCONFIG_PIXELFORMAT {
  static const int DISPLAYCONFIG_PIXELFORMAT_8BPP = 1;
  static const int DISPLAYCONFIG_PIXELFORMAT_16BPP = 2;
  static const int DISPLAYCONFIG_PIXELFORMAT_24BPP = 3;
  static const int DISPLAYCONFIG_PIXELFORMAT_32BPP = 4;
  static const int DISPLAYCONFIG_PIXELFORMAT_NONGDI = 5;
  static const int DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32 = -1;
}

class DISPLAYCONFIG_SOURCE_MODE extends ffi.Opaque {}

class DISPLAYCONFIG_TARGET_MODE extends ffi.Opaque {}

class DISPLAYCONFIG_DESKTOP_IMAGE_INFO extends ffi.Opaque {}

class DISPLAYCONFIG_MODE_INFO extends ffi.Opaque {}

class DISPLAYCONFIG_PATH_SOURCE_INFO extends ffi.Opaque {}

class DISPLAYCONFIG_PATH_TARGET_INFO extends ffi.Opaque {}

class DISPLAYCONFIG_PATH_INFO extends ffi.Opaque {}

abstract class DISPLAYCONFIG_TOPOLOGY_ID {
  static const int DISPLAYCONFIG_TOPOLOGY_INTERNAL = 1;
  static const int DISPLAYCONFIG_TOPOLOGY_CLONE = 2;
  static const int DISPLAYCONFIG_TOPOLOGY_EXTEND = 4;
  static const int DISPLAYCONFIG_TOPOLOGY_EXTERNAL = 8;
  static const int DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32 = -1;
}

abstract class DISPLAYCONFIG_DEVICE_INFO_TYPE {
  static const int DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME = 1;
  static const int DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME = 2;
  static const int DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE = 3;
  static const int DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME = 4;
  static const int DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE = 5;
  static const int DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE = 6;
  static const int DISPLAYCONFIG_DEVICE_INFO_GET_SUPPORT_VIRTUAL_RESOLUTION = 7;
  static const int DISPLAYCONFIG_DEVICE_INFO_SET_SUPPORT_VIRTUAL_RESOLUTION = 8;
  static const int DISPLAYCONFIG_DEVICE_INFO_GET_ADVANCED_COLOR_INFO = 9;
  static const int DISPLAYCONFIG_DEVICE_INFO_SET_ADVANCED_COLOR_STATE = 10;
  static const int DISPLAYCONFIG_DEVICE_INFO_GET_SDR_WHITE_LEVEL = 11;
  static const int DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32 = -1;
}

class DISPLAYCONFIG_DEVICE_INFO_HEADER extends ffi.Opaque {}

class DISPLAYCONFIG_SOURCE_DEVICE_NAME extends ffi.Opaque {}

class DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS extends ffi.Opaque {}

class DISPLAYCONFIG_TARGET_DEVICE_NAME extends ffi.Opaque {}

class DISPLAYCONFIG_TARGET_PREFERRED_MODE extends ffi.Opaque {}

class DISPLAYCONFIG_ADAPTER_NAME extends ffi.Opaque {}

class DISPLAYCONFIG_TARGET_BASE_TYPE extends ffi.Opaque {}

class DISPLAYCONFIG_SET_TARGET_PERSISTENCE extends ffi.Opaque {}

class DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION extends ffi.Opaque {}

abstract class DISPLAYCONFIG_COLOR_ENCODING {
  static const int DISPLAYCONFIG_COLOR_ENCODING_RGB = 0;
  static const int DISPLAYCONFIG_COLOR_ENCODING_YCBCR444 = 1;
  static const int DISPLAYCONFIG_COLOR_ENCODING_YCBCR422 = 2;
  static const int DISPLAYCONFIG_COLOR_ENCODING_YCBCR420 = 3;
  static const int DISPLAYCONFIG_COLOR_ENCODING_INTENSITY = 4;
  static const int DISPLAYCONFIG_COLOR_ENCODING_FORCE_UINT32 = -1;
}

class DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO extends ffi.Opaque {}

class DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE extends ffi.Opaque {}

class DISPLAYCONFIG_SDR_WHITE_LEVEL extends ffi.Opaque {}

class PRGNDATAHEADER extends ffi.Opaque {}

class LPRGNDATA extends ffi.Opaque {}

class LPABC extends ffi.Struct {
  @ffi.Int32()
  external int abcA;

  @ffi.Uint32()
  external int abcB;

  @ffi.Int32()
  external int abcC;
}

class LPABCFLOAT extends ffi.Struct {
  @ffi.Float()
  external double abcfA;

  @ffi.Float()
  external double abcfB;

  @ffi.Float()
  external double abcfC;
}

class LPOUTLINETEXTMETRICA extends ffi.Opaque {}

class LPOUTLINETEXTMETRICW extends ffi.Opaque {}

class LPPOLYTEXTA extends ffi.Opaque {}

class LPPOLYTEXTW extends ffi.Opaque {}

class FIXED extends ffi.Struct {
  @ffi.Uint16()
  external int fract;

  @ffi.Int16()
  external int value;
}

class LPMAT2 extends ffi.Opaque {}

class LPGLYPHMETRICS extends ffi.Opaque {}

class LPPOINTFX extends ffi.Opaque {}

class LPTTPOLYCURVE extends ffi.Opaque {}

class LPTTPOLYGONHEADER extends ffi.Opaque {}

class LPGCP_RESULTSA extends ffi.Struct {
  @ffi.Uint64()
  external int lStructSize;

  external ffi.Pointer<ffi.Int8> lpOutString;

  external ffi.Pointer<ffi.Uint32> lpOrder;

  external ffi.Pointer<ffi.Int32> lpDx;

  external ffi.Pointer<ffi.Int32> lpCaretPos;

  external ffi.Pointer<ffi.Int8> lpClass;

  external ffi.Pointer<ffi.Uint16> lpGlyphs;

  @ffi.Uint32()
  external int nGlyphs;

  @ffi.Int32()
  external int nMaxFit;
}

class LPGCP_RESULTSW extends ffi.Struct {
  @ffi.Uint64()
  external int lStructSize;

  external ffi.Pointer<ffi.Uint16> lpOutString;

  external ffi.Pointer<ffi.Uint32> lpOrder;

  external ffi.Pointer<ffi.Int32> lpDx;

  external ffi.Pointer<ffi.Int32> lpCaretPos;

  external ffi.Pointer<ffi.Int8> lpClass;

  external ffi.Pointer<ffi.Uint16> lpGlyphs;

  @ffi.Uint32()
  external int nGlyphs;

  @ffi.Int32()
  external int nMaxFit;
}

class LPRASTERIZER_STATUS extends ffi.Struct {
  @ffi.Int16()
  external int nSize;

  @ffi.Int16()
  external int wFlags;

  @ffi.Int16()
  external int nLanguageID;
}

class LPPIXELFORMATDESCRIPTOR extends ffi.Struct {
  @ffi.Uint16()
  external int nSize;

  @ffi.Uint16()
  external int nVersion;

  @ffi.Uint64()
  external int dwFlags;

  @ffi.Uint8()
  external int iPixelType;

  @ffi.Uint8()
  external int cColorBits;

  @ffi.Uint8()
  external int cRedBits;

  @ffi.Uint8()
  external int cRedShift;

  @ffi.Uint8()
  external int cGreenBits;

  @ffi.Uint8()
  external int cGreenShift;

  @ffi.Uint8()
  external int cBlueBits;

  @ffi.Uint8()
  external int cBlueShift;

  @ffi.Uint8()
  external int cAlphaBits;

  @ffi.Uint8()
  external int cAlphaShift;

  @ffi.Uint8()
  external int cAccumBits;

  @ffi.Uint8()
  external int cAccumRedBits;

  @ffi.Uint8()
  external int cAccumGreenBits;

  @ffi.Uint8()
  external int cAccumBlueBits;

  @ffi.Uint8()
  external int cAccumAlphaBits;

  @ffi.Uint8()
  external int cDepthBits;

  @ffi.Uint8()
  external int cStencilBits;

  @ffi.Uint8()
  external int cAuxBuffers;

  @ffi.Uint8()
  external int iLayerType;

  @ffi.Uint8()
  external int bReserved;

  @ffi.Uint64()
  external int dwLayerMask;

  @ffi.Uint64()
  external int dwVisibleMask;

  @ffi.Uint64()
  external int dwDamageMask;
}

class LPWCRANGE extends ffi.Struct {
  @ffi.Uint16()
  external int wcLow;

  @ffi.Uint16()
  external int cGlyphs;
}

class LPGLYPHSET extends ffi.Opaque {}

class LPDESIGNVECTOR extends ffi.Opaque {}

class LPAXISINFOA extends ffi.Opaque {}

class LPAXISINFOW extends ffi.Opaque {}

class LPAXESLISTA extends ffi.Opaque {}

class LPAXESLISTW extends ffi.Opaque {}

class LPENUMLOGFONTEXDVA extends ffi.Opaque {}

class LPENUMLOGFONTEXDVW extends ffi.Opaque {}

class LPENUMTEXTMETRICA extends ffi.Opaque {}

class LPENUMTEXTMETRICW extends ffi.Opaque {}

class LPTRIVERTEX extends ffi.Struct {
  @ffi.Int64()
  external int x;

  @ffi.Int64()
  external int y;

  @ffi.Uint16()
  external int Red;

  @ffi.Uint16()
  external int Green;

  @ffi.Uint16()
  external int Blue;

  @ffi.Uint16()
  external int Alpha;
}

class LPGRADIENT_TRIANGLE extends ffi.Struct {
  @ffi.Uint64()
  external int Vertex1;

  @ffi.Uint64()
  external int Vertex2;

  @ffi.Uint64()
  external int Vertex3;
}

class LPGRADIENT_RECT extends ffi.Struct {
  @ffi.Uint64()
  external int UpperLeft;

  @ffi.Uint64()
  external int LowerRight;
}

class PBLENDFUNCTION extends ffi.Struct {
  @ffi.Uint8()
  external int BlendOp;

  @ffi.Uint8()
  external int BlendFlags;

  @ffi.Uint8()
  external int SourceConstantAlpha;

  @ffi.Uint8()
  external int AlphaFormat;
}

class PDIBSECTION extends ffi.Opaque {}

class LPCOLORADJUSTMENT extends ffi.Struct {
  @ffi.Uint16()
  external int caSize;

  @ffi.Uint16()
  external int caFlags;

  @ffi.Uint16()
  external int caIlluminantIndex;

  @ffi.Uint16()
  external int caRedGamma;

  @ffi.Uint16()
  external int caGreenGamma;

  @ffi.Uint16()
  external int caBlueGamma;

  @ffi.Uint16()
  external int caReferenceBlack;

  @ffi.Uint16()
  external int caReferenceWhite;

  @ffi.Int16()
  external int caContrast;

  @ffi.Int16()
  external int caBrightness;

  @ffi.Int16()
  external int caColorfulness;

  @ffi.Int16()
  external int caRedGreenTint;
}

class LPDOCINFOA extends ffi.Struct {
  @ffi.Int32()
  external int cbSize;

  external ffi.Pointer<ffi.Int8> lpszDocName;

  external ffi.Pointer<ffi.Int8> lpszOutput;

  external ffi.Pointer<ffi.Int8> lpszDatatype;

  @ffi.Uint64()
  external int fwType;
}

class LPDOCINFOW extends ffi.Struct {
  @ffi.Int32()
  external int cbSize;

  external ffi.Pointer<ffi.Uint16> lpszDocName;

  external ffi.Pointer<ffi.Uint16> lpszOutput;

  external ffi.Pointer<ffi.Uint16> lpszDatatype;

  @ffi.Uint64()
  external int fwType;
}

class LPKERNINGPAIR extends ffi.Struct {
  @ffi.Uint16()
  external int wFirst;

  @ffi.Uint16()
  external int wSecond;

  @ffi.Int32()
  external int iKernAmount;
}

class PEMR extends ffi.Struct {
  @ffi.Uint64()
  external int iType;

  @ffi.Uint64()
  external int nSize;
}

class PEMRTEXT extends ffi.Opaque {}

class PEMRREALIZEPALETTE extends ffi.Opaque {}

class PEMRSETTEXTALIGN extends ffi.Opaque {}

class PEMRSETMITERLIMIT extends ffi.Opaque {}

class PEMRRESTOREDC extends ffi.Opaque {}

class PEMRSETARCDIRECTION extends ffi.Opaque {}

class PEMRSETMAPPERFLAGS extends ffi.Opaque {}

class PEMRSETTEXTCOLOR extends ffi.Opaque {}

class PEMRDELETEOBJECT extends ffi.Opaque {}

class PEMRSELECTPALETTE extends ffi.Opaque {}

class PEMRRESIZEPALETTE extends ffi.Opaque {}

class PEMRSETPALETTEENTRIES extends ffi.Opaque {}

class PEMRSETCOLORADJUSTMENT extends ffi.Opaque {}

class PEMRGDICOMMENT extends ffi.Opaque {}

class PEMREOF extends ffi.Opaque {}

class PEMRMOVETOEX extends ffi.Opaque {}

class PEMROFFSETCLIPRGN extends ffi.Opaque {}

class PEMRSTROKEPATH extends ffi.Opaque {}

class PEMRINTERSECTCLIPRECT extends ffi.Opaque {}

class PEMRSETBRUSHORGEX extends ffi.Opaque {}

class PEMRSETWINDOWEXTEX extends ffi.Opaque {}

class PEMRSCALEWINDOWEXTEX extends ffi.Opaque {}

class PEMRSETWORLDTRANSFORM extends ffi.Opaque {}

class PEMRMODIFYWORLDTRANSFORM extends ffi.Opaque {}

class PEMRSETPIXELV extends ffi.Opaque {}

class PEMREXTFLOODFILL extends ffi.Opaque {}

class PEMRRECTANGLE extends ffi.Opaque {}

class PEMRROUNDRECT extends ffi.Opaque {}

class PEMRPIE extends ffi.Opaque {}

class PEMRANGLEARC extends ffi.Opaque {}

class PEMRPOLYLINETO extends ffi.Opaque {}

class PEMRPOLYLINETO16 extends ffi.Opaque {}

class PEMRPOLYDRAW extends ffi.Opaque {}

class PEMRPOLYDRAW16 extends ffi.Opaque {}

class PEMRPOLYPOLYGON extends ffi.Opaque {}

class PEMRPOLYPOLYGON16 extends ffi.Opaque {}

class PEMRPAINTRGN extends ffi.Opaque {}

class PEMRFILLRGN extends ffi.Opaque {}

class PEMRFRAMERGN extends ffi.Opaque {}

class PEMREXTSELECTCLIPRGN extends ffi.Opaque {}

class PEMREXTTEXTOUTW extends ffi.Opaque {}

class PEMRPOLYTEXTOUTW extends ffi.Opaque {}

class PEMRBITBLT extends ffi.Opaque {}

class PEMRSTRETCHBLT extends ffi.Opaque {}

class PEMRMASKBLT extends ffi.Opaque {}

class PEMRPLGBLT extends ffi.Opaque {}

class PEMRSETDIBITSTODEVICE extends ffi.Opaque {}

class PEMRSTRETCHDIBITS extends ffi.Opaque {}

class PEMREXTCREATEFONTINDIRECTW extends ffi.Opaque {}

class PEMRCREATEPALETTE extends ffi.Opaque {}

class PEMRCREATEPEN extends ffi.Opaque {}

class PEMREXTCREATEPEN extends ffi.Opaque {}

class PEMRCREATEBRUSHINDIRECT extends ffi.Opaque {}

class PEMRCREATEMONOBRUSH extends ffi.Opaque {}

class PEMRCREATEDIBPATTERNBRUSHPT extends ffi.Opaque {}

class PEMRFORMAT extends ffi.Struct {
  @ffi.Uint64()
  external int dSignature;

  @ffi.Uint64()
  external int nVersion;

  @ffi.Uint64()
  external int cbData;

  @ffi.Uint64()
  external int offData;
}

class PEMRGLSRECORD extends ffi.Opaque {}

class PEMRGLSBOUNDEDRECORD extends ffi.Opaque {}

class PEMRPIXELFORMAT extends ffi.Opaque {}

class PEMRCREATECOLORSPACE extends ffi.Opaque {}

class PEMRDELETECOLORSPACE extends ffi.Opaque {}

class PEMRDRAWESCAPE extends ffi.Opaque {}

class PEMRNAMEDESCAPE extends ffi.Opaque {}

class PEMRSETICMPROFILEW extends ffi.Opaque {}

class PEMRCREATECOLORSPACEW extends ffi.Opaque {}

class PEMRCOLORMATCHTOTARGET extends ffi.Opaque {}

class PEMRCOLORCORRECTPALETTE extends ffi.Opaque {}

class PEMRALPHABLEND extends ffi.Opaque {}

class PEMRGRADIENTFILL extends ffi.Opaque {}

class PEMRTRANSPARENTBLT extends ffi.Opaque {}

class PPOINTFLOAT extends ffi.Struct {
  @ffi.Float()
  external double x;

  @ffi.Float()
  external double y;
}

class LPGLYPHMETRICSFLOAT extends ffi.Opaque {}

class LPLAYERPLANEDESCRIPTOR extends ffi.Struct {
  @ffi.Uint16()
  external int nSize;

  @ffi.Uint16()
  external int nVersion;

  @ffi.Uint64()
  external int dwFlags;

  @ffi.Uint8()
  external int iPixelType;

  @ffi.Uint8()
  external int cColorBits;

  @ffi.Uint8()
  external int cRedBits;

  @ffi.Uint8()
  external int cRedShift;

  @ffi.Uint8()
  external int cGreenBits;

  @ffi.Uint8()
  external int cGreenShift;

  @ffi.Uint8()
  external int cBlueBits;

  @ffi.Uint8()
  external int cBlueShift;

  @ffi.Uint8()
  external int cAlphaBits;

  @ffi.Uint8()
  external int cAlphaShift;

  @ffi.Uint8()
  external int cAccumBits;

  @ffi.Uint8()
  external int cAccumRedBits;

  @ffi.Uint8()
  external int cAccumGreenBits;

  @ffi.Uint8()
  external int cAccumBlueBits;

  @ffi.Uint8()
  external int cAccumAlphaBits;

  @ffi.Uint8()
  external int cDepthBits;

  @ffi.Uint8()
  external int cStencilBits;

  @ffi.Uint8()
  external int cAuxBuffers;

  @ffi.Uint8()
  external int iLayerPlane;

  @ffi.Uint8()
  external int bReserved;

  @ffi.Uint64()
  external int crTransparent;
}

class LPWGLSWAP extends ffi.Struct {
  external ffi.Pointer<HDC__> hdc;

  @ffi.Uint32()
  external int uiFlags;
}

class LPCREATESTRUCTA extends ffi.Struct {
  external ffi.Pointer<ffi.Void> lpCreateParams;

  external ffi.Pointer<HINSTANCE__> hInstance;

  external ffi.Pointer<HMENU__> hMenu;

  external ffi.Pointer<HWND__> hwndParent;

  @ffi.Int32()
  external int cy;

  @ffi.Int32()
  external int cx;

  @ffi.Int32()
  external int y;

  @ffi.Int32()
  external int x;

  @ffi.Int64()
  external int style;

  external ffi.Pointer<ffi.Int8> lpszName;

  external ffi.Pointer<ffi.Int8> lpszClass;

  @ffi.Uint64()
  external int dwExStyle;
}

class LPCBT_CREATEWNDA extends ffi.Struct {
  external ffi.Pointer<LPCREATESTRUCTA> lpcs;

  external ffi.Pointer<HWND__> hwndInsertAfter;
}

class LPCREATESTRUCTW extends ffi.Struct {
  external ffi.Pointer<ffi.Void> lpCreateParams;

  external ffi.Pointer<HINSTANCE__> hInstance;

  external ffi.Pointer<HMENU__> hMenu;

  external ffi.Pointer<HWND__> hwndParent;

  @ffi.Int32()
  external int cy;

  @ffi.Int32()
  external int cx;

  @ffi.Int32()
  external int y;

  @ffi.Int32()
  external int x;

  @ffi.Int64()
  external int style;

  external ffi.Pointer<ffi.Uint16> lpszName;

  external ffi.Pointer<ffi.Uint16> lpszClass;

  @ffi.Uint64()
  external int dwExStyle;
}

class LPCBT_CREATEWNDW extends ffi.Struct {
  external ffi.Pointer<LPCREATESTRUCTW> lpcs;

  external ffi.Pointer<HWND__> hwndInsertAfter;
}

class LPCBTACTIVATESTRUCT extends ffi.Struct {
  @ffi.Int32()
  external int fMouse;

  external ffi.Pointer<HWND__> hWndActive;
}

class PWTSSESSION_NOTIFICATION extends ffi.Struct {
  @ffi.Uint64()
  external int cbSize;

  @ffi.Uint64()
  external int dwSessionId;
}

class LPSHELLHOOKINFO extends ffi.Opaque {}

class LPEVENTMSGMSG extends ffi.Struct {
  @ffi.Uint32()
  external int message;

  @ffi.Uint32()
  external int paramL;

  @ffi.Uint32()
  external int paramH;

  @ffi.Uint64()
  external int time;

  external ffi.Pointer<HWND__> hwnd;
}

class LPCWPSTRUCT extends ffi.Struct {
  @ffi.Int64()
  external int lParam;

  @ffi.Uint64()
  external int wParam;

  @ffi.Uint32()
  external int message;

  external ffi.Pointer<HWND__> hwnd;
}

class LPCWPRETSTRUCT extends ffi.Struct {
  @ffi.Int64()
  external int lResult;

  @ffi.Int64()
  external int lParam;

  @ffi.Uint64()
  external int wParam;

  @ffi.Uint32()
  external int message;

  external ffi.Pointer<HWND__> hwnd;
}

class PKBDLLHOOKSTRUCT extends ffi.Struct {
  @ffi.Uint64()
  external int vkCode;

  @ffi.Uint64()
  external int scanCode;

  @ffi.Uint64()
  external int flags;

  @ffi.Uint64()
  external int time;

  @ffi.Uint64()
  external int dwExtraInfo;
}

class PMSLLHOOKSTRUCT extends ffi.Opaque {}

class LPDEBUGHOOKINFO extends ffi.Struct {
  @ffi.Uint64()
  external int idThread;

  @ffi.Uint64()
  external int idThreadInstaller;

  @ffi.Int64()
  external int lParam;

  @ffi.Uint64()
  external int wParam;

  @ffi.Int32()
  external int code;
}

class PMOUSEHOOKSTRUCT extends ffi.Opaque {}

class PMOUSEHOOKSTRUCTEX extends ffi.Struct {
  @ffi.Uint64()
  external int mouseData;
}

class PHARDWAREHOOKSTRUCT extends ffi.Struct {
  external ffi.Pointer<HWND__> hwnd;

  @ffi.Uint32()
  external int message;

  @ffi.Uint64()
  external int wParam;

  @ffi.Int64()
  external int lParam;
}

class LPMOUSEMOVEPOINT extends ffi.Struct {
  @ffi.Int32()
  external int x;

  @ffi.Int32()
  external int y;

  @ffi.Uint64()
  external int time;

  @ffi.Uint64()
  external int dwExtraInfo;
}

class PUSEROBJECTFLAGS extends ffi.Struct {
  @ffi.Int32()
  external int fInherit;

  @ffi.Int32()
  external int fReserved;

  @ffi.Uint64()
  external int dwFlags;
}

class LPWNDCLASSEXA extends ffi.Struct {
  @ffi.Uint32()
  external int cbSize;

  @ffi.Uint32()
  external int style;

  external ffi.Pointer<ffi.NativeFunction<WNDPROC>> lpfnWndProc;

  @ffi.Int32()
  external int cbClsExtra;

  @ffi.Int32()
  external int cbWndExtra;

  external ffi.Pointer<HINSTANCE__> hInstance;

  external ffi.Pointer<HICON__> hIcon;

  external ffi.Pointer<HICON__> hCursor;

  external ffi.Pointer<HBRUSH__> hbrBackground;

  external ffi.Pointer<ffi.Int8> lpszMenuName;

  external ffi.Pointer<ffi.Int8> lpszClassName;

  external ffi.Pointer<HICON__> hIconSm;
}

class LPWNDCLASSEXW extends ffi.Struct {
  @ffi.Uint32()
  external int cbSize;

  @ffi.Uint32()
  external int style;

  external ffi.Pointer<ffi.NativeFunction<WNDPROC>> lpfnWndProc;

  @ffi.Int32()
  external int cbClsExtra;

  @ffi.Int32()
  external int cbWndExtra;

  external ffi.Pointer<HINSTANCE__> hInstance;

  external ffi.Pointer<HICON__> hIcon;

  external ffi.Pointer<HICON__> hCursor;

  external ffi.Pointer<HBRUSH__> hbrBackground;

  external ffi.Pointer<ffi.Uint16> lpszMenuName;

  external ffi.Pointer<ffi.Uint16> lpszClassName;

  external ffi.Pointer<HICON__> hIconSm;
}

class LPWNDCLASSA extends ffi.Struct {
  @ffi.Uint32()
  external int style;

  external ffi.Pointer<ffi.NativeFunction<WNDPROC>> lpfnWndProc;

  @ffi.Int32()
  external int cbClsExtra;

  @ffi.Int32()
  external int cbWndExtra;

  external ffi.Pointer<HINSTANCE__> hInstance;

  external ffi.Pointer<HICON__> hIcon;

  external ffi.Pointer<HICON__> hCursor;

  external ffi.Pointer<HBRUSH__> hbrBackground;

  external ffi.Pointer<ffi.Int8> lpszMenuName;

  external ffi.Pointer<ffi.Int8> lpszClassName;
}

class LPWNDCLASSW extends ffi.Struct {
  @ffi.Uint32()
  external int style;

  external ffi.Pointer<ffi.NativeFunction<WNDPROC>> lpfnWndProc;

  @ffi.Int32()
  external int cbClsExtra;

  @ffi.Int32()
  external int cbWndExtra;

  external ffi.Pointer<HINSTANCE__> hInstance;

  external ffi.Pointer<HICON__> hIcon;

  external ffi.Pointer<HICON__> hCursor;

  external ffi.Pointer<HBRUSH__> hbrBackground;

  external ffi.Pointer<ffi.Uint16> lpszMenuName;

  external ffi.Pointer<ffi.Uint16> lpszClassName;
}

class LPMSG extends ffi.Opaque {}

class LPMINMAXINFO extends ffi.Opaque {}

class PCOPYDATASTRUCT extends ffi.Struct {
  @ffi.Uint64()
  external int dwData;

  @ffi.Uint64()
  external int cbData;

  external ffi.Pointer<ffi.Void> lpData;
}

class LPMDINEXTMENU extends ffi.Struct {
  external ffi.Pointer<HMENU__> hmenuIn;

  external ffi.Pointer<HMENU__> hmenuNext;

  external ffi.Pointer<HWND__> hwndNext;
}

class PPOWERBROADCAST_SETTING extends ffi.Opaque {}

class PWINDOWPOS extends ffi.Struct {
  external ffi.Pointer<HWND__> hwnd;

  external ffi.Pointer<HWND__> hwndInsertAfter;

  @ffi.Int32()
  external int x;

  @ffi.Int32()
  external int y;

  @ffi.Int32()
  external int cx;

  @ffi.Int32()
  external int cy;

  @ffi.Uint32()
  external int flags;
}

class LPNCCALCSIZE_PARAMS extends ffi.Opaque {}

class LPTRACKMOUSEEVENT extends ffi.Struct {
  @ffi.Uint64()
  external int cbSize;

  @ffi.Uint64()
  external int dwFlags;

  external ffi.Pointer<HWND__> hwndTrack;

  @ffi.Uint64()
  external int dwHoverTime;
}

class LPACCEL extends ffi.Struct {
  @ffi.Uint8()
  external int fVirt;

  @ffi.Uint16()
  external int key;

  @ffi.Uint16()
  external int cmd;
}

class LPPAINTSTRUCT extends ffi.Opaque {}

class WINDOWPLACEMENT extends ffi.Opaque {}

class NMHDR extends ffi.Struct {
  external ffi.Pointer<HWND__> hwndFrom;

  @ffi.Uint64()
  external int idFrom;

  @ffi.Uint32()
  external int code;
}

class LPSTYLESTRUCT extends ffi.Struct {
  @ffi.Uint64()
  external int styleOld;

  @ffi.Uint64()
  external int styleNew;
}

class LPMEASUREITEMSTRUCT extends ffi.Struct {
  @ffi.Uint32()
  external int CtlType;

  @ffi.Uint32()
  external int CtlID;

  @ffi.Uint32()
  external int itemID;

  @ffi.Uint32()
  external int itemWidth;

  @ffi.Uint32()
  external int itemHeight;

  @ffi.Uint64()
  external int itemData;
}

class LPDRAWITEMSTRUCT extends ffi.Opaque {}

class LPDELETEITEMSTRUCT extends ffi.Struct {
  @ffi.Uint32()
  external int CtlType;

  @ffi.Uint32()
  external int CtlID;

  @ffi.Uint32()
  external int itemID;

  external ffi.Pointer<HWND__> hwndItem;

  @ffi.Uint64()
  external int itemData;
}

class LPCOMPAREITEMSTRUCT extends ffi.Struct {
  @ffi.Uint32()
  external int CtlType;

  @ffi.Uint32()
  external int CtlID;

  external ffi.Pointer<HWND__> hwndItem;

  @ffi.Uint32()
  external int itemID1;

  @ffi.Uint64()
  external int itemData1;

  @ffi.Uint32()
  external int itemID2;

  @ffi.Uint64()
  external int itemData2;

  @ffi.Uint64()
  external int dwLocaleId;
}

class PBSMINFO extends ffi.Opaque {}

class PUPDATELAYEREDWINDOWINFO extends ffi.Struct {
  @ffi.Uint64()
  external int cbSize;

  external ffi.Pointer<HDC__> hdcDst;

  external ffi.Pointer<LPPOINT> pptDst;

  external ffi.Pointer<LPSIZE> psize;

  external ffi.Pointer<HDC__> hdcSrc;

  external ffi.Pointer<LPPOINT> pptSrc;

  @ffi.Uint64()
  external int crKey;

  external ffi.Pointer<PBLENDFUNCTION> pblend;

  @ffi.Uint64()
  external int dwFlags;

  external ffi.Pointer<LPRECT> prcDirty;
}

class PFLASHWINFO extends ffi.Struct {
  @ffi.Uint32()
  external int cbSize;

  external ffi.Pointer<HWND__> hwnd;

  @ffi.Uint64()
  external int dwFlags;

  @ffi.Uint32()
  external int uCount;

  @ffi.Uint64()
  external int dwTimeout;
}

class DLGTEMPLATE extends ffi.Struct {
  @ffi.Uint64()
  external int style;

  @ffi.Uint64()
  external int dwExtendedStyle;

  @ffi.Uint16()
  external int cdit;

  @ffi.Int16()
  external int x;

  @ffi.Int16()
  external int y;

  @ffi.Int16()
  external int cx;

  @ffi.Int16()
  external int cy;
}

class DLGITEMTEMPLATE extends ffi.Struct {
  @ffi.Uint64()
  external int style;

  @ffi.Uint64()
  external int dwExtendedStyle;

  @ffi.Int16()
  external int x;

  @ffi.Int16()
  external int y;

  @ffi.Int16()
  external int cx;

  @ffi.Int16()
  external int cy;

  @ffi.Uint16()
  external int id;
}

abstract class DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS {
  static const int DCDC_DEFAULT = 0;
  static const int DCDC_DISABLE_FONT_UPDATE = 1;
  static const int DCDC_DISABLE_RELAYOUT = 2;
}

abstract class DIALOG_DPI_CHANGE_BEHAVIORS {
  static const int DDC_DEFAULT = 0;
  static const int DDC_DISABLE_ALL = 1;
  static const int DDC_DISABLE_RESIZE = 2;
  static const int DDC_DISABLE_CONTROL_RELAYOUT = 4;
}

class LPMOUSEINPUT extends ffi.Struct {
  @ffi.Int64()
  external int dx;

  @ffi.Int64()
  external int dy;

  @ffi.Uint64()
  external int mouseData;

  @ffi.Uint64()
  external int dwFlags;

  @ffi.Uint64()
  external int time;

  @ffi.Uint64()
  external int dwExtraInfo;
}

class LPKEYBDINPUT extends ffi.Struct {
  @ffi.Uint16()
  external int wVk;

  @ffi.Uint16()
  external int wScan;

  @ffi.Uint64()
  external int dwFlags;

  @ffi.Uint64()
  external int time;

  @ffi.Uint64()
  external int dwExtraInfo;
}

class LPHARDWAREINPUT extends ffi.Struct {
  @ffi.Uint64()
  external int uMsg;

  @ffi.Uint16()
  external int wParamL;

  @ffi.Uint16()
  external int wParamH;
}

class LPINPUT extends ffi.Struct {
  @ffi.Uint64()
  external int type;
}

class HTOUCHINPUT__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

class PTOUCHINPUT extends ffi.Struct {
  @ffi.Int64()
  external int x;

  @ffi.Int64()
  external int y;

  external ffi.Pointer<ffi.Void> hSource;

  @ffi.Uint64()
  external int dwID;

  @ffi.Uint64()
  external int dwFlags;

  @ffi.Uint64()
  external int dwMask;

  @ffi.Uint64()
  external int dwTime;

  @ffi.Uint64()
  external int dwExtraInfo;

  @ffi.Uint64()
  external int cxContact;

  @ffi.Uint64()
  external int cyContact;
}

abstract class tagPOINTER_INPUT_TYPE {
  static const int PT_POINTER = 1;
  static const int PT_TOUCH = 2;
  static const int PT_PEN = 3;
  static const int PT_MOUSE = 4;
  static const int PT_TOUCHPAD = 5;
}

abstract class POINTER_BUTTON_CHANGE_TYPE {
  static const int POINTER_CHANGE_NONE = 0;
  static const int POINTER_CHANGE_FIRSTBUTTON_DOWN = 1;
  static const int POINTER_CHANGE_FIRSTBUTTON_UP = 2;
  static const int POINTER_CHANGE_SECONDBUTTON_DOWN = 3;
  static const int POINTER_CHANGE_SECONDBUTTON_UP = 4;
  static const int POINTER_CHANGE_THIRDBUTTON_DOWN = 5;
  static const int POINTER_CHANGE_THIRDBUTTON_UP = 6;
  static const int POINTER_CHANGE_FOURTHBUTTON_DOWN = 7;
  static const int POINTER_CHANGE_FOURTHBUTTON_UP = 8;
  static const int POINTER_CHANGE_FIFTHBUTTON_DOWN = 9;
  static const int POINTER_CHANGE_FIFTHBUTTON_UP = 10;
}

class POINTER_INFO extends ffi.Opaque {}

class POINTER_TOUCH_INFO extends ffi.Opaque {}

class POINTER_PEN_INFO extends ffi.Opaque {}

abstract class POINTER_FEEDBACK_MODE {
  static const int POINTER_FEEDBACK_DEFAULT = 1;
  static const int POINTER_FEEDBACK_INDIRECT = 2;
  static const int POINTER_FEEDBACK_NONE = 3;
}

class PUSAGE_PROPERTIES extends ffi.Struct {
  @ffi.Uint16()
  external int level;

  @ffi.Uint16()
  external int page;

  @ffi.Uint16()
  external int usage;

  @ffi.Int32()
  external int logicalMinimum;

  @ffi.Int32()
  external int logicalMaximum;

  @ffi.Uint16()
  external int unit;

  @ffi.Uint16()
  external int exponent;

  @ffi.Uint8()
  external int count;

  @ffi.Int32()
  external int physicalMinimum;

  @ffi.Int32()
  external int physicalMaximum;
}

class PPOINTER_TYPE_INFO extends ffi.Struct {
  @ffi.Uint64()
  external int type;
}

class PINPUT_INJECTION_VALUE extends ffi.Struct {
  @ffi.Uint16()
  external int page;

  @ffi.Uint16()
  external int usage;

  @ffi.Int32()
  external int value;

  @ffi.Uint16()
  external int index;
}

class HSYNTHETICPOINTERDEVICE__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

class PTOUCH_HIT_TESTING_PROXIMITY_EVALUATION extends ffi.Opaque {}

class PTOUCH_HIT_TESTING_INPUT extends ffi.Opaque {}

abstract class FEEDBACK_TYPE {
  static const int FEEDBACK_TOUCH_CONTACTVISUALIZATION = 1;
  static const int FEEDBACK_PEN_BARRELVISUALIZATION = 2;
  static const int FEEDBACK_PEN_TAP = 3;
  static const int FEEDBACK_PEN_DOUBLETAP = 4;
  static const int FEEDBACK_PEN_PRESSANDHOLD = 5;
  static const int FEEDBACK_PEN_RIGHTTAP = 6;
  static const int FEEDBACK_TOUCH_TAP = 7;
  static const int FEEDBACK_TOUCH_DOUBLETAP = 8;
  static const int FEEDBACK_TOUCH_PRESSANDHOLD = 9;
  static const int FEEDBACK_TOUCH_RIGHTTAP = 10;
  static const int FEEDBACK_GESTURE_PRESSANDTAP = 11;
  static const int FEEDBACK_MAX = -1;
}

class INPUT_TRANSFORM extends ffi.Opaque {}

class PLASTINPUTINFO extends ffi.Struct {
  @ffi.Uint32()
  external int cbSize;

  @ffi.Uint64()
  external int dwTime;
}

class TPMPARAMS extends ffi.Opaque {}

class LPMENUINFO extends ffi.Struct {
  @ffi.Uint64()
  external int cbSize;

  @ffi.Uint64()
  external int fMask;

  @ffi.Uint64()
  external int dwStyle;

  @ffi.Uint32()
  external int cyMax;

  external ffi.Pointer<HBRUSH__> hbrBack;

  @ffi.Uint64()
  external int dwContextHelpID;

  @ffi.Uint64()
  external int dwMenuData;
}

class PMENUGETOBJECTINFO extends ffi.Struct {
  @ffi.Uint64()
  external int dwFlags;

  @ffi.Uint32()
  external int uPos;

  external ffi.Pointer<HMENU__> hmenu;

  external ffi.Pointer<ffi.Void> riid;

  external ffi.Pointer<ffi.Void> pvObj;
}

class LPMENUITEMINFOA extends ffi.Struct {
  @ffi.Uint32()
  external int cbSize;

  @ffi.Uint32()
  external int fMask;

  @ffi.Uint32()
  external int fType;

  @ffi.Uint32()
  external int fState;

  @ffi.Uint32()
  external int wID;

  external ffi.Pointer<HMENU__> hSubMenu;

  external ffi.Pointer<HBITMAP__> hbmpChecked;

  external ffi.Pointer<HBITMAP__> hbmpUnchecked;

  @ffi.Uint64()
  external int dwItemData;

  external ffi.Pointer<ffi.Int8> dwTypeData;

  @ffi.Uint32()
  external int cch;

  external ffi.Pointer<HBITMAP__> hbmpItem;
}

class LPMENUITEMINFOW extends ffi.Struct {
  @ffi.Uint32()
  external int cbSize;

  @ffi.Uint32()
  external int fMask;

  @ffi.Uint32()
  external int fType;

  @ffi.Uint32()
  external int fState;

  @ffi.Uint32()
  external int wID;

  external ffi.Pointer<HMENU__> hSubMenu;

  external ffi.Pointer<HBITMAP__> hbmpChecked;

  external ffi.Pointer<HBITMAP__> hbmpUnchecked;

  @ffi.Uint64()
  external int dwItemData;

  external ffi.Pointer<ffi.Uint16> dwTypeData;

  @ffi.Uint32()
  external int cch;

  external ffi.Pointer<HBITMAP__> hbmpItem;
}

class LPDROPSTRUCT extends ffi.Opaque {}

class LPDRAWTEXTPARAMS extends ffi.Struct {
  @ffi.Uint32()
  external int cbSize;

  @ffi.Int32()
  external int iTabLength;

  @ffi.Int32()
  external int iLeftMargin;

  @ffi.Int32()
  external int iRightMargin;

  @ffi.Uint32()
  external int uiLengthDrawn;
}

class LPHELPINFO extends ffi.Opaque {}

class LPMSGBOXPARAMSA extends ffi.Struct {
  @ffi.Uint32()
  external int cbSize;

  external ffi.Pointer<HWND__> hwndOwner;

  external ffi.Pointer<HINSTANCE__> hInstance;

  external ffi.Pointer<ffi.Int8> lpszText;

  external ffi.Pointer<ffi.Int8> lpszCaption;

  @ffi.Uint64()
  external int dwStyle;

  external ffi.Pointer<ffi.Int8> lpszIcon;

  @ffi.Uint64()
  external int dwContextHelpId;

  external ffi.Pointer<ffi.NativeFunction<MSGBOXCALLBACK>> lpfnMsgBoxCallback;

  @ffi.Uint64()
  external int dwLanguageId;
}

class LPMSGBOXPARAMSW extends ffi.Struct {
  @ffi.Uint32()
  external int cbSize;

  external ffi.Pointer<HWND__> hwndOwner;

  external ffi.Pointer<HINSTANCE__> hInstance;

  external ffi.Pointer<ffi.Uint16> lpszText;

  external ffi.Pointer<ffi.Uint16> lpszCaption;

  @ffi.Uint64()
  external int dwStyle;

  external ffi.Pointer<ffi.Uint16> lpszIcon;

  @ffi.Uint64()
  external int dwContextHelpId;

  external ffi.Pointer<ffi.NativeFunction<MSGBOXCALLBACK>> lpfnMsgBoxCallback;

  @ffi.Uint64()
  external int dwLanguageId;
}

class PMENUITEMTEMPLATEHEADER extends ffi.Struct {
  @ffi.Uint16()
  external int versionNumber;

  @ffi.Uint16()
  external int offset;
}

class PMENUITEMTEMPLATE extends ffi.Opaque {}

class ICONINFO extends ffi.Struct {
  @ffi.Int32()
  external int fIcon;

  @ffi.Uint64()
  external int xHotspot;

  @ffi.Uint64()
  external int yHotspot;

  external ffi.Pointer<HBITMAP__> hbmMask;

  external ffi.Pointer<HBITMAP__> hbmColor;
}

class LPCURSORSHAPE extends ffi.Struct {
  @ffi.Int32()
  external int xHotSpot;

  @ffi.Int32()
  external int yHotSpot;

  @ffi.Int32()
  external int cx;

  @ffi.Int32()
  external int cy;

  @ffi.Int32()
  external int cbWidth;

  @ffi.Uint8()
  external int Planes;

  @ffi.Uint8()
  external int BitsPixel;
}

class PICONINFOEXA extends ffi.Opaque {}

class PICONINFOEXW extends ffi.Opaque {}

abstract class EDIT_CONTROL_FEATURE {
  static const int
      EDIT_CONTROL_FEATURE_ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT = 0;
  static const int EDIT_CONTROL_FEATURE_PASTE_NOTIFICATIONS = 1;
}

class LPSCROLLINFO extends ffi.Struct {
  @ffi.Uint32()
  external int cbSize;

  @ffi.Uint32()
  external int fMask;

  @ffi.Int32()
  external int nMin;

  @ffi.Int32()
  external int nMax;

  @ffi.Uint32()
  external int nPage;

  @ffi.Int32()
  external int nPos;

  @ffi.Int32()
  external int nTrackPos;
}

class LPMDICREATESTRUCTA extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> szClass;

  external ffi.Pointer<ffi.Int8> szTitle;

  external ffi.Pointer<ffi.Void> hOwner;

  @ffi.Int32()
  external int x;

  @ffi.Int32()
  external int y;

  @ffi.Int32()
  external int cx;

  @ffi.Int32()
  external int cy;

  @ffi.Uint64()
  external int style;

  @ffi.Int64()
  external int lParam;
}

class LPMDICREATESTRUCTW extends ffi.Struct {
  external ffi.Pointer<ffi.Uint16> szClass;

  external ffi.Pointer<ffi.Uint16> szTitle;

  external ffi.Pointer<ffi.Void> hOwner;

  @ffi.Int32()
  external int x;

  @ffi.Int32()
  external int y;

  @ffi.Int32()
  external int cx;

  @ffi.Int32()
  external int cy;

  @ffi.Uint64()
  external int style;

  @ffi.Int64()
  external int lParam;
}

class LPCLIENTCREATESTRUCT extends ffi.Struct {
  external ffi.Pointer<ffi.Void> hWindowMenu;

  @ffi.Uint32()
  external int idFirstChild;
}

class LPMULTIKEYHELPA extends ffi.Opaque {}

class LPMULTIKEYHELPW extends ffi.Opaque {}

class LPHELPWININFOA extends ffi.Opaque {}

class LPHELPWININFOW extends ffi.Opaque {}

class PTOUCHPREDICTIONPARAMETERS extends ffi.Struct {
  @ffi.Uint32()
  external int cbSize;

  @ffi.Uint32()
  external int dwLatency;

  @ffi.Uint32()
  external int dwSampleTime;

  @ffi.Uint32()
  external int bUseHWTimeStamp;
}

abstract class PHANDEDNESS {
  static const int HANDEDNESS_LEFT = 0;
  static const int HANDEDNESS_RIGHT = 1;
}

class LPNONCLIENTMETRICSA extends ffi.Opaque {}

class LPNONCLIENTMETRICSW extends ffi.Opaque {}

class LPMINIMIZEDMETRICS extends ffi.Struct {
  @ffi.Uint32()
  external int cbSize;

  @ffi.Int32()
  external int iWidth;

  @ffi.Int32()
  external int iHorzGap;

  @ffi.Int32()
  external int iVertGap;

  @ffi.Int32()
  external int iArrange;
}

class LPICONMETRICSA extends ffi.Opaque {}

class LPICONMETRICSW extends ffi.Opaque {}

class LPANIMATIONINFO extends ffi.Struct {
  @ffi.Uint32()
  external int cbSize;

  @ffi.Int32()
  external int iMinAnimate;
}

class LPSERIALKEYSA extends ffi.Struct {
  @ffi.Uint32()
  external int cbSize;

  @ffi.Uint64()
  external int dwFlags;

  external ffi.Pointer<ffi.Int8> lpszActivePort;

  external ffi.Pointer<ffi.Int8> lpszPort;

  @ffi.Uint32()
  external int iBaudRate;

  @ffi.Uint32()
  external int iPortState;

  @ffi.Uint32()
  external int iActive;
}

class LPSERIALKEYSW extends ffi.Struct {
  @ffi.Uint32()
  external int cbSize;

  @ffi.Uint64()
  external int dwFlags;

  external ffi.Pointer<ffi.Uint16> lpszActivePort;

  external ffi.Pointer<ffi.Uint16> lpszPort;

  @ffi.Uint32()
  external int iBaudRate;

  @ffi.Uint32()
  external int iPortState;

  @ffi.Uint32()
  external int iActive;
}

class LPHIGHCONTRASTA extends ffi.Struct {
  @ffi.Uint32()
  external int cbSize;

  @ffi.Uint64()
  external int dwFlags;

  external ffi.Pointer<ffi.Int8> lpszDefaultScheme;
}

class LPHIGHCONTRASTW extends ffi.Struct {
  @ffi.Uint32()
  external int cbSize;

  @ffi.Uint64()
  external int dwFlags;

  external ffi.Pointer<ffi.Uint16> lpszDefaultScheme;
}

class LPVIDEOPARAMETERS extends ffi.Opaque {}

class LPFILTERKEYS extends ffi.Struct {
  @ffi.Uint32()
  external int cbSize;

  @ffi.Uint64()
  external int dwFlags;

  @ffi.Uint64()
  external int iWaitMSec;

  @ffi.Uint64()
  external int iDelayMSec;

  @ffi.Uint64()
  external int iRepeatMSec;

  @ffi.Uint64()
  external int iBounceMSec;
}

class LPSTICKYKEYS extends ffi.Struct {
  @ffi.Uint32()
  external int cbSize;

  @ffi.Uint64()
  external int dwFlags;
}

class LPMOUSEKEYS extends ffi.Struct {
  @ffi.Uint32()
  external int cbSize;

  @ffi.Uint64()
  external int dwFlags;

  @ffi.Uint64()
  external int iMaxSpeed;

  @ffi.Uint64()
  external int iTimeToMaxSpeed;

  @ffi.Uint64()
  external int iCtrlSpeed;

  @ffi.Uint64()
  external int dwReserved1;

  @ffi.Uint64()
  external int dwReserved2;
}

class LPACCESSTIMEOUT extends ffi.Struct {
  @ffi.Uint32()
  external int cbSize;

  @ffi.Uint64()
  external int dwFlags;

  @ffi.Uint64()
  external int iTimeOutMSec;
}

class LPSOUNDSENTRYA extends ffi.Struct {
  @ffi.Uint32()
  external int cbSize;

  @ffi.Uint64()
  external int dwFlags;

  @ffi.Uint64()
  external int iFSTextEffect;

  @ffi.Uint64()
  external int iFSTextEffectMSec;

  @ffi.Uint64()
  external int iFSTextEffectColorBits;

  @ffi.Uint64()
  external int iFSGrafEffect;

  @ffi.Uint64()
  external int iFSGrafEffectMSec;

  @ffi.Uint64()
  external int iFSGrafEffectColor;

  @ffi.Uint64()
  external int iWindowsEffect;

  @ffi.Uint64()
  external int iWindowsEffectMSec;

  external ffi.Pointer<ffi.Int8> lpszWindowsEffectDLL;

  @ffi.Uint64()
  external int iWindowsEffectOrdinal;
}

class LPSOUNDSENTRYW extends ffi.Struct {
  @ffi.Uint32()
  external int cbSize;

  @ffi.Uint64()
  external int dwFlags;

  @ffi.Uint64()
  external int iFSTextEffect;

  @ffi.Uint64()
  external int iFSTextEffectMSec;

  @ffi.Uint64()
  external int iFSTextEffectColorBits;

  @ffi.Uint64()
  external int iFSGrafEffect;

  @ffi.Uint64()
  external int iFSGrafEffectMSec;

  @ffi.Uint64()
  external int iFSGrafEffectColor;

  @ffi.Uint64()
  external int iWindowsEffect;

  @ffi.Uint64()
  external int iWindowsEffectMSec;

  external ffi.Pointer<ffi.Uint16> lpszWindowsEffectDLL;

  @ffi.Uint64()
  external int iWindowsEffectOrdinal;
}

class LPTOGGLEKEYS extends ffi.Struct {
  @ffi.Uint32()
  external int cbSize;

  @ffi.Uint64()
  external int dwFlags;
}

class LPAUDIODESCRIPTION extends ffi.Struct {
  @ffi.Uint32()
  external int cbSize;

  @ffi.Int32()
  external int Enabled;

  @ffi.Uint64()
  external int Locale;
}

class LPMONITORINFO extends ffi.Opaque {}

class LPMONITORINFOEXA extends ffi.Opaque {}

class LPMONITORINFOEXW extends ffi.Opaque {}

class LPGUITHREADINFO extends ffi.Opaque {}

class LPCURSORINFO extends ffi.Opaque {}

class LPWINDOWINFO extends ffi.Opaque {}

class LPTITLEBARINFO extends ffi.Opaque {}

class LPTITLEBARINFOEX extends ffi.Opaque {}

class LPMENUBARINFO extends ffi.Opaque {}

class LPSCROLLBARINFO extends ffi.Opaque {}

class LPCOMBOBOXINFO extends ffi.Opaque {}

class LPALTTABINFO extends ffi.Opaque {}

class HRAWINPUT__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

class LPRAWINPUTHEADER extends ffi.Struct {
  @ffi.Uint64()
  external int dwType;

  @ffi.Uint64()
  external int dwSize;

  external ffi.Pointer<ffi.Void> hDevice;

  @ffi.Uint64()
  external int wParam;
}

class LPRAWMOUSE extends ffi.Struct {
  @ffi.Uint16()
  external int usFlags;

  @ffi.Uint64()
  external int ulRawButtons;

  @ffi.Int64()
  external int lLastX;

  @ffi.Int64()
  external int lLastY;

  @ffi.Uint64()
  external int ulExtraInformation;
}

class LPRAWKEYBOARD extends ffi.Struct {
  @ffi.Uint16()
  external int MakeCode;

  @ffi.Uint16()
  external int Flags;

  @ffi.Uint16()
  external int Reserved;

  @ffi.Uint16()
  external int VKey;

  @ffi.Uint32()
  external int Message;

  @ffi.Uint64()
  external int ExtraInformation;
}

class LPRAWHID extends ffi.Opaque {}

class LPRAWINPUT extends ffi.Opaque {}

class PRID_DEVICE_INFO_MOUSE extends ffi.Struct {
  @ffi.Uint64()
  external int dwId;

  @ffi.Uint64()
  external int dwNumberOfButtons;

  @ffi.Uint64()
  external int dwSampleRate;

  @ffi.Int32()
  external int fHasHorizontalWheel;
}

class PRID_DEVICE_INFO_KEYBOARD extends ffi.Struct {
  @ffi.Uint64()
  external int dwType;

  @ffi.Uint64()
  external int dwSubType;

  @ffi.Uint64()
  external int dwKeyboardMode;

  @ffi.Uint64()
  external int dwNumberOfFunctionKeys;

  @ffi.Uint64()
  external int dwNumberOfIndicators;

  @ffi.Uint64()
  external int dwNumberOfKeysTotal;
}

class PRID_DEVICE_INFO_HID extends ffi.Struct {
  @ffi.Uint64()
  external int dwVendorId;

  @ffi.Uint64()
  external int dwProductId;

  @ffi.Uint64()
  external int dwVersionNumber;

  @ffi.Uint16()
  external int usUsagePage;

  @ffi.Uint16()
  external int usUsage;
}

class LPRID_DEVICE_INFO extends ffi.Struct {
  @ffi.Uint64()
  external int cbSize;

  @ffi.Uint64()
  external int dwType;
}

class LPRAWINPUTDEVICE extends ffi.Struct {
  @ffi.Uint16()
  external int usUsagePage;

  @ffi.Uint16()
  external int usUsage;

  @ffi.Uint64()
  external int dwFlags;

  external ffi.Pointer<HWND__> hwndTarget;
}

class PRAWINPUTDEVICELIST extends ffi.Struct {
  external ffi.Pointer<ffi.Void> hDevice;

  @ffi.Uint64()
  external int dwType;
}

abstract class POINTER_DEVICE_TYPE {
  static const int POINTER_DEVICE_TYPE_INTEGRATED_PEN = 1;
  static const int POINTER_DEVICE_TYPE_EXTERNAL_PEN = 2;
  static const int POINTER_DEVICE_TYPE_TOUCH = 3;
  static const int POINTER_DEVICE_TYPE_TOUCH_PAD = 4;
  static const int POINTER_DEVICE_TYPE_MAX = -1;
}

class POINTER_DEVICE_INFO extends ffi.Opaque {}

class POINTER_DEVICE_PROPERTY extends ffi.Struct {
  @ffi.Int32()
  external int logicalMin;

  @ffi.Int32()
  external int logicalMax;

  @ffi.Int32()
  external int physicalMin;

  @ffi.Int32()
  external int physicalMax;

  @ffi.Uint32()
  external int unit;

  @ffi.Uint32()
  external int unitExponent;

  @ffi.Uint16()
  external int usagePageId;

  @ffi.Uint16()
  external int usageId;
}

abstract class POINTER_DEVICE_CURSOR_TYPE {
  static const int POINTER_DEVICE_CURSOR_TYPE_UNKNOWN = 0;
  static const int POINTER_DEVICE_CURSOR_TYPE_TIP = 1;
  static const int POINTER_DEVICE_CURSOR_TYPE_ERASER = 2;
  static const int POINTER_DEVICE_CURSOR_TYPE_MAX = -1;
}

class POINTER_DEVICE_CURSOR_INFO extends ffi.Struct {
  @ffi.Uint32()
  external int cursorId;

  @ffi.Int32()
  external int cursor;
}

class PCHANGEFILTERSTRUCT extends ffi.Struct {
  @ffi.Uint64()
  external int cbSize;

  @ffi.Uint64()
  external int ExtStatus;
}

class HGESTUREINFO__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

class PGESTUREINFO extends ffi.Opaque {}

class PGESTURENOTIFYSTRUCT extends ffi.Opaque {}

class PGESTURECONFIG extends ffi.Struct {
  @ffi.Uint64()
  external int dwID;

  @ffi.Uint64()
  external int dwWant;

  @ffi.Uint64()
  external int dwBlock;
}

abstract class INPUT_MESSAGE_DEVICE_TYPE {
  static const int IMDT_UNAVAILABLE = 0;
  static const int IMDT_KEYBOARD = 1;
  static const int IMDT_MOUSE = 2;
  static const int IMDT_TOUCH = 4;
  static const int IMDT_PEN = 8;
  static const int IMDT_TOUCHPAD = 16;
}

abstract class INPUT_MESSAGE_ORIGIN_ID {
  static const int IMO_UNAVAILABLE = 0;
  static const int IMO_HARDWARE = 1;
  static const int IMO_INJECTED = 2;
  static const int IMO_SYSTEM = 4;
}

class INPUT_MESSAGE_SOURCE extends ffi.Struct {
  @ffi.Int32()
  external int deviceType;

  @ffi.Int32()
  external int originId;
}

abstract class PAR_STATE {
  static const int AR_ENABLED = 0;
  static const int AR_DISABLED = 1;
  static const int AR_SUPPRESSED = 2;
  static const int AR_REMOTESESSION = 4;
  static const int AR_MULTIMON = 8;
  static const int AR_NOSENSOR = 16;
  static const int AR_NOT_SUPPORTED = 32;
  static const int AR_DOCKED = 64;
  static const int AR_LAPTOP = 128;
}

abstract class ORIENTATION_PREFERENCE {
  static const int ORIENTATION_PREFERENCE_NONE = 0;
  static const int ORIENTATION_PREFERENCE_LANDSCAPE = 1;
  static const int ORIENTATION_PREFERENCE_PORTRAIT = 2;
  static const int ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED = 4;
  static const int ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED = 8;
}

class LPCPINFO extends ffi.Opaque {}

class LPCPINFOEXA extends ffi.Opaque {}

class LPCPINFOEXW extends ffi.Opaque {}

class LPNUMBERFMTA extends ffi.Struct {
  @ffi.Uint32()
  external int NumDigits;

  @ffi.Uint32()
  external int LeadingZero;

  @ffi.Uint32()
  external int Grouping;

  external ffi.Pointer<ffi.Int8> lpDecimalSep;

  external ffi.Pointer<ffi.Int8> lpThousandSep;

  @ffi.Uint32()
  external int NegativeOrder;
}

class LPNUMBERFMTW extends ffi.Struct {
  @ffi.Uint32()
  external int NumDigits;

  @ffi.Uint32()
  external int LeadingZero;

  @ffi.Uint32()
  external int Grouping;

  external ffi.Pointer<ffi.Uint16> lpDecimalSep;

  external ffi.Pointer<ffi.Uint16> lpThousandSep;

  @ffi.Uint32()
  external int NegativeOrder;
}

class LPCURRENCYFMTA extends ffi.Struct {
  @ffi.Uint32()
  external int NumDigits;

  @ffi.Uint32()
  external int LeadingZero;

  @ffi.Uint32()
  external int Grouping;

  external ffi.Pointer<ffi.Int8> lpDecimalSep;

  external ffi.Pointer<ffi.Int8> lpThousandSep;

  @ffi.Uint32()
  external int NegativeOrder;

  @ffi.Uint32()
  external int PositiveOrder;

  external ffi.Pointer<ffi.Int8> lpCurrencySymbol;
}

class LPCURRENCYFMTW extends ffi.Struct {
  @ffi.Uint32()
  external int NumDigits;

  @ffi.Uint32()
  external int LeadingZero;

  @ffi.Uint32()
  external int Grouping;

  external ffi.Pointer<ffi.Uint16> lpDecimalSep;

  external ffi.Pointer<ffi.Uint16> lpThousandSep;

  @ffi.Uint32()
  external int NegativeOrder;

  @ffi.Uint32()
  external int PositiveOrder;

  external ffi.Pointer<ffi.Uint16> lpCurrencySymbol;
}

abstract class SYSNLS_FUNCTION {
  static const int COMPARE_STRING = 1;
}

class LPNLSVERSIONINFO extends ffi.Opaque {}

class LPNLSVERSIONINFOEX extends ffi.Opaque {}

abstract class SYSGEOTYPE {
  static const int GEO_NATION = 1;
  static const int GEO_LATITUDE = 2;
  static const int GEO_LONGITUDE = 3;
  static const int GEO_ISO2 = 4;
  static const int GEO_ISO3 = 5;
  static const int GEO_RFC1766 = 6;
  static const int GEO_LCID = 7;
  static const int GEO_FRIENDLYNAME = 8;
  static const int GEO_OFFICIALNAME = 9;
  static const int GEO_TIMEZONES = 10;
  static const int GEO_OFFICIALLANGUAGES = 11;
  static const int GEO_ISO_UN_NUMBER = 12;
  static const int GEO_PARENT = 13;
  static const int GEO_DIALINGCODE = 14;
  static const int GEO_CURRENCYCODE = 15;
  static const int GEO_CURRENCYSYMBOL = 16;
  static const int GEO_NAME = 17;
  static const int GEO_ID = 18;
}

abstract class SYSGEOCLASS {
  static const int GEOCLASS_NATION = 16;
  static const int GEOCLASS_REGION = 14;
  static const int GEOCLASS_ALL = 0;
}

abstract class NORM_FORM {
  static const int NormalizationOther = 0;
  static const int NormalizationC = 1;
  static const int NormalizationD = 2;
  static const int NormalizationKC = 5;
  static const int NormalizationKD = 6;
}

class PFILEMUIINFO extends ffi.Opaque {}

class HSAVEDUILANGUAGES__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

class PCOORD extends ffi.Struct {
  @ffi.Int16()
  external int X;

  @ffi.Int16()
  external int Y;
}

class PSMALL_RECT extends ffi.Struct {
  @ffi.Int16()
  external int Left;

  @ffi.Int16()
  external int Top;

  @ffi.Int16()
  external int Right;

  @ffi.Int16()
  external int Bottom;
}

class PKEY_EVENT_RECORD extends ffi.Opaque {}

class PMOUSE_EVENT_RECORD extends ffi.Opaque {}

class PWINDOW_BUFFER_SIZE_RECORD extends ffi.Opaque {}

class PMENU_EVENT_RECORD extends ffi.Struct {
  @ffi.Uint32()
  external int dwCommandId;
}

class PFOCUS_EVENT_RECORD extends ffi.Struct {
  @ffi.Int32()
  external int bSetFocus;
}

class PINPUT_RECORD extends ffi.Opaque {}

class PCHAR_INFO extends ffi.Opaque {}

class PCONSOLE_FONT_INFO extends ffi.Opaque {}

class PCONSOLE_READCONSOLE_CONTROL extends ffi.Struct {
  @ffi.Uint64()
  external int nLength;

  @ffi.Uint64()
  external int nInitialChars;

  @ffi.Uint64()
  external int dwCtrlWakeupMask;

  @ffi.Uint64()
  external int dwControlKeyState;
}

class PCONSOLE_CURSOR_INFO extends ffi.Struct {
  @ffi.Uint64()
  external int dwSize;

  @ffi.Int32()
  external int bVisible;
}

class PCONSOLE_SCREEN_BUFFER_INFO extends ffi.Opaque {}

class PCONSOLE_SCREEN_BUFFER_INFOEX extends ffi.Opaque {}

class PCONSOLE_FONT_INFOEX extends ffi.Opaque {}

class PCONSOLE_SELECTION_INFO extends ffi.Opaque {}

class PCONSOLE_HISTORY_INFO extends ffi.Struct {
  @ffi.Uint32()
  external int cbSize;

  @ffi.Uint32()
  external int HistoryBufferSize;

  @ffi.Uint32()
  external int NumberOfHistoryBuffers;

  @ffi.Uint64()
  external int dwFlags;
}

class VS_FIXEDFILEINFO extends ffi.Struct {
  @ffi.Uint64()
  external int dwSignature;

  @ffi.Uint64()
  external int dwStrucVersion;

  @ffi.Uint64()
  external int dwFileVersionMS;

  @ffi.Uint64()
  external int dwFileVersionLS;

  @ffi.Uint64()
  external int dwProductVersionMS;

  @ffi.Uint64()
  external int dwProductVersionLS;

  @ffi.Uint64()
  external int dwFileFlagsMask;

  @ffi.Uint64()
  external int dwFileFlags;

  @ffi.Uint64()
  external int dwFileOS;

  @ffi.Uint64()
  external int dwFileType;

  @ffi.Uint64()
  external int dwFileSubtype;

  @ffi.Uint64()
  external int dwFileDateMS;

  @ffi.Uint64()
  external int dwFileDateLS;
}

class val_context extends ffi.Struct {
  @ffi.Int32()
  external int valuelen;

  external ffi.Pointer<ffi.Void> value_context;

  external ffi.Pointer<ffi.Void> val_buff_ptr;
}

class PPVALUEA extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> pv_valuename;

  @ffi.Int32()
  external int pv_valuelen;

  external ffi.Pointer<ffi.Void> pv_value_context;

  @ffi.Uint64()
  external int pv_type;
}

class PPVALUEW extends ffi.Struct {
  external ffi.Pointer<ffi.Uint16> pv_valuename;

  @ffi.Int32()
  external int pv_valuelen;

  external ffi.Pointer<ffi.Void> pv_value_context;

  @ffi.Uint64()
  external int pv_type;
}

class REG_PROVIDER extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<PQUERYHANDLER>> pi_R0_1val;

  external ffi.Pointer<ffi.NativeFunction<PQUERYHANDLER>> pi_R0_allvals;

  external ffi.Pointer<ffi.NativeFunction<PQUERYHANDLER>> pi_R3_1val;

  external ffi.Pointer<ffi.NativeFunction<PQUERYHANDLER>> pi_R3_allvals;

  @ffi.Uint64()
  external int pi_flags;

  external ffi.Pointer<ffi.Void> pi_key_context;
}

class PVALENTA extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> ve_valuename;

  @ffi.Uint64()
  external int ve_valuelen;

  @ffi.Uint64()
  external int ve_valueptr;

  @ffi.Uint64()
  external int ve_type;
}

class PVALENTW extends ffi.Struct {
  external ffi.Pointer<ffi.Uint16> ve_valuename;

  @ffi.Uint64()
  external int ve_valuelen;

  @ffi.Uint64()
  external int ve_valueptr;

  @ffi.Uint64()
  external int ve_type;
}

class LPNETRESOURCEA extends ffi.Struct {
  @ffi.Uint64()
  external int dwScope;

  @ffi.Uint64()
  external int dwType;

  @ffi.Uint64()
  external int dwDisplayType;

  @ffi.Uint64()
  external int dwUsage;

  external ffi.Pointer<ffi.Int8> lpLocalName;

  external ffi.Pointer<ffi.Int8> lpRemoteName;

  external ffi.Pointer<ffi.Int8> lpComment;

  external ffi.Pointer<ffi.Int8> lpProvider;
}

class LPNETRESOURCEW extends ffi.Struct {
  @ffi.Uint64()
  external int dwScope;

  @ffi.Uint64()
  external int dwType;

  @ffi.Uint64()
  external int dwDisplayType;

  @ffi.Uint64()
  external int dwUsage;

  external ffi.Pointer<ffi.Uint16> lpLocalName;

  external ffi.Pointer<ffi.Uint16> lpRemoteName;

  external ffi.Pointer<ffi.Uint16> lpComment;

  external ffi.Pointer<ffi.Uint16> lpProvider;
}

class LPCONNECTDLGSTRUCTA extends ffi.Struct {
  @ffi.Uint64()
  external int cbStructure;

  external ffi.Pointer<HWND__> hwndOwner;

  external ffi.Pointer<LPNETRESOURCEA> lpConnRes;

  @ffi.Uint64()
  external int dwFlags;

  @ffi.Uint64()
  external int dwDevNum;
}

class LPCONNECTDLGSTRUCTW extends ffi.Struct {
  @ffi.Uint64()
  external int cbStructure;

  external ffi.Pointer<HWND__> hwndOwner;

  external ffi.Pointer<LPNETRESOURCEW> lpConnRes;

  @ffi.Uint64()
  external int dwFlags;

  @ffi.Uint64()
  external int dwDevNum;
}

class LPDISCDLGSTRUCTA extends ffi.Struct {
  @ffi.Uint64()
  external int cbStructure;

  external ffi.Pointer<HWND__> hwndOwner;

  external ffi.Pointer<ffi.Int8> lpLocalName;

  external ffi.Pointer<ffi.Int8> lpRemoteName;

  @ffi.Uint64()
  external int dwFlags;
}

class LPDISCDLGSTRUCTW extends ffi.Struct {
  @ffi.Uint64()
  external int cbStructure;

  external ffi.Pointer<HWND__> hwndOwner;

  external ffi.Pointer<ffi.Uint16> lpLocalName;

  external ffi.Pointer<ffi.Uint16> lpRemoteName;

  @ffi.Uint64()
  external int dwFlags;
}

class LPUNIVERSAL_NAME_INFOA extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> lpUniversalName;
}

class LPUNIVERSAL_NAME_INFOW extends ffi.Struct {
  external ffi.Pointer<ffi.Uint16> lpUniversalName;
}

class LPREMOTE_NAME_INFOA extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> lpUniversalName;

  external ffi.Pointer<ffi.Int8> lpConnectionName;

  external ffi.Pointer<ffi.Int8> lpRemainingPath;
}

class LPREMOTE_NAME_INFOW extends ffi.Struct {
  external ffi.Pointer<ffi.Uint16> lpUniversalName;

  external ffi.Pointer<ffi.Uint16> lpConnectionName;

  external ffi.Pointer<ffi.Uint16> lpRemainingPath;
}

class LPNETINFOSTRUCT extends ffi.Struct {
  @ffi.Uint64()
  external int cbStructure;

  @ffi.Uint64()
  external int dwProviderVersion;

  @ffi.Uint64()
  external int dwStatus;

  @ffi.Uint64()
  external int dwCharacteristics;

  @ffi.Uint64()
  external int dwHandle;

  @ffi.Uint16()
  external int wNetType;

  @ffi.Uint64()
  external int dwPrinters;

  @ffi.Uint64()
  external int dwDrives;
}

class LPNETCONNECTINFOSTRUCT extends ffi.Struct {
  @ffi.Uint64()
  external int cbStructure;

  @ffi.Uint64()
  external int dwFlags;

  @ffi.Uint64()
  external int dwSpeed;

  @ffi.Uint64()
  external int dwDelay;

  @ffi.Uint64()
  external int dwOptDataSize;
}

class SERVICE_TRIGGER_CUSTOM_STATE_ID extends ffi.Opaque {}

class LPSERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM extends ffi.Opaque {}

class LPSERVICE_DESCRIPTIONA extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> lpDescription;
}

class LPSERVICE_DESCRIPTIONW extends ffi.Struct {
  external ffi.Pointer<ffi.Uint16> lpDescription;
}

abstract class SC_ACTION_TYPE {
  static const int SC_ACTION_NONE = 0;
  static const int SC_ACTION_RESTART = 1;
  static const int SC_ACTION_REBOOT = 2;
  static const int SC_ACTION_RUN_COMMAND = 3;
  static const int SC_ACTION_OWN_RESTART = 4;
}

class LPSC_ACTION extends ffi.Struct {
  @ffi.Int32()
  external int Type;

  @ffi.Uint64()
  external int Delay;
}

class LPSERVICE_FAILURE_ACTIONSA extends ffi.Struct {
  @ffi.Uint64()
  external int dwResetPeriod;

  external ffi.Pointer<ffi.Int8> lpRebootMsg;

  external ffi.Pointer<ffi.Int8> lpCommand;

  @ffi.Uint64()
  external int cActions;

  external ffi.Pointer<LPSC_ACTION> lpsaActions;
}

class LPSERVICE_FAILURE_ACTIONSW extends ffi.Struct {
  @ffi.Uint64()
  external int dwResetPeriod;

  external ffi.Pointer<ffi.Uint16> lpRebootMsg;

  external ffi.Pointer<ffi.Uint16> lpCommand;

  @ffi.Uint64()
  external int cActions;

  external ffi.Pointer<LPSC_ACTION> lpsaActions;
}

class LPSERVICE_DELAYED_AUTO_START_INFO extends ffi.Struct {
  @ffi.Int32()
  external int fDelayedAutostart;
}

class LPSERVICE_FAILURE_ACTIONS_FLAG extends ffi.Struct {
  @ffi.Int32()
  external int fFailureActionsOnNonCrashFailures;
}

class LPSERVICE_SID_INFO extends ffi.Struct {
  @ffi.Uint64()
  external int dwServiceSidType;
}

class LPSERVICE_REQUIRED_PRIVILEGES_INFOA extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> pmszRequiredPrivileges;
}

class LPSERVICE_REQUIRED_PRIVILEGES_INFOW extends ffi.Struct {
  external ffi.Pointer<ffi.Uint16> pmszRequiredPrivileges;
}

class LPSERVICE_PRESHUTDOWN_INFO extends ffi.Struct {
  @ffi.Uint64()
  external int dwPreshutdownTimeout;
}

class PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM extends ffi.Struct {
  @ffi.Uint64()
  external int dwDataType;

  @ffi.Uint64()
  external int cbData;

  external ffi.Pointer<ffi.Uint8> pData;
}

class PSERVICE_TRIGGER extends ffi.Struct {
  @ffi.Uint64()
  external int dwTriggerType;

  @ffi.Uint64()
  external int dwAction;

  external ffi.Pointer<GUID> pTriggerSubtype;

  @ffi.Uint64()
  external int cDataItems;

  external ffi.Pointer<PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM> pDataItems;
}

class PSERVICE_TRIGGER_INFO extends ffi.Struct {
  @ffi.Uint64()
  external int cTriggers;

  external ffi.Pointer<PSERVICE_TRIGGER> pTriggers;

  external ffi.Pointer<ffi.Uint8> pReserved;
}

class LPSERVICE_PREFERRED_NODE_INFO extends ffi.Struct {
  @ffi.Uint16()
  external int usPreferredNode;

  @ffi.Uint8()
  external int fDelete;
}

class PSERVICE_TIMECHANGE_INFO extends ffi.Opaque {}

class PSERVICE_LAUNCH_PROTECTED_INFO extends ffi.Struct {
  @ffi.Uint64()
  external int dwLaunchProtected;
}

class SC_HANDLE__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

class SERVICE_STATUS_HANDLE__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

abstract class SC_STATUS_TYPE {
  static const int SC_STATUS_PROCESS_INFO = 0;
}

abstract class SC_ENUM_TYPE {
  static const int SC_ENUM_PROCESS_INFO = 0;
}

class LPSERVICE_STATUS extends ffi.Struct {
  @ffi.Uint64()
  external int dwServiceType;

  @ffi.Uint64()
  external int dwCurrentState;

  @ffi.Uint64()
  external int dwControlsAccepted;

  @ffi.Uint64()
  external int dwWin32ExitCode;

  @ffi.Uint64()
  external int dwServiceSpecificExitCode;

  @ffi.Uint64()
  external int dwCheckPoint;

  @ffi.Uint64()
  external int dwWaitHint;
}

class LPSERVICE_STATUS_PROCESS extends ffi.Struct {
  @ffi.Uint64()
  external int dwServiceType;

  @ffi.Uint64()
  external int dwCurrentState;

  @ffi.Uint64()
  external int dwControlsAccepted;

  @ffi.Uint64()
  external int dwWin32ExitCode;

  @ffi.Uint64()
  external int dwServiceSpecificExitCode;

  @ffi.Uint64()
  external int dwCheckPoint;

  @ffi.Uint64()
  external int dwWaitHint;

  @ffi.Uint64()
  external int dwProcessId;

  @ffi.Uint64()
  external int dwServiceFlags;
}

class LPENUM_SERVICE_STATUSA extends ffi.Opaque {}

class LPENUM_SERVICE_STATUSW extends ffi.Opaque {}

class LPENUM_SERVICE_STATUS_PROCESSA extends ffi.Opaque {}

class LPENUM_SERVICE_STATUS_PROCESSW extends ffi.Opaque {}

class LPQUERY_SERVICE_LOCK_STATUSA extends ffi.Struct {
  @ffi.Uint64()
  external int fIsLocked;

  external ffi.Pointer<ffi.Int8> lpLockOwner;

  @ffi.Uint64()
  external int dwLockDuration;
}

class LPQUERY_SERVICE_LOCK_STATUSW extends ffi.Struct {
  @ffi.Uint64()
  external int fIsLocked;

  external ffi.Pointer<ffi.Uint16> lpLockOwner;

  @ffi.Uint64()
  external int dwLockDuration;
}

class LPQUERY_SERVICE_CONFIGA extends ffi.Struct {
  @ffi.Uint64()
  external int dwServiceType;

  @ffi.Uint64()
  external int dwStartType;

  @ffi.Uint64()
  external int dwErrorControl;

  external ffi.Pointer<ffi.Int8> lpBinaryPathName;

  external ffi.Pointer<ffi.Int8> lpLoadOrderGroup;

  @ffi.Uint64()
  external int dwTagId;

  external ffi.Pointer<ffi.Int8> lpDependencies;

  external ffi.Pointer<ffi.Int8> lpServiceStartName;

  external ffi.Pointer<ffi.Int8> lpDisplayName;
}

class LPQUERY_SERVICE_CONFIGW extends ffi.Struct {
  @ffi.Uint64()
  external int dwServiceType;

  @ffi.Uint64()
  external int dwStartType;

  @ffi.Uint64()
  external int dwErrorControl;

  external ffi.Pointer<ffi.Uint16> lpBinaryPathName;

  external ffi.Pointer<ffi.Uint16> lpLoadOrderGroup;

  @ffi.Uint64()
  external int dwTagId;

  external ffi.Pointer<ffi.Uint16> lpDependencies;

  external ffi.Pointer<ffi.Uint16> lpServiceStartName;

  external ffi.Pointer<ffi.Uint16> lpDisplayName;
}

class LPSERVICE_TABLE_ENTRYA extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> lpServiceName;

  external ffi.Pointer<ffi.NativeFunction<LPSERVICE_MAIN_FUNCTIONA>>
      lpServiceProc;
}

class LPSERVICE_TABLE_ENTRYW extends ffi.Struct {
  external ffi.Pointer<ffi.Uint16> lpServiceName;

  external ffi.Pointer<ffi.NativeFunction<LPSERVICE_MAIN_FUNCTIONW>>
      lpServiceProc;
}

class PSERVICE_NOTIFY_1 extends ffi.Opaque {}

class PSERVICE_NOTIFY_2A extends ffi.Opaque {}

class PSERVICE_NOTIFY_2W extends ffi.Opaque {}

class PSERVICE_CONTROL_STATUS_REASON_PARAMSA extends ffi.Opaque {}

class PSERVICE_CONTROL_STATUS_REASON_PARAMSW extends ffi.Opaque {}

class PSERVICE_START_REASON extends ffi.Struct {
  @ffi.Uint64()
  external int dwReason;
}

abstract class PSC_EVENT_TYPE {
  static const int SC_EVENT_DATABASE_CHANGE = 0;
  static const int SC_EVENT_PROPERTY_CHANGE = 1;
  static const int SC_EVENT_STATUS_CHANGE = 2;
}

class _SC_NOTIFICATION_REGISTRATION extends ffi.Opaque {}

abstract class SERVICE_REGISTRY_STATE_TYPE {
  static const int ServiceRegistryStateParameters = 0;
  static const int ServiceRegistryStatePersistent = 1;
  static const int MaxServiceRegistryStateType = 2;
}

abstract class SERVICE_DIRECTORY_TYPE {
  static const int ServiceDirectoryPersistentState = 0;
  static const int ServiceDirectoryTypeMax = 1;
}

class LPMODEMDEVCAPS extends ffi.Opaque {}

class LPMODEMSETTINGS extends ffi.Opaque {}

class HIMC__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

class HIMCC__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

class LPCOMPOSITIONFORM extends ffi.Opaque {}

class LPCANDIDATEFORM extends ffi.Opaque {}

class LPCANDIDATELIST extends ffi.Opaque {}

class LPREGISTERWORDA extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> lpReading;

  external ffi.Pointer<ffi.Int8> lpWord;
}

class LPREGISTERWORDW extends ffi.Struct {
  external ffi.Pointer<ffi.Uint16> lpReading;

  external ffi.Pointer<ffi.Uint16> lpWord;
}

class LPRECONVERTSTRING extends ffi.Struct {
  @ffi.Uint64()
  external int dwSize;

  @ffi.Uint64()
  external int dwVersion;

  @ffi.Uint64()
  external int dwStrLen;

  @ffi.Uint64()
  external int dwStrOffset;

  @ffi.Uint64()
  external int dwCompStrLen;

  @ffi.Uint64()
  external int dwCompStrOffset;

  @ffi.Uint64()
  external int dwTargetStrLen;

  @ffi.Uint64()
  external int dwTargetStrOffset;
}

class LPSTYLEBUFA extends ffi.Opaque {}

class LPSTYLEBUFW extends ffi.Opaque {}

class LPIMEMENUITEMINFOA extends ffi.Opaque {}

class LPIMEMENUITEMINFOW extends ffi.Opaque {}

class LPIMECHARPOSITION extends ffi.Opaque {}

class _CrtMemBlockHeader extends ffi.Opaque {}

class _CrtMemState extends ffi.Opaque {}

class _exception extends ffi.Struct {
  @ffi.Int32()
  external int type;

  external ffi.Pointer<ffi.Int8> name;

  @ffi.Double()
  external double arg1;

  @ffi.Double()
  external double arg2;

  @ffi.Double()
  external double retval;
}

class _complex extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;
}

class div_t extends ffi.Struct {
  @ffi.Int32()
  external int quot;

  @ffi.Int32()
  external int rem;
}

class ldiv_t extends ffi.Struct {
  @ffi.Int64()
  external int quot;

  @ffi.Int64()
  external int rem;
}

class lldiv_t extends ffi.Struct {
  @ffi.Int64()
  external int quot;

  @ffi.Int64()
  external int rem;
}

class _LDOUBLE extends ffi.Opaque {}

class _CRT_DOUBLE extends ffi.Struct {
  @ffi.Double()
  external double x;
}

class _CRT_FLOAT extends ffi.Struct {
  @ffi.Float()
  external double f;
}

class _LONGDOUBLE extends ffi.Opaque {}

class _LDBL12 extends ffi.Opaque {}

const int __egl_h_ = 1;

const int EGL_VERSION_1_0 = 1;

const int EGL_ALPHA_SIZE = 12321;

const int EGL_BAD_ACCESS = 12290;

const int EGL_BAD_ALLOC = 12291;

const int EGL_BAD_ATTRIBUTE = 12292;

const int EGL_BAD_CONFIG = 12293;

const int EGL_BAD_CONTEXT = 12294;

const int EGL_BAD_CURRENT_SURFACE = 12295;

const int EGL_BAD_DISPLAY = 12296;

const int EGL_BAD_MATCH = 12297;

const int EGL_BAD_NATIVE_PIXMAP = 12298;

const int EGL_BAD_NATIVE_WINDOW = 12299;

const int EGL_BAD_PARAMETER = 12300;

const int EGL_BAD_SURFACE = 12301;

const int EGL_BLUE_SIZE = 12322;

const int EGL_BUFFER_SIZE = 12320;

const int EGL_CONFIG_CAVEAT = 12327;

const int EGL_CONFIG_ID = 12328;

const int EGL_CORE_NATIVE_ENGINE = 12379;

const int EGL_DEPTH_SIZE = 12325;

const int EGL_DRAW = 12377;

const int EGL_EXTENSIONS = 12373;

const int EGL_FALSE = 0;

const int EGL_GREEN_SIZE = 12323;

const int EGL_HEIGHT = 12374;

const int EGL_LARGEST_PBUFFER = 12376;

const int EGL_LEVEL = 12329;

const int EGL_MAX_PBUFFER_HEIGHT = 12330;

const int EGL_MAX_PBUFFER_PIXELS = 12331;

const int EGL_MAX_PBUFFER_WIDTH = 12332;

const int EGL_NATIVE_RENDERABLE = 12333;

const int EGL_NATIVE_VISUAL_ID = 12334;

const int EGL_NATIVE_VISUAL_TYPE = 12335;

const int EGL_NONE = 12344;

const int EGL_NON_CONFORMANT_CONFIG = 12369;

const int EGL_NOT_INITIALIZED = 12289;

const int EGL_PBUFFER_BIT = 1;

const int EGL_PIXMAP_BIT = 2;

const int EGL_READ = 12378;

const int EGL_RED_SIZE = 12324;

const int EGL_SAMPLES = 12337;

const int EGL_SAMPLE_BUFFERS = 12338;

const int EGL_SLOW_CONFIG = 12368;

const int EGL_STENCIL_SIZE = 12326;

const int EGL_SUCCESS = 12288;

const int EGL_SURFACE_TYPE = 12339;

const int EGL_TRANSPARENT_BLUE_VALUE = 12341;

const int EGL_TRANSPARENT_GREEN_VALUE = 12342;

const int EGL_TRANSPARENT_RED_VALUE = 12343;

const int EGL_TRANSPARENT_RGB = 12370;

const int EGL_TRANSPARENT_TYPE = 12340;

const int EGL_TRUE = 1;

const int EGL_VENDOR = 12371;

const int EGL_VERSION = 12372;

const int EGL_WIDTH = 12375;

const int EGL_WINDOW_BIT = 4;

const int EGL_VERSION_1_1 = 1;

const int EGL_BACK_BUFFER = 12420;

const int EGL_BIND_TO_TEXTURE_RGB = 12345;

const int EGL_BIND_TO_TEXTURE_RGBA = 12346;

const int EGL_CONTEXT_LOST = 12302;

const int EGL_MIN_SWAP_INTERVAL = 12347;

const int EGL_MAX_SWAP_INTERVAL = 12348;

const int EGL_MIPMAP_TEXTURE = 12418;

const int EGL_MIPMAP_LEVEL = 12419;

const int EGL_NO_TEXTURE = 12380;

const int EGL_TEXTURE_2D = 12383;

const int EGL_TEXTURE_FORMAT = 12416;

const int EGL_TEXTURE_RGB = 12381;

const int EGL_TEXTURE_RGBA = 12382;

const int EGL_TEXTURE_TARGET = 12417;

const int EGL_VERSION_1_2 = 1;

const int EGL_ALPHA_FORMAT = 12424;

const int EGL_ALPHA_FORMAT_NONPRE = 12427;

const int EGL_ALPHA_FORMAT_PRE = 12428;

const int EGL_ALPHA_MASK_SIZE = 12350;

const int EGL_BUFFER_PRESERVED = 12436;

const int EGL_BUFFER_DESTROYED = 12437;

const int EGL_CLIENT_APIS = 12429;

const int EGL_COLORSPACE = 12423;

const int EGL_COLORSPACE_sRGB = 12425;

const int EGL_COLORSPACE_LINEAR = 12426;

const int EGL_COLOR_BUFFER_TYPE = 12351;

const int EGL_CONTEXT_CLIENT_TYPE = 12439;

const int EGL_DISPLAY_SCALING = 10000;

const int EGL_HORIZONTAL_RESOLUTION = 12432;

const int EGL_LUMINANCE_BUFFER = 12431;

const int EGL_LUMINANCE_SIZE = 12349;

const int EGL_OPENGL_ES_BIT = 1;

const int EGL_OPENVG_BIT = 2;

const int EGL_OPENGL_ES_API = 12448;

const int EGL_OPENVG_API = 12449;

const int EGL_OPENVG_IMAGE = 12438;

const int EGL_PIXEL_ASPECT_RATIO = 12434;

const int EGL_RENDERABLE_TYPE = 12352;

const int EGL_RENDER_BUFFER = 12422;

const int EGL_RGB_BUFFER = 12430;

const int EGL_SINGLE_BUFFER = 12421;

const int EGL_SWAP_BEHAVIOR = 12435;

const int EGL_VERTICAL_RESOLUTION = 12433;

const int EGL_VERSION_1_3 = 1;

const int EGL_CONFORMANT = 12354;

const int EGL_CONTEXT_CLIENT_VERSION = 12440;

const int EGL_MATCH_NATIVE_PIXMAP = 12353;

const int EGL_OPENGL_ES2_BIT = 4;

const int EGL_VG_ALPHA_FORMAT = 12424;

const int EGL_VG_ALPHA_FORMAT_NONPRE = 12427;

const int EGL_VG_ALPHA_FORMAT_PRE = 12428;

const int EGL_VG_ALPHA_FORMAT_PRE_BIT = 64;

const int EGL_VG_COLORSPACE = 12423;

const int EGL_VG_COLORSPACE_sRGB = 12425;

const int EGL_VG_COLORSPACE_LINEAR = 12426;

const int EGL_VG_COLORSPACE_LINEAR_BIT = 32;

const int EGL_VERSION_1_4 = 1;

const int EGL_MULTISAMPLE_RESOLVE_BOX_BIT = 512;

const int EGL_MULTISAMPLE_RESOLVE = 12441;

const int EGL_MULTISAMPLE_RESOLVE_DEFAULT = 12442;

const int EGL_MULTISAMPLE_RESOLVE_BOX = 12443;

const int EGL_OPENGL_API = 12450;

const int EGL_OPENGL_BIT = 8;

const int EGL_SWAP_BEHAVIOR_PRESERVED_BIT = 1024;

const int EGL_VERSION_1_5 = 1;

const int EGL_CONTEXT_MAJOR_VERSION = 12440;

const int EGL_CONTEXT_MINOR_VERSION = 12539;

const int EGL_CONTEXT_OPENGL_PROFILE_MASK = 12541;

const int EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY = 12733;

const int EGL_NO_RESET_NOTIFICATION = 12734;

const int EGL_LOSE_CONTEXT_ON_RESET = 12735;

const int EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT = 1;

const int EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT = 2;

const int EGL_CONTEXT_OPENGL_DEBUG = 12720;

const int EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE = 12721;

const int EGL_CONTEXT_OPENGL_ROBUST_ACCESS = 12722;

const int EGL_OPENGL_ES3_BIT = 64;

const int EGL_CL_EVENT_HANDLE = 12444;

const int EGL_SYNC_CL_EVENT = 12542;

const int EGL_SYNC_CL_EVENT_COMPLETE = 12543;

const int EGL_SYNC_PRIOR_COMMANDS_COMPLETE = 12528;

const int EGL_SYNC_TYPE = 12535;

const int EGL_SYNC_STATUS = 12529;

const int EGL_SYNC_CONDITION = 12536;

const int EGL_SIGNALED = 12530;

const int EGL_UNSIGNALED = 12531;

const int EGL_SYNC_FLUSH_COMMANDS_BIT = 1;

const int EGL_FOREVER = -1;

const int EGL_TIMEOUT_EXPIRED = 12533;

const int EGL_CONDITION_SATISFIED = 12534;

const int EGL_SYNC_FENCE = 12537;

const int EGL_GL_COLORSPACE = 12445;

const int EGL_GL_COLORSPACE_SRGB = 12425;

const int EGL_GL_COLORSPACE_LINEAR = 12426;

const int EGL_GL_RENDERBUFFER = 12473;

const int EGL_GL_TEXTURE_2D = 12465;

const int EGL_GL_TEXTURE_LEVEL = 12476;

const int EGL_GL_TEXTURE_3D = 12466;

const int EGL_GL_TEXTURE_ZOFFSET = 12477;

const int EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X = 12467;

const int EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 12468;

const int EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 12469;

const int EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 12470;

const int EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 12471;

const int EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 12472;

const int EGL_IMAGE_PRESERVED = 12498;

const int __eglext_h_ = 1;

const int EGL_EGLEXT_VERSION = 20181204;

const int EGL_KHR_cl_event = 1;

const int EGL_CL_EVENT_HANDLE_KHR = 12444;

const int EGL_SYNC_CL_EVENT_KHR = 12542;

const int EGL_SYNC_CL_EVENT_COMPLETE_KHR = 12543;

const int EGL_KHR_cl_event2 = 1;

const int EGL_KHR_client_get_all_proc_addresses = 1;

const int EGL_KHR_config_attribs = 1;

const int EGL_CONFORMANT_KHR = 12354;

const int EGL_VG_COLORSPACE_LINEAR_BIT_KHR = 32;

const int EGL_VG_ALPHA_FORMAT_PRE_BIT_KHR = 64;

const int EGL_KHR_context_flush_control = 1;

const int EGL_CONTEXT_RELEASE_BEHAVIOR_NONE_KHR = 0;

const int EGL_CONTEXT_RELEASE_BEHAVIOR_KHR = 8343;

const int EGL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR = 8344;

const int EGL_KHR_create_context = 1;

const int EGL_CONTEXT_MAJOR_VERSION_KHR = 12440;

const int EGL_CONTEXT_MINOR_VERSION_KHR = 12539;

const int EGL_CONTEXT_FLAGS_KHR = 12540;

const int EGL_CONTEXT_OPENGL_PROFILE_MASK_KHR = 12541;

const int EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_KHR = 12733;

const int EGL_NO_RESET_NOTIFICATION_KHR = 12734;

const int EGL_LOSE_CONTEXT_ON_RESET_KHR = 12735;

const int EGL_CONTEXT_OPENGL_DEBUG_BIT_KHR = 1;

const int EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE_BIT_KHR = 2;

const int EGL_CONTEXT_OPENGL_ROBUST_ACCESS_BIT_KHR = 4;

const int EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT_KHR = 1;

const int EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT_KHR = 2;

const int EGL_OPENGL_ES3_BIT_KHR = 64;

const int EGL_KHR_create_context_no_error = 1;

const int EGL_CONTEXT_OPENGL_NO_ERROR_KHR = 12723;

const int EGL_KHR_debug = 1;

const int EGL_OBJECT_THREAD_KHR = 13232;

const int EGL_OBJECT_DISPLAY_KHR = 13233;

const int EGL_OBJECT_CONTEXT_KHR = 13234;

const int EGL_OBJECT_SURFACE_KHR = 13235;

const int EGL_OBJECT_IMAGE_KHR = 13236;

const int EGL_OBJECT_SYNC_KHR = 13237;

const int EGL_OBJECT_STREAM_KHR = 13238;

const int EGL_DEBUG_MSG_CRITICAL_KHR = 13241;

const int EGL_DEBUG_MSG_ERROR_KHR = 13242;

const int EGL_DEBUG_MSG_WARN_KHR = 13243;

const int EGL_DEBUG_MSG_INFO_KHR = 13244;

const int EGL_DEBUG_CALLBACK_KHR = 13240;

const int EGL_KHR_display_reference = 1;

const int EGL_TRACK_REFERENCES_KHR = 13138;

const int EGL_KHR_fence_sync = 1;

const int EGL_KHR_get_all_proc_addresses = 1;

const int EGL_KHR_gl_colorspace = 1;

const int EGL_GL_COLORSPACE_KHR = 12445;

const int EGL_GL_COLORSPACE_SRGB_KHR = 12425;

const int EGL_GL_COLORSPACE_LINEAR_KHR = 12426;

const int EGL_KHR_gl_renderbuffer_image = 1;

const int EGL_GL_RENDERBUFFER_KHR = 12473;

const int EGL_KHR_gl_texture_2D_image = 1;

const int EGL_GL_TEXTURE_2D_KHR = 12465;

const int EGL_GL_TEXTURE_LEVEL_KHR = 12476;

const int EGL_KHR_gl_texture_3D_image = 1;

const int EGL_GL_TEXTURE_3D_KHR = 12466;

const int EGL_GL_TEXTURE_ZOFFSET_KHR = 12477;

const int EGL_KHR_gl_texture_cubemap_image = 1;

const int EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X_KHR = 12467;

const int EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X_KHR = 12468;

const int EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y_KHR = 12469;

const int EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_KHR = 12470;

const int EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z_KHR = 12471;

const int EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_KHR = 12472;

const int EGL_KHR_image = 1;

const int EGL_NATIVE_PIXMAP_KHR = 12464;

const int EGL_KHR_image_base = 1;

const int EGL_IMAGE_PRESERVED_KHR = 12498;

const int EGL_KHR_image_pixmap = 1;

const int EGL_KHR_lock_surface = 1;

const int EGL_READ_SURFACE_BIT_KHR = 1;

const int EGL_WRITE_SURFACE_BIT_KHR = 2;

const int EGL_LOCK_SURFACE_BIT_KHR = 128;

const int EGL_OPTIMAL_FORMAT_BIT_KHR = 256;

const int EGL_MATCH_FORMAT_KHR = 12355;

const int EGL_FORMAT_RGB_565_EXACT_KHR = 12480;

const int EGL_FORMAT_RGB_565_KHR = 12481;

const int EGL_FORMAT_RGBA_8888_EXACT_KHR = 12482;

const int EGL_FORMAT_RGBA_8888_KHR = 12483;

const int EGL_MAP_PRESERVE_PIXELS_KHR = 12484;

const int EGL_LOCK_USAGE_HINT_KHR = 12485;

const int EGL_BITMAP_POINTER_KHR = 12486;

const int EGL_BITMAP_PITCH_KHR = 12487;

const int EGL_BITMAP_ORIGIN_KHR = 12488;

const int EGL_BITMAP_PIXEL_RED_OFFSET_KHR = 12489;

const int EGL_BITMAP_PIXEL_GREEN_OFFSET_KHR = 12490;

const int EGL_BITMAP_PIXEL_BLUE_OFFSET_KHR = 12491;

const int EGL_BITMAP_PIXEL_ALPHA_OFFSET_KHR = 12492;

const int EGL_BITMAP_PIXEL_LUMINANCE_OFFSET_KHR = 12493;

const int EGL_LOWER_LEFT_KHR = 12494;

const int EGL_UPPER_LEFT_KHR = 12495;

const int EGL_KHR_lock_surface2 = 1;

const int EGL_BITMAP_PIXEL_SIZE_KHR = 12560;

const int EGL_KHR_lock_surface3 = 1;

const int EGL_KHR_mutable_render_buffer = 1;

const int EGL_MUTABLE_RENDER_BUFFER_BIT_KHR = 4096;

const int EGL_KHR_no_config_context = 1;

const int EGL_KHR_partial_update = 1;

const int EGL_BUFFER_AGE_KHR = 12605;

const int EGL_KHR_platform_android = 1;

const int EGL_PLATFORM_ANDROID_KHR = 12609;

const int EGL_KHR_platform_gbm = 1;

const int EGL_PLATFORM_GBM_KHR = 12759;

const int EGL_KHR_platform_wayland = 1;

const int EGL_PLATFORM_WAYLAND_KHR = 12760;

const int EGL_KHR_platform_x11 = 1;

const int EGL_PLATFORM_X11_KHR = 12757;

const int EGL_PLATFORM_X11_SCREEN_KHR = 12758;

const int EGL_KHR_reusable_sync = 1;

const int EGL_KHR_stream = 1;

const int EGL_KHR_stream_attrib = 1;

const int EGL_KHR_stream_consumer_gltexture = 1;

const int EGL_CONSUMER_ACQUIRE_TIMEOUT_USEC_KHR = 12830;

const int EGL_KHR_stream_cross_process_fd = 1;

const int EGL_NO_FILE_DESCRIPTOR_KHR = -1;

const int EGL_KHR_stream_fifo = 1;

const int EGL_STREAM_FIFO_LENGTH_KHR = 12796;

const int EGL_STREAM_TIME_NOW_KHR = 12797;

const int EGL_STREAM_TIME_CONSUMER_KHR = 12798;

const int EGL_STREAM_TIME_PRODUCER_KHR = 12799;

const int EGL_KHR_stream_producer_aldatalocator = 1;

const int EGL_KHR_stream_producer_eglsurface = 1;

const int EGL_STREAM_BIT_KHR = 2048;

const int EGL_KHR_surfaceless_context = 1;

const int EGL_KHR_swap_buffers_with_damage = 1;

const int EGL_KHR_vg_parent_image = 1;

const int EGL_VG_PARENT_IMAGE_KHR = 12474;

const int EGL_KHR_wait_sync = 1;

const int EGL_ANDROID_blob_cache = 1;

const int EGL_ANDROID_create_native_client_buffer = 1;

const int EGL_NATIVE_BUFFER_USAGE_ANDROID = 12611;

const int EGL_NATIVE_BUFFER_USAGE_PROTECTED_BIT_ANDROID = 1;

const int EGL_NATIVE_BUFFER_USAGE_RENDERBUFFER_BIT_ANDROID = 2;

const int EGL_NATIVE_BUFFER_USAGE_TEXTURE_BIT_ANDROID = 4;

const int EGL_ANDROID_framebuffer_target = 1;

const int EGL_FRAMEBUFFER_TARGET_ANDROID = 12615;

const int EGL_ANDROID_front_buffer_auto_refresh = 1;

const int EGL_FRONT_BUFFER_AUTO_REFRESH_ANDROID = 12620;

const int EGL_ANDROID_get_frame_timestamps = 1;

const int EGL_TIMESTAMP_PENDING_ANDROID = -2;

const int EGL_TIMESTAMP_INVALID_ANDROID = -1;

const int EGL_TIMESTAMPS_ANDROID = 13360;

const int EGL_COMPOSITE_DEADLINE_ANDROID = 13361;

const int EGL_COMPOSITE_INTERVAL_ANDROID = 13362;

const int EGL_COMPOSITE_TO_PRESENT_LATENCY_ANDROID = 13363;

const int EGL_REQUESTED_PRESENT_TIME_ANDROID = 13364;

const int EGL_RENDERING_COMPLETE_TIME_ANDROID = 13365;

const int EGL_COMPOSITION_LATCH_TIME_ANDROID = 13366;

const int EGL_FIRST_COMPOSITION_START_TIME_ANDROID = 13367;

const int EGL_LAST_COMPOSITION_START_TIME_ANDROID = 13368;

const int EGL_FIRST_COMPOSITION_GPU_FINISHED_TIME_ANDROID = 13369;

const int EGL_DISPLAY_PRESENT_TIME_ANDROID = 13370;

const int EGL_DEQUEUE_READY_TIME_ANDROID = 13371;

const int EGL_READS_DONE_TIME_ANDROID = 13372;

const int EGL_ANDROID_get_native_client_buffer = 1;

const int EGL_ANDROID_image_native_buffer = 1;

const int EGL_NATIVE_BUFFER_ANDROID = 12608;

const int EGL_ANDROID_native_fence_sync = 1;

const int EGL_SYNC_NATIVE_FENCE_ANDROID = 12612;

const int EGL_SYNC_NATIVE_FENCE_FD_ANDROID = 12613;

const int EGL_SYNC_NATIVE_FENCE_SIGNALED_ANDROID = 12614;

const int EGL_NO_NATIVE_FENCE_FD_ANDROID = -1;

const int EGL_ANDROID_presentation_time = 1;

const int EGL_ANDROID_recordable = 1;

const int EGL_RECORDABLE_ANDROID = 12610;

const int EGL_ANGLE_d3d_share_handle_client_buffer = 1;

const int EGL_D3D_TEXTURE_2D_SHARE_HANDLE_ANGLE = 12800;

const int EGL_ANGLE_device_d3d = 1;

const int EGL_D3D9_DEVICE_ANGLE = 13216;

const int EGL_D3D11_DEVICE_ANGLE = 13217;

const int EGL_ANGLE_query_surface_pointer = 1;

const int EGL_ANGLE_surface_d3d_texture_2d_share_handle = 1;

const int EGL_ANGLE_window_fixed_size = 1;

const int EGL_FIXED_SIZE_ANGLE = 12801;

const int EGL_ARM_implicit_external_sync = 1;

const int EGL_SYNC_PRIOR_COMMANDS_IMPLICIT_EXTERNAL_ARM = 12938;

const int EGL_ARM_pixmap_multisample_discard = 1;

const int EGL_DISCARD_SAMPLES_ARM = 12934;

const int EGL_EXT_bind_to_front = 1;

const int EGL_FRONT_BUFFER_EXT = 13412;

const int EGL_EXT_buffer_age = 1;

const int EGL_BUFFER_AGE_EXT = 12605;

const int EGL_EXT_client_extensions = 1;

const int EGL_EXT_client_sync = 1;

const int EGL_SYNC_CLIENT_EXT = 13156;

const int EGL_SYNC_CLIENT_SIGNAL_EXT = 13157;

const int EGL_EXT_compositor = 1;

const int EGL_PRIMARY_COMPOSITOR_CONTEXT_EXT = 13408;

const int EGL_EXTERNAL_REF_ID_EXT = 13409;

const int EGL_COMPOSITOR_DROP_NEWEST_FRAME_EXT = 13410;

const int EGL_COMPOSITOR_KEEP_NEWEST_FRAME_EXT = 13411;

const int EGL_EXT_create_context_robustness = 1;

const int EGL_CONTEXT_OPENGL_ROBUST_ACCESS_EXT = 12479;

const int EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_EXT = 12600;

const int EGL_NO_RESET_NOTIFICATION_EXT = 12734;

const int EGL_LOSE_CONTEXT_ON_RESET_EXT = 12735;

const int EGL_EXT_device_base = 1;

const int EGL_BAD_DEVICE_EXT = 12843;

const int EGL_DEVICE_EXT = 12844;

const int EGL_EXT_device_drm = 1;

const int EGL_DRM_DEVICE_FILE_EXT = 12851;

const int EGL_DRM_MASTER_FD_EXT = 13116;

const int EGL_EXT_device_enumeration = 1;

const int EGL_EXT_device_openwf = 1;

const int EGL_OPENWF_DEVICE_ID_EXT = 12855;

const int EGL_EXT_device_query = 1;

const int EGL_EXT_gl_colorspace_bt2020_linear = 1;

const int EGL_GL_COLORSPACE_BT2020_LINEAR_EXT = 13119;

const int EGL_EXT_gl_colorspace_bt2020_pq = 1;

const int EGL_GL_COLORSPACE_BT2020_PQ_EXT = 13120;

const int EGL_EXT_gl_colorspace_display_p3 = 1;

const int EGL_GL_COLORSPACE_DISPLAY_P3_EXT = 13155;

const int EGL_EXT_gl_colorspace_display_p3_linear = 1;

const int EGL_GL_COLORSPACE_DISPLAY_P3_LINEAR_EXT = 13154;

const int EGL_EXT_gl_colorspace_display_p3_passthrough = 1;

const int EGL_GL_COLORSPACE_DISPLAY_P3_PASSTHROUGH_EXT = 13456;

const int EGL_EXT_gl_colorspace_scrgb = 1;

const int EGL_GL_COLORSPACE_SCRGB_EXT = 13137;

const int EGL_EXT_gl_colorspace_scrgb_linear = 1;

const int EGL_GL_COLORSPACE_SCRGB_LINEAR_EXT = 13136;

const int EGL_EXT_image_dma_buf_import = 1;

const int EGL_LINUX_DMA_BUF_EXT = 12912;

const int EGL_LINUX_DRM_FOURCC_EXT = 12913;

const int EGL_DMA_BUF_PLANE0_FD_EXT = 12914;

const int EGL_DMA_BUF_PLANE0_OFFSET_EXT = 12915;

const int EGL_DMA_BUF_PLANE0_PITCH_EXT = 12916;

const int EGL_DMA_BUF_PLANE1_FD_EXT = 12917;

const int EGL_DMA_BUF_PLANE1_OFFSET_EXT = 12918;

const int EGL_DMA_BUF_PLANE1_PITCH_EXT = 12919;

const int EGL_DMA_BUF_PLANE2_FD_EXT = 12920;

const int EGL_DMA_BUF_PLANE2_OFFSET_EXT = 12921;

const int EGL_DMA_BUF_PLANE2_PITCH_EXT = 12922;

const int EGL_YUV_COLOR_SPACE_HINT_EXT = 12923;

const int EGL_SAMPLE_RANGE_HINT_EXT = 12924;

const int EGL_YUV_CHROMA_HORIZONTAL_SITING_HINT_EXT = 12925;

const int EGL_YUV_CHROMA_VERTICAL_SITING_HINT_EXT = 12926;

const int EGL_ITU_REC601_EXT = 12927;

const int EGL_ITU_REC709_EXT = 12928;

const int EGL_ITU_REC2020_EXT = 12929;

const int EGL_YUV_FULL_RANGE_EXT = 12930;

const int EGL_YUV_NARROW_RANGE_EXT = 12931;

const int EGL_YUV_CHROMA_SITING_0_EXT = 12932;

const int EGL_YUV_CHROMA_SITING_0_5_EXT = 12933;

const int EGL_EXT_image_dma_buf_import_modifiers = 1;

const int EGL_DMA_BUF_PLANE3_FD_EXT = 13376;

const int EGL_DMA_BUF_PLANE3_OFFSET_EXT = 13377;

const int EGL_DMA_BUF_PLANE3_PITCH_EXT = 13378;

const int EGL_DMA_BUF_PLANE0_MODIFIER_LO_EXT = 13379;

const int EGL_DMA_BUF_PLANE0_MODIFIER_HI_EXT = 13380;

const int EGL_DMA_BUF_PLANE1_MODIFIER_LO_EXT = 13381;

const int EGL_DMA_BUF_PLANE1_MODIFIER_HI_EXT = 13382;

const int EGL_DMA_BUF_PLANE2_MODIFIER_LO_EXT = 13383;

const int EGL_DMA_BUF_PLANE2_MODIFIER_HI_EXT = 13384;

const int EGL_DMA_BUF_PLANE3_MODIFIER_LO_EXT = 13385;

const int EGL_DMA_BUF_PLANE3_MODIFIER_HI_EXT = 13386;

const int EGL_EXT_image_gl_colorspace = 1;

const int EGL_GL_COLORSPACE_DEFAULT_EXT = 12621;

const int EGL_EXT_image_implicit_sync_control = 1;

const int EGL_IMPORT_SYNC_TYPE_EXT = 13424;

const int EGL_IMPORT_IMPLICIT_SYNC_EXT = 13425;

const int EGL_IMPORT_EXPLICIT_SYNC_EXT = 13426;

const int EGL_EXT_multiview_window = 1;

const int EGL_MULTIVIEW_VIEW_COUNT_EXT = 12596;

const int EGL_EXT_output_base = 1;

const int EGL_BAD_OUTPUT_LAYER_EXT = 12845;

const int EGL_BAD_OUTPUT_PORT_EXT = 12846;

const int EGL_SWAP_INTERVAL_EXT = 12847;

const int EGL_EXT_output_drm = 1;

const int EGL_DRM_CRTC_EXT = 12852;

const int EGL_DRM_PLANE_EXT = 12853;

const int EGL_DRM_CONNECTOR_EXT = 12854;

const int EGL_EXT_output_openwf = 1;

const int EGL_OPENWF_PIPELINE_ID_EXT = 12856;

const int EGL_OPENWF_PORT_ID_EXT = 12857;

const int EGL_EXT_pixel_format_float = 1;

const int EGL_COLOR_COMPONENT_TYPE_EXT = 13113;

const int EGL_COLOR_COMPONENT_TYPE_FIXED_EXT = 13114;

const int EGL_COLOR_COMPONENT_TYPE_FLOAT_EXT = 13115;

const int EGL_EXT_platform_base = 1;

const int EGL_EXT_platform_device = 1;

const int EGL_PLATFORM_DEVICE_EXT = 12607;

const int EGL_EXT_platform_wayland = 1;

const int EGL_PLATFORM_WAYLAND_EXT = 12760;

const int EGL_EXT_platform_x11 = 1;

const int EGL_PLATFORM_X11_EXT = 12757;

const int EGL_PLATFORM_X11_SCREEN_EXT = 12758;

const int EGL_EXT_protected_content = 1;

const int EGL_PROTECTED_CONTENT_EXT = 12992;

const int EGL_EXT_protected_surface = 1;

const int EGL_EXT_stream_consumer_egloutput = 1;

const int EGL_EXT_surface_CTA861_3_metadata = 1;

const int EGL_CTA861_3_MAX_CONTENT_LIGHT_LEVEL_EXT = 13152;

const int EGL_CTA861_3_MAX_FRAME_AVERAGE_LEVEL_EXT = 13153;

const int EGL_EXT_surface_SMPTE2086_metadata = 1;

const int EGL_SMPTE2086_DISPLAY_PRIMARY_RX_EXT = 13121;

const int EGL_SMPTE2086_DISPLAY_PRIMARY_RY_EXT = 13122;

const int EGL_SMPTE2086_DISPLAY_PRIMARY_GX_EXT = 13123;

const int EGL_SMPTE2086_DISPLAY_PRIMARY_GY_EXT = 13124;

const int EGL_SMPTE2086_DISPLAY_PRIMARY_BX_EXT = 13125;

const int EGL_SMPTE2086_DISPLAY_PRIMARY_BY_EXT = 13126;

const int EGL_SMPTE2086_WHITE_POINT_X_EXT = 13127;

const int EGL_SMPTE2086_WHITE_POINT_Y_EXT = 13128;

const int EGL_SMPTE2086_MAX_LUMINANCE_EXT = 13129;

const int EGL_SMPTE2086_MIN_LUMINANCE_EXT = 13130;

const int EGL_METADATA_SCALING_EXT = 50000;

const int EGL_EXT_swap_buffers_with_damage = 1;

const int EGL_EXT_sync_reuse = 1;

const int EGL_EXT_yuv_surface = 1;

const int EGL_YUV_ORDER_EXT = 13057;

const int EGL_YUV_NUMBER_OF_PLANES_EXT = 13073;

const int EGL_YUV_SUBSAMPLE_EXT = 13074;

const int EGL_YUV_DEPTH_RANGE_EXT = 13079;

const int EGL_YUV_CSC_STANDARD_EXT = 13066;

const int EGL_YUV_PLANE_BPP_EXT = 13082;

const int EGL_YUV_BUFFER_EXT = 13056;

const int EGL_YUV_ORDER_YUV_EXT = 13058;

const int EGL_YUV_ORDER_YVU_EXT = 13059;

const int EGL_YUV_ORDER_YUYV_EXT = 13060;

const int EGL_YUV_ORDER_UYVY_EXT = 13061;

const int EGL_YUV_ORDER_YVYU_EXT = 13062;

const int EGL_YUV_ORDER_VYUY_EXT = 13063;

const int EGL_YUV_ORDER_AYUV_EXT = 13064;

const int EGL_YUV_SUBSAMPLE_4_2_0_EXT = 13075;

const int EGL_YUV_SUBSAMPLE_4_2_2_EXT = 13076;

const int EGL_YUV_SUBSAMPLE_4_4_4_EXT = 13077;

const int EGL_YUV_DEPTH_RANGE_LIMITED_EXT = 13080;

const int EGL_YUV_DEPTH_RANGE_FULL_EXT = 13081;

const int EGL_YUV_CSC_STANDARD_601_EXT = 13067;

const int EGL_YUV_CSC_STANDARD_709_EXT = 13068;

const int EGL_YUV_CSC_STANDARD_2020_EXT = 13069;

const int EGL_YUV_PLANE_BPP_0_EXT = 13083;

const int EGL_YUV_PLANE_BPP_8_EXT = 13084;

const int EGL_YUV_PLANE_BPP_10_EXT = 13085;

const int EGL_HI_clientpixmap = 1;

const int EGL_CLIENT_PIXMAP_POINTER_HI = 36724;

const int EGL_HI_colorformats = 1;

const int EGL_COLOR_FORMAT_HI = 36720;

const int EGL_COLOR_RGB_HI = 36721;

const int EGL_COLOR_RGBA_HI = 36722;

const int EGL_COLOR_ARGB_HI = 36723;

const int EGL_IMG_context_priority = 1;

const int EGL_CONTEXT_PRIORITY_LEVEL_IMG = 12544;

const int EGL_CONTEXT_PRIORITY_HIGH_IMG = 12545;

const int EGL_CONTEXT_PRIORITY_MEDIUM_IMG = 12546;

const int EGL_CONTEXT_PRIORITY_LOW_IMG = 12547;

const int EGL_IMG_image_plane_attribs = 1;

const int EGL_NATIVE_BUFFER_MULTIPLANE_SEPARATE_IMG = 12549;

const int EGL_NATIVE_BUFFER_PLANE_OFFSET_IMG = 12550;

const int EGL_MESA_drm_image = 1;

const int EGL_DRM_BUFFER_FORMAT_MESA = 12752;

const int EGL_DRM_BUFFER_USE_MESA = 12753;

const int EGL_DRM_BUFFER_FORMAT_ARGB32_MESA = 12754;

const int EGL_DRM_BUFFER_MESA = 12755;

const int EGL_DRM_BUFFER_STRIDE_MESA = 12756;

const int EGL_DRM_BUFFER_USE_SCANOUT_MESA = 1;

const int EGL_DRM_BUFFER_USE_SHARE_MESA = 2;

const int EGL_DRM_BUFFER_USE_CURSOR_MESA = 4;

const int EGL_MESA_image_dma_buf_export = 1;

const int EGL_MESA_platform_gbm = 1;

const int EGL_PLATFORM_GBM_MESA = 12759;

const int EGL_MESA_platform_surfaceless = 1;

const int EGL_PLATFORM_SURFACELESS_MESA = 12765;

const int EGL_NOK_swap_region = 1;

const int EGL_NOK_swap_region2 = 1;

const int EGL_NOK_texture_from_pixmap = 1;

const int EGL_Y_INVERTED_NOK = 12415;

const int EGL_NV_3dvision_surface = 1;

const int EGL_AUTO_STEREO_NV = 12598;

const int EGL_NV_context_priority_realtime = 1;

const int EGL_CONTEXT_PRIORITY_REALTIME_NV = 13143;

const int EGL_NV_coverage_sample = 1;

const int EGL_COVERAGE_BUFFERS_NV = 12512;

const int EGL_COVERAGE_SAMPLES_NV = 12513;

const int EGL_NV_coverage_sample_resolve = 1;

const int EGL_COVERAGE_SAMPLE_RESOLVE_NV = 12593;

const int EGL_COVERAGE_SAMPLE_RESOLVE_DEFAULT_NV = 12594;

const int EGL_COVERAGE_SAMPLE_RESOLVE_NONE_NV = 12595;

const int EGL_NV_cuda_event = 1;

const int EGL_CUDA_EVENT_HANDLE_NV = 12859;

const int EGL_SYNC_CUDA_EVENT_NV = 12860;

const int EGL_SYNC_CUDA_EVENT_COMPLETE_NV = 12861;

const int EGL_NV_depth_nonlinear = 1;

const int EGL_DEPTH_ENCODING_NV = 12514;

const int EGL_DEPTH_ENCODING_NONE_NV = 0;

const int EGL_DEPTH_ENCODING_NONLINEAR_NV = 12515;

const int EGL_NV_device_cuda = 1;

const int EGL_CUDA_DEVICE_NV = 12858;

const int EGL_NV_native_query = 1;

const int EGL_NV_post_convert_rounding = 1;

const int EGL_NV_post_sub_buffer = 1;

const int EGL_POST_SUB_BUFFER_SUPPORTED_NV = 12478;

const int EGL_NV_robustness_video_memory_purge = 1;

const int EGL_GENERATE_RESET_ON_VIDEO_MEMORY_PURGE_NV = 13132;

const int EGL_NV_stream_consumer_gltexture_yuv = 1;

const int EGL_YUV_PLANE0_TEXTURE_UNIT_NV = 13100;

const int EGL_YUV_PLANE1_TEXTURE_UNIT_NV = 13101;

const int EGL_YUV_PLANE2_TEXTURE_UNIT_NV = 13102;

const int EGL_NV_stream_cross_display = 1;

const int EGL_STREAM_CROSS_DISPLAY_NV = 13134;

const int EGL_NV_stream_cross_object = 1;

const int EGL_STREAM_CROSS_OBJECT_NV = 13133;

const int EGL_NV_stream_cross_partition = 1;

const int EGL_STREAM_CROSS_PARTITION_NV = 12863;

const int EGL_NV_stream_cross_process = 1;

const int EGL_STREAM_CROSS_PROCESS_NV = 12869;

const int EGL_NV_stream_cross_system = 1;

const int EGL_STREAM_CROSS_SYSTEM_NV = 13135;

const int EGL_NV_stream_fifo_next = 1;

const int EGL_PENDING_FRAME_NV = 13097;

const int EGL_STREAM_TIME_PENDING_NV = 13098;

const int EGL_NV_stream_fifo_synchronous = 1;

const int EGL_STREAM_FIFO_SYNCHRONOUS_NV = 13110;

const int EGL_NV_stream_flush = 1;

const int EGL_NV_stream_frame_limits = 1;

const int EGL_PRODUCER_MAX_FRAME_HINT_NV = 13111;

const int EGL_CONSUMER_MAX_FRAME_HINT_NV = 13112;

const int EGL_NV_stream_metadata = 1;

const int EGL_MAX_STREAM_METADATA_BLOCKS_NV = 12880;

const int EGL_MAX_STREAM_METADATA_BLOCK_SIZE_NV = 12881;

const int EGL_MAX_STREAM_METADATA_TOTAL_SIZE_NV = 12882;

const int EGL_PRODUCER_METADATA_NV = 12883;

const int EGL_CONSUMER_METADATA_NV = 12884;

const int EGL_PENDING_METADATA_NV = 13096;

const int EGL_METADATA0_SIZE_NV = 12885;

const int EGL_METADATA1_SIZE_NV = 12886;

const int EGL_METADATA2_SIZE_NV = 12887;

const int EGL_METADATA3_SIZE_NV = 12888;

const int EGL_METADATA0_TYPE_NV = 12889;

const int EGL_METADATA1_TYPE_NV = 12890;

const int EGL_METADATA2_TYPE_NV = 12891;

const int EGL_METADATA3_TYPE_NV = 12892;

const int EGL_NV_stream_remote = 1;

const int EGL_STREAM_STATE_INITIALIZING_NV = 12864;

const int EGL_STREAM_TYPE_NV = 12865;

const int EGL_STREAM_PROTOCOL_NV = 12866;

const int EGL_STREAM_ENDPOINT_NV = 12867;

const int EGL_STREAM_LOCAL_NV = 12868;

const int EGL_STREAM_PRODUCER_NV = 12871;

const int EGL_STREAM_CONSUMER_NV = 12872;

const int EGL_STREAM_PROTOCOL_FD_NV = 12870;

const int EGL_NV_stream_reset = 1;

const int EGL_SUPPORT_RESET_NV = 13108;

const int EGL_SUPPORT_REUSE_NV = 13109;

const int EGL_NV_stream_socket = 1;

const int EGL_STREAM_PROTOCOL_SOCKET_NV = 12875;

const int EGL_SOCKET_HANDLE_NV = 12876;

const int EGL_SOCKET_TYPE_NV = 12877;

const int EGL_NV_stream_socket_inet = 1;

const int EGL_SOCKET_TYPE_INET_NV = 12879;

const int EGL_NV_stream_socket_unix = 1;

const int EGL_SOCKET_TYPE_UNIX_NV = 12878;

const int EGL_NV_stream_sync = 1;

const int EGL_SYNC_NEW_FRAME_NV = 12831;

const int EGL_NV_sync = 1;

const int EGL_NV_system_time = 1;

const int EGL_TIZEN_image_native_buffer = 1;

const int EGL_NATIVE_BUFFER_TIZEN = 12960;

const int EGL_TIZEN_image_native_surface = 1;

const int EGL_NATIVE_SURFACE_TIZEN = 12961;

const int EGL_ANGLE_robust_resource_initialization = 1;

const int EGL_ROBUST_RESOURCE_INITIALIZATION_ANGLE = 13395;

const int EGL_ANGLE_keyed_mutex = 1;

const int EGL_DXGI_KEYED_MUTEX_ANGLE = 13218;

const int EGL_ANGLE_d3d_texture_client_buffer = 1;

const int EGL_D3D_TEXTURE_ANGLE = 13219;

const int EGL_ANGLE_software_display = 1;

const int EGL_ANGLE_direct3d_display = 1;

const int EGL_ANGLE_direct_composition = 1;

const int EGL_DIRECT_COMPOSITION_ANGLE = 13221;

const int EGL_ANGLE_platform_angle = 1;

const int EGL_PLATFORM_ANGLE_ANGLE = 12802;

const int EGL_PLATFORM_ANGLE_TYPE_ANGLE = 12803;

const int EGL_PLATFORM_ANGLE_MAX_VERSION_MAJOR_ANGLE = 12804;

const int EGL_PLATFORM_ANGLE_MAX_VERSION_MINOR_ANGLE = 12805;

const int EGL_PLATFORM_ANGLE_TYPE_DEFAULT_ANGLE = 12806;

const int EGL_PLATFORM_ANGLE_DEBUG_LAYERS_ENABLED_ANGLE = 13393;

const int EGL_PLATFORM_ANGLE_DEVICE_TYPE_ANGLE = 12809;

const int EGL_PLATFORM_ANGLE_DEVICE_TYPE_HARDWARE_ANGLE = 12810;

const int EGL_PLATFORM_ANGLE_DEVICE_TYPE_NULL_ANGLE = 13406;

const int EGL_ANGLE_platform_angle_d3d = 1;

const int EGL_PLATFORM_ANGLE_TYPE_D3D9_ANGLE = 12807;

const int EGL_PLATFORM_ANGLE_TYPE_D3D11_ANGLE = 12808;

const int EGL_PLATFORM_ANGLE_DEVICE_TYPE_D3D_WARP_ANGLE = 12811;

const int EGL_PLATFORM_ANGLE_DEVICE_TYPE_D3D_REFERENCE_ANGLE = 12812;

const int EGL_PLATFORM_ANGLE_ENABLE_AUTOMATIC_TRIM_ANGLE = 12815;

const int EGL_ANGLE_platform_angle_opengl = 1;

const int EGL_PLATFORM_ANGLE_TYPE_OPENGL_ANGLE = 12813;

const int EGL_PLATFORM_ANGLE_TYPE_OPENGLES_ANGLE = 12814;

const int EGL_PLATFORM_ANGLE_EGL_HANDLE_ANGLE = 13440;

const int EGL_ANGLE_platform_angle_null = 1;

const int EGL_PLATFORM_ANGLE_TYPE_NULL_ANGLE = 13230;

const int EGL_ANGLE_platform_angle_vulkan = 1;

const int EGL_PLATFORM_ANGLE_TYPE_VULKAN_ANGLE = 13392;

const int EGL_ANGLE_platform_angle_context_virtualization = 1;

const int EGL_PLATFORM_ANGLE_CONTEXT_VIRTUALIZATION_ANGLE = 13441;

const int EGL_X11_VISUAL_ID_ANGLE = 13219;

const int EGL_ANGLE_flexible_surface_compatibility = 1;

const int EGL_FLEXIBLE_SURFACE_COMPATIBILITY_SUPPORTED_ANGLE = 13222;

const int EGL_OPTIMAL_SURFACE_ORIENTATION_ANGLE = 13223;

const int EGL_SURFACE_ORIENTATION_ANGLE = 13224;

const int EGL_SURFACE_ORIENTATION_INVERT_X_ANGLE = 1;

const int EGL_SURFACE_ORIENTATION_INVERT_Y_ANGLE = 2;

const int EGL_EXPERIMENTAL_PRESENT_PATH_ANGLE = 13220;

const int EGL_EXPERIMENTAL_PRESENT_PATH_FAST_ANGLE = 13225;

const int EGL_EXPERIMENTAL_PRESENT_PATH_COPY_ANGLE = 13226;

const int EGL_D3D_TEXTURE_SUBRESOURCE_ID_ANGLE = 13227;

const int EGL_ANGLE_create_context_webgl_compatibility = 1;

const int EGL_CONTEXT_WEBGL_COMPATIBILITY_ANGLE = 13228;

const int EGL_ANGLE_display_texture_share_group = 1;

const int EGL_DISPLAY_TEXTURE_SHARE_GROUP_ANGLE = 13231;

const int EGL_CHROMIUM_create_context_bind_generates_resource = 1;

const int EGL_CONTEXT_BIND_GENERATES_RESOURCE_CHROMIUM = 13229;

const int EGL_ANGLE_create_context_client_arrays = 1;

const int EGL_CONTEXT_CLIENT_ARRAYS_ENABLED_ANGLE = 13394;

const int EGL_ANGLE_device_creation = 1;

const int EGL_ANGLE_program_cache_control = 1;

const int EGL_PROGRAM_CACHE_SIZE_ANGLE = 13397;

const int EGL_PROGRAM_CACHE_KEY_LENGTH_ANGLE = 13398;

const int EGL_PROGRAM_CACHE_RESIZE_ANGLE = 13399;

const int EGL_PROGRAM_CACHE_TRIM_ANGLE = 13400;

const int EGL_CONTEXT_PROGRAM_BINARY_CACHE_ENABLED_ANGLE = 13401;

const int EGL_ANGLE_iosurface_client_buffer = 1;

const int EGL_IOSURFACE_ANGLE = 13396;

const int EGL_IOSURFACE_PLANE_ANGLE = 13402;

const int EGL_TEXTURE_RECTANGLE_ANGLE = 13403;

const int EGL_TEXTURE_TYPE_ANGLE = 13404;

const int EGL_TEXTURE_INTERNAL_FORMAT_ANGLE = 13405;

const int EGL_ANGLE_create_context_extensions_enabled = 1;

const int EGL_EXTENSIONS_ENABLED_ANGLE = 13407;

const int WIN32_LEAN_AND_MEAN = 1;

const int WINAPI_PARTITION_SERVER = 0;

const int WINAPI_PARTITION_PKG_WINTRUST = 0;

const int WINAPI_PARTITION_PKG_WEBSERVICES = 0;

const int WINAPI_PARTITION_PKG_EVENTLOGSERVICE = 0;

const int WINAPI_PARTITION_PKG_VHD = 0;

const int WINAPI_PARTITION_PKG_PERFCOUNTER = 0;

const int WINAPI_PARTITION_PKG_SECURESTARTUP = 0;

const int WINAPI_PARTITION_PKG_REMOTEFS = 0;

const int WINAPI_PARTITION_PKG_BOOTABLESKU = 0;

const int WINAPI_PARTITION_PKG_CMDTOOLS = 0;

const int WINAPI_PARTITION_PKG_DISM = 0;

const int WINAPI_PARTITION_PKG_CORESETUP = 0;

const int WINAPI_PARTITION_PKG_APPRUNTIME = 0;

const int WINAPI_PARTITION_PKG_ESENT = 0;

const int WINAPI_PARTITION_PKG_WINMGMT = 0;

const int WINAPI_PARTITION_PKG_WNV = 0;

const int WINAPI_PARTITION_PKG_CLUSTER = 0;

const int WINAPI_PARTITION_PKG_VSS = 0;

const int WINAPI_PARTITION_PKG_TRAFFIC = 0;

const int WINAPI_PARTITION_PKG_ISCSI = 0;

const int WINAPI_PARTITION_PKG_STORAGE = 0;

const int WINAPI_PARTITION_PKG_MPSSVC = 0;

const int WINAPI_PARTITION_PKG_APPXDEPLOYMENT = 0;

const int WINAPI_PARTITION_PKG_WER = 0;

const int WINAPI_FAMILY_PC_APP = 2;

const int WINAPI_FAMILY_PHONE_APP = 3;

const int WINAPI_FAMILY_SYSTEM = 4;

const int WINAPI_FAMILY_SERVER = 5;

const int WINAPI_FAMILY_GAMES = 6;

const int WINAPI_FAMILY_DESKTOP_APP = 100;

const int WINAPI_FAMILY_APP = 2;

const int WINAPI_FAMILY = 100;

const int WINAPI_PARTITION_DESKTOP = 1;

const int WINAPI_PARTITION_APP = 1;

const int WINAPI_PARTITION_PC_APP = 1;

const int WINAPI_PARTITION_PHONE_APP = 0;

const int WINAPI_PARTITION_GAMES = 1;

const int WINAPI_PARTITION_SYSTEM = 0;

const int WINAPI_PARTITION_PHONE = 0;

const int _WIN32_WINNT_NT4 = 1024;

const int _WIN32_WINNT_WIN2K = 1280;

const int _WIN32_WINNT_WINXP = 1281;

const int _WIN32_WINNT_WS03 = 1282;

const int _WIN32_WINNT_WIN6 = 1536;

const int _WIN32_WINNT_VISTA = 1536;

const int _WIN32_WINNT_WS08 = 1536;

const int _WIN32_WINNT_LONGHORN = 1536;

const int _WIN32_WINNT_WIN7 = 1537;

const int _WIN32_WINNT_WIN8 = 1538;

const int _WIN32_WINNT_WINBLUE = 1539;

const int _WIN32_WINNT_WINTHRESHOLD = 2560;

const int _WIN32_WINNT_WIN10 = 2560;

const int _WIN32_IE_IE20 = 512;

const int _WIN32_IE_IE30 = 768;

const int _WIN32_IE_IE302 = 770;

const int _WIN32_IE_IE40 = 1024;

const int _WIN32_IE_IE401 = 1025;

const int _WIN32_IE_IE50 = 1280;

const int _WIN32_IE_IE501 = 1281;

const int _WIN32_IE_IE55 = 1360;

const int _WIN32_IE_IE60 = 1536;

const int _WIN32_IE_IE60SP1 = 1537;

const int _WIN32_IE_IE60SP2 = 1539;

const int _WIN32_IE_IE70 = 1792;

const int _WIN32_IE_IE80 = 2048;

const int _WIN32_IE_IE90 = 2304;

const int _WIN32_IE_IE100 = 2560;

const int _WIN32_IE_IE110 = 2560;

const int _WIN32_IE_NT4 = 512;

const int _WIN32_IE_NT4SP1 = 512;

const int _WIN32_IE_NT4SP2 = 512;

const int _WIN32_IE_NT4SP3 = 770;

const int _WIN32_IE_NT4SP4 = 1025;

const int _WIN32_IE_NT4SP5 = 1025;

const int _WIN32_IE_NT4SP6 = 1280;

const int _WIN32_IE_WIN98 = 1025;

const int _WIN32_IE_WIN98SE = 1280;

const int _WIN32_IE_WINME = 1360;

const int _WIN32_IE_WIN2K = 1281;

const int _WIN32_IE_WIN2KSP1 = 1281;

const int _WIN32_IE_WIN2KSP2 = 1281;

const int _WIN32_IE_WIN2KSP3 = 1281;

const int _WIN32_IE_WIN2KSP4 = 1281;

const int _WIN32_IE_XP = 1536;

const int _WIN32_IE_XPSP1 = 1537;

const int _WIN32_IE_XPSP2 = 1539;

const int _WIN32_IE_WS03 = 1538;

const int _WIN32_IE_WS03SP1 = 1539;

const int _WIN32_IE_WIN6 = 1792;

const int _WIN32_IE_LONGHORN = 1792;

const int _WIN32_IE_WIN7 = 2048;

const int _WIN32_IE_WIN8 = 2560;

const int _WIN32_IE_WINBLUE = 2560;

const int _WIN32_IE_WINTHRESHOLD = 2560;

const int _WIN32_IE_WIN10 = 2560;

const int NTDDI_WIN2K = 83886080;

const int NTDDI_WIN2KSP1 = 83886336;

const int NTDDI_WIN2KSP2 = 83886592;

const int NTDDI_WIN2KSP3 = 83886848;

const int NTDDI_WIN2KSP4 = 83887104;

const int NTDDI_WINXP = 83951616;

const int NTDDI_WINXPSP1 = 83951872;

const int NTDDI_WINXPSP2 = 83952128;

const int NTDDI_WINXPSP3 = 83952384;

const int NTDDI_WINXPSP4 = 83952640;

const int NTDDI_WS03 = 84017152;

const int NTDDI_WS03SP1 = 84017408;

const int NTDDI_WS03SP2 = 84017664;

const int NTDDI_WS03SP3 = 84017920;

const int NTDDI_WS03SP4 = 84018176;

const int NTDDI_WIN6 = 100663296;

const int NTDDI_WIN6SP1 = 100663552;

const int NTDDI_WIN6SP2 = 100663808;

const int NTDDI_WIN6SP3 = 100664064;

const int NTDDI_WIN6SP4 = 100664320;

const int NTDDI_VISTA = 100663296;

const int NTDDI_VISTASP1 = 100663552;

const int NTDDI_VISTASP2 = 100663808;

const int NTDDI_VISTASP3 = 100664064;

const int NTDDI_VISTASP4 = 100664320;

const int NTDDI_LONGHORN = 100663296;

const int NTDDI_WS08 = 100663552;

const int NTDDI_WS08SP2 = 100663808;

const int NTDDI_WS08SP3 = 100664064;

const int NTDDI_WS08SP4 = 100664320;

const int NTDDI_WIN7 = 100728832;

const int NTDDI_WIN8 = 100794368;

const int NTDDI_WINBLUE = 100859904;

const int NTDDI_WINTHRESHOLD = 167772160;

const int NTDDI_WIN10 = 167772160;

const int NTDDI_WIN10_TH2 = 167772161;

const int NTDDI_WIN10_RS1 = 167772162;

const int NTDDI_WIN10_RS2 = 167772163;

const int NTDDI_WIN10_RS3 = 167772164;

const int NTDDI_WIN10_RS4 = 167772165;

const int NTDDI_WIN10_RS5 = 167772166;

const int NTDDI_WIN10_19H1 = 167772167;

const int NTDDI_WIN10_VB = 167772168;

const int WDK_NTDDI_VERSION = 167772168;

const int OSVERSION_MASK = 4294901760;

const int SPVERSION_MASK = 65280;

const int SUBVERSION_MASK = 255;

const int _WIN32_WINNT = 2560;

const int NTDDI_VERSION = 167772168;

const int WINVER = 2560;

const int _WIN32_IE = 2560;

const int _VCRT_COMPILER_PREPROCESSOR = 1;

const int _SAL_VERSION = 20;

const int __SAL_H_VERSION = 180000000;

const int _USE_DECLSPECS_FOR_SAL = 0;

const int _USE_ATTRIBUTES_FOR_SAL = 0;

const int _CRT_PACKING = 8;

const int _VCRUNTIME_DISABLED_WARNINGS = 4514;

const int _HAS_EXCEPTIONS = 1;

const int _WCHAR_T_DEFINED = 1;

const int NULL = 0;

const int _HAS_CXX17 = 0;

const int _HAS_CXX20 = 0;

const int _HAS_NODISCARD = 1;

const int EXCEPTION_EXECUTE_HANDLER = 1;

const int EXCEPTION_CONTINUE_SEARCH = 0;

const int EXCEPTION_CONTINUE_EXECUTION = -1;

const int __SAL_H_FULL_VER = 140050727;

const int __SPECSTRINGS_STRICT_LEVEL = 1;

const int __drv_typeConst = 0;

const int __drv_typeCond = 1;

const int __drv_typeBitset = 2;

const int __drv_typeExpr = 3;

const int STRICT = 1;

const int MAX_PATH = 260;

const int FALSE = 0;

const int TRUE = 1;

const int _UCRT_DISABLED_WARNINGS = 4324;

const int _ARGMAX = 100;

const int _TRUNCATE = -1;

const int _CRT_INT_MAX = 2147483647;

const int _CRT_SIZE_MAX = -1;

const String __FILEW__ = 't';

const int _CRT_FUNCTIONS_REQUIRED = 1;

const int _CRT_HAS_CXX17 = 0;

const int _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE = 1;

const int _CRT_BUILD_DESKTOP_APP = 1;

const int _CRT_INTERNAL_NONSTDC_NAMES = 1;

const int __STDC_SECURE_LIB__ = 200411;

const int __GOT_SECURE_LIB__ = 200411;

const int __STDC_WANT_SECURE_LIB__ = 1;

const int _SECURECRT_FILL_BUFFER_PATTERN = 254;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES = 0;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES = 1;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY = 0;

const int WEOF = 65535;

const int _UPPER = 1;

const int _LOWER = 2;

const int _DIGIT = 4;

const int _SPACE = 8;

const int _PUNCT = 16;

const int _CONTROL = 32;

const int _BLANK = 64;

const int _HEX = 128;

const int _LEADBYTE = 32768;

const int _ALPHA = 259;

const int ANYSIZE_ARRAY = 1;

const int DISPATCH_LEVEL = 2;

const int APC_LEVEL = 1;

const int PASSIVE_LEVEL = 0;

const int HIGH_LEVEL = 15;

const int MAX_NATURAL_ALIGNMENT = 8;

const int MEMORY_ALLOCATION_ALIGNMENT = 16;

const int ADDRESS_TAG_BIT = 4398046511104;

const int MAXUINT_PTR = -1;

const int MAXINT_PTR = 9223372036854775807;

const int MININT_PTR = -9223372036854775808;

const int MAXULONG_PTR = -1;

const int MAXLONG_PTR = 9223372036854775807;

const int MINLONG_PTR = -9223372036854775808;

const int MAXUHALF_PTR = 4294967295;

const int MAXHALF_PTR = 2147483647;

const int MINHALF_PTR = -2147483648;

const int MAXUINT8 = 255;

const int MAXINT8 = 127;

const int MININT8 = -128;

const int MAXUINT16 = 65535;

const int MAXINT16 = 32767;

const int MININT16 = -32768;

const int MAXUINT32 = 4294967295;

const int MAXINT32 = 2147483647;

const int MININT32 = -2147483648;

const int MAXUINT64 = -1;

const int MAXINT64 = 9223372036854775807;

const int MININT64 = -9223372036854775808;

const int MAXULONG32 = 4294967295;

const int MAXLONG32 = 2147483647;

const int MINLONG32 = -2147483648;

const int MAXULONG64 = -1;

const int MAXLONG64 = 9223372036854775807;

const int MINLONG64 = -9223372036854775808;

const int MAXULONGLONG = -1;

const int MINLONGLONG = -9223372036854775808;

const int MAXSIZE_T = -1;

const int MAXSSIZE_T = 9223372036854775807;

const int MINSSIZE_T = -9223372036854775808;

const int MAXUINT = 4294967295;

const int MAXINT = 2147483647;

const int MININT = -2147483648;

const int MAXDWORD32 = 4294967295;

const int MAXDWORD64 = -1;

const int SYSTEM_CACHE_ALIGNMENT_SIZE = 64;

const int PRAGMA_DEPRECATED_DDK = 0;

const int UCSCHAR_INVALID_CHARACTER = 4294967295;

const int MIN_UCSCHAR = 0;

const int MAX_UCSCHAR = 1114111;

const int ALL_PROCESSOR_GROUPS = 65535;

const int MAXIMUM_PROC_PER_GROUP = 64;

const int MAXIMUM_PROCESSORS = 64;

const int APPLICATION_ERROR_MASK = 536870912;

const int ERROR_SEVERITY_SUCCESS = 0;

const int ERROR_SEVERITY_INFORMATIONAL = 1073741824;

const int ERROR_SEVERITY_WARNING = 2147483648;

const int ERROR_SEVERITY_ERROR = 3221225472;

const int MAXLONGLONG = 9223372036854775807;

const int ANSI_NULL = 0;

const int UNICODE_NULL = 0;

const int UNICODE_STRING_MAX_BYTES = 65534;

const int UNICODE_STRING_MAX_CHARS = 32767;

const int EPERM = 1;

const int ENOENT = 2;

const int ESRCH = 3;

const int EINTR = 4;

const int EIO = 5;

const int ENXIO = 6;

const int E2BIG = 7;

const int ENOEXEC = 8;

const int EBADF = 9;

const int ECHILD = 10;

const int EAGAIN = 11;

const int ENOMEM = 12;

const int EACCES = 13;

const int EFAULT = 14;

const int EBUSY = 16;

const int EEXIST = 17;

const int EXDEV = 18;

const int ENODEV = 19;

const int ENOTDIR = 20;

const int EISDIR = 21;

const int ENFILE = 23;

const int EMFILE = 24;

const int ENOTTY = 25;

const int EFBIG = 27;

const int ENOSPC = 28;

const int ESPIPE = 29;

const int EROFS = 30;

const int EMLINK = 31;

const int EPIPE = 32;

const int EDOM = 33;

const int EDEADLK = 36;

const int ENAMETOOLONG = 38;

const int ENOLCK = 39;

const int ENOSYS = 40;

const int ENOTEMPTY = 41;

const int EINVAL = 22;

const int ERANGE = 34;

const int EILSEQ = 42;

const int STRUNCATE = 80;

const int EDEADLOCK = 36;

const int EADDRINUSE = 100;

const int EADDRNOTAVAIL = 101;

const int EAFNOSUPPORT = 102;

const int EALREADY = 103;

const int EBADMSG = 104;

const int ECANCELED = 105;

const int ECONNABORTED = 106;

const int ECONNREFUSED = 107;

const int ECONNRESET = 108;

const int EDESTADDRREQ = 109;

const int EHOSTUNREACH = 110;

const int EIDRM = 111;

const int EINPROGRESS = 112;

const int EISCONN = 113;

const int ELOOP = 114;

const int EMSGSIZE = 115;

const int ENETDOWN = 116;

const int ENETRESET = 117;

const int ENETUNREACH = 118;

const int ENOBUFS = 119;

const int ENODATA = 120;

const int ENOLINK = 121;

const int ENOMSG = 122;

const int ENOPROTOOPT = 123;

const int ENOSR = 124;

const int ENOSTR = 125;

const int ENOTCONN = 126;

const int ENOTRECOVERABLE = 127;

const int ENOTSOCK = 128;

const int ENOTSUP = 129;

const int EOPNOTSUPP = 130;

const int EOTHER = 131;

const int EOVERFLOW = 132;

const int EOWNERDEAD = 133;

const int EPROTO = 134;

const int EPROTONOSUPPORT = 135;

const int EPROTOTYPE = 136;

const int ETIME = 137;

const int ETIMEDOUT = 138;

const int ETXTBSY = 139;

const int EWOULDBLOCK = 140;

const int _NLSCMPERROR = 2147483647;

const int MINCHAR = 128;

const int MAXCHAR = 127;

const int MINSHORT = 32768;

const int MAXSHORT = 32767;

const int MINLONG = 2147483648;

const int MAXLONG = 2147483647;

const int MAXBYTE = 255;

const int MAXWORD = 65535;

const int MAXDWORD = 4294967295;

const int ENCLAVE_SHORT_ID_LENGTH = 16;

const int ENCLAVE_LONG_ID_LENGTH = 32;

const int VER_SERVER_NT = 2147483648;

const int VER_WORKSTATION_NT = 1073741824;

const int VER_SUITE_SMALLBUSINESS = 1;

const int VER_SUITE_ENTERPRISE = 2;

const int VER_SUITE_BACKOFFICE = 4;

const int VER_SUITE_COMMUNICATIONS = 8;

const int VER_SUITE_TERMINAL = 16;

const int VER_SUITE_SMALLBUSINESS_RESTRICTED = 32;

const int VER_SUITE_EMBEDDEDNT = 64;

const int VER_SUITE_DATACENTER = 128;

const int VER_SUITE_SINGLEUSERTS = 256;

const int VER_SUITE_PERSONAL = 512;

const int VER_SUITE_BLADE = 1024;

const int VER_SUITE_EMBEDDED_RESTRICTED = 2048;

const int VER_SUITE_SECURITY_APPLIANCE = 4096;

const int VER_SUITE_STORAGE_SERVER = 8192;

const int VER_SUITE_COMPUTE_SERVER = 16384;

const int VER_SUITE_WH_SERVER = 32768;

const int VER_SUITE_MULTIUSERTS = 131072;

const int PRODUCT_UNDEFINED = 0;

const int PRODUCT_ULTIMATE = 1;

const int PRODUCT_HOME_BASIC = 2;

const int PRODUCT_HOME_PREMIUM = 3;

const int PRODUCT_ENTERPRISE = 4;

const int PRODUCT_HOME_BASIC_N = 5;

const int PRODUCT_BUSINESS = 6;

const int PRODUCT_STANDARD_SERVER = 7;

const int PRODUCT_DATACENTER_SERVER = 8;

const int PRODUCT_SMALLBUSINESS_SERVER = 9;

const int PRODUCT_ENTERPRISE_SERVER = 10;

const int PRODUCT_STARTER = 11;

const int PRODUCT_DATACENTER_SERVER_CORE = 12;

const int PRODUCT_STANDARD_SERVER_CORE = 13;

const int PRODUCT_ENTERPRISE_SERVER_CORE = 14;

const int PRODUCT_ENTERPRISE_SERVER_IA64 = 15;

const int PRODUCT_BUSINESS_N = 16;

const int PRODUCT_WEB_SERVER = 17;

const int PRODUCT_CLUSTER_SERVER = 18;

const int PRODUCT_HOME_SERVER = 19;

const int PRODUCT_STORAGE_EXPRESS_SERVER = 20;

const int PRODUCT_STORAGE_STANDARD_SERVER = 21;

const int PRODUCT_STORAGE_WORKGROUP_SERVER = 22;

const int PRODUCT_STORAGE_ENTERPRISE_SERVER = 23;

const int PRODUCT_SERVER_FOR_SMALLBUSINESS = 24;

const int PRODUCT_SMALLBUSINESS_SERVER_PREMIUM = 25;

const int PRODUCT_HOME_PREMIUM_N = 26;

const int PRODUCT_ENTERPRISE_N = 27;

const int PRODUCT_ULTIMATE_N = 28;

const int PRODUCT_WEB_SERVER_CORE = 29;

const int PRODUCT_MEDIUMBUSINESS_SERVER_MANAGEMENT = 30;

const int PRODUCT_MEDIUMBUSINESS_SERVER_SECURITY = 31;

const int PRODUCT_MEDIUMBUSINESS_SERVER_MESSAGING = 32;

const int PRODUCT_SERVER_FOUNDATION = 33;

const int PRODUCT_HOME_PREMIUM_SERVER = 34;

const int PRODUCT_SERVER_FOR_SMALLBUSINESS_V = 35;

const int PRODUCT_STANDARD_SERVER_V = 36;

const int PRODUCT_DATACENTER_SERVER_V = 37;

const int PRODUCT_ENTERPRISE_SERVER_V = 38;

const int PRODUCT_DATACENTER_SERVER_CORE_V = 39;

const int PRODUCT_STANDARD_SERVER_CORE_V = 40;

const int PRODUCT_ENTERPRISE_SERVER_CORE_V = 41;

const int PRODUCT_HYPERV = 42;

const int PRODUCT_STORAGE_EXPRESS_SERVER_CORE = 43;

const int PRODUCT_STORAGE_STANDARD_SERVER_CORE = 44;

const int PRODUCT_STORAGE_WORKGROUP_SERVER_CORE = 45;

const int PRODUCT_STORAGE_ENTERPRISE_SERVER_CORE = 46;

const int PRODUCT_STARTER_N = 47;

const int PRODUCT_PROFESSIONAL = 48;

const int PRODUCT_PROFESSIONAL_N = 49;

const int PRODUCT_SB_SOLUTION_SERVER = 50;

const int PRODUCT_SERVER_FOR_SB_SOLUTIONS = 51;

const int PRODUCT_STANDARD_SERVER_SOLUTIONS = 52;

const int PRODUCT_STANDARD_SERVER_SOLUTIONS_CORE = 53;

const int PRODUCT_SB_SOLUTION_SERVER_EM = 54;

const int PRODUCT_SERVER_FOR_SB_SOLUTIONS_EM = 55;

const int PRODUCT_SOLUTION_EMBEDDEDSERVER = 56;

const int PRODUCT_SOLUTION_EMBEDDEDSERVER_CORE = 57;

const int PRODUCT_PROFESSIONAL_EMBEDDED = 58;

const int PRODUCT_ESSENTIALBUSINESS_SERVER_MGMT = 59;

const int PRODUCT_ESSENTIALBUSINESS_SERVER_ADDL = 60;

const int PRODUCT_ESSENTIALBUSINESS_SERVER_MGMTSVC = 61;

const int PRODUCT_ESSENTIALBUSINESS_SERVER_ADDLSVC = 62;

const int PRODUCT_SMALLBUSINESS_SERVER_PREMIUM_CORE = 63;

const int PRODUCT_CLUSTER_SERVER_V = 64;

const int PRODUCT_EMBEDDED = 65;

const int PRODUCT_STARTER_E = 66;

const int PRODUCT_HOME_BASIC_E = 67;

const int PRODUCT_HOME_PREMIUM_E = 68;

const int PRODUCT_PROFESSIONAL_E = 69;

const int PRODUCT_ENTERPRISE_E = 70;

const int PRODUCT_ULTIMATE_E = 71;

const int PRODUCT_ENTERPRISE_EVALUATION = 72;

const int PRODUCT_MULTIPOINT_STANDARD_SERVER = 76;

const int PRODUCT_MULTIPOINT_PREMIUM_SERVER = 77;

const int PRODUCT_STANDARD_EVALUATION_SERVER = 79;

const int PRODUCT_DATACENTER_EVALUATION_SERVER = 80;

const int PRODUCT_ENTERPRISE_N_EVALUATION = 84;

const int PRODUCT_EMBEDDED_AUTOMOTIVE = 85;

const int PRODUCT_EMBEDDED_INDUSTRY_A = 86;

const int PRODUCT_THINPC = 87;

const int PRODUCT_EMBEDDED_A = 88;

const int PRODUCT_EMBEDDED_INDUSTRY = 89;

const int PRODUCT_EMBEDDED_E = 90;

const int PRODUCT_EMBEDDED_INDUSTRY_E = 91;

const int PRODUCT_EMBEDDED_INDUSTRY_A_E = 92;

const int PRODUCT_STORAGE_WORKGROUP_EVALUATION_SERVER = 95;

const int PRODUCT_STORAGE_STANDARD_EVALUATION_SERVER = 96;

const int PRODUCT_CORE_ARM = 97;

const int PRODUCT_CORE_N = 98;

const int PRODUCT_CORE_COUNTRYSPECIFIC = 99;

const int PRODUCT_CORE_SINGLELANGUAGE = 100;

const int PRODUCT_CORE = 101;

const int PRODUCT_PROFESSIONAL_WMC = 103;

const int PRODUCT_EMBEDDED_INDUSTRY_EVAL = 105;

const int PRODUCT_EMBEDDED_INDUSTRY_E_EVAL = 106;

const int PRODUCT_EMBEDDED_EVAL = 107;

const int PRODUCT_EMBEDDED_E_EVAL = 108;

const int PRODUCT_NANO_SERVER = 109;

const int PRODUCT_CLOUD_STORAGE_SERVER = 110;

const int PRODUCT_CORE_CONNECTED = 111;

const int PRODUCT_PROFESSIONAL_STUDENT = 112;

const int PRODUCT_CORE_CONNECTED_N = 113;

const int PRODUCT_PROFESSIONAL_STUDENT_N = 114;

const int PRODUCT_CORE_CONNECTED_SINGLELANGUAGE = 115;

const int PRODUCT_CORE_CONNECTED_COUNTRYSPECIFIC = 116;

const int PRODUCT_CONNECTED_CAR = 117;

const int PRODUCT_INDUSTRY_HANDHELD = 118;

const int PRODUCT_PPI_PRO = 119;

const int PRODUCT_ARM64_SERVER = 120;

const int PRODUCT_EDUCATION = 121;

const int PRODUCT_EDUCATION_N = 122;

const int PRODUCT_IOTUAP = 123;

const int PRODUCT_CLOUD_HOST_INFRASTRUCTURE_SERVER = 124;

const int PRODUCT_ENTERPRISE_S = 125;

const int PRODUCT_ENTERPRISE_S_N = 126;

const int PRODUCT_PROFESSIONAL_S = 127;

const int PRODUCT_PROFESSIONAL_S_N = 128;

const int PRODUCT_ENTERPRISE_S_EVALUATION = 129;

const int PRODUCT_ENTERPRISE_S_N_EVALUATION = 130;

const int PRODUCT_HOLOGRAPHIC = 135;

const int PRODUCT_HOLOGRAPHIC_BUSINESS = 136;

const int PRODUCT_PRO_SINGLE_LANGUAGE = 138;

const int PRODUCT_PRO_CHINA = 139;

const int PRODUCT_ENTERPRISE_SUBSCRIPTION = 140;

const int PRODUCT_ENTERPRISE_SUBSCRIPTION_N = 141;

const int PRODUCT_DATACENTER_NANO_SERVER = 143;

const int PRODUCT_STANDARD_NANO_SERVER = 144;

const int PRODUCT_DATACENTER_A_SERVER_CORE = 145;

const int PRODUCT_STANDARD_A_SERVER_CORE = 146;

const int PRODUCT_DATACENTER_WS_SERVER_CORE = 147;

const int PRODUCT_STANDARD_WS_SERVER_CORE = 148;

const int PRODUCT_UTILITY_VM = 149;

const int PRODUCT_DATACENTER_EVALUATION_SERVER_CORE = 159;

const int PRODUCT_STANDARD_EVALUATION_SERVER_CORE = 160;

const int PRODUCT_PRO_WORKSTATION = 161;

const int PRODUCT_PRO_WORKSTATION_N = 162;

const int PRODUCT_PRO_FOR_EDUCATION = 164;

const int PRODUCT_PRO_FOR_EDUCATION_N = 165;

const int PRODUCT_AZURE_SERVER_CORE = 168;

const int PRODUCT_AZURE_NANO_SERVER = 169;

const int PRODUCT_ENTERPRISEG = 171;

const int PRODUCT_ENTERPRISEGN = 172;

const int PRODUCT_SERVERRDSH = 175;

const int PRODUCT_CLOUD = 178;

const int PRODUCT_CLOUDN = 179;

const int PRODUCT_HUBOS = 180;

const int PRODUCT_ONECOREUPDATEOS = 182;

const int PRODUCT_CLOUDE = 183;

const int PRODUCT_ANDROMEDA = 184;

const int PRODUCT_IOTOS = 185;

const int PRODUCT_CLOUDEN = 186;

const int PRODUCT_IOTEDGEOS = 187;

const int PRODUCT_IOTENTERPRISE = 188;

const int PRODUCT_LITE = 189;

const int PRODUCT_IOTENTERPRISES = 191;

const int PRODUCT_XBOX_SYSTEMOS = 192;

const int PRODUCT_XBOX_NATIVEOS = 193;

const int PRODUCT_XBOX_GAMEOS = 194;

const int PRODUCT_XBOX_ERAOS = 195;

const int PRODUCT_XBOX_DURANGOHOSTOS = 196;

const int PRODUCT_XBOX_SCARLETTHOSTOS = 197;

const int PRODUCT_UNLICENSED = 2882382797;

const int LANG_NEUTRAL = 0;

const int LANG_INVARIANT = 127;

const int LANG_AFRIKAANS = 54;

const int LANG_ALBANIAN = 28;

const int LANG_ALSATIAN = 132;

const int LANG_AMHARIC = 94;

const int LANG_ARABIC = 1;

const int LANG_ARMENIAN = 43;

const int LANG_ASSAMESE = 77;

const int LANG_AZERI = 44;

const int LANG_AZERBAIJANI = 44;

const int LANG_BANGLA = 69;

const int LANG_BASHKIR = 109;

const int LANG_BASQUE = 45;

const int LANG_BELARUSIAN = 35;

const int LANG_BENGALI = 69;

const int LANG_BRETON = 126;

const int LANG_BOSNIAN = 26;

const int LANG_BOSNIAN_NEUTRAL = 30746;

const int LANG_BULGARIAN = 2;

const int LANG_CATALAN = 3;

const int LANG_CENTRAL_KURDISH = 146;

const int LANG_CHEROKEE = 92;

const int LANG_CHINESE = 4;

const int LANG_CHINESE_SIMPLIFIED = 4;

const int LANG_CHINESE_TRADITIONAL = 31748;

const int LANG_CORSICAN = 131;

const int LANG_CROATIAN = 26;

const int LANG_CZECH = 5;

const int LANG_DANISH = 6;

const int LANG_DARI = 140;

const int LANG_DIVEHI = 101;

const int LANG_DUTCH = 19;

const int LANG_ENGLISH = 9;

const int LANG_ESTONIAN = 37;

const int LANG_FAEROESE = 56;

const int LANG_FARSI = 41;

const int LANG_FILIPINO = 100;

const int LANG_FINNISH = 11;

const int LANG_FRENCH = 12;

const int LANG_FRISIAN = 98;

const int LANG_FULAH = 103;

const int LANG_GALICIAN = 86;

const int LANG_GEORGIAN = 55;

const int LANG_GERMAN = 7;

const int LANG_GREEK = 8;

const int LANG_GREENLANDIC = 111;

const int LANG_GUJARATI = 71;

const int LANG_HAUSA = 104;

const int LANG_HAWAIIAN = 117;

const int LANG_HEBREW = 13;

const int LANG_HINDI = 57;

const int LANG_HUNGARIAN = 14;

const int LANG_ICELANDIC = 15;

const int LANG_IGBO = 112;

const int LANG_INDONESIAN = 33;

const int LANG_INUKTITUT = 93;

const int LANG_IRISH = 60;

const int LANG_ITALIAN = 16;

const int LANG_JAPANESE = 17;

const int LANG_KANNADA = 75;

const int LANG_KASHMIRI = 96;

const int LANG_KAZAK = 63;

const int LANG_KHMER = 83;

const int LANG_KICHE = 134;

const int LANG_KINYARWANDA = 135;

const int LANG_KONKANI = 87;

const int LANG_KOREAN = 18;

const int LANG_KYRGYZ = 64;

const int LANG_LAO = 84;

const int LANG_LATVIAN = 38;

const int LANG_LITHUANIAN = 39;

const int LANG_LOWER_SORBIAN = 46;

const int LANG_LUXEMBOURGISH = 110;

const int LANG_MACEDONIAN = 47;

const int LANG_MALAY = 62;

const int LANG_MALAYALAM = 76;

const int LANG_MALTESE = 58;

const int LANG_MANIPURI = 88;

const int LANG_MAORI = 129;

const int LANG_MAPUDUNGUN = 122;

const int LANG_MARATHI = 78;

const int LANG_MOHAWK = 124;

const int LANG_MONGOLIAN = 80;

const int LANG_NEPALI = 97;

const int LANG_NORWEGIAN = 20;

const int LANG_OCCITAN = 130;

const int LANG_ODIA = 72;

const int LANG_ORIYA = 72;

const int LANG_PASHTO = 99;

const int LANG_PERSIAN = 41;

const int LANG_POLISH = 21;

const int LANG_PORTUGUESE = 22;

const int LANG_PULAR = 103;

const int LANG_PUNJABI = 70;

const int LANG_QUECHUA = 107;

const int LANG_ROMANIAN = 24;

const int LANG_ROMANSH = 23;

const int LANG_RUSSIAN = 25;

const int LANG_SAKHA = 133;

const int LANG_SAMI = 59;

const int LANG_SANSKRIT = 79;

const int LANG_SCOTTISH_GAELIC = 145;

const int LANG_SERBIAN = 26;

const int LANG_SERBIAN_NEUTRAL = 31770;

const int LANG_SINDHI = 89;

const int LANG_SINHALESE = 91;

const int LANG_SLOVAK = 27;

const int LANG_SLOVENIAN = 36;

const int LANG_SOTHO = 108;

const int LANG_SPANISH = 10;

const int LANG_SWAHILI = 65;

const int LANG_SWEDISH = 29;

const int LANG_SYRIAC = 90;

const int LANG_TAJIK = 40;

const int LANG_TAMAZIGHT = 95;

const int LANG_TAMIL = 73;

const int LANG_TATAR = 68;

const int LANG_TELUGU = 74;

const int LANG_THAI = 30;

const int LANG_TIBETAN = 81;

const int LANG_TIGRIGNA = 115;

const int LANG_TIGRINYA = 115;

const int LANG_TSWANA = 50;

const int LANG_TURKISH = 31;

const int LANG_TURKMEN = 66;

const int LANG_UIGHUR = 128;

const int LANG_UKRAINIAN = 34;

const int LANG_UPPER_SORBIAN = 46;

const int LANG_URDU = 32;

const int LANG_UZBEK = 67;

const int LANG_VALENCIAN = 3;

const int LANG_VIETNAMESE = 42;

const int LANG_WELSH = 82;

const int LANG_WOLOF = 136;

const int LANG_XHOSA = 52;

const int LANG_YAKUT = 133;

const int LANG_YI = 120;

const int LANG_YORUBA = 106;

const int LANG_ZULU = 53;

const int SUBLANG_NEUTRAL = 0;

const int SUBLANG_DEFAULT = 1;

const int SUBLANG_SYS_DEFAULT = 2;

const int SUBLANG_CUSTOM_DEFAULT = 3;

const int SUBLANG_CUSTOM_UNSPECIFIED = 4;

const int SUBLANG_UI_CUSTOM_DEFAULT = 5;

const int SUBLANG_AFRIKAANS_SOUTH_AFRICA = 1;

const int SUBLANG_ALBANIAN_ALBANIA = 1;

const int SUBLANG_ALSATIAN_FRANCE = 1;

const int SUBLANG_AMHARIC_ETHIOPIA = 1;

const int SUBLANG_ARABIC_SAUDI_ARABIA = 1;

const int SUBLANG_ARABIC_IRAQ = 2;

const int SUBLANG_ARABIC_EGYPT = 3;

const int SUBLANG_ARABIC_LIBYA = 4;

const int SUBLANG_ARABIC_ALGERIA = 5;

const int SUBLANG_ARABIC_MOROCCO = 6;

const int SUBLANG_ARABIC_TUNISIA = 7;

const int SUBLANG_ARABIC_OMAN = 8;

const int SUBLANG_ARABIC_YEMEN = 9;

const int SUBLANG_ARABIC_SYRIA = 10;

const int SUBLANG_ARABIC_JORDAN = 11;

const int SUBLANG_ARABIC_LEBANON = 12;

const int SUBLANG_ARABIC_KUWAIT = 13;

const int SUBLANG_ARABIC_UAE = 14;

const int SUBLANG_ARABIC_BAHRAIN = 15;

const int SUBLANG_ARABIC_QATAR = 16;

const int SUBLANG_ARMENIAN_ARMENIA = 1;

const int SUBLANG_ASSAMESE_INDIA = 1;

const int SUBLANG_AZERI_LATIN = 1;

const int SUBLANG_AZERI_CYRILLIC = 2;

const int SUBLANG_AZERBAIJANI_AZERBAIJAN_LATIN = 1;

const int SUBLANG_AZERBAIJANI_AZERBAIJAN_CYRILLIC = 2;

const int SUBLANG_BANGLA_INDIA = 1;

const int SUBLANG_BANGLA_BANGLADESH = 2;

const int SUBLANG_BASHKIR_RUSSIA = 1;

const int SUBLANG_BASQUE_BASQUE = 1;

const int SUBLANG_BELARUSIAN_BELARUS = 1;

const int SUBLANG_BENGALI_INDIA = 1;

const int SUBLANG_BENGALI_BANGLADESH = 2;

const int SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_LATIN = 5;

const int SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_CYRILLIC = 8;

const int SUBLANG_BRETON_FRANCE = 1;

const int SUBLANG_BULGARIAN_BULGARIA = 1;

const int SUBLANG_CATALAN_CATALAN = 1;

const int SUBLANG_CENTRAL_KURDISH_IRAQ = 1;

const int SUBLANG_CHEROKEE_CHEROKEE = 1;

const int SUBLANG_CHINESE_TRADITIONAL = 1;

const int SUBLANG_CHINESE_SIMPLIFIED = 2;

const int SUBLANG_CHINESE_HONGKONG = 3;

const int SUBLANG_CHINESE_SINGAPORE = 4;

const int SUBLANG_CHINESE_MACAU = 5;

const int SUBLANG_CORSICAN_FRANCE = 1;

const int SUBLANG_CZECH_CZECH_REPUBLIC = 1;

const int SUBLANG_CROATIAN_CROATIA = 1;

const int SUBLANG_CROATIAN_BOSNIA_HERZEGOVINA_LATIN = 4;

const int SUBLANG_DANISH_DENMARK = 1;

const int SUBLANG_DARI_AFGHANISTAN = 1;

const int SUBLANG_DIVEHI_MALDIVES = 1;

const int SUBLANG_DUTCH = 1;

const int SUBLANG_DUTCH_BELGIAN = 2;

const int SUBLANG_ENGLISH_US = 1;

const int SUBLANG_ENGLISH_UK = 2;

const int SUBLANG_ENGLISH_AUS = 3;

const int SUBLANG_ENGLISH_CAN = 4;

const int SUBLANG_ENGLISH_NZ = 5;

const int SUBLANG_ENGLISH_EIRE = 6;

const int SUBLANG_ENGLISH_SOUTH_AFRICA = 7;

const int SUBLANG_ENGLISH_JAMAICA = 8;

const int SUBLANG_ENGLISH_CARIBBEAN = 9;

const int SUBLANG_ENGLISH_BELIZE = 10;

const int SUBLANG_ENGLISH_TRINIDAD = 11;

const int SUBLANG_ENGLISH_ZIMBABWE = 12;

const int SUBLANG_ENGLISH_PHILIPPINES = 13;

const int SUBLANG_ENGLISH_INDIA = 16;

const int SUBLANG_ENGLISH_MALAYSIA = 17;

const int SUBLANG_ENGLISH_SINGAPORE = 18;

const int SUBLANG_ESTONIAN_ESTONIA = 1;

const int SUBLANG_FAEROESE_FAROE_ISLANDS = 1;

const int SUBLANG_FILIPINO_PHILIPPINES = 1;

const int SUBLANG_FINNISH_FINLAND = 1;

const int SUBLANG_FRENCH = 1;

const int SUBLANG_FRENCH_BELGIAN = 2;

const int SUBLANG_FRENCH_CANADIAN = 3;

const int SUBLANG_FRENCH_SWISS = 4;

const int SUBLANG_FRENCH_LUXEMBOURG = 5;

const int SUBLANG_FRENCH_MONACO = 6;

const int SUBLANG_FRISIAN_NETHERLANDS = 1;

const int SUBLANG_FULAH_SENEGAL = 2;

const int SUBLANG_GALICIAN_GALICIAN = 1;

const int SUBLANG_GEORGIAN_GEORGIA = 1;

const int SUBLANG_GERMAN = 1;

const int SUBLANG_GERMAN_SWISS = 2;

const int SUBLANG_GERMAN_AUSTRIAN = 3;

const int SUBLANG_GERMAN_LUXEMBOURG = 4;

const int SUBLANG_GERMAN_LIECHTENSTEIN = 5;

const int SUBLANG_GREEK_GREECE = 1;

const int SUBLANG_GREENLANDIC_GREENLAND = 1;

const int SUBLANG_GUJARATI_INDIA = 1;

const int SUBLANG_HAUSA_NIGERIA_LATIN = 1;

const int SUBLANG_HAWAIIAN_US = 1;

const int SUBLANG_HEBREW_ISRAEL = 1;

const int SUBLANG_HINDI_INDIA = 1;

const int SUBLANG_HUNGARIAN_HUNGARY = 1;

const int SUBLANG_ICELANDIC_ICELAND = 1;

const int SUBLANG_IGBO_NIGERIA = 1;

const int SUBLANG_INDONESIAN_INDONESIA = 1;

const int SUBLANG_INUKTITUT_CANADA = 1;

const int SUBLANG_INUKTITUT_CANADA_LATIN = 2;

const int SUBLANG_IRISH_IRELAND = 2;

const int SUBLANG_ITALIAN = 1;

const int SUBLANG_ITALIAN_SWISS = 2;

const int SUBLANG_JAPANESE_JAPAN = 1;

const int SUBLANG_KANNADA_INDIA = 1;

const int SUBLANG_KASHMIRI_SASIA = 2;

const int SUBLANG_KASHMIRI_INDIA = 2;

const int SUBLANG_KAZAK_KAZAKHSTAN = 1;

const int SUBLANG_KHMER_CAMBODIA = 1;

const int SUBLANG_KICHE_GUATEMALA = 1;

const int SUBLANG_KINYARWANDA_RWANDA = 1;

const int SUBLANG_KONKANI_INDIA = 1;

const int SUBLANG_KOREAN = 1;

const int SUBLANG_KYRGYZ_KYRGYZSTAN = 1;

const int SUBLANG_LAO_LAO = 1;

const int SUBLANG_LATVIAN_LATVIA = 1;

const int SUBLANG_LITHUANIAN = 1;

const int SUBLANG_LOWER_SORBIAN_GERMANY = 2;

const int SUBLANG_LUXEMBOURGISH_LUXEMBOURG = 1;

const int SUBLANG_MACEDONIAN_MACEDONIA = 1;

const int SUBLANG_MALAY_MALAYSIA = 1;

const int SUBLANG_MALAY_BRUNEI_DARUSSALAM = 2;

const int SUBLANG_MALAYALAM_INDIA = 1;

const int SUBLANG_MALTESE_MALTA = 1;

const int SUBLANG_MAORI_NEW_ZEALAND = 1;

const int SUBLANG_MAPUDUNGUN_CHILE = 1;

const int SUBLANG_MARATHI_INDIA = 1;

const int SUBLANG_MOHAWK_MOHAWK = 1;

const int SUBLANG_MONGOLIAN_CYRILLIC_MONGOLIA = 1;

const int SUBLANG_MONGOLIAN_PRC = 2;

const int SUBLANG_NEPALI_INDIA = 2;

const int SUBLANG_NEPALI_NEPAL = 1;

const int SUBLANG_NORWEGIAN_BOKMAL = 1;

const int SUBLANG_NORWEGIAN_NYNORSK = 2;

const int SUBLANG_OCCITAN_FRANCE = 1;

const int SUBLANG_ODIA_INDIA = 1;

const int SUBLANG_ORIYA_INDIA = 1;

const int SUBLANG_PASHTO_AFGHANISTAN = 1;

const int SUBLANG_PERSIAN_IRAN = 1;

const int SUBLANG_POLISH_POLAND = 1;

const int SUBLANG_PORTUGUESE = 2;

const int SUBLANG_PORTUGUESE_BRAZILIAN = 1;

const int SUBLANG_PULAR_SENEGAL = 2;

const int SUBLANG_PUNJABI_INDIA = 1;

const int SUBLANG_PUNJABI_PAKISTAN = 2;

const int SUBLANG_QUECHUA_BOLIVIA = 1;

const int SUBLANG_QUECHUA_ECUADOR = 2;

const int SUBLANG_QUECHUA_PERU = 3;

const int SUBLANG_ROMANIAN_ROMANIA = 1;

const int SUBLANG_ROMANSH_SWITZERLAND = 1;

const int SUBLANG_RUSSIAN_RUSSIA = 1;

const int SUBLANG_SAKHA_RUSSIA = 1;

const int SUBLANG_SAMI_NORTHERN_NORWAY = 1;

const int SUBLANG_SAMI_NORTHERN_SWEDEN = 2;

const int SUBLANG_SAMI_NORTHERN_FINLAND = 3;

const int SUBLANG_SAMI_LULE_NORWAY = 4;

const int SUBLANG_SAMI_LULE_SWEDEN = 5;

const int SUBLANG_SAMI_SOUTHERN_NORWAY = 6;

const int SUBLANG_SAMI_SOUTHERN_SWEDEN = 7;

const int SUBLANG_SAMI_SKOLT_FINLAND = 8;

const int SUBLANG_SAMI_INARI_FINLAND = 9;

const int SUBLANG_SANSKRIT_INDIA = 1;

const int SUBLANG_SCOTTISH_GAELIC = 1;

const int SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_LATIN = 6;

const int SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_CYRILLIC = 7;

const int SUBLANG_SERBIAN_MONTENEGRO_LATIN = 11;

const int SUBLANG_SERBIAN_MONTENEGRO_CYRILLIC = 12;

const int SUBLANG_SERBIAN_SERBIA_LATIN = 9;

const int SUBLANG_SERBIAN_SERBIA_CYRILLIC = 10;

const int SUBLANG_SERBIAN_CROATIA = 1;

const int SUBLANG_SERBIAN_LATIN = 2;

const int SUBLANG_SERBIAN_CYRILLIC = 3;

const int SUBLANG_SINDHI_INDIA = 1;

const int SUBLANG_SINDHI_PAKISTAN = 2;

const int SUBLANG_SINDHI_AFGHANISTAN = 2;

const int SUBLANG_SINHALESE_SRI_LANKA = 1;

const int SUBLANG_SOTHO_NORTHERN_SOUTH_AFRICA = 1;

const int SUBLANG_SLOVAK_SLOVAKIA = 1;

const int SUBLANG_SLOVENIAN_SLOVENIA = 1;

const int SUBLANG_SPANISH = 1;

const int SUBLANG_SPANISH_MEXICAN = 2;

const int SUBLANG_SPANISH_MODERN = 3;

const int SUBLANG_SPANISH_GUATEMALA = 4;

const int SUBLANG_SPANISH_COSTA_RICA = 5;

const int SUBLANG_SPANISH_PANAMA = 6;

const int SUBLANG_SPANISH_DOMINICAN_REPUBLIC = 7;

const int SUBLANG_SPANISH_VENEZUELA = 8;

const int SUBLANG_SPANISH_COLOMBIA = 9;

const int SUBLANG_SPANISH_PERU = 10;

const int SUBLANG_SPANISH_ARGENTINA = 11;

const int SUBLANG_SPANISH_ECUADOR = 12;

const int SUBLANG_SPANISH_CHILE = 13;

const int SUBLANG_SPANISH_URUGUAY = 14;

const int SUBLANG_SPANISH_PARAGUAY = 15;

const int SUBLANG_SPANISH_BOLIVIA = 16;

const int SUBLANG_SPANISH_EL_SALVADOR = 17;

const int SUBLANG_SPANISH_HONDURAS = 18;

const int SUBLANG_SPANISH_NICARAGUA = 19;

const int SUBLANG_SPANISH_PUERTO_RICO = 20;

const int SUBLANG_SPANISH_US = 21;

const int SUBLANG_SWAHILI_KENYA = 1;

const int SUBLANG_SWEDISH = 1;

const int SUBLANG_SWEDISH_FINLAND = 2;

const int SUBLANG_SYRIAC_SYRIA = 1;

const int SUBLANG_TAJIK_TAJIKISTAN = 1;

const int SUBLANG_TAMAZIGHT_ALGERIA_LATIN = 2;

const int SUBLANG_TAMAZIGHT_MOROCCO_TIFINAGH = 4;

const int SUBLANG_TAMIL_INDIA = 1;

const int SUBLANG_TAMIL_SRI_LANKA = 2;

const int SUBLANG_TATAR_RUSSIA = 1;

const int SUBLANG_TELUGU_INDIA = 1;

const int SUBLANG_THAI_THAILAND = 1;

const int SUBLANG_TIBETAN_PRC = 1;

const int SUBLANG_TIGRIGNA_ERITREA = 2;

const int SUBLANG_TIGRINYA_ERITREA = 2;

const int SUBLANG_TIGRINYA_ETHIOPIA = 1;

const int SUBLANG_TSWANA_BOTSWANA = 2;

const int SUBLANG_TSWANA_SOUTH_AFRICA = 1;

const int SUBLANG_TURKISH_TURKEY = 1;

const int SUBLANG_TURKMEN_TURKMENISTAN = 1;

const int SUBLANG_UIGHUR_PRC = 1;

const int SUBLANG_UKRAINIAN_UKRAINE = 1;

const int SUBLANG_UPPER_SORBIAN_GERMANY = 1;

const int SUBLANG_URDU_PAKISTAN = 1;

const int SUBLANG_URDU_INDIA = 2;

const int SUBLANG_UZBEK_LATIN = 1;

const int SUBLANG_UZBEK_CYRILLIC = 2;

const int SUBLANG_VALENCIAN_VALENCIA = 2;

const int SUBLANG_VIETNAMESE_VIETNAM = 1;

const int SUBLANG_WELSH_UNITED_KINGDOM = 1;

const int SUBLANG_WOLOF_SENEGAL = 1;

const int SUBLANG_XHOSA_SOUTH_AFRICA = 1;

const int SUBLANG_YAKUT_RUSSIA = 1;

const int SUBLANG_YI_PRC = 1;

const int SUBLANG_YORUBA_NIGERIA = 1;

const int SUBLANG_ZULU_SOUTH_AFRICA = 1;

const int SORT_DEFAULT = 0;

const int SORT_INVARIANT_MATH = 1;

const int SORT_JAPANESE_XJIS = 0;

const int SORT_JAPANESE_UNICODE = 1;

const int SORT_JAPANESE_RADICALSTROKE = 4;

const int SORT_CHINESE_BIG5 = 0;

const int SORT_CHINESE_PRCP = 0;

const int SORT_CHINESE_UNICODE = 1;

const int SORT_CHINESE_PRC = 2;

const int SORT_CHINESE_BOPOMOFO = 3;

const int SORT_CHINESE_RADICALSTROKE = 4;

const int SORT_KOREAN_KSC = 0;

const int SORT_KOREAN_UNICODE = 1;

const int SORT_GERMAN_PHONE_BOOK = 1;

const int SORT_HUNGARIAN_DEFAULT = 0;

const int SORT_HUNGARIAN_TECHNICAL = 1;

const int SORT_GEORGIAN_TRADITIONAL = 0;

const int SORT_GEORGIAN_MODERN = 1;

const int NLS_VALID_LOCALE_MASK = 1048575;

const int LOCALE_NAME_MAX_LENGTH = 85;

const int LANG_SYSTEM_DEFAULT = 2048;

const int LANG_USER_DEFAULT = 1024;

const int LOCALE_SYSTEM_DEFAULT = 2048;

const int LOCALE_USER_DEFAULT = 1024;

const int LOCALE_CUSTOM_DEFAULT = 3072;

const int LOCALE_CUSTOM_UNSPECIFIED = 4096;

const int LOCALE_CUSTOM_UI_DEFAULT = 5120;

const int LOCALE_NEUTRAL = 0;

const int LOCALE_INVARIANT = 127;

const int LOCALE_TRANSIENT_KEYBOARD1 = 8192;

const int LOCALE_TRANSIENT_KEYBOARD2 = 9216;

const int LOCALE_TRANSIENT_KEYBOARD3 = 10240;

const int LOCALE_TRANSIENT_KEYBOARD4 = 11264;

const int LOCALE_UNASSIGNED_LCID = 4096;

const int STATUS_WAIT_0 = 0;

const int STATUS_ABANDONED_WAIT_0 = 128;

const int STATUS_USER_APC = 192;

const int STATUS_TIMEOUT = 258;

const int STATUS_PENDING = 259;

const int DBG_EXCEPTION_HANDLED = 65537;

const int DBG_CONTINUE = 65538;

const int STATUS_SEGMENT_NOTIFICATION = 1073741829;

const int STATUS_FATAL_APP_EXIT = 1073741845;

const int DBG_REPLY_LATER = 1073807361;

const int DBG_TERMINATE_THREAD = 1073807363;

const int DBG_TERMINATE_PROCESS = 1073807364;

const int DBG_CONTROL_C = 1073807365;

const int DBG_PRINTEXCEPTION_C = 1073807366;

const int DBG_RIPEXCEPTION = 1073807367;

const int DBG_CONTROL_BREAK = 1073807368;

const int DBG_COMMAND_EXCEPTION = 1073807369;

const int DBG_PRINTEXCEPTION_WIDE_C = 1073807370;

const int STATUS_GUARD_PAGE_VIOLATION = 2147483649;

const int STATUS_DATATYPE_MISALIGNMENT = 2147483650;

const int STATUS_BREAKPOINT = 2147483651;

const int STATUS_SINGLE_STEP = 2147483652;

const int STATUS_LONGJUMP = 2147483686;

const int STATUS_UNWIND_CONSOLIDATE = 2147483689;

const int DBG_EXCEPTION_NOT_HANDLED = 2147549185;

const int STATUS_ACCESS_VIOLATION = 3221225477;

const int STATUS_IN_PAGE_ERROR = 3221225478;

const int STATUS_INVALID_HANDLE = 3221225480;

const int STATUS_INVALID_PARAMETER = 3221225485;

const int STATUS_NO_MEMORY = 3221225495;

const int STATUS_ILLEGAL_INSTRUCTION = 3221225501;

const int STATUS_NONCONTINUABLE_EXCEPTION = 3221225509;

const int STATUS_INVALID_DISPOSITION = 3221225510;

const int STATUS_ARRAY_BOUNDS_EXCEEDED = 3221225612;

const int STATUS_FLOAT_DENORMAL_OPERAND = 3221225613;

const int STATUS_FLOAT_DIVIDE_BY_ZERO = 3221225614;

const int STATUS_FLOAT_INEXACT_RESULT = 3221225615;

const int STATUS_FLOAT_INVALID_OPERATION = 3221225616;

const int STATUS_FLOAT_OVERFLOW = 3221225617;

const int STATUS_FLOAT_STACK_CHECK = 3221225618;

const int STATUS_FLOAT_UNDERFLOW = 3221225619;

const int STATUS_INTEGER_DIVIDE_BY_ZERO = 3221225620;

const int STATUS_INTEGER_OVERFLOW = 3221225621;

const int STATUS_PRIVILEGED_INSTRUCTION = 3221225622;

const int STATUS_STACK_OVERFLOW = 3221225725;

const int STATUS_DLL_NOT_FOUND = 3221225781;

const int STATUS_ORDINAL_NOT_FOUND = 3221225784;

const int STATUS_ENTRYPOINT_NOT_FOUND = 3221225785;

const int STATUS_CONTROL_C_EXIT = 3221225786;

const int STATUS_DLL_INIT_FAILED = 3221225794;

const int STATUS_CONTROL_STACK_VIOLATION = 3221225906;

const int STATUS_FLOAT_MULTIPLE_FAULTS = 3221226164;

const int STATUS_FLOAT_MULTIPLE_TRAPS = 3221226165;

const int STATUS_REG_NAT_CONSUMPTION = 3221226185;

const int STATUS_HEAP_CORRUPTION = 3221226356;

const int STATUS_STACK_BUFFER_OVERRUN = 3221226505;

const int STATUS_INVALID_CRUNTIME_PARAMETER = 3221226519;

const int STATUS_ASSERTION_FAILURE = 3221226528;

const int STATUS_ENCLAVE_VIOLATION = 3221226658;

const int STATUS_INTERRUPTED = 3221226773;

const int STATUS_THREAD_NOT_RUNNING = 3221226774;

const int STATUS_ALREADY_REGISTERED = 3221227288;

const int STATUS_SXS_EARLY_DEACTIVATION = 3222601743;

const int STATUS_SXS_INVALID_DEACTIVATION = 3222601744;

const int MAXIMUM_WAIT_OBJECTS = 64;

const int MAXIMUM_SUSPEND_COUNT = 127;

const int _MM_HINT_T0 = 1;

const int _MM_HINT_T1 = 2;

const int _MM_HINT_T2 = 3;

const int _MM_HINT_NTA = 0;

const int PF_TEMPORAL_LEVEL_1 = 1;

const int PF_TEMPORAL_LEVEL_2 = 2;

const int PF_TEMPORAL_LEVEL_3 = 3;

const int PF_NON_TEMPORAL_LEVEL_ALL = 0;

const int EXCEPTION_READ_FAULT = 0;

const int EXCEPTION_WRITE_FAULT = 1;

const int EXCEPTION_EXECUTE_FAULT = 8;

const int CONTEXT_AMD64 = 1048576;

const int CONTEXT_CONTROL = 1048577;

const int CONTEXT_INTEGER = 1048578;

const int CONTEXT_SEGMENTS = 1048580;

const int CONTEXT_FLOATING_POINT = 1048584;

const int CONTEXT_DEBUG_REGISTERS = 1048592;

const int CONTEXT_FULL = 1048587;

const int CONTEXT_ALL = 1048607;

const int CONTEXT_XSTATE = 1048640;

const int CONTEXT_EXCEPTION_ACTIVE = 134217728;

const int CONTEXT_SERVICE_ACTIVE = 268435456;

const int CONTEXT_EXCEPTION_REQUEST = 1073741824;

const int CONTEXT_EXCEPTION_REPORTING = 2147483648;

const int INITIAL_MXCSR = 8064;

const int INITIAL_FPCSR = 639;

const int RUNTIME_FUNCTION_INDIRECT = 1;

const int UNW_FLAG_NHANDLER = 0;

const int UNW_FLAG_EHANDLER = 1;

const int UNW_FLAG_UHANDLER = 2;

const int UNW_FLAG_CHAININFO = 4;

const int UNW_FLAG_NO_EPILOGUE = 2147483648;

const int UNWIND_CHAIN_LIMIT = 32;

const int UNWIND_HISTORY_TABLE_SIZE = 12;

const String OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK_EXPORT_NAME =
    'OutOfProcessFunctionTableCallback';

const int WOW64_CONTEXT_i386 = 65536;

const int WOW64_CONTEXT_i486 = 65536;

const int WOW64_CONTEXT_CONTROL = 65537;

const int WOW64_CONTEXT_INTEGER = 65538;

const int WOW64_CONTEXT_SEGMENTS = 65540;

const int WOW64_CONTEXT_FLOATING_POINT = 65544;

const int WOW64_CONTEXT_DEBUG_REGISTERS = 65552;

const int WOW64_CONTEXT_EXTENDED_REGISTERS = 65568;

const int WOW64_CONTEXT_FULL = 65543;

const int WOW64_CONTEXT_ALL = 65599;

const int WOW64_CONTEXT_XSTATE = 65600;

const int WOW64_CONTEXT_EXCEPTION_ACTIVE = 134217728;

const int WOW64_CONTEXT_SERVICE_ACTIVE = 268435456;

const int WOW64_CONTEXT_EXCEPTION_REQUEST = 1073741824;

const int WOW64_CONTEXT_EXCEPTION_REPORTING = 2147483648;

const int WOW64_SIZE_OF_80387_REGISTERS = 80;

const int WOW64_MAXIMUM_SUPPORTED_EXTENSION = 512;

const int EXCEPTION_NONCONTINUABLE = 1;

const int EXCEPTION_UNWINDING = 2;

const int EXCEPTION_EXIT_UNWIND = 4;

const int EXCEPTION_STACK_INVALID = 8;

const int EXCEPTION_NESTED_CALL = 16;

const int EXCEPTION_TARGET_UNWIND = 32;

const int EXCEPTION_COLLIDED_UNWIND = 64;

const int EXCEPTION_UNWIND = 102;

const int EXCEPTION_MAXIMUM_PARAMETERS = 15;

const int DELETE = 65536;

const int READ_CONTROL = 131072;

const int WRITE_DAC = 262144;

const int WRITE_OWNER = 524288;

const int SYNCHRONIZE = 1048576;

const int STANDARD_RIGHTS_REQUIRED = 983040;

const int STANDARD_RIGHTS_READ = 131072;

const int STANDARD_RIGHTS_WRITE = 131072;

const int STANDARD_RIGHTS_EXECUTE = 131072;

const int STANDARD_RIGHTS_ALL = 2031616;

const int SPECIFIC_RIGHTS_ALL = 65535;

const int ACCESS_SYSTEM_SECURITY = 16777216;

const int MAXIMUM_ALLOWED = 33554432;

const int GENERIC_READ = 2147483648;

const int GENERIC_WRITE = 1073741824;

const int GENERIC_EXECUTE = 536870912;

const int GENERIC_ALL = 268435456;

const int SID_REVISION = 1;

const int SID_MAX_SUB_AUTHORITIES = 15;

const int SID_RECOMMENDED_SUB_AUTHORITIES = 1;

const int SECURITY_MAX_SID_SIZE = 68;

const int SECURITY_MAX_SID_STRING_CHARACTERS = 187;

const int SID_HASH_SIZE = 32;

const int SECURITY_NULL_RID = 0;

const int SECURITY_WORLD_RID = 0;

const int SECURITY_LOCAL_RID = 0;

const int SECURITY_LOCAL_LOGON_RID = 1;

const int SECURITY_CREATOR_OWNER_RID = 0;

const int SECURITY_CREATOR_GROUP_RID = 1;

const int SECURITY_CREATOR_OWNER_SERVER_RID = 2;

const int SECURITY_CREATOR_GROUP_SERVER_RID = 3;

const int SECURITY_CREATOR_OWNER_RIGHTS_RID = 4;

const int SECURITY_DIALUP_RID = 1;

const int SECURITY_NETWORK_RID = 2;

const int SECURITY_BATCH_RID = 3;

const int SECURITY_INTERACTIVE_RID = 4;

const int SECURITY_LOGON_IDS_RID = 5;

const int SECURITY_LOGON_IDS_RID_COUNT = 3;

const int SECURITY_SERVICE_RID = 6;

const int SECURITY_ANONYMOUS_LOGON_RID = 7;

const int SECURITY_PROXY_RID = 8;

const int SECURITY_ENTERPRISE_CONTROLLERS_RID = 9;

const int SECURITY_SERVER_LOGON_RID = 9;

const int SECURITY_PRINCIPAL_SELF_RID = 10;

const int SECURITY_AUTHENTICATED_USER_RID = 11;

const int SECURITY_RESTRICTED_CODE_RID = 12;

const int SECURITY_TERMINAL_SERVER_RID = 13;

const int SECURITY_REMOTE_LOGON_RID = 14;

const int SECURITY_THIS_ORGANIZATION_RID = 15;

const int SECURITY_IUSER_RID = 17;

const int SECURITY_LOCAL_SYSTEM_RID = 18;

const int SECURITY_LOCAL_SERVICE_RID = 19;

const int SECURITY_NETWORK_SERVICE_RID = 20;

const int SECURITY_NT_NON_UNIQUE = 21;

const int SECURITY_NT_NON_UNIQUE_SUB_AUTH_COUNT = 3;

const int SECURITY_ENTERPRISE_READONLY_CONTROLLERS_RID = 22;

const int SECURITY_BUILTIN_DOMAIN_RID = 32;

const int SECURITY_WRITE_RESTRICTED_CODE_RID = 33;

const int SECURITY_PACKAGE_BASE_RID = 64;

const int SECURITY_PACKAGE_RID_COUNT = 2;

const int SECURITY_PACKAGE_NTLM_RID = 10;

const int SECURITY_PACKAGE_SCHANNEL_RID = 14;

const int SECURITY_PACKAGE_DIGEST_RID = 21;

const int SECURITY_CRED_TYPE_BASE_RID = 65;

const int SECURITY_CRED_TYPE_RID_COUNT = 2;

const int SECURITY_CRED_TYPE_THIS_ORG_CERT_RID = 1;

const int SECURITY_MIN_BASE_RID = 80;

const int SECURITY_SERVICE_ID_BASE_RID = 80;

const int SECURITY_SERVICE_ID_RID_COUNT = 6;

const int SECURITY_RESERVED_ID_BASE_RID = 81;

const int SECURITY_APPPOOL_ID_BASE_RID = 82;

const int SECURITY_APPPOOL_ID_RID_COUNT = 6;

const int SECURITY_VIRTUALSERVER_ID_BASE_RID = 83;

const int SECURITY_VIRTUALSERVER_ID_RID_COUNT = 6;

const int SECURITY_USERMODEDRIVERHOST_ID_BASE_RID = 84;

const int SECURITY_USERMODEDRIVERHOST_ID_RID_COUNT = 6;

const int SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_BASE_RID = 85;

const int SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_RID_COUNT = 6;

const int SECURITY_WMIHOST_ID_BASE_RID = 86;

const int SECURITY_WMIHOST_ID_RID_COUNT = 6;

const int SECURITY_TASK_ID_BASE_RID = 87;

const int SECURITY_NFS_ID_BASE_RID = 88;

const int SECURITY_COM_ID_BASE_RID = 89;

const int SECURITY_WINDOW_MANAGER_BASE_RID = 90;

const int SECURITY_RDV_GFX_BASE_RID = 91;

const int SECURITY_DASHOST_ID_BASE_RID = 92;

const int SECURITY_DASHOST_ID_RID_COUNT = 6;

const int SECURITY_USERMANAGER_ID_BASE_RID = 93;

const int SECURITY_USERMANAGER_ID_RID_COUNT = 6;

const int SECURITY_WINRM_ID_BASE_RID = 94;

const int SECURITY_WINRM_ID_RID_COUNT = 6;

const int SECURITY_CCG_ID_BASE_RID = 95;

const int SECURITY_UMFD_BASE_RID = 96;

const int SECURITY_VIRTUALACCOUNT_ID_RID_COUNT = 6;

const int SECURITY_MAX_BASE_RID = 111;

const int SECURITY_MAX_ALWAYS_FILTERED = 999;

const int SECURITY_MIN_NEVER_FILTERED = 1000;

const int SECURITY_OTHER_ORGANIZATION_RID = 1000;

const int SECURITY_WINDOWSMOBILE_ID_BASE_RID = 112;

const int SECURITY_INSTALLER_GROUP_CAPABILITY_BASE = 32;

const int SECURITY_INSTALLER_GROUP_CAPABILITY_RID_COUNT = 9;

const int SECURITY_INSTALLER_CAPABILITY_RID_COUNT = 10;

const int SECURITY_LOCAL_ACCOUNT_RID = 113;

const int SECURITY_LOCAL_ACCOUNT_AND_ADMIN_RID = 114;

const int DOMAIN_GROUP_RID_AUTHORIZATION_DATA_IS_COMPOUNDED = 496;

const int DOMAIN_GROUP_RID_AUTHORIZATION_DATA_CONTAINS_CLAIMS = 497;

const int DOMAIN_GROUP_RID_ENTERPRISE_READONLY_DOMAIN_CONTROLLERS = 498;

const int FOREST_USER_RID_MAX = 499;

const int DOMAIN_USER_RID_ADMIN = 500;

const int DOMAIN_USER_RID_GUEST = 501;

const int DOMAIN_USER_RID_KRBTGT = 502;

const int DOMAIN_USER_RID_DEFAULT_ACCOUNT = 503;

const int DOMAIN_USER_RID_WDAG_ACCOUNT = 504;

const int DOMAIN_USER_RID_MAX = 999;

const int DOMAIN_GROUP_RID_ADMINS = 512;

const int DOMAIN_GROUP_RID_USERS = 513;

const int DOMAIN_GROUP_RID_GUESTS = 514;

const int DOMAIN_GROUP_RID_COMPUTERS = 515;

const int DOMAIN_GROUP_RID_CONTROLLERS = 516;

const int DOMAIN_GROUP_RID_CERT_ADMINS = 517;

const int DOMAIN_GROUP_RID_SCHEMA_ADMINS = 518;

const int DOMAIN_GROUP_RID_ENTERPRISE_ADMINS = 519;

const int DOMAIN_GROUP_RID_POLICY_ADMINS = 520;

const int DOMAIN_GROUP_RID_READONLY_CONTROLLERS = 521;

const int DOMAIN_GROUP_RID_CLONEABLE_CONTROLLERS = 522;

const int DOMAIN_GROUP_RID_CDC_RESERVED = 524;

const int DOMAIN_GROUP_RID_PROTECTED_USERS = 525;

const int DOMAIN_GROUP_RID_KEY_ADMINS = 526;

const int DOMAIN_GROUP_RID_ENTERPRISE_KEY_ADMINS = 527;

const int DOMAIN_ALIAS_RID_ADMINS = 544;

const int DOMAIN_ALIAS_RID_USERS = 545;

const int DOMAIN_ALIAS_RID_GUESTS = 546;

const int DOMAIN_ALIAS_RID_POWER_USERS = 547;

const int DOMAIN_ALIAS_RID_ACCOUNT_OPS = 548;

const int DOMAIN_ALIAS_RID_SYSTEM_OPS = 549;

const int DOMAIN_ALIAS_RID_PRINT_OPS = 550;

const int DOMAIN_ALIAS_RID_BACKUP_OPS = 551;

const int DOMAIN_ALIAS_RID_REPLICATOR = 552;

const int DOMAIN_ALIAS_RID_RAS_SERVERS = 553;

const int DOMAIN_ALIAS_RID_PREW2KCOMPACCESS = 554;

const int DOMAIN_ALIAS_RID_REMOTE_DESKTOP_USERS = 555;

const int DOMAIN_ALIAS_RID_NETWORK_CONFIGURATION_OPS = 556;

const int DOMAIN_ALIAS_RID_INCOMING_FOREST_TRUST_BUILDERS = 557;

const int DOMAIN_ALIAS_RID_MONITORING_USERS = 558;

const int DOMAIN_ALIAS_RID_LOGGING_USERS = 559;

const int DOMAIN_ALIAS_RID_AUTHORIZATIONACCESS = 560;

const int DOMAIN_ALIAS_RID_TS_LICENSE_SERVERS = 561;

const int DOMAIN_ALIAS_RID_DCOM_USERS = 562;

const int DOMAIN_ALIAS_RID_IUSERS = 568;

const int DOMAIN_ALIAS_RID_CRYPTO_OPERATORS = 569;

const int DOMAIN_ALIAS_RID_CACHEABLE_PRINCIPALS_GROUP = 571;

const int DOMAIN_ALIAS_RID_NON_CACHEABLE_PRINCIPALS_GROUP = 572;

const int DOMAIN_ALIAS_RID_EVENT_LOG_READERS_GROUP = 573;

const int DOMAIN_ALIAS_RID_CERTSVC_DCOM_ACCESS_GROUP = 574;

const int DOMAIN_ALIAS_RID_RDS_REMOTE_ACCESS_SERVERS = 575;

const int DOMAIN_ALIAS_RID_RDS_ENDPOINT_SERVERS = 576;

const int DOMAIN_ALIAS_RID_RDS_MANAGEMENT_SERVERS = 577;

const int DOMAIN_ALIAS_RID_HYPER_V_ADMINS = 578;

const int DOMAIN_ALIAS_RID_ACCESS_CONTROL_ASSISTANCE_OPS = 579;

const int DOMAIN_ALIAS_RID_REMOTE_MANAGEMENT_USERS = 580;

const int DOMAIN_ALIAS_RID_DEFAULT_ACCOUNT = 581;

const int DOMAIN_ALIAS_RID_STORAGE_REPLICA_ADMINS = 582;

const int DOMAIN_ALIAS_RID_DEVICE_OWNERS = 583;

const int SECURITY_APP_PACKAGE_BASE_RID = 2;

const int SECURITY_BUILTIN_APP_PACKAGE_RID_COUNT = 2;

const int SECURITY_APP_PACKAGE_RID_COUNT = 8;

const int SECURITY_CAPABILITY_BASE_RID = 3;

const int SECURITY_CAPABILITY_APP_RID = 1024;

const int SECURITY_BUILTIN_CAPABILITY_RID_COUNT = 2;

const int SECURITY_CAPABILITY_RID_COUNT = 5;

const int SECURITY_PARENT_PACKAGE_RID_COUNT = 8;

const int SECURITY_CHILD_PACKAGE_RID_COUNT = 12;

const int SECURITY_BUILTIN_PACKAGE_ANY_PACKAGE = 1;

const int SECURITY_BUILTIN_PACKAGE_ANY_RESTRICTED_PACKAGE = 2;

const int SECURITY_CAPABILITY_INTERNET_CLIENT = 1;

const int SECURITY_CAPABILITY_INTERNET_CLIENT_SERVER = 2;

const int SECURITY_CAPABILITY_PRIVATE_NETWORK_CLIENT_SERVER = 3;

const int SECURITY_CAPABILITY_PICTURES_LIBRARY = 4;

const int SECURITY_CAPABILITY_VIDEOS_LIBRARY = 5;

const int SECURITY_CAPABILITY_MUSIC_LIBRARY = 6;

const int SECURITY_CAPABILITY_DOCUMENTS_LIBRARY = 7;

const int SECURITY_CAPABILITY_ENTERPRISE_AUTHENTICATION = 8;

const int SECURITY_CAPABILITY_SHARED_USER_CERTIFICATES = 9;

const int SECURITY_CAPABILITY_REMOVABLE_STORAGE = 10;

const int SECURITY_CAPABILITY_APPOINTMENTS = 11;

const int SECURITY_CAPABILITY_CONTACTS = 12;

const int SECURITY_CAPABILITY_INTERNET_EXPLORER = 4096;

const int SECURITY_MANDATORY_UNTRUSTED_RID = 0;

const int SECURITY_MANDATORY_LOW_RID = 4096;

const int SECURITY_MANDATORY_MEDIUM_RID = 8192;

const int SECURITY_MANDATORY_MEDIUM_PLUS_RID = 8448;

const int SECURITY_MANDATORY_HIGH_RID = 12288;

const int SECURITY_MANDATORY_SYSTEM_RID = 16384;

const int SECURITY_MANDATORY_PROTECTED_PROCESS_RID = 20480;

const int SECURITY_MANDATORY_MAXIMUM_USER_RID = 16384;

const int SECURITY_AUTHENTICATION_AUTHORITY_RID_COUNT = 1;

const int SECURITY_AUTHENTICATION_AUTHORITY_ASSERTED_RID = 1;

const int SECURITY_AUTHENTICATION_SERVICE_ASSERTED_RID = 2;

const int SECURITY_AUTHENTICATION_FRESH_KEY_AUTH_RID = 3;

const int SECURITY_AUTHENTICATION_KEY_TRUST_RID = 4;

const int SECURITY_AUTHENTICATION_KEY_PROPERTY_MFA_RID = 5;

const int SECURITY_AUTHENTICATION_KEY_PROPERTY_ATTESTATION_RID = 6;

const int SECURITY_PROCESS_TRUST_AUTHORITY_RID_COUNT = 2;

const int SECURITY_PROCESS_PROTECTION_TYPE_FULL_RID = 1024;

const int SECURITY_PROCESS_PROTECTION_TYPE_LITE_RID = 512;

const int SECURITY_PROCESS_PROTECTION_TYPE_NONE_RID = 0;

const int SECURITY_PROCESS_PROTECTION_LEVEL_WINTCB_RID = 8192;

const int SECURITY_PROCESS_PROTECTION_LEVEL_WINDOWS_RID = 4096;

const int SECURITY_PROCESS_PROTECTION_LEVEL_APP_RID = 2048;

const int SECURITY_PROCESS_PROTECTION_LEVEL_ANTIMALWARE_RID = 1536;

const int SECURITY_PROCESS_PROTECTION_LEVEL_AUTHENTICODE_RID = 1024;

const int SECURITY_PROCESS_PROTECTION_LEVEL_NONE_RID = 0;

const int SECURITY_TRUSTED_INSTALLER_RID1 = 956008885;

const int SECURITY_TRUSTED_INSTALLER_RID2 = 3418522649;

const int SECURITY_TRUSTED_INSTALLER_RID3 = 1831038044;

const int SECURITY_TRUSTED_INSTALLER_RID4 = 1853292631;

const int SECURITY_TRUSTED_INSTALLER_RID5 = 2271478464;

const int SE_GROUP_MANDATORY = 1;

const int SE_GROUP_ENABLED_BY_DEFAULT = 2;

const int SE_GROUP_ENABLED = 4;

const int SE_GROUP_OWNER = 8;

const int SE_GROUP_USE_FOR_DENY_ONLY = 16;

const int SE_GROUP_INTEGRITY = 32;

const int SE_GROUP_INTEGRITY_ENABLED = 64;

const int SE_GROUP_LOGON_ID = 3221225472;

const int SE_GROUP_RESOURCE = 536870912;

const int SE_GROUP_VALID_ATTRIBUTES = 3758096511;

const int ACL_REVISION = 2;

const int ACL_REVISION_DS = 4;

const int ACL_REVISION1 = 1;

const int MIN_ACL_REVISION = 2;

const int ACL_REVISION2 = 2;

const int ACL_REVISION3 = 3;

const int ACL_REVISION4 = 4;

const int MAX_ACL_REVISION = 4;

const int ACCESS_MIN_MS_ACE_TYPE = 0;

const int ACCESS_ALLOWED_ACE_TYPE = 0;

const int ACCESS_DENIED_ACE_TYPE = 1;

const int SYSTEM_AUDIT_ACE_TYPE = 2;

const int SYSTEM_ALARM_ACE_TYPE = 3;

const int ACCESS_MAX_MS_V2_ACE_TYPE = 3;

const int ACCESS_ALLOWED_COMPOUND_ACE_TYPE = 4;

const int ACCESS_MAX_MS_V3_ACE_TYPE = 4;

const int ACCESS_MIN_MS_OBJECT_ACE_TYPE = 5;

const int ACCESS_ALLOWED_OBJECT_ACE_TYPE = 5;

const int ACCESS_DENIED_OBJECT_ACE_TYPE = 6;

const int SYSTEM_AUDIT_OBJECT_ACE_TYPE = 7;

const int SYSTEM_ALARM_OBJECT_ACE_TYPE = 8;

const int ACCESS_MAX_MS_OBJECT_ACE_TYPE = 8;

const int ACCESS_MAX_MS_V4_ACE_TYPE = 8;

const int ACCESS_MAX_MS_ACE_TYPE = 8;

const int ACCESS_ALLOWED_CALLBACK_ACE_TYPE = 9;

const int ACCESS_DENIED_CALLBACK_ACE_TYPE = 10;

const int ACCESS_ALLOWED_CALLBACK_OBJECT_ACE_TYPE = 11;

const int ACCESS_DENIED_CALLBACK_OBJECT_ACE_TYPE = 12;

const int SYSTEM_AUDIT_CALLBACK_ACE_TYPE = 13;

const int SYSTEM_ALARM_CALLBACK_ACE_TYPE = 14;

const int SYSTEM_AUDIT_CALLBACK_OBJECT_ACE_TYPE = 15;

const int SYSTEM_ALARM_CALLBACK_OBJECT_ACE_TYPE = 16;

const int SYSTEM_MANDATORY_LABEL_ACE_TYPE = 17;

const int SYSTEM_RESOURCE_ATTRIBUTE_ACE_TYPE = 18;

const int SYSTEM_SCOPED_POLICY_ID_ACE_TYPE = 19;

const int SYSTEM_PROCESS_TRUST_LABEL_ACE_TYPE = 20;

const int SYSTEM_ACCESS_FILTER_ACE_TYPE = 21;

const int ACCESS_MAX_MS_V5_ACE_TYPE = 21;

const int OBJECT_INHERIT_ACE = 1;

const int CONTAINER_INHERIT_ACE = 2;

const int NO_PROPAGATE_INHERIT_ACE = 4;

const int INHERIT_ONLY_ACE = 8;

const int INHERITED_ACE = 16;

const int VALID_INHERIT_FLAGS = 31;

const int CRITICAL_ACE_FLAG = 32;

const int SUCCESSFUL_ACCESS_ACE_FLAG = 64;

const int FAILED_ACCESS_ACE_FLAG = 128;

const int TRUST_PROTECTED_FILTER_ACE_FLAG = 64;

const int SYSTEM_MANDATORY_LABEL_NO_WRITE_UP = 1;

const int SYSTEM_MANDATORY_LABEL_NO_READ_UP = 2;

const int SYSTEM_MANDATORY_LABEL_NO_EXECUTE_UP = 4;

const int SYSTEM_MANDATORY_LABEL_VALID_MASK = 7;

const int SYSTEM_PROCESS_TRUST_LABEL_VALID_MASK = 16777215;

const int SYSTEM_PROCESS_TRUST_NOCONSTRAINT_MASK = 4294967295;

const int SYSTEM_ACCESS_FILTER_VALID_MASK = 16777215;

const int SYSTEM_ACCESS_FILTER_NOCONSTRAINT_MASK = 4294967295;

const int ACE_OBJECT_TYPE_PRESENT = 1;

const int ACE_INHERITED_OBJECT_TYPE_PRESENT = 2;

const int SECURITY_DESCRIPTOR_REVISION = 1;

const int SECURITY_DESCRIPTOR_REVISION1 = 1;

const int SECURITY_DESCRIPTOR_MIN_LENGTH = 40;

const int SE_OWNER_DEFAULTED = 1;

const int SE_GROUP_DEFAULTED = 2;

const int SE_DACL_PRESENT = 4;

const int SE_DACL_DEFAULTED = 8;

const int SE_SACL_PRESENT = 16;

const int SE_SACL_DEFAULTED = 32;

const int SE_DACL_AUTO_INHERIT_REQ = 256;

const int SE_SACL_AUTO_INHERIT_REQ = 512;

const int SE_DACL_AUTO_INHERITED = 1024;

const int SE_SACL_AUTO_INHERITED = 2048;

const int SE_DACL_PROTECTED = 4096;

const int SE_SACL_PROTECTED = 8192;

const int SE_RM_CONTROL_VALID = 16384;

const int SE_SELF_RELATIVE = 32768;

const int ACCESS_OBJECT_GUID = 0;

const int ACCESS_PROPERTY_SET_GUID = 1;

const int ACCESS_PROPERTY_GUID = 2;

const int ACCESS_MAX_LEVEL = 4;

const int AUDIT_ALLOW_NO_PRIVILEGE = 1;

const String ACCESS_DS_SOURCE_A = 'DS';

const String ACCESS_DS_SOURCE_W = 'D';

const String ACCESS_DS_OBJECT_TYPE_NAME_A = 'Directory Service Object';

const String ACCESS_DS_OBJECT_TYPE_NAME_W = 'D';

const int SE_PRIVILEGE_ENABLED_BY_DEFAULT = 1;

const int SE_PRIVILEGE_ENABLED = 2;

const int SE_PRIVILEGE_REMOVED = 4;

const int SE_PRIVILEGE_USED_FOR_ACCESS = 2147483648;

const int SE_PRIVILEGE_VALID_ATTRIBUTES = 2147483655;

const int PRIVILEGE_SET_ALL_NECESSARY = 1;

const int ACCESS_REASON_TYPE_MASK = 16711680;

const int ACCESS_REASON_DATA_MASK = 65535;

const int ACCESS_REASON_STAGING_MASK = 2147483648;

const int ACCESS_REASON_EXDATA_MASK = 2130706432;

const int SE_SECURITY_DESCRIPTOR_FLAG_NO_OWNER_ACE = 1;

const int SE_SECURITY_DESCRIPTOR_FLAG_NO_LABEL_ACE = 2;

const int SE_SECURITY_DESCRIPTOR_FLAG_NO_ACCESS_FILTER_ACE = 4;

const int SE_SECURITY_DESCRIPTOR_VALID_FLAGS = 7;

const int SE_ACCESS_CHECK_FLAG_NO_LEARNING_MODE_LOGGING = 8;

const int SE_ACCESS_CHECK_VALID_FLAGS = 8;

const String SE_CREATE_TOKEN_NAME = 'SeCreateTokenPrivilege';

const String SE_ASSIGNPRIMARYTOKEN_NAME = 'SeAssignPrimaryTokenPrivilege';

const String SE_LOCK_MEMORY_NAME = 'SeLockMemoryPrivilege';

const String SE_INCREASE_QUOTA_NAME = 'SeIncreaseQuotaPrivilege';

const String SE_UNSOLICITED_INPUT_NAME = 'SeUnsolicitedInputPrivilege';

const String SE_MACHINE_ACCOUNT_NAME = 'SeMachineAccountPrivilege';

const String SE_TCB_NAME = 'SeTcbPrivilege';

const String SE_SECURITY_NAME = 'SeSecurityPrivilege';

const String SE_TAKE_OWNERSHIP_NAME = 'SeTakeOwnershipPrivilege';

const String SE_LOAD_DRIVER_NAME = 'SeLoadDriverPrivilege';

const String SE_SYSTEM_PROFILE_NAME = 'SeSystemProfilePrivilege';

const String SE_SYSTEMTIME_NAME = 'SeSystemtimePrivilege';

const String SE_PROF_SINGLE_PROCESS_NAME = 'SeProfileSingleProcessPrivilege';

const String SE_INC_BASE_PRIORITY_NAME = 'SeIncreaseBasePriorityPrivilege';

const String SE_CREATE_PAGEFILE_NAME = 'SeCreatePagefilePrivilege';

const String SE_CREATE_PERMANENT_NAME = 'SeCreatePermanentPrivilege';

const String SE_BACKUP_NAME = 'SeBackupPrivilege';

const String SE_RESTORE_NAME = 'SeRestorePrivilege';

const String SE_SHUTDOWN_NAME = 'SeShutdownPrivilege';

const String SE_DEBUG_NAME = 'SeDebugPrivilege';

const String SE_AUDIT_NAME = 'SeAuditPrivilege';

const String SE_SYSTEM_ENVIRONMENT_NAME = 'SeSystemEnvironmentPrivilege';

const String SE_CHANGE_NOTIFY_NAME = 'SeChangeNotifyPrivilege';

const String SE_REMOTE_SHUTDOWN_NAME = 'SeRemoteShutdownPrivilege';

const String SE_UNDOCK_NAME = 'SeUndockPrivilege';

const String SE_SYNC_AGENT_NAME = 'SeSyncAgentPrivilege';

const String SE_ENABLE_DELEGATION_NAME = 'SeEnableDelegationPrivilege';

const String SE_MANAGE_VOLUME_NAME = 'SeManageVolumePrivilege';

const String SE_IMPERSONATE_NAME = 'SeImpersonatePrivilege';

const String SE_CREATE_GLOBAL_NAME = 'SeCreateGlobalPrivilege';

const String SE_TRUSTED_CREDMAN_ACCESS_NAME = 'SeTrustedCredManAccessPrivilege';

const String SE_RELABEL_NAME = 'SeRelabelPrivilege';

const String SE_INC_WORKING_SET_NAME = 'SeIncreaseWorkingSetPrivilege';

const String SE_TIME_ZONE_NAME = 'SeTimeZonePrivilege';

const String SE_CREATE_SYMBOLIC_LINK_NAME = 'SeCreateSymbolicLinkPrivilege';

const String SE_DELEGATE_SESSION_USER_IMPERSONATE_NAME =
    'SeDelegateSessionUserImpersonatePrivilege';

const String SE_ACTIVATE_AS_USER_CAPABILITY = 'a';

const String SE_CONSTRAINED_IMPERSONATION_CAPABILITY = 'c';

const String SE_SESSION_IMPERSONATION_CAPABILITY = 's';

const String SE_MUMA_CAPABILITY = 'm';

const String SE_DEVELOPMENT_MODE_NETWORK_CAPABILITY = 'd';

const int SECURITY_MAX_IMPERSONATION_LEVEL = 3;

const int SECURITY_MIN_IMPERSONATION_LEVEL = 0;

const int DEFAULT_IMPERSONATION_LEVEL = 2;

const int TOKEN_ASSIGN_PRIMARY = 1;

const int TOKEN_DUPLICATE = 2;

const int TOKEN_IMPERSONATE = 4;

const int TOKEN_QUERY = 8;

const int TOKEN_QUERY_SOURCE = 16;

const int TOKEN_ADJUST_PRIVILEGES = 32;

const int TOKEN_ADJUST_GROUPS = 64;

const int TOKEN_ADJUST_DEFAULT = 128;

const int TOKEN_ADJUST_SESSIONID = 256;

const int TOKEN_ALL_ACCESS_P = 983295;

const int TOKEN_ALL_ACCESS = 983551;

const int TOKEN_READ = 131080;

const int TOKEN_WRITE = 131296;

const int TOKEN_EXECUTE = 131072;

const int TOKEN_TRUST_CONSTRAINT_MASK = 131096;

const int TOKEN_ACCESS_PSEUDO_HANDLE_WIN8 = 24;

const int TOKEN_ACCESS_PSEUDO_HANDLE = 24;

const int TOKEN_USER_MAX_SIZE = 84;

const int TOKEN_OWNER_MAX_SIZE = 76;

const int TOKEN_MANDATORY_POLICY_OFF = 0;

const int TOKEN_MANDATORY_POLICY_NO_WRITE_UP = 1;

const int TOKEN_MANDATORY_POLICY_NEW_PROCESS_MIN = 2;

const int TOKEN_MANDATORY_POLICY_VALID_MASK = 3;

const int TOKEN_INTEGRITY_LEVEL_MAX_SIZE = 84;

const int POLICY_AUDIT_SUBCATEGORY_COUNT = 59;

const int TOKEN_SOURCE_LENGTH = 8;

const int TOKEN_APPCONTAINER_SID_MAX_SIZE = 76;

const int CLAIM_SECURITY_ATTRIBUTE_TYPE_INVALID = 0;

const int CLAIM_SECURITY_ATTRIBUTE_TYPE_INT64 = 1;

const int CLAIM_SECURITY_ATTRIBUTE_TYPE_UINT64 = 2;

const int CLAIM_SECURITY_ATTRIBUTE_TYPE_STRING = 3;

const int CLAIM_SECURITY_ATTRIBUTE_TYPE_FQBN = 4;

const int CLAIM_SECURITY_ATTRIBUTE_TYPE_SID = 5;

const int CLAIM_SECURITY_ATTRIBUTE_TYPE_BOOLEAN = 6;

const int CLAIM_SECURITY_ATTRIBUTE_TYPE_OCTET_STRING = 16;

const int CLAIM_SECURITY_ATTRIBUTE_NON_INHERITABLE = 1;

const int CLAIM_SECURITY_ATTRIBUTE_VALUE_CASE_SENSITIVE = 2;

const int CLAIM_SECURITY_ATTRIBUTE_USE_FOR_DENY_ONLY = 4;

const int CLAIM_SECURITY_ATTRIBUTE_DISABLED_BY_DEFAULT = 8;

const int CLAIM_SECURITY_ATTRIBUTE_DISABLED = 16;

const int CLAIM_SECURITY_ATTRIBUTE_MANDATORY = 32;

const int CLAIM_SECURITY_ATTRIBUTE_VALID_FLAGS = 63;

const int CLAIM_SECURITY_ATTRIBUTE_CUSTOM_FLAGS = 4294901760;

const int CLAIM_SECURITY_ATTRIBUTES_INFORMATION_VERSION_V1 = 1;

const int CLAIM_SECURITY_ATTRIBUTES_INFORMATION_VERSION = 1;

const int SECURITY_DYNAMIC_TRACKING = 1;

const int SECURITY_STATIC_TRACKING = 0;

const int DISABLE_MAX_PRIVILEGE = 1;

const int SANDBOX_INERT = 2;

const int LUA_TOKEN = 4;

const int WRITE_RESTRICTED = 8;

const int OWNER_SECURITY_INFORMATION = 1;

const int GROUP_SECURITY_INFORMATION = 2;

const int DACL_SECURITY_INFORMATION = 4;

const int SACL_SECURITY_INFORMATION = 8;

const int LABEL_SECURITY_INFORMATION = 16;

const int ATTRIBUTE_SECURITY_INFORMATION = 32;

const int SCOPE_SECURITY_INFORMATION = 64;

const int PROCESS_TRUST_LABEL_SECURITY_INFORMATION = 128;

const int ACCESS_FILTER_SECURITY_INFORMATION = 256;

const int BACKUP_SECURITY_INFORMATION = 65536;

const int PROTECTED_DACL_SECURITY_INFORMATION = 2147483648;

const int PROTECTED_SACL_SECURITY_INFORMATION = 1073741824;

const int UNPROTECTED_DACL_SECURITY_INFORMATION = 536870912;

const int UNPROTECTED_SACL_SECURITY_INFORMATION = 268435456;

const int SE_SIGNING_LEVEL_UNCHECKED = 0;

const int SE_SIGNING_LEVEL_UNSIGNED = 1;

const int SE_SIGNING_LEVEL_ENTERPRISE = 2;

const int SE_SIGNING_LEVEL_CUSTOM_1 = 3;

const int SE_SIGNING_LEVEL_DEVELOPER = 3;

const int SE_SIGNING_LEVEL_AUTHENTICODE = 4;

const int SE_SIGNING_LEVEL_CUSTOM_2 = 5;

const int SE_SIGNING_LEVEL_STORE = 6;

const int SE_SIGNING_LEVEL_CUSTOM_3 = 7;

const int SE_SIGNING_LEVEL_ANTIMALWARE = 7;

const int SE_SIGNING_LEVEL_MICROSOFT = 8;

const int SE_SIGNING_LEVEL_CUSTOM_4 = 9;

const int SE_SIGNING_LEVEL_CUSTOM_5 = 10;

const int SE_SIGNING_LEVEL_DYNAMIC_CODEGEN = 11;

const int SE_SIGNING_LEVEL_WINDOWS = 12;

const int SE_SIGNING_LEVEL_CUSTOM_7 = 13;

const int SE_SIGNING_LEVEL_WINDOWS_TCB = 14;

const int SE_SIGNING_LEVEL_CUSTOM_6 = 15;

const int SE_LEARNING_MODE_FLAG_PERMISSIVE = 1;

const int PROCESS_TERMINATE = 1;

const int PROCESS_CREATE_THREAD = 2;

const int PROCESS_SET_SESSIONID = 4;

const int PROCESS_VM_OPERATION = 8;

const int PROCESS_VM_READ = 16;

const int PROCESS_VM_WRITE = 32;

const int PROCESS_DUP_HANDLE = 64;

const int PROCESS_CREATE_PROCESS = 128;

const int PROCESS_SET_QUOTA = 256;

const int PROCESS_SET_INFORMATION = 512;

const int PROCESS_QUERY_INFORMATION = 1024;

const int PROCESS_SUSPEND_RESUME = 2048;

const int PROCESS_QUERY_LIMITED_INFORMATION = 4096;

const int PROCESS_SET_LIMITED_INFORMATION = 8192;

const int PROCESS_ALL_ACCESS = 2097151;

const int THREAD_TERMINATE = 1;

const int THREAD_SUSPEND_RESUME = 2;

const int THREAD_GET_CONTEXT = 8;

const int THREAD_SET_CONTEXT = 16;

const int THREAD_QUERY_INFORMATION = 64;

const int THREAD_SET_INFORMATION = 32;

const int THREAD_SET_THREAD_TOKEN = 128;

const int THREAD_IMPERSONATE = 256;

const int THREAD_DIRECT_IMPERSONATION = 512;

const int THREAD_SET_LIMITED_INFORMATION = 1024;

const int THREAD_QUERY_LIMITED_INFORMATION = 2048;

const int THREAD_RESUME = 4096;

const int THREAD_ALL_ACCESS = 2097151;

const int JOB_OBJECT_ASSIGN_PROCESS = 1;

const int JOB_OBJECT_SET_ATTRIBUTES = 2;

const int JOB_OBJECT_QUERY = 4;

const int JOB_OBJECT_TERMINATE = 8;

const int JOB_OBJECT_SET_SECURITY_ATTRIBUTES = 16;

const int JOB_OBJECT_IMPERSONATE = 32;

const int JOB_OBJECT_ALL_ACCESS = 2031679;

const int FLS_MAXIMUM_AVAILABLE = 4080;

const int TLS_MINIMUM_AVAILABLE = 64;

const int THREAD_DYNAMIC_CODE_ALLOW = 1;

const int THREAD_BASE_PRIORITY_LOWRT = 15;

const int THREAD_BASE_PRIORITY_MAX = 2;

const int THREAD_BASE_PRIORITY_MIN = -2;

const int THREAD_BASE_PRIORITY_IDLE = -15;

const int MEMORY_PRIORITY_LOWEST = 0;

const int MEMORY_PRIORITY_VERY_LOW = 1;

const int MEMORY_PRIORITY_LOW = 2;

const int MEMORY_PRIORITY_MEDIUM = 3;

const int MEMORY_PRIORITY_BELOW_NORMAL = 4;

const int MEMORY_PRIORITY_NORMAL = 5;

const int DYNAMIC_EH_CONTINUATION_TARGET_ADD = 1;

const int DYNAMIC_EH_CONTINUATION_TARGET_PROCESSED = 2;

const int DYNAMIC_ENFORCED_ADDRESS_RANGE_ADD = 1;

const int DYNAMIC_ENFORCED_ADDRESS_RANGE_PROCESSED = 2;

const int QUOTA_LIMITS_HARDWS_MIN_ENABLE = 1;

const int QUOTA_LIMITS_HARDWS_MIN_DISABLE = 2;

const int QUOTA_LIMITS_HARDWS_MAX_ENABLE = 4;

const int QUOTA_LIMITS_HARDWS_MAX_DISABLE = 8;

const int QUOTA_LIMITS_USE_DEFAULT_LIMITS = 16;

const int MAX_HW_COUNTERS = 16;

const int THREAD_PROFILING_FLAG_DISPATCH = 1;

const int JOB_OBJECT_NET_RATE_CONTROL_MAX_DSCP_TAG = 64;

const int JOB_OBJECT_TERMINATE_AT_END_OF_JOB = 0;

const int JOB_OBJECT_POST_AT_END_OF_JOB = 1;

const int JOB_OBJECT_MSG_END_OF_JOB_TIME = 1;

const int JOB_OBJECT_MSG_END_OF_PROCESS_TIME = 2;

const int JOB_OBJECT_MSG_ACTIVE_PROCESS_LIMIT = 3;

const int JOB_OBJECT_MSG_ACTIVE_PROCESS_ZERO = 4;

const int JOB_OBJECT_MSG_NEW_PROCESS = 6;

const int JOB_OBJECT_MSG_EXIT_PROCESS = 7;

const int JOB_OBJECT_MSG_ABNORMAL_EXIT_PROCESS = 8;

const int JOB_OBJECT_MSG_PROCESS_MEMORY_LIMIT = 9;

const int JOB_OBJECT_MSG_JOB_MEMORY_LIMIT = 10;

const int JOB_OBJECT_MSG_NOTIFICATION_LIMIT = 11;

const int JOB_OBJECT_MSG_JOB_CYCLE_TIME_LIMIT = 12;

const int JOB_OBJECT_MSG_SILO_TERMINATED = 13;

const int JOB_OBJECT_MSG_MINIMUM = 1;

const int JOB_OBJECT_MSG_MAXIMUM = 13;

const int JOB_OBJECT_VALID_COMPLETION_FILTER = 16382;

const int JOB_OBJECT_LIMIT_WORKINGSET = 1;

const int JOB_OBJECT_LIMIT_PROCESS_TIME = 2;

const int JOB_OBJECT_LIMIT_JOB_TIME = 4;

const int JOB_OBJECT_LIMIT_ACTIVE_PROCESS = 8;

const int JOB_OBJECT_LIMIT_AFFINITY = 16;

const int JOB_OBJECT_LIMIT_PRIORITY_CLASS = 32;

const int JOB_OBJECT_LIMIT_PRESERVE_JOB_TIME = 64;

const int JOB_OBJECT_LIMIT_SCHEDULING_CLASS = 128;

const int JOB_OBJECT_LIMIT_PROCESS_MEMORY = 256;

const int JOB_OBJECT_LIMIT_JOB_MEMORY = 512;

const int JOB_OBJECT_LIMIT_JOB_MEMORY_HIGH = 512;

const int JOB_OBJECT_LIMIT_DIE_ON_UNHANDLED_EXCEPTION = 1024;

const int JOB_OBJECT_LIMIT_BREAKAWAY_OK = 2048;

const int JOB_OBJECT_LIMIT_SILENT_BREAKAWAY_OK = 4096;

const int JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE = 8192;

const int JOB_OBJECT_LIMIT_SUBSET_AFFINITY = 16384;

const int JOB_OBJECT_LIMIT_JOB_MEMORY_LOW = 32768;

const int JOB_OBJECT_LIMIT_JOB_READ_BYTES = 65536;

const int JOB_OBJECT_LIMIT_JOB_WRITE_BYTES = 131072;

const int JOB_OBJECT_LIMIT_RATE_CONTROL = 262144;

const int JOB_OBJECT_LIMIT_CPU_RATE_CONTROL = 262144;

const int JOB_OBJECT_LIMIT_IO_RATE_CONTROL = 524288;

const int JOB_OBJECT_LIMIT_NET_RATE_CONTROL = 1048576;

const int JOB_OBJECT_LIMIT_VALID_FLAGS = 524287;

const int JOB_OBJECT_BASIC_LIMIT_VALID_FLAGS = 255;

const int JOB_OBJECT_EXTENDED_LIMIT_VALID_FLAGS = 32767;

const int JOB_OBJECT_NOTIFICATION_LIMIT_VALID_FLAGS = 2064900;

const int JOB_OBJECT_UILIMIT_NONE = 0;

const int JOB_OBJECT_UILIMIT_HANDLES = 1;

const int JOB_OBJECT_UILIMIT_READCLIPBOARD = 2;

const int JOB_OBJECT_UILIMIT_WRITECLIPBOARD = 4;

const int JOB_OBJECT_UILIMIT_SYSTEMPARAMETERS = 8;

const int JOB_OBJECT_UILIMIT_DISPLAYSETTINGS = 16;

const int JOB_OBJECT_UILIMIT_GLOBALATOMS = 32;

const int JOB_OBJECT_UILIMIT_DESKTOP = 64;

const int JOB_OBJECT_UILIMIT_EXITWINDOWS = 128;

const int JOB_OBJECT_UILIMIT_ALL = 255;

const int JOB_OBJECT_UI_VALID_FLAGS = 255;

const int JOB_OBJECT_SECURITY_NO_ADMIN = 1;

const int JOB_OBJECT_SECURITY_RESTRICTED_TOKEN = 2;

const int JOB_OBJECT_SECURITY_ONLY_TOKEN = 4;

const int JOB_OBJECT_SECURITY_FILTER_TOKENS = 8;

const int JOB_OBJECT_SECURITY_VALID_FLAGS = 15;

const int JOB_OBJECT_CPU_RATE_CONTROL_ENABLE = 1;

const int JOB_OBJECT_CPU_RATE_CONTROL_WEIGHT_BASED = 2;

const int JOB_OBJECT_CPU_RATE_CONTROL_HARD_CAP = 4;

const int JOB_OBJECT_CPU_RATE_CONTROL_NOTIFY = 8;

const int JOB_OBJECT_CPU_RATE_CONTROL_MIN_MAX_RATE = 16;

const int JOB_OBJECT_CPU_RATE_CONTROL_VALID_FLAGS = 31;

const int EVENT_MODIFY_STATE = 2;

const int EVENT_ALL_ACCESS = 2031619;

const int MUTANT_QUERY_STATE = 1;

const int MUTANT_ALL_ACCESS = 2031617;

const int SEMAPHORE_MODIFY_STATE = 2;

const int SEMAPHORE_ALL_ACCESS = 2031619;

const int TIMER_QUERY_STATE = 1;

const int TIMER_MODIFY_STATE = 2;

const int TIMER_ALL_ACCESS = 2031619;

const int TIME_ZONE_ID_UNKNOWN = 0;

const int TIME_ZONE_ID_STANDARD = 1;

const int TIME_ZONE_ID_DAYLIGHT = 2;

const int LTP_PC_SMT = 1;

const int CACHE_FULLY_ASSOCIATIVE = 255;

const int SYSTEM_CPU_SET_INFORMATION_PARKED = 1;

const int SYSTEM_CPU_SET_INFORMATION_ALLOCATED = 2;

const int SYSTEM_CPU_SET_INFORMATION_ALLOCATED_TO_TARGET_PROCESS = 4;

const int SYSTEM_CPU_SET_INFORMATION_REALTIME = 8;

const int PROCESSOR_INTEL_386 = 386;

const int PROCESSOR_INTEL_486 = 486;

const int PROCESSOR_INTEL_PENTIUM = 586;

const int PROCESSOR_INTEL_IA64 = 2200;

const int PROCESSOR_AMD_X8664 = 8664;

const int PROCESSOR_MIPS_R4000 = 4000;

const int PROCESSOR_ALPHA_21064 = 21064;

const int PROCESSOR_PPC_601 = 601;

const int PROCESSOR_PPC_603 = 603;

const int PROCESSOR_PPC_604 = 604;

const int PROCESSOR_PPC_620 = 620;

const int PROCESSOR_HITACHI_SH3 = 10003;

const int PROCESSOR_HITACHI_SH3E = 10004;

const int PROCESSOR_HITACHI_SH4 = 10005;

const int PROCESSOR_MOTOROLA_821 = 821;

const int PROCESSOR_SHx_SH3 = 103;

const int PROCESSOR_SHx_SH4 = 104;

const int PROCESSOR_STRONGARM = 2577;

const int PROCESSOR_ARM720 = 1824;

const int PROCESSOR_ARM820 = 2080;

const int PROCESSOR_ARM920 = 2336;

const int PROCESSOR_ARM_7TDMI = 70001;

const int PROCESSOR_OPTIL = 18767;

const int PROCESSOR_ARCHITECTURE_INTEL = 0;

const int PROCESSOR_ARCHITECTURE_MIPS = 1;

const int PROCESSOR_ARCHITECTURE_ALPHA = 2;

const int PROCESSOR_ARCHITECTURE_PPC = 3;

const int PROCESSOR_ARCHITECTURE_SHX = 4;

const int PROCESSOR_ARCHITECTURE_ARM = 5;

const int PROCESSOR_ARCHITECTURE_IA64 = 6;

const int PROCESSOR_ARCHITECTURE_ALPHA64 = 7;

const int PROCESSOR_ARCHITECTURE_MSIL = 8;

const int PROCESSOR_ARCHITECTURE_AMD64 = 9;

const int PROCESSOR_ARCHITECTURE_IA32_ON_WIN64 = 10;

const int PROCESSOR_ARCHITECTURE_NEUTRAL = 11;

const int PROCESSOR_ARCHITECTURE_ARM64 = 12;

const int PROCESSOR_ARCHITECTURE_ARM32_ON_WIN64 = 13;

const int PROCESSOR_ARCHITECTURE_IA32_ON_ARM64 = 14;

const int PROCESSOR_ARCHITECTURE_UNKNOWN = 65535;

const int PF_FLOATING_POINT_PRECISION_ERRATA = 0;

const int PF_FLOATING_POINT_EMULATED = 1;

const int PF_COMPARE_EXCHANGE_DOUBLE = 2;

const int PF_MMX_INSTRUCTIONS_AVAILABLE = 3;

const int PF_PPC_MOVEMEM_64BIT_OK = 4;

const int PF_ALPHA_BYTE_INSTRUCTIONS = 5;

const int PF_XMMI_INSTRUCTIONS_AVAILABLE = 6;

const int PF_3DNOW_INSTRUCTIONS_AVAILABLE = 7;

const int PF_RDTSC_INSTRUCTION_AVAILABLE = 8;

const int PF_PAE_ENABLED = 9;

const int PF_XMMI64_INSTRUCTIONS_AVAILABLE = 10;

const int PF_SSE_DAZ_MODE_AVAILABLE = 11;

const int PF_NX_ENABLED = 12;

const int PF_SSE3_INSTRUCTIONS_AVAILABLE = 13;

const int PF_COMPARE_EXCHANGE128 = 14;

const int PF_COMPARE64_EXCHANGE128 = 15;

const int PF_CHANNELS_ENABLED = 16;

const int PF_XSAVE_ENABLED = 17;

const int PF_ARM_VFP_32_REGISTERS_AVAILABLE = 18;

const int PF_ARM_NEON_INSTRUCTIONS_AVAILABLE = 19;

const int PF_SECOND_LEVEL_ADDRESS_TRANSLATION = 20;

const int PF_VIRT_FIRMWARE_ENABLED = 21;

const int PF_RDWRFSGSBASE_AVAILABLE = 22;

const int PF_FASTFAIL_AVAILABLE = 23;

const int PF_ARM_DIVIDE_INSTRUCTION_AVAILABLE = 24;

const int PF_ARM_64BIT_LOADSTORE_ATOMIC = 25;

const int PF_ARM_EXTERNAL_CACHE_AVAILABLE = 26;

const int PF_ARM_FMAC_INSTRUCTIONS_AVAILABLE = 27;

const int PF_RDRAND_INSTRUCTION_AVAILABLE = 28;

const int PF_ARM_V8_INSTRUCTIONS_AVAILABLE = 29;

const int PF_ARM_V8_CRYPTO_INSTRUCTIONS_AVAILABLE = 30;

const int PF_ARM_V8_CRC32_INSTRUCTIONS_AVAILABLE = 31;

const int PF_RDTSCP_INSTRUCTION_AVAILABLE = 32;

const int PF_RDPID_INSTRUCTION_AVAILABLE = 33;

const int PF_ARM_V81_ATOMIC_INSTRUCTIONS_AVAILABLE = 34;

const int PF_MONITORX_INSTRUCTION_AVAILABLE = 35;

const int PF_SSSE3_INSTRUCTIONS_AVAILABLE = 36;

const int PF_SSE4_1_INSTRUCTIONS_AVAILABLE = 37;

const int PF_SSE4_2_INSTRUCTIONS_AVAILABLE = 38;

const int PF_AVX_INSTRUCTIONS_AVAILABLE = 39;

const int PF_AVX2_INSTRUCTIONS_AVAILABLE = 40;

const int PF_AVX512F_INSTRUCTIONS_AVAILABLE = 41;

const int XSTATE_LEGACY_FLOATING_POINT = 0;

const int XSTATE_LEGACY_SSE = 1;

const int XSTATE_GSSE = 2;

const int XSTATE_AVX = 2;

const int XSTATE_MPX_BNDREGS = 3;

const int XSTATE_MPX_BNDCSR = 4;

const int XSTATE_AVX512_KMASK = 5;

const int XSTATE_AVX512_ZMM_H = 6;

const int XSTATE_AVX512_ZMM = 7;

const int XSTATE_IPT = 8;

const int XSTATE_CET_U = 11;

const int XSTATE_LWP = 62;

const int MAXIMUM_XSTATE_FEATURES = 64;

const int XSTATE_MASK_LEGACY_FLOATING_POINT = 1;

const int XSTATE_MASK_LEGACY_SSE = 2;

const int XSTATE_MASK_LEGACY = 3;

const int XSTATE_MASK_GSSE = 4;

const int XSTATE_MASK_AVX = 4;

const int XSTATE_MASK_MPX = 24;

const int XSTATE_MASK_AVX512 = 224;

const int XSTATE_MASK_IPT = 256;

const int XSTATE_MASK_CET_U = 2048;

const int XSTATE_MASK_LWP = 4611686018427387904;

const int XSTATE_MASK_ALLOWED = 4611686018427390463;

const int XSTATE_MASK_PERSISTENT = 4611686018427387920;

const int XSTATE_MASK_USER_VISIBLE_SUPERVISOR = 2048;

const int XSTATE_COMPACTION_ENABLE = 63;

const int XSTATE_COMPACTION_ENABLE_MASK = -9223372036854775808;

const int XSTATE_ALIGN_BIT = 1;

const int XSTATE_ALIGN_MASK = 2;

const int XSTATE_CONTROLFLAG_XSAVEOPT_MASK = 1;

const int XSTATE_CONTROLFLAG_XSAVEC_MASK = 2;

const int XSTATE_CONTROLFLAG_VALID_MASK = 3;

const int CFG_CALL_TARGET_VALID = 1;

const int CFG_CALL_TARGET_PROCESSED = 2;

const int CFG_CALL_TARGET_CONVERT_EXPORT_SUPPRESSED_TO_VALID = 4;

const int SECTION_QUERY = 1;

const int SECTION_MAP_WRITE = 2;

const int SECTION_MAP_READ = 4;

const int SECTION_MAP_EXECUTE = 8;

const int SECTION_EXTEND_SIZE = 16;

const int SECTION_MAP_EXECUTE_EXPLICIT = 32;

const int SECTION_ALL_ACCESS = 983071;

const int SESSION_QUERY_ACCESS = 1;

const int SESSION_MODIFY_ACCESS = 2;

const int SESSION_ALL_ACCESS = 983043;

const int PAGE_NOACCESS = 1;

const int PAGE_READONLY = 2;

const int PAGE_READWRITE = 4;

const int PAGE_WRITECOPY = 8;

const int PAGE_EXECUTE = 16;

const int PAGE_EXECUTE_READ = 32;

const int PAGE_EXECUTE_READWRITE = 64;

const int PAGE_EXECUTE_WRITECOPY = 128;

const int PAGE_GUARD = 256;

const int PAGE_NOCACHE = 512;

const int PAGE_WRITECOMBINE = 1024;

const int PAGE_GRAPHICS_NOACCESS = 2048;

const int PAGE_GRAPHICS_READONLY = 4096;

const int PAGE_GRAPHICS_READWRITE = 8192;

const int PAGE_GRAPHICS_EXECUTE = 16384;

const int PAGE_GRAPHICS_EXECUTE_READ = 32768;

const int PAGE_GRAPHICS_EXECUTE_READWRITE = 65536;

const int PAGE_GRAPHICS_COHERENT = 131072;

const int PAGE_GRAPHICS_NOCACHE = 262144;

const int PAGE_ENCLAVE_THREAD_CONTROL = 2147483648;

const int PAGE_REVERT_TO_FILE_MAP = 2147483648;

const int PAGE_TARGETS_NO_UPDATE = 1073741824;

const int PAGE_TARGETS_INVALID = 1073741824;

const int PAGE_ENCLAVE_UNVALIDATED = 536870912;

const int PAGE_ENCLAVE_MASK = 268435456;

const int PAGE_ENCLAVE_DECOMMIT = 268435456;

const int PAGE_ENCLAVE_SS_FIRST = 268435457;

const int PAGE_ENCLAVE_SS_REST = 268435458;

const int MEM_COMMIT = 4096;

const int MEM_RESERVE = 8192;

const int MEM_REPLACE_PLACEHOLDER = 16384;

const int MEM_RESERVE_PLACEHOLDER = 262144;

const int MEM_RESET = 524288;

const int MEM_TOP_DOWN = 1048576;

const int MEM_WRITE_WATCH = 2097152;

const int MEM_PHYSICAL = 4194304;

const int MEM_ROTATE = 8388608;

const int MEM_DIFFERENT_IMAGE_BASE_OK = 8388608;

const int MEM_RESET_UNDO = 16777216;

const int MEM_LARGE_PAGES = 536870912;

const int MEM_4MB_PAGES = 2147483648;

const int MEM_64K_PAGES = 541065216;

const int MEM_UNMAP_WITH_TRANSIENT_BOOST = 1;

const int MEM_COALESCE_PLACEHOLDERS = 1;

const int MEM_PRESERVE_PLACEHOLDER = 2;

const int MEM_DECOMMIT = 16384;

const int MEM_RELEASE = 32768;

const int MEM_FREE = 65536;

const int MEM_EXTENDED_PARAMETER_GRAPHICS = 1;

const int MEM_EXTENDED_PARAMETER_NONPAGED = 2;

const int MEM_EXTENDED_PARAMETER_ZERO_PAGES_OPTIONAL = 4;

const int MEM_EXTENDED_PARAMETER_NONPAGED_LARGE = 8;

const int MEM_EXTENDED_PARAMETER_NONPAGED_HUGE = 16;

const int MEM_EXTENDED_PARAMETER_SOFT_FAULT_PAGES = 32;

const int MEM_EXTENDED_PARAMETER_NUMA_NODE_MANDATORY = -9223372036854775808;

const int MEM_EXTENDED_PARAMETER_TYPE_BITS = 8;

const int SEC_PARTITION_OWNER_HANDLE = 262144;

const int SEC_64K_PAGES = 524288;

const int SEC_FILE = 8388608;

const int SEC_IMAGE = 16777216;

const int SEC_PROTECTED_IMAGE = 33554432;

const int SEC_RESERVE = 67108864;

const int SEC_COMMIT = 134217728;

const int SEC_NOCACHE = 268435456;

const int SEC_WRITECOMBINE = 1073741824;

const int SEC_LARGE_PAGES = 2147483648;

const int SEC_IMAGE_NO_EXECUTE = 285212672;

const int MEM_PRIVATE = 131072;

const int MEM_MAPPED = 262144;

const int MEM_IMAGE = 16777216;

const int WRITE_WATCH_FLAG_RESET = 1;

const int ENCLAVE_TYPE_SGX = 1;

const int ENCLAVE_TYPE_SGX2 = 2;

const int ENCLAVE_TYPE_VBS = 16;

const int ENCLAVE_VBS_FLAG_DEBUG = 1;

const int ENCLAVE_TYPE_VBS_BASIC = 17;

const int VBS_BASIC_PAGE_MEASURED_DATA = 1;

const int VBS_BASIC_PAGE_UNMEASURED_DATA = 2;

const int VBS_BASIC_PAGE_ZERO_FILL = 3;

const int VBS_BASIC_PAGE_THREAD_DESCRIPTOR = 4;

const int VBS_BASIC_PAGE_SYSTEM_CALL = 5;

const int FILE_READ_DATA = 1;

const int FILE_LIST_DIRECTORY = 1;

const int FILE_WRITE_DATA = 2;

const int FILE_ADD_FILE = 2;

const int FILE_APPEND_DATA = 4;

const int FILE_ADD_SUBDIRECTORY = 4;

const int FILE_CREATE_PIPE_INSTANCE = 4;

const int FILE_READ_EA = 8;

const int FILE_WRITE_EA = 16;

const int FILE_EXECUTE = 32;

const int FILE_TRAVERSE = 32;

const int FILE_DELETE_CHILD = 64;

const int FILE_READ_ATTRIBUTES = 128;

const int FILE_WRITE_ATTRIBUTES = 256;

const int FILE_ALL_ACCESS = 2032127;

const int FILE_GENERIC_READ = 1179785;

const int FILE_GENERIC_WRITE = 1179926;

const int FILE_GENERIC_EXECUTE = 1179808;

const int FILE_SHARE_READ = 1;

const int FILE_SHARE_WRITE = 2;

const int FILE_SHARE_DELETE = 4;

const int FILE_ATTRIBUTE_READONLY = 1;

const int FILE_ATTRIBUTE_HIDDEN = 2;

const int FILE_ATTRIBUTE_SYSTEM = 4;

const int FILE_ATTRIBUTE_DIRECTORY = 16;

const int FILE_ATTRIBUTE_ARCHIVE = 32;

const int FILE_ATTRIBUTE_DEVICE = 64;

const int FILE_ATTRIBUTE_NORMAL = 128;

const int FILE_ATTRIBUTE_TEMPORARY = 256;

const int FILE_ATTRIBUTE_SPARSE_FILE = 512;

const int FILE_ATTRIBUTE_REPARSE_POINT = 1024;

const int FILE_ATTRIBUTE_COMPRESSED = 2048;

const int FILE_ATTRIBUTE_OFFLINE = 4096;

const int FILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 8192;

const int FILE_ATTRIBUTE_ENCRYPTED = 16384;

const int FILE_ATTRIBUTE_INTEGRITY_STREAM = 32768;

const int FILE_ATTRIBUTE_VIRTUAL = 65536;

const int FILE_ATTRIBUTE_NO_SCRUB_DATA = 131072;

const int FILE_ATTRIBUTE_EA = 262144;

const int FILE_ATTRIBUTE_PINNED = 524288;

const int FILE_ATTRIBUTE_UNPINNED = 1048576;

const int FILE_ATTRIBUTE_RECALL_ON_OPEN = 262144;

const int FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS = 4194304;

const int TREE_CONNECT_ATTRIBUTE_PRIVACY = 16384;

const int TREE_CONNECT_ATTRIBUTE_INTEGRITY = 32768;

const int TREE_CONNECT_ATTRIBUTE_GLOBAL = 4;

const int TREE_CONNECT_ATTRIBUTE_PINNED = 2;

const int FILE_ATTRIBUTE_STRICTLY_SEQUENTIAL = 536870912;

const int FILE_NOTIFY_CHANGE_FILE_NAME = 1;

const int FILE_NOTIFY_CHANGE_DIR_NAME = 2;

const int FILE_NOTIFY_CHANGE_ATTRIBUTES = 4;

const int FILE_NOTIFY_CHANGE_SIZE = 8;

const int FILE_NOTIFY_CHANGE_LAST_WRITE = 16;

const int FILE_NOTIFY_CHANGE_LAST_ACCESS = 32;

const int FILE_NOTIFY_CHANGE_CREATION = 64;

const int FILE_NOTIFY_CHANGE_SECURITY = 256;

const int FILE_ACTION_ADDED = 1;

const int FILE_ACTION_REMOVED = 2;

const int FILE_ACTION_MODIFIED = 3;

const int FILE_ACTION_RENAMED_OLD_NAME = 4;

const int FILE_ACTION_RENAMED_NEW_NAME = 5;

const int MAILSLOT_NO_MESSAGE = 4294967295;

const int MAILSLOT_WAIT_FOREVER = 4294967295;

const int FILE_CASE_SENSITIVE_SEARCH = 1;

const int FILE_CASE_PRESERVED_NAMES = 2;

const int FILE_UNICODE_ON_DISK = 4;

const int FILE_PERSISTENT_ACLS = 8;

const int FILE_FILE_COMPRESSION = 16;

const int FILE_VOLUME_QUOTAS = 32;

const int FILE_SUPPORTS_SPARSE_FILES = 64;

const int FILE_SUPPORTS_REPARSE_POINTS = 128;

const int FILE_SUPPORTS_REMOTE_STORAGE = 256;

const int FILE_RETURNS_CLEANUP_RESULT_INFO = 512;

const int FILE_SUPPORTS_POSIX_UNLINK_RENAME = 1024;

const int FILE_VOLUME_IS_COMPRESSED = 32768;

const int FILE_SUPPORTS_OBJECT_IDS = 65536;

const int FILE_SUPPORTS_ENCRYPTION = 131072;

const int FILE_NAMED_STREAMS = 262144;

const int FILE_READ_ONLY_VOLUME = 524288;

const int FILE_SEQUENTIAL_WRITE_ONCE = 1048576;

const int FILE_SUPPORTS_TRANSACTIONS = 2097152;

const int FILE_SUPPORTS_HARD_LINKS = 4194304;

const int FILE_SUPPORTS_EXTENDED_ATTRIBUTES = 8388608;

const int FILE_SUPPORTS_OPEN_BY_FILE_ID = 16777216;

const int FILE_SUPPORTS_USN_JOURNAL = 33554432;

const int FILE_SUPPORTS_INTEGRITY_STREAMS = 67108864;

const int FILE_SUPPORTS_BLOCK_REFCOUNTING = 134217728;

const int FILE_SUPPORTS_SPARSE_VDL = 268435456;

const int FILE_DAX_VOLUME = 536870912;

const int FILE_SUPPORTS_GHOSTING = 1073741824;

const int FILE_INVALID_FILE_ID = -1;

const int FILE_CS_FLAG_CASE_SENSITIVE_DIR = 1;

const int FLUSH_FLAGS_FILE_DATA_ONLY = 1;

const int FLUSH_FLAGS_NO_SYNC = 2;

const int FLUSH_FLAGS_FILE_DATA_SYNC_ONLY = 4;

const int REPARSE_GUID_DATA_BUFFER_HEADER_SIZE = 24;

const int MAXIMUM_REPARSE_DATA_BUFFER_SIZE = 16384;

const int IO_REPARSE_TAG_RESERVED_ZERO = 0;

const int IO_REPARSE_TAG_RESERVED_ONE = 1;

const int IO_REPARSE_TAG_RESERVED_TWO = 2;

const int IO_REPARSE_TAG_RESERVED_RANGE = 2;

const int IO_REPARSE_TAG_MOUNT_POINT = 2684354563;

const int IO_REPARSE_TAG_HSM = 3221225476;

const int IO_REPARSE_TAG_HSM2 = 2147483654;

const int IO_REPARSE_TAG_SIS = 2147483655;

const int IO_REPARSE_TAG_WIM = 2147483656;

const int IO_REPARSE_TAG_CSV = 2147483657;

const int IO_REPARSE_TAG_DFS = 2147483658;

const int IO_REPARSE_TAG_SYMLINK = 2684354572;

const int IO_REPARSE_TAG_DFSR = 2147483666;

const int IO_REPARSE_TAG_DEDUP = 2147483667;

const int IO_REPARSE_TAG_NFS = 2147483668;

const int IO_REPARSE_TAG_FILE_PLACEHOLDER = 2147483669;

const int IO_REPARSE_TAG_WOF = 2147483671;

const int IO_REPARSE_TAG_WCI = 2147483672;

const int IO_REPARSE_TAG_WCI_1 = 2415923224;

const int IO_REPARSE_TAG_GLOBAL_REPARSE = 2684354585;

const int IO_REPARSE_TAG_CLOUD = 2415919130;

const int IO_REPARSE_TAG_CLOUD_1 = 2415923226;

const int IO_REPARSE_TAG_CLOUD_2 = 2415927322;

const int IO_REPARSE_TAG_CLOUD_3 = 2415931418;

const int IO_REPARSE_TAG_CLOUD_4 = 2415935514;

const int IO_REPARSE_TAG_CLOUD_5 = 2415939610;

const int IO_REPARSE_TAG_CLOUD_6 = 2415943706;

const int IO_REPARSE_TAG_CLOUD_7 = 2415947802;

const int IO_REPARSE_TAG_CLOUD_8 = 2415951898;

const int IO_REPARSE_TAG_CLOUD_9 = 2415955994;

const int IO_REPARSE_TAG_CLOUD_A = 2415960090;

const int IO_REPARSE_TAG_CLOUD_B = 2415964186;

const int IO_REPARSE_TAG_CLOUD_C = 2415968282;

const int IO_REPARSE_TAG_CLOUD_D = 2415972378;

const int IO_REPARSE_TAG_CLOUD_E = 2415976474;

const int IO_REPARSE_TAG_CLOUD_F = 2415980570;

const int IO_REPARSE_TAG_CLOUD_MASK = 61440;

const int IO_REPARSE_TAG_APPEXECLINK = 2147483675;

const int IO_REPARSE_TAG_PROJFS = 2415919132;

const int IO_REPARSE_TAG_STORAGE_SYNC = 2147483678;

const int IO_REPARSE_TAG_WCI_TOMBSTONE = 2684354591;

const int IO_REPARSE_TAG_UNHANDLED = 2147483680;

const int IO_REPARSE_TAG_ONEDRIVE = 2147483681;

const int IO_REPARSE_TAG_PROJFS_TOMBSTONE = 2684354594;

const int IO_REPARSE_TAG_AF_UNIX = 2147483683;

const int IO_REPARSE_TAG_WCI_LINK = 2684354599;

const int IO_REPARSE_TAG_WCI_LINK_1 = 2684358695;

const int SCRUB_DATA_INPUT_FLAG_RESUME = 1;

const int SCRUB_DATA_INPUT_FLAG_SKIP_IN_SYNC = 2;

const int SCRUB_DATA_INPUT_FLAG_SKIP_NON_INTEGRITY_DATA = 4;

const int SCRUB_DATA_INPUT_FLAG_IGNORE_REDUNDANCY = 8;

const int SCRUB_DATA_INPUT_FLAG_SKIP_DATA = 16;

const int SCRUB_DATA_INPUT_FLAG_SCRUB_BY_OBJECT_ID = 32;

const int SCRUB_DATA_INPUT_FLAG_OPLOCK_NOT_ACQUIRED = 64;

const int SCRUB_DATA_OUTPUT_FLAG_INCOMPLETE = 1;

const int SCRUB_DATA_OUTPUT_FLAG_NON_USER_DATA_RANGE = 65536;

const int SCRUB_DATA_OUTPUT_FLAG_PARITY_EXTENT_DATA_RETURNED = 131072;

const int SCRUB_DATA_OUTPUT_FLAG_RESUME_CONTEXT_LENGTH_SPECIFIED = 262144;

const int SHUFFLE_FILE_FLAG_SKIP_INITIALIZING_NEW_CLUSTERS = 1;

const int IO_COMPLETION_MODIFY_STATE = 2;

const int IO_COMPLETION_ALL_ACCESS = 2031619;

const int IO_QOS_MAX_RESERVATION = 1000000000;

const String SMB_CCF_APP_INSTANCE_EA_NAME = 'ClusteredApplicationInstance';

const int NETWORK_APP_INSTANCE_CSV_FLAGS_VALID_ONLY_IF_CSV_COORDINATOR = 1;

const int DUPLICATE_CLOSE_SOURCE = 1;

const int DUPLICATE_SAME_ACCESS = 2;

const int POWERBUTTON_ACTION_INDEX_NOTHING = 0;

const int POWERBUTTON_ACTION_INDEX_SLEEP = 1;

const int POWERBUTTON_ACTION_INDEX_HIBERNATE = 2;

const int POWERBUTTON_ACTION_INDEX_SHUTDOWN = 3;

const int POWERBUTTON_ACTION_INDEX_TURN_OFF_THE_DISPLAY = 4;

const int POWERBUTTON_ACTION_VALUE_NOTHING = 0;

const int POWERBUTTON_ACTION_VALUE_SLEEP = 2;

const int POWERBUTTON_ACTION_VALUE_HIBERNATE = 3;

const int POWERBUTTON_ACTION_VALUE_SHUTDOWN = 6;

const int POWERBUTTON_ACTION_VALUE_TURN_OFF_THE_DISPLAY = 8;

const int PERFSTATE_POLICY_CHANGE_IDEAL = 0;

const int PERFSTATE_POLICY_CHANGE_SINGLE = 1;

const int PERFSTATE_POLICY_CHANGE_ROCKET = 2;

const int PERFSTATE_POLICY_CHANGE_IDEAL_AGGRESSIVE = 3;

const int PERFSTATE_POLICY_CHANGE_DECREASE_MAX = 2;

const int PERFSTATE_POLICY_CHANGE_INCREASE_MAX = 3;

const int PROCESSOR_THROTTLE_DISABLED = 0;

const int PROCESSOR_THROTTLE_ENABLED = 1;

const int PROCESSOR_THROTTLE_AUTOMATIC = 2;

const int PROCESSOR_PERF_BOOST_POLICY_DISABLED = 0;

const int PROCESSOR_PERF_BOOST_POLICY_MAX = 100;

const int PROCESSOR_PERF_BOOST_MODE_DISABLED = 0;

const int PROCESSOR_PERF_BOOST_MODE_ENABLED = 1;

const int PROCESSOR_PERF_BOOST_MODE_AGGRESSIVE = 2;

const int PROCESSOR_PERF_BOOST_MODE_EFFICIENT_ENABLED = 3;

const int PROCESSOR_PERF_BOOST_MODE_EFFICIENT_AGGRESSIVE = 4;

const int PROCESSOR_PERF_BOOST_MODE_AGGRESSIVE_AT_GUARANTEED = 5;

const int PROCESSOR_PERF_BOOST_MODE_EFFICIENT_AGGRESSIVE_AT_GUARANTEED = 6;

const int PROCESSOR_PERF_BOOST_MODE_MAX = 6;

const int PROCESSOR_PERF_AUTONOMOUS_MODE_DISABLED = 0;

const int PROCESSOR_PERF_AUTONOMOUS_MODE_ENABLED = 1;

const int PROCESSOR_PERF_PERFORMANCE_PREFERENCE = 255;

const int PROCESSOR_PERF_ENERGY_PREFERENCE = 0;

const int PROCESSOR_PERF_MINIMUM_ACTIVITY_WINDOW = 0;

const int PROCESSOR_PERF_MAXIMUM_ACTIVITY_WINDOW = 1270000000;

const int PROCESSOR_DUTY_CYCLING_DISABLED = 0;

const int PROCESSOR_DUTY_CYCLING_ENABLED = 1;

const int CORE_PARKING_POLICY_CHANGE_IDEAL = 0;

const int CORE_PARKING_POLICY_CHANGE_SINGLE = 1;

const int CORE_PARKING_POLICY_CHANGE_ROCKET = 2;

const int CORE_PARKING_POLICY_CHANGE_MULTISTEP = 3;

const int CORE_PARKING_POLICY_CHANGE_MAX = 3;

const int POWER_DEVICE_IDLE_POLICY_PERFORMANCE = 0;

const int POWER_DEVICE_IDLE_POLICY_CONSERVATIVE = 1;

const int POWER_CONNECTIVITY_IN_STANDBY_DISABLED = 0;

const int POWER_CONNECTIVITY_IN_STANDBY_ENABLED = 1;

const int POWER_CONNECTIVITY_IN_STANDBY_SYSTEM_MANAGED = 2;

const int POWER_DISCONNECTED_STANDBY_MODE_NORMAL = 0;

const int POWER_DISCONNECTED_STANDBY_MODE_AGGRESSIVE = 1;

const int POWER_SYSTEM_MAXIMUM = 7;

const int ES_SYSTEM_REQUIRED = 1;

const int ES_DISPLAY_REQUIRED = 2;

const int ES_USER_PRESENT = 4;

const int ES_AWAYMODE_REQUIRED = 64;

const int ES_CONTINUOUS = 2147483648;

const int DIAGNOSTIC_REASON_VERSION = 0;

const int DIAGNOSTIC_REASON_SIMPLE_STRING = 1;

const int DIAGNOSTIC_REASON_DETAILED_STRING = 2;

const int DIAGNOSTIC_REASON_NOT_SPECIFIED = 2147483648;

const int DIAGNOSTIC_REASON_INVALID_FLAGS = 2147483640;

const int POWER_REQUEST_CONTEXT_VERSION = 0;

const int POWER_REQUEST_CONTEXT_SIMPLE_STRING = 1;

const int POWER_REQUEST_CONTEXT_DETAILED_STRING = 2;

const int PDCAP_D0_SUPPORTED = 1;

const int PDCAP_D1_SUPPORTED = 2;

const int PDCAP_D2_SUPPORTED = 4;

const int PDCAP_D3_SUPPORTED = 8;

const int PDCAP_WAKE_FROM_D0_SUPPORTED = 16;

const int PDCAP_WAKE_FROM_D1_SUPPORTED = 32;

const int PDCAP_WAKE_FROM_D2_SUPPORTED = 64;

const int PDCAP_WAKE_FROM_D3_SUPPORTED = 128;

const int PDCAP_WARM_EJECT_SUPPORTED = 256;

const int POWER_SETTING_VALUE_VERSION = 1;

const int POWER_PLATFORM_ROLE_V1 = 1;

const int POWER_PLATFORM_ROLE_V1_MAX = 8;

const int POWER_PLATFORM_ROLE_V2 = 2;

const int POWER_PLATFORM_ROLE_V2_MAX = 9;

const int POWER_PLATFORM_ROLE_VERSION = 2;

const int POWER_PLATFORM_ROLE_VERSION_MAX = 9;

const int PROC_IDLE_BUCKET_COUNT = 6;

const int PROC_IDLE_BUCKET_COUNT_EX = 16;

const int ACPI_PPM_SOFTWARE_ALL = 252;

const int ACPI_PPM_SOFTWARE_ANY = 253;

const int ACPI_PPM_HARDWARE_ALL = 254;

const int MS_PPM_SOFTWARE_ALL = 1;

const int PPM_FIRMWARE_ACPI1C2 = 1;

const int PPM_FIRMWARE_ACPI1C3 = 2;

const int PPM_FIRMWARE_ACPI1TSTATES = 4;

const int PPM_FIRMWARE_CST = 8;

const int PPM_FIRMWARE_CSD = 16;

const int PPM_FIRMWARE_PCT = 32;

const int PPM_FIRMWARE_PSS = 64;

const int PPM_FIRMWARE_XPSS = 128;

const int PPM_FIRMWARE_PPC = 256;

const int PPM_FIRMWARE_PSD = 512;

const int PPM_FIRMWARE_PTC = 1024;

const int PPM_FIRMWARE_TSS = 2048;

const int PPM_FIRMWARE_TPC = 4096;

const int PPM_FIRMWARE_TSD = 8192;

const int PPM_FIRMWARE_PCCH = 16384;

const int PPM_FIRMWARE_PCCP = 32768;

const int PPM_FIRMWARE_OSC = 65536;

const int PPM_FIRMWARE_PDC = 131072;

const int PPM_FIRMWARE_CPC = 262144;

const int PPM_FIRMWARE_LPI = 524288;

const int PPM_PERFORMANCE_IMPLEMENTATION_NONE = 0;

const int PPM_PERFORMANCE_IMPLEMENTATION_PSTATES = 1;

const int PPM_PERFORMANCE_IMPLEMENTATION_PCCV1 = 2;

const int PPM_PERFORMANCE_IMPLEMENTATION_CPPC = 3;

const int PPM_PERFORMANCE_IMPLEMENTATION_PEP = 4;

const int PPM_IDLE_IMPLEMENTATION_NONE = 0;

const int PPM_IDLE_IMPLEMENTATION_CSTATES = 1;

const int PPM_IDLE_IMPLEMENTATION_PEP = 2;

const int PPM_IDLE_IMPLEMENTATION_MICROPEP = 3;

const int PPM_IDLE_IMPLEMENTATION_LPISTATES = 4;

const int POWER_ACTION_QUERY_ALLOWED = 1;

const int POWER_ACTION_UI_ALLOWED = 2;

const int POWER_ACTION_OVERRIDE_APPS = 4;

const int POWER_ACTION_HIBERBOOT = 8;

const int POWER_ACTION_USER_NOTIFY = 16;

const int POWER_ACTION_DOZE_TO_HIBERNATE = 32;

const int POWER_ACTION_ACPI_CRITICAL = 16777216;

const int POWER_ACTION_ACPI_USER_NOTIFY = 33554432;

const int POWER_ACTION_DIRECTED_DRIPS = 67108864;

const int POWER_ACTION_PSEUDO_TRANSITION = 134217728;

const int POWER_ACTION_LIGHTEST_FIRST = 268435456;

const int POWER_ACTION_LOCK_CONSOLE = 536870912;

const int POWER_ACTION_DISABLE_WAKES = 1073741824;

const int POWER_ACTION_CRITICAL = 2147483648;

const int POWER_LEVEL_USER_NOTIFY_TEXT = 1;

const int POWER_LEVEL_USER_NOTIFY_SOUND = 2;

const int POWER_LEVEL_USER_NOTIFY_EXEC = 4;

const int POWER_USER_NOTIFY_BUTTON = 8;

const int POWER_USER_NOTIFY_SHUTDOWN = 16;

const int POWER_USER_NOTIFY_FORCED_SHUTDOWN = 32;

const int POWER_FORCE_TRIGGER_RESET = 2147483648;

const int BATTERY_DISCHARGE_FLAGS_EVENTCODE_MASK = 7;

const int BATTERY_DISCHARGE_FLAGS_ENABLE = 2147483648;

const int NUM_DISCHARGE_POLICIES = 4;

const int DISCHARGE_POLICY_CRITICAL = 0;

const int DISCHARGE_POLICY_LOW = 1;

const int PROCESSOR_IDLESTATE_POLICY_COUNT = 3;

const int PO_THROTTLE_NONE = 0;

const int PO_THROTTLE_CONSTANT = 1;

const int PO_THROTTLE_DEGRADE = 2;

const int PO_THROTTLE_ADAPTIVE = 3;

const int PO_THROTTLE_MAXIMUM = 4;

const int HIBERFILE_TYPE_NONE = 0;

const int HIBERFILE_TYPE_REDUCED = 1;

const int HIBERFILE_TYPE_FULL = 2;

const int HIBERFILE_TYPE_MAX = 3;

const int IMAGE_DOS_SIGNATURE = 23117;

const int IMAGE_OS2_SIGNATURE = 17742;

const int IMAGE_OS2_SIGNATURE_LE = 17740;

const int IMAGE_VXD_SIGNATURE = 17740;

const int IMAGE_NT_SIGNATURE = 17744;

const int IMAGE_SIZEOF_FILE_HEADER = 20;

const int IMAGE_FILE_RELOCS_STRIPPED = 1;

const int IMAGE_FILE_EXECUTABLE_IMAGE = 2;

const int IMAGE_FILE_LINE_NUMS_STRIPPED = 4;

const int IMAGE_FILE_LOCAL_SYMS_STRIPPED = 8;

const int IMAGE_FILE_AGGRESIVE_WS_TRIM = 16;

const int IMAGE_FILE_LARGE_ADDRESS_AWARE = 32;

const int IMAGE_FILE_BYTES_REVERSED_LO = 128;

const int IMAGE_FILE_32BIT_MACHINE = 256;

const int IMAGE_FILE_DEBUG_STRIPPED = 512;

const int IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP = 1024;

const int IMAGE_FILE_NET_RUN_FROM_SWAP = 2048;

const int IMAGE_FILE_SYSTEM = 4096;

const int IMAGE_FILE_DLL = 8192;

const int IMAGE_FILE_UP_SYSTEM_ONLY = 16384;

const int IMAGE_FILE_BYTES_REVERSED_HI = 32768;

const int IMAGE_FILE_MACHINE_UNKNOWN = 0;

const int IMAGE_FILE_MACHINE_TARGET_HOST = 1;

const int IMAGE_FILE_MACHINE_I386 = 332;

const int IMAGE_FILE_MACHINE_R3000 = 354;

const int IMAGE_FILE_MACHINE_R4000 = 358;

const int IMAGE_FILE_MACHINE_R10000 = 360;

const int IMAGE_FILE_MACHINE_WCEMIPSV2 = 361;

const int IMAGE_FILE_MACHINE_ALPHA = 388;

const int IMAGE_FILE_MACHINE_SH3 = 418;

const int IMAGE_FILE_MACHINE_SH3DSP = 419;

const int IMAGE_FILE_MACHINE_SH3E = 420;

const int IMAGE_FILE_MACHINE_SH4 = 422;

const int IMAGE_FILE_MACHINE_SH5 = 424;

const int IMAGE_FILE_MACHINE_ARM = 448;

const int IMAGE_FILE_MACHINE_THUMB = 450;

const int IMAGE_FILE_MACHINE_ARMNT = 452;

const int IMAGE_FILE_MACHINE_AM33 = 467;

const int IMAGE_FILE_MACHINE_POWERPC = 496;

const int IMAGE_FILE_MACHINE_POWERPCFP = 497;

const int IMAGE_FILE_MACHINE_IA64 = 512;

const int IMAGE_FILE_MACHINE_MIPS16 = 614;

const int IMAGE_FILE_MACHINE_ALPHA64 = 644;

const int IMAGE_FILE_MACHINE_MIPSFPU = 870;

const int IMAGE_FILE_MACHINE_MIPSFPU16 = 1126;

const int IMAGE_FILE_MACHINE_AXP64 = 644;

const int IMAGE_FILE_MACHINE_TRICORE = 1312;

const int IMAGE_FILE_MACHINE_CEF = 3311;

const int IMAGE_FILE_MACHINE_EBC = 3772;

const int IMAGE_FILE_MACHINE_AMD64 = 34404;

const int IMAGE_FILE_MACHINE_M32R = 36929;

const int IMAGE_FILE_MACHINE_ARM64 = 43620;

const int IMAGE_FILE_MACHINE_CEE = 49390;

const int IMAGE_NUMBEROF_DIRECTORY_ENTRIES = 16;

const int IMAGE_NT_OPTIONAL_HDR32_MAGIC = 267;

const int IMAGE_NT_OPTIONAL_HDR64_MAGIC = 523;

const int IMAGE_ROM_OPTIONAL_HDR_MAGIC = 263;

const int IMAGE_NT_OPTIONAL_HDR_MAGIC = 523;

const int IMAGE_SUBSYSTEM_UNKNOWN = 0;

const int IMAGE_SUBSYSTEM_NATIVE = 1;

const int IMAGE_SUBSYSTEM_WINDOWS_GUI = 2;

const int IMAGE_SUBSYSTEM_WINDOWS_CUI = 3;

const int IMAGE_SUBSYSTEM_OS2_CUI = 5;

const int IMAGE_SUBSYSTEM_POSIX_CUI = 7;

const int IMAGE_SUBSYSTEM_NATIVE_WINDOWS = 8;

const int IMAGE_SUBSYSTEM_WINDOWS_CE_GUI = 9;

const int IMAGE_SUBSYSTEM_EFI_APPLICATION = 10;

const int IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER = 11;

const int IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER = 12;

const int IMAGE_SUBSYSTEM_EFI_ROM = 13;

const int IMAGE_SUBSYSTEM_XBOX = 14;

const int IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION = 16;

const int IMAGE_SUBSYSTEM_XBOX_CODE_CATALOG = 17;

const int IMAGE_DLLCHARACTERISTICS_HIGH_ENTROPY_VA = 32;

const int IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE = 64;

const int IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY = 128;

const int IMAGE_DLLCHARACTERISTICS_NX_COMPAT = 256;

const int IMAGE_DLLCHARACTERISTICS_NO_ISOLATION = 512;

const int IMAGE_DLLCHARACTERISTICS_NO_SEH = 1024;

const int IMAGE_DLLCHARACTERISTICS_NO_BIND = 2048;

const int IMAGE_DLLCHARACTERISTICS_APPCONTAINER = 4096;

const int IMAGE_DLLCHARACTERISTICS_WDM_DRIVER = 8192;

const int IMAGE_DLLCHARACTERISTICS_GUARD_CF = 16384;

const int IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE = 32768;

const int IMAGE_DIRECTORY_ENTRY_EXPORT = 0;

const int IMAGE_DIRECTORY_ENTRY_IMPORT = 1;

const int IMAGE_DIRECTORY_ENTRY_RESOURCE = 2;

const int IMAGE_DIRECTORY_ENTRY_EXCEPTION = 3;

const int IMAGE_DIRECTORY_ENTRY_SECURITY = 4;

const int IMAGE_DIRECTORY_ENTRY_BASERELOC = 5;

const int IMAGE_DIRECTORY_ENTRY_DEBUG = 6;

const int IMAGE_DIRECTORY_ENTRY_ARCHITECTURE = 7;

const int IMAGE_DIRECTORY_ENTRY_GLOBALPTR = 8;

const int IMAGE_DIRECTORY_ENTRY_TLS = 9;

const int IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG = 10;

const int IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT = 11;

const int IMAGE_DIRECTORY_ENTRY_IAT = 12;

const int IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT = 13;

const int IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR = 14;

const int IMAGE_SIZEOF_SHORT_NAME = 8;

const int IMAGE_SIZEOF_SECTION_HEADER = 40;

const int IMAGE_SCN_TYPE_NO_PAD = 8;

const int IMAGE_SCN_CNT_CODE = 32;

const int IMAGE_SCN_CNT_INITIALIZED_DATA = 64;

const int IMAGE_SCN_CNT_UNINITIALIZED_DATA = 128;

const int IMAGE_SCN_LNK_OTHER = 256;

const int IMAGE_SCN_LNK_INFO = 512;

const int IMAGE_SCN_LNK_REMOVE = 2048;

const int IMAGE_SCN_LNK_COMDAT = 4096;

const int IMAGE_SCN_NO_DEFER_SPEC_EXC = 16384;

const int IMAGE_SCN_GPREL = 32768;

const int IMAGE_SCN_MEM_FARDATA = 32768;

const int IMAGE_SCN_MEM_PURGEABLE = 131072;

const int IMAGE_SCN_MEM_16BIT = 131072;

const int IMAGE_SCN_MEM_LOCKED = 262144;

const int IMAGE_SCN_MEM_PRELOAD = 524288;

const int IMAGE_SCN_ALIGN_1BYTES = 1048576;

const int IMAGE_SCN_ALIGN_2BYTES = 2097152;

const int IMAGE_SCN_ALIGN_4BYTES = 3145728;

const int IMAGE_SCN_ALIGN_8BYTES = 4194304;

const int IMAGE_SCN_ALIGN_16BYTES = 5242880;

const int IMAGE_SCN_ALIGN_32BYTES = 6291456;

const int IMAGE_SCN_ALIGN_64BYTES = 7340032;

const int IMAGE_SCN_ALIGN_128BYTES = 8388608;

const int IMAGE_SCN_ALIGN_256BYTES = 9437184;

const int IMAGE_SCN_ALIGN_512BYTES = 10485760;

const int IMAGE_SCN_ALIGN_1024BYTES = 11534336;

const int IMAGE_SCN_ALIGN_2048BYTES = 12582912;

const int IMAGE_SCN_ALIGN_4096BYTES = 13631488;

const int IMAGE_SCN_ALIGN_8192BYTES = 14680064;

const int IMAGE_SCN_ALIGN_MASK = 15728640;

const int IMAGE_SCN_LNK_NRELOC_OVFL = 16777216;

const int IMAGE_SCN_MEM_DISCARDABLE = 33554432;

const int IMAGE_SCN_MEM_NOT_CACHED = 67108864;

const int IMAGE_SCN_MEM_NOT_PAGED = 134217728;

const int IMAGE_SCN_MEM_SHARED = 268435456;

const int IMAGE_SCN_MEM_EXECUTE = 536870912;

const int IMAGE_SCN_MEM_READ = 1073741824;

const int IMAGE_SCN_MEM_WRITE = 2147483648;

const int IMAGE_SCN_SCALE_INDEX = 1;

const int IMAGE_SIZEOF_SYMBOL = 18;

const int IMAGE_SYM_UNDEFINED = 0;

const int IMAGE_SYM_ABSOLUTE = -1;

const int IMAGE_SYM_DEBUG = -2;

const int IMAGE_SYM_SECTION_MAX = 65279;

const int IMAGE_SYM_SECTION_MAX_EX = 2147483647;

const int IMAGE_SYM_TYPE_NULL = 0;

const int IMAGE_SYM_TYPE_VOID = 1;

const int IMAGE_SYM_TYPE_CHAR = 2;

const int IMAGE_SYM_TYPE_SHORT = 3;

const int IMAGE_SYM_TYPE_INT = 4;

const int IMAGE_SYM_TYPE_LONG = 5;

const int IMAGE_SYM_TYPE_FLOAT = 6;

const int IMAGE_SYM_TYPE_DOUBLE = 7;

const int IMAGE_SYM_TYPE_STRUCT = 8;

const int IMAGE_SYM_TYPE_UNION = 9;

const int IMAGE_SYM_TYPE_ENUM = 10;

const int IMAGE_SYM_TYPE_MOE = 11;

const int IMAGE_SYM_TYPE_BYTE = 12;

const int IMAGE_SYM_TYPE_WORD = 13;

const int IMAGE_SYM_TYPE_UINT = 14;

const int IMAGE_SYM_TYPE_DWORD = 15;

const int IMAGE_SYM_TYPE_PCODE = 32768;

const int IMAGE_SYM_DTYPE_NULL = 0;

const int IMAGE_SYM_DTYPE_POINTER = 1;

const int IMAGE_SYM_DTYPE_FUNCTION = 2;

const int IMAGE_SYM_DTYPE_ARRAY = 3;

const int IMAGE_SYM_CLASS_END_OF_FUNCTION = 255;

const int IMAGE_SYM_CLASS_NULL = 0;

const int IMAGE_SYM_CLASS_AUTOMATIC = 1;

const int IMAGE_SYM_CLASS_EXTERNAL = 2;

const int IMAGE_SYM_CLASS_STATIC = 3;

const int IMAGE_SYM_CLASS_REGISTER = 4;

const int IMAGE_SYM_CLASS_EXTERNAL_DEF = 5;

const int IMAGE_SYM_CLASS_LABEL = 6;

const int IMAGE_SYM_CLASS_UNDEFINED_LABEL = 7;

const int IMAGE_SYM_CLASS_MEMBER_OF_STRUCT = 8;

const int IMAGE_SYM_CLASS_ARGUMENT = 9;

const int IMAGE_SYM_CLASS_STRUCT_TAG = 10;

const int IMAGE_SYM_CLASS_MEMBER_OF_UNION = 11;

const int IMAGE_SYM_CLASS_UNION_TAG = 12;

const int IMAGE_SYM_CLASS_TYPE_DEFINITION = 13;

const int IMAGE_SYM_CLASS_UNDEFINED_STATIC = 14;

const int IMAGE_SYM_CLASS_ENUM_TAG = 15;

const int IMAGE_SYM_CLASS_MEMBER_OF_ENUM = 16;

const int IMAGE_SYM_CLASS_REGISTER_PARAM = 17;

const int IMAGE_SYM_CLASS_BIT_FIELD = 18;

const int IMAGE_SYM_CLASS_FAR_EXTERNAL = 68;

const int IMAGE_SYM_CLASS_BLOCK = 100;

const int IMAGE_SYM_CLASS_FUNCTION = 101;

const int IMAGE_SYM_CLASS_END_OF_STRUCT = 102;

const int IMAGE_SYM_CLASS_FILE = 103;

const int IMAGE_SYM_CLASS_SECTION = 104;

const int IMAGE_SYM_CLASS_WEAK_EXTERNAL = 105;

const int IMAGE_SYM_CLASS_CLR_TOKEN = 107;

const int N_BTMASK = 15;

const int N_TMASK = 48;

const int N_TMASK1 = 192;

const int N_TMASK2 = 240;

const int N_BTSHFT = 4;

const int N_TSHIFT = 2;

const int IMAGE_COMDAT_SELECT_NODUPLICATES = 1;

const int IMAGE_COMDAT_SELECT_ANY = 2;

const int IMAGE_COMDAT_SELECT_SAME_SIZE = 3;

const int IMAGE_COMDAT_SELECT_EXACT_MATCH = 4;

const int IMAGE_COMDAT_SELECT_ASSOCIATIVE = 5;

const int IMAGE_COMDAT_SELECT_LARGEST = 6;

const int IMAGE_COMDAT_SELECT_NEWEST = 7;

const int IMAGE_WEAK_EXTERN_SEARCH_NOLIBRARY = 1;

const int IMAGE_WEAK_EXTERN_SEARCH_LIBRARY = 2;

const int IMAGE_WEAK_EXTERN_SEARCH_ALIAS = 3;

const int IMAGE_WEAK_EXTERN_ANTI_DEPENDENCY = 4;

const int IMAGE_REL_I386_ABSOLUTE = 0;

const int IMAGE_REL_I386_DIR16 = 1;

const int IMAGE_REL_I386_REL16 = 2;

const int IMAGE_REL_I386_DIR32 = 6;

const int IMAGE_REL_I386_DIR32NB = 7;

const int IMAGE_REL_I386_SEG12 = 9;

const int IMAGE_REL_I386_SECTION = 10;

const int IMAGE_REL_I386_SECREL = 11;

const int IMAGE_REL_I386_TOKEN = 12;

const int IMAGE_REL_I386_SECREL7 = 13;

const int IMAGE_REL_I386_REL32 = 20;

const int IMAGE_REL_MIPS_ABSOLUTE = 0;

const int IMAGE_REL_MIPS_REFHALF = 1;

const int IMAGE_REL_MIPS_REFWORD = 2;

const int IMAGE_REL_MIPS_JMPADDR = 3;

const int IMAGE_REL_MIPS_REFHI = 4;

const int IMAGE_REL_MIPS_REFLO = 5;

const int IMAGE_REL_MIPS_GPREL = 6;

const int IMAGE_REL_MIPS_LITERAL = 7;

const int IMAGE_REL_MIPS_SECTION = 10;

const int IMAGE_REL_MIPS_SECREL = 11;

const int IMAGE_REL_MIPS_SECRELLO = 12;

const int IMAGE_REL_MIPS_SECRELHI = 13;

const int IMAGE_REL_MIPS_TOKEN = 14;

const int IMAGE_REL_MIPS_JMPADDR16 = 16;

const int IMAGE_REL_MIPS_REFWORDNB = 34;

const int IMAGE_REL_MIPS_PAIR = 37;

const int IMAGE_REL_ALPHA_ABSOLUTE = 0;

const int IMAGE_REL_ALPHA_REFLONG = 1;

const int IMAGE_REL_ALPHA_REFQUAD = 2;

const int IMAGE_REL_ALPHA_GPREL32 = 3;

const int IMAGE_REL_ALPHA_LITERAL = 4;

const int IMAGE_REL_ALPHA_LITUSE = 5;

const int IMAGE_REL_ALPHA_GPDISP = 6;

const int IMAGE_REL_ALPHA_BRADDR = 7;

const int IMAGE_REL_ALPHA_HINT = 8;

const int IMAGE_REL_ALPHA_INLINE_REFLONG = 9;

const int IMAGE_REL_ALPHA_REFHI = 10;

const int IMAGE_REL_ALPHA_REFLO = 11;

const int IMAGE_REL_ALPHA_PAIR = 12;

const int IMAGE_REL_ALPHA_MATCH = 13;

const int IMAGE_REL_ALPHA_SECTION = 14;

const int IMAGE_REL_ALPHA_SECREL = 15;

const int IMAGE_REL_ALPHA_REFLONGNB = 16;

const int IMAGE_REL_ALPHA_SECRELLO = 17;

const int IMAGE_REL_ALPHA_SECRELHI = 18;

const int IMAGE_REL_ALPHA_REFQ3 = 19;

const int IMAGE_REL_ALPHA_REFQ2 = 20;

const int IMAGE_REL_ALPHA_REFQ1 = 21;

const int IMAGE_REL_ALPHA_GPRELLO = 22;

const int IMAGE_REL_ALPHA_GPRELHI = 23;

const int IMAGE_REL_PPC_ABSOLUTE = 0;

const int IMAGE_REL_PPC_ADDR64 = 1;

const int IMAGE_REL_PPC_ADDR32 = 2;

const int IMAGE_REL_PPC_ADDR24 = 3;

const int IMAGE_REL_PPC_ADDR16 = 4;

const int IMAGE_REL_PPC_ADDR14 = 5;

const int IMAGE_REL_PPC_REL24 = 6;

const int IMAGE_REL_PPC_REL14 = 7;

const int IMAGE_REL_PPC_TOCREL16 = 8;

const int IMAGE_REL_PPC_TOCREL14 = 9;

const int IMAGE_REL_PPC_ADDR32NB = 10;

const int IMAGE_REL_PPC_SECREL = 11;

const int IMAGE_REL_PPC_SECTION = 12;

const int IMAGE_REL_PPC_IFGLUE = 13;

const int IMAGE_REL_PPC_IMGLUE = 14;

const int IMAGE_REL_PPC_SECREL16 = 15;

const int IMAGE_REL_PPC_REFHI = 16;

const int IMAGE_REL_PPC_REFLO = 17;

const int IMAGE_REL_PPC_PAIR = 18;

const int IMAGE_REL_PPC_SECRELLO = 19;

const int IMAGE_REL_PPC_SECRELHI = 20;

const int IMAGE_REL_PPC_GPREL = 21;

const int IMAGE_REL_PPC_TOKEN = 22;

const int IMAGE_REL_PPC_TYPEMASK = 255;

const int IMAGE_REL_PPC_NEG = 256;

const int IMAGE_REL_PPC_BRTAKEN = 512;

const int IMAGE_REL_PPC_BRNTAKEN = 1024;

const int IMAGE_REL_PPC_TOCDEFN = 2048;

const int IMAGE_REL_SH3_ABSOLUTE = 0;

const int IMAGE_REL_SH3_DIRECT16 = 1;

const int IMAGE_REL_SH3_DIRECT32 = 2;

const int IMAGE_REL_SH3_DIRECT8 = 3;

const int IMAGE_REL_SH3_DIRECT8_WORD = 4;

const int IMAGE_REL_SH3_DIRECT8_LONG = 5;

const int IMAGE_REL_SH3_DIRECT4 = 6;

const int IMAGE_REL_SH3_DIRECT4_WORD = 7;

const int IMAGE_REL_SH3_DIRECT4_LONG = 8;

const int IMAGE_REL_SH3_PCREL8_WORD = 9;

const int IMAGE_REL_SH3_PCREL8_LONG = 10;

const int IMAGE_REL_SH3_PCREL12_WORD = 11;

const int IMAGE_REL_SH3_STARTOF_SECTION = 12;

const int IMAGE_REL_SH3_SIZEOF_SECTION = 13;

const int IMAGE_REL_SH3_SECTION = 14;

const int IMAGE_REL_SH3_SECREL = 15;

const int IMAGE_REL_SH3_DIRECT32_NB = 16;

const int IMAGE_REL_SH3_GPREL4_LONG = 17;

const int IMAGE_REL_SH3_TOKEN = 18;

const int IMAGE_REL_SHM_PCRELPT = 19;

const int IMAGE_REL_SHM_REFLO = 20;

const int IMAGE_REL_SHM_REFHALF = 21;

const int IMAGE_REL_SHM_RELLO = 22;

const int IMAGE_REL_SHM_RELHALF = 23;

const int IMAGE_REL_SHM_PAIR = 24;

const int IMAGE_REL_SH_NOMODE = 32768;

const int IMAGE_REL_ARM_ABSOLUTE = 0;

const int IMAGE_REL_ARM_ADDR32 = 1;

const int IMAGE_REL_ARM_ADDR32NB = 2;

const int IMAGE_REL_ARM_BRANCH24 = 3;

const int IMAGE_REL_ARM_BRANCH11 = 4;

const int IMAGE_REL_ARM_TOKEN = 5;

const int IMAGE_REL_ARM_GPREL12 = 6;

const int IMAGE_REL_ARM_GPREL7 = 7;

const int IMAGE_REL_ARM_BLX24 = 8;

const int IMAGE_REL_ARM_BLX11 = 9;

const int IMAGE_REL_ARM_SECTION = 14;

const int IMAGE_REL_ARM_SECREL = 15;

const int IMAGE_REL_ARM_MOV32A = 16;

const int IMAGE_REL_ARM_MOV32 = 16;

const int IMAGE_REL_ARM_MOV32T = 17;

const int IMAGE_REL_THUMB_MOV32 = 17;

const int IMAGE_REL_ARM_BRANCH20T = 18;

const int IMAGE_REL_THUMB_BRANCH20 = 18;

const int IMAGE_REL_ARM_BRANCH24T = 20;

const int IMAGE_REL_THUMB_BRANCH24 = 20;

const int IMAGE_REL_ARM_BLX23T = 21;

const int IMAGE_REL_THUMB_BLX23 = 21;

const int IMAGE_REL_AM_ABSOLUTE = 0;

const int IMAGE_REL_AM_ADDR32 = 1;

const int IMAGE_REL_AM_ADDR32NB = 2;

const int IMAGE_REL_AM_CALL32 = 3;

const int IMAGE_REL_AM_FUNCINFO = 4;

const int IMAGE_REL_AM_REL32_1 = 5;

const int IMAGE_REL_AM_REL32_2 = 6;

const int IMAGE_REL_AM_SECREL = 7;

const int IMAGE_REL_AM_SECTION = 8;

const int IMAGE_REL_AM_TOKEN = 9;

const int IMAGE_REL_ARM64_ABSOLUTE = 0;

const int IMAGE_REL_ARM64_ADDR32 = 1;

const int IMAGE_REL_ARM64_ADDR32NB = 2;

const int IMAGE_REL_ARM64_BRANCH26 = 3;

const int IMAGE_REL_ARM64_PAGEBASE_REL21 = 4;

const int IMAGE_REL_ARM64_REL21 = 5;

const int IMAGE_REL_ARM64_PAGEOFFSET_12A = 6;

const int IMAGE_REL_ARM64_PAGEOFFSET_12L = 7;

const int IMAGE_REL_ARM64_SECREL = 8;

const int IMAGE_REL_ARM64_SECREL_LOW12A = 9;

const int IMAGE_REL_ARM64_SECREL_HIGH12A = 10;

const int IMAGE_REL_ARM64_SECREL_LOW12L = 11;

const int IMAGE_REL_ARM64_TOKEN = 12;

const int IMAGE_REL_ARM64_SECTION = 13;

const int IMAGE_REL_ARM64_ADDR64 = 14;

const int IMAGE_REL_ARM64_BRANCH19 = 15;

const int IMAGE_REL_AMD64_ABSOLUTE = 0;

const int IMAGE_REL_AMD64_ADDR64 = 1;

const int IMAGE_REL_AMD64_ADDR32 = 2;

const int IMAGE_REL_AMD64_ADDR32NB = 3;

const int IMAGE_REL_AMD64_REL32 = 4;

const int IMAGE_REL_AMD64_REL32_1 = 5;

const int IMAGE_REL_AMD64_REL32_2 = 6;

const int IMAGE_REL_AMD64_REL32_3 = 7;

const int IMAGE_REL_AMD64_REL32_4 = 8;

const int IMAGE_REL_AMD64_REL32_5 = 9;

const int IMAGE_REL_AMD64_SECTION = 10;

const int IMAGE_REL_AMD64_SECREL = 11;

const int IMAGE_REL_AMD64_SECREL7 = 12;

const int IMAGE_REL_AMD64_TOKEN = 13;

const int IMAGE_REL_AMD64_SREL32 = 14;

const int IMAGE_REL_AMD64_PAIR = 15;

const int IMAGE_REL_AMD64_SSPAN32 = 16;

const int IMAGE_REL_AMD64_EHANDLER = 17;

const int IMAGE_REL_AMD64_IMPORT_BR = 18;

const int IMAGE_REL_AMD64_IMPORT_CALL = 19;

const int IMAGE_REL_AMD64_CFG_BR = 20;

const int IMAGE_REL_AMD64_CFG_BR_REX = 21;

const int IMAGE_REL_AMD64_CFG_CALL = 22;

const int IMAGE_REL_AMD64_INDIR_BR = 23;

const int IMAGE_REL_AMD64_INDIR_BR_REX = 24;

const int IMAGE_REL_AMD64_INDIR_CALL = 25;

const int IMAGE_REL_AMD64_INDIR_BR_SWITCHTABLE_FIRST = 32;

const int IMAGE_REL_AMD64_INDIR_BR_SWITCHTABLE_LAST = 47;

const int IMAGE_REL_IA64_ABSOLUTE = 0;

const int IMAGE_REL_IA64_IMM14 = 1;

const int IMAGE_REL_IA64_IMM22 = 2;

const int IMAGE_REL_IA64_IMM64 = 3;

const int IMAGE_REL_IA64_DIR32 = 4;

const int IMAGE_REL_IA64_DIR64 = 5;

const int IMAGE_REL_IA64_PCREL21B = 6;

const int IMAGE_REL_IA64_PCREL21M = 7;

const int IMAGE_REL_IA64_PCREL21F = 8;

const int IMAGE_REL_IA64_GPREL22 = 9;

const int IMAGE_REL_IA64_LTOFF22 = 10;

const int IMAGE_REL_IA64_SECTION = 11;

const int IMAGE_REL_IA64_SECREL22 = 12;

const int IMAGE_REL_IA64_SECREL64I = 13;

const int IMAGE_REL_IA64_SECREL32 = 14;

const int IMAGE_REL_IA64_DIR32NB = 16;

const int IMAGE_REL_IA64_SREL14 = 17;

const int IMAGE_REL_IA64_SREL22 = 18;

const int IMAGE_REL_IA64_SREL32 = 19;

const int IMAGE_REL_IA64_UREL32 = 20;

const int IMAGE_REL_IA64_PCREL60X = 21;

const int IMAGE_REL_IA64_PCREL60B = 22;

const int IMAGE_REL_IA64_PCREL60F = 23;

const int IMAGE_REL_IA64_PCREL60I = 24;

const int IMAGE_REL_IA64_PCREL60M = 25;

const int IMAGE_REL_IA64_IMMGPREL64 = 26;

const int IMAGE_REL_IA64_TOKEN = 27;

const int IMAGE_REL_IA64_GPREL32 = 28;

const int IMAGE_REL_IA64_ADDEND = 31;

const int IMAGE_REL_CEF_ABSOLUTE = 0;

const int IMAGE_REL_CEF_ADDR32 = 1;

const int IMAGE_REL_CEF_ADDR64 = 2;

const int IMAGE_REL_CEF_ADDR32NB = 3;

const int IMAGE_REL_CEF_SECTION = 4;

const int IMAGE_REL_CEF_SECREL = 5;

const int IMAGE_REL_CEF_TOKEN = 6;

const int IMAGE_REL_CEE_ABSOLUTE = 0;

const int IMAGE_REL_CEE_ADDR32 = 1;

const int IMAGE_REL_CEE_ADDR64 = 2;

const int IMAGE_REL_CEE_ADDR32NB = 3;

const int IMAGE_REL_CEE_SECTION = 4;

const int IMAGE_REL_CEE_SECREL = 5;

const int IMAGE_REL_CEE_TOKEN = 6;

const int IMAGE_REL_M32R_ABSOLUTE = 0;

const int IMAGE_REL_M32R_ADDR32 = 1;

const int IMAGE_REL_M32R_ADDR32NB = 2;

const int IMAGE_REL_M32R_ADDR24 = 3;

const int IMAGE_REL_M32R_GPREL16 = 4;

const int IMAGE_REL_M32R_PCREL24 = 5;

const int IMAGE_REL_M32R_PCREL16 = 6;

const int IMAGE_REL_M32R_PCREL8 = 7;

const int IMAGE_REL_M32R_REFHALF = 8;

const int IMAGE_REL_M32R_REFHI = 9;

const int IMAGE_REL_M32R_REFLO = 10;

const int IMAGE_REL_M32R_PAIR = 11;

const int IMAGE_REL_M32R_SECTION = 12;

const int IMAGE_REL_M32R_SECREL32 = 13;

const int IMAGE_REL_M32R_TOKEN = 14;

const int IMAGE_REL_EBC_ABSOLUTE = 0;

const int IMAGE_REL_EBC_ADDR32NB = 1;

const int IMAGE_REL_EBC_REL32 = 2;

const int IMAGE_REL_EBC_SECTION = 3;

const int IMAGE_REL_EBC_SECREL = 4;

const int EMARCH_ENC_I17_IMM7B_INST_WORD_X = 3;

const int EMARCH_ENC_I17_IMM7B_SIZE_X = 7;

const int EMARCH_ENC_I17_IMM7B_INST_WORD_POS_X = 4;

const int EMARCH_ENC_I17_IMM7B_VAL_POS_X = 0;

const int EMARCH_ENC_I17_IMM9D_INST_WORD_X = 3;

const int EMARCH_ENC_I17_IMM9D_SIZE_X = 9;

const int EMARCH_ENC_I17_IMM9D_INST_WORD_POS_X = 18;

const int EMARCH_ENC_I17_IMM9D_VAL_POS_X = 7;

const int EMARCH_ENC_I17_IMM5C_INST_WORD_X = 3;

const int EMARCH_ENC_I17_IMM5C_SIZE_X = 5;

const int EMARCH_ENC_I17_IMM5C_INST_WORD_POS_X = 13;

const int EMARCH_ENC_I17_IMM5C_VAL_POS_X = 16;

const int EMARCH_ENC_I17_IC_INST_WORD_X = 3;

const int EMARCH_ENC_I17_IC_SIZE_X = 1;

const int EMARCH_ENC_I17_IC_INST_WORD_POS_X = 12;

const int EMARCH_ENC_I17_IC_VAL_POS_X = 21;

const int EMARCH_ENC_I17_IMM41a_INST_WORD_X = 1;

const int EMARCH_ENC_I17_IMM41a_SIZE_X = 10;

const int EMARCH_ENC_I17_IMM41a_INST_WORD_POS_X = 14;

const int EMARCH_ENC_I17_IMM41a_VAL_POS_X = 22;

const int EMARCH_ENC_I17_IMM41b_INST_WORD_X = 1;

const int EMARCH_ENC_I17_IMM41b_SIZE_X = 8;

const int EMARCH_ENC_I17_IMM41b_INST_WORD_POS_X = 24;

const int EMARCH_ENC_I17_IMM41b_VAL_POS_X = 32;

const int EMARCH_ENC_I17_IMM41c_INST_WORD_X = 2;

const int EMARCH_ENC_I17_IMM41c_SIZE_X = 23;

const int EMARCH_ENC_I17_IMM41c_INST_WORD_POS_X = 0;

const int EMARCH_ENC_I17_IMM41c_VAL_POS_X = 40;

const int EMARCH_ENC_I17_SIGN_INST_WORD_X = 3;

const int EMARCH_ENC_I17_SIGN_SIZE_X = 1;

const int EMARCH_ENC_I17_SIGN_INST_WORD_POS_X = 27;

const int EMARCH_ENC_I17_SIGN_VAL_POS_X = 63;

const int X3_OPCODE_INST_WORD_X = 3;

const int X3_OPCODE_SIZE_X = 4;

const int X3_OPCODE_INST_WORD_POS_X = 28;

const int X3_OPCODE_SIGN_VAL_POS_X = 0;

const int X3_I_INST_WORD_X = 3;

const int X3_I_SIZE_X = 1;

const int X3_I_INST_WORD_POS_X = 27;

const int X3_I_SIGN_VAL_POS_X = 59;

const int X3_D_WH_INST_WORD_X = 3;

const int X3_D_WH_SIZE_X = 3;

const int X3_D_WH_INST_WORD_POS_X = 24;

const int X3_D_WH_SIGN_VAL_POS_X = 0;

const int X3_IMM20_INST_WORD_X = 3;

const int X3_IMM20_SIZE_X = 20;

const int X3_IMM20_INST_WORD_POS_X = 4;

const int X3_IMM20_SIGN_VAL_POS_X = 0;

const int X3_IMM39_1_INST_WORD_X = 2;

const int X3_IMM39_1_SIZE_X = 23;

const int X3_IMM39_1_INST_WORD_POS_X = 0;

const int X3_IMM39_1_SIGN_VAL_POS_X = 36;

const int X3_IMM39_2_INST_WORD_X = 1;

const int X3_IMM39_2_SIZE_X = 16;

const int X3_IMM39_2_INST_WORD_POS_X = 16;

const int X3_IMM39_2_SIGN_VAL_POS_X = 20;

const int X3_P_INST_WORD_X = 3;

const int X3_P_SIZE_X = 4;

const int X3_P_INST_WORD_POS_X = 0;

const int X3_P_SIGN_VAL_POS_X = 0;

const int X3_TMPLT_INST_WORD_X = 0;

const int X3_TMPLT_SIZE_X = 4;

const int X3_TMPLT_INST_WORD_POS_X = 0;

const int X3_TMPLT_SIGN_VAL_POS_X = 0;

const int X3_BTYPE_QP_INST_WORD_X = 2;

const int X3_BTYPE_QP_SIZE_X = 9;

const int X3_BTYPE_QP_INST_WORD_POS_X = 23;

const int X3_BTYPE_QP_INST_VAL_POS_X = 0;

const int X3_EMPTY_INST_WORD_X = 1;

const int X3_EMPTY_SIZE_X = 2;

const int X3_EMPTY_INST_WORD_POS_X = 14;

const int X3_EMPTY_INST_VAL_POS_X = 0;

const int IMAGE_REL_BASED_ABSOLUTE = 0;

const int IMAGE_REL_BASED_HIGH = 1;

const int IMAGE_REL_BASED_LOW = 2;

const int IMAGE_REL_BASED_HIGHLOW = 3;

const int IMAGE_REL_BASED_HIGHADJ = 4;

const int IMAGE_REL_BASED_MACHINE_SPECIFIC_5 = 5;

const int IMAGE_REL_BASED_RESERVED = 6;

const int IMAGE_REL_BASED_MACHINE_SPECIFIC_7 = 7;

const int IMAGE_REL_BASED_MACHINE_SPECIFIC_8 = 8;

const int IMAGE_REL_BASED_MACHINE_SPECIFIC_9 = 9;

const int IMAGE_REL_BASED_DIR64 = 10;

const int IMAGE_REL_BASED_IA64_IMM64 = 9;

const int IMAGE_REL_BASED_MIPS_JMPADDR = 5;

const int IMAGE_REL_BASED_MIPS_JMPADDR16 = 9;

const int IMAGE_REL_BASED_ARM_MOV32 = 5;

const int IMAGE_REL_BASED_THUMB_MOV32 = 7;

const int IMAGE_ARCHIVE_START_SIZE = 8;

const String IMAGE_ARCHIVE_START = '!<arch>\n';

const String IMAGE_ARCHIVE_END = '`\n';

const String IMAGE_ARCHIVE_PAD = '\n';

const String IMAGE_ARCHIVE_LINKER_MEMBER = '/               ';

const String IMAGE_ARCHIVE_LONGNAMES_MEMBER = '//              ';

const String IMAGE_ARCHIVE_HYBRIDMAP_MEMBER = '/<HYBRIDMAP>/   ';

const int IMAGE_SIZEOF_ARCHIVE_MEMBER_HDR = 60;

const int IMAGE_ORDINAL_FLAG64 = -9223372036854775808;

const int IMAGE_ORDINAL_FLAG32 = 2147483648;

const int IMAGE_ORDINAL_FLAG = -9223372036854775808;

const int IMAGE_RESOURCE_NAME_IS_STRING = 2147483648;

const int IMAGE_RESOURCE_DATA_IS_DIRECTORY = 2147483648;

const int IMAGE_DYNAMIC_RELOCATION_GUARD_RF_PROLOGUE = 1;

const int IMAGE_DYNAMIC_RELOCATION_GUARD_RF_EPILOGUE = 2;

const int IMAGE_DYNAMIC_RELOCATION_GUARD_IMPORT_CONTROL_TRANSFER = 3;

const int IMAGE_DYNAMIC_RELOCATION_GUARD_INDIR_CONTROL_TRANSFER = 4;

const int IMAGE_DYNAMIC_RELOCATION_GUARD_SWITCHTABLE_BRANCH = 5;

const int IMAGE_HOT_PATCH_BASE_OBLIGATORY = 1;

const int IMAGE_HOT_PATCH_BASE_CAN_ROLL_BACK = 2;

const int IMAGE_HOT_PATCH_CHUNK_INVERSE = 2147483648;

const int IMAGE_HOT_PATCH_CHUNK_OBLIGATORY = 1073741824;

const int IMAGE_HOT_PATCH_CHUNK_RESERVED = 1072705536;

const int IMAGE_HOT_PATCH_CHUNK_TYPE = 1032192;

const int IMAGE_HOT_PATCH_CHUNK_SOURCE_RVA = 32768;

const int IMAGE_HOT_PATCH_CHUNK_TARGET_RVA = 16384;

const int IMAGE_HOT_PATCH_CHUNK_SIZE = 4095;

const int IMAGE_HOT_PATCH_NONE = 0;

const int IMAGE_HOT_PATCH_FUNCTION = 114688;

const int IMAGE_HOT_PATCH_ABSOLUTE = 180224;

const int IMAGE_HOT_PATCH_REL32 = 245760;

const int IMAGE_HOT_PATCH_CALL_TARGET = 278528;

const int IMAGE_HOT_PATCH_INDIRECT = 376832;

const int IMAGE_HOT_PATCH_NO_CALL_TARGET = 409600;

const int IMAGE_HOT_PATCH_DYNAMIC_VALUE = 491520;

const int IMAGE_GUARD_CF_INSTRUMENTED = 256;

const int IMAGE_GUARD_CFW_INSTRUMENTED = 512;

const int IMAGE_GUARD_CF_FUNCTION_TABLE_PRESENT = 1024;

const int IMAGE_GUARD_SECURITY_COOKIE_UNUSED = 2048;

const int IMAGE_GUARD_PROTECT_DELAYLOAD_IAT = 4096;

const int IMAGE_GUARD_DELAYLOAD_IAT_IN_ITS_OWN_SECTION = 8192;

const int IMAGE_GUARD_CF_EXPORT_SUPPRESSION_INFO_PRESENT = 16384;

const int IMAGE_GUARD_CF_ENABLE_EXPORT_SUPPRESSION = 32768;

const int IMAGE_GUARD_CF_LONGJUMP_TABLE_PRESENT = 65536;

const int IMAGE_GUARD_RF_INSTRUMENTED = 131072;

const int IMAGE_GUARD_RF_ENABLE = 262144;

const int IMAGE_GUARD_RF_STRICT = 524288;

const int IMAGE_GUARD_RETPOLINE_PRESENT = 1048576;

const int IMAGE_GUARD_EH_CONTINUATION_TABLE_PRESENT = 4194304;

const int IMAGE_GUARD_CF_FUNCTION_TABLE_SIZE_MASK = 4026531840;

const int IMAGE_GUARD_CF_FUNCTION_TABLE_SIZE_SHIFT = 28;

const int IMAGE_GUARD_FLAG_FID_SUPPRESSED = 1;

const int IMAGE_GUARD_FLAG_EXPORT_SUPPRESSED = 2;

const int IMAGE_ENCLAVE_LONG_ID_LENGTH = 32;

const int IMAGE_ENCLAVE_SHORT_ID_LENGTH = 16;

const int IMAGE_ENCLAVE_MINIMUM_CONFIG_SIZE = 76;

const int IMAGE_ENCLAVE_POLICY_DEBUGGABLE = 1;

const int IMAGE_ENCLAVE_FLAG_PRIMARY_IMAGE = 1;

const int IMAGE_ENCLAVE_IMPORT_MATCH_NONE = 0;

const int IMAGE_ENCLAVE_IMPORT_MATCH_UNIQUE_ID = 1;

const int IMAGE_ENCLAVE_IMPORT_MATCH_AUTHOR_ID = 2;

const int IMAGE_ENCLAVE_IMPORT_MATCH_FAMILY_ID = 3;

const int IMAGE_ENCLAVE_IMPORT_MATCH_IMAGE_ID = 4;

const int IMAGE_DEBUG_TYPE_UNKNOWN = 0;

const int IMAGE_DEBUG_TYPE_COFF = 1;

const int IMAGE_DEBUG_TYPE_CODEVIEW = 2;

const int IMAGE_DEBUG_TYPE_FPO = 3;

const int IMAGE_DEBUG_TYPE_MISC = 4;

const int IMAGE_DEBUG_TYPE_EXCEPTION = 5;

const int IMAGE_DEBUG_TYPE_FIXUP = 6;

const int IMAGE_DEBUG_TYPE_OMAP_TO_SRC = 7;

const int IMAGE_DEBUG_TYPE_OMAP_FROM_SRC = 8;

const int IMAGE_DEBUG_TYPE_BORLAND = 9;

const int IMAGE_DEBUG_TYPE_RESERVED10 = 10;

const int IMAGE_DEBUG_TYPE_CLSID = 11;

const int IMAGE_DEBUG_TYPE_VC_FEATURE = 12;

const int IMAGE_DEBUG_TYPE_POGO = 13;

const int IMAGE_DEBUG_TYPE_ILTCG = 14;

const int IMAGE_DEBUG_TYPE_MPX = 15;

const int IMAGE_DEBUG_TYPE_REPRO = 16;

const int IMAGE_DEBUG_TYPE_EX_DLLCHARACTERISTICS = 20;

const int IMAGE_DLLCHARACTERISTICS_EX_CET_COMPAT = 1;

const int IMAGE_DLLCHARACTERISTICS_EX_CET_COMPAT_STRICT_MODE = 2;

const int
    IMAGE_DLLCHARACTERISTICS_EX_CET_SET_CONTEXT_IP_VALIDATION_RELAXED_MODE = 4;

const int IMAGE_DLLCHARACTERISTICS_EX_CET_DYNAMIC_APIS_ALLOW_IN_PROC = 8;

const int IMAGE_DLLCHARACTERISTICS_EX_CET_RESERVED_1 = 16;

const int IMAGE_DLLCHARACTERISTICS_EX_CET_RESERVED_2 = 32;

const int FRAME_FPO = 0;

const int FRAME_TRAP = 1;

const int FRAME_TSS = 2;

const int FRAME_NONFPO = 3;

const int SIZEOF_RFPO_DATA = 16;

const int IMAGE_DEBUG_MISC_EXENAME = 1;

const int IMAGE_SEPARATE_DEBUG_SIGNATURE = 18756;

const int NON_PAGED_DEBUG_SIGNATURE = 18766;

const int IMAGE_SEPARATE_DEBUG_FLAGS_MASK = 32768;

const int IMAGE_SEPARATE_DEBUG_MISMATCH = 32768;

const int IMPORT_OBJECT_HDR_SIG2 = 65535;

const int RTL_RUN_ONCE_CHECK_ONLY = 1;

const int RTL_RUN_ONCE_ASYNC = 2;

const int RTL_RUN_ONCE_INIT_FAILED = 4;

const int RTL_RUN_ONCE_CTX_RESERVED_BITS = 2;

const int FAST_FAIL_LEGACY_GS_VIOLATION = 0;

const int FAST_FAIL_VTGUARD_CHECK_FAILURE = 1;

const int FAST_FAIL_STACK_COOKIE_CHECK_FAILURE = 2;

const int FAST_FAIL_CORRUPT_LIST_ENTRY = 3;

const int FAST_FAIL_INCORRECT_STACK = 4;

const int FAST_FAIL_INVALID_ARG = 5;

const int FAST_FAIL_GS_COOKIE_INIT = 6;

const int FAST_FAIL_FATAL_APP_EXIT = 7;

const int FAST_FAIL_RANGE_CHECK_FAILURE = 8;

const int FAST_FAIL_UNSAFE_REGISTRY_ACCESS = 9;

const int FAST_FAIL_GUARD_ICALL_CHECK_FAILURE = 10;

const int FAST_FAIL_GUARD_WRITE_CHECK_FAILURE = 11;

const int FAST_FAIL_INVALID_FIBER_SWITCH = 12;

const int FAST_FAIL_INVALID_SET_OF_CONTEXT = 13;

const int FAST_FAIL_INVALID_REFERENCE_COUNT = 14;

const int FAST_FAIL_INVALID_JUMP_BUFFER = 18;

const int FAST_FAIL_MRDATA_MODIFIED = 19;

const int FAST_FAIL_CERTIFICATION_FAILURE = 20;

const int FAST_FAIL_INVALID_EXCEPTION_CHAIN = 21;

const int FAST_FAIL_CRYPTO_LIBRARY = 22;

const int FAST_FAIL_INVALID_CALL_IN_DLL_CALLOUT = 23;

const int FAST_FAIL_INVALID_IMAGE_BASE = 24;

const int FAST_FAIL_DLOAD_PROTECTION_FAILURE = 25;

const int FAST_FAIL_UNSAFE_EXTENSION_CALL = 26;

const int FAST_FAIL_DEPRECATED_SERVICE_INVOKED = 27;

const int FAST_FAIL_INVALID_BUFFER_ACCESS = 28;

const int FAST_FAIL_INVALID_BALANCED_TREE = 29;

const int FAST_FAIL_INVALID_NEXT_THREAD = 30;

const int FAST_FAIL_GUARD_ICALL_CHECK_SUPPRESSED = 31;

const int FAST_FAIL_APCS_DISABLED = 32;

const int FAST_FAIL_INVALID_IDLE_STATE = 33;

const int FAST_FAIL_MRDATA_PROTECTION_FAILURE = 34;

const int FAST_FAIL_UNEXPECTED_HEAP_EXCEPTION = 35;

const int FAST_FAIL_INVALID_LOCK_STATE = 36;

const int FAST_FAIL_GUARD_JUMPTABLE = 37;

const int FAST_FAIL_INVALID_LONGJUMP_TARGET = 38;

const int FAST_FAIL_INVALID_DISPATCH_CONTEXT = 39;

const int FAST_FAIL_INVALID_THREAD = 40;

const int FAST_FAIL_INVALID_SYSCALL_NUMBER = 41;

const int FAST_FAIL_INVALID_FILE_OPERATION = 42;

const int FAST_FAIL_LPAC_ACCESS_DENIED = 43;

const int FAST_FAIL_GUARD_SS_FAILURE = 44;

const int FAST_FAIL_LOADER_CONTINUITY_FAILURE = 45;

const int FAST_FAIL_GUARD_EXPORT_SUPPRESSION_FAILURE = 46;

const int FAST_FAIL_INVALID_CONTROL_STACK = 47;

const int FAST_FAIL_SET_CONTEXT_DENIED = 48;

const int FAST_FAIL_INVALID_IAT = 49;

const int FAST_FAIL_HEAP_METADATA_CORRUPTION = 50;

const int FAST_FAIL_PAYLOAD_RESTRICTION_VIOLATION = 51;

const int FAST_FAIL_LOW_LABEL_ACCESS_DENIED = 52;

const int FAST_FAIL_ENCLAVE_CALL_FAILURE = 53;

const int FAST_FAIL_UNHANDLED_LSS_EXCEPTON = 54;

const int FAST_FAIL_ADMINLESS_ACCESS_DENIED = 55;

const int FAST_FAIL_UNEXPECTED_CALL = 56;

const int FAST_FAIL_CONTROL_INVALID_RETURN_ADDRESS = 57;

const int FAST_FAIL_UNEXPECTED_HOST_BEHAVIOR = 58;

const int FAST_FAIL_FLAGS_CORRUPTION = 59;

const int FAST_FAIL_VEH_CORRUPTION = 60;

const int FAST_FAIL_ETW_CORRUPTION = 61;

const int FAST_FAIL_RIO_ABORT = 62;

const int FAST_FAIL_INVALID_PFN = 63;

const int FAST_FAIL_INVALID_FAST_FAIL_CODE = 4294967295;

const int HEAP_NO_SERIALIZE = 1;

const int HEAP_GROWABLE = 2;

const int HEAP_GENERATE_EXCEPTIONS = 4;

const int HEAP_ZERO_MEMORY = 8;

const int HEAP_REALLOC_IN_PLACE_ONLY = 16;

const int HEAP_TAIL_CHECKING_ENABLED = 32;

const int HEAP_FREE_CHECKING_ENABLED = 64;

const int HEAP_DISABLE_COALESCE_ON_FREE = 128;

const int HEAP_CREATE_ALIGN_16 = 65536;

const int HEAP_CREATE_ENABLE_TRACING = 131072;

const int HEAP_CREATE_ENABLE_EXECUTE = 262144;

const int HEAP_MAXIMUM_TAG = 4095;

const int HEAP_PSEUDO_TAG_FLAG = 32768;

const int HEAP_TAG_SHIFT = 18;

const int HEAP_CREATE_SEGMENT_HEAP = 256;

const int HEAP_CREATE_HARDENED = 512;

const int IS_TEXT_UNICODE_ASCII16 = 1;

const int IS_TEXT_UNICODE_REVERSE_ASCII16 = 16;

const int IS_TEXT_UNICODE_STATISTICS = 2;

const int IS_TEXT_UNICODE_REVERSE_STATISTICS = 32;

const int IS_TEXT_UNICODE_CONTROLS = 4;

const int IS_TEXT_UNICODE_REVERSE_CONTROLS = 64;

const int IS_TEXT_UNICODE_SIGNATURE = 8;

const int IS_TEXT_UNICODE_REVERSE_SIGNATURE = 128;

const int IS_TEXT_UNICODE_ILLEGAL_CHARS = 256;

const int IS_TEXT_UNICODE_ODD_LENGTH = 512;

const int IS_TEXT_UNICODE_DBCS_LEADBYTE = 1024;

const int IS_TEXT_UNICODE_NULL_BYTES = 4096;

const int IS_TEXT_UNICODE_UNICODE_MASK = 15;

const int IS_TEXT_UNICODE_REVERSE_MASK = 240;

const int IS_TEXT_UNICODE_NOT_UNICODE_MASK = 3840;

const int IS_TEXT_UNICODE_NOT_ASCII_MASK = 61440;

const int COMPRESSION_FORMAT_NONE = 0;

const int COMPRESSION_FORMAT_DEFAULT = 1;

const int COMPRESSION_FORMAT_LZNT1 = 2;

const int COMPRESSION_FORMAT_XPRESS = 3;

const int COMPRESSION_FORMAT_XPRESS_HUFF = 4;

const int COMPRESSION_ENGINE_STANDARD = 0;

const int COMPRESSION_ENGINE_MAXIMUM = 256;

const int COMPRESSION_ENGINE_HIBER = 512;

const int SEF_DACL_AUTO_INHERIT = 1;

const int SEF_SACL_AUTO_INHERIT = 2;

const int SEF_DEFAULT_DESCRIPTOR_FOR_OBJECT = 4;

const int SEF_AVOID_PRIVILEGE_CHECK = 8;

const int SEF_AVOID_OWNER_CHECK = 16;

const int SEF_DEFAULT_OWNER_FROM_PARENT = 32;

const int SEF_DEFAULT_GROUP_FROM_PARENT = 64;

const int SEF_MACL_NO_WRITE_UP = 256;

const int SEF_MACL_NO_READ_UP = 512;

const int SEF_MACL_NO_EXECUTE_UP = 1024;

const int SEF_AI_USE_EXTRA_PARAMS = 2048;

const int SEF_AVOID_OWNER_RESTRICTION = 4096;

const int SEF_FORCE_USER_MODE = 8192;

const int SEF_MACL_VALID_FLAGS = 1792;

const int MESSAGE_RESOURCE_UNICODE = 1;

const int MESSAGE_RESOURCE_UTF8 = 2;

const int VER_EQUAL = 1;

const int VER_GREATER = 2;

const int VER_GREATER_EQUAL = 3;

const int VER_LESS = 4;

const int VER_LESS_EQUAL = 5;

const int VER_AND = 6;

const int VER_OR = 7;

const int VER_CONDITION_MASK = 7;

const int VER_NUM_BITS_PER_CONDITION_MASK = 3;

const int VER_MINORVERSION = 1;

const int VER_MAJORVERSION = 2;

const int VER_BUILDNUMBER = 4;

const int VER_PLATFORMID = 8;

const int VER_SERVICEPACKMINOR = 16;

const int VER_SERVICEPACKMAJOR = 32;

const int VER_SUITENAME = 64;

const int VER_PRODUCT_TYPE = 128;

const int VER_NT_WORKSTATION = 1;

const int VER_NT_DOMAIN_CONTROLLER = 2;

const int VER_NT_SERVER = 3;

const int VER_PLATFORM_WIN32s = 0;

const int VER_PLATFORM_WIN32_WINDOWS = 1;

const int VER_PLATFORM_WIN32_NT = 2;

const int RTL_UMS_VERSION = 256;

const int VRL_PREDEFINED_CLASS_BEGIN = 1;

const int VRL_CUSTOM_CLASS_BEGIN = 256;

const int VRL_CLASS_CONSISTENCY = 1;

const int VRL_ENABLE_KERNEL_BREAKS = -2147483648;

const int CTMF_INCLUDE_APPCONTAINER = 1;

const int CTMF_INCLUDE_LPAC = 2;

const int CTMF_VALID_FLAGS = 3;

const int FLUSH_NV_MEMORY_IN_FLAG_NO_DRAIN = 1;

const int FLUSH_NV_MEMORY_DEFAULT_TOKEN = -1;

const int WRITE_NV_MEMORY_FLAG_FLUSH = 1;

const int WRITE_NV_MEMORY_FLAG_NON_TEMPORAL = 2;

const int WRITE_NV_MEMORY_FLAG_PERSIST = 3;

const int WRITE_NV_MEMORY_FLAG_NO_DRAIN = 256;

const int FILL_NV_MEMORY_FLAG_FLUSH = 1;

const int FILL_NV_MEMORY_FLAG_NON_TEMPORAL = 2;

const int FILL_NV_MEMORY_FLAG_PERSIST = 3;

const int FILL_NV_MEMORY_FLAG_NO_DRAIN = 256;

const int RTL_CORRELATION_VECTOR_STRING_LENGTH = 129;

const int RTL_CORRELATION_VECTOR_VERSION_1 = 1;

const int RTL_CORRELATION_VECTOR_VERSION_2 = 2;

const int RTL_CORRELATION_VECTOR_VERSION_CURRENT = 2;

const int RTL_CORRELATION_VECTOR_V1_PREFIX_LENGTH = 16;

const int RTL_CORRELATION_VECTOR_V1_LENGTH = 64;

const int RTL_CORRELATION_VECTOR_V2_PREFIX_LENGTH = 22;

const int RTL_CORRELATION_VECTOR_V2_LENGTH = 128;

const int IMAGE_POLICY_METADATA_VERSION = 1;

const String IMAGE_POLICY_SECTION_NAME = '.tPolicy';

const int RTL_CRITICAL_SECTION_FLAG_NO_DEBUG_INFO = 16777216;

const int RTL_CRITICAL_SECTION_FLAG_DYNAMIC_SPIN = 33554432;

const int RTL_CRITICAL_SECTION_FLAG_STATIC_INIT = 67108864;

const int RTL_CRITICAL_SECTION_FLAG_RESOURCE_TYPE = 134217728;

const int RTL_CRITICAL_SECTION_FLAG_FORCE_DEBUG_INFO = 268435456;

const int RTL_CRITICAL_SECTION_ALL_FLAG_BITS = 4278190080;

const int RTL_CRITICAL_SECTION_FLAG_RESERVED = 3758096384;

const int RTL_CRITICAL_SECTION_DEBUG_FLAG_STATIC_INIT = 1;

const int RTL_CONDITION_VARIABLE_LOCKMODE_SHARED = 1;

const int HEAP_OPTIMIZE_RESOURCES_CURRENT_VERSION = 1;

const int WT_EXECUTEDEFAULT = 0;

const int WT_EXECUTEINIOTHREAD = 1;

const int WT_EXECUTEINUITHREAD = 2;

const int WT_EXECUTEINWAITTHREAD = 4;

const int WT_EXECUTEONLYONCE = 8;

const int WT_EXECUTEINTIMERTHREAD = 32;

const int WT_EXECUTELONGFUNCTION = 16;

const int WT_EXECUTEINPERSISTENTIOTHREAD = 64;

const int WT_EXECUTEINPERSISTENTTHREAD = 128;

const int WT_TRANSFER_IMPERSONATION = 256;

const int WT_EXECUTEINLONGTHREAD = 16;

const int WT_EXECUTEDELETEWAIT = 8;

const int ACTIVATION_CONTEXT_PATH_TYPE_NONE = 1;

const int ACTIVATION_CONTEXT_PATH_TYPE_WIN32_FILE = 2;

const int ACTIVATION_CONTEXT_PATH_TYPE_URL = 3;

const int ACTIVATION_CONTEXT_PATH_TYPE_ASSEMBLYREF = 4;

const int CREATE_BOUNDARY_DESCRIPTOR_ADD_APPCONTAINER_SID = 1;

const int PERFORMANCE_DATA_VERSION = 1;

const int READ_THREAD_PROFILING_FLAG_DISPATCHING = 1;

const int READ_THREAD_PROFILING_FLAG_HARDWARE_COUNTERS = 2;

const String UNIFIEDBUILDREVISION_KEY = '\\';

const String UNIFIEDBUILDREVISION_VALUE = 'U';

const int UNIFIEDBUILDREVISION_MIN = 0;

const String DEVICEFAMILYDEVICEFORM_KEY = '\\';

const String DEVICEFAMILYDEVICEFORM_VALUE = 'D';

const int DEVICEFAMILYINFOENUM_UAP = 0;

const int DEVICEFAMILYINFOENUM_WINDOWS_8X = 1;

const int DEVICEFAMILYINFOENUM_WINDOWS_PHONE_8X = 2;

const int DEVICEFAMILYINFOENUM_DESKTOP = 3;

const int DEVICEFAMILYINFOENUM_MOBILE = 4;

const int DEVICEFAMILYINFOENUM_XBOX = 5;

const int DEVICEFAMILYINFOENUM_TEAM = 6;

const int DEVICEFAMILYINFOENUM_IOT = 7;

const int DEVICEFAMILYINFOENUM_IOT_HEADLESS = 8;

const int DEVICEFAMILYINFOENUM_SERVER = 9;

const int DEVICEFAMILYINFOENUM_HOLOGRAPHIC = 10;

const int DEVICEFAMILYINFOENUM_XBOXSRA = 11;

const int DEVICEFAMILYINFOENUM_XBOXERA = 12;

const int DEVICEFAMILYINFOENUM_SERVER_NANO = 13;

const int DEVICEFAMILYINFOENUM_8828080 = 14;

const int DEVICEFAMILYINFOENUM_7067329 = 15;

const int DEVICEFAMILYINFOENUM_WINDOWS_CORE = 16;

const int DEVICEFAMILYINFOENUM_WINDOWS_CORE_HEADLESS = 17;

const int DEVICEFAMILYINFOENUM_MAX = 17;

const int DEVICEFAMILYDEVICEFORM_UNKNOWN = 0;

const int DEVICEFAMILYDEVICEFORM_PHONE = 1;

const int DEVICEFAMILYDEVICEFORM_TABLET = 2;

const int DEVICEFAMILYDEVICEFORM_DESKTOP = 3;

const int DEVICEFAMILYDEVICEFORM_NOTEBOOK = 4;

const int DEVICEFAMILYDEVICEFORM_CONVERTIBLE = 5;

const int DEVICEFAMILYDEVICEFORM_DETACHABLE = 6;

const int DEVICEFAMILYDEVICEFORM_ALLINONE = 7;

const int DEVICEFAMILYDEVICEFORM_STICKPC = 8;

const int DEVICEFAMILYDEVICEFORM_PUCK = 9;

const int DEVICEFAMILYDEVICEFORM_LARGESCREEN = 10;

const int DEVICEFAMILYDEVICEFORM_HMD = 11;

const int DEVICEFAMILYDEVICEFORM_INDUSTRY_HANDHELD = 12;

const int DEVICEFAMILYDEVICEFORM_INDUSTRY_TABLET = 13;

const int DEVICEFAMILYDEVICEFORM_BANKING = 14;

const int DEVICEFAMILYDEVICEFORM_BUILDING_AUTOMATION = 15;

const int DEVICEFAMILYDEVICEFORM_DIGITAL_SIGNAGE = 16;

const int DEVICEFAMILYDEVICEFORM_GAMING = 17;

const int DEVICEFAMILYDEVICEFORM_HOME_AUTOMATION = 18;

const int DEVICEFAMILYDEVICEFORM_INDUSTRIAL_AUTOMATION = 19;

const int DEVICEFAMILYDEVICEFORM_KIOSK = 20;

const int DEVICEFAMILYDEVICEFORM_MAKER_BOARD = 21;

const int DEVICEFAMILYDEVICEFORM_MEDICAL = 22;

const int DEVICEFAMILYDEVICEFORM_NETWORKING = 23;

const int DEVICEFAMILYDEVICEFORM_POINT_OF_SERVICE = 24;

const int DEVICEFAMILYDEVICEFORM_PRINTING = 25;

const int DEVICEFAMILYDEVICEFORM_THIN_CLIENT = 26;

const int DEVICEFAMILYDEVICEFORM_TOY = 27;

const int DEVICEFAMILYDEVICEFORM_VENDING = 28;

const int DEVICEFAMILYDEVICEFORM_INDUSTRY_OTHER = 29;

const int DEVICEFAMILYDEVICEFORM_XBOX_ONE = 30;

const int DEVICEFAMILYDEVICEFORM_XBOX_ONE_S = 31;

const int DEVICEFAMILYDEVICEFORM_XBOX_ONE_X = 32;

const int DEVICEFAMILYDEVICEFORM_XBOX_ONE_X_DEVKIT = 33;

const int DEVICEFAMILYDEVICEFORM_MAX = 33;

const int DLL_PROCESS_ATTACH = 1;

const int DLL_THREAD_ATTACH = 2;

const int DLL_THREAD_DETACH = 3;

const int DLL_PROCESS_DETACH = 0;

const int EVENTLOG_SEQUENTIAL_READ = 1;

const int EVENTLOG_SEEK_READ = 2;

const int EVENTLOG_FORWARDS_READ = 4;

const int EVENTLOG_BACKWARDS_READ = 8;

const int EVENTLOG_SUCCESS = 0;

const int EVENTLOG_ERROR_TYPE = 1;

const int EVENTLOG_WARNING_TYPE = 2;

const int EVENTLOG_INFORMATION_TYPE = 4;

const int EVENTLOG_AUDIT_SUCCESS = 8;

const int EVENTLOG_AUDIT_FAILURE = 16;

const int EVENTLOG_START_PAIRED_EVENT = 1;

const int EVENTLOG_END_PAIRED_EVENT = 2;

const int EVENTLOG_END_ALL_PAIRED_EVENTS = 4;

const int EVENTLOG_PAIRED_EVENT_ACTIVE = 8;

const int EVENTLOG_PAIRED_EVENT_INACTIVE = 16;

const int MAXLOGICALLOGNAMESIZE = 256;

const int KEY_QUERY_VALUE = 1;

const int KEY_SET_VALUE = 2;

const int KEY_CREATE_SUB_KEY = 4;

const int KEY_ENUMERATE_SUB_KEYS = 8;

const int KEY_NOTIFY = 16;

const int KEY_CREATE_LINK = 32;

const int KEY_WOW64_32KEY = 512;

const int KEY_WOW64_64KEY = 256;

const int KEY_WOW64_RES = 768;

const int KEY_READ = 131097;

const int KEY_WRITE = 131078;

const int KEY_EXECUTE = 131097;

const int KEY_ALL_ACCESS = 983103;

const int REG_OPTION_RESERVED = 0;

const int REG_OPTION_NON_VOLATILE = 0;

const int REG_OPTION_VOLATILE = 1;

const int REG_OPTION_CREATE_LINK = 2;

const int REG_OPTION_BACKUP_RESTORE = 4;

const int REG_OPTION_OPEN_LINK = 8;

const int REG_OPTION_DONT_VIRTUALIZE = 16;

const int REG_LEGAL_OPTION = 31;

const int REG_OPEN_LEGAL_OPTION = 28;

const int REG_CREATED_NEW_KEY = 1;

const int REG_OPENED_EXISTING_KEY = 2;

const int REG_STANDARD_FORMAT = 1;

const int REG_LATEST_FORMAT = 2;

const int REG_NO_COMPRESSION = 4;

const int REG_WHOLE_HIVE_VOLATILE = 1;

const int REG_REFRESH_HIVE = 2;

const int REG_NO_LAZY_FLUSH = 4;

const int REG_FORCE_RESTORE = 8;

const int REG_APP_HIVE = 16;

const int REG_PROCESS_PRIVATE = 32;

const int REG_START_JOURNAL = 64;

const int REG_HIVE_EXACT_FILE_GROWTH = 128;

const int REG_HIVE_NO_RM = 256;

const int REG_HIVE_SINGLE_LOG = 512;

const int REG_BOOT_HIVE = 1024;

const int REG_LOAD_HIVE_OPEN_HANDLE = 2048;

const int REG_FLUSH_HIVE_FILE_GROWTH = 4096;

const int REG_OPEN_READ_ONLY = 8192;

const int REG_IMMUTABLE = 16384;

const int REG_NO_IMPERSONATION_FALLBACK = 32768;

const int REG_APP_HIVE_OPEN_READ_ONLY = 8192;

const int REG_FORCE_UNLOAD = 1;

const int REG_UNLOAD_LEGAL_FLAGS = 1;

const int REG_NOTIFY_CHANGE_NAME = 1;

const int REG_NOTIFY_CHANGE_ATTRIBUTES = 2;

const int REG_NOTIFY_CHANGE_LAST_SET = 4;

const int REG_NOTIFY_CHANGE_SECURITY = 8;

const int REG_NOTIFY_THREAD_AGNOSTIC = 268435456;

const int REG_LEGAL_CHANGE_FILTER = 268435471;

const int REG_NONE = 0;

const int REG_SZ = 1;

const int REG_EXPAND_SZ = 2;

const int REG_BINARY = 3;

const int REG_DWORD = 4;

const int REG_DWORD_LITTLE_ENDIAN = 4;

const int REG_DWORD_BIG_ENDIAN = 5;

const int REG_LINK = 6;

const int REG_MULTI_SZ = 7;

const int REG_RESOURCE_LIST = 8;

const int REG_FULL_RESOURCE_DESCRIPTOR = 9;

const int REG_RESOURCE_REQUIREMENTS_LIST = 10;

const int REG_QWORD = 11;

const int REG_QWORD_LITTLE_ENDIAN = 11;

const int SERVICE_KERNEL_DRIVER = 1;

const int SERVICE_FILE_SYSTEM_DRIVER = 2;

const int SERVICE_ADAPTER = 4;

const int SERVICE_RECOGNIZER_DRIVER = 8;

const int SERVICE_DRIVER = 11;

const int SERVICE_WIN32_OWN_PROCESS = 16;

const int SERVICE_WIN32_SHARE_PROCESS = 32;

const int SERVICE_WIN32 = 48;

const int SERVICE_USER_SERVICE = 64;

const int SERVICE_USERSERVICE_INSTANCE = 128;

const int SERVICE_USER_SHARE_PROCESS = 96;

const int SERVICE_USER_OWN_PROCESS = 80;

const int SERVICE_INTERACTIVE_PROCESS = 256;

const int SERVICE_PKG_SERVICE = 512;

const int SERVICE_TYPE_ALL = 1023;

const int SERVICE_BOOT_START = 0;

const int SERVICE_SYSTEM_START = 1;

const int SERVICE_AUTO_START = 2;

const int SERVICE_DEMAND_START = 3;

const int SERVICE_DISABLED = 4;

const int SERVICE_ERROR_IGNORE = 0;

const int SERVICE_ERROR_NORMAL = 1;

const int SERVICE_ERROR_SEVERE = 2;

const int SERVICE_ERROR_CRITICAL = 3;

const int CM_SERVICE_NETWORK_BOOT_LOAD = 1;

const int CM_SERVICE_VIRTUAL_DISK_BOOT_LOAD = 2;

const int CM_SERVICE_USB_DISK_BOOT_LOAD = 4;

const int CM_SERVICE_SD_DISK_BOOT_LOAD = 8;

const int CM_SERVICE_USB3_DISK_BOOT_LOAD = 16;

const int CM_SERVICE_MEASURED_BOOT_LOAD = 32;

const int CM_SERVICE_VERIFIER_BOOT_LOAD = 64;

const int CM_SERVICE_WINPE_BOOT_LOAD = 128;

const int CM_SERVICE_RAM_DISK_BOOT_LOAD = 256;

const int CM_SERVICE_VALID_PROMOTION_MASK = 511;

const int TAPE_ERASE_SHORT = 0;

const int TAPE_ERASE_LONG = 1;

const int TAPE_LOAD = 0;

const int TAPE_UNLOAD = 1;

const int TAPE_TENSION = 2;

const int TAPE_LOCK = 3;

const int TAPE_UNLOCK = 4;

const int TAPE_FORMAT = 5;

const int TAPE_SETMARKS = 0;

const int TAPE_FILEMARKS = 1;

const int TAPE_SHORT_FILEMARKS = 2;

const int TAPE_LONG_FILEMARKS = 3;

const int TAPE_ABSOLUTE_POSITION = 0;

const int TAPE_LOGICAL_POSITION = 1;

const int TAPE_PSEUDO_LOGICAL_POSITION = 2;

const int TAPE_REWIND = 0;

const int TAPE_ABSOLUTE_BLOCK = 1;

const int TAPE_LOGICAL_BLOCK = 2;

const int TAPE_PSEUDO_LOGICAL_BLOCK = 3;

const int TAPE_SPACE_END_OF_DATA = 4;

const int TAPE_SPACE_RELATIVE_BLOCKS = 5;

const int TAPE_SPACE_FILEMARKS = 6;

const int TAPE_SPACE_SEQUENTIAL_FMKS = 7;

const int TAPE_SPACE_SETMARKS = 8;

const int TAPE_SPACE_SEQUENTIAL_SMKS = 9;

const int TAPE_DRIVE_FIXED = 1;

const int TAPE_DRIVE_SELECT = 2;

const int TAPE_DRIVE_INITIATOR = 4;

const int TAPE_DRIVE_ERASE_SHORT = 16;

const int TAPE_DRIVE_ERASE_LONG = 32;

const int TAPE_DRIVE_ERASE_BOP_ONLY = 64;

const int TAPE_DRIVE_ERASE_IMMEDIATE = 128;

const int TAPE_DRIVE_TAPE_CAPACITY = 256;

const int TAPE_DRIVE_TAPE_REMAINING = 512;

const int TAPE_DRIVE_FIXED_BLOCK = 1024;

const int TAPE_DRIVE_VARIABLE_BLOCK = 2048;

const int TAPE_DRIVE_WRITE_PROTECT = 4096;

const int TAPE_DRIVE_EOT_WZ_SIZE = 8192;

const int TAPE_DRIVE_ECC = 65536;

const int TAPE_DRIVE_COMPRESSION = 131072;

const int TAPE_DRIVE_PADDING = 262144;

const int TAPE_DRIVE_REPORT_SMKS = 524288;

const int TAPE_DRIVE_GET_ABSOLUTE_BLK = 1048576;

const int TAPE_DRIVE_GET_LOGICAL_BLK = 2097152;

const int TAPE_DRIVE_SET_EOT_WZ_SIZE = 4194304;

const int TAPE_DRIVE_EJECT_MEDIA = 16777216;

const int TAPE_DRIVE_CLEAN_REQUESTS = 33554432;

const int TAPE_DRIVE_SET_CMP_BOP_ONLY = 67108864;

const int TAPE_DRIVE_RESERVED_BIT = 2147483648;

const int TAPE_DRIVE_LOAD_UNLOAD = 2147483649;

const int TAPE_DRIVE_TENSION = 2147483650;

const int TAPE_DRIVE_LOCK_UNLOCK = 2147483652;

const int TAPE_DRIVE_REWIND_IMMEDIATE = 2147483656;

const int TAPE_DRIVE_SET_BLOCK_SIZE = 2147483664;

const int TAPE_DRIVE_LOAD_UNLD_IMMED = 2147483680;

const int TAPE_DRIVE_TENSION_IMMED = 2147483712;

const int TAPE_DRIVE_LOCK_UNLK_IMMED = 2147483776;

const int TAPE_DRIVE_SET_ECC = 2147483904;

const int TAPE_DRIVE_SET_COMPRESSION = 2147484160;

const int TAPE_DRIVE_SET_PADDING = 2147484672;

const int TAPE_DRIVE_SET_REPORT_SMKS = 2147485696;

const int TAPE_DRIVE_ABSOLUTE_BLK = 2147487744;

const int TAPE_DRIVE_ABS_BLK_IMMED = 2147491840;

const int TAPE_DRIVE_LOGICAL_BLK = 2147500032;

const int TAPE_DRIVE_LOG_BLK_IMMED = 2147516416;

const int TAPE_DRIVE_END_OF_DATA = 2147549184;

const int TAPE_DRIVE_RELATIVE_BLKS = 2147614720;

const int TAPE_DRIVE_FILEMARKS = 2147745792;

const int TAPE_DRIVE_SEQUENTIAL_FMKS = 2148007936;

const int TAPE_DRIVE_SETMARKS = 2148532224;

const int TAPE_DRIVE_SEQUENTIAL_SMKS = 2149580800;

const int TAPE_DRIVE_REVERSE_POSITION = 2151677952;

const int TAPE_DRIVE_SPACE_IMMEDIATE = 2155872256;

const int TAPE_DRIVE_WRITE_SETMARKS = 2164260864;

const int TAPE_DRIVE_WRITE_FILEMARKS = 2181038080;

const int TAPE_DRIVE_WRITE_SHORT_FMKS = 2214592512;

const int TAPE_DRIVE_WRITE_LONG_FMKS = 2281701376;

const int TAPE_DRIVE_WRITE_MARK_IMMED = 2415919104;

const int TAPE_DRIVE_FORMAT = 2684354560;

const int TAPE_DRIVE_FORMAT_IMMEDIATE = 3221225472;

const int TAPE_DRIVE_HIGH_FEATURES = 2147483648;

const int TAPE_FIXED_PARTITIONS = 0;

const int TAPE_SELECT_PARTITIONS = 1;

const int TAPE_INITIATOR_PARTITIONS = 2;

const int TAPE_QUERY_DRIVE_PARAMETERS = 0;

const int TAPE_QUERY_MEDIA_CAPACITY = 1;

const int TAPE_CHECK_FOR_DRIVE_PROBLEM = 2;

const int TAPE_QUERY_IO_ERROR_DATA = 3;

const int TAPE_QUERY_DEVICE_ERROR_DATA = 4;

const int TRANSACTION_MANAGER_VOLATILE = 1;

const int TRANSACTION_MANAGER_COMMIT_DEFAULT = 0;

const int TRANSACTION_MANAGER_COMMIT_SYSTEM_VOLUME = 2;

const int TRANSACTION_MANAGER_COMMIT_SYSTEM_HIVES = 4;

const int TRANSACTION_MANAGER_COMMIT_LOWEST = 8;

const int TRANSACTION_MANAGER_CORRUPT_FOR_RECOVERY = 16;

const int TRANSACTION_MANAGER_CORRUPT_FOR_PROGRESS = 32;

const int TRANSACTION_MANAGER_MAXIMUM_OPTION = 63;

const int TRANSACTION_DO_NOT_PROMOTE = 1;

const int TRANSACTION_MAXIMUM_OPTION = 1;

const int RESOURCE_MANAGER_VOLATILE = 1;

const int RESOURCE_MANAGER_COMMUNICATION = 2;

const int RESOURCE_MANAGER_MAXIMUM_OPTION = 3;

const int CRM_PROTOCOL_EXPLICIT_MARSHAL_ONLY = 1;

const int CRM_PROTOCOL_DYNAMIC_MARSHAL_INFO = 2;

const int CRM_PROTOCOL_MAXIMUM_OPTION = 3;

const int ENLISTMENT_SUPERIOR = 1;

const int ENLISTMENT_MAXIMUM_OPTION = 1;

const int TRANSACTION_NOTIFY_MASK = 1073741823;

const int TRANSACTION_NOTIFY_PREPREPARE = 1;

const int TRANSACTION_NOTIFY_PREPARE = 2;

const int TRANSACTION_NOTIFY_COMMIT = 4;

const int TRANSACTION_NOTIFY_ROLLBACK = 8;

const int TRANSACTION_NOTIFY_PREPREPARE_COMPLETE = 16;

const int TRANSACTION_NOTIFY_PREPARE_COMPLETE = 32;

const int TRANSACTION_NOTIFY_COMMIT_COMPLETE = 64;

const int TRANSACTION_NOTIFY_ROLLBACK_COMPLETE = 128;

const int TRANSACTION_NOTIFY_RECOVER = 256;

const int TRANSACTION_NOTIFY_SINGLE_PHASE_COMMIT = 512;

const int TRANSACTION_NOTIFY_DELEGATE_COMMIT = 1024;

const int TRANSACTION_NOTIFY_RECOVER_QUERY = 2048;

const int TRANSACTION_NOTIFY_ENLIST_PREPREPARE = 4096;

const int TRANSACTION_NOTIFY_LAST_RECOVER = 8192;

const int TRANSACTION_NOTIFY_INDOUBT = 16384;

const int TRANSACTION_NOTIFY_PROPAGATE_PULL = 32768;

const int TRANSACTION_NOTIFY_PROPAGATE_PUSH = 65536;

const int TRANSACTION_NOTIFY_MARSHAL = 131072;

const int TRANSACTION_NOTIFY_ENLIST_MASK = 262144;

const int TRANSACTION_NOTIFY_RM_DISCONNECTED = 16777216;

const int TRANSACTION_NOTIFY_TM_ONLINE = 33554432;

const int TRANSACTION_NOTIFY_COMMIT_REQUEST = 67108864;

const int TRANSACTION_NOTIFY_PROMOTE = 134217728;

const int TRANSACTION_NOTIFY_PROMOTE_NEW = 268435456;

const int TRANSACTION_NOTIFY_REQUEST_OUTCOME = 536870912;

const int TRANSACTION_NOTIFY_COMMIT_FINALIZE = 1073741824;

const String TRANSACTIONMANAGER_OBJECT_PATH = '\\';

const String TRANSACTION_OBJECT_PATH = '\\';

const String ENLISTMENT_OBJECT_PATH = '\\';

const String RESOURCE_MANAGER_OBJECT_PATH = '\\';

const int TRANSACTIONMANAGER_OBJECT_NAME_LENGTH_IN_BYTES = 118;

const int TRANSACTION_OBJECT_NAME_LENGTH_IN_BYTES = 104;

const int ENLISTMENT_OBJECT_NAME_LENGTH_IN_BYTES = 102;

const int RESOURCE_MANAGER_OBJECT_NAME_LENGTH_IN_BYTES = 112;

const int TRANSACTION_NOTIFICATION_TM_ONLINE_FLAG_IS_CLUSTERED = 1;

const int KTM_MARSHAL_BLOB_VERSION_MAJOR = 1;

const int KTM_MARSHAL_BLOB_VERSION_MINOR = 1;

const int MAX_TRANSACTION_DESCRIPTION_LENGTH = 64;

const int MAX_RESOURCEMANAGER_DESCRIPTION_LENGTH = 64;

const int TRANSACTIONMANAGER_QUERY_INFORMATION = 1;

const int TRANSACTIONMANAGER_SET_INFORMATION = 2;

const int TRANSACTIONMANAGER_RECOVER = 4;

const int TRANSACTIONMANAGER_RENAME = 8;

const int TRANSACTIONMANAGER_CREATE_RM = 16;

const int TRANSACTIONMANAGER_BIND_TRANSACTION = 32;

const int TRANSACTIONMANAGER_GENERIC_READ = 131073;

const int TRANSACTIONMANAGER_GENERIC_WRITE = 131102;

const int TRANSACTIONMANAGER_GENERIC_EXECUTE = 131072;

const int TRANSACTIONMANAGER_ALL_ACCESS = 983103;

const int TRANSACTION_QUERY_INFORMATION = 1;

const int TRANSACTION_SET_INFORMATION = 2;

const int TRANSACTION_ENLIST = 4;

const int TRANSACTION_COMMIT = 8;

const int TRANSACTION_ROLLBACK = 16;

const int TRANSACTION_PROPAGATE = 32;

const int TRANSACTION_RIGHT_RESERVED1 = 64;

const int TRANSACTION_GENERIC_READ = 1179649;

const int TRANSACTION_GENERIC_WRITE = 1179710;

const int TRANSACTION_GENERIC_EXECUTE = 1179672;

const int TRANSACTION_ALL_ACCESS = 2031679;

const int TRANSACTION_RESOURCE_MANAGER_RIGHTS = 1179703;

const int RESOURCEMANAGER_QUERY_INFORMATION = 1;

const int RESOURCEMANAGER_SET_INFORMATION = 2;

const int RESOURCEMANAGER_RECOVER = 4;

const int RESOURCEMANAGER_ENLIST = 8;

const int RESOURCEMANAGER_GET_NOTIFICATION = 16;

const int RESOURCEMANAGER_REGISTER_PROTOCOL = 32;

const int RESOURCEMANAGER_COMPLETE_PROPAGATION = 64;

const int RESOURCEMANAGER_GENERIC_READ = 1179649;

const int RESOURCEMANAGER_GENERIC_WRITE = 1179774;

const int RESOURCEMANAGER_GENERIC_EXECUTE = 1179740;

const int RESOURCEMANAGER_ALL_ACCESS = 2031743;

const int ENLISTMENT_QUERY_INFORMATION = 1;

const int ENLISTMENT_SET_INFORMATION = 2;

const int ENLISTMENT_RECOVER = 4;

const int ENLISTMENT_SUBORDINATE_RIGHTS = 8;

const int ENLISTMENT_SUPERIOR_RIGHTS = 16;

const int ENLISTMENT_GENERIC_READ = 131073;

const int ENLISTMENT_GENERIC_WRITE = 131102;

const int ENLISTMENT_GENERIC_EXECUTE = 131100;

const int ENLISTMENT_ALL_ACCESS = 983071;

const int ACTIVATION_CONTEXT_SECTION_ASSEMBLY_INFORMATION = 1;

const int ACTIVATION_CONTEXT_SECTION_DLL_REDIRECTION = 2;

const int ACTIVATION_CONTEXT_SECTION_WINDOW_CLASS_REDIRECTION = 3;

const int ACTIVATION_CONTEXT_SECTION_COM_SERVER_REDIRECTION = 4;

const int ACTIVATION_CONTEXT_SECTION_COM_INTERFACE_REDIRECTION = 5;

const int ACTIVATION_CONTEXT_SECTION_COM_TYPE_LIBRARY_REDIRECTION = 6;

const int ACTIVATION_CONTEXT_SECTION_COM_PROGID_REDIRECTION = 7;

const int ACTIVATION_CONTEXT_SECTION_GLOBAL_OBJECT_RENAME_TABLE = 8;

const int ACTIVATION_CONTEXT_SECTION_CLR_SURROGATES = 9;

const int ACTIVATION_CONTEXT_SECTION_APPLICATION_SETTINGS = 10;

const int ACTIVATION_CONTEXT_SECTION_COMPATIBILITY_INFO = 11;

const int ACTIVATION_CONTEXT_SECTION_WINRT_ACTIVATABLE_CLASSES = 12;

const int HFILE_ERROR = -1;

const int APP_LOCAL_DEVICE_ID_SIZE = 32;

const int DM_UPDATE = 1;

const int DM_COPY = 2;

const int DM_PROMPT = 4;

const int DM_MODIFY = 8;

const int DM_IN_BUFFER = 8;

const int DM_IN_PROMPT = 4;

const int DM_OUT_BUFFER = 2;

const int DM_OUT_DEFAULT = 1;

const int DC_FIELDS = 1;

const int DC_PAPERS = 2;

const int DC_PAPERSIZE = 3;

const int DC_MINEXTENT = 4;

const int DC_MAXEXTENT = 5;

const int DC_BINS = 6;

const int DC_DUPLEX = 7;

const int DC_SIZE = 8;

const int DC_EXTRA = 9;

const int DC_VERSION = 10;

const int DC_DRIVER = 11;

const int DC_BINNAMES = 12;

const int DC_ENUMRESOLUTIONS = 13;

const int DC_FILEDEPENDENCIES = 14;

const int DC_TRUETYPE = 15;

const int DC_PAPERNAMES = 16;

const int DC_ORIENTATION = 17;

const int DC_COPIES = 18;

const int FIND_FIRST_EX_CASE_SENSITIVE = 1;

const int FIND_FIRST_EX_LARGE_FETCH = 2;

const int FIND_FIRST_EX_ON_DISK_ENTRIES_ONLY = 4;

const int LOCKFILE_FAIL_IMMEDIATELY = 1;

const int LOCKFILE_EXCLUSIVE_LOCK = 2;

const int PROCESS_HEAP_REGION = 1;

const int PROCESS_HEAP_UNCOMMITTED_RANGE = 2;

const int PROCESS_HEAP_ENTRY_BUSY = 4;

const int PROCESS_HEAP_SEG_ALLOC = 8;

const int PROCESS_HEAP_ENTRY_MOVEABLE = 16;

const int PROCESS_HEAP_ENTRY_DDESHARE = 32;

const int EXCEPTION_DEBUG_EVENT = 1;

const int CREATE_THREAD_DEBUG_EVENT = 2;

const int CREATE_PROCESS_DEBUG_EVENT = 3;

const int EXIT_THREAD_DEBUG_EVENT = 4;

const int EXIT_PROCESS_DEBUG_EVENT = 5;

const int LOAD_DLL_DEBUG_EVENT = 6;

const int UNLOAD_DLL_DEBUG_EVENT = 7;

const int OUTPUT_DEBUG_STRING_EVENT = 8;

const int RIP_EVENT = 9;

const int STILL_ACTIVE = 259;

const int EXCEPTION_ACCESS_VIOLATION = 3221225477;

const int EXCEPTION_DATATYPE_MISALIGNMENT = 2147483650;

const int EXCEPTION_BREAKPOINT = 2147483651;

const int EXCEPTION_SINGLE_STEP = 2147483652;

const int EXCEPTION_ARRAY_BOUNDS_EXCEEDED = 3221225612;

const int EXCEPTION_FLT_DENORMAL_OPERAND = 3221225613;

const int EXCEPTION_FLT_DIVIDE_BY_ZERO = 3221225614;

const int EXCEPTION_FLT_INEXACT_RESULT = 3221225615;

const int EXCEPTION_FLT_INVALID_OPERATION = 3221225616;

const int EXCEPTION_FLT_OVERFLOW = 3221225617;

const int EXCEPTION_FLT_STACK_CHECK = 3221225618;

const int EXCEPTION_FLT_UNDERFLOW = 3221225619;

const int EXCEPTION_INT_DIVIDE_BY_ZERO = 3221225620;

const int EXCEPTION_INT_OVERFLOW = 3221225621;

const int EXCEPTION_PRIV_INSTRUCTION = 3221225622;

const int EXCEPTION_IN_PAGE_ERROR = 3221225478;

const int EXCEPTION_ILLEGAL_INSTRUCTION = 3221225501;

const int EXCEPTION_NONCONTINUABLE_EXCEPTION = 3221225509;

const int EXCEPTION_STACK_OVERFLOW = 3221225725;

const int EXCEPTION_INVALID_DISPOSITION = 3221225510;

const int EXCEPTION_GUARD_PAGE = 2147483649;

const int EXCEPTION_INVALID_HANDLE = 3221225480;

const int CONTROL_C_EXIT = 3221225786;

const int LMEM_FIXED = 0;

const int LMEM_MOVEABLE = 2;

const int LMEM_NOCOMPACT = 16;

const int LMEM_NODISCARD = 32;

const int LMEM_ZEROINIT = 64;

const int LMEM_MODIFY = 128;

const int LMEM_DISCARDABLE = 3840;

const int LMEM_VALID_FLAGS = 3954;

const int LMEM_INVALID_HANDLE = 32768;

const int LHND = 66;

const int LPTR = 64;

const int NONZEROLHND = 2;

const int NONZEROLPTR = 0;

const int LMEM_DISCARDED = 16384;

const int LMEM_LOCKCOUNT = 255;

const int NUMA_NO_PREFERRED_NODE = 4294967295;

const int CREATE_NEW = 1;

const int CREATE_ALWAYS = 2;

const int OPEN_EXISTING = 3;

const int OPEN_ALWAYS = 4;

const int TRUNCATE_EXISTING = 5;

const int INVALID_FILE_SIZE = 4294967295;

const int INVALID_SET_FILE_POINTER = 4294967295;

const int INVALID_FILE_ATTRIBUTES = 4294967295;

const int FLS_OUT_OF_INDEXES = 4294967295;

const int INIT_ONCE_CHECK_ONLY = 1;

const int INIT_ONCE_ASYNC = 2;

const int INIT_ONCE_INIT_FAILED = 4;

const int INIT_ONCE_CTX_RESERVED_BITS = 2;

const int CONDITION_VARIABLE_LOCKMODE_SHARED = 1;

const int MUTEX_MODIFY_STATE = 1;

const int MUTEX_ALL_ACCESS = 2031617;

const int CREATE_MUTEX_INITIAL_OWNER = 1;

const int CREATE_EVENT_MANUAL_RESET = 1;

const int CREATE_EVENT_INITIAL_SET = 2;

const int CREATE_WAITABLE_TIMER_MANUAL_RESET = 1;

const int CREATE_WAITABLE_TIMER_HIGH_RESOLUTION = 2;

const int SYNCHRONIZATION_BARRIER_FLAGS_SPIN_ONLY = 1;

const int SYNCHRONIZATION_BARRIER_FLAGS_BLOCK_ONLY = 2;

const int SYNCHRONIZATION_BARRIER_FLAGS_NO_DELETE = 4;

const int TLS_OUT_OF_INDEXES = 4294967295;

const int PROC_THREAD_ATTRIBUTE_REPLACE_VALUE = 1;

const int PROCESS_AFFINITY_ENABLE_AUTO_UPDATE = 1;

const int THREAD_POWER_THROTTLING_CURRENT_VERSION = 1;

const int THREAD_POWER_THROTTLING_EXECUTION_SPEED = 1;

const int THREAD_POWER_THROTTLING_VALID_FLAGS = 1;

const int PME_CURRENT_VERSION = 1;

const int PME_FAILFAST_ON_COMMIT_FAIL_DISABLE = 0;

const int PME_FAILFAST_ON_COMMIT_FAIL_ENABLE = 1;

const int PROCESS_POWER_THROTTLING_CURRENT_VERSION = 1;

const int PROCESS_POWER_THROTTLING_EXECUTION_SPEED = 1;

const int PROCESS_POWER_THROTTLING_VALID_FLAGS = 1;

const int PROCESS_LEAP_SECOND_INFO_FLAG_ENABLE_SIXTY_SECOND = 1;

const int PROCESS_LEAP_SECOND_INFO_VALID_FLAGS = 1;

const int USER_CET_ENVIRONMENT_WIN32_PROCESS = 0;

const int USER_CET_ENVIRONMENT_SGX2_ENCLAVE = 2;

const int USER_CET_ENVIRONMENT_VBS_ENCLAVE = 16;

const int USER_CET_ENVIRONMENT_VBS_BASIC_ENCLAVE = 17;

const int SCEX2_ALT_NETBIOS_NAME = 1;

const int FILE_MAP_WRITE = 2;

const int FILE_MAP_READ = 4;

const int FILE_MAP_ALL_ACCESS = 983071;

const int FILE_MAP_EXECUTE = 32;

const int FILE_MAP_COPY = 1;

const int FILE_MAP_RESERVE = 2147483648;

const int FILE_MAP_TARGETS_INVALID = 1073741824;

const int FILE_MAP_LARGE_PAGES = 536870912;

const int FILE_CACHE_MAX_HARD_ENABLE = 1;

const int FILE_CACHE_MAX_HARD_DISABLE = 2;

const int FILE_CACHE_MIN_HARD_ENABLE = 4;

const int FILE_CACHE_MIN_HARD_DISABLE = 8;

const int MEHC_PATROL_SCRUBBER_PRESENT = 1;

const int FIND_RESOURCE_DIRECTORY_TYPES = 256;

const int FIND_RESOURCE_DIRECTORY_NAMES = 512;

const int FIND_RESOURCE_DIRECTORY_LANGUAGES = 1024;

const int RESOURCE_ENUM_LN = 1;

const int RESOURCE_ENUM_MUI = 2;

const int RESOURCE_ENUM_MUI_SYSTEM = 4;

const int RESOURCE_ENUM_VALIDATE = 8;

const int RESOURCE_ENUM_MODULE_EXACT = 16;

const int SUPPORT_LANG_NUMBER = 32;

const int GET_MODULE_HANDLE_EX_FLAG_PIN = 1;

const int GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT = 2;

const int GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS = 4;

const int CURRENT_IMPORT_REDIRECTION_VERSION = 1;

const int DONT_RESOLVE_DLL_REFERENCES = 1;

const int LOAD_LIBRARY_AS_DATAFILE = 2;

const int LOAD_WITH_ALTERED_SEARCH_PATH = 8;

const int LOAD_IGNORE_CODE_AUTHZ_LEVEL = 16;

const int LOAD_LIBRARY_AS_IMAGE_RESOURCE = 32;

const int LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE = 64;

const int LOAD_LIBRARY_REQUIRE_SIGNED_TARGET = 128;

const int LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR = 256;

const int LOAD_LIBRARY_SEARCH_APPLICATION_DIR = 512;

const int LOAD_LIBRARY_SEARCH_USER_DIRS = 1024;

const int LOAD_LIBRARY_SEARCH_SYSTEM32 = 2048;

const int LOAD_LIBRARY_SEARCH_DEFAULT_DIRS = 4096;

const int LOAD_LIBRARY_SAFE_CURRENT_DIRS = 8192;

const int LOAD_LIBRARY_SEARCH_SYSTEM32_NO_FORWARDER = 16384;

const int LOAD_LIBRARY_OS_INTEGRITY_CONTINUITY = 32768;

const int PRIVATE_NAMESPACE_FLAG_DESTROY = 1;

const int FILE_BEGIN = 0;

const int FILE_CURRENT = 1;

const int FILE_END = 2;

const int WAIT_FAILED = 4294967295;

const int WAIT_OBJECT_0 = 0;

const int WAIT_ABANDONED = 128;

const int WAIT_ABANDONED_0 = 128;

const int WAIT_IO_COMPLETION = 192;

const int FILE_FLAG_WRITE_THROUGH = 2147483648;

const int FILE_FLAG_OVERLAPPED = 1073741824;

const int FILE_FLAG_NO_BUFFERING = 536870912;

const int FILE_FLAG_RANDOM_ACCESS = 268435456;

const int FILE_FLAG_SEQUENTIAL_SCAN = 134217728;

const int FILE_FLAG_DELETE_ON_CLOSE = 67108864;

const int FILE_FLAG_BACKUP_SEMANTICS = 33554432;

const int FILE_FLAG_POSIX_SEMANTICS = 16777216;

const int FILE_FLAG_SESSION_AWARE = 8388608;

const int FILE_FLAG_OPEN_REPARSE_POINT = 2097152;

const int FILE_FLAG_OPEN_NO_RECALL = 1048576;

const int FILE_FLAG_FIRST_PIPE_INSTANCE = 524288;

const int FILE_FLAG_OPEN_REQUIRING_OPLOCK = 262144;

const int PROGRESS_CONTINUE = 0;

const int PROGRESS_CANCEL = 1;

const int PROGRESS_STOP = 2;

const int PROGRESS_QUIET = 3;

const int CALLBACK_CHUNK_FINISHED = 0;

const int CALLBACK_STREAM_SWITCH = 1;

const int COPY_FILE_FAIL_IF_EXISTS = 1;

const int COPY_FILE_RESTARTABLE = 2;

const int COPY_FILE_OPEN_SOURCE_FOR_WRITE = 4;

const int COPY_FILE_ALLOW_DECRYPTED_DESTINATION = 8;

const int COPY_FILE_COPY_SYMLINK = 2048;

const int COPY_FILE_NO_BUFFERING = 4096;

const int COPY_FILE_REQUEST_SECURITY_PRIVILEGES = 8192;

const int COPY_FILE_RESUME_FROM_PAUSE = 16384;

const int COPY_FILE_NO_OFFLOAD = 262144;

const int COPY_FILE_IGNORE_EDP_BLOCK = 4194304;

const int COPY_FILE_IGNORE_SOURCE_ENCRYPTION = 8388608;

const int COPY_FILE_DONT_REQUEST_DEST_WRITE_DAC = 33554432;

const int COPY_FILE_REQUEST_COMPRESSED_TRAFFIC = 268435456;

const int COPY_FILE_OPEN_AND_COPY_REPARSE_POINT = 2097152;

const int COPY_FILE_DIRECTORY = 128;

const int COPY_FILE_SKIP_ALTERNATE_STREAMS = 32768;

const int COPY_FILE_DISABLE_PRE_ALLOCATION = 67108864;

const int COPY_FILE_ENABLE_LOW_FREE_SPACE_MODE = 134217728;

const int REPLACEFILE_WRITE_THROUGH = 1;

const int REPLACEFILE_IGNORE_MERGE_ERRORS = 2;

const int REPLACEFILE_IGNORE_ACL_ERRORS = 4;

const int PIPE_ACCESS_INBOUND = 1;

const int PIPE_ACCESS_OUTBOUND = 2;

const int PIPE_ACCESS_DUPLEX = 3;

const int PIPE_CLIENT_END = 0;

const int PIPE_SERVER_END = 1;

const int PIPE_WAIT = 0;

const int PIPE_NOWAIT = 1;

const int PIPE_READMODE_BYTE = 0;

const int PIPE_READMODE_MESSAGE = 2;

const int PIPE_TYPE_BYTE = 0;

const int PIPE_TYPE_MESSAGE = 4;

const int PIPE_ACCEPT_REMOTE_CLIENTS = 0;

const int PIPE_REJECT_REMOTE_CLIENTS = 8;

const int PIPE_UNLIMITED_INSTANCES = 255;

const int SECURITY_ANONYMOUS = 0;

const int SECURITY_IDENTIFICATION = 65536;

const int SECURITY_IMPERSONATION = 131072;

const int SECURITY_DELEGATION = 196608;

const int SECURITY_CONTEXT_TRACKING = 262144;

const int SECURITY_EFFECTIVE_ONLY = 524288;

const int SECURITY_SQOS_PRESENT = 1048576;

const int SECURITY_VALID_SQOS_FLAGS = 2031616;

const int FAIL_FAST_GENERATE_EXCEPTION_ADDRESS = 1;

const int FAIL_FAST_NO_HARD_ERROR_DLG = 2;

const int SP_SERIALCOMM = 1;

const int PST_UNSPECIFIED = 0;

const int PST_RS232 = 1;

const int PST_PARALLELPORT = 2;

const int PST_RS422 = 3;

const int PST_RS423 = 4;

const int PST_RS449 = 5;

const int PST_MODEM = 6;

const int PST_FAX = 33;

const int PST_SCANNER = 34;

const int PST_NETWORK_BRIDGE = 256;

const int PST_LAT = 257;

const int PST_TCPIP_TELNET = 258;

const int PST_X25 = 259;

const int PCF_DTRDSR = 1;

const int PCF_RTSCTS = 2;

const int PCF_RLSD = 4;

const int PCF_PARITY_CHECK = 8;

const int PCF_XONXOFF = 16;

const int PCF_SETXCHAR = 32;

const int PCF_TOTALTIMEOUTS = 64;

const int PCF_INTTIMEOUTS = 128;

const int PCF_SPECIALCHARS = 256;

const int PCF_16BITMODE = 512;

const int SP_PARITY = 1;

const int SP_BAUD = 2;

const int SP_DATABITS = 4;

const int SP_STOPBITS = 8;

const int SP_HANDSHAKING = 16;

const int SP_PARITY_CHECK = 32;

const int SP_RLSD = 64;

const int BAUD_075 = 1;

const int BAUD_110 = 2;

const int BAUD_134_5 = 4;

const int BAUD_150 = 8;

const int BAUD_300 = 16;

const int BAUD_600 = 32;

const int BAUD_1200 = 64;

const int BAUD_1800 = 128;

const int BAUD_2400 = 256;

const int BAUD_4800 = 512;

const int BAUD_7200 = 1024;

const int BAUD_9600 = 2048;

const int BAUD_14400 = 4096;

const int BAUD_19200 = 8192;

const int BAUD_38400 = 16384;

const int BAUD_56K = 32768;

const int BAUD_128K = 65536;

const int BAUD_115200 = 131072;

const int BAUD_57600 = 262144;

const int BAUD_USER = 268435456;

const int DATABITS_5 = 1;

const int DATABITS_6 = 2;

const int DATABITS_7 = 4;

const int DATABITS_8 = 8;

const int DATABITS_16 = 16;

const int DATABITS_16X = 32;

const int STOPBITS_10 = 1;

const int STOPBITS_15 = 2;

const int STOPBITS_20 = 4;

const int PARITY_NONE = 256;

const int PARITY_ODD = 512;

const int PARITY_EVEN = 1024;

const int PARITY_MARK = 2048;

const int PARITY_SPACE = 4096;

const int COMMPROP_INITIALIZED = 3879531822;

const int DTR_CONTROL_DISABLE = 0;

const int DTR_CONTROL_ENABLE = 1;

const int DTR_CONTROL_HANDSHAKE = 2;

const int RTS_CONTROL_DISABLE = 0;

const int RTS_CONTROL_ENABLE = 1;

const int RTS_CONTROL_HANDSHAKE = 2;

const int RTS_CONTROL_TOGGLE = 3;

const int GMEM_FIXED = 0;

const int GMEM_MOVEABLE = 2;

const int GMEM_NOCOMPACT = 16;

const int GMEM_NODISCARD = 32;

const int GMEM_ZEROINIT = 64;

const int GMEM_MODIFY = 128;

const int GMEM_DISCARDABLE = 256;

const int GMEM_NOT_BANKED = 4096;

const int GMEM_SHARE = 8192;

const int GMEM_DDESHARE = 8192;

const int GMEM_NOTIFY = 16384;

const int GMEM_LOWER = 4096;

const int GMEM_VALID_FLAGS = 32626;

const int GMEM_INVALID_HANDLE = 32768;

const int GHND = 66;

const int GPTR = 64;

const int GMEM_DISCARDED = 16384;

const int GMEM_LOCKCOUNT = 255;

const int DEBUG_PROCESS = 1;

const int DEBUG_ONLY_THIS_PROCESS = 2;

const int CREATE_SUSPENDED = 4;

const int DETACHED_PROCESS = 8;

const int CREATE_NEW_CONSOLE = 16;

const int NORMAL_PRIORITY_CLASS = 32;

const int IDLE_PRIORITY_CLASS = 64;

const int HIGH_PRIORITY_CLASS = 128;

const int REALTIME_PRIORITY_CLASS = 256;

const int CREATE_NEW_PROCESS_GROUP = 512;

const int CREATE_UNICODE_ENVIRONMENT = 1024;

const int CREATE_SEPARATE_WOW_VDM = 2048;

const int CREATE_SHARED_WOW_VDM = 4096;

const int CREATE_FORCEDOS = 8192;

const int BELOW_NORMAL_PRIORITY_CLASS = 16384;

const int ABOVE_NORMAL_PRIORITY_CLASS = 32768;

const int INHERIT_PARENT_AFFINITY = 65536;

const int INHERIT_CALLER_PRIORITY = 131072;

const int CREATE_PROTECTED_PROCESS = 262144;

const int EXTENDED_STARTUPINFO_PRESENT = 524288;

const int PROCESS_MODE_BACKGROUND_BEGIN = 1048576;

const int PROCESS_MODE_BACKGROUND_END = 2097152;

const int CREATE_SECURE_PROCESS = 4194304;

const int CREATE_BREAKAWAY_FROM_JOB = 16777216;

const int CREATE_PRESERVE_CODE_AUTHZ_LEVEL = 33554432;

const int CREATE_DEFAULT_ERROR_MODE = 67108864;

const int CREATE_NO_WINDOW = 134217728;

const int PROFILE_USER = 268435456;

const int PROFILE_KERNEL = 536870912;

const int PROFILE_SERVER = 1073741824;

const int CREATE_IGNORE_SYSTEM_DEFAULT = 2147483648;

const int STACK_SIZE_PARAM_IS_A_RESERVATION = 65536;

const int THREAD_PRIORITY_LOWEST = -2;

const int THREAD_PRIORITY_BELOW_NORMAL = -1;

const int THREAD_PRIORITY_NORMAL = 0;

const int THREAD_PRIORITY_HIGHEST = 2;

const int THREAD_PRIORITY_ABOVE_NORMAL = 1;

const int THREAD_PRIORITY_ERROR_RETURN = 2147483647;

const int THREAD_PRIORITY_TIME_CRITICAL = 15;

const int THREAD_PRIORITY_IDLE = -15;

const int THREAD_MODE_BACKGROUND_BEGIN = 65536;

const int THREAD_MODE_BACKGROUND_END = 131072;

const int VOLUME_NAME_DOS = 0;

const int VOLUME_NAME_GUID = 1;

const int VOLUME_NAME_NT = 2;

const int VOLUME_NAME_NONE = 4;

const int FILE_NAME_NORMALIZED = 0;

const int FILE_NAME_OPENED = 8;

const int DRIVE_UNKNOWN = 0;

const int DRIVE_NO_ROOT_DIR = 1;

const int DRIVE_REMOVABLE = 2;

const int DRIVE_FIXED = 3;

const int DRIVE_REMOTE = 4;

const int DRIVE_CDROM = 5;

const int DRIVE_RAMDISK = 6;

const int FILE_TYPE_UNKNOWN = 0;

const int FILE_TYPE_DISK = 1;

const int FILE_TYPE_CHAR = 2;

const int FILE_TYPE_PIPE = 3;

const int FILE_TYPE_REMOTE = 32768;

const int STD_INPUT_HANDLE = 4294967286;

const int STD_OUTPUT_HANDLE = 4294967285;

const int STD_ERROR_HANDLE = 4294967284;

const int NOPARITY = 0;

const int ODDPARITY = 1;

const int EVENPARITY = 2;

const int MARKPARITY = 3;

const int SPACEPARITY = 4;

const int ONESTOPBIT = 0;

const int ONE5STOPBITS = 1;

const int TWOSTOPBITS = 2;

const int IGNORE = 0;

const int INFINITE = 4294967295;

const int CBR_110 = 110;

const int CBR_300 = 300;

const int CBR_600 = 600;

const int CBR_1200 = 1200;

const int CBR_2400 = 2400;

const int CBR_4800 = 4800;

const int CBR_9600 = 9600;

const int CBR_14400 = 14400;

const int CBR_19200 = 19200;

const int CBR_38400 = 38400;

const int CBR_56000 = 56000;

const int CBR_57600 = 57600;

const int CBR_115200 = 115200;

const int CBR_128000 = 128000;

const int CBR_256000 = 256000;

const int CE_RXOVER = 1;

const int CE_OVERRUN = 2;

const int CE_RXPARITY = 4;

const int CE_FRAME = 8;

const int CE_BREAK = 16;

const int CE_TXFULL = 256;

const int CE_PTO = 512;

const int CE_IOE = 1024;

const int CE_DNS = 2048;

const int CE_OOP = 4096;

const int CE_MODE = 32768;

const int IE_BADID = -1;

const int IE_OPEN = -2;

const int IE_NOPEN = -3;

const int IE_MEMORY = -4;

const int IE_DEFAULT = -5;

const int IE_HARDWARE = -10;

const int IE_BYTESIZE = -11;

const int IE_BAUDRATE = -12;

const int EV_RXCHAR = 1;

const int EV_RXFLAG = 2;

const int EV_TXEMPTY = 4;

const int EV_CTS = 8;

const int EV_DSR = 16;

const int EV_RLSD = 32;

const int EV_BREAK = 64;

const int EV_ERR = 128;

const int EV_RING = 256;

const int EV_PERR = 512;

const int EV_RX80FULL = 1024;

const int EV_EVENT1 = 2048;

const int EV_EVENT2 = 4096;

const int SETXOFF = 1;

const int SETXON = 2;

const int SETRTS = 3;

const int CLRRTS = 4;

const int SETDTR = 5;

const int CLRDTR = 6;

const int RESETDEV = 7;

const int SETBREAK = 8;

const int CLRBREAK = 9;

const int PURGE_TXABORT = 1;

const int PURGE_RXABORT = 2;

const int PURGE_TXCLEAR = 4;

const int PURGE_RXCLEAR = 8;

const int LPTx = 128;

const int MS_CTS_ON = 16;

const int MS_DSR_ON = 32;

const int MS_RING_ON = 64;

const int MS_RLSD_ON = 128;

const int S_QUEUEEMPTY = 0;

const int S_THRESHOLD = 1;

const int S_ALLTHRESHOLD = 2;

const int S_NORMAL = 0;

const int S_LEGATO = 1;

const int S_STACCATO = 2;

const int S_PERIOD512 = 0;

const int S_PERIOD1024 = 1;

const int S_PERIOD2048 = 2;

const int S_PERIODVOICE = 3;

const int S_WHITE512 = 4;

const int S_WHITE1024 = 5;

const int S_WHITE2048 = 6;

const int S_WHITEVOICE = 7;

const int S_SERDVNA = -1;

const int S_SEROFM = -2;

const int S_SERMACT = -3;

const int S_SERQFUL = -4;

const int S_SERBDNT = -5;

const int S_SERDLN = -6;

const int S_SERDCC = -7;

const int S_SERDTP = -8;

const int S_SERDVL = -9;

const int S_SERDMD = -10;

const int S_SERDSH = -11;

const int S_SERDPT = -12;

const int S_SERDFQ = -13;

const int S_SERDDR = -14;

const int S_SERDSR = -15;

const int S_SERDST = -16;

const int NMPWAIT_WAIT_FOREVER = 4294967295;

const int NMPWAIT_NOWAIT = 1;

const int NMPWAIT_USE_DEFAULT_WAIT = 0;

const int FS_CASE_IS_PRESERVED = 2;

const int FS_CASE_SENSITIVE = 1;

const int FS_UNICODE_STORED_ON_DISK = 4;

const int FS_PERSISTENT_ACLS = 8;

const int FS_VOL_IS_COMPRESSED = 32768;

const int FS_FILE_COMPRESSION = 16;

const int FS_FILE_ENCRYPTION = 131072;

const int OF_READ = 0;

const int OF_WRITE = 1;

const int OF_READWRITE = 2;

const int OF_SHARE_COMPAT = 0;

const int OF_SHARE_EXCLUSIVE = 16;

const int OF_SHARE_DENY_WRITE = 32;

const int OF_SHARE_DENY_READ = 48;

const int OF_SHARE_DENY_NONE = 64;

const int OF_PARSE = 256;

const int OF_DELETE = 512;

const int OF_VERIFY = 1024;

const int OF_CANCEL = 2048;

const int OF_CREATE = 4096;

const int OF_PROMPT = 8192;

const int OF_EXIST = 16384;

const int OF_REOPEN = 32768;

const int OFS_MAXPATHNAME = 128;

const int MAXINTATOM = 49152;

const int INVALID_ATOM = 0;

const int SCS_32BIT_BINARY = 0;

const int SCS_DOS_BINARY = 1;

const int SCS_WOW_BINARY = 2;

const int SCS_PIF_BINARY = 3;

const int SCS_POSIX_BINARY = 4;

const int SCS_OS216_BINARY = 5;

const int SCS_64BIT_BINARY = 6;

const int SCS_THIS_PLATFORM_BINARY = 6;

const int FIBER_FLAG_FLOAT_SWITCH = 1;

const int UMS_VERSION = 256;

const int PROCESS_DEP_ENABLE = 1;

const int PROCESS_DEP_DISABLE_ATL_THUNK_EMULATION = 2;

const int FILE_SKIP_COMPLETION_PORT_ON_SUCCESS = 1;

const int FILE_SKIP_SET_EVENT_ON_HANDLE = 2;

const int SEM_FAILCRITICALERRORS = 1;

const int SEM_NOGPFAULTERRORBOX = 2;

const int SEM_NOALIGNMENTFAULTEXCEPT = 4;

const int SEM_NOOPENFILEERRORBOX = 32768;

const int CRITICAL_SECTION_NO_DEBUG_INFO = 16777216;

const int HANDLE_FLAG_INHERIT = 1;

const int HANDLE_FLAG_PROTECT_FROM_CLOSE = 2;

const int HINSTANCE_ERROR = 32;

const int GET_TAPE_MEDIA_INFORMATION = 0;

const int GET_TAPE_DRIVE_INFORMATION = 1;

const int SET_TAPE_MEDIA_INFORMATION = 0;

const int SET_TAPE_DRIVE_INFORMATION = 1;

const int FORMAT_MESSAGE_ALLOCATE_BUFFER = 256;

const int FORMAT_MESSAGE_IGNORE_INSERTS = 512;

const int FORMAT_MESSAGE_FROM_STRING = 1024;

const int FORMAT_MESSAGE_FROM_HMODULE = 2048;

const int FORMAT_MESSAGE_FROM_SYSTEM = 4096;

const int FORMAT_MESSAGE_ARGUMENT_ARRAY = 8192;

const int FORMAT_MESSAGE_MAX_WIDTH_MASK = 255;

const int FILE_ENCRYPTABLE = 0;

const int FILE_IS_ENCRYPTED = 1;

const int FILE_SYSTEM_ATTR = 2;

const int FILE_ROOT_DIR = 3;

const int FILE_SYSTEM_DIR = 4;

const int FILE_UNKNOWN = 5;

const int FILE_SYSTEM_NOT_SUPPORT = 6;

const int FILE_USER_DISALLOWED = 7;

const int FILE_READ_ONLY = 8;

const int FILE_DIR_DISALLOWED = 9;

const int EFS_USE_RECOVERY_KEYS = 1;

const int CREATE_FOR_IMPORT = 1;

const int CREATE_FOR_DIR = 2;

const int OVERWRITE_HIDDEN = 4;

const int EFSRPC_SECURE_ONLY = 8;

const int EFS_DROP_ALTERNATE_STREAMS = 16;

const int BACKUP_INVALID = 0;

const int BACKUP_DATA = 1;

const int BACKUP_EA_DATA = 2;

const int BACKUP_SECURITY_DATA = 3;

const int BACKUP_ALTERNATE_DATA = 4;

const int BACKUP_LINK = 5;

const int BACKUP_PROPERTY_DATA = 6;

const int BACKUP_OBJECT_ID = 7;

const int BACKUP_REPARSE_DATA = 8;

const int BACKUP_SPARSE_BLOCK = 9;

const int BACKUP_TXFS_DATA = 10;

const int BACKUP_GHOSTED_FILE_EXTENTS = 11;

const int STREAM_NORMAL_ATTRIBUTE = 0;

const int STREAM_MODIFIED_WHEN_READ = 1;

const int STREAM_CONTAINS_SECURITY = 2;

const int STREAM_CONTAINS_PROPERTIES = 4;

const int STREAM_SPARSE_ATTRIBUTE = 8;

const int STREAM_CONTAINS_GHOSTED_FILE_EXTENTS = 16;

const int STARTF_USESHOWWINDOW = 1;

const int STARTF_USESIZE = 2;

const int STARTF_USEPOSITION = 4;

const int STARTF_USECOUNTCHARS = 8;

const int STARTF_USEFILLATTRIBUTE = 16;

const int STARTF_RUNFULLSCREEN = 32;

const int STARTF_FORCEONFEEDBACK = 64;

const int STARTF_FORCEOFFFEEDBACK = 128;

const int STARTF_USESTDHANDLES = 256;

const int STARTF_USEHOTKEY = 512;

const int STARTF_TITLEISLINKNAME = 2048;

const int STARTF_TITLEISAPPID = 4096;

const int STARTF_PREVENTPINNING = 8192;

const int STARTF_UNTRUSTEDSOURCE = 32768;

const int SHUTDOWN_NORETRY = 1;

const int PROTECTION_LEVEL_WINTCB_LIGHT = 0;

const int PROTECTION_LEVEL_WINDOWS = 1;

const int PROTECTION_LEVEL_WINDOWS_LIGHT = 2;

const int PROTECTION_LEVEL_ANTIMALWARE_LIGHT = 3;

const int PROTECTION_LEVEL_LSA_LIGHT = 4;

const int PROTECTION_LEVEL_WINTCB = 5;

const int PROTECTION_LEVEL_CODEGEN_LIGHT = 6;

const int PROTECTION_LEVEL_AUTHENTICODE = 7;

const int PROTECTION_LEVEL_PPL_APP = 8;

const int PROTECTION_LEVEL_SAME = 4294967295;

const int PROTECTION_LEVEL_NONE = 4294967294;

const int PROCESS_NAME_NATIVE = 1;

const int PROC_THREAD_ATTRIBUTE_NUMBER = 65535;

const int PROC_THREAD_ATTRIBUTE_THREAD = 65536;

const int PROC_THREAD_ATTRIBUTE_INPUT = 131072;

const int PROC_THREAD_ATTRIBUTE_ADDITIVE = 262144;

const int PROC_THREAD_ATTRIBUTE_PARENT_PROCESS = 131072;

const int PROC_THREAD_ATTRIBUTE_HANDLE_LIST = 131074;

const int PROC_THREAD_ATTRIBUTE_GROUP_AFFINITY = 196611;

const int PROC_THREAD_ATTRIBUTE_PREFERRED_NODE = 131076;

const int PROC_THREAD_ATTRIBUTE_IDEAL_PROCESSOR = 196613;

const int PROC_THREAD_ATTRIBUTE_UMS_THREAD = 196614;

const int PROC_THREAD_ATTRIBUTE_MITIGATION_POLICY = 131079;

const int PROC_THREAD_ATTRIBUTE_SECURITY_CAPABILITIES = 131081;

const int PROC_THREAD_ATTRIBUTE_PROTECTION_LEVEL = 131083;

const int PROC_THREAD_ATTRIBUTE_PSEUDOCONSOLE = 131094;

const int PROCESS_CREATION_MITIGATION_POLICY_DEP_ENABLE = 1;

const int PROCESS_CREATION_MITIGATION_POLICY_DEP_ATL_THUNK_ENABLE = 2;

const int PROCESS_CREATION_MITIGATION_POLICY_SEHOP_ENABLE = 4;

const int PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_MASK = 768;

const int PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_DEFER = 0;

const int PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_ALWAYS_ON =
    256;

const int PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_ALWAYS_OFF =
    512;

const int
    PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_ALWAYS_ON_REQ_RELOCS =
    768;

const int PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_MASK = 12288;

const int PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_DEFER = 0;

const int PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_ALWAYS_ON = 4096;

const int PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_ALWAYS_OFF = 8192;

const int PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_RESERVED = 12288;

const int PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_MASK = 196608;

const int PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_DEFER = 0;

const int PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_ALWAYS_ON = 65536;

const int PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_ALWAYS_OFF = 131072;

const int PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_RESERVED = 196608;

const int PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_MASK = 3145728;

const int PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_DEFER = 0;

const int PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_ALWAYS_ON =
    1048576;

const int PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_ALWAYS_OFF =
    2097152;

const int PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_RESERVED =
    3145728;

const int PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_MASK =
    50331648;

const int PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_DEFER = 0;

const int PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_ALWAYS_ON =
    16777216;

const int PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_ALWAYS_OFF =
    33554432;

const int PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_RESERVED =
    50331648;

const int PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_MASK =
    805306368;

const int PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_DEFER =
    0;

const int
    PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_ALWAYS_ON =
    268435456;

const int
    PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_ALWAYS_OFF =
    536870912;

const int
    PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_RESERVED =
    805306368;

const int PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_MASK =
    12884901888;

const int PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_DEFER = 0;

const int PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_ALWAYS_ON =
    4294967296;

const int
    PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_ALWAYS_OFF =
    8589934592;

const int PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_RESERVED =
    12884901888;

const int PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_MASK =
    206158430208;

const int PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_DEFER = 0;

const int PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_ALWAYS_ON =
    68719476736;

const int PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_ALWAYS_OFF =
    137438953472;

const int
    PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_ALWAYS_ON_ALLOW_OPT_OUT =
    206158430208;

const int PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_MASK =
    3298534883328;

const int PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_DEFER = 0;

const int PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_ALWAYS_ON =
    1099511627776;

const int PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_ALWAYS_OFF =
    2199023255552;

const int
    PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_EXPORT_SUPPRESSION =
    3298534883328;

const int PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_MASK =
    52776558133248;

const int
    PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_DEFER = 0;

const int
    PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALWAYS_ON =
    17592186044416;

const int
    PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALWAYS_OFF =
    35184372088832;

const int
    PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALLOW_STORE =
    52776558133248;

const int PROCESS_CREATION_MITIGATION_POLICY_FONT_DISABLE_MASK =
    844424930131968;

const int PROCESS_CREATION_MITIGATION_POLICY_FONT_DISABLE_DEFER = 0;

const int PROCESS_CREATION_MITIGATION_POLICY_FONT_DISABLE_ALWAYS_ON =
    281474976710656;

const int PROCESS_CREATION_MITIGATION_POLICY_FONT_DISABLE_ALWAYS_OFF =
    562949953421312;

const int PROCESS_CREATION_MITIGATION_POLICY_AUDIT_NONSYSTEM_FONTS =
    844424930131968;

const int PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_MASK =
    13510798882111488;

const int PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_DEFER = 0;

const int PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_ALWAYS_ON =
    4503599627370496;

const int PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_ALWAYS_OFF =
    9007199254740992;

const int PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_RESERVED =
    13510798882111488;

const int PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_MASK =
    216172782113783808;

const int PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_DEFER = 0;

const int PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_ALWAYS_ON =
    72057594037927936;

const int
    PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_ALWAYS_OFF =
    144115188075855872;

const int PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_RESERVED =
    216172782113783808;

const int PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_MASK =
    3458764513820540928;

const int PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_DEFER =
    0;

const int
    PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_ALWAYS_ON =
    1152921504606846976;

const int
    PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_ALWAYS_OFF =
    2305843009213693952;

const int
    PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_RESERVED =
    3458764513820540928;

const int PROCESS_CREATION_MITIGATION_POLICY2_LOADER_INTEGRITY_CONTINUITY_MASK =
    48;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_LOADER_INTEGRITY_CONTINUITY_DEFER = 0;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_LOADER_INTEGRITY_CONTINUITY_ALWAYS_ON =
    16;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_LOADER_INTEGRITY_CONTINUITY_ALWAYS_OFF =
    32;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_LOADER_INTEGRITY_CONTINUITY_AUDIT = 48;

const int PROCESS_CREATION_MITIGATION_POLICY2_STRICT_CONTROL_FLOW_GUARD_MASK =
    768;

const int PROCESS_CREATION_MITIGATION_POLICY2_STRICT_CONTROL_FLOW_GUARD_DEFER =
    0;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_STRICT_CONTROL_FLOW_GUARD_ALWAYS_ON =
    256;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_STRICT_CONTROL_FLOW_GUARD_ALWAYS_OFF =
    512;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_STRICT_CONTROL_FLOW_GUARD_RESERVED =
    768;

const int PROCESS_CREATION_MITIGATION_POLICY2_MODULE_TAMPERING_PROTECTION_MASK =
    12288;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_MODULE_TAMPERING_PROTECTION_DEFER = 0;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_MODULE_TAMPERING_PROTECTION_ALWAYS_ON =
    4096;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_MODULE_TAMPERING_PROTECTION_ALWAYS_OFF =
    8192;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_MODULE_TAMPERING_PROTECTION_NOINHERIT =
    12288;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_INDIRECT_BRANCH_PREDICTION_MASK =
    196608;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_INDIRECT_BRANCH_PREDICTION_DEFER =
    0;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_INDIRECT_BRANCH_PREDICTION_ALWAYS_ON =
    65536;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_INDIRECT_BRANCH_PREDICTION_ALWAYS_OFF =
    131072;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_INDIRECT_BRANCH_PREDICTION_RESERVED =
    196608;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY_MASK =
    3145728;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY_DEFER =
    0;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY_ALWAYS_ON =
    1048576;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY_ALWAYS_OFF =
    2097152;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY_RESERVED =
    3145728;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_SPECULATIVE_STORE_BYPASS_DISABLE_MASK =
    50331648;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_SPECULATIVE_STORE_BYPASS_DISABLE_DEFER =
    0;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_SPECULATIVE_STORE_BYPASS_DISABLE_ALWAYS_ON =
    16777216;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_SPECULATIVE_STORE_BYPASS_DISABLE_ALWAYS_OFF =
    33554432;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_SPECULATIVE_STORE_BYPASS_DISABLE_RESERVED =
    50331648;

const int PROCESS_CREATION_MITIGATION_POLICY2_CET_USER_SHADOW_STACKS_MASK =
    805306368;

const int PROCESS_CREATION_MITIGATION_POLICY2_CET_USER_SHADOW_STACKS_DEFER = 0;

const int PROCESS_CREATION_MITIGATION_POLICY2_CET_USER_SHADOW_STACKS_ALWAYS_ON =
    268435456;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_CET_USER_SHADOW_STACKS_ALWAYS_OFF =
    536870912;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_CET_USER_SHADOW_STACKS_STRICT_MODE =
    805306368;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_USER_CET_SET_CONTEXT_IP_VALIDATION_MASK =
    12884901888;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_USER_CET_SET_CONTEXT_IP_VALIDATION_DEFER =
    0;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_USER_CET_SET_CONTEXT_IP_VALIDATION_ALWAYS_ON =
    4294967296;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_USER_CET_SET_CONTEXT_IP_VALIDATION_ALWAYS_OFF =
    8589934592;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_USER_CET_SET_CONTEXT_IP_VALIDATION_RELAXED_MODE =
    12884901888;

const int PROCESS_CREATION_MITIGATION_POLICY2_BLOCK_NON_CET_BINARIES_MASK =
    206158430208;

const int PROCESS_CREATION_MITIGATION_POLICY2_BLOCK_NON_CET_BINARIES_DEFER = 0;

const int PROCESS_CREATION_MITIGATION_POLICY2_BLOCK_NON_CET_BINARIES_ALWAYS_ON =
    68719476736;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_BLOCK_NON_CET_BINARIES_ALWAYS_OFF =
    137438953472;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_BLOCK_NON_CET_BINARIES_NON_EHCONT =
    206158430208;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_CET_DYNAMIC_APIS_OUT_OF_PROC_ONLY_MASK =
    844424930131968;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_CET_DYNAMIC_APIS_OUT_OF_PROC_ONLY_DEFER =
    0;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_CET_DYNAMIC_APIS_OUT_OF_PROC_ONLY_ALWAYS_ON =
    281474976710656;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_CET_DYNAMIC_APIS_OUT_OF_PROC_ONLY_ALWAYS_OFF =
    562949953421312;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_CET_DYNAMIC_APIS_OUT_OF_PROC_ONLY_RESERVED =
    844424930131968;

const int PROC_THREAD_ATTRIBUTE_JOB_LIST = 131085;

const int PROCESS_CREATION_CHILD_PROCESS_RESTRICTED = 1;

const int PROCESS_CREATION_CHILD_PROCESS_OVERRIDE = 2;

const int PROCESS_CREATION_CHILD_PROCESS_RESTRICTED_UNLESS_SECURE = 4;

const int PROC_THREAD_ATTRIBUTE_CHILD_PROCESS_POLICY = 131086;

const int PROCESS_CREATION_ALL_APPLICATION_PACKAGES_OPT_OUT = 1;

const int PROC_THREAD_ATTRIBUTE_ALL_APPLICATION_PACKAGES_POLICY = 131087;

const int PROC_THREAD_ATTRIBUTE_WIN32K_FILTER = 131088;

const int PROCESS_CREATION_DESKTOP_APP_BREAKAWAY_ENABLE_PROCESS_TREE = 1;

const int PROCESS_CREATION_DESKTOP_APP_BREAKAWAY_DISABLE_PROCESS_TREE = 2;

const int PROCESS_CREATION_DESKTOP_APP_BREAKAWAY_OVERRIDE = 4;

const int PROC_THREAD_ATTRIBUTE_DESKTOP_APP_POLICY = 131090;

const int PROC_THREAD_ATTRIBUTE_MITIGATION_AUDIT_POLICY = 131096;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_CET_USER_SHADOW_STACKS_MASK =
    805306368;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_CET_USER_SHADOW_STACKS_DEFER = 0;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_CET_USER_SHADOW_STACKS_ALWAYS_ON =
    268435456;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_CET_USER_SHADOW_STACKS_ALWAYS_OFF =
    536870912;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_CET_USER_SHADOW_STACKS_RESERVED =
    805306368;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_USER_CET_SET_CONTEXT_IP_VALIDATION_MASK =
    12884901888;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_USER_CET_SET_CONTEXT_IP_VALIDATION_DEFER =
    0;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_USER_CET_SET_CONTEXT_IP_VALIDATION_ALWAYS_ON =
    4294967296;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_USER_CET_SET_CONTEXT_IP_VALIDATION_ALWAYS_OFF =
    8589934592;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_USER_CET_SET_CONTEXT_IP_VALIDATION_RESERVED =
    12884901888;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_BLOCK_NON_CET_BINARIES_MASK =
    206158430208;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_BLOCK_NON_CET_BINARIES_DEFER = 0;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_BLOCK_NON_CET_BINARIES_ALWAYS_ON =
    68719476736;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_BLOCK_NON_CET_BINARIES_ALWAYS_OFF =
    137438953472;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_BLOCK_NON_CET_BINARIES_RESERVED =
    206158430208;

const int ATOM_FLAG_GLOBAL = 2;

const String GET_SYSTEM_WOW64_DIRECTORY_NAME_A_A = 'GetSystemWow64DirectoryA';

const String GET_SYSTEM_WOW64_DIRECTORY_NAME_A_W = 'G';

const String GET_SYSTEM_WOW64_DIRECTORY_NAME_A_T = 'GetSystemWow64DirectoryA';

const String GET_SYSTEM_WOW64_DIRECTORY_NAME_W_A = 'GetSystemWow64DirectoryW';

const String GET_SYSTEM_WOW64_DIRECTORY_NAME_W_W = 'G';

const String GET_SYSTEM_WOW64_DIRECTORY_NAME_W_T = 'GetSystemWow64DirectoryW';

const String GET_SYSTEM_WOW64_DIRECTORY_NAME_T_A = 'GetSystemWow64DirectoryA';

const String GET_SYSTEM_WOW64_DIRECTORY_NAME_T_W = 'G';

const String GET_SYSTEM_WOW64_DIRECTORY_NAME_T_T = 'GetSystemWow64DirectoryA';

const int BASE_SEARCH_PATH_ENABLE_SAFE_SEARCHMODE = 1;

const int BASE_SEARCH_PATH_DISABLE_SAFE_SEARCHMODE = 65536;

const int BASE_SEARCH_PATH_PERMANENT = 32768;

const int BASE_SEARCH_PATH_INVALID_FLAGS = -98306;

const int DDD_RAW_TARGET_PATH = 1;

const int DDD_REMOVE_DEFINITION = 2;

const int DDD_EXACT_MATCH_ON_REMOVE = 4;

const int DDD_NO_BROADCAST_SYSTEM = 8;

const int DDD_LUID_BROADCAST_DRIVE = 16;

const int COPYFILE2_MESSAGE_COPY_OFFLOAD = 1;

const int MOVEFILE_REPLACE_EXISTING = 1;

const int MOVEFILE_COPY_ALLOWED = 2;

const int MOVEFILE_DELAY_UNTIL_REBOOT = 4;

const int MOVEFILE_WRITE_THROUGH = 8;

const int MOVEFILE_CREATE_HARDLINK = 16;

const int MOVEFILE_FAIL_IF_NOT_TRACKABLE = 32;

const int EVENTLOG_FULL_INFO = 0;

const int OPERATION_API_VERSION = 1;

const int OPERATION_START_TRACE_CURRENT_THREAD = 1;

const int OPERATION_END_DISCARD = 1;

const int MAX_COMPUTERNAME_LENGTH = 15;

const int LOGON32_LOGON_INTERACTIVE = 2;

const int LOGON32_LOGON_NETWORK = 3;

const int LOGON32_LOGON_BATCH = 4;

const int LOGON32_LOGON_SERVICE = 5;

const int LOGON32_LOGON_UNLOCK = 7;

const int LOGON32_LOGON_NETWORK_CLEARTEXT = 8;

const int LOGON32_LOGON_NEW_CREDENTIALS = 9;

const int LOGON32_PROVIDER_DEFAULT = 0;

const int LOGON32_PROVIDER_WINNT35 = 1;

const int LOGON32_PROVIDER_WINNT40 = 2;

const int LOGON32_PROVIDER_WINNT50 = 3;

const int LOGON32_PROVIDER_VIRTUAL = 4;

const int LOGON_WITH_PROFILE = 1;

const int LOGON_NETCREDENTIALS_ONLY = 2;

const int LOGON_ZERO_PASSWORD_BUFFER = 2147483648;

const int HW_PROFILE_GUIDLEN = 39;

const int MAX_PROFILE_LEN = 80;

const int DOCKINFO_UNDOCKED = 1;

const int DOCKINFO_DOCKED = 2;

const int DOCKINFO_USER_SUPPLIED = 4;

const int DOCKINFO_USER_UNDOCKED = 5;

const int DOCKINFO_USER_DOCKED = 6;

const int FACILITY_NULL = 0;

const int FACILITY_RPC = 1;

const int FACILITY_DISPATCH = 2;

const int FACILITY_STORAGE = 3;

const int FACILITY_ITF = 4;

const int FACILITY_WIN32 = 7;

const int FACILITY_WINDOWS = 8;

const int FACILITY_SSPI = 9;

const int FACILITY_SECURITY = 9;

const int FACILITY_CONTROL = 10;

const int FACILITY_CERT = 11;

const int FACILITY_INTERNET = 12;

const int FACILITY_MEDIASERVER = 13;

const int FACILITY_MSMQ = 14;

const int FACILITY_SETUPAPI = 15;

const int FACILITY_SCARD = 16;

const int FACILITY_COMPLUS = 17;

const int FACILITY_AAF = 18;

const int FACILITY_URT = 19;

const int FACILITY_ACS = 20;

const int FACILITY_DPLAY = 21;

const int FACILITY_UMI = 22;

const int FACILITY_SXS = 23;

const int FACILITY_WINDOWS_CE = 24;

const int FACILITY_HTTP = 25;

const int FACILITY_USERMODE_COMMONLOG = 26;

const int FACILITY_WER = 27;

const int FACILITY_USERMODE_FILTER_MANAGER = 31;

const int FACILITY_BACKGROUNDCOPY = 32;

const int FACILITY_CONFIGURATION = 33;

const int FACILITY_WIA = 33;

const int FACILITY_STATE_MANAGEMENT = 34;

const int FACILITY_METADIRECTORY = 35;

const int FACILITY_WINDOWSUPDATE = 36;

const int FACILITY_DIRECTORYSERVICE = 37;

const int FACILITY_GRAPHICS = 38;

const int FACILITY_SHELL = 39;

const int FACILITY_NAP = 39;

const int FACILITY_TPM_SERVICES = 40;

const int FACILITY_TPM_SOFTWARE = 41;

const int FACILITY_UI = 42;

const int FACILITY_XAML = 43;

const int FACILITY_ACTION_QUEUE = 44;

const int FACILITY_PLA = 48;

const int FACILITY_WINDOWS_SETUP = 48;

const int FACILITY_FVE = 49;

const int FACILITY_FWP = 50;

const int FACILITY_WINRM = 51;

const int FACILITY_NDIS = 52;

const int FACILITY_USERMODE_HYPERVISOR = 53;

const int FACILITY_CMI = 54;

const int FACILITY_USERMODE_VIRTUALIZATION = 55;

const int FACILITY_USERMODE_VOLMGR = 56;

const int FACILITY_BCD = 57;

const int FACILITY_USERMODE_VHD = 58;

const int FACILITY_USERMODE_HNS = 59;

const int FACILITY_SDIAG = 60;

const int FACILITY_WEBSERVICES = 61;

const int FACILITY_WINPE = 61;

const int FACILITY_WPN = 62;

const int FACILITY_WINDOWS_STORE = 63;

const int FACILITY_INPUT = 64;

const int FACILITY_QUIC = 65;

const int FACILITY_EAP = 66;

const int FACILITY_WINDOWS_DEFENDER = 80;

const int FACILITY_OPC = 81;

const int FACILITY_XPS = 82;

const int FACILITY_MBN = 84;

const int FACILITY_POWERSHELL = 84;

const int FACILITY_RAS = 83;

const int FACILITY_P2P_INT = 98;

const int FACILITY_P2P = 99;

const int FACILITY_DAF = 100;

const int FACILITY_BLUETOOTH_ATT = 101;

const int FACILITY_AUDIO = 102;

const int FACILITY_STATEREPOSITORY = 103;

const int FACILITY_VISUALCPP = 109;

const int FACILITY_SCRIPT = 112;

const int FACILITY_PARSE = 113;

const int FACILITY_BLB = 120;

const int FACILITY_BLB_CLI = 121;

const int FACILITY_WSBAPP = 122;

const int FACILITY_BLBUI = 128;

const int FACILITY_USN = 129;

const int FACILITY_USERMODE_VOLSNAP = 130;

const int FACILITY_TIERING = 131;

const int FACILITY_WSB_ONLINE = 133;

const int FACILITY_ONLINE_ID = 134;

const int FACILITY_DEVICE_UPDATE_AGENT = 135;

const int FACILITY_DRVSERVICING = 136;

const int FACILITY_DLS = 153;

const int FACILITY_DELIVERY_OPTIMIZATION = 208;

const int FACILITY_USERMODE_SPACES = 231;

const int FACILITY_USER_MODE_SECURITY_CORE = 232;

const int FACILITY_USERMODE_LICENSING = 234;

const int FACILITY_SOS = 160;

const int FACILITY_DEBUGGERS = 176;

const int FACILITY_SPP = 256;

const int FACILITY_RESTORE = 256;

const int FACILITY_DMSERVER = 256;

const int FACILITY_DEPLOYMENT_SERVICES_SERVER = 257;

const int FACILITY_DEPLOYMENT_SERVICES_IMAGING = 258;

const int FACILITY_DEPLOYMENT_SERVICES_MANAGEMENT = 259;

const int FACILITY_DEPLOYMENT_SERVICES_UTIL = 260;

const int FACILITY_DEPLOYMENT_SERVICES_BINLSVC = 261;

const int FACILITY_DEPLOYMENT_SERVICES_PXE = 263;

const int FACILITY_DEPLOYMENT_SERVICES_TFTP = 264;

const int FACILITY_DEPLOYMENT_SERVICES_TRANSPORT_MANAGEMENT = 272;

const int FACILITY_DEPLOYMENT_SERVICES_DRIVER_PROVISIONING = 278;

const int FACILITY_DEPLOYMENT_SERVICES_MULTICAST_SERVER = 289;

const int FACILITY_DEPLOYMENT_SERVICES_MULTICAST_CLIENT = 290;

const int FACILITY_DEPLOYMENT_SERVICES_CONTENT_PROVIDER = 293;

const int FACILITY_LINGUISTIC_SERVICES = 305;

const int FACILITY_AUDIOSTREAMING = 1094;

const int FACILITY_TTD = 1490;

const int FACILITY_ACCELERATOR = 1536;

const int FACILITY_WMAAECMA = 1996;

const int FACILITY_DIRECTMUSIC = 2168;

const int FACILITY_DIRECT3D10 = 2169;

const int FACILITY_DXGI = 2170;

const int FACILITY_DXGI_DDI = 2171;

const int FACILITY_DIRECT3D11 = 2172;

const int FACILITY_DIRECT3D11_DEBUG = 2173;

const int FACILITY_DIRECT3D12 = 2174;

const int FACILITY_DIRECT3D12_DEBUG = 2175;

const int FACILITY_DXCORE = 2176;

const int FACILITY_LEAP = 2184;

const int FACILITY_AUDCLNT = 2185;

const int FACILITY_WINCODEC_DWRITE_DWM = 2200;

const int FACILITY_WINML = 2192;

const int FACILITY_DIRECT2D = 2201;

const int FACILITY_DEFRAG = 2304;

const int FACILITY_USERMODE_SDBUS = 2305;

const int FACILITY_JSCRIPT = 2306;

const int FACILITY_PIDGENX = 2561;

const int FACILITY_EAS = 85;

const int FACILITY_WEB = 885;

const int FACILITY_WEB_SOCKET = 886;

const int FACILITY_MOBILE = 1793;

const int FACILITY_SQLITE = 1967;

const int FACILITY_UTC = 1989;

const int FACILITY_WEP = 2049;

const int FACILITY_SYNCENGINE = 2050;

const int FACILITY_XBOX = 2339;

const int FACILITY_GAME = 2340;

const int FACILITY_PIX = 2748;

const int ERROR_SUCCESS = 0;

const int NO_ERROR = 0;

const int SEC_E_OK = 0;

const int ERROR_INVALID_FUNCTION = 1;

const int ERROR_FILE_NOT_FOUND = 2;

const int ERROR_PATH_NOT_FOUND = 3;

const int ERROR_TOO_MANY_OPEN_FILES = 4;

const int ERROR_ACCESS_DENIED = 5;

const int ERROR_INVALID_HANDLE = 6;

const int ERROR_ARENA_TRASHED = 7;

const int ERROR_NOT_ENOUGH_MEMORY = 8;

const int ERROR_INVALID_BLOCK = 9;

const int ERROR_BAD_ENVIRONMENT = 10;

const int ERROR_BAD_FORMAT = 11;

const int ERROR_INVALID_ACCESS = 12;

const int ERROR_INVALID_DATA = 13;

const int ERROR_OUTOFMEMORY = 14;

const int ERROR_INVALID_DRIVE = 15;

const int ERROR_CURRENT_DIRECTORY = 16;

const int ERROR_NOT_SAME_DEVICE = 17;

const int ERROR_NO_MORE_FILES = 18;

const int ERROR_WRITE_PROTECT = 19;

const int ERROR_BAD_UNIT = 20;

const int ERROR_NOT_READY = 21;

const int ERROR_BAD_COMMAND = 22;

const int ERROR_CRC = 23;

const int ERROR_BAD_LENGTH = 24;

const int ERROR_SEEK = 25;

const int ERROR_NOT_DOS_DISK = 26;

const int ERROR_SECTOR_NOT_FOUND = 27;

const int ERROR_OUT_OF_PAPER = 28;

const int ERROR_WRITE_FAULT = 29;

const int ERROR_READ_FAULT = 30;

const int ERROR_GEN_FAILURE = 31;

const int ERROR_SHARING_VIOLATION = 32;

const int ERROR_LOCK_VIOLATION = 33;

const int ERROR_WRONG_DISK = 34;

const int ERROR_SHARING_BUFFER_EXCEEDED = 36;

const int ERROR_HANDLE_EOF = 38;

const int ERROR_HANDLE_DISK_FULL = 39;

const int ERROR_NOT_SUPPORTED = 50;

const int ERROR_REM_NOT_LIST = 51;

const int ERROR_DUP_NAME = 52;

const int ERROR_BAD_NETPATH = 53;

const int ERROR_NETWORK_BUSY = 54;

const int ERROR_DEV_NOT_EXIST = 55;

const int ERROR_TOO_MANY_CMDS = 56;

const int ERROR_ADAP_HDW_ERR = 57;

const int ERROR_BAD_NET_RESP = 58;

const int ERROR_UNEXP_NET_ERR = 59;

const int ERROR_BAD_REM_ADAP = 60;

const int ERROR_PRINTQ_FULL = 61;

const int ERROR_NO_SPOOL_SPACE = 62;

const int ERROR_PRINT_CANCELLED = 63;

const int ERROR_NETNAME_DELETED = 64;

const int ERROR_NETWORK_ACCESS_DENIED = 65;

const int ERROR_BAD_DEV_TYPE = 66;

const int ERROR_BAD_NET_NAME = 67;

const int ERROR_TOO_MANY_NAMES = 68;

const int ERROR_TOO_MANY_SESS = 69;

const int ERROR_SHARING_PAUSED = 70;

const int ERROR_REQ_NOT_ACCEP = 71;

const int ERROR_REDIR_PAUSED = 72;

const int ERROR_FILE_EXISTS = 80;

const int ERROR_CANNOT_MAKE = 82;

const int ERROR_FAIL_I24 = 83;

const int ERROR_OUT_OF_STRUCTURES = 84;

const int ERROR_ALREADY_ASSIGNED = 85;

const int ERROR_INVALID_PASSWORD = 86;

const int ERROR_INVALID_PARAMETER = 87;

const int ERROR_NET_WRITE_FAULT = 88;

const int ERROR_NO_PROC_SLOTS = 89;

const int ERROR_TOO_MANY_SEMAPHORES = 100;

const int ERROR_EXCL_SEM_ALREADY_OWNED = 101;

const int ERROR_SEM_IS_SET = 102;

const int ERROR_TOO_MANY_SEM_REQUESTS = 103;

const int ERROR_INVALID_AT_INTERRUPT_TIME = 104;

const int ERROR_SEM_OWNER_DIED = 105;

const int ERROR_SEM_USER_LIMIT = 106;

const int ERROR_DISK_CHANGE = 107;

const int ERROR_DRIVE_LOCKED = 108;

const int ERROR_BROKEN_PIPE = 109;

const int ERROR_OPEN_FAILED = 110;

const int ERROR_BUFFER_OVERFLOW = 111;

const int ERROR_DISK_FULL = 112;

const int ERROR_NO_MORE_SEARCH_HANDLES = 113;

const int ERROR_INVALID_TARGET_HANDLE = 114;

const int ERROR_INVALID_CATEGORY = 117;

const int ERROR_INVALID_VERIFY_SWITCH = 118;

const int ERROR_BAD_DRIVER_LEVEL = 119;

const int ERROR_CALL_NOT_IMPLEMENTED = 120;

const int ERROR_SEM_TIMEOUT = 121;

const int ERROR_INSUFFICIENT_BUFFER = 122;

const int ERROR_INVALID_NAME = 123;

const int ERROR_INVALID_LEVEL = 124;

const int ERROR_NO_VOLUME_LABEL = 125;

const int ERROR_MOD_NOT_FOUND = 126;

const int ERROR_PROC_NOT_FOUND = 127;

const int ERROR_WAIT_NO_CHILDREN = 128;

const int ERROR_CHILD_NOT_COMPLETE = 129;

const int ERROR_DIRECT_ACCESS_HANDLE = 130;

const int ERROR_NEGATIVE_SEEK = 131;

const int ERROR_SEEK_ON_DEVICE = 132;

const int ERROR_IS_JOIN_TARGET = 133;

const int ERROR_IS_JOINED = 134;

const int ERROR_IS_SUBSTED = 135;

const int ERROR_NOT_JOINED = 136;

const int ERROR_NOT_SUBSTED = 137;

const int ERROR_JOIN_TO_JOIN = 138;

const int ERROR_SUBST_TO_SUBST = 139;

const int ERROR_JOIN_TO_SUBST = 140;

const int ERROR_SUBST_TO_JOIN = 141;

const int ERROR_BUSY_DRIVE = 142;

const int ERROR_SAME_DRIVE = 143;

const int ERROR_DIR_NOT_ROOT = 144;

const int ERROR_DIR_NOT_EMPTY = 145;

const int ERROR_IS_SUBST_PATH = 146;

const int ERROR_IS_JOIN_PATH = 147;

const int ERROR_PATH_BUSY = 148;

const int ERROR_IS_SUBST_TARGET = 149;

const int ERROR_SYSTEM_TRACE = 150;

const int ERROR_INVALID_EVENT_COUNT = 151;

const int ERROR_TOO_MANY_MUXWAITERS = 152;

const int ERROR_INVALID_LIST_FORMAT = 153;

const int ERROR_LABEL_TOO_LONG = 154;

const int ERROR_TOO_MANY_TCBS = 155;

const int ERROR_SIGNAL_REFUSED = 156;

const int ERROR_DISCARDED = 157;

const int ERROR_NOT_LOCKED = 158;

const int ERROR_BAD_THREADID_ADDR = 159;

const int ERROR_BAD_ARGUMENTS = 160;

const int ERROR_BAD_PATHNAME = 161;

const int ERROR_SIGNAL_PENDING = 162;

const int ERROR_MAX_THRDS_REACHED = 164;

const int ERROR_LOCK_FAILED = 167;

const int ERROR_BUSY = 170;

const int ERROR_DEVICE_SUPPORT_IN_PROGRESS = 171;

const int ERROR_CANCEL_VIOLATION = 173;

const int ERROR_ATOMIC_LOCKS_NOT_SUPPORTED = 174;

const int ERROR_INVALID_SEGMENT_NUMBER = 180;

const int ERROR_INVALID_ORDINAL = 182;

const int ERROR_ALREADY_EXISTS = 183;

const int ERROR_INVALID_FLAG_NUMBER = 186;

const int ERROR_SEM_NOT_FOUND = 187;

const int ERROR_INVALID_STARTING_CODESEG = 188;

const int ERROR_INVALID_STACKSEG = 189;

const int ERROR_INVALID_MODULETYPE = 190;

const int ERROR_INVALID_EXE_SIGNATURE = 191;

const int ERROR_EXE_MARKED_INVALID = 192;

const int ERROR_BAD_EXE_FORMAT = 193;

const int ERROR_ITERATED_DATA_EXCEEDS_64k = 194;

const int ERROR_INVALID_MINALLOCSIZE = 195;

const int ERROR_DYNLINK_FROM_INVALID_RING = 196;

const int ERROR_IOPL_NOT_ENABLED = 197;

const int ERROR_INVALID_SEGDPL = 198;

const int ERROR_AUTODATASEG_EXCEEDS_64k = 199;

const int ERROR_RING2SEG_MUST_BE_MOVABLE = 200;

const int ERROR_RELOC_CHAIN_XEEDS_SEGLIM = 201;

const int ERROR_INFLOOP_IN_RELOC_CHAIN = 202;

const int ERROR_ENVVAR_NOT_FOUND = 203;

const int ERROR_NO_SIGNAL_SENT = 205;

const int ERROR_FILENAME_EXCED_RANGE = 206;

const int ERROR_RING2_STACK_IN_USE = 207;

const int ERROR_META_EXPANSION_TOO_LONG = 208;

const int ERROR_INVALID_SIGNAL_NUMBER = 209;

const int ERROR_THREAD_1_INACTIVE = 210;

const int ERROR_LOCKED = 212;

const int ERROR_TOO_MANY_MODULES = 214;

const int ERROR_NESTING_NOT_ALLOWED = 215;

const int ERROR_EXE_MACHINE_TYPE_MISMATCH = 216;

const int ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY = 217;

const int ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY = 218;

const int ERROR_FILE_CHECKED_OUT = 220;

const int ERROR_CHECKOUT_REQUIRED = 221;

const int ERROR_BAD_FILE_TYPE = 222;

const int ERROR_FILE_TOO_LARGE = 223;

const int ERROR_FORMS_AUTH_REQUIRED = 224;

const int ERROR_VIRUS_INFECTED = 225;

const int ERROR_VIRUS_DELETED = 226;

const int ERROR_PIPE_LOCAL = 229;

const int ERROR_BAD_PIPE = 230;

const int ERROR_PIPE_BUSY = 231;

const int ERROR_NO_DATA = 232;

const int ERROR_PIPE_NOT_CONNECTED = 233;

const int ERROR_MORE_DATA = 234;

const int ERROR_NO_WORK_DONE = 235;

const int ERROR_VC_DISCONNECTED = 240;

const int ERROR_INVALID_EA_NAME = 254;

const int ERROR_EA_LIST_INCONSISTENT = 255;

const int WAIT_TIMEOUT = 258;

const int ERROR_NO_MORE_ITEMS = 259;

const int ERROR_CANNOT_COPY = 266;

const int ERROR_DIRECTORY = 267;

const int ERROR_EAS_DIDNT_FIT = 275;

const int ERROR_EA_FILE_CORRUPT = 276;

const int ERROR_EA_TABLE_FULL = 277;

const int ERROR_INVALID_EA_HANDLE = 278;

const int ERROR_EAS_NOT_SUPPORTED = 282;

const int ERROR_NOT_OWNER = 288;

const int ERROR_TOO_MANY_POSTS = 298;

const int ERROR_PARTIAL_COPY = 299;

const int ERROR_OPLOCK_NOT_GRANTED = 300;

const int ERROR_INVALID_OPLOCK_PROTOCOL = 301;

const int ERROR_DISK_TOO_FRAGMENTED = 302;

const int ERROR_DELETE_PENDING = 303;

const int ERROR_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING = 304;

const int ERROR_SHORT_NAMES_NOT_ENABLED_ON_VOLUME = 305;

const int ERROR_SECURITY_STREAM_IS_INCONSISTENT = 306;

const int ERROR_INVALID_LOCK_RANGE = 307;

const int ERROR_IMAGE_SUBSYSTEM_NOT_PRESENT = 308;

const int ERROR_NOTIFICATION_GUID_ALREADY_DEFINED = 309;

const int ERROR_INVALID_EXCEPTION_HANDLER = 310;

const int ERROR_DUPLICATE_PRIVILEGES = 311;

const int ERROR_NO_RANGES_PROCESSED = 312;

const int ERROR_NOT_ALLOWED_ON_SYSTEM_FILE = 313;

const int ERROR_DISK_RESOURCES_EXHAUSTED = 314;

const int ERROR_INVALID_TOKEN = 315;

const int ERROR_DEVICE_FEATURE_NOT_SUPPORTED = 316;

const int ERROR_MR_MID_NOT_FOUND = 317;

const int ERROR_SCOPE_NOT_FOUND = 318;

const int ERROR_UNDEFINED_SCOPE = 319;

const int ERROR_INVALID_CAP = 320;

const int ERROR_DEVICE_UNREACHABLE = 321;

const int ERROR_DEVICE_NO_RESOURCES = 322;

const int ERROR_DATA_CHECKSUM_ERROR = 323;

const int ERROR_INTERMIXED_KERNEL_EA_OPERATION = 324;

const int ERROR_FILE_LEVEL_TRIM_NOT_SUPPORTED = 326;

const int ERROR_OFFSET_ALIGNMENT_VIOLATION = 327;

const int ERROR_INVALID_FIELD_IN_PARAMETER_LIST = 328;

const int ERROR_OPERATION_IN_PROGRESS = 329;

const int ERROR_BAD_DEVICE_PATH = 330;

const int ERROR_TOO_MANY_DESCRIPTORS = 331;

const int ERROR_SCRUB_DATA_DISABLED = 332;

const int ERROR_NOT_REDUNDANT_STORAGE = 333;

const int ERROR_RESIDENT_FILE_NOT_SUPPORTED = 334;

const int ERROR_COMPRESSED_FILE_NOT_SUPPORTED = 335;

const int ERROR_DIRECTORY_NOT_SUPPORTED = 336;

const int ERROR_NOT_READ_FROM_COPY = 337;

const int ERROR_FT_WRITE_FAILURE = 338;

const int ERROR_FT_DI_SCAN_REQUIRED = 339;

const int ERROR_INVALID_KERNEL_INFO_VERSION = 340;

const int ERROR_INVALID_PEP_INFO_VERSION = 341;

const int ERROR_OBJECT_NOT_EXTERNALLY_BACKED = 342;

const int ERROR_EXTERNAL_BACKING_PROVIDER_UNKNOWN = 343;

const int ERROR_COMPRESSION_NOT_BENEFICIAL = 344;

const int ERROR_STORAGE_TOPOLOGY_ID_MISMATCH = 345;

const int ERROR_BLOCKED_BY_PARENTAL_CONTROLS = 346;

const int ERROR_BLOCK_TOO_MANY_REFERENCES = 347;

const int ERROR_MARKED_TO_DISALLOW_WRITES = 348;

const int ERROR_ENCLAVE_FAILURE = 349;

const int ERROR_FAIL_NOACTION_REBOOT = 350;

const int ERROR_FAIL_SHUTDOWN = 351;

const int ERROR_FAIL_RESTART = 352;

const int ERROR_MAX_SESSIONS_REACHED = 353;

const int ERROR_NETWORK_ACCESS_DENIED_EDP = 354;

const int ERROR_DEVICE_HINT_NAME_BUFFER_TOO_SMALL = 355;

const int ERROR_EDP_POLICY_DENIES_OPERATION = 356;

const int ERROR_EDP_DPL_POLICY_CANT_BE_SATISFIED = 357;

const int ERROR_CLOUD_FILE_SYNC_ROOT_METADATA_CORRUPT = 358;

const int ERROR_DEVICE_IN_MAINTENANCE = 359;

const int ERROR_NOT_SUPPORTED_ON_DAX = 360;

const int ERROR_DAX_MAPPING_EXISTS = 361;

const int ERROR_CLOUD_FILE_PROVIDER_NOT_RUNNING = 362;

const int ERROR_CLOUD_FILE_METADATA_CORRUPT = 363;

const int ERROR_CLOUD_FILE_METADATA_TOO_LARGE = 364;

const int ERROR_CLOUD_FILE_PROPERTY_BLOB_TOO_LARGE = 365;

const int ERROR_CLOUD_FILE_PROPERTY_BLOB_CHECKSUM_MISMATCH = 366;

const int ERROR_CHILD_PROCESS_BLOCKED = 367;

const int ERROR_STORAGE_LOST_DATA_PERSISTENCE = 368;

const int ERROR_FILE_SYSTEM_VIRTUALIZATION_UNAVAILABLE = 369;

const int ERROR_FILE_SYSTEM_VIRTUALIZATION_METADATA_CORRUPT = 370;

const int ERROR_FILE_SYSTEM_VIRTUALIZATION_BUSY = 371;

const int ERROR_FILE_SYSTEM_VIRTUALIZATION_PROVIDER_UNKNOWN = 372;

const int ERROR_GDI_HANDLE_LEAK = 373;

const int ERROR_CLOUD_FILE_TOO_MANY_PROPERTY_BLOBS = 374;

const int ERROR_CLOUD_FILE_PROPERTY_VERSION_NOT_SUPPORTED = 375;

const int ERROR_NOT_A_CLOUD_FILE = 376;

const int ERROR_CLOUD_FILE_NOT_IN_SYNC = 377;

const int ERROR_CLOUD_FILE_ALREADY_CONNECTED = 378;

const int ERROR_CLOUD_FILE_NOT_SUPPORTED = 379;

const int ERROR_CLOUD_FILE_INVALID_REQUEST = 380;

const int ERROR_CLOUD_FILE_READ_ONLY_VOLUME = 381;

const int ERROR_CLOUD_FILE_CONNECTED_PROVIDER_ONLY = 382;

const int ERROR_CLOUD_FILE_VALIDATION_FAILED = 383;

const int ERROR_SMB1_NOT_AVAILABLE = 384;

const int ERROR_FILE_SYSTEM_VIRTUALIZATION_INVALID_OPERATION = 385;

const int ERROR_CLOUD_FILE_AUTHENTICATION_FAILED = 386;

const int ERROR_CLOUD_FILE_INSUFFICIENT_RESOURCES = 387;

const int ERROR_CLOUD_FILE_NETWORK_UNAVAILABLE = 388;

const int ERROR_CLOUD_FILE_UNSUCCESSFUL = 389;

const int ERROR_CLOUD_FILE_NOT_UNDER_SYNC_ROOT = 390;

const int ERROR_CLOUD_FILE_IN_USE = 391;

const int ERROR_CLOUD_FILE_PINNED = 392;

const int ERROR_CLOUD_FILE_REQUEST_ABORTED = 393;

const int ERROR_CLOUD_FILE_PROPERTY_CORRUPT = 394;

const int ERROR_CLOUD_FILE_ACCESS_DENIED = 395;

const int ERROR_CLOUD_FILE_INCOMPATIBLE_HARDLINKS = 396;

const int ERROR_CLOUD_FILE_PROPERTY_LOCK_CONFLICT = 397;

const int ERROR_CLOUD_FILE_REQUEST_CANCELED = 398;

const int ERROR_EXTERNAL_SYSKEY_NOT_SUPPORTED = 399;

const int ERROR_THREAD_MODE_ALREADY_BACKGROUND = 400;

const int ERROR_THREAD_MODE_NOT_BACKGROUND = 401;

const int ERROR_PROCESS_MODE_ALREADY_BACKGROUND = 402;

const int ERROR_PROCESS_MODE_NOT_BACKGROUND = 403;

const int ERROR_CLOUD_FILE_PROVIDER_TERMINATED = 404;

const int ERROR_NOT_A_CLOUD_SYNC_ROOT = 405;

const int ERROR_FILE_PROTECTED_UNDER_DPL = 406;

const int ERROR_VOLUME_NOT_CLUSTER_ALIGNED = 407;

const int ERROR_NO_PHYSICALLY_ALIGNED_FREE_SPACE_FOUND = 408;

const int ERROR_APPX_FILE_NOT_ENCRYPTED = 409;

const int ERROR_RWRAW_ENCRYPTED_FILE_NOT_ENCRYPTED = 410;

const int ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILEOFFSET = 411;

const int ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILERANGE = 412;

const int ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_PARAMETER = 413;

const int ERROR_LINUX_SUBSYSTEM_NOT_PRESENT = 414;

const int ERROR_FT_READ_FAILURE = 415;

const int ERROR_STORAGE_RESERVE_ID_INVALID = 416;

const int ERROR_STORAGE_RESERVE_DOES_NOT_EXIST = 417;

const int ERROR_STORAGE_RESERVE_ALREADY_EXISTS = 418;

const int ERROR_STORAGE_RESERVE_NOT_EMPTY = 419;

const int ERROR_NOT_A_DAX_VOLUME = 420;

const int ERROR_NOT_DAX_MAPPABLE = 421;

const int ERROR_TIME_SENSITIVE_THREAD = 422;

const int ERROR_DPL_NOT_SUPPORTED_FOR_USER = 423;

const int ERROR_CASE_DIFFERING_NAMES_IN_DIR = 424;

const int ERROR_FILE_NOT_SUPPORTED = 425;

const int ERROR_CLOUD_FILE_REQUEST_TIMEOUT = 426;

const int ERROR_NO_TASK_QUEUE = 427;

const int ERROR_SRC_SRV_DLL_LOAD_FAILED = 428;

const int ERROR_NOT_SUPPORTED_WITH_BTT = 429;

const int ERROR_ENCRYPTION_DISABLED = 430;

const int ERROR_ENCRYPTING_METADATA_DISALLOWED = 431;

const int ERROR_CANT_CLEAR_ENCRYPTION_FLAG = 432;

const int ERROR_NO_SUCH_DEVICE = 433;

const int ERROR_CLOUD_FILE_DEHYDRATION_DISALLOWED = 434;

const int ERROR_FILE_SNAP_IN_PROGRESS = 435;

const int ERROR_FILE_SNAP_USER_SECTION_NOT_SUPPORTED = 436;

const int ERROR_FILE_SNAP_MODIFY_NOT_SUPPORTED = 437;

const int ERROR_FILE_SNAP_IO_NOT_COORDINATED = 438;

const int ERROR_FILE_SNAP_UNEXPECTED_ERROR = 439;

const int ERROR_FILE_SNAP_INVALID_PARAMETER = 440;

const int ERROR_UNSATISFIED_DEPENDENCIES = 441;

const int ERROR_CASE_SENSITIVE_PATH = 442;

const int ERROR_UNEXPECTED_NTCACHEMANAGER_ERROR = 443;

const int ERROR_LINUX_SUBSYSTEM_UPDATE_REQUIRED = 444;

const int ERROR_DLP_POLICY_WARNS_AGAINST_OPERATION = 445;

const int ERROR_DLP_POLICY_DENIES_OPERATION = 446;

const int ERROR_DLP_POLICY_SILENTLY_FAIL = 449;

const int ERROR_CAPAUTHZ_NOT_DEVUNLOCKED = 450;

const int ERROR_CAPAUTHZ_CHANGE_TYPE = 451;

const int ERROR_CAPAUTHZ_NOT_PROVISIONED = 452;

const int ERROR_CAPAUTHZ_NOT_AUTHORIZED = 453;

const int ERROR_CAPAUTHZ_NO_POLICY = 454;

const int ERROR_CAPAUTHZ_DB_CORRUPTED = 455;

const int ERROR_CAPAUTHZ_SCCD_INVALID_CATALOG = 456;

const int ERROR_CAPAUTHZ_SCCD_NO_AUTH_ENTITY = 457;

const int ERROR_CAPAUTHZ_SCCD_PARSE_ERROR = 458;

const int ERROR_CAPAUTHZ_SCCD_DEV_MODE_REQUIRED = 459;

const int ERROR_CAPAUTHZ_SCCD_NO_CAPABILITY_MATCH = 460;

const int ERROR_CIMFS_IMAGE_CORRUPT = 470;

const int ERROR_PNP_QUERY_REMOVE_DEVICE_TIMEOUT = 480;

const int ERROR_PNP_QUERY_REMOVE_RELATED_DEVICE_TIMEOUT = 481;

const int ERROR_PNP_QUERY_REMOVE_UNRELATED_DEVICE_TIMEOUT = 482;

const int ERROR_DEVICE_HARDWARE_ERROR = 483;

const int ERROR_INVALID_ADDRESS = 487;

const int ERROR_HAS_SYSTEM_CRITICAL_FILES = 488;

const int ERROR_VRF_CFG_AND_IO_ENABLED = 1183;

const int ERROR_PARTITION_TERMINATING = 1184;

const int ERROR_USER_PROFILE_LOAD = 500;

const int ERROR_ARITHMETIC_OVERFLOW = 534;

const int ERROR_PIPE_CONNECTED = 535;

const int ERROR_PIPE_LISTENING = 536;

const int ERROR_VERIFIER_STOP = 537;

const int ERROR_ABIOS_ERROR = 538;

const int ERROR_WX86_WARNING = 539;

const int ERROR_WX86_ERROR = 540;

const int ERROR_TIMER_NOT_CANCELED = 541;

const int ERROR_UNWIND = 542;

const int ERROR_BAD_STACK = 543;

const int ERROR_INVALID_UNWIND_TARGET = 544;

const int ERROR_INVALID_PORT_ATTRIBUTES = 545;

const int ERROR_PORT_MESSAGE_TOO_LONG = 546;

const int ERROR_INVALID_QUOTA_LOWER = 547;

const int ERROR_DEVICE_ALREADY_ATTACHED = 548;

const int ERROR_INSTRUCTION_MISALIGNMENT = 549;

const int ERROR_PROFILING_NOT_STARTED = 550;

const int ERROR_PROFILING_NOT_STOPPED = 551;

const int ERROR_COULD_NOT_INTERPRET = 552;

const int ERROR_PROFILING_AT_LIMIT = 553;

const int ERROR_CANT_WAIT = 554;

const int ERROR_CANT_TERMINATE_SELF = 555;

const int ERROR_UNEXPECTED_MM_CREATE_ERR = 556;

const int ERROR_UNEXPECTED_MM_MAP_ERROR = 557;

const int ERROR_UNEXPECTED_MM_EXTEND_ERR = 558;

const int ERROR_BAD_FUNCTION_TABLE = 559;

const int ERROR_NO_GUID_TRANSLATION = 560;

const int ERROR_INVALID_LDT_SIZE = 561;

const int ERROR_INVALID_LDT_OFFSET = 563;

const int ERROR_INVALID_LDT_DESCRIPTOR = 564;

const int ERROR_TOO_MANY_THREADS = 565;

const int ERROR_THREAD_NOT_IN_PROCESS = 566;

const int ERROR_PAGEFILE_QUOTA_EXCEEDED = 567;

const int ERROR_LOGON_SERVER_CONFLICT = 568;

const int ERROR_SYNCHRONIZATION_REQUIRED = 569;

const int ERROR_NET_OPEN_FAILED = 570;

const int ERROR_IO_PRIVILEGE_FAILED = 571;

const int ERROR_CONTROL_C_EXIT = 572;

const int ERROR_MISSING_SYSTEMFILE = 573;

const int ERROR_UNHANDLED_EXCEPTION = 574;

const int ERROR_APP_INIT_FAILURE = 575;

const int ERROR_PAGEFILE_CREATE_FAILED = 576;

const int ERROR_INVALID_IMAGE_HASH = 577;

const int ERROR_NO_PAGEFILE = 578;

const int ERROR_ILLEGAL_FLOAT_CONTEXT = 579;

const int ERROR_NO_EVENT_PAIR = 580;

const int ERROR_DOMAIN_CTRLR_CONFIG_ERROR = 581;

const int ERROR_ILLEGAL_CHARACTER = 582;

const int ERROR_UNDEFINED_CHARACTER = 583;

const int ERROR_FLOPPY_VOLUME = 584;

const int ERROR_BIOS_FAILED_TO_CONNECT_INTERRUPT = 585;

const int ERROR_BACKUP_CONTROLLER = 586;

const int ERROR_MUTANT_LIMIT_EXCEEDED = 587;

const int ERROR_FS_DRIVER_REQUIRED = 588;

const int ERROR_CANNOT_LOAD_REGISTRY_FILE = 589;

const int ERROR_DEBUG_ATTACH_FAILED = 590;

const int ERROR_SYSTEM_PROCESS_TERMINATED = 591;

const int ERROR_DATA_NOT_ACCEPTED = 592;

const int ERROR_VDM_HARD_ERROR = 593;

const int ERROR_DRIVER_CANCEL_TIMEOUT = 594;

const int ERROR_REPLY_MESSAGE_MISMATCH = 595;

const int ERROR_LOST_WRITEBEHIND_DATA = 596;

const int ERROR_CLIENT_SERVER_PARAMETERS_INVALID = 597;

const int ERROR_NOT_TINY_STREAM = 598;

const int ERROR_STACK_OVERFLOW_READ = 599;

const int ERROR_CONVERT_TO_LARGE = 600;

const int ERROR_FOUND_OUT_OF_SCOPE = 601;

const int ERROR_ALLOCATE_BUCKET = 602;

const int ERROR_MARSHALL_OVERFLOW = 603;

const int ERROR_INVALID_VARIANT = 604;

const int ERROR_BAD_COMPRESSION_BUFFER = 605;

const int ERROR_AUDIT_FAILED = 606;

const int ERROR_TIMER_RESOLUTION_NOT_SET = 607;

const int ERROR_INSUFFICIENT_LOGON_INFO = 608;

const int ERROR_BAD_DLL_ENTRYPOINT = 609;

const int ERROR_BAD_SERVICE_ENTRYPOINT = 610;

const int ERROR_IP_ADDRESS_CONFLICT1 = 611;

const int ERROR_IP_ADDRESS_CONFLICT2 = 612;

const int ERROR_REGISTRY_QUOTA_LIMIT = 613;

const int ERROR_NO_CALLBACK_ACTIVE = 614;

const int ERROR_PWD_TOO_SHORT = 615;

const int ERROR_PWD_TOO_RECENT = 616;

const int ERROR_PWD_HISTORY_CONFLICT = 617;

const int ERROR_UNSUPPORTED_COMPRESSION = 618;

const int ERROR_INVALID_HW_PROFILE = 619;

const int ERROR_INVALID_PLUGPLAY_DEVICE_PATH = 620;

const int ERROR_QUOTA_LIST_INCONSISTENT = 621;

const int ERROR_EVALUATION_EXPIRATION = 622;

const int ERROR_ILLEGAL_DLL_RELOCATION = 623;

const int ERROR_DLL_INIT_FAILED_LOGOFF = 624;

const int ERROR_VALIDATE_CONTINUE = 625;

const int ERROR_NO_MORE_MATCHES = 626;

const int ERROR_RANGE_LIST_CONFLICT = 627;

const int ERROR_SERVER_SID_MISMATCH = 628;

const int ERROR_CANT_ENABLE_DENY_ONLY = 629;

const int ERROR_FLOAT_MULTIPLE_FAULTS = 630;

const int ERROR_FLOAT_MULTIPLE_TRAPS = 631;

const int ERROR_NOINTERFACE = 632;

const int ERROR_DRIVER_FAILED_SLEEP = 633;

const int ERROR_CORRUPT_SYSTEM_FILE = 634;

const int ERROR_COMMITMENT_MINIMUM = 635;

const int ERROR_PNP_RESTART_ENUMERATION = 636;

const int ERROR_SYSTEM_IMAGE_BAD_SIGNATURE = 637;

const int ERROR_PNP_REBOOT_REQUIRED = 638;

const int ERROR_INSUFFICIENT_POWER = 639;

const int ERROR_MULTIPLE_FAULT_VIOLATION = 640;

const int ERROR_SYSTEM_SHUTDOWN = 641;

const int ERROR_PORT_NOT_SET = 642;

const int ERROR_DS_VERSION_CHECK_FAILURE = 643;

const int ERROR_RANGE_NOT_FOUND = 644;

const int ERROR_NOT_SAFE_MODE_DRIVER = 646;

const int ERROR_FAILED_DRIVER_ENTRY = 647;

const int ERROR_DEVICE_ENUMERATION_ERROR = 648;

const int ERROR_MOUNT_POINT_NOT_RESOLVED = 649;

const int ERROR_INVALID_DEVICE_OBJECT_PARAMETER = 650;

const int ERROR_MCA_OCCURED = 651;

const int ERROR_DRIVER_DATABASE_ERROR = 652;

const int ERROR_SYSTEM_HIVE_TOO_LARGE = 653;

const int ERROR_DRIVER_FAILED_PRIOR_UNLOAD = 654;

const int ERROR_VOLSNAP_PREPARE_HIBERNATE = 655;

const int ERROR_HIBERNATION_FAILURE = 656;

const int ERROR_PWD_TOO_LONG = 657;

const int ERROR_FILE_SYSTEM_LIMITATION = 665;

const int ERROR_ASSERTION_FAILURE = 668;

const int ERROR_ACPI_ERROR = 669;

const int ERROR_WOW_ASSERTION = 670;

const int ERROR_PNP_BAD_MPS_TABLE = 671;

const int ERROR_PNP_TRANSLATION_FAILED = 672;

const int ERROR_PNP_IRQ_TRANSLATION_FAILED = 673;

const int ERROR_PNP_INVALID_ID = 674;

const int ERROR_WAKE_SYSTEM_DEBUGGER = 675;

const int ERROR_HANDLES_CLOSED = 676;

const int ERROR_EXTRANEOUS_INFORMATION = 677;

const int ERROR_RXACT_COMMIT_NECESSARY = 678;

const int ERROR_MEDIA_CHECK = 679;

const int ERROR_GUID_SUBSTITUTION_MADE = 680;

const int ERROR_STOPPED_ON_SYMLINK = 681;

const int ERROR_LONGJUMP = 682;

const int ERROR_PLUGPLAY_QUERY_VETOED = 683;

const int ERROR_UNWIND_CONSOLIDATE = 684;

const int ERROR_REGISTRY_HIVE_RECOVERED = 685;

const int ERROR_DLL_MIGHT_BE_INSECURE = 686;

const int ERROR_DLL_MIGHT_BE_INCOMPATIBLE = 687;

const int ERROR_DBG_EXCEPTION_NOT_HANDLED = 688;

const int ERROR_DBG_REPLY_LATER = 689;

const int ERROR_DBG_UNABLE_TO_PROVIDE_HANDLE = 690;

const int ERROR_DBG_TERMINATE_THREAD = 691;

const int ERROR_DBG_TERMINATE_PROCESS = 692;

const int ERROR_DBG_CONTROL_C = 693;

const int ERROR_DBG_PRINTEXCEPTION_C = 694;

const int ERROR_DBG_RIPEXCEPTION = 695;

const int ERROR_DBG_CONTROL_BREAK = 696;

const int ERROR_DBG_COMMAND_EXCEPTION = 697;

const int ERROR_OBJECT_NAME_EXISTS = 698;

const int ERROR_THREAD_WAS_SUSPENDED = 699;

const int ERROR_IMAGE_NOT_AT_BASE = 700;

const int ERROR_RXACT_STATE_CREATED = 701;

const int ERROR_SEGMENT_NOTIFICATION = 702;

const int ERROR_BAD_CURRENT_DIRECTORY = 703;

const int ERROR_FT_READ_RECOVERY_FROM_BACKUP = 704;

const int ERROR_FT_WRITE_RECOVERY = 705;

const int ERROR_IMAGE_MACHINE_TYPE_MISMATCH = 706;

const int ERROR_RECEIVE_PARTIAL = 707;

const int ERROR_RECEIVE_EXPEDITED = 708;

const int ERROR_RECEIVE_PARTIAL_EXPEDITED = 709;

const int ERROR_EVENT_DONE = 710;

const int ERROR_EVENT_PENDING = 711;

const int ERROR_CHECKING_FILE_SYSTEM = 712;

const int ERROR_FATAL_APP_EXIT = 713;

const int ERROR_PREDEFINED_HANDLE = 714;

const int ERROR_WAS_UNLOCKED = 715;

const int ERROR_SERVICE_NOTIFICATION = 716;

const int ERROR_WAS_LOCKED = 717;

const int ERROR_LOG_HARD_ERROR = 718;

const int ERROR_ALREADY_WIN32 = 719;

const int ERROR_IMAGE_MACHINE_TYPE_MISMATCH_EXE = 720;

const int ERROR_NO_YIELD_PERFORMED = 721;

const int ERROR_TIMER_RESUME_IGNORED = 722;

const int ERROR_ARBITRATION_UNHANDLED = 723;

const int ERROR_CARDBUS_NOT_SUPPORTED = 724;

const int ERROR_MP_PROCESSOR_MISMATCH = 725;

const int ERROR_HIBERNATED = 726;

const int ERROR_RESUME_HIBERNATION = 727;

const int ERROR_FIRMWARE_UPDATED = 728;

const int ERROR_DRIVERS_LEAKING_LOCKED_PAGES = 729;

const int ERROR_WAKE_SYSTEM = 730;

const int ERROR_WAIT_1 = 731;

const int ERROR_WAIT_2 = 732;

const int ERROR_WAIT_3 = 733;

const int ERROR_WAIT_63 = 734;

const int ERROR_ABANDONED_WAIT_0 = 735;

const int ERROR_ABANDONED_WAIT_63 = 736;

const int ERROR_USER_APC = 737;

const int ERROR_KERNEL_APC = 738;

const int ERROR_ALERTED = 739;

const int ERROR_ELEVATION_REQUIRED = 740;

const int ERROR_REPARSE = 741;

const int ERROR_OPLOCK_BREAK_IN_PROGRESS = 742;

const int ERROR_VOLUME_MOUNTED = 743;

const int ERROR_RXACT_COMMITTED = 744;

const int ERROR_NOTIFY_CLEANUP = 745;

const int ERROR_PRIMARY_TRANSPORT_CONNECT_FAILED = 746;

const int ERROR_PAGE_FAULT_TRANSITION = 747;

const int ERROR_PAGE_FAULT_DEMAND_ZERO = 748;

const int ERROR_PAGE_FAULT_COPY_ON_WRITE = 749;

const int ERROR_PAGE_FAULT_GUARD_PAGE = 750;

const int ERROR_PAGE_FAULT_PAGING_FILE = 751;

const int ERROR_CACHE_PAGE_LOCKED = 752;

const int ERROR_CRASH_DUMP = 753;

const int ERROR_BUFFER_ALL_ZEROS = 754;

const int ERROR_REPARSE_OBJECT = 755;

const int ERROR_RESOURCE_REQUIREMENTS_CHANGED = 756;

const int ERROR_TRANSLATION_COMPLETE = 757;

const int ERROR_NOTHING_TO_TERMINATE = 758;

const int ERROR_PROCESS_NOT_IN_JOB = 759;

const int ERROR_PROCESS_IN_JOB = 760;

const int ERROR_VOLSNAP_HIBERNATE_READY = 761;

const int ERROR_FSFILTER_OP_COMPLETED_SUCCESSFULLY = 762;

const int ERROR_INTERRUPT_VECTOR_ALREADY_CONNECTED = 763;

const int ERROR_INTERRUPT_STILL_CONNECTED = 764;

const int ERROR_WAIT_FOR_OPLOCK = 765;

const int ERROR_DBG_EXCEPTION_HANDLED = 766;

const int ERROR_DBG_CONTINUE = 767;

const int ERROR_CALLBACK_POP_STACK = 768;

const int ERROR_COMPRESSION_DISABLED = 769;

const int ERROR_CANTFETCHBACKWARDS = 770;

const int ERROR_CANTSCROLLBACKWARDS = 771;

const int ERROR_ROWSNOTRELEASED = 772;

const int ERROR_BAD_ACCESSOR_FLAGS = 773;

const int ERROR_ERRORS_ENCOUNTERED = 774;

const int ERROR_NOT_CAPABLE = 775;

const int ERROR_REQUEST_OUT_OF_SEQUENCE = 776;

const int ERROR_VERSION_PARSE_ERROR = 777;

const int ERROR_BADSTARTPOSITION = 778;

const int ERROR_MEMORY_HARDWARE = 779;

const int ERROR_DISK_REPAIR_DISABLED = 780;

const int ERROR_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE = 781;

const int ERROR_SYSTEM_POWERSTATE_TRANSITION = 782;

const int ERROR_SYSTEM_POWERSTATE_COMPLEX_TRANSITION = 783;

const int ERROR_MCA_EXCEPTION = 784;

const int ERROR_ACCESS_AUDIT_BY_POLICY = 785;

const int ERROR_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY = 786;

const int ERROR_ABANDON_HIBERFILE = 787;

const int ERROR_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED = 788;

const int ERROR_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR = 789;

const int ERROR_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR = 790;

const int ERROR_BAD_MCFG_TABLE = 791;

const int ERROR_DISK_REPAIR_REDIRECTED = 792;

const int ERROR_DISK_REPAIR_UNSUCCESSFUL = 793;

const int ERROR_CORRUPT_LOG_OVERFULL = 794;

const int ERROR_CORRUPT_LOG_CORRUPTED = 795;

const int ERROR_CORRUPT_LOG_UNAVAILABLE = 796;

const int ERROR_CORRUPT_LOG_DELETED_FULL = 797;

const int ERROR_CORRUPT_LOG_CLEARED = 798;

const int ERROR_ORPHAN_NAME_EXHAUSTED = 799;

const int ERROR_OPLOCK_SWITCHED_TO_NEW_HANDLE = 800;

const int ERROR_CANNOT_GRANT_REQUESTED_OPLOCK = 801;

const int ERROR_CANNOT_BREAK_OPLOCK = 802;

const int ERROR_OPLOCK_HANDLE_CLOSED = 803;

const int ERROR_NO_ACE_CONDITION = 804;

const int ERROR_INVALID_ACE_CONDITION = 805;

const int ERROR_FILE_HANDLE_REVOKED = 806;

const int ERROR_IMAGE_AT_DIFFERENT_BASE = 807;

const int ERROR_ENCRYPTED_IO_NOT_POSSIBLE = 808;

const int ERROR_FILE_METADATA_OPTIMIZATION_IN_PROGRESS = 809;

const int ERROR_QUOTA_ACTIVITY = 810;

const int ERROR_HANDLE_REVOKED = 811;

const int ERROR_CALLBACK_INVOKE_INLINE = 812;

const int ERROR_CPU_SET_INVALID = 813;

const int ERROR_ENCLAVE_NOT_TERMINATED = 814;

const int ERROR_ENCLAVE_VIOLATION = 815;

const int ERROR_EA_ACCESS_DENIED = 994;

const int ERROR_OPERATION_ABORTED = 995;

const int ERROR_IO_INCOMPLETE = 996;

const int ERROR_IO_PENDING = 997;

const int ERROR_NOACCESS = 998;

const int ERROR_SWAPERROR = 999;

const int ERROR_STACK_OVERFLOW = 1001;

const int ERROR_INVALID_MESSAGE = 1002;

const int ERROR_CAN_NOT_COMPLETE = 1003;

const int ERROR_INVALID_FLAGS = 1004;

const int ERROR_UNRECOGNIZED_VOLUME = 1005;

const int ERROR_FILE_INVALID = 1006;

const int ERROR_FULLSCREEN_MODE = 1007;

const int ERROR_NO_TOKEN = 1008;

const int ERROR_BADDB = 1009;

const int ERROR_BADKEY = 1010;

const int ERROR_CANTOPEN = 1011;

const int ERROR_CANTREAD = 1012;

const int ERROR_CANTWRITE = 1013;

const int ERROR_REGISTRY_RECOVERED = 1014;

const int ERROR_REGISTRY_CORRUPT = 1015;

const int ERROR_REGISTRY_IO_FAILED = 1016;

const int ERROR_NOT_REGISTRY_FILE = 1017;

const int ERROR_KEY_DELETED = 1018;

const int ERROR_NO_LOG_SPACE = 1019;

const int ERROR_KEY_HAS_CHILDREN = 1020;

const int ERROR_CHILD_MUST_BE_VOLATILE = 1021;

const int ERROR_NOTIFY_ENUM_DIR = 1022;

const int ERROR_DEPENDENT_SERVICES_RUNNING = 1051;

const int ERROR_INVALID_SERVICE_CONTROL = 1052;

const int ERROR_SERVICE_REQUEST_TIMEOUT = 1053;

const int ERROR_SERVICE_NO_THREAD = 1054;

const int ERROR_SERVICE_DATABASE_LOCKED = 1055;

const int ERROR_SERVICE_ALREADY_RUNNING = 1056;

const int ERROR_INVALID_SERVICE_ACCOUNT = 1057;

const int ERROR_SERVICE_DISABLED = 1058;

const int ERROR_CIRCULAR_DEPENDENCY = 1059;

const int ERROR_SERVICE_DOES_NOT_EXIST = 1060;

const int ERROR_SERVICE_CANNOT_ACCEPT_CTRL = 1061;

const int ERROR_SERVICE_NOT_ACTIVE = 1062;

const int ERROR_FAILED_SERVICE_CONTROLLER_CONNECT = 1063;

const int ERROR_EXCEPTION_IN_SERVICE = 1064;

const int ERROR_DATABASE_DOES_NOT_EXIST = 1065;

const int ERROR_SERVICE_SPECIFIC_ERROR = 1066;

const int ERROR_PROCESS_ABORTED = 1067;

const int ERROR_SERVICE_DEPENDENCY_FAIL = 1068;

const int ERROR_SERVICE_LOGON_FAILED = 1069;

const int ERROR_SERVICE_START_HANG = 1070;

const int ERROR_INVALID_SERVICE_LOCK = 1071;

const int ERROR_SERVICE_MARKED_FOR_DELETE = 1072;

const int ERROR_SERVICE_EXISTS = 1073;

const int ERROR_ALREADY_RUNNING_LKG = 1074;

const int ERROR_SERVICE_DEPENDENCY_DELETED = 1075;

const int ERROR_BOOT_ALREADY_ACCEPTED = 1076;

const int ERROR_SERVICE_NEVER_STARTED = 1077;

const int ERROR_DUPLICATE_SERVICE_NAME = 1078;

const int ERROR_DIFFERENT_SERVICE_ACCOUNT = 1079;

const int ERROR_CANNOT_DETECT_DRIVER_FAILURE = 1080;

const int ERROR_CANNOT_DETECT_PROCESS_ABORT = 1081;

const int ERROR_NO_RECOVERY_PROGRAM = 1082;

const int ERROR_SERVICE_NOT_IN_EXE = 1083;

const int ERROR_NOT_SAFEBOOT_SERVICE = 1084;

const int ERROR_END_OF_MEDIA = 1100;

const int ERROR_FILEMARK_DETECTED = 1101;

const int ERROR_BEGINNING_OF_MEDIA = 1102;

const int ERROR_SETMARK_DETECTED = 1103;

const int ERROR_NO_DATA_DETECTED = 1104;

const int ERROR_PARTITION_FAILURE = 1105;

const int ERROR_INVALID_BLOCK_LENGTH = 1106;

const int ERROR_DEVICE_NOT_PARTITIONED = 1107;

const int ERROR_UNABLE_TO_LOCK_MEDIA = 1108;

const int ERROR_UNABLE_TO_UNLOAD_MEDIA = 1109;

const int ERROR_MEDIA_CHANGED = 1110;

const int ERROR_BUS_RESET = 1111;

const int ERROR_NO_MEDIA_IN_DRIVE = 1112;

const int ERROR_NO_UNICODE_TRANSLATION = 1113;

const int ERROR_DLL_INIT_FAILED = 1114;

const int ERROR_SHUTDOWN_IN_PROGRESS = 1115;

const int ERROR_NO_SHUTDOWN_IN_PROGRESS = 1116;

const int ERROR_IO_DEVICE = 1117;

const int ERROR_SERIAL_NO_DEVICE = 1118;

const int ERROR_IRQ_BUSY = 1119;

const int ERROR_MORE_WRITES = 1120;

const int ERROR_COUNTER_TIMEOUT = 1121;

const int ERROR_FLOPPY_ID_MARK_NOT_FOUND = 1122;

const int ERROR_FLOPPY_WRONG_CYLINDER = 1123;

const int ERROR_FLOPPY_UNKNOWN_ERROR = 1124;

const int ERROR_FLOPPY_BAD_REGISTERS = 1125;

const int ERROR_DISK_RECALIBRATE_FAILED = 1126;

const int ERROR_DISK_OPERATION_FAILED = 1127;

const int ERROR_DISK_RESET_FAILED = 1128;

const int ERROR_EOM_OVERFLOW = 1129;

const int ERROR_NOT_ENOUGH_SERVER_MEMORY = 1130;

const int ERROR_POSSIBLE_DEADLOCK = 1131;

const int ERROR_MAPPED_ALIGNMENT = 1132;

const int ERROR_SET_POWER_STATE_VETOED = 1140;

const int ERROR_SET_POWER_STATE_FAILED = 1141;

const int ERROR_TOO_MANY_LINKS = 1142;

const int ERROR_OLD_WIN_VERSION = 1150;

const int ERROR_APP_WRONG_OS = 1151;

const int ERROR_SINGLE_INSTANCE_APP = 1152;

const int ERROR_RMODE_APP = 1153;

const int ERROR_INVALID_DLL = 1154;

const int ERROR_NO_ASSOCIATION = 1155;

const int ERROR_DDE_FAIL = 1156;

const int ERROR_DLL_NOT_FOUND = 1157;

const int ERROR_NO_MORE_USER_HANDLES = 1158;

const int ERROR_MESSAGE_SYNC_ONLY = 1159;

const int ERROR_SOURCE_ELEMENT_EMPTY = 1160;

const int ERROR_DESTINATION_ELEMENT_FULL = 1161;

const int ERROR_ILLEGAL_ELEMENT_ADDRESS = 1162;

const int ERROR_MAGAZINE_NOT_PRESENT = 1163;

const int ERROR_DEVICE_REINITIALIZATION_NEEDED = 1164;

const int ERROR_DEVICE_REQUIRES_CLEANING = 1165;

const int ERROR_DEVICE_DOOR_OPEN = 1166;

const int ERROR_DEVICE_NOT_CONNECTED = 1167;

const int ERROR_NOT_FOUND = 1168;

const int ERROR_NO_MATCH = 1169;

const int ERROR_SET_NOT_FOUND = 1170;

const int ERROR_POINT_NOT_FOUND = 1171;

const int ERROR_NO_TRACKING_SERVICE = 1172;

const int ERROR_NO_VOLUME_ID = 1173;

const int ERROR_UNABLE_TO_REMOVE_REPLACED = 1175;

const int ERROR_UNABLE_TO_MOVE_REPLACEMENT = 1176;

const int ERROR_UNABLE_TO_MOVE_REPLACEMENT_2 = 1177;

const int ERROR_JOURNAL_DELETE_IN_PROGRESS = 1178;

const int ERROR_JOURNAL_NOT_ACTIVE = 1179;

const int ERROR_POTENTIAL_FILE_FOUND = 1180;

const int ERROR_JOURNAL_ENTRY_DELETED = 1181;

const int ERROR_SHUTDOWN_IS_SCHEDULED = 1190;

const int ERROR_SHUTDOWN_USERS_LOGGED_ON = 1191;

const int ERROR_BAD_DEVICE = 1200;

const int ERROR_CONNECTION_UNAVAIL = 1201;

const int ERROR_DEVICE_ALREADY_REMEMBERED = 1202;

const int ERROR_NO_NET_OR_BAD_PATH = 1203;

const int ERROR_BAD_PROVIDER = 1204;

const int ERROR_CANNOT_OPEN_PROFILE = 1205;

const int ERROR_BAD_PROFILE = 1206;

const int ERROR_NOT_CONTAINER = 1207;

const int ERROR_EXTENDED_ERROR = 1208;

const int ERROR_INVALID_GROUPNAME = 1209;

const int ERROR_INVALID_COMPUTERNAME = 1210;

const int ERROR_INVALID_EVENTNAME = 1211;

const int ERROR_INVALID_DOMAINNAME = 1212;

const int ERROR_INVALID_SERVICENAME = 1213;

const int ERROR_INVALID_NETNAME = 1214;

const int ERROR_INVALID_SHARENAME = 1215;

const int ERROR_INVALID_PASSWORDNAME = 1216;

const int ERROR_INVALID_MESSAGENAME = 1217;

const int ERROR_INVALID_MESSAGEDEST = 1218;

const int ERROR_SESSION_CREDENTIAL_CONFLICT = 1219;

const int ERROR_REMOTE_SESSION_LIMIT_EXCEEDED = 1220;

const int ERROR_DUP_DOMAINNAME = 1221;

const int ERROR_NO_NETWORK = 1222;

const int ERROR_CANCELLED = 1223;

const int ERROR_USER_MAPPED_FILE = 1224;

const int ERROR_CONNECTION_REFUSED = 1225;

const int ERROR_GRACEFUL_DISCONNECT = 1226;

const int ERROR_ADDRESS_ALREADY_ASSOCIATED = 1227;

const int ERROR_ADDRESS_NOT_ASSOCIATED = 1228;

const int ERROR_CONNECTION_INVALID = 1229;

const int ERROR_CONNECTION_ACTIVE = 1230;

const int ERROR_NETWORK_UNREACHABLE = 1231;

const int ERROR_HOST_UNREACHABLE = 1232;

const int ERROR_PROTOCOL_UNREACHABLE = 1233;

const int ERROR_PORT_UNREACHABLE = 1234;

const int ERROR_REQUEST_ABORTED = 1235;

const int ERROR_CONNECTION_ABORTED = 1236;

const int ERROR_RETRY = 1237;

const int ERROR_CONNECTION_COUNT_LIMIT = 1238;

const int ERROR_LOGIN_TIME_RESTRICTION = 1239;

const int ERROR_LOGIN_WKSTA_RESTRICTION = 1240;

const int ERROR_INCORRECT_ADDRESS = 1241;

const int ERROR_ALREADY_REGISTERED = 1242;

const int ERROR_SERVICE_NOT_FOUND = 1243;

const int ERROR_NOT_AUTHENTICATED = 1244;

const int ERROR_NOT_LOGGED_ON = 1245;

const int ERROR_CONTINUE = 1246;

const int ERROR_ALREADY_INITIALIZED = 1247;

const int ERROR_NO_MORE_DEVICES = 1248;

const int ERROR_NO_SUCH_SITE = 1249;

const int ERROR_DOMAIN_CONTROLLER_EXISTS = 1250;

const int ERROR_ONLY_IF_CONNECTED = 1251;

const int ERROR_OVERRIDE_NOCHANGES = 1252;

const int ERROR_BAD_USER_PROFILE = 1253;

const int ERROR_NOT_SUPPORTED_ON_SBS = 1254;

const int ERROR_SERVER_SHUTDOWN_IN_PROGRESS = 1255;

const int ERROR_HOST_DOWN = 1256;

const int ERROR_NON_ACCOUNT_SID = 1257;

const int ERROR_NON_DOMAIN_SID = 1258;

const int ERROR_APPHELP_BLOCK = 1259;

const int ERROR_ACCESS_DISABLED_BY_POLICY = 1260;

const int ERROR_REG_NAT_CONSUMPTION = 1261;

const int ERROR_CSCSHARE_OFFLINE = 1262;

const int ERROR_PKINIT_FAILURE = 1263;

const int ERROR_SMARTCARD_SUBSYSTEM_FAILURE = 1264;

const int ERROR_DOWNGRADE_DETECTED = 1265;

const int ERROR_MACHINE_LOCKED = 1271;

const int ERROR_SMB_GUEST_LOGON_BLOCKED = 1272;

const int ERROR_CALLBACK_SUPPLIED_INVALID_DATA = 1273;

const int ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED = 1274;

const int ERROR_DRIVER_BLOCKED = 1275;

const int ERROR_INVALID_IMPORT_OF_NON_DLL = 1276;

const int ERROR_ACCESS_DISABLED_WEBBLADE = 1277;

const int ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER = 1278;

const int ERROR_RECOVERY_FAILURE = 1279;

const int ERROR_ALREADY_FIBER = 1280;

const int ERROR_ALREADY_THREAD = 1281;

const int ERROR_STACK_BUFFER_OVERRUN = 1282;

const int ERROR_PARAMETER_QUOTA_EXCEEDED = 1283;

const int ERROR_DEBUGGER_INACTIVE = 1284;

const int ERROR_DELAY_LOAD_FAILED = 1285;

const int ERROR_VDM_DISALLOWED = 1286;

const int ERROR_UNIDENTIFIED_ERROR = 1287;

const int ERROR_INVALID_CRUNTIME_PARAMETER = 1288;

const int ERROR_BEYOND_VDL = 1289;

const int ERROR_INCOMPATIBLE_SERVICE_SID_TYPE = 1290;

const int ERROR_DRIVER_PROCESS_TERMINATED = 1291;

const int ERROR_IMPLEMENTATION_LIMIT = 1292;

const int ERROR_PROCESS_IS_PROTECTED = 1293;

const int ERROR_SERVICE_NOTIFY_CLIENT_LAGGING = 1294;

const int ERROR_DISK_QUOTA_EXCEEDED = 1295;

const int ERROR_CONTENT_BLOCKED = 1296;

const int ERROR_INCOMPATIBLE_SERVICE_PRIVILEGE = 1297;

const int ERROR_APP_HANG = 1298;

const int ERROR_INVALID_LABEL = 1299;

const int ERROR_NOT_ALL_ASSIGNED = 1300;

const int ERROR_SOME_NOT_MAPPED = 1301;

const int ERROR_NO_QUOTAS_FOR_ACCOUNT = 1302;

const int ERROR_LOCAL_USER_SESSION_KEY = 1303;

const int ERROR_NULL_LM_PASSWORD = 1304;

const int ERROR_UNKNOWN_REVISION = 1305;

const int ERROR_REVISION_MISMATCH = 1306;

const int ERROR_INVALID_OWNER = 1307;

const int ERROR_INVALID_PRIMARY_GROUP = 1308;

const int ERROR_NO_IMPERSONATION_TOKEN = 1309;

const int ERROR_CANT_DISABLE_MANDATORY = 1310;

const int ERROR_NO_LOGON_SERVERS = 1311;

const int ERROR_NO_SUCH_LOGON_SESSION = 1312;

const int ERROR_NO_SUCH_PRIVILEGE = 1313;

const int ERROR_PRIVILEGE_NOT_HELD = 1314;

const int ERROR_INVALID_ACCOUNT_NAME = 1315;

const int ERROR_USER_EXISTS = 1316;

const int ERROR_NO_SUCH_USER = 1317;

const int ERROR_GROUP_EXISTS = 1318;

const int ERROR_NO_SUCH_GROUP = 1319;

const int ERROR_MEMBER_IN_GROUP = 1320;

const int ERROR_MEMBER_NOT_IN_GROUP = 1321;

const int ERROR_LAST_ADMIN = 1322;

const int ERROR_WRONG_PASSWORD = 1323;

const int ERROR_ILL_FORMED_PASSWORD = 1324;

const int ERROR_PASSWORD_RESTRICTION = 1325;

const int ERROR_LOGON_FAILURE = 1326;

const int ERROR_ACCOUNT_RESTRICTION = 1327;

const int ERROR_INVALID_LOGON_HOURS = 1328;

const int ERROR_INVALID_WORKSTATION = 1329;

const int ERROR_PASSWORD_EXPIRED = 1330;

const int ERROR_ACCOUNT_DISABLED = 1331;

const int ERROR_NONE_MAPPED = 1332;

const int ERROR_TOO_MANY_LUIDS_REQUESTED = 1333;

const int ERROR_LUIDS_EXHAUSTED = 1334;

const int ERROR_INVALID_SUB_AUTHORITY = 1335;

const int ERROR_INVALID_ACL = 1336;

const int ERROR_INVALID_SID = 1337;

const int ERROR_INVALID_SECURITY_DESCR = 1338;

const int ERROR_BAD_INHERITANCE_ACL = 1340;

const int ERROR_SERVER_DISABLED = 1341;

const int ERROR_SERVER_NOT_DISABLED = 1342;

const int ERROR_INVALID_ID_AUTHORITY = 1343;

const int ERROR_ALLOTTED_SPACE_EXCEEDED = 1344;

const int ERROR_INVALID_GROUP_ATTRIBUTES = 1345;

const int ERROR_BAD_IMPERSONATION_LEVEL = 1346;

const int ERROR_CANT_OPEN_ANONYMOUS = 1347;

const int ERROR_BAD_VALIDATION_CLASS = 1348;

const int ERROR_BAD_TOKEN_TYPE = 1349;

const int ERROR_NO_SECURITY_ON_OBJECT = 1350;

const int ERROR_CANT_ACCESS_DOMAIN_INFO = 1351;

const int ERROR_INVALID_SERVER_STATE = 1352;

const int ERROR_INVALID_DOMAIN_STATE = 1353;

const int ERROR_INVALID_DOMAIN_ROLE = 1354;

const int ERROR_NO_SUCH_DOMAIN = 1355;

const int ERROR_DOMAIN_EXISTS = 1356;

const int ERROR_DOMAIN_LIMIT_EXCEEDED = 1357;

const int ERROR_INTERNAL_DB_CORRUPTION = 1358;

const int ERROR_INTERNAL_ERROR = 1359;

const int ERROR_GENERIC_NOT_MAPPED = 1360;

const int ERROR_BAD_DESCRIPTOR_FORMAT = 1361;

const int ERROR_NOT_LOGON_PROCESS = 1362;

const int ERROR_LOGON_SESSION_EXISTS = 1363;

const int ERROR_NO_SUCH_PACKAGE = 1364;

const int ERROR_BAD_LOGON_SESSION_STATE = 1365;

const int ERROR_LOGON_SESSION_COLLISION = 1366;

const int ERROR_INVALID_LOGON_TYPE = 1367;

const int ERROR_CANNOT_IMPERSONATE = 1368;

const int ERROR_RXACT_INVALID_STATE = 1369;

const int ERROR_RXACT_COMMIT_FAILURE = 1370;

const int ERROR_SPECIAL_ACCOUNT = 1371;

const int ERROR_SPECIAL_GROUP = 1372;

const int ERROR_SPECIAL_USER = 1373;

const int ERROR_MEMBERS_PRIMARY_GROUP = 1374;

const int ERROR_TOKEN_ALREADY_IN_USE = 1375;

const int ERROR_NO_SUCH_ALIAS = 1376;

const int ERROR_MEMBER_NOT_IN_ALIAS = 1377;

const int ERROR_MEMBER_IN_ALIAS = 1378;

const int ERROR_ALIAS_EXISTS = 1379;

const int ERROR_LOGON_NOT_GRANTED = 1380;

const int ERROR_TOO_MANY_SECRETS = 1381;

const int ERROR_SECRET_TOO_LONG = 1382;

const int ERROR_INTERNAL_DB_ERROR = 1383;

const int ERROR_TOO_MANY_CONTEXT_IDS = 1384;

const int ERROR_LOGON_TYPE_NOT_GRANTED = 1385;

const int ERROR_NT_CROSS_ENCRYPTION_REQUIRED = 1386;

const int ERROR_NO_SUCH_MEMBER = 1387;

const int ERROR_INVALID_MEMBER = 1388;

const int ERROR_TOO_MANY_SIDS = 1389;

const int ERROR_LM_CROSS_ENCRYPTION_REQUIRED = 1390;

const int ERROR_NO_INHERITANCE = 1391;

const int ERROR_FILE_CORRUPT = 1392;

const int ERROR_DISK_CORRUPT = 1393;

const int ERROR_NO_USER_SESSION_KEY = 1394;

const int ERROR_LICENSE_QUOTA_EXCEEDED = 1395;

const int ERROR_WRONG_TARGET_NAME = 1396;

const int ERROR_MUTUAL_AUTH_FAILED = 1397;

const int ERROR_TIME_SKEW = 1398;

const int ERROR_CURRENT_DOMAIN_NOT_ALLOWED = 1399;

const int ERROR_INVALID_WINDOW_HANDLE = 1400;

const int ERROR_INVALID_MENU_HANDLE = 1401;

const int ERROR_INVALID_CURSOR_HANDLE = 1402;

const int ERROR_INVALID_ACCEL_HANDLE = 1403;

const int ERROR_INVALID_HOOK_HANDLE = 1404;

const int ERROR_INVALID_DWP_HANDLE = 1405;

const int ERROR_TLW_WITH_WSCHILD = 1406;

const int ERROR_CANNOT_FIND_WND_CLASS = 1407;

const int ERROR_WINDOW_OF_OTHER_THREAD = 1408;

const int ERROR_HOTKEY_ALREADY_REGISTERED = 1409;

const int ERROR_CLASS_ALREADY_EXISTS = 1410;

const int ERROR_CLASS_DOES_NOT_EXIST = 1411;

const int ERROR_CLASS_HAS_WINDOWS = 1412;

const int ERROR_INVALID_INDEX = 1413;

const int ERROR_INVALID_ICON_HANDLE = 1414;

const int ERROR_PRIVATE_DIALOG_INDEX = 1415;

const int ERROR_LISTBOX_ID_NOT_FOUND = 1416;

const int ERROR_NO_WILDCARD_CHARACTERS = 1417;

const int ERROR_CLIPBOARD_NOT_OPEN = 1418;

const int ERROR_HOTKEY_NOT_REGISTERED = 1419;

const int ERROR_WINDOW_NOT_DIALOG = 1420;

const int ERROR_CONTROL_ID_NOT_FOUND = 1421;

const int ERROR_INVALID_COMBOBOX_MESSAGE = 1422;

const int ERROR_WINDOW_NOT_COMBOBOX = 1423;

const int ERROR_INVALID_EDIT_HEIGHT = 1424;

const int ERROR_DC_NOT_FOUND = 1425;

const int ERROR_INVALID_HOOK_FILTER = 1426;

const int ERROR_INVALID_FILTER_PROC = 1427;

const int ERROR_HOOK_NEEDS_HMOD = 1428;

const int ERROR_GLOBAL_ONLY_HOOK = 1429;

const int ERROR_JOURNAL_HOOK_SET = 1430;

const int ERROR_HOOK_NOT_INSTALLED = 1431;

const int ERROR_INVALID_LB_MESSAGE = 1432;

const int ERROR_SETCOUNT_ON_BAD_LB = 1433;

const int ERROR_LB_WITHOUT_TABSTOPS = 1434;

const int ERROR_DESTROY_OBJECT_OF_OTHER_THREAD = 1435;

const int ERROR_CHILD_WINDOW_MENU = 1436;

const int ERROR_NO_SYSTEM_MENU = 1437;

const int ERROR_INVALID_MSGBOX_STYLE = 1438;

const int ERROR_INVALID_SPI_VALUE = 1439;

const int ERROR_SCREEN_ALREADY_LOCKED = 1440;

const int ERROR_HWNDS_HAVE_DIFF_PARENT = 1441;

const int ERROR_NOT_CHILD_WINDOW = 1442;

const int ERROR_INVALID_GW_COMMAND = 1443;

const int ERROR_INVALID_THREAD_ID = 1444;

const int ERROR_NON_MDICHILD_WINDOW = 1445;

const int ERROR_POPUP_ALREADY_ACTIVE = 1446;

const int ERROR_NO_SCROLLBARS = 1447;

const int ERROR_INVALID_SCROLLBAR_RANGE = 1448;

const int ERROR_INVALID_SHOWWIN_COMMAND = 1449;

const int ERROR_NO_SYSTEM_RESOURCES = 1450;

const int ERROR_NONPAGED_SYSTEM_RESOURCES = 1451;

const int ERROR_PAGED_SYSTEM_RESOURCES = 1452;

const int ERROR_WORKING_SET_QUOTA = 1453;

const int ERROR_PAGEFILE_QUOTA = 1454;

const int ERROR_COMMITMENT_LIMIT = 1455;

const int ERROR_MENU_ITEM_NOT_FOUND = 1456;

const int ERROR_INVALID_KEYBOARD_HANDLE = 1457;

const int ERROR_HOOK_TYPE_NOT_ALLOWED = 1458;

const int ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION = 1459;

const int ERROR_TIMEOUT = 1460;

const int ERROR_INVALID_MONITOR_HANDLE = 1461;

const int ERROR_INCORRECT_SIZE = 1462;

const int ERROR_SYMLINK_CLASS_DISABLED = 1463;

const int ERROR_SYMLINK_NOT_SUPPORTED = 1464;

const int ERROR_XML_PARSE_ERROR = 1465;

const int ERROR_XMLDSIG_ERROR = 1466;

const int ERROR_RESTART_APPLICATION = 1467;

const int ERROR_WRONG_COMPARTMENT = 1468;

const int ERROR_AUTHIP_FAILURE = 1469;

const int ERROR_NO_NVRAM_RESOURCES = 1470;

const int ERROR_NOT_GUI_PROCESS = 1471;

const int ERROR_EVENTLOG_FILE_CORRUPT = 1500;

const int ERROR_EVENTLOG_CANT_START = 1501;

const int ERROR_LOG_FILE_FULL = 1502;

const int ERROR_EVENTLOG_FILE_CHANGED = 1503;

const int ERROR_CONTAINER_ASSIGNED = 1504;

const int ERROR_JOB_NO_CONTAINER = 1505;

const int ERROR_INVALID_TASK_NAME = 1550;

const int ERROR_INVALID_TASK_INDEX = 1551;

const int ERROR_THREAD_ALREADY_IN_TASK = 1552;

const int ERROR_INSTALL_SERVICE_FAILURE = 1601;

const int ERROR_INSTALL_USEREXIT = 1602;

const int ERROR_INSTALL_FAILURE = 1603;

const int ERROR_INSTALL_SUSPEND = 1604;

const int ERROR_UNKNOWN_PRODUCT = 1605;

const int ERROR_UNKNOWN_FEATURE = 1606;

const int ERROR_UNKNOWN_COMPONENT = 1607;

const int ERROR_UNKNOWN_PROPERTY = 1608;

const int ERROR_INVALID_HANDLE_STATE = 1609;

const int ERROR_BAD_CONFIGURATION = 1610;

const int ERROR_INDEX_ABSENT = 1611;

const int ERROR_INSTALL_SOURCE_ABSENT = 1612;

const int ERROR_INSTALL_PACKAGE_VERSION = 1613;

const int ERROR_PRODUCT_UNINSTALLED = 1614;

const int ERROR_BAD_QUERY_SYNTAX = 1615;

const int ERROR_INVALID_FIELD = 1616;

const int ERROR_DEVICE_REMOVED = 1617;

const int ERROR_INSTALL_ALREADY_RUNNING = 1618;

const int ERROR_INSTALL_PACKAGE_OPEN_FAILED = 1619;

const int ERROR_INSTALL_PACKAGE_INVALID = 1620;

const int ERROR_INSTALL_UI_FAILURE = 1621;

const int ERROR_INSTALL_LOG_FAILURE = 1622;

const int ERROR_INSTALL_LANGUAGE_UNSUPPORTED = 1623;

const int ERROR_INSTALL_TRANSFORM_FAILURE = 1624;

const int ERROR_INSTALL_PACKAGE_REJECTED = 1625;

const int ERROR_FUNCTION_NOT_CALLED = 1626;

const int ERROR_FUNCTION_FAILED = 1627;

const int ERROR_INVALID_TABLE = 1628;

const int ERROR_DATATYPE_MISMATCH = 1629;

const int ERROR_UNSUPPORTED_TYPE = 1630;

const int ERROR_CREATE_FAILED = 1631;

const int ERROR_INSTALL_TEMP_UNWRITABLE = 1632;

const int ERROR_INSTALL_PLATFORM_UNSUPPORTED = 1633;

const int ERROR_INSTALL_NOTUSED = 1634;

const int ERROR_PATCH_PACKAGE_OPEN_FAILED = 1635;

const int ERROR_PATCH_PACKAGE_INVALID = 1636;

const int ERROR_PATCH_PACKAGE_UNSUPPORTED = 1637;

const int ERROR_PRODUCT_VERSION = 1638;

const int ERROR_INVALID_COMMAND_LINE = 1639;

const int ERROR_INSTALL_REMOTE_DISALLOWED = 1640;

const int ERROR_SUCCESS_REBOOT_INITIATED = 1641;

const int ERROR_PATCH_TARGET_NOT_FOUND = 1642;

const int ERROR_PATCH_PACKAGE_REJECTED = 1643;

const int ERROR_INSTALL_TRANSFORM_REJECTED = 1644;

const int ERROR_INSTALL_REMOTE_PROHIBITED = 1645;

const int ERROR_PATCH_REMOVAL_UNSUPPORTED = 1646;

const int ERROR_UNKNOWN_PATCH = 1647;

const int ERROR_PATCH_NO_SEQUENCE = 1648;

const int ERROR_PATCH_REMOVAL_DISALLOWED = 1649;

const int ERROR_INVALID_PATCH_XML = 1650;

const int ERROR_PATCH_MANAGED_ADVERTISED_PRODUCT = 1651;

const int ERROR_INSTALL_SERVICE_SAFEBOOT = 1652;

const int ERROR_FAIL_FAST_EXCEPTION = 1653;

const int ERROR_INSTALL_REJECTED = 1654;

const int ERROR_DYNAMIC_CODE_BLOCKED = 1655;

const int ERROR_NOT_SAME_OBJECT = 1656;

const int ERROR_STRICT_CFG_VIOLATION = 1657;

const int ERROR_SET_CONTEXT_DENIED = 1660;

const int ERROR_CROSS_PARTITION_VIOLATION = 1661;

const int ERROR_RETURN_ADDRESS_HIJACK_ATTEMPT = 1662;

const int RPC_S_INVALID_STRING_BINDING = 1700;

const int RPC_S_WRONG_KIND_OF_BINDING = 1701;

const int RPC_S_INVALID_BINDING = 1702;

const int RPC_S_PROTSEQ_NOT_SUPPORTED = 1703;

const int RPC_S_INVALID_RPC_PROTSEQ = 1704;

const int RPC_S_INVALID_STRING_UUID = 1705;

const int RPC_S_INVALID_ENDPOINT_FORMAT = 1706;

const int RPC_S_INVALID_NET_ADDR = 1707;

const int RPC_S_NO_ENDPOINT_FOUND = 1708;

const int RPC_S_INVALID_TIMEOUT = 1709;

const int RPC_S_OBJECT_NOT_FOUND = 1710;

const int RPC_S_ALREADY_REGISTERED = 1711;

const int RPC_S_TYPE_ALREADY_REGISTERED = 1712;

const int RPC_S_ALREADY_LISTENING = 1713;

const int RPC_S_NO_PROTSEQS_REGISTERED = 1714;

const int RPC_S_NOT_LISTENING = 1715;

const int RPC_S_UNKNOWN_MGR_TYPE = 1716;

const int RPC_S_UNKNOWN_IF = 1717;

const int RPC_S_NO_BINDINGS = 1718;

const int RPC_S_NO_PROTSEQS = 1719;

const int RPC_S_CANT_CREATE_ENDPOINT = 1720;

const int RPC_S_OUT_OF_RESOURCES = 1721;

const int RPC_S_SERVER_UNAVAILABLE = 1722;

const int RPC_S_SERVER_TOO_BUSY = 1723;

const int RPC_S_INVALID_NETWORK_OPTIONS = 1724;

const int RPC_S_NO_CALL_ACTIVE = 1725;

const int RPC_S_CALL_FAILED = 1726;

const int RPC_S_CALL_FAILED_DNE = 1727;

const int RPC_S_PROTOCOL_ERROR = 1728;

const int RPC_S_PROXY_ACCESS_DENIED = 1729;

const int RPC_S_UNSUPPORTED_TRANS_SYN = 1730;

const int RPC_S_UNSUPPORTED_TYPE = 1732;

const int RPC_S_INVALID_TAG = 1733;

const int RPC_S_INVALID_BOUND = 1734;

const int RPC_S_NO_ENTRY_NAME = 1735;

const int RPC_S_INVALID_NAME_SYNTAX = 1736;

const int RPC_S_UNSUPPORTED_NAME_SYNTAX = 1737;

const int RPC_S_UUID_NO_ADDRESS = 1739;

const int RPC_S_DUPLICATE_ENDPOINT = 1740;

const int RPC_S_UNKNOWN_AUTHN_TYPE = 1741;

const int RPC_S_MAX_CALLS_TOO_SMALL = 1742;

const int RPC_S_STRING_TOO_LONG = 1743;

const int RPC_S_PROTSEQ_NOT_FOUND = 1744;

const int RPC_S_PROCNUM_OUT_OF_RANGE = 1745;

const int RPC_S_BINDING_HAS_NO_AUTH = 1746;

const int RPC_S_UNKNOWN_AUTHN_SERVICE = 1747;

const int RPC_S_UNKNOWN_AUTHN_LEVEL = 1748;

const int RPC_S_INVALID_AUTH_IDENTITY = 1749;

const int RPC_S_UNKNOWN_AUTHZ_SERVICE = 1750;

const int EPT_S_INVALID_ENTRY = 1751;

const int EPT_S_CANT_PERFORM_OP = 1752;

const int EPT_S_NOT_REGISTERED = 1753;

const int RPC_S_NOTHING_TO_EXPORT = 1754;

const int RPC_S_INCOMPLETE_NAME = 1755;

const int RPC_S_INVALID_VERS_OPTION = 1756;

const int RPC_S_NO_MORE_MEMBERS = 1757;

const int RPC_S_NOT_ALL_OBJS_UNEXPORTED = 1758;

const int RPC_S_INTERFACE_NOT_FOUND = 1759;

const int RPC_S_ENTRY_ALREADY_EXISTS = 1760;

const int RPC_S_ENTRY_NOT_FOUND = 1761;

const int RPC_S_NAME_SERVICE_UNAVAILABLE = 1762;

const int RPC_S_INVALID_NAF_ID = 1763;

const int RPC_S_CANNOT_SUPPORT = 1764;

const int RPC_S_NO_CONTEXT_AVAILABLE = 1765;

const int RPC_S_INTERNAL_ERROR = 1766;

const int RPC_S_ZERO_DIVIDE = 1767;

const int RPC_S_ADDRESS_ERROR = 1768;

const int RPC_S_FP_DIV_ZERO = 1769;

const int RPC_S_FP_UNDERFLOW = 1770;

const int RPC_S_FP_OVERFLOW = 1771;

const int RPC_X_NO_MORE_ENTRIES = 1772;

const int RPC_X_SS_CHAR_TRANS_OPEN_FAIL = 1773;

const int RPC_X_SS_CHAR_TRANS_SHORT_FILE = 1774;

const int RPC_X_SS_IN_NULL_CONTEXT = 1775;

const int RPC_X_SS_CONTEXT_DAMAGED = 1777;

const int RPC_X_SS_HANDLES_MISMATCH = 1778;

const int RPC_X_SS_CANNOT_GET_CALL_HANDLE = 1779;

const int RPC_X_NULL_REF_POINTER = 1780;

const int RPC_X_ENUM_VALUE_OUT_OF_RANGE = 1781;

const int RPC_X_BYTE_COUNT_TOO_SMALL = 1782;

const int RPC_X_BAD_STUB_DATA = 1783;

const int ERROR_INVALID_USER_BUFFER = 1784;

const int ERROR_UNRECOGNIZED_MEDIA = 1785;

const int ERROR_NO_TRUST_LSA_SECRET = 1786;

const int ERROR_NO_TRUST_SAM_ACCOUNT = 1787;

const int ERROR_TRUSTED_DOMAIN_FAILURE = 1788;

const int ERROR_TRUSTED_RELATIONSHIP_FAILURE = 1789;

const int ERROR_TRUST_FAILURE = 1790;

const int RPC_S_CALL_IN_PROGRESS = 1791;

const int ERROR_NETLOGON_NOT_STARTED = 1792;

const int ERROR_ACCOUNT_EXPIRED = 1793;

const int ERROR_REDIRECTOR_HAS_OPEN_HANDLES = 1794;

const int ERROR_PRINTER_DRIVER_ALREADY_INSTALLED = 1795;

const int ERROR_UNKNOWN_PORT = 1796;

const int ERROR_UNKNOWN_PRINTER_DRIVER = 1797;

const int ERROR_UNKNOWN_PRINTPROCESSOR = 1798;

const int ERROR_INVALID_SEPARATOR_FILE = 1799;

const int ERROR_INVALID_PRIORITY = 1800;

const int ERROR_INVALID_PRINTER_NAME = 1801;

const int ERROR_PRINTER_ALREADY_EXISTS = 1802;

const int ERROR_INVALID_PRINTER_COMMAND = 1803;

const int ERROR_INVALID_DATATYPE = 1804;

const int ERROR_INVALID_ENVIRONMENT = 1805;

const int RPC_S_NO_MORE_BINDINGS = 1806;

const int ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT = 1807;

const int ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT = 1808;

const int ERROR_NOLOGON_SERVER_TRUST_ACCOUNT = 1809;

const int ERROR_DOMAIN_TRUST_INCONSISTENT = 1810;

const int ERROR_SERVER_HAS_OPEN_HANDLES = 1811;

const int ERROR_RESOURCE_DATA_NOT_FOUND = 1812;

const int ERROR_RESOURCE_TYPE_NOT_FOUND = 1813;

const int ERROR_RESOURCE_NAME_NOT_FOUND = 1814;

const int ERROR_RESOURCE_LANG_NOT_FOUND = 1815;

const int ERROR_NOT_ENOUGH_QUOTA = 1816;

const int RPC_S_NO_INTERFACES = 1817;

const int RPC_S_CALL_CANCELLED = 1818;

const int RPC_S_BINDING_INCOMPLETE = 1819;

const int RPC_S_COMM_FAILURE = 1820;

const int RPC_S_UNSUPPORTED_AUTHN_LEVEL = 1821;

const int RPC_S_NO_PRINC_NAME = 1822;

const int RPC_S_NOT_RPC_ERROR = 1823;

const int RPC_S_UUID_LOCAL_ONLY = 1824;

const int RPC_S_SEC_PKG_ERROR = 1825;

const int RPC_S_NOT_CANCELLED = 1826;

const int RPC_X_INVALID_ES_ACTION = 1827;

const int RPC_X_WRONG_ES_VERSION = 1828;

const int RPC_X_WRONG_STUB_VERSION = 1829;

const int RPC_X_INVALID_PIPE_OBJECT = 1830;

const int RPC_X_WRONG_PIPE_ORDER = 1831;

const int RPC_X_WRONG_PIPE_VERSION = 1832;

const int RPC_S_COOKIE_AUTH_FAILED = 1833;

const int RPC_S_DO_NOT_DISTURB = 1834;

const int RPC_S_SYSTEM_HANDLE_COUNT_EXCEEDED = 1835;

const int RPC_S_SYSTEM_HANDLE_TYPE_MISMATCH = 1836;

const int RPC_S_GROUP_MEMBER_NOT_FOUND = 1898;

const int EPT_S_CANT_CREATE = 1899;

const int RPC_S_INVALID_OBJECT = 1900;

const int ERROR_INVALID_TIME = 1901;

const int ERROR_INVALID_FORM_NAME = 1902;

const int ERROR_INVALID_FORM_SIZE = 1903;

const int ERROR_ALREADY_WAITING = 1904;

const int ERROR_PRINTER_DELETED = 1905;

const int ERROR_INVALID_PRINTER_STATE = 1906;

const int ERROR_PASSWORD_MUST_CHANGE = 1907;

const int ERROR_DOMAIN_CONTROLLER_NOT_FOUND = 1908;

const int ERROR_ACCOUNT_LOCKED_OUT = 1909;

const int OR_INVALID_OXID = 1910;

const int OR_INVALID_OID = 1911;

const int OR_INVALID_SET = 1912;

const int RPC_S_SEND_INCOMPLETE = 1913;

const int RPC_S_INVALID_ASYNC_HANDLE = 1914;

const int RPC_S_INVALID_ASYNC_CALL = 1915;

const int RPC_X_PIPE_CLOSED = 1916;

const int RPC_X_PIPE_DISCIPLINE_ERROR = 1917;

const int RPC_X_PIPE_EMPTY = 1918;

const int ERROR_NO_SITENAME = 1919;

const int ERROR_CANT_ACCESS_FILE = 1920;

const int ERROR_CANT_RESOLVE_FILENAME = 1921;

const int RPC_S_ENTRY_TYPE_MISMATCH = 1922;

const int RPC_S_NOT_ALL_OBJS_EXPORTED = 1923;

const int RPC_S_INTERFACE_NOT_EXPORTED = 1924;

const int RPC_S_PROFILE_NOT_ADDED = 1925;

const int RPC_S_PRF_ELT_NOT_ADDED = 1926;

const int RPC_S_PRF_ELT_NOT_REMOVED = 1927;

const int RPC_S_GRP_ELT_NOT_ADDED = 1928;

const int RPC_S_GRP_ELT_NOT_REMOVED = 1929;

const int ERROR_KM_DRIVER_BLOCKED = 1930;

const int ERROR_CONTEXT_EXPIRED = 1931;

const int ERROR_PER_USER_TRUST_QUOTA_EXCEEDED = 1932;

const int ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED = 1933;

const int ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED = 1934;

const int ERROR_AUTHENTICATION_FIREWALL_FAILED = 1935;

const int ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED = 1936;

const int ERROR_NTLM_BLOCKED = 1937;

const int ERROR_PASSWORD_CHANGE_REQUIRED = 1938;

const int ERROR_LOST_MODE_LOGON_RESTRICTION = 1939;

const int ERROR_INVALID_PIXEL_FORMAT = 2000;

const int ERROR_BAD_DRIVER = 2001;

const int ERROR_INVALID_WINDOW_STYLE = 2002;

const int ERROR_METAFILE_NOT_SUPPORTED = 2003;

const int ERROR_TRANSFORM_NOT_SUPPORTED = 2004;

const int ERROR_CLIPPING_NOT_SUPPORTED = 2005;

const int ERROR_INVALID_CMM = 2010;

const int ERROR_INVALID_PROFILE = 2011;

const int ERROR_TAG_NOT_FOUND = 2012;

const int ERROR_TAG_NOT_PRESENT = 2013;

const int ERROR_DUPLICATE_TAG = 2014;

const int ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE = 2015;

const int ERROR_PROFILE_NOT_FOUND = 2016;

const int ERROR_INVALID_COLORSPACE = 2017;

const int ERROR_ICM_NOT_ENABLED = 2018;

const int ERROR_DELETING_ICM_XFORM = 2019;

const int ERROR_INVALID_TRANSFORM = 2020;

const int ERROR_COLORSPACE_MISMATCH = 2021;

const int ERROR_INVALID_COLORINDEX = 2022;

const int ERROR_PROFILE_DOES_NOT_MATCH_DEVICE = 2023;

const int ERROR_CONNECTED_OTHER_PASSWORD = 2108;

const int ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT = 2109;

const int ERROR_BAD_USERNAME = 2202;

const int ERROR_NOT_CONNECTED = 2250;

const int ERROR_OPEN_FILES = 2401;

const int ERROR_ACTIVE_CONNECTIONS = 2402;

const int ERROR_DEVICE_IN_USE = 2404;

const int ERROR_UNKNOWN_PRINT_MONITOR = 3000;

const int ERROR_PRINTER_DRIVER_IN_USE = 3001;

const int ERROR_SPOOL_FILE_NOT_FOUND = 3002;

const int ERROR_SPL_NO_STARTDOC = 3003;

const int ERROR_SPL_NO_ADDJOB = 3004;

const int ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED = 3005;

const int ERROR_PRINT_MONITOR_ALREADY_INSTALLED = 3006;

const int ERROR_INVALID_PRINT_MONITOR = 3007;

const int ERROR_PRINT_MONITOR_IN_USE = 3008;

const int ERROR_PRINTER_HAS_JOBS_QUEUED = 3009;

const int ERROR_SUCCESS_REBOOT_REQUIRED = 3010;

const int ERROR_SUCCESS_RESTART_REQUIRED = 3011;

const int ERROR_PRINTER_NOT_FOUND = 3012;

const int ERROR_PRINTER_DRIVER_WARNED = 3013;

const int ERROR_PRINTER_DRIVER_BLOCKED = 3014;

const int ERROR_PRINTER_DRIVER_PACKAGE_IN_USE = 3015;

const int ERROR_CORE_DRIVER_PACKAGE_NOT_FOUND = 3016;

const int ERROR_FAIL_REBOOT_REQUIRED = 3017;

const int ERROR_FAIL_REBOOT_INITIATED = 3018;

const int ERROR_PRINTER_DRIVER_DOWNLOAD_NEEDED = 3019;

const int ERROR_PRINT_JOB_RESTART_REQUIRED = 3020;

const int ERROR_INVALID_PRINTER_DRIVER_MANIFEST = 3021;

const int ERROR_PRINTER_NOT_SHAREABLE = 3022;

const int ERROR_REQUEST_PAUSED = 3050;

const int ERROR_APPEXEC_CONDITION_NOT_SATISFIED = 3060;

const int ERROR_APPEXEC_HANDLE_INVALIDATED = 3061;

const int ERROR_APPEXEC_INVALID_HOST_GENERATION = 3062;

const int ERROR_APPEXEC_UNEXPECTED_PROCESS_REGISTRATION = 3063;

const int ERROR_APPEXEC_INVALID_HOST_STATE = 3064;

const int ERROR_APPEXEC_NO_DONOR = 3065;

const int ERROR_APPEXEC_HOST_ID_MISMATCH = 3066;

const int ERROR_APPEXEC_UNKNOWN_USER = 3067;

const int ERROR_IO_REISSUE_AS_CACHED = 3950;

const int ERROR_WINS_INTERNAL = 4000;

const int ERROR_CAN_NOT_DEL_LOCAL_WINS = 4001;

const int ERROR_STATIC_INIT = 4002;

const int ERROR_INC_BACKUP = 4003;

const int ERROR_FULL_BACKUP = 4004;

const int ERROR_REC_NON_EXISTENT = 4005;

const int ERROR_RPL_NOT_ALLOWED = 4006;

const int PEERDIST_ERROR_CONTENTINFO_VERSION_UNSUPPORTED = 4050;

const int PEERDIST_ERROR_CANNOT_PARSE_CONTENTINFO = 4051;

const int PEERDIST_ERROR_MISSING_DATA = 4052;

const int PEERDIST_ERROR_NO_MORE = 4053;

const int PEERDIST_ERROR_NOT_INITIALIZED = 4054;

const int PEERDIST_ERROR_ALREADY_INITIALIZED = 4055;

const int PEERDIST_ERROR_SHUTDOWN_IN_PROGRESS = 4056;

const int PEERDIST_ERROR_INVALIDATED = 4057;

const int PEERDIST_ERROR_ALREADY_EXISTS = 4058;

const int PEERDIST_ERROR_OPERATION_NOTFOUND = 4059;

const int PEERDIST_ERROR_ALREADY_COMPLETED = 4060;

const int PEERDIST_ERROR_OUT_OF_BOUNDS = 4061;

const int PEERDIST_ERROR_VERSION_UNSUPPORTED = 4062;

const int PEERDIST_ERROR_INVALID_CONFIGURATION = 4063;

const int PEERDIST_ERROR_NOT_LICENSED = 4064;

const int PEERDIST_ERROR_SERVICE_UNAVAILABLE = 4065;

const int PEERDIST_ERROR_TRUST_FAILURE = 4066;

const int ERROR_DHCP_ADDRESS_CONFLICT = 4100;

const int ERROR_WMI_GUID_NOT_FOUND = 4200;

const int ERROR_WMI_INSTANCE_NOT_FOUND = 4201;

const int ERROR_WMI_ITEMID_NOT_FOUND = 4202;

const int ERROR_WMI_TRY_AGAIN = 4203;

const int ERROR_WMI_DP_NOT_FOUND = 4204;

const int ERROR_WMI_UNRESOLVED_INSTANCE_REF = 4205;

const int ERROR_WMI_ALREADY_ENABLED = 4206;

const int ERROR_WMI_GUID_DISCONNECTED = 4207;

const int ERROR_WMI_SERVER_UNAVAILABLE = 4208;

const int ERROR_WMI_DP_FAILED = 4209;

const int ERROR_WMI_INVALID_MOF = 4210;

const int ERROR_WMI_INVALID_REGINFO = 4211;

const int ERROR_WMI_ALREADY_DISABLED = 4212;

const int ERROR_WMI_READ_ONLY = 4213;

const int ERROR_WMI_SET_FAILURE = 4214;

const int ERROR_NOT_APPCONTAINER = 4250;

const int ERROR_APPCONTAINER_REQUIRED = 4251;

const int ERROR_NOT_SUPPORTED_IN_APPCONTAINER = 4252;

const int ERROR_INVALID_PACKAGE_SID_LENGTH = 4253;

const int ERROR_INVALID_MEDIA = 4300;

const int ERROR_INVALID_LIBRARY = 4301;

const int ERROR_INVALID_MEDIA_POOL = 4302;

const int ERROR_DRIVE_MEDIA_MISMATCH = 4303;

const int ERROR_MEDIA_OFFLINE = 4304;

const int ERROR_LIBRARY_OFFLINE = 4305;

const int ERROR_EMPTY = 4306;

const int ERROR_NOT_EMPTY = 4307;

const int ERROR_MEDIA_UNAVAILABLE = 4308;

const int ERROR_RESOURCE_DISABLED = 4309;

const int ERROR_INVALID_CLEANER = 4310;

const int ERROR_UNABLE_TO_CLEAN = 4311;

const int ERROR_OBJECT_NOT_FOUND = 4312;

const int ERROR_DATABASE_FAILURE = 4313;

const int ERROR_DATABASE_FULL = 4314;

const int ERROR_MEDIA_INCOMPATIBLE = 4315;

const int ERROR_RESOURCE_NOT_PRESENT = 4316;

const int ERROR_INVALID_OPERATION = 4317;

const int ERROR_MEDIA_NOT_AVAILABLE = 4318;

const int ERROR_DEVICE_NOT_AVAILABLE = 4319;

const int ERROR_REQUEST_REFUSED = 4320;

const int ERROR_INVALID_DRIVE_OBJECT = 4321;

const int ERROR_LIBRARY_FULL = 4322;

const int ERROR_MEDIUM_NOT_ACCESSIBLE = 4323;

const int ERROR_UNABLE_TO_LOAD_MEDIUM = 4324;

const int ERROR_UNABLE_TO_INVENTORY_DRIVE = 4325;

const int ERROR_UNABLE_TO_INVENTORY_SLOT = 4326;

const int ERROR_UNABLE_TO_INVENTORY_TRANSPORT = 4327;

const int ERROR_TRANSPORT_FULL = 4328;

const int ERROR_CONTROLLING_IEPORT = 4329;

const int ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA = 4330;

const int ERROR_CLEANER_SLOT_SET = 4331;

const int ERROR_CLEANER_SLOT_NOT_SET = 4332;

const int ERROR_CLEANER_CARTRIDGE_SPENT = 4333;

const int ERROR_UNEXPECTED_OMID = 4334;

const int ERROR_CANT_DELETE_LAST_ITEM = 4335;

const int ERROR_MESSAGE_EXCEEDS_MAX_SIZE = 4336;

const int ERROR_VOLUME_CONTAINS_SYS_FILES = 4337;

const int ERROR_INDIGENOUS_TYPE = 4338;

const int ERROR_NO_SUPPORTING_DRIVES = 4339;

const int ERROR_CLEANER_CARTRIDGE_INSTALLED = 4340;

const int ERROR_IEPORT_FULL = 4341;

const int ERROR_FILE_OFFLINE = 4350;

const int ERROR_REMOTE_STORAGE_NOT_ACTIVE = 4351;

const int ERROR_REMOTE_STORAGE_MEDIA_ERROR = 4352;

const int ERROR_NOT_A_REPARSE_POINT = 4390;

const int ERROR_REPARSE_ATTRIBUTE_CONFLICT = 4391;

const int ERROR_INVALID_REPARSE_DATA = 4392;

const int ERROR_REPARSE_TAG_INVALID = 4393;

const int ERROR_REPARSE_TAG_MISMATCH = 4394;

const int ERROR_REPARSE_POINT_ENCOUNTERED = 4395;

const int ERROR_APP_DATA_NOT_FOUND = 4400;

const int ERROR_APP_DATA_EXPIRED = 4401;

const int ERROR_APP_DATA_CORRUPT = 4402;

const int ERROR_APP_DATA_LIMIT_EXCEEDED = 4403;

const int ERROR_APP_DATA_REBOOT_REQUIRED = 4404;

const int ERROR_SECUREBOOT_ROLLBACK_DETECTED = 4420;

const int ERROR_SECUREBOOT_POLICY_VIOLATION = 4421;

const int ERROR_SECUREBOOT_INVALID_POLICY = 4422;

const int ERROR_SECUREBOOT_POLICY_PUBLISHER_NOT_FOUND = 4423;

const int ERROR_SECUREBOOT_POLICY_NOT_SIGNED = 4424;

const int ERROR_SECUREBOOT_NOT_ENABLED = 4425;

const int ERROR_SECUREBOOT_FILE_REPLACED = 4426;

const int ERROR_SECUREBOOT_POLICY_NOT_AUTHORIZED = 4427;

const int ERROR_SECUREBOOT_POLICY_UNKNOWN = 4428;

const int ERROR_SECUREBOOT_POLICY_MISSING_ANTIROLLBACKVERSION = 4429;

const int ERROR_SECUREBOOT_PLATFORM_ID_MISMATCH = 4430;

const int ERROR_SECUREBOOT_POLICY_ROLLBACK_DETECTED = 4431;

const int ERROR_SECUREBOOT_POLICY_UPGRADE_MISMATCH = 4432;

const int ERROR_SECUREBOOT_REQUIRED_POLICY_FILE_MISSING = 4433;

const int ERROR_SECUREBOOT_NOT_BASE_POLICY = 4434;

const int ERROR_SECUREBOOT_NOT_SUPPLEMENTAL_POLICY = 4435;

const int ERROR_OFFLOAD_READ_FLT_NOT_SUPPORTED = 4440;

const int ERROR_OFFLOAD_WRITE_FLT_NOT_SUPPORTED = 4441;

const int ERROR_OFFLOAD_READ_FILE_NOT_SUPPORTED = 4442;

const int ERROR_OFFLOAD_WRITE_FILE_NOT_SUPPORTED = 4443;

const int ERROR_ALREADY_HAS_STREAM_ID = 4444;

const int ERROR_SMR_GARBAGE_COLLECTION_REQUIRED = 4445;

const int ERROR_WOF_WIM_HEADER_CORRUPT = 4446;

const int ERROR_WOF_WIM_RESOURCE_TABLE_CORRUPT = 4447;

const int ERROR_WOF_FILE_RESOURCE_TABLE_CORRUPT = 4448;

const int ERROR_VOLUME_NOT_SIS_ENABLED = 4500;

const int ERROR_SYSTEM_INTEGRITY_ROLLBACK_DETECTED = 4550;

const int ERROR_SYSTEM_INTEGRITY_POLICY_VIOLATION = 4551;

const int ERROR_SYSTEM_INTEGRITY_INVALID_POLICY = 4552;

const int ERROR_SYSTEM_INTEGRITY_POLICY_NOT_SIGNED = 4553;

const int ERROR_SYSTEM_INTEGRITY_TOO_MANY_POLICIES = 4554;

const int ERROR_SYSTEM_INTEGRITY_SUPPLEMENTAL_POLICY_NOT_AUTHORIZED = 4555;

const int ERROR_VSM_NOT_INITIALIZED = 4560;

const int ERROR_VSM_DMA_PROTECTION_NOT_IN_USE = 4561;

const int ERROR_PLATFORM_MANIFEST_NOT_AUTHORIZED = 4570;

const int ERROR_PLATFORM_MANIFEST_INVALID = 4571;

const int ERROR_PLATFORM_MANIFEST_FILE_NOT_AUTHORIZED = 4572;

const int ERROR_PLATFORM_MANIFEST_CATALOG_NOT_AUTHORIZED = 4573;

const int ERROR_PLATFORM_MANIFEST_BINARY_ID_NOT_FOUND = 4574;

const int ERROR_PLATFORM_MANIFEST_NOT_ACTIVE = 4575;

const int ERROR_PLATFORM_MANIFEST_NOT_SIGNED = 4576;

const int ERROR_DEPENDENT_RESOURCE_EXISTS = 5001;

const int ERROR_DEPENDENCY_NOT_FOUND = 5002;

const int ERROR_DEPENDENCY_ALREADY_EXISTS = 5003;

const int ERROR_RESOURCE_NOT_ONLINE = 5004;

const int ERROR_HOST_NODE_NOT_AVAILABLE = 5005;

const int ERROR_RESOURCE_NOT_AVAILABLE = 5006;

const int ERROR_RESOURCE_NOT_FOUND = 5007;

const int ERROR_SHUTDOWN_CLUSTER = 5008;

const int ERROR_CANT_EVICT_ACTIVE_NODE = 5009;

const int ERROR_OBJECT_ALREADY_EXISTS = 5010;

const int ERROR_OBJECT_IN_LIST = 5011;

const int ERROR_GROUP_NOT_AVAILABLE = 5012;

const int ERROR_GROUP_NOT_FOUND = 5013;

const int ERROR_GROUP_NOT_ONLINE = 5014;

const int ERROR_HOST_NODE_NOT_RESOURCE_OWNER = 5015;

const int ERROR_HOST_NODE_NOT_GROUP_OWNER = 5016;

const int ERROR_RESMON_CREATE_FAILED = 5017;

const int ERROR_RESMON_ONLINE_FAILED = 5018;

const int ERROR_RESOURCE_ONLINE = 5019;

const int ERROR_QUORUM_RESOURCE = 5020;

const int ERROR_NOT_QUORUM_CAPABLE = 5021;

const int ERROR_CLUSTER_SHUTTING_DOWN = 5022;

const int ERROR_INVALID_STATE = 5023;

const int ERROR_RESOURCE_PROPERTIES_STORED = 5024;

const int ERROR_NOT_QUORUM_CLASS = 5025;

const int ERROR_CORE_RESOURCE = 5026;

const int ERROR_QUORUM_RESOURCE_ONLINE_FAILED = 5027;

const int ERROR_QUORUMLOG_OPEN_FAILED = 5028;

const int ERROR_CLUSTERLOG_CORRUPT = 5029;

const int ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE = 5030;

const int ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE = 5031;

const int ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND = 5032;

const int ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE = 5033;

const int ERROR_QUORUM_OWNER_ALIVE = 5034;

const int ERROR_NETWORK_NOT_AVAILABLE = 5035;

const int ERROR_NODE_NOT_AVAILABLE = 5036;

const int ERROR_ALL_NODES_NOT_AVAILABLE = 5037;

const int ERROR_RESOURCE_FAILED = 5038;

const int ERROR_CLUSTER_INVALID_NODE = 5039;

const int ERROR_CLUSTER_NODE_EXISTS = 5040;

const int ERROR_CLUSTER_JOIN_IN_PROGRESS = 5041;

const int ERROR_CLUSTER_NODE_NOT_FOUND = 5042;

const int ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND = 5043;

const int ERROR_CLUSTER_NETWORK_EXISTS = 5044;

const int ERROR_CLUSTER_NETWORK_NOT_FOUND = 5045;

const int ERROR_CLUSTER_NETINTERFACE_EXISTS = 5046;

const int ERROR_CLUSTER_NETINTERFACE_NOT_FOUND = 5047;

const int ERROR_CLUSTER_INVALID_REQUEST = 5048;

const int ERROR_CLUSTER_INVALID_NETWORK_PROVIDER = 5049;

const int ERROR_CLUSTER_NODE_DOWN = 5050;

const int ERROR_CLUSTER_NODE_UNREACHABLE = 5051;

const int ERROR_CLUSTER_NODE_NOT_MEMBER = 5052;

const int ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS = 5053;

const int ERROR_CLUSTER_INVALID_NETWORK = 5054;

const int ERROR_CLUSTER_NODE_UP = 5056;

const int ERROR_CLUSTER_IPADDR_IN_USE = 5057;

const int ERROR_CLUSTER_NODE_NOT_PAUSED = 5058;

const int ERROR_CLUSTER_NO_SECURITY_CONTEXT = 5059;

const int ERROR_CLUSTER_NETWORK_NOT_INTERNAL = 5060;

const int ERROR_CLUSTER_NODE_ALREADY_UP = 5061;

const int ERROR_CLUSTER_NODE_ALREADY_DOWN = 5062;

const int ERROR_CLUSTER_NETWORK_ALREADY_ONLINE = 5063;

const int ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE = 5064;

const int ERROR_CLUSTER_NODE_ALREADY_MEMBER = 5065;

const int ERROR_CLUSTER_LAST_INTERNAL_NETWORK = 5066;

const int ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS = 5067;

const int ERROR_INVALID_OPERATION_ON_QUORUM = 5068;

const int ERROR_DEPENDENCY_NOT_ALLOWED = 5069;

const int ERROR_CLUSTER_NODE_PAUSED = 5070;

const int ERROR_NODE_CANT_HOST_RESOURCE = 5071;

const int ERROR_CLUSTER_NODE_NOT_READY = 5072;

const int ERROR_CLUSTER_NODE_SHUTTING_DOWN = 5073;

const int ERROR_CLUSTER_JOIN_ABORTED = 5074;

const int ERROR_CLUSTER_INCOMPATIBLE_VERSIONS = 5075;

const int ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED = 5076;

const int ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED = 5077;

const int ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND = 5078;

const int ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED = 5079;

const int ERROR_CLUSTER_RESNAME_NOT_FOUND = 5080;

const int ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED = 5081;

const int ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST = 5082;

const int ERROR_CLUSTER_DATABASE_SEQMISMATCH = 5083;

const int ERROR_RESMON_INVALID_STATE = 5084;

const int ERROR_CLUSTER_GUM_NOT_LOCKER = 5085;

const int ERROR_QUORUM_DISK_NOT_FOUND = 5086;

const int ERROR_DATABASE_BACKUP_CORRUPT = 5087;

const int ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT = 5088;

const int ERROR_RESOURCE_PROPERTY_UNCHANGEABLE = 5089;

const int ERROR_NO_ADMIN_ACCESS_POINT = 5090;

const int ERROR_CLUSTER_MEMBERSHIP_INVALID_STATE = 5890;

const int ERROR_CLUSTER_QUORUMLOG_NOT_FOUND = 5891;

const int ERROR_CLUSTER_MEMBERSHIP_HALT = 5892;

const int ERROR_CLUSTER_INSTANCE_ID_MISMATCH = 5893;

const int ERROR_CLUSTER_NETWORK_NOT_FOUND_FOR_IP = 5894;

const int ERROR_CLUSTER_PROPERTY_DATA_TYPE_MISMATCH = 5895;

const int ERROR_CLUSTER_EVICT_WITHOUT_CLEANUP = 5896;

const int ERROR_CLUSTER_PARAMETER_MISMATCH = 5897;

const int ERROR_NODE_CANNOT_BE_CLUSTERED = 5898;

const int ERROR_CLUSTER_WRONG_OS_VERSION = 5899;

const int ERROR_CLUSTER_CANT_CREATE_DUP_CLUSTER_NAME = 5900;

const int ERROR_CLUSCFG_ALREADY_COMMITTED = 5901;

const int ERROR_CLUSCFG_ROLLBACK_FAILED = 5902;

const int ERROR_CLUSCFG_SYSTEM_DISK_DRIVE_LETTER_CONFLICT = 5903;

const int ERROR_CLUSTER_OLD_VERSION = 5904;

const int ERROR_CLUSTER_MISMATCHED_COMPUTER_ACCT_NAME = 5905;

const int ERROR_CLUSTER_NO_NET_ADAPTERS = 5906;

const int ERROR_CLUSTER_POISONED = 5907;

const int ERROR_CLUSTER_GROUP_MOVING = 5908;

const int ERROR_CLUSTER_RESOURCE_TYPE_BUSY = 5909;

const int ERROR_RESOURCE_CALL_TIMED_OUT = 5910;

const int ERROR_INVALID_CLUSTER_IPV6_ADDRESS = 5911;

const int ERROR_CLUSTER_INTERNAL_INVALID_FUNCTION = 5912;

const int ERROR_CLUSTER_PARAMETER_OUT_OF_BOUNDS = 5913;

const int ERROR_CLUSTER_PARTIAL_SEND = 5914;

const int ERROR_CLUSTER_REGISTRY_INVALID_FUNCTION = 5915;

const int ERROR_CLUSTER_INVALID_STRING_TERMINATION = 5916;

const int ERROR_CLUSTER_INVALID_STRING_FORMAT = 5917;

const int ERROR_CLUSTER_DATABASE_TRANSACTION_IN_PROGRESS = 5918;

const int ERROR_CLUSTER_DATABASE_TRANSACTION_NOT_IN_PROGRESS = 5919;

const int ERROR_CLUSTER_NULL_DATA = 5920;

const int ERROR_CLUSTER_PARTIAL_READ = 5921;

const int ERROR_CLUSTER_PARTIAL_WRITE = 5922;

const int ERROR_CLUSTER_CANT_DESERIALIZE_DATA = 5923;

const int ERROR_DEPENDENT_RESOURCE_PROPERTY_CONFLICT = 5924;

const int ERROR_CLUSTER_NO_QUORUM = 5925;

const int ERROR_CLUSTER_INVALID_IPV6_NETWORK = 5926;

const int ERROR_CLUSTER_INVALID_IPV6_TUNNEL_NETWORK = 5927;

const int ERROR_QUORUM_NOT_ALLOWED_IN_THIS_GROUP = 5928;

const int ERROR_DEPENDENCY_TREE_TOO_COMPLEX = 5929;

const int ERROR_EXCEPTION_IN_RESOURCE_CALL = 5930;

const int ERROR_CLUSTER_RHS_FAILED_INITIALIZATION = 5931;

const int ERROR_CLUSTER_NOT_INSTALLED = 5932;

const int ERROR_CLUSTER_RESOURCES_MUST_BE_ONLINE_ON_THE_SAME_NODE = 5933;

const int ERROR_CLUSTER_MAX_NODES_IN_CLUSTER = 5934;

const int ERROR_CLUSTER_TOO_MANY_NODES = 5935;

const int ERROR_CLUSTER_OBJECT_ALREADY_USED = 5936;

const int ERROR_NONCORE_GROUPS_FOUND = 5937;

const int ERROR_FILE_SHARE_RESOURCE_CONFLICT = 5938;

const int ERROR_CLUSTER_EVICT_INVALID_REQUEST = 5939;

const int ERROR_CLUSTER_SINGLETON_RESOURCE = 5940;

const int ERROR_CLUSTER_GROUP_SINGLETON_RESOURCE = 5941;

const int ERROR_CLUSTER_RESOURCE_PROVIDER_FAILED = 5942;

const int ERROR_CLUSTER_RESOURCE_CONFIGURATION_ERROR = 5943;

const int ERROR_CLUSTER_GROUP_BUSY = 5944;

const int ERROR_CLUSTER_NOT_SHARED_VOLUME = 5945;

const int ERROR_CLUSTER_INVALID_SECURITY_DESCRIPTOR = 5946;

const int ERROR_CLUSTER_SHARED_VOLUMES_IN_USE = 5947;

const int ERROR_CLUSTER_USE_SHARED_VOLUMES_API = 5948;

const int ERROR_CLUSTER_BACKUP_IN_PROGRESS = 5949;

const int ERROR_NON_CSV_PATH = 5950;

const int ERROR_CSV_VOLUME_NOT_LOCAL = 5951;

const int ERROR_CLUSTER_WATCHDOG_TERMINATING = 5952;

const int ERROR_CLUSTER_RESOURCE_VETOED_MOVE_INCOMPATIBLE_NODES = 5953;

const int ERROR_CLUSTER_INVALID_NODE_WEIGHT = 5954;

const int ERROR_CLUSTER_RESOURCE_VETOED_CALL = 5955;

const int ERROR_RESMON_SYSTEM_RESOURCES_LACKING = 5956;

const int
    ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_DESTINATION =
    5957;

const int ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_SOURCE =
    5958;

const int ERROR_CLUSTER_GROUP_QUEUED = 5959;

const int ERROR_CLUSTER_RESOURCE_LOCKED_STATUS = 5960;

const int ERROR_CLUSTER_SHARED_VOLUME_FAILOVER_NOT_ALLOWED = 5961;

const int ERROR_CLUSTER_NODE_DRAIN_IN_PROGRESS = 5962;

const int ERROR_CLUSTER_DISK_NOT_CONNECTED = 5963;

const int ERROR_DISK_NOT_CSV_CAPABLE = 5964;

const int ERROR_RESOURCE_NOT_IN_AVAILABLE_STORAGE = 5965;

const int ERROR_CLUSTER_SHARED_VOLUME_REDIRECTED = 5966;

const int ERROR_CLUSTER_SHARED_VOLUME_NOT_REDIRECTED = 5967;

const int ERROR_CLUSTER_CANNOT_RETURN_PROPERTIES = 5968;

const int
    ERROR_CLUSTER_RESOURCE_CONTAINS_UNSUPPORTED_DIFF_AREA_FOR_SHARED_VOLUMES =
    5969;

const int ERROR_CLUSTER_RESOURCE_IS_IN_MAINTENANCE_MODE = 5970;

const int ERROR_CLUSTER_AFFINITY_CONFLICT = 5971;

const int ERROR_CLUSTER_RESOURCE_IS_REPLICA_VIRTUAL_MACHINE = 5972;

const int ERROR_CLUSTER_UPGRADE_INCOMPATIBLE_VERSIONS = 5973;

const int ERROR_CLUSTER_UPGRADE_FIX_QUORUM_NOT_SUPPORTED = 5974;

const int ERROR_CLUSTER_UPGRADE_RESTART_REQUIRED = 5975;

const int ERROR_CLUSTER_UPGRADE_IN_PROGRESS = 5976;

const int ERROR_CLUSTER_UPGRADE_INCOMPLETE = 5977;

const int ERROR_CLUSTER_NODE_IN_GRACE_PERIOD = 5978;

const int ERROR_CLUSTER_CSV_IO_PAUSE_TIMEOUT = 5979;

const int ERROR_NODE_NOT_ACTIVE_CLUSTER_MEMBER = 5980;

const int ERROR_CLUSTER_RESOURCE_NOT_MONITORED = 5981;

const int ERROR_CLUSTER_RESOURCE_DOES_NOT_SUPPORT_UNMONITORED = 5982;

const int ERROR_CLUSTER_RESOURCE_IS_REPLICATED = 5983;

const int ERROR_CLUSTER_NODE_ISOLATED = 5984;

const int ERROR_CLUSTER_NODE_QUARANTINED = 5985;

const int ERROR_CLUSTER_DATABASE_UPDATE_CONDITION_FAILED = 5986;

const int ERROR_CLUSTER_SPACE_DEGRADED = 5987;

const int ERROR_CLUSTER_TOKEN_DELEGATION_NOT_SUPPORTED = 5988;

const int ERROR_CLUSTER_CSV_INVALID_HANDLE = 5989;

const int ERROR_CLUSTER_CSV_SUPPORTED_ONLY_ON_COORDINATOR = 5990;

const int ERROR_GROUPSET_NOT_AVAILABLE = 5991;

const int ERROR_GROUPSET_NOT_FOUND = 5992;

const int ERROR_GROUPSET_CANT_PROVIDE = 5993;

const int ERROR_CLUSTER_FAULT_DOMAIN_PARENT_NOT_FOUND = 5994;

const int ERROR_CLUSTER_FAULT_DOMAIN_INVALID_HIERARCHY = 5995;

const int ERROR_CLUSTER_FAULT_DOMAIN_FAILED_S2D_VALIDATION = 5996;

const int ERROR_CLUSTER_FAULT_DOMAIN_S2D_CONNECTIVITY_LOSS = 5997;

const int ERROR_CLUSTER_INVALID_INFRASTRUCTURE_FILESERVER_NAME = 5998;

const int ERROR_CLUSTERSET_MANAGEMENT_CLUSTER_UNREACHABLE = 5999;

const int ERROR_ENCRYPTION_FAILED = 6000;

const int ERROR_DECRYPTION_FAILED = 6001;

const int ERROR_FILE_ENCRYPTED = 6002;

const int ERROR_NO_RECOVERY_POLICY = 6003;

const int ERROR_NO_EFS = 6004;

const int ERROR_WRONG_EFS = 6005;

const int ERROR_NO_USER_KEYS = 6006;

const int ERROR_FILE_NOT_ENCRYPTED = 6007;

const int ERROR_NOT_EXPORT_FORMAT = 6008;

const int ERROR_FILE_READ_ONLY = 6009;

const int ERROR_DIR_EFS_DISALLOWED = 6010;

const int ERROR_EFS_SERVER_NOT_TRUSTED = 6011;

const int ERROR_BAD_RECOVERY_POLICY = 6012;

const int ERROR_EFS_ALG_BLOB_TOO_BIG = 6013;

const int ERROR_VOLUME_NOT_SUPPORT_EFS = 6014;

const int ERROR_EFS_DISABLED = 6015;

const int ERROR_EFS_VERSION_NOT_SUPPORT = 6016;

const int ERROR_CS_ENCRYPTION_INVALID_SERVER_RESPONSE = 6017;

const int ERROR_CS_ENCRYPTION_UNSUPPORTED_SERVER = 6018;

const int ERROR_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE = 6019;

const int ERROR_CS_ENCRYPTION_NEW_ENCRYPTED_FILE = 6020;

const int ERROR_CS_ENCRYPTION_FILE_NOT_CSE = 6021;

const int ERROR_ENCRYPTION_POLICY_DENIES_OPERATION = 6022;

const int ERROR_WIP_ENCRYPTION_FAILED = 6023;

const int ERROR_NO_BROWSER_SERVERS_FOUND = 6118;

const int SCHED_E_SERVICE_NOT_LOCALSYSTEM = 6200;

const int ERROR_CLUSTER_OBJECT_IS_CLUSTER_SET_VM = 6250;

const int ERROR_LOG_SECTOR_INVALID = 6600;

const int ERROR_LOG_SECTOR_PARITY_INVALID = 6601;

const int ERROR_LOG_SECTOR_REMAPPED = 6602;

const int ERROR_LOG_BLOCK_INCOMPLETE = 6603;

const int ERROR_LOG_INVALID_RANGE = 6604;

const int ERROR_LOG_BLOCKS_EXHAUSTED = 6605;

const int ERROR_LOG_READ_CONTEXT_INVALID = 6606;

const int ERROR_LOG_RESTART_INVALID = 6607;

const int ERROR_LOG_BLOCK_VERSION = 6608;

const int ERROR_LOG_BLOCK_INVALID = 6609;

const int ERROR_LOG_READ_MODE_INVALID = 6610;

const int ERROR_LOG_NO_RESTART = 6611;

const int ERROR_LOG_METADATA_CORRUPT = 6612;

const int ERROR_LOG_METADATA_INVALID = 6613;

const int ERROR_LOG_METADATA_INCONSISTENT = 6614;

const int ERROR_LOG_RESERVATION_INVALID = 6615;

const int ERROR_LOG_CANT_DELETE = 6616;

const int ERROR_LOG_CONTAINER_LIMIT_EXCEEDED = 6617;

const int ERROR_LOG_START_OF_LOG = 6618;

const int ERROR_LOG_POLICY_ALREADY_INSTALLED = 6619;

const int ERROR_LOG_POLICY_NOT_INSTALLED = 6620;

const int ERROR_LOG_POLICY_INVALID = 6621;

const int ERROR_LOG_POLICY_CONFLICT = 6622;

const int ERROR_LOG_PINNED_ARCHIVE_TAIL = 6623;

const int ERROR_LOG_RECORD_NONEXISTENT = 6624;

const int ERROR_LOG_RECORDS_RESERVED_INVALID = 6625;

const int ERROR_LOG_SPACE_RESERVED_INVALID = 6626;

const int ERROR_LOG_TAIL_INVALID = 6627;

const int ERROR_LOG_FULL = 6628;

const int ERROR_COULD_NOT_RESIZE_LOG = 6629;

const int ERROR_LOG_MULTIPLEXED = 6630;

const int ERROR_LOG_DEDICATED = 6631;

const int ERROR_LOG_ARCHIVE_NOT_IN_PROGRESS = 6632;

const int ERROR_LOG_ARCHIVE_IN_PROGRESS = 6633;

const int ERROR_LOG_EPHEMERAL = 6634;

const int ERROR_LOG_NOT_ENOUGH_CONTAINERS = 6635;

const int ERROR_LOG_CLIENT_ALREADY_REGISTERED = 6636;

const int ERROR_LOG_CLIENT_NOT_REGISTERED = 6637;

const int ERROR_LOG_FULL_HANDLER_IN_PROGRESS = 6638;

const int ERROR_LOG_CONTAINER_READ_FAILED = 6639;

const int ERROR_LOG_CONTAINER_WRITE_FAILED = 6640;

const int ERROR_LOG_CONTAINER_OPEN_FAILED = 6641;

const int ERROR_LOG_CONTAINER_STATE_INVALID = 6642;

const int ERROR_LOG_STATE_INVALID = 6643;

const int ERROR_LOG_PINNED = 6644;

const int ERROR_LOG_METADATA_FLUSH_FAILED = 6645;

const int ERROR_LOG_INCONSISTENT_SECURITY = 6646;

const int ERROR_LOG_APPENDED_FLUSH_FAILED = 6647;

const int ERROR_LOG_PINNED_RESERVATION = 6648;

const int ERROR_INVALID_TRANSACTION = 6700;

const int ERROR_TRANSACTION_NOT_ACTIVE = 6701;

const int ERROR_TRANSACTION_REQUEST_NOT_VALID = 6702;

const int ERROR_TRANSACTION_NOT_REQUESTED = 6703;

const int ERROR_TRANSACTION_ALREADY_ABORTED = 6704;

const int ERROR_TRANSACTION_ALREADY_COMMITTED = 6705;

const int ERROR_TM_INITIALIZATION_FAILED = 6706;

const int ERROR_RESOURCEMANAGER_READ_ONLY = 6707;

const int ERROR_TRANSACTION_NOT_JOINED = 6708;

const int ERROR_TRANSACTION_SUPERIOR_EXISTS = 6709;

const int ERROR_CRM_PROTOCOL_ALREADY_EXISTS = 6710;

const int ERROR_TRANSACTION_PROPAGATION_FAILED = 6711;

const int ERROR_CRM_PROTOCOL_NOT_FOUND = 6712;

const int ERROR_TRANSACTION_INVALID_MARSHALL_BUFFER = 6713;

const int ERROR_CURRENT_TRANSACTION_NOT_VALID = 6714;

const int ERROR_TRANSACTION_NOT_FOUND = 6715;

const int ERROR_RESOURCEMANAGER_NOT_FOUND = 6716;

const int ERROR_ENLISTMENT_NOT_FOUND = 6717;

const int ERROR_TRANSACTIONMANAGER_NOT_FOUND = 6718;

const int ERROR_TRANSACTIONMANAGER_NOT_ONLINE = 6719;

const int ERROR_TRANSACTIONMANAGER_RECOVERY_NAME_COLLISION = 6720;

const int ERROR_TRANSACTION_NOT_ROOT = 6721;

const int ERROR_TRANSACTION_OBJECT_EXPIRED = 6722;

const int ERROR_TRANSACTION_RESPONSE_NOT_ENLISTED = 6723;

const int ERROR_TRANSACTION_RECORD_TOO_LONG = 6724;

const int ERROR_IMPLICIT_TRANSACTION_NOT_SUPPORTED = 6725;

const int ERROR_TRANSACTION_INTEGRITY_VIOLATED = 6726;

const int ERROR_TRANSACTIONMANAGER_IDENTITY_MISMATCH = 6727;

const int ERROR_RM_CANNOT_BE_FROZEN_FOR_SNAPSHOT = 6728;

const int ERROR_TRANSACTION_MUST_WRITETHROUGH = 6729;

const int ERROR_TRANSACTION_NO_SUPERIOR = 6730;

const int ERROR_HEURISTIC_DAMAGE_POSSIBLE = 6731;

const int ERROR_TRANSACTIONAL_CONFLICT = 6800;

const int ERROR_RM_NOT_ACTIVE = 6801;

const int ERROR_RM_METADATA_CORRUPT = 6802;

const int ERROR_DIRECTORY_NOT_RM = 6803;

const int ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE = 6805;

const int ERROR_LOG_RESIZE_INVALID_SIZE = 6806;

const int ERROR_OBJECT_NO_LONGER_EXISTS = 6807;

const int ERROR_STREAM_MINIVERSION_NOT_FOUND = 6808;

const int ERROR_STREAM_MINIVERSION_NOT_VALID = 6809;

const int ERROR_MINIVERSION_INACCESSIBLE_FROM_SPECIFIED_TRANSACTION = 6810;

const int ERROR_CANT_OPEN_MINIVERSION_WITH_MODIFY_INTENT = 6811;

const int ERROR_CANT_CREATE_MORE_STREAM_MINIVERSIONS = 6812;

const int ERROR_REMOTE_FILE_VERSION_MISMATCH = 6814;

const int ERROR_HANDLE_NO_LONGER_VALID = 6815;

const int ERROR_NO_TXF_METADATA = 6816;

const int ERROR_LOG_CORRUPTION_DETECTED = 6817;

const int ERROR_CANT_RECOVER_WITH_HANDLE_OPEN = 6818;

const int ERROR_RM_DISCONNECTED = 6819;

const int ERROR_ENLISTMENT_NOT_SUPERIOR = 6820;

const int ERROR_RECOVERY_NOT_NEEDED = 6821;

const int ERROR_RM_ALREADY_STARTED = 6822;

const int ERROR_FILE_IDENTITY_NOT_PERSISTENT = 6823;

const int ERROR_CANT_BREAK_TRANSACTIONAL_DEPENDENCY = 6824;

const int ERROR_CANT_CROSS_RM_BOUNDARY = 6825;

const int ERROR_TXF_DIR_NOT_EMPTY = 6826;

const int ERROR_INDOUBT_TRANSACTIONS_EXIST = 6827;

const int ERROR_TM_VOLATILE = 6828;

const int ERROR_ROLLBACK_TIMER_EXPIRED = 6829;

const int ERROR_TXF_ATTRIBUTE_CORRUPT = 6830;

const int ERROR_EFS_NOT_ALLOWED_IN_TRANSACTION = 6831;

const int ERROR_TRANSACTIONAL_OPEN_NOT_ALLOWED = 6832;

const int ERROR_LOG_GROWTH_FAILED = 6833;

const int ERROR_TRANSACTED_MAPPING_UNSUPPORTED_REMOTE = 6834;

const int ERROR_TXF_METADATA_ALREADY_PRESENT = 6835;

const int ERROR_TRANSACTION_SCOPE_CALLBACKS_NOT_SET = 6836;

const int ERROR_TRANSACTION_REQUIRED_PROMOTION = 6837;

const int ERROR_CANNOT_EXECUTE_FILE_IN_TRANSACTION = 6838;

const int ERROR_TRANSACTIONS_NOT_FROZEN = 6839;

const int ERROR_TRANSACTION_FREEZE_IN_PROGRESS = 6840;

const int ERROR_NOT_SNAPSHOT_VOLUME = 6841;

const int ERROR_NO_SAVEPOINT_WITH_OPEN_FILES = 6842;

const int ERROR_DATA_LOST_REPAIR = 6843;

const int ERROR_SPARSE_NOT_ALLOWED_IN_TRANSACTION = 6844;

const int ERROR_TM_IDENTITY_MISMATCH = 6845;

const int ERROR_FLOATED_SECTION = 6846;

const int ERROR_CANNOT_ACCEPT_TRANSACTED_WORK = 6847;

const int ERROR_CANNOT_ABORT_TRANSACTIONS = 6848;

const int ERROR_BAD_CLUSTERS = 6849;

const int ERROR_COMPRESSION_NOT_ALLOWED_IN_TRANSACTION = 6850;

const int ERROR_VOLUME_DIRTY = 6851;

const int ERROR_NO_LINK_TRACKING_IN_TRANSACTION = 6852;

const int ERROR_OPERATION_NOT_SUPPORTED_IN_TRANSACTION = 6853;

const int ERROR_EXPIRED_HANDLE = 6854;

const int ERROR_TRANSACTION_NOT_ENLISTED = 6855;

const int ERROR_CTX_WINSTATION_NAME_INVALID = 7001;

const int ERROR_CTX_INVALID_PD = 7002;

const int ERROR_CTX_PD_NOT_FOUND = 7003;

const int ERROR_CTX_WD_NOT_FOUND = 7004;

const int ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY = 7005;

const int ERROR_CTX_SERVICE_NAME_COLLISION = 7006;

const int ERROR_CTX_CLOSE_PENDING = 7007;

const int ERROR_CTX_NO_OUTBUF = 7008;

const int ERROR_CTX_MODEM_INF_NOT_FOUND = 7009;

const int ERROR_CTX_INVALID_MODEMNAME = 7010;

const int ERROR_CTX_MODEM_RESPONSE_ERROR = 7011;

const int ERROR_CTX_MODEM_RESPONSE_TIMEOUT = 7012;

const int ERROR_CTX_MODEM_RESPONSE_NO_CARRIER = 7013;

const int ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE = 7014;

const int ERROR_CTX_MODEM_RESPONSE_BUSY = 7015;

const int ERROR_CTX_MODEM_RESPONSE_VOICE = 7016;

const int ERROR_CTX_TD_ERROR = 7017;

const int ERROR_CTX_WINSTATION_NOT_FOUND = 7022;

const int ERROR_CTX_WINSTATION_ALREADY_EXISTS = 7023;

const int ERROR_CTX_WINSTATION_BUSY = 7024;

const int ERROR_CTX_BAD_VIDEO_MODE = 7025;

const int ERROR_CTX_GRAPHICS_INVALID = 7035;

const int ERROR_CTX_LOGON_DISABLED = 7037;

const int ERROR_CTX_NOT_CONSOLE = 7038;

const int ERROR_CTX_CLIENT_QUERY_TIMEOUT = 7040;

const int ERROR_CTX_CONSOLE_DISCONNECT = 7041;

const int ERROR_CTX_CONSOLE_CONNECT = 7042;

const int ERROR_CTX_SHADOW_DENIED = 7044;

const int ERROR_CTX_WINSTATION_ACCESS_DENIED = 7045;

const int ERROR_CTX_INVALID_WD = 7049;

const int ERROR_CTX_SHADOW_INVALID = 7050;

const int ERROR_CTX_SHADOW_DISABLED = 7051;

const int ERROR_CTX_CLIENT_LICENSE_IN_USE = 7052;

const int ERROR_CTX_CLIENT_LICENSE_NOT_SET = 7053;

const int ERROR_CTX_LICENSE_NOT_AVAILABLE = 7054;

const int ERROR_CTX_LICENSE_CLIENT_INVALID = 7055;

const int ERROR_CTX_LICENSE_EXPIRED = 7056;

const int ERROR_CTX_SHADOW_NOT_RUNNING = 7057;

const int ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE = 7058;

const int ERROR_ACTIVATION_COUNT_EXCEEDED = 7059;

const int ERROR_CTX_WINSTATIONS_DISABLED = 7060;

const int ERROR_CTX_ENCRYPTION_LEVEL_REQUIRED = 7061;

const int ERROR_CTX_SESSION_IN_USE = 7062;

const int ERROR_CTX_NO_FORCE_LOGOFF = 7063;

const int ERROR_CTX_ACCOUNT_RESTRICTION = 7064;

const int ERROR_RDP_PROTOCOL_ERROR = 7065;

const int ERROR_CTX_CDM_CONNECT = 7066;

const int ERROR_CTX_CDM_DISCONNECT = 7067;

const int ERROR_CTX_SECURITY_LAYER_ERROR = 7068;

const int ERROR_TS_INCOMPATIBLE_SESSIONS = 7069;

const int ERROR_TS_VIDEO_SUBSYSTEM_ERROR = 7070;

const int FRS_ERR_INVALID_API_SEQUENCE = 8001;

const int FRS_ERR_STARTING_SERVICE = 8002;

const int FRS_ERR_STOPPING_SERVICE = 8003;

const int FRS_ERR_INTERNAL_API = 8004;

const int FRS_ERR_INTERNAL = 8005;

const int FRS_ERR_SERVICE_COMM = 8006;

const int FRS_ERR_INSUFFICIENT_PRIV = 8007;

const int FRS_ERR_AUTHENTICATION = 8008;

const int FRS_ERR_PARENT_INSUFFICIENT_PRIV = 8009;

const int FRS_ERR_PARENT_AUTHENTICATION = 8010;

const int FRS_ERR_CHILD_TO_PARENT_COMM = 8011;

const int FRS_ERR_PARENT_TO_CHILD_COMM = 8012;

const int FRS_ERR_SYSVOL_POPULATE = 8013;

const int FRS_ERR_SYSVOL_POPULATE_TIMEOUT = 8014;

const int FRS_ERR_SYSVOL_IS_BUSY = 8015;

const int FRS_ERR_SYSVOL_DEMOTE = 8016;

const int FRS_ERR_INVALID_SERVICE_PARAMETER = 8017;

const int DS_S_SUCCESS = 0;

const int ERROR_DS_NOT_INSTALLED = 8200;

const int ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY = 8201;

const int ERROR_DS_NO_ATTRIBUTE_OR_VALUE = 8202;

const int ERROR_DS_INVALID_ATTRIBUTE_SYNTAX = 8203;

const int ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED = 8204;

const int ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS = 8205;

const int ERROR_DS_BUSY = 8206;

const int ERROR_DS_UNAVAILABLE = 8207;

const int ERROR_DS_NO_RIDS_ALLOCATED = 8208;

const int ERROR_DS_NO_MORE_RIDS = 8209;

const int ERROR_DS_INCORRECT_ROLE_OWNER = 8210;

const int ERROR_DS_RIDMGR_INIT_ERROR = 8211;

const int ERROR_DS_OBJ_CLASS_VIOLATION = 8212;

const int ERROR_DS_CANT_ON_NON_LEAF = 8213;

const int ERROR_DS_CANT_ON_RDN = 8214;

const int ERROR_DS_CANT_MOD_OBJ_CLASS = 8215;

const int ERROR_DS_CROSS_DOM_MOVE_ERROR = 8216;

const int ERROR_DS_GC_NOT_AVAILABLE = 8217;

const int ERROR_SHARED_POLICY = 8218;

const int ERROR_POLICY_OBJECT_NOT_FOUND = 8219;

const int ERROR_POLICY_ONLY_IN_DS = 8220;

const int ERROR_PROMOTION_ACTIVE = 8221;

const int ERROR_NO_PROMOTION_ACTIVE = 8222;

const int ERROR_DS_OPERATIONS_ERROR = 8224;

const int ERROR_DS_PROTOCOL_ERROR = 8225;

const int ERROR_DS_TIMELIMIT_EXCEEDED = 8226;

const int ERROR_DS_SIZELIMIT_EXCEEDED = 8227;

const int ERROR_DS_ADMIN_LIMIT_EXCEEDED = 8228;

const int ERROR_DS_COMPARE_FALSE = 8229;

const int ERROR_DS_COMPARE_TRUE = 8230;

const int ERROR_DS_AUTH_METHOD_NOT_SUPPORTED = 8231;

const int ERROR_DS_STRONG_AUTH_REQUIRED = 8232;

const int ERROR_DS_INAPPROPRIATE_AUTH = 8233;

const int ERROR_DS_AUTH_UNKNOWN = 8234;

const int ERROR_DS_REFERRAL = 8235;

const int ERROR_DS_UNAVAILABLE_CRIT_EXTENSION = 8236;

const int ERROR_DS_CONFIDENTIALITY_REQUIRED = 8237;

const int ERROR_DS_INAPPROPRIATE_MATCHING = 8238;

const int ERROR_DS_CONSTRAINT_VIOLATION = 8239;

const int ERROR_DS_NO_SUCH_OBJECT = 8240;

const int ERROR_DS_ALIAS_PROBLEM = 8241;

const int ERROR_DS_INVALID_DN_SYNTAX = 8242;

const int ERROR_DS_IS_LEAF = 8243;

const int ERROR_DS_ALIAS_DEREF_PROBLEM = 8244;

const int ERROR_DS_UNWILLING_TO_PERFORM = 8245;

const int ERROR_DS_LOOP_DETECT = 8246;

const int ERROR_DS_NAMING_VIOLATION = 8247;

const int ERROR_DS_OBJECT_RESULTS_TOO_LARGE = 8248;

const int ERROR_DS_AFFECTS_MULTIPLE_DSAS = 8249;

const int ERROR_DS_SERVER_DOWN = 8250;

const int ERROR_DS_LOCAL_ERROR = 8251;

const int ERROR_DS_ENCODING_ERROR = 8252;

const int ERROR_DS_DECODING_ERROR = 8253;

const int ERROR_DS_FILTER_UNKNOWN = 8254;

const int ERROR_DS_PARAM_ERROR = 8255;

const int ERROR_DS_NOT_SUPPORTED = 8256;

const int ERROR_DS_NO_RESULTS_RETURNED = 8257;

const int ERROR_DS_CONTROL_NOT_FOUND = 8258;

const int ERROR_DS_CLIENT_LOOP = 8259;

const int ERROR_DS_REFERRAL_LIMIT_EXCEEDED = 8260;

const int ERROR_DS_SORT_CONTROL_MISSING = 8261;

const int ERROR_DS_OFFSET_RANGE_ERROR = 8262;

const int ERROR_DS_RIDMGR_DISABLED = 8263;

const int ERROR_DS_ROOT_MUST_BE_NC = 8301;

const int ERROR_DS_ADD_REPLICA_INHIBITED = 8302;

const int ERROR_DS_ATT_NOT_DEF_IN_SCHEMA = 8303;

const int ERROR_DS_MAX_OBJ_SIZE_EXCEEDED = 8304;

const int ERROR_DS_OBJ_STRING_NAME_EXISTS = 8305;

const int ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA = 8306;

const int ERROR_DS_RDN_DOESNT_MATCH_SCHEMA = 8307;

const int ERROR_DS_NO_REQUESTED_ATTS_FOUND = 8308;

const int ERROR_DS_USER_BUFFER_TO_SMALL = 8309;

const int ERROR_DS_ATT_IS_NOT_ON_OBJ = 8310;

const int ERROR_DS_ILLEGAL_MOD_OPERATION = 8311;

const int ERROR_DS_OBJ_TOO_LARGE = 8312;

const int ERROR_DS_BAD_INSTANCE_TYPE = 8313;

const int ERROR_DS_MASTERDSA_REQUIRED = 8314;

const int ERROR_DS_OBJECT_CLASS_REQUIRED = 8315;

const int ERROR_DS_MISSING_REQUIRED_ATT = 8316;

const int ERROR_DS_ATT_NOT_DEF_FOR_CLASS = 8317;

const int ERROR_DS_ATT_ALREADY_EXISTS = 8318;

const int ERROR_DS_CANT_ADD_ATT_VALUES = 8320;

const int ERROR_DS_SINGLE_VALUE_CONSTRAINT = 8321;

const int ERROR_DS_RANGE_CONSTRAINT = 8322;

const int ERROR_DS_ATT_VAL_ALREADY_EXISTS = 8323;

const int ERROR_DS_CANT_REM_MISSING_ATT = 8324;

const int ERROR_DS_CANT_REM_MISSING_ATT_VAL = 8325;

const int ERROR_DS_ROOT_CANT_BE_SUBREF = 8326;

const int ERROR_DS_NO_CHAINING = 8327;

const int ERROR_DS_NO_CHAINED_EVAL = 8328;

const int ERROR_DS_NO_PARENT_OBJECT = 8329;

const int ERROR_DS_PARENT_IS_AN_ALIAS = 8330;

const int ERROR_DS_CANT_MIX_MASTER_AND_REPS = 8331;

const int ERROR_DS_CHILDREN_EXIST = 8332;

const int ERROR_DS_OBJ_NOT_FOUND = 8333;

const int ERROR_DS_ALIASED_OBJ_MISSING = 8334;

const int ERROR_DS_BAD_NAME_SYNTAX = 8335;

const int ERROR_DS_ALIAS_POINTS_TO_ALIAS = 8336;

const int ERROR_DS_CANT_DEREF_ALIAS = 8337;

const int ERROR_DS_OUT_OF_SCOPE = 8338;

const int ERROR_DS_OBJECT_BEING_REMOVED = 8339;

const int ERROR_DS_CANT_DELETE_DSA_OBJ = 8340;

const int ERROR_DS_GENERIC_ERROR = 8341;

const int ERROR_DS_DSA_MUST_BE_INT_MASTER = 8342;

const int ERROR_DS_CLASS_NOT_DSA = 8343;

const int ERROR_DS_INSUFF_ACCESS_RIGHTS = 8344;

const int ERROR_DS_ILLEGAL_SUPERIOR = 8345;

const int ERROR_DS_ATTRIBUTE_OWNED_BY_SAM = 8346;

const int ERROR_DS_NAME_TOO_MANY_PARTS = 8347;

const int ERROR_DS_NAME_TOO_LONG = 8348;

const int ERROR_DS_NAME_VALUE_TOO_LONG = 8349;

const int ERROR_DS_NAME_UNPARSEABLE = 8350;

const int ERROR_DS_NAME_TYPE_UNKNOWN = 8351;

const int ERROR_DS_NOT_AN_OBJECT = 8352;

const int ERROR_DS_SEC_DESC_TOO_SHORT = 8353;

const int ERROR_DS_SEC_DESC_INVALID = 8354;

const int ERROR_DS_NO_DELETED_NAME = 8355;

const int ERROR_DS_SUBREF_MUST_HAVE_PARENT = 8356;

const int ERROR_DS_NCNAME_MUST_BE_NC = 8357;

const int ERROR_DS_CANT_ADD_SYSTEM_ONLY = 8358;

const int ERROR_DS_CLASS_MUST_BE_CONCRETE = 8359;

const int ERROR_DS_INVALID_DMD = 8360;

const int ERROR_DS_OBJ_GUID_EXISTS = 8361;

const int ERROR_DS_NOT_ON_BACKLINK = 8362;

const int ERROR_DS_NO_CROSSREF_FOR_NC = 8363;

const int ERROR_DS_SHUTTING_DOWN = 8364;

const int ERROR_DS_UNKNOWN_OPERATION = 8365;

const int ERROR_DS_INVALID_ROLE_OWNER = 8366;

const int ERROR_DS_COULDNT_CONTACT_FSMO = 8367;

const int ERROR_DS_CROSS_NC_DN_RENAME = 8368;

const int ERROR_DS_CANT_MOD_SYSTEM_ONLY = 8369;

const int ERROR_DS_REPLICATOR_ONLY = 8370;

const int ERROR_DS_OBJ_CLASS_NOT_DEFINED = 8371;

const int ERROR_DS_OBJ_CLASS_NOT_SUBCLASS = 8372;

const int ERROR_DS_NAME_REFERENCE_INVALID = 8373;

const int ERROR_DS_CROSS_REF_EXISTS = 8374;

const int ERROR_DS_CANT_DEL_MASTER_CROSSREF = 8375;

const int ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD = 8376;

const int ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX = 8377;

const int ERROR_DS_DUP_RDN = 8378;

const int ERROR_DS_DUP_OID = 8379;

const int ERROR_DS_DUP_MAPI_ID = 8380;

const int ERROR_DS_DUP_SCHEMA_ID_GUID = 8381;

const int ERROR_DS_DUP_LDAP_DISPLAY_NAME = 8382;

const int ERROR_DS_SEMANTIC_ATT_TEST = 8383;

const int ERROR_DS_SYNTAX_MISMATCH = 8384;

const int ERROR_DS_EXISTS_IN_MUST_HAVE = 8385;

const int ERROR_DS_EXISTS_IN_MAY_HAVE = 8386;

const int ERROR_DS_NONEXISTENT_MAY_HAVE = 8387;

const int ERROR_DS_NONEXISTENT_MUST_HAVE = 8388;

const int ERROR_DS_AUX_CLS_TEST_FAIL = 8389;

const int ERROR_DS_NONEXISTENT_POSS_SUP = 8390;

const int ERROR_DS_SUB_CLS_TEST_FAIL = 8391;

const int ERROR_DS_BAD_RDN_ATT_ID_SYNTAX = 8392;

const int ERROR_DS_EXISTS_IN_AUX_CLS = 8393;

const int ERROR_DS_EXISTS_IN_SUB_CLS = 8394;

const int ERROR_DS_EXISTS_IN_POSS_SUP = 8395;

const int ERROR_DS_RECALCSCHEMA_FAILED = 8396;

const int ERROR_DS_TREE_DELETE_NOT_FINISHED = 8397;

const int ERROR_DS_CANT_DELETE = 8398;

const int ERROR_DS_ATT_SCHEMA_REQ_ID = 8399;

const int ERROR_DS_BAD_ATT_SCHEMA_SYNTAX = 8400;

const int ERROR_DS_CANT_CACHE_ATT = 8401;

const int ERROR_DS_CANT_CACHE_CLASS = 8402;

const int ERROR_DS_CANT_REMOVE_ATT_CACHE = 8403;

const int ERROR_DS_CANT_REMOVE_CLASS_CACHE = 8404;

const int ERROR_DS_CANT_RETRIEVE_DN = 8405;

const int ERROR_DS_MISSING_SUPREF = 8406;

const int ERROR_DS_CANT_RETRIEVE_INSTANCE = 8407;

const int ERROR_DS_CODE_INCONSISTENCY = 8408;

const int ERROR_DS_DATABASE_ERROR = 8409;

const int ERROR_DS_GOVERNSID_MISSING = 8410;

const int ERROR_DS_MISSING_EXPECTED_ATT = 8411;

const int ERROR_DS_NCNAME_MISSING_CR_REF = 8412;

const int ERROR_DS_SECURITY_CHECKING_ERROR = 8413;

const int ERROR_DS_SCHEMA_NOT_LOADED = 8414;

const int ERROR_DS_SCHEMA_ALLOC_FAILED = 8415;

const int ERROR_DS_ATT_SCHEMA_REQ_SYNTAX = 8416;

const int ERROR_DS_GCVERIFY_ERROR = 8417;

const int ERROR_DS_DRA_SCHEMA_MISMATCH = 8418;

const int ERROR_DS_CANT_FIND_DSA_OBJ = 8419;

const int ERROR_DS_CANT_FIND_EXPECTED_NC = 8420;

const int ERROR_DS_CANT_FIND_NC_IN_CACHE = 8421;

const int ERROR_DS_CANT_RETRIEVE_CHILD = 8422;

const int ERROR_DS_SECURITY_ILLEGAL_MODIFY = 8423;

const int ERROR_DS_CANT_REPLACE_HIDDEN_REC = 8424;

const int ERROR_DS_BAD_HIERARCHY_FILE = 8425;

const int ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED = 8426;

const int ERROR_DS_CONFIG_PARAM_MISSING = 8427;

const int ERROR_DS_COUNTING_AB_INDICES_FAILED = 8428;

const int ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED = 8429;

const int ERROR_DS_INTERNAL_FAILURE = 8430;

const int ERROR_DS_UNKNOWN_ERROR = 8431;

const int ERROR_DS_ROOT_REQUIRES_CLASS_TOP = 8432;

const int ERROR_DS_REFUSING_FSMO_ROLES = 8433;

const int ERROR_DS_MISSING_FSMO_SETTINGS = 8434;

const int ERROR_DS_UNABLE_TO_SURRENDER_ROLES = 8435;

const int ERROR_DS_DRA_GENERIC = 8436;

const int ERROR_DS_DRA_INVALID_PARAMETER = 8437;

const int ERROR_DS_DRA_BUSY = 8438;

const int ERROR_DS_DRA_BAD_DN = 8439;

const int ERROR_DS_DRA_BAD_NC = 8440;

const int ERROR_DS_DRA_DN_EXISTS = 8441;

const int ERROR_DS_DRA_INTERNAL_ERROR = 8442;

const int ERROR_DS_DRA_INCONSISTENT_DIT = 8443;

const int ERROR_DS_DRA_CONNECTION_FAILED = 8444;

const int ERROR_DS_DRA_BAD_INSTANCE_TYPE = 8445;

const int ERROR_DS_DRA_OUT_OF_MEM = 8446;

const int ERROR_DS_DRA_MAIL_PROBLEM = 8447;

const int ERROR_DS_DRA_REF_ALREADY_EXISTS = 8448;

const int ERROR_DS_DRA_REF_NOT_FOUND = 8449;

const int ERROR_DS_DRA_OBJ_IS_REP_SOURCE = 8450;

const int ERROR_DS_DRA_DB_ERROR = 8451;

const int ERROR_DS_DRA_NO_REPLICA = 8452;

const int ERROR_DS_DRA_ACCESS_DENIED = 8453;

const int ERROR_DS_DRA_NOT_SUPPORTED = 8454;

const int ERROR_DS_DRA_RPC_CANCELLED = 8455;

const int ERROR_DS_DRA_SOURCE_DISABLED = 8456;

const int ERROR_DS_DRA_SINK_DISABLED = 8457;

const int ERROR_DS_DRA_NAME_COLLISION = 8458;

const int ERROR_DS_DRA_SOURCE_REINSTALLED = 8459;

const int ERROR_DS_DRA_MISSING_PARENT = 8460;

const int ERROR_DS_DRA_PREEMPTED = 8461;

const int ERROR_DS_DRA_ABANDON_SYNC = 8462;

const int ERROR_DS_DRA_SHUTDOWN = 8463;

const int ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET = 8464;

const int ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA = 8465;

const int ERROR_DS_DRA_EXTN_CONNECTION_FAILED = 8466;

const int ERROR_DS_INSTALL_SCHEMA_MISMATCH = 8467;

const int ERROR_DS_DUP_LINK_ID = 8468;

const int ERROR_DS_NAME_ERROR_RESOLVING = 8469;

const int ERROR_DS_NAME_ERROR_NOT_FOUND = 8470;

const int ERROR_DS_NAME_ERROR_NOT_UNIQUE = 8471;

const int ERROR_DS_NAME_ERROR_NO_MAPPING = 8472;

const int ERROR_DS_NAME_ERROR_DOMAIN_ONLY = 8473;

const int ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING = 8474;

const int ERROR_DS_CONSTRUCTED_ATT_MOD = 8475;

const int ERROR_DS_WRONG_OM_OBJ_CLASS = 8476;

const int ERROR_DS_DRA_REPL_PENDING = 8477;

const int ERROR_DS_DS_REQUIRED = 8478;

const int ERROR_DS_INVALID_LDAP_DISPLAY_NAME = 8479;

const int ERROR_DS_NON_BASE_SEARCH = 8480;

const int ERROR_DS_CANT_RETRIEVE_ATTS = 8481;

const int ERROR_DS_BACKLINK_WITHOUT_LINK = 8482;

const int ERROR_DS_EPOCH_MISMATCH = 8483;

const int ERROR_DS_SRC_NAME_MISMATCH = 8484;

const int ERROR_DS_SRC_AND_DST_NC_IDENTICAL = 8485;

const int ERROR_DS_DST_NC_MISMATCH = 8486;

const int ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC = 8487;

const int ERROR_DS_SRC_GUID_MISMATCH = 8488;

const int ERROR_DS_CANT_MOVE_DELETED_OBJECT = 8489;

const int ERROR_DS_PDC_OPERATION_IN_PROGRESS = 8490;

const int ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD = 8491;

const int ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION = 8492;

const int ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS = 8493;

const int ERROR_DS_NC_MUST_HAVE_NC_PARENT = 8494;

const int ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE = 8495;

const int ERROR_DS_DST_DOMAIN_NOT_NATIVE = 8496;

const int ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER = 8497;

const int ERROR_DS_CANT_MOVE_ACCOUNT_GROUP = 8498;

const int ERROR_DS_CANT_MOVE_RESOURCE_GROUP = 8499;

const int ERROR_DS_INVALID_SEARCH_FLAG = 8500;

const int ERROR_DS_NO_TREE_DELETE_ABOVE_NC = 8501;

const int ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE = 8502;

const int ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE = 8503;

const int ERROR_DS_SAM_INIT_FAILURE = 8504;

const int ERROR_DS_SENSITIVE_GROUP_VIOLATION = 8505;

const int ERROR_DS_CANT_MOD_PRIMARYGROUPID = 8506;

const int ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD = 8507;

const int ERROR_DS_NONSAFE_SCHEMA_CHANGE = 8508;

const int ERROR_DS_SCHEMA_UPDATE_DISALLOWED = 8509;

const int ERROR_DS_CANT_CREATE_UNDER_SCHEMA = 8510;

const int ERROR_DS_INSTALL_NO_SRC_SCH_VERSION = 8511;

const int ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE = 8512;

const int ERROR_DS_INVALID_GROUP_TYPE = 8513;

const int ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN = 8514;

const int ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN = 8515;

const int ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER = 8516;

const int ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER = 8517;

const int ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER = 8518;

const int ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER = 8519;

const int ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER = 8520;

const int ERROR_DS_HAVE_PRIMARY_MEMBERS = 8521;

const int ERROR_DS_STRING_SD_CONVERSION_FAILED = 8522;

const int ERROR_DS_NAMING_MASTER_GC = 8523;

const int ERROR_DS_DNS_LOOKUP_FAILURE = 8524;

const int ERROR_DS_COULDNT_UPDATE_SPNS = 8525;

const int ERROR_DS_CANT_RETRIEVE_SD = 8526;

const int ERROR_DS_KEY_NOT_UNIQUE = 8527;

const int ERROR_DS_WRONG_LINKED_ATT_SYNTAX = 8528;

const int ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD = 8529;

const int ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY = 8530;

const int ERROR_DS_CANT_START = 8531;

const int ERROR_DS_INIT_FAILURE = 8532;

const int ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION = 8533;

const int ERROR_DS_SOURCE_DOMAIN_IN_FOREST = 8534;

const int ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST = 8535;

const int ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED = 8536;

const int ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN = 8537;

const int ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER = 8538;

const int ERROR_DS_SRC_SID_EXISTS_IN_FOREST = 8539;

const int ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH = 8540;

const int ERROR_SAM_INIT_FAILURE = 8541;

const int ERROR_DS_DRA_SCHEMA_INFO_SHIP = 8542;

const int ERROR_DS_DRA_SCHEMA_CONFLICT = 8543;

const int ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT = 8544;

const int ERROR_DS_DRA_OBJ_NC_MISMATCH = 8545;

const int ERROR_DS_NC_STILL_HAS_DSAS = 8546;

const int ERROR_DS_GC_REQUIRED = 8547;

const int ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY = 8548;

const int ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS = 8549;

const int ERROR_DS_CANT_ADD_TO_GC = 8550;

const int ERROR_DS_NO_CHECKPOINT_WITH_PDC = 8551;

const int ERROR_DS_SOURCE_AUDITING_NOT_ENABLED = 8552;

const int ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC = 8553;

const int ERROR_DS_INVALID_NAME_FOR_SPN = 8554;

const int ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS = 8555;

const int ERROR_DS_UNICODEPWD_NOT_IN_QUOTES = 8556;

const int ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED = 8557;

const int ERROR_DS_MUST_BE_RUN_ON_DST_DC = 8558;

const int ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER = 8559;

const int ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ = 8560;

const int ERROR_DS_INIT_FAILURE_CONSOLE = 8561;

const int ERROR_DS_SAM_INIT_FAILURE_CONSOLE = 8562;

const int ERROR_DS_FOREST_VERSION_TOO_HIGH = 8563;

const int ERROR_DS_DOMAIN_VERSION_TOO_HIGH = 8564;

const int ERROR_DS_FOREST_VERSION_TOO_LOW = 8565;

const int ERROR_DS_DOMAIN_VERSION_TOO_LOW = 8566;

const int ERROR_DS_INCOMPATIBLE_VERSION = 8567;

const int ERROR_DS_LOW_DSA_VERSION = 8568;

const int ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN = 8569;

const int ERROR_DS_NOT_SUPPORTED_SORT_ORDER = 8570;

const int ERROR_DS_NAME_NOT_UNIQUE = 8571;

const int ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4 = 8572;

const int ERROR_DS_OUT_OF_VERSION_STORE = 8573;

const int ERROR_DS_INCOMPATIBLE_CONTROLS_USED = 8574;

const int ERROR_DS_NO_REF_DOMAIN = 8575;

const int ERROR_DS_RESERVED_LINK_ID = 8576;

const int ERROR_DS_LINK_ID_NOT_AVAILABLE = 8577;

const int ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER = 8578;

const int ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE = 8579;

const int ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC = 8580;

const int ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG = 8581;

const int ERROR_DS_MODIFYDN_WRONG_GRANDPARENT = 8582;

const int ERROR_DS_NAME_ERROR_TRUST_REFERRAL = 8583;

const int ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER = 8584;

const int ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD = 8585;

const int ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2 = 8586;

const int ERROR_DS_THREAD_LIMIT_EXCEEDED = 8587;

const int ERROR_DS_NOT_CLOSEST = 8588;

const int ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF = 8589;

const int ERROR_DS_SINGLE_USER_MODE_FAILED = 8590;

const int ERROR_DS_NTDSCRIPT_SYNTAX_ERROR = 8591;

const int ERROR_DS_NTDSCRIPT_PROCESS_ERROR = 8592;

const int ERROR_DS_DIFFERENT_REPL_EPOCHS = 8593;

const int ERROR_DS_DRS_EXTENSIONS_CHANGED = 8594;

const int ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR = 8595;

const int ERROR_DS_NO_MSDS_INTID = 8596;

const int ERROR_DS_DUP_MSDS_INTID = 8597;

const int ERROR_DS_EXISTS_IN_RDNATTID = 8598;

const int ERROR_DS_AUTHORIZATION_FAILED = 8599;

const int ERROR_DS_INVALID_SCRIPT = 8600;

const int ERROR_DS_REMOTE_CROSSREF_OP_FAILED = 8601;

const int ERROR_DS_CROSS_REF_BUSY = 8602;

const int ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN = 8603;

const int ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC = 8604;

const int ERROR_DS_DUPLICATE_ID_FOUND = 8605;

const int ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT = 8606;

const int ERROR_DS_GROUP_CONVERSION_ERROR = 8607;

const int ERROR_DS_CANT_MOVE_APP_BASIC_GROUP = 8608;

const int ERROR_DS_CANT_MOVE_APP_QUERY_GROUP = 8609;

const int ERROR_DS_ROLE_NOT_VERIFIED = 8610;

const int ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL = 8611;

const int ERROR_DS_DOMAIN_RENAME_IN_PROGRESS = 8612;

const int ERROR_DS_EXISTING_AD_CHILD_NC = 8613;

const int ERROR_DS_REPL_LIFETIME_EXCEEDED = 8614;

const int ERROR_DS_DISALLOWED_IN_SYSTEM_CONTAINER = 8615;

const int ERROR_DS_LDAP_SEND_QUEUE_FULL = 8616;

const int ERROR_DS_DRA_OUT_SCHEDULE_WINDOW = 8617;

const int ERROR_DS_POLICY_NOT_KNOWN = 8618;

const int ERROR_NO_SITE_SETTINGS_OBJECT = 8619;

const int ERROR_NO_SECRETS = 8620;

const int ERROR_NO_WRITABLE_DC_FOUND = 8621;

const int ERROR_DS_NO_SERVER_OBJECT = 8622;

const int ERROR_DS_NO_NTDSA_OBJECT = 8623;

const int ERROR_DS_NON_ASQ_SEARCH = 8624;

const int ERROR_DS_AUDIT_FAILURE = 8625;

const int ERROR_DS_INVALID_SEARCH_FLAG_SUBTREE = 8626;

const int ERROR_DS_INVALID_SEARCH_FLAG_TUPLE = 8627;

const int ERROR_DS_HIERARCHY_TABLE_TOO_DEEP = 8628;

const int ERROR_DS_DRA_CORRUPT_UTD_VECTOR = 8629;

const int ERROR_DS_DRA_SECRETS_DENIED = 8630;

const int ERROR_DS_RESERVED_MAPI_ID = 8631;

const int ERROR_DS_MAPI_ID_NOT_AVAILABLE = 8632;

const int ERROR_DS_DRA_MISSING_KRBTGT_SECRET = 8633;

const int ERROR_DS_DOMAIN_NAME_EXISTS_IN_FOREST = 8634;

const int ERROR_DS_FLAT_NAME_EXISTS_IN_FOREST = 8635;

const int ERROR_INVALID_USER_PRINCIPAL_NAME = 8636;

const int ERROR_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS = 8637;

const int ERROR_DS_OID_NOT_FOUND = 8638;

const int ERROR_DS_DRA_RECYCLED_TARGET = 8639;

const int ERROR_DS_DISALLOWED_NC_REDIRECT = 8640;

const int ERROR_DS_HIGH_ADLDS_FFL = 8641;

const int ERROR_DS_HIGH_DSA_VERSION = 8642;

const int ERROR_DS_LOW_ADLDS_FFL = 8643;

const int ERROR_DOMAIN_SID_SAME_AS_LOCAL_WORKSTATION = 8644;

const int ERROR_DS_UNDELETE_SAM_VALIDATION_FAILED = 8645;

const int ERROR_INCORRECT_ACCOUNT_TYPE = 8646;

const int ERROR_DS_SPN_VALUE_NOT_UNIQUE_IN_FOREST = 8647;

const int ERROR_DS_UPN_VALUE_NOT_UNIQUE_IN_FOREST = 8648;

const int ERROR_DS_MISSING_FOREST_TRUST = 8649;

const int ERROR_DS_VALUE_KEY_NOT_UNIQUE = 8650;

const int DNS_ERROR_RESPONSE_CODES_BASE = 9000;

const int DNS_ERROR_RCODE_NO_ERROR = 0;

const int DNS_ERROR_MASK = 9000;

const int DNS_ERROR_RCODE_FORMAT_ERROR = 9001;

const int DNS_ERROR_RCODE_SERVER_FAILURE = 9002;

const int DNS_ERROR_RCODE_NAME_ERROR = 9003;

const int DNS_ERROR_RCODE_NOT_IMPLEMENTED = 9004;

const int DNS_ERROR_RCODE_REFUSED = 9005;

const int DNS_ERROR_RCODE_YXDOMAIN = 9006;

const int DNS_ERROR_RCODE_YXRRSET = 9007;

const int DNS_ERROR_RCODE_NXRRSET = 9008;

const int DNS_ERROR_RCODE_NOTAUTH = 9009;

const int DNS_ERROR_RCODE_NOTZONE = 9010;

const int DNS_ERROR_RCODE_BADSIG = 9016;

const int DNS_ERROR_RCODE_BADKEY = 9017;

const int DNS_ERROR_RCODE_BADTIME = 9018;

const int DNS_ERROR_RCODE_LAST = 9018;

const int DNS_ERROR_DNSSEC_BASE = 9100;

const int DNS_ERROR_KEYMASTER_REQUIRED = 9101;

const int DNS_ERROR_NOT_ALLOWED_ON_SIGNED_ZONE = 9102;

const int DNS_ERROR_NSEC3_INCOMPATIBLE_WITH_RSA_SHA1 = 9103;

const int DNS_ERROR_NOT_ENOUGH_SIGNING_KEY_DESCRIPTORS = 9104;

const int DNS_ERROR_UNSUPPORTED_ALGORITHM = 9105;

const int DNS_ERROR_INVALID_KEY_SIZE = 9106;

const int DNS_ERROR_SIGNING_KEY_NOT_ACCESSIBLE = 9107;

const int DNS_ERROR_KSP_DOES_NOT_SUPPORT_PROTECTION = 9108;

const int DNS_ERROR_UNEXPECTED_DATA_PROTECTION_ERROR = 9109;

const int DNS_ERROR_UNEXPECTED_CNG_ERROR = 9110;

const int DNS_ERROR_UNKNOWN_SIGNING_PARAMETER_VERSION = 9111;

const int DNS_ERROR_KSP_NOT_ACCESSIBLE = 9112;

const int DNS_ERROR_TOO_MANY_SKDS = 9113;

const int DNS_ERROR_INVALID_ROLLOVER_PERIOD = 9114;

const int DNS_ERROR_INVALID_INITIAL_ROLLOVER_OFFSET = 9115;

const int DNS_ERROR_ROLLOVER_IN_PROGRESS = 9116;

const int DNS_ERROR_STANDBY_KEY_NOT_PRESENT = 9117;

const int DNS_ERROR_NOT_ALLOWED_ON_ZSK = 9118;

const int DNS_ERROR_NOT_ALLOWED_ON_ACTIVE_SKD = 9119;

const int DNS_ERROR_ROLLOVER_ALREADY_QUEUED = 9120;

const int DNS_ERROR_NOT_ALLOWED_ON_UNSIGNED_ZONE = 9121;

const int DNS_ERROR_BAD_KEYMASTER = 9122;

const int DNS_ERROR_INVALID_SIGNATURE_VALIDITY_PERIOD = 9123;

const int DNS_ERROR_INVALID_NSEC3_ITERATION_COUNT = 9124;

const int DNS_ERROR_DNSSEC_IS_DISABLED = 9125;

const int DNS_ERROR_INVALID_XML = 9126;

const int DNS_ERROR_NO_VALID_TRUST_ANCHORS = 9127;

const int DNS_ERROR_ROLLOVER_NOT_POKEABLE = 9128;

const int DNS_ERROR_NSEC3_NAME_COLLISION = 9129;

const int DNS_ERROR_NSEC_INCOMPATIBLE_WITH_NSEC3_RSA_SHA1 = 9130;

const int DNS_ERROR_PACKET_FMT_BASE = 9500;

const int DNS_INFO_NO_RECORDS = 9501;

const int DNS_ERROR_BAD_PACKET = 9502;

const int DNS_ERROR_NO_PACKET = 9503;

const int DNS_ERROR_RCODE = 9504;

const int DNS_ERROR_UNSECURE_PACKET = 9505;

const int DNS_STATUS_PACKET_UNSECURE = 9505;

const int DNS_REQUEST_PENDING = 9506;

const int DNS_ERROR_NO_MEMORY = 14;

const int DNS_ERROR_INVALID_NAME = 123;

const int DNS_ERROR_INVALID_DATA = 13;

const int DNS_ERROR_GENERAL_API_BASE = 9550;

const int DNS_ERROR_INVALID_TYPE = 9551;

const int DNS_ERROR_INVALID_IP_ADDRESS = 9552;

const int DNS_ERROR_INVALID_PROPERTY = 9553;

const int DNS_ERROR_TRY_AGAIN_LATER = 9554;

const int DNS_ERROR_NOT_UNIQUE = 9555;

const int DNS_ERROR_NON_RFC_NAME = 9556;

const int DNS_STATUS_FQDN = 9557;

const int DNS_STATUS_DOTTED_NAME = 9558;

const int DNS_STATUS_SINGLE_PART_NAME = 9559;

const int DNS_ERROR_INVALID_NAME_CHAR = 9560;

const int DNS_ERROR_NUMERIC_NAME = 9561;

const int DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER = 9562;

const int DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION = 9563;

const int DNS_ERROR_CANNOT_FIND_ROOT_HINTS = 9564;

const int DNS_ERROR_INCONSISTENT_ROOT_HINTS = 9565;

const int DNS_ERROR_DWORD_VALUE_TOO_SMALL = 9566;

const int DNS_ERROR_DWORD_VALUE_TOO_LARGE = 9567;

const int DNS_ERROR_BACKGROUND_LOADING = 9568;

const int DNS_ERROR_NOT_ALLOWED_ON_RODC = 9569;

const int DNS_ERROR_NOT_ALLOWED_UNDER_DNAME = 9570;

const int DNS_ERROR_DELEGATION_REQUIRED = 9571;

const int DNS_ERROR_INVALID_POLICY_TABLE = 9572;

const int DNS_ERROR_ADDRESS_REQUIRED = 9573;

const int DNS_ERROR_ZONE_BASE = 9600;

const int DNS_ERROR_ZONE_DOES_NOT_EXIST = 9601;

const int DNS_ERROR_NO_ZONE_INFO = 9602;

const int DNS_ERROR_INVALID_ZONE_OPERATION = 9603;

const int DNS_ERROR_ZONE_CONFIGURATION_ERROR = 9604;

const int DNS_ERROR_ZONE_HAS_NO_SOA_RECORD = 9605;

const int DNS_ERROR_ZONE_HAS_NO_NS_RECORDS = 9606;

const int DNS_ERROR_ZONE_LOCKED = 9607;

const int DNS_ERROR_ZONE_CREATION_FAILED = 9608;

const int DNS_ERROR_ZONE_ALREADY_EXISTS = 9609;

const int DNS_ERROR_AUTOZONE_ALREADY_EXISTS = 9610;

const int DNS_ERROR_INVALID_ZONE_TYPE = 9611;

const int DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP = 9612;

const int DNS_ERROR_ZONE_NOT_SECONDARY = 9613;

const int DNS_ERROR_NEED_SECONDARY_ADDRESSES = 9614;

const int DNS_ERROR_WINS_INIT_FAILED = 9615;

const int DNS_ERROR_NEED_WINS_SERVERS = 9616;

const int DNS_ERROR_NBSTAT_INIT_FAILED = 9617;

const int DNS_ERROR_SOA_DELETE_INVALID = 9618;

const int DNS_ERROR_FORWARDER_ALREADY_EXISTS = 9619;

const int DNS_ERROR_ZONE_REQUIRES_MASTER_IP = 9620;

const int DNS_ERROR_ZONE_IS_SHUTDOWN = 9621;

const int DNS_ERROR_ZONE_LOCKED_FOR_SIGNING = 9622;

const int DNS_ERROR_DATAFILE_BASE = 9650;

const int DNS_ERROR_PRIMARY_REQUIRES_DATAFILE = 9651;

const int DNS_ERROR_INVALID_DATAFILE_NAME = 9652;

const int DNS_ERROR_DATAFILE_OPEN_FAILURE = 9653;

const int DNS_ERROR_FILE_WRITEBACK_FAILED = 9654;

const int DNS_ERROR_DATAFILE_PARSING = 9655;

const int DNS_ERROR_DATABASE_BASE = 9700;

const int DNS_ERROR_RECORD_DOES_NOT_EXIST = 9701;

const int DNS_ERROR_RECORD_FORMAT = 9702;

const int DNS_ERROR_NODE_CREATION_FAILED = 9703;

const int DNS_ERROR_UNKNOWN_RECORD_TYPE = 9704;

const int DNS_ERROR_RECORD_TIMED_OUT = 9705;

const int DNS_ERROR_NAME_NOT_IN_ZONE = 9706;

const int DNS_ERROR_CNAME_LOOP = 9707;

const int DNS_ERROR_NODE_IS_CNAME = 9708;

const int DNS_ERROR_CNAME_COLLISION = 9709;

const int DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT = 9710;

const int DNS_ERROR_RECORD_ALREADY_EXISTS = 9711;

const int DNS_ERROR_SECONDARY_DATA = 9712;

const int DNS_ERROR_NO_CREATE_CACHE_DATA = 9713;

const int DNS_ERROR_NAME_DOES_NOT_EXIST = 9714;

const int DNS_WARNING_PTR_CREATE_FAILED = 9715;

const int DNS_WARNING_DOMAIN_UNDELETED = 9716;

const int DNS_ERROR_DS_UNAVAILABLE = 9717;

const int DNS_ERROR_DS_ZONE_ALREADY_EXISTS = 9718;

const int DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE = 9719;

const int DNS_ERROR_NODE_IS_DNAME = 9720;

const int DNS_ERROR_DNAME_COLLISION = 9721;

const int DNS_ERROR_ALIAS_LOOP = 9722;

const int DNS_ERROR_OPERATION_BASE = 9750;

const int DNS_INFO_AXFR_COMPLETE = 9751;

const int DNS_ERROR_AXFR = 9752;

const int DNS_INFO_ADDED_LOCAL_WINS = 9753;

const int DNS_ERROR_SECURE_BASE = 9800;

const int DNS_STATUS_CONTINUE_NEEDED = 9801;

const int DNS_ERROR_SETUP_BASE = 9850;

const int DNS_ERROR_NO_TCPIP = 9851;

const int DNS_ERROR_NO_DNS_SERVERS = 9852;

const int DNS_ERROR_DP_BASE = 9900;

const int DNS_ERROR_DP_DOES_NOT_EXIST = 9901;

const int DNS_ERROR_DP_ALREADY_EXISTS = 9902;

const int DNS_ERROR_DP_NOT_ENLISTED = 9903;

const int DNS_ERROR_DP_ALREADY_ENLISTED = 9904;

const int DNS_ERROR_DP_NOT_AVAILABLE = 9905;

const int DNS_ERROR_DP_FSMO_ERROR = 9906;

const int DNS_ERROR_RRL_NOT_ENABLED = 9911;

const int DNS_ERROR_RRL_INVALID_WINDOW_SIZE = 9912;

const int DNS_ERROR_RRL_INVALID_IPV4_PREFIX = 9913;

const int DNS_ERROR_RRL_INVALID_IPV6_PREFIX = 9914;

const int DNS_ERROR_RRL_INVALID_TC_RATE = 9915;

const int DNS_ERROR_RRL_INVALID_LEAK_RATE = 9916;

const int DNS_ERROR_RRL_LEAK_RATE_LESSTHAN_TC_RATE = 9917;

const int DNS_ERROR_VIRTUALIZATION_INSTANCE_ALREADY_EXISTS = 9921;

const int DNS_ERROR_VIRTUALIZATION_INSTANCE_DOES_NOT_EXIST = 9922;

const int DNS_ERROR_VIRTUALIZATION_TREE_LOCKED = 9923;

const int DNS_ERROR_INVAILD_VIRTUALIZATION_INSTANCE_NAME = 9924;

const int DNS_ERROR_DEFAULT_VIRTUALIZATION_INSTANCE = 9925;

const int DNS_ERROR_ZONESCOPE_ALREADY_EXISTS = 9951;

const int DNS_ERROR_ZONESCOPE_DOES_NOT_EXIST = 9952;

const int DNS_ERROR_DEFAULT_ZONESCOPE = 9953;

const int DNS_ERROR_INVALID_ZONESCOPE_NAME = 9954;

const int DNS_ERROR_NOT_ALLOWED_WITH_ZONESCOPES = 9955;

const int DNS_ERROR_LOAD_ZONESCOPE_FAILED = 9956;

const int DNS_ERROR_ZONESCOPE_FILE_WRITEBACK_FAILED = 9957;

const int DNS_ERROR_INVALID_SCOPE_NAME = 9958;

const int DNS_ERROR_SCOPE_DOES_NOT_EXIST = 9959;

const int DNS_ERROR_DEFAULT_SCOPE = 9960;

const int DNS_ERROR_INVALID_SCOPE_OPERATION = 9961;

const int DNS_ERROR_SCOPE_LOCKED = 9962;

const int DNS_ERROR_SCOPE_ALREADY_EXISTS = 9963;

const int DNS_ERROR_POLICY_ALREADY_EXISTS = 9971;

const int DNS_ERROR_POLICY_DOES_NOT_EXIST = 9972;

const int DNS_ERROR_POLICY_INVALID_CRITERIA = 9973;

const int DNS_ERROR_POLICY_INVALID_SETTINGS = 9974;

const int DNS_ERROR_CLIENT_SUBNET_IS_ACCESSED = 9975;

const int DNS_ERROR_CLIENT_SUBNET_DOES_NOT_EXIST = 9976;

const int DNS_ERROR_CLIENT_SUBNET_ALREADY_EXISTS = 9977;

const int DNS_ERROR_SUBNET_DOES_NOT_EXIST = 9978;

const int DNS_ERROR_SUBNET_ALREADY_EXISTS = 9979;

const int DNS_ERROR_POLICY_LOCKED = 9980;

const int DNS_ERROR_POLICY_INVALID_WEIGHT = 9981;

const int DNS_ERROR_POLICY_INVALID_NAME = 9982;

const int DNS_ERROR_POLICY_MISSING_CRITERIA = 9983;

const int DNS_ERROR_INVALID_CLIENT_SUBNET_NAME = 9984;

const int DNS_ERROR_POLICY_PROCESSING_ORDER_INVALID = 9985;

const int DNS_ERROR_POLICY_SCOPE_MISSING = 9986;

const int DNS_ERROR_POLICY_SCOPE_NOT_ALLOWED = 9987;

const int DNS_ERROR_SERVERSCOPE_IS_REFERENCED = 9988;

const int DNS_ERROR_ZONESCOPE_IS_REFERENCED = 9989;

const int DNS_ERROR_POLICY_INVALID_CRITERIA_CLIENT_SUBNET = 9990;

const int DNS_ERROR_POLICY_INVALID_CRITERIA_TRANSPORT_PROTOCOL = 9991;

const int DNS_ERROR_POLICY_INVALID_CRITERIA_NETWORK_PROTOCOL = 9992;

const int DNS_ERROR_POLICY_INVALID_CRITERIA_INTERFACE = 9993;

const int DNS_ERROR_POLICY_INVALID_CRITERIA_FQDN = 9994;

const int DNS_ERROR_POLICY_INVALID_CRITERIA_QUERY_TYPE = 9995;

const int DNS_ERROR_POLICY_INVALID_CRITERIA_TIME_OF_DAY = 9996;

const int WSABASEERR = 10000;

const int WSAEINTR = 10004;

const int WSAEBADF = 10009;

const int WSAEACCES = 10013;

const int WSAEFAULT = 10014;

const int WSAEINVAL = 10022;

const int WSAEMFILE = 10024;

const int WSAEWOULDBLOCK = 10035;

const int WSAEINPROGRESS = 10036;

const int WSAEALREADY = 10037;

const int WSAENOTSOCK = 10038;

const int WSAEDESTADDRREQ = 10039;

const int WSAEMSGSIZE = 10040;

const int WSAEPROTOTYPE = 10041;

const int WSAENOPROTOOPT = 10042;

const int WSAEPROTONOSUPPORT = 10043;

const int WSAESOCKTNOSUPPORT = 10044;

const int WSAEOPNOTSUPP = 10045;

const int WSAEPFNOSUPPORT = 10046;

const int WSAEAFNOSUPPORT = 10047;

const int WSAEADDRINUSE = 10048;

const int WSAEADDRNOTAVAIL = 10049;

const int WSAENETDOWN = 10050;

const int WSAENETUNREACH = 10051;

const int WSAENETRESET = 10052;

const int WSAECONNABORTED = 10053;

const int WSAECONNRESET = 10054;

const int WSAENOBUFS = 10055;

const int WSAEISCONN = 10056;

const int WSAENOTCONN = 10057;

const int WSAESHUTDOWN = 10058;

const int WSAETOOMANYREFS = 10059;

const int WSAETIMEDOUT = 10060;

const int WSAECONNREFUSED = 10061;

const int WSAELOOP = 10062;

const int WSAENAMETOOLONG = 10063;

const int WSAEHOSTDOWN = 10064;

const int WSAEHOSTUNREACH = 10065;

const int WSAENOTEMPTY = 10066;

const int WSAEPROCLIM = 10067;

const int WSAEUSERS = 10068;

const int WSAEDQUOT = 10069;

const int WSAESTALE = 10070;

const int WSAEREMOTE = 10071;

const int WSASYSNOTREADY = 10091;

const int WSAVERNOTSUPPORTED = 10092;

const int WSANOTINITIALISED = 10093;

const int WSAEDISCON = 10101;

const int WSAENOMORE = 10102;

const int WSAECANCELLED = 10103;

const int WSAEINVALIDPROCTABLE = 10104;

const int WSAEINVALIDPROVIDER = 10105;

const int WSAEPROVIDERFAILEDINIT = 10106;

const int WSASYSCALLFAILURE = 10107;

const int WSASERVICE_NOT_FOUND = 10108;

const int WSATYPE_NOT_FOUND = 10109;

const int WSA_E_NO_MORE = 10110;

const int WSA_E_CANCELLED = 10111;

const int WSAEREFUSED = 10112;

const int WSAHOST_NOT_FOUND = 11001;

const int WSATRY_AGAIN = 11002;

const int WSANO_RECOVERY = 11003;

const int WSANO_DATA = 11004;

const int WSA_QOS_RECEIVERS = 11005;

const int WSA_QOS_SENDERS = 11006;

const int WSA_QOS_NO_SENDERS = 11007;

const int WSA_QOS_NO_RECEIVERS = 11008;

const int WSA_QOS_REQUEST_CONFIRMED = 11009;

const int WSA_QOS_ADMISSION_FAILURE = 11010;

const int WSA_QOS_POLICY_FAILURE = 11011;

const int WSA_QOS_BAD_STYLE = 11012;

const int WSA_QOS_BAD_OBJECT = 11013;

const int WSA_QOS_TRAFFIC_CTRL_ERROR = 11014;

const int WSA_QOS_GENERIC_ERROR = 11015;

const int WSA_QOS_ESERVICETYPE = 11016;

const int WSA_QOS_EFLOWSPEC = 11017;

const int WSA_QOS_EPROVSPECBUF = 11018;

const int WSA_QOS_EFILTERSTYLE = 11019;

const int WSA_QOS_EFILTERTYPE = 11020;

const int WSA_QOS_EFILTERCOUNT = 11021;

const int WSA_QOS_EOBJLENGTH = 11022;

const int WSA_QOS_EFLOWCOUNT = 11023;

const int WSA_QOS_EUNKOWNPSOBJ = 11024;

const int WSA_QOS_EPOLICYOBJ = 11025;

const int WSA_QOS_EFLOWDESC = 11026;

const int WSA_QOS_EPSFLOWSPEC = 11027;

const int WSA_QOS_EPSFILTERSPEC = 11028;

const int WSA_QOS_ESDMODEOBJ = 11029;

const int WSA_QOS_ESHAPERATEOBJ = 11030;

const int WSA_QOS_RESERVED_PETYPE = 11031;

const int WSA_SECURE_HOST_NOT_FOUND = 11032;

const int WSA_IPSEC_NAME_POLICY_ERROR = 11033;

const int ERROR_IPSEC_QM_POLICY_EXISTS = 13000;

const int ERROR_IPSEC_QM_POLICY_NOT_FOUND = 13001;

const int ERROR_IPSEC_QM_POLICY_IN_USE = 13002;

const int ERROR_IPSEC_MM_POLICY_EXISTS = 13003;

const int ERROR_IPSEC_MM_POLICY_NOT_FOUND = 13004;

const int ERROR_IPSEC_MM_POLICY_IN_USE = 13005;

const int ERROR_IPSEC_MM_FILTER_EXISTS = 13006;

const int ERROR_IPSEC_MM_FILTER_NOT_FOUND = 13007;

const int ERROR_IPSEC_TRANSPORT_FILTER_EXISTS = 13008;

const int ERROR_IPSEC_TRANSPORT_FILTER_NOT_FOUND = 13009;

const int ERROR_IPSEC_MM_AUTH_EXISTS = 13010;

const int ERROR_IPSEC_MM_AUTH_NOT_FOUND = 13011;

const int ERROR_IPSEC_MM_AUTH_IN_USE = 13012;

const int ERROR_IPSEC_DEFAULT_MM_POLICY_NOT_FOUND = 13013;

const int ERROR_IPSEC_DEFAULT_MM_AUTH_NOT_FOUND = 13014;

const int ERROR_IPSEC_DEFAULT_QM_POLICY_NOT_FOUND = 13015;

const int ERROR_IPSEC_TUNNEL_FILTER_EXISTS = 13016;

const int ERROR_IPSEC_TUNNEL_FILTER_NOT_FOUND = 13017;

const int ERROR_IPSEC_MM_FILTER_PENDING_DELETION = 13018;

const int ERROR_IPSEC_TRANSPORT_FILTER_PENDING_DELETION = 13019;

const int ERROR_IPSEC_TUNNEL_FILTER_PENDING_DELETION = 13020;

const int ERROR_IPSEC_MM_POLICY_PENDING_DELETION = 13021;

const int ERROR_IPSEC_MM_AUTH_PENDING_DELETION = 13022;

const int ERROR_IPSEC_QM_POLICY_PENDING_DELETION = 13023;

const int WARNING_IPSEC_MM_POLICY_PRUNED = 13024;

const int WARNING_IPSEC_QM_POLICY_PRUNED = 13025;

const int ERROR_IPSEC_IKE_NEG_STATUS_BEGIN = 13800;

const int ERROR_IPSEC_IKE_AUTH_FAIL = 13801;

const int ERROR_IPSEC_IKE_ATTRIB_FAIL = 13802;

const int ERROR_IPSEC_IKE_NEGOTIATION_PENDING = 13803;

const int ERROR_IPSEC_IKE_GENERAL_PROCESSING_ERROR = 13804;

const int ERROR_IPSEC_IKE_TIMED_OUT = 13805;

const int ERROR_IPSEC_IKE_NO_CERT = 13806;

const int ERROR_IPSEC_IKE_SA_DELETED = 13807;

const int ERROR_IPSEC_IKE_SA_REAPED = 13808;

const int ERROR_IPSEC_IKE_MM_ACQUIRE_DROP = 13809;

const int ERROR_IPSEC_IKE_QM_ACQUIRE_DROP = 13810;

const int ERROR_IPSEC_IKE_QUEUE_DROP_MM = 13811;

const int ERROR_IPSEC_IKE_QUEUE_DROP_NO_MM = 13812;

const int ERROR_IPSEC_IKE_DROP_NO_RESPONSE = 13813;

const int ERROR_IPSEC_IKE_MM_DELAY_DROP = 13814;

const int ERROR_IPSEC_IKE_QM_DELAY_DROP = 13815;

const int ERROR_IPSEC_IKE_ERROR = 13816;

const int ERROR_IPSEC_IKE_CRL_FAILED = 13817;

const int ERROR_IPSEC_IKE_INVALID_KEY_USAGE = 13818;

const int ERROR_IPSEC_IKE_INVALID_CERT_TYPE = 13819;

const int ERROR_IPSEC_IKE_NO_PRIVATE_KEY = 13820;

const int ERROR_IPSEC_IKE_SIMULTANEOUS_REKEY = 13821;

const int ERROR_IPSEC_IKE_DH_FAIL = 13822;

const int ERROR_IPSEC_IKE_CRITICAL_PAYLOAD_NOT_RECOGNIZED = 13823;

const int ERROR_IPSEC_IKE_INVALID_HEADER = 13824;

const int ERROR_IPSEC_IKE_NO_POLICY = 13825;

const int ERROR_IPSEC_IKE_INVALID_SIGNATURE = 13826;

const int ERROR_IPSEC_IKE_KERBEROS_ERROR = 13827;

const int ERROR_IPSEC_IKE_NO_PUBLIC_KEY = 13828;

const int ERROR_IPSEC_IKE_PROCESS_ERR = 13829;

const int ERROR_IPSEC_IKE_PROCESS_ERR_SA = 13830;

const int ERROR_IPSEC_IKE_PROCESS_ERR_PROP = 13831;

const int ERROR_IPSEC_IKE_PROCESS_ERR_TRANS = 13832;

const int ERROR_IPSEC_IKE_PROCESS_ERR_KE = 13833;

const int ERROR_IPSEC_IKE_PROCESS_ERR_ID = 13834;

const int ERROR_IPSEC_IKE_PROCESS_ERR_CERT = 13835;

const int ERROR_IPSEC_IKE_PROCESS_ERR_CERT_REQ = 13836;

const int ERROR_IPSEC_IKE_PROCESS_ERR_HASH = 13837;

const int ERROR_IPSEC_IKE_PROCESS_ERR_SIG = 13838;

const int ERROR_IPSEC_IKE_PROCESS_ERR_NONCE = 13839;

const int ERROR_IPSEC_IKE_PROCESS_ERR_NOTIFY = 13840;

const int ERROR_IPSEC_IKE_PROCESS_ERR_DELETE = 13841;

const int ERROR_IPSEC_IKE_PROCESS_ERR_VENDOR = 13842;

const int ERROR_IPSEC_IKE_INVALID_PAYLOAD = 13843;

const int ERROR_IPSEC_IKE_LOAD_SOFT_SA = 13844;

const int ERROR_IPSEC_IKE_SOFT_SA_TORN_DOWN = 13845;

const int ERROR_IPSEC_IKE_INVALID_COOKIE = 13846;

const int ERROR_IPSEC_IKE_NO_PEER_CERT = 13847;

const int ERROR_IPSEC_IKE_PEER_CRL_FAILED = 13848;

const int ERROR_IPSEC_IKE_POLICY_CHANGE = 13849;

const int ERROR_IPSEC_IKE_NO_MM_POLICY = 13850;

const int ERROR_IPSEC_IKE_NOTCBPRIV = 13851;

const int ERROR_IPSEC_IKE_SECLOADFAIL = 13852;

const int ERROR_IPSEC_IKE_FAILSSPINIT = 13853;

const int ERROR_IPSEC_IKE_FAILQUERYSSP = 13854;

const int ERROR_IPSEC_IKE_SRVACQFAIL = 13855;

const int ERROR_IPSEC_IKE_SRVQUERYCRED = 13856;

const int ERROR_IPSEC_IKE_GETSPIFAIL = 13857;

const int ERROR_IPSEC_IKE_INVALID_FILTER = 13858;

const int ERROR_IPSEC_IKE_OUT_OF_MEMORY = 13859;

const int ERROR_IPSEC_IKE_ADD_UPDATE_KEY_FAILED = 13860;

const int ERROR_IPSEC_IKE_INVALID_POLICY = 13861;

const int ERROR_IPSEC_IKE_UNKNOWN_DOI = 13862;

const int ERROR_IPSEC_IKE_INVALID_SITUATION = 13863;

const int ERROR_IPSEC_IKE_DH_FAILURE = 13864;

const int ERROR_IPSEC_IKE_INVALID_GROUP = 13865;

const int ERROR_IPSEC_IKE_ENCRYPT = 13866;

const int ERROR_IPSEC_IKE_DECRYPT = 13867;

const int ERROR_IPSEC_IKE_POLICY_MATCH = 13868;

const int ERROR_IPSEC_IKE_UNSUPPORTED_ID = 13869;

const int ERROR_IPSEC_IKE_INVALID_HASH = 13870;

const int ERROR_IPSEC_IKE_INVALID_HASH_ALG = 13871;

const int ERROR_IPSEC_IKE_INVALID_HASH_SIZE = 13872;

const int ERROR_IPSEC_IKE_INVALID_ENCRYPT_ALG = 13873;

const int ERROR_IPSEC_IKE_INVALID_AUTH_ALG = 13874;

const int ERROR_IPSEC_IKE_INVALID_SIG = 13875;

const int ERROR_IPSEC_IKE_LOAD_FAILED = 13876;

const int ERROR_IPSEC_IKE_RPC_DELETE = 13877;

const int ERROR_IPSEC_IKE_BENIGN_REINIT = 13878;

const int ERROR_IPSEC_IKE_INVALID_RESPONDER_LIFETIME_NOTIFY = 13879;

const int ERROR_IPSEC_IKE_INVALID_MAJOR_VERSION = 13880;

const int ERROR_IPSEC_IKE_INVALID_CERT_KEYLEN = 13881;

const int ERROR_IPSEC_IKE_MM_LIMIT = 13882;

const int ERROR_IPSEC_IKE_NEGOTIATION_DISABLED = 13883;

const int ERROR_IPSEC_IKE_QM_LIMIT = 13884;

const int ERROR_IPSEC_IKE_MM_EXPIRED = 13885;

const int ERROR_IPSEC_IKE_PEER_MM_ASSUMED_INVALID = 13886;

const int ERROR_IPSEC_IKE_CERT_CHAIN_POLICY_MISMATCH = 13887;

const int ERROR_IPSEC_IKE_UNEXPECTED_MESSAGE_ID = 13888;

const int ERROR_IPSEC_IKE_INVALID_AUTH_PAYLOAD = 13889;

const int ERROR_IPSEC_IKE_DOS_COOKIE_SENT = 13890;

const int ERROR_IPSEC_IKE_SHUTTING_DOWN = 13891;

const int ERROR_IPSEC_IKE_CGA_AUTH_FAILED = 13892;

const int ERROR_IPSEC_IKE_PROCESS_ERR_NATOA = 13893;

const int ERROR_IPSEC_IKE_INVALID_MM_FOR_QM = 13894;

const int ERROR_IPSEC_IKE_QM_EXPIRED = 13895;

const int ERROR_IPSEC_IKE_TOO_MANY_FILTERS = 13896;

const int ERROR_IPSEC_IKE_NEG_STATUS_END = 13897;

const int ERROR_IPSEC_IKE_KILL_DUMMY_NAP_TUNNEL = 13898;

const int ERROR_IPSEC_IKE_INNER_IP_ASSIGNMENT_FAILURE = 13899;

const int ERROR_IPSEC_IKE_REQUIRE_CP_PAYLOAD_MISSING = 13900;

const int ERROR_IPSEC_KEY_MODULE_IMPERSONATION_NEGOTIATION_PENDING = 13901;

const int ERROR_IPSEC_IKE_COEXISTENCE_SUPPRESS = 13902;

const int ERROR_IPSEC_IKE_RATELIMIT_DROP = 13903;

const int ERROR_IPSEC_IKE_PEER_DOESNT_SUPPORT_MOBIKE = 13904;

const int ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE = 13905;

const int ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_FAILURE = 13906;

const int ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE_WITH_OPTIONAL_RETRY = 13907;

const int ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_AND_CERTMAP_FAILURE = 13908;

const int ERROR_IPSEC_IKE_NEG_STATUS_EXTENDED_END = 13909;

const int ERROR_IPSEC_BAD_SPI = 13910;

const int ERROR_IPSEC_SA_LIFETIME_EXPIRED = 13911;

const int ERROR_IPSEC_WRONG_SA = 13912;

const int ERROR_IPSEC_REPLAY_CHECK_FAILED = 13913;

const int ERROR_IPSEC_INVALID_PACKET = 13914;

const int ERROR_IPSEC_INTEGRITY_CHECK_FAILED = 13915;

const int ERROR_IPSEC_CLEAR_TEXT_DROP = 13916;

const int ERROR_IPSEC_AUTH_FIREWALL_DROP = 13917;

const int ERROR_IPSEC_THROTTLE_DROP = 13918;

const int ERROR_IPSEC_DOSP_BLOCK = 13925;

const int ERROR_IPSEC_DOSP_RECEIVED_MULTICAST = 13926;

const int ERROR_IPSEC_DOSP_INVALID_PACKET = 13927;

const int ERROR_IPSEC_DOSP_STATE_LOOKUP_FAILED = 13928;

const int ERROR_IPSEC_DOSP_MAX_ENTRIES = 13929;

const int ERROR_IPSEC_DOSP_KEYMOD_NOT_ALLOWED = 13930;

const int ERROR_IPSEC_DOSP_NOT_INSTALLED = 13931;

const int ERROR_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES = 13932;

const int ERROR_SXS_SECTION_NOT_FOUND = 14000;

const int ERROR_SXS_CANT_GEN_ACTCTX = 14001;

const int ERROR_SXS_INVALID_ACTCTXDATA_FORMAT = 14002;

const int ERROR_SXS_ASSEMBLY_NOT_FOUND = 14003;

const int ERROR_SXS_MANIFEST_FORMAT_ERROR = 14004;

const int ERROR_SXS_MANIFEST_PARSE_ERROR = 14005;

const int ERROR_SXS_ACTIVATION_CONTEXT_DISABLED = 14006;

const int ERROR_SXS_KEY_NOT_FOUND = 14007;

const int ERROR_SXS_VERSION_CONFLICT = 14008;

const int ERROR_SXS_WRONG_SECTION_TYPE = 14009;

const int ERROR_SXS_THREAD_QUERIES_DISABLED = 14010;

const int ERROR_SXS_PROCESS_DEFAULT_ALREADY_SET = 14011;

const int ERROR_SXS_UNKNOWN_ENCODING_GROUP = 14012;

const int ERROR_SXS_UNKNOWN_ENCODING = 14013;

const int ERROR_SXS_INVALID_XML_NAMESPACE_URI = 14014;

const int ERROR_SXS_ROOT_MANIFEST_DEPENDENCY_NOT_INSTALLED = 14015;

const int ERROR_SXS_LEAF_MANIFEST_DEPENDENCY_NOT_INSTALLED = 14016;

const int ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE = 14017;

const int ERROR_SXS_MANIFEST_MISSING_REQUIRED_DEFAULT_NAMESPACE = 14018;

const int ERROR_SXS_MANIFEST_INVALID_REQUIRED_DEFAULT_NAMESPACE = 14019;

const int ERROR_SXS_PRIVATE_MANIFEST_CROSS_PATH_WITH_REPARSE_POINT = 14020;

const int ERROR_SXS_DUPLICATE_DLL_NAME = 14021;

const int ERROR_SXS_DUPLICATE_WINDOWCLASS_NAME = 14022;

const int ERROR_SXS_DUPLICATE_CLSID = 14023;

const int ERROR_SXS_DUPLICATE_IID = 14024;

const int ERROR_SXS_DUPLICATE_TLBID = 14025;

const int ERROR_SXS_DUPLICATE_PROGID = 14026;

const int ERROR_SXS_DUPLICATE_ASSEMBLY_NAME = 14027;

const int ERROR_SXS_FILE_HASH_MISMATCH = 14028;

const int ERROR_SXS_POLICY_PARSE_ERROR = 14029;

const int ERROR_SXS_XML_E_MISSINGQUOTE = 14030;

const int ERROR_SXS_XML_E_COMMENTSYNTAX = 14031;

const int ERROR_SXS_XML_E_BADSTARTNAMECHAR = 14032;

const int ERROR_SXS_XML_E_BADNAMECHAR = 14033;

const int ERROR_SXS_XML_E_BADCHARINSTRING = 14034;

const int ERROR_SXS_XML_E_XMLDECLSYNTAX = 14035;

const int ERROR_SXS_XML_E_BADCHARDATA = 14036;

const int ERROR_SXS_XML_E_MISSINGWHITESPACE = 14037;

const int ERROR_SXS_XML_E_EXPECTINGTAGEND = 14038;

const int ERROR_SXS_XML_E_MISSINGSEMICOLON = 14039;

const int ERROR_SXS_XML_E_UNBALANCEDPAREN = 14040;

const int ERROR_SXS_XML_E_INTERNALERROR = 14041;

const int ERROR_SXS_XML_E_UNEXPECTED_WHITESPACE = 14042;

const int ERROR_SXS_XML_E_INCOMPLETE_ENCODING = 14043;

const int ERROR_SXS_XML_E_MISSING_PAREN = 14044;

const int ERROR_SXS_XML_E_EXPECTINGCLOSEQUOTE = 14045;

const int ERROR_SXS_XML_E_MULTIPLE_COLONS = 14046;

const int ERROR_SXS_XML_E_INVALID_DECIMAL = 14047;

const int ERROR_SXS_XML_E_INVALID_HEXIDECIMAL = 14048;

const int ERROR_SXS_XML_E_INVALID_UNICODE = 14049;

const int ERROR_SXS_XML_E_WHITESPACEORQUESTIONMARK = 14050;

const int ERROR_SXS_XML_E_UNEXPECTEDENDTAG = 14051;

const int ERROR_SXS_XML_E_UNCLOSEDTAG = 14052;

const int ERROR_SXS_XML_E_DUPLICATEATTRIBUTE = 14053;

const int ERROR_SXS_XML_E_MULTIPLEROOTS = 14054;

const int ERROR_SXS_XML_E_INVALIDATROOTLEVEL = 14055;

const int ERROR_SXS_XML_E_BADXMLDECL = 14056;

const int ERROR_SXS_XML_E_MISSINGROOT = 14057;

const int ERROR_SXS_XML_E_UNEXPECTEDEOF = 14058;

const int ERROR_SXS_XML_E_BADPEREFINSUBSET = 14059;

const int ERROR_SXS_XML_E_UNCLOSEDSTARTTAG = 14060;

const int ERROR_SXS_XML_E_UNCLOSEDENDTAG = 14061;

const int ERROR_SXS_XML_E_UNCLOSEDSTRING = 14062;

const int ERROR_SXS_XML_E_UNCLOSEDCOMMENT = 14063;

const int ERROR_SXS_XML_E_UNCLOSEDDECL = 14064;

const int ERROR_SXS_XML_E_UNCLOSEDCDATA = 14065;

const int ERROR_SXS_XML_E_RESERVEDNAMESPACE = 14066;

const int ERROR_SXS_XML_E_INVALIDENCODING = 14067;

const int ERROR_SXS_XML_E_INVALIDSWITCH = 14068;

const int ERROR_SXS_XML_E_BADXMLCASE = 14069;

const int ERROR_SXS_XML_E_INVALID_STANDALONE = 14070;

const int ERROR_SXS_XML_E_UNEXPECTED_STANDALONE = 14071;

const int ERROR_SXS_XML_E_INVALID_VERSION = 14072;

const int ERROR_SXS_XML_E_MISSINGEQUALS = 14073;

const int ERROR_SXS_PROTECTION_RECOVERY_FAILED = 14074;

const int ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT = 14075;

const int ERROR_SXS_PROTECTION_CATALOG_NOT_VALID = 14076;

const int ERROR_SXS_UNTRANSLATABLE_HRESULT = 14077;

const int ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING = 14078;

const int ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE = 14079;

const int ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME = 14080;

const int ERROR_SXS_ASSEMBLY_MISSING = 14081;

const int ERROR_SXS_CORRUPT_ACTIVATION_STACK = 14082;

const int ERROR_SXS_CORRUPTION = 14083;

const int ERROR_SXS_EARLY_DEACTIVATION = 14084;

const int ERROR_SXS_INVALID_DEACTIVATION = 14085;

const int ERROR_SXS_MULTIPLE_DEACTIVATION = 14086;

const int ERROR_SXS_PROCESS_TERMINATION_REQUESTED = 14087;

const int ERROR_SXS_RELEASE_ACTIVATION_CONTEXT = 14088;

const int ERROR_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY = 14089;

const int ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE = 14090;

const int ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME = 14091;

const int ERROR_SXS_IDENTITY_DUPLICATE_ATTRIBUTE = 14092;

const int ERROR_SXS_IDENTITY_PARSE_ERROR = 14093;

const int ERROR_MALFORMED_SUBSTITUTION_STRING = 14094;

const int ERROR_SXS_INCORRECT_PUBLIC_KEY_TOKEN = 14095;

const int ERROR_UNMAPPED_SUBSTITUTION_STRING = 14096;

const int ERROR_SXS_ASSEMBLY_NOT_LOCKED = 14097;

const int ERROR_SXS_COMPONENT_STORE_CORRUPT = 14098;

const int ERROR_ADVANCED_INSTALLER_FAILED = 14099;

const int ERROR_XML_ENCODING_MISMATCH = 14100;

const int ERROR_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT = 14101;

const int ERROR_SXS_IDENTITIES_DIFFERENT = 14102;

const int ERROR_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT = 14103;

const int ERROR_SXS_FILE_NOT_PART_OF_ASSEMBLY = 14104;

const int ERROR_SXS_MANIFEST_TOO_BIG = 14105;

const int ERROR_SXS_SETTING_NOT_REGISTERED = 14106;

const int ERROR_SXS_TRANSACTION_CLOSURE_INCOMPLETE = 14107;

const int ERROR_SMI_PRIMITIVE_INSTALLER_FAILED = 14108;

const int ERROR_GENERIC_COMMAND_FAILED = 14109;

const int ERROR_SXS_FILE_HASH_MISSING = 14110;

const int ERROR_SXS_DUPLICATE_ACTIVATABLE_CLASS = 14111;

const int ERROR_EVT_INVALID_CHANNEL_PATH = 15000;

const int ERROR_EVT_INVALID_QUERY = 15001;

const int ERROR_EVT_PUBLISHER_METADATA_NOT_FOUND = 15002;

const int ERROR_EVT_EVENT_TEMPLATE_NOT_FOUND = 15003;

const int ERROR_EVT_INVALID_PUBLISHER_NAME = 15004;

const int ERROR_EVT_INVALID_EVENT_DATA = 15005;

const int ERROR_EVT_CHANNEL_NOT_FOUND = 15007;

const int ERROR_EVT_MALFORMED_XML_TEXT = 15008;

const int ERROR_EVT_SUBSCRIPTION_TO_DIRECT_CHANNEL = 15009;

const int ERROR_EVT_CONFIGURATION_ERROR = 15010;

const int ERROR_EVT_QUERY_RESULT_STALE = 15011;

const int ERROR_EVT_QUERY_RESULT_INVALID_POSITION = 15012;

const int ERROR_EVT_NON_VALIDATING_MSXML = 15013;

const int ERROR_EVT_FILTER_ALREADYSCOPED = 15014;

const int ERROR_EVT_FILTER_NOTELTSET = 15015;

const int ERROR_EVT_FILTER_INVARG = 15016;

const int ERROR_EVT_FILTER_INVTEST = 15017;

const int ERROR_EVT_FILTER_INVTYPE = 15018;

const int ERROR_EVT_FILTER_PARSEERR = 15019;

const int ERROR_EVT_FILTER_UNSUPPORTEDOP = 15020;

const int ERROR_EVT_FILTER_UNEXPECTEDTOKEN = 15021;

const int ERROR_EVT_INVALID_OPERATION_OVER_ENABLED_DIRECT_CHANNEL = 15022;

const int ERROR_EVT_INVALID_CHANNEL_PROPERTY_VALUE = 15023;

const int ERROR_EVT_INVALID_PUBLISHER_PROPERTY_VALUE = 15024;

const int ERROR_EVT_CHANNEL_CANNOT_ACTIVATE = 15025;

const int ERROR_EVT_FILTER_TOO_COMPLEX = 15026;

const int ERROR_EVT_MESSAGE_NOT_FOUND = 15027;

const int ERROR_EVT_MESSAGE_ID_NOT_FOUND = 15028;

const int ERROR_EVT_UNRESOLVED_VALUE_INSERT = 15029;

const int ERROR_EVT_UNRESOLVED_PARAMETER_INSERT = 15030;

const int ERROR_EVT_MAX_INSERTS_REACHED = 15031;

const int ERROR_EVT_EVENT_DEFINITION_NOT_FOUND = 15032;

const int ERROR_EVT_MESSAGE_LOCALE_NOT_FOUND = 15033;

const int ERROR_EVT_VERSION_TOO_OLD = 15034;

const int ERROR_EVT_VERSION_TOO_NEW = 15035;

const int ERROR_EVT_CANNOT_OPEN_CHANNEL_OF_QUERY = 15036;

const int ERROR_EVT_PUBLISHER_DISABLED = 15037;

const int ERROR_EVT_FILTER_OUT_OF_RANGE = 15038;

const int ERROR_EC_SUBSCRIPTION_CANNOT_ACTIVATE = 15080;

const int ERROR_EC_LOG_DISABLED = 15081;

const int ERROR_EC_CIRCULAR_FORWARDING = 15082;

const int ERROR_EC_CREDSTORE_FULL = 15083;

const int ERROR_EC_CRED_NOT_FOUND = 15084;

const int ERROR_EC_NO_ACTIVE_CHANNEL = 15085;

const int ERROR_MUI_FILE_NOT_FOUND = 15100;

const int ERROR_MUI_INVALID_FILE = 15101;

const int ERROR_MUI_INVALID_RC_CONFIG = 15102;

const int ERROR_MUI_INVALID_LOCALE_NAME = 15103;

const int ERROR_MUI_INVALID_ULTIMATEFALLBACK_NAME = 15104;

const int ERROR_MUI_FILE_NOT_LOADED = 15105;

const int ERROR_RESOURCE_ENUM_USER_STOP = 15106;

const int ERROR_MUI_INTLSETTINGS_UILANG_NOT_INSTALLED = 15107;

const int ERROR_MUI_INTLSETTINGS_INVALID_LOCALE_NAME = 15108;

const int ERROR_MRM_RUNTIME_NO_DEFAULT_OR_NEUTRAL_RESOURCE = 15110;

const int ERROR_MRM_INVALID_PRICONFIG = 15111;

const int ERROR_MRM_INVALID_FILE_TYPE = 15112;

const int ERROR_MRM_UNKNOWN_QUALIFIER = 15113;

const int ERROR_MRM_INVALID_QUALIFIER_VALUE = 15114;

const int ERROR_MRM_NO_CANDIDATE = 15115;

const int ERROR_MRM_NO_MATCH_OR_DEFAULT_CANDIDATE = 15116;

const int ERROR_MRM_RESOURCE_TYPE_MISMATCH = 15117;

const int ERROR_MRM_DUPLICATE_MAP_NAME = 15118;

const int ERROR_MRM_DUPLICATE_ENTRY = 15119;

const int ERROR_MRM_INVALID_RESOURCE_IDENTIFIER = 15120;

const int ERROR_MRM_FILEPATH_TOO_LONG = 15121;

const int ERROR_MRM_UNSUPPORTED_DIRECTORY_TYPE = 15122;

const int ERROR_MRM_INVALID_PRI_FILE = 15126;

const int ERROR_MRM_NAMED_RESOURCE_NOT_FOUND = 15127;

const int ERROR_MRM_MAP_NOT_FOUND = 15135;

const int ERROR_MRM_UNSUPPORTED_PROFILE_TYPE = 15136;

const int ERROR_MRM_INVALID_QUALIFIER_OPERATOR = 15137;

const int ERROR_MRM_INDETERMINATE_QUALIFIER_VALUE = 15138;

const int ERROR_MRM_AUTOMERGE_ENABLED = 15139;

const int ERROR_MRM_TOO_MANY_RESOURCES = 15140;

const int ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_MERGE = 15141;

const int ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_LOAD_UNLOAD_PRI_FILE = 15142;

const int ERROR_MRM_NO_CURRENT_VIEW_ON_THREAD = 15143;

const int ERROR_DIFFERENT_PROFILE_RESOURCE_MANAGER_EXIST = 15144;

const int ERROR_OPERATION_NOT_ALLOWED_FROM_SYSTEM_COMPONENT = 15145;

const int ERROR_MRM_DIRECT_REF_TO_NON_DEFAULT_RESOURCE = 15146;

const int ERROR_MRM_GENERATION_COUNT_MISMATCH = 15147;

const int ERROR_PRI_MERGE_VERSION_MISMATCH = 15148;

const int ERROR_PRI_MERGE_MISSING_SCHEMA = 15149;

const int ERROR_PRI_MERGE_LOAD_FILE_FAILED = 15150;

const int ERROR_PRI_MERGE_ADD_FILE_FAILED = 15151;

const int ERROR_PRI_MERGE_WRITE_FILE_FAILED = 15152;

const int ERROR_PRI_MERGE_MULTIPLE_PACKAGE_FAMILIES_NOT_ALLOWED = 15153;

const int ERROR_PRI_MERGE_MULTIPLE_MAIN_PACKAGES_NOT_ALLOWED = 15154;

const int ERROR_PRI_MERGE_BUNDLE_PACKAGES_NOT_ALLOWED = 15155;

const int ERROR_PRI_MERGE_MAIN_PACKAGE_REQUIRED = 15156;

const int ERROR_PRI_MERGE_RESOURCE_PACKAGE_REQUIRED = 15157;

const int ERROR_PRI_MERGE_INVALID_FILE_NAME = 15158;

const int ERROR_MRM_PACKAGE_NOT_FOUND = 15159;

const int ERROR_MRM_MISSING_DEFAULT_LANGUAGE = 15160;

const int ERROR_MCA_INVALID_CAPABILITIES_STRING = 15200;

const int ERROR_MCA_INVALID_VCP_VERSION = 15201;

const int ERROR_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION = 15202;

const int ERROR_MCA_MCCS_VERSION_MISMATCH = 15203;

const int ERROR_MCA_UNSUPPORTED_MCCS_VERSION = 15204;

const int ERROR_MCA_INTERNAL_ERROR = 15205;

const int ERROR_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED = 15206;

const int ERROR_MCA_UNSUPPORTED_COLOR_TEMPERATURE = 15207;

const int ERROR_AMBIGUOUS_SYSTEM_DEVICE = 15250;

const int ERROR_SYSTEM_DEVICE_NOT_FOUND = 15299;

const int ERROR_HASH_NOT_SUPPORTED = 15300;

const int ERROR_HASH_NOT_PRESENT = 15301;

const int ERROR_SECONDARY_IC_PROVIDER_NOT_REGISTERED = 15321;

const int ERROR_GPIO_CLIENT_INFORMATION_INVALID = 15322;

const int ERROR_GPIO_VERSION_NOT_SUPPORTED = 15323;

const int ERROR_GPIO_INVALID_REGISTRATION_PACKET = 15324;

const int ERROR_GPIO_OPERATION_DENIED = 15325;

const int ERROR_GPIO_INCOMPATIBLE_CONNECT_MODE = 15326;

const int ERROR_GPIO_INTERRUPT_ALREADY_UNMASKED = 15327;

const int ERROR_CANNOT_SWITCH_RUNLEVEL = 15400;

const int ERROR_INVALID_RUNLEVEL_SETTING = 15401;

const int ERROR_RUNLEVEL_SWITCH_TIMEOUT = 15402;

const int ERROR_RUNLEVEL_SWITCH_AGENT_TIMEOUT = 15403;

const int ERROR_RUNLEVEL_SWITCH_IN_PROGRESS = 15404;

const int ERROR_SERVICES_FAILED_AUTOSTART = 15405;

const int ERROR_COM_TASK_STOP_PENDING = 15501;

const int ERROR_INSTALL_OPEN_PACKAGE_FAILED = 15600;

const int ERROR_INSTALL_PACKAGE_NOT_FOUND = 15601;

const int ERROR_INSTALL_INVALID_PACKAGE = 15602;

const int ERROR_INSTALL_RESOLVE_DEPENDENCY_FAILED = 15603;

const int ERROR_INSTALL_OUT_OF_DISK_SPACE = 15604;

const int ERROR_INSTALL_NETWORK_FAILURE = 15605;

const int ERROR_INSTALL_REGISTRATION_FAILURE = 15606;

const int ERROR_INSTALL_DEREGISTRATION_FAILURE = 15607;

const int ERROR_INSTALL_CANCEL = 15608;

const int ERROR_INSTALL_FAILED = 15609;

const int ERROR_REMOVE_FAILED = 15610;

const int ERROR_PACKAGE_ALREADY_EXISTS = 15611;

const int ERROR_NEEDS_REMEDIATION = 15612;

const int ERROR_INSTALL_PREREQUISITE_FAILED = 15613;

const int ERROR_PACKAGE_REPOSITORY_CORRUPTED = 15614;

const int ERROR_INSTALL_POLICY_FAILURE = 15615;

const int ERROR_PACKAGE_UPDATING = 15616;

const int ERROR_DEPLOYMENT_BLOCKED_BY_POLICY = 15617;

const int ERROR_PACKAGES_IN_USE = 15618;

const int ERROR_RECOVERY_FILE_CORRUPT = 15619;

const int ERROR_INVALID_STAGED_SIGNATURE = 15620;

const int ERROR_DELETING_EXISTING_APPLICATIONDATA_STORE_FAILED = 15621;

const int ERROR_INSTALL_PACKAGE_DOWNGRADE = 15622;

const int ERROR_SYSTEM_NEEDS_REMEDIATION = 15623;

const int ERROR_APPX_INTEGRITY_FAILURE_CLR_NGEN = 15624;

const int ERROR_RESILIENCY_FILE_CORRUPT = 15625;

const int ERROR_INSTALL_FIREWALL_SERVICE_NOT_RUNNING = 15626;

const int ERROR_PACKAGE_MOVE_FAILED = 15627;

const int ERROR_INSTALL_VOLUME_NOT_EMPTY = 15628;

const int ERROR_INSTALL_VOLUME_OFFLINE = 15629;

const int ERROR_INSTALL_VOLUME_CORRUPT = 15630;

const int ERROR_NEEDS_REGISTRATION = 15631;

const int ERROR_INSTALL_WRONG_PROCESSOR_ARCHITECTURE = 15632;

const int ERROR_DEV_SIDELOAD_LIMIT_EXCEEDED = 15633;

const int ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE = 15634;

const int ERROR_PACKAGE_NOT_SUPPORTED_ON_FILESYSTEM = 15635;

const int ERROR_PACKAGE_MOVE_BLOCKED_BY_STREAMING = 15636;

const int ERROR_INSTALL_OPTIONAL_PACKAGE_APPLICATIONID_NOT_UNIQUE = 15637;

const int ERROR_PACKAGE_STAGING_ONHOLD = 15638;

const int ERROR_INSTALL_INVALID_RELATED_SET_UPDATE = 15639;

const int
    ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY =
    15640;

const int ERROR_DEPLOYMENT_BLOCKED_BY_USER_LOG_OFF = 15641;

const int ERROR_PROVISION_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_PROVISIONED =
    15642;

const int ERROR_PACKAGES_REPUTATION_CHECK_FAILED = 15643;

const int ERROR_PACKAGES_REPUTATION_CHECK_TIMEDOUT = 15644;

const int ERROR_DEPLOYMENT_OPTION_NOT_SUPPORTED = 15645;

const int ERROR_APPINSTALLER_ACTIVATION_BLOCKED = 15646;

const int ERROR_REGISTRATION_FROM_REMOTE_DRIVE_NOT_SUPPORTED = 15647;

const int ERROR_APPX_RAW_DATA_WRITE_FAILED = 15648;

const int ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_PACKAGE = 15649;

const int ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_MACHINE = 15650;

const int ERROR_DEPLOYMENT_BLOCKED_BY_PROFILE_POLICY = 15651;

const int ERROR_DEPLOYMENT_FAILED_CONFLICTING_MUTABLE_PACKAGE_DIRECTORY = 15652;

const int ERROR_SINGLETON_RESOURCE_INSTALLED_IN_ACTIVE_USER = 15653;

const int ERROR_DIFFERENT_VERSION_OF_PACKAGED_SERVICE_INSTALLED = 15654;

const int ERROR_SERVICE_EXISTS_AS_NON_PACKAGED_SERVICE = 15655;

const int ERROR_PACKAGED_SERVICE_REQUIRES_ADMIN_PRIVILEGES = 15656;

const int ERROR_REDIRECTION_TO_DEFAULT_ACCOUNT_NOT_ALLOWED = 15657;

const int ERROR_PACKAGE_LACKS_CAPABILITY_TO_DEPLOY_ON_HOST = 15658;

const int ERROR_UNSIGNED_PACKAGE_INVALID_CONTENT = 15659;

const int ERROR_UNSIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE = 15660;

const int ERROR_SIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE = 15661;

const int ERROR_PACKAGE_EXTERNAL_LOCATION_NOT_ALLOWED = 15662;

const int
    ERROR_INSTALL_FULLTRUST_HOSTRUNTIME_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY =
    15663;

const int APPMODEL_ERROR_NO_PACKAGE = 15700;

const int APPMODEL_ERROR_PACKAGE_RUNTIME_CORRUPT = 15701;

const int APPMODEL_ERROR_PACKAGE_IDENTITY_CORRUPT = 15702;

const int APPMODEL_ERROR_NO_APPLICATION = 15703;

const int APPMODEL_ERROR_DYNAMIC_PROPERTY_READ_FAILED = 15704;

const int APPMODEL_ERROR_DYNAMIC_PROPERTY_INVALID = 15705;

const int APPMODEL_ERROR_PACKAGE_NOT_AVAILABLE = 15706;

const int APPMODEL_ERROR_NO_MUTABLE_DIRECTORY = 15707;

const int ERROR_STATE_LOAD_STORE_FAILED = 15800;

const int ERROR_STATE_GET_VERSION_FAILED = 15801;

const int ERROR_STATE_SET_VERSION_FAILED = 15802;

const int ERROR_STATE_STRUCTURED_RESET_FAILED = 15803;

const int ERROR_STATE_OPEN_CONTAINER_FAILED = 15804;

const int ERROR_STATE_CREATE_CONTAINER_FAILED = 15805;

const int ERROR_STATE_DELETE_CONTAINER_FAILED = 15806;

const int ERROR_STATE_READ_SETTING_FAILED = 15807;

const int ERROR_STATE_WRITE_SETTING_FAILED = 15808;

const int ERROR_STATE_DELETE_SETTING_FAILED = 15809;

const int ERROR_STATE_QUERY_SETTING_FAILED = 15810;

const int ERROR_STATE_READ_COMPOSITE_SETTING_FAILED = 15811;

const int ERROR_STATE_WRITE_COMPOSITE_SETTING_FAILED = 15812;

const int ERROR_STATE_ENUMERATE_CONTAINER_FAILED = 15813;

const int ERROR_STATE_ENUMERATE_SETTINGS_FAILED = 15814;

const int ERROR_STATE_COMPOSITE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED = 15815;

const int ERROR_STATE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED = 15816;

const int ERROR_STATE_SETTING_NAME_SIZE_LIMIT_EXCEEDED = 15817;

const int ERROR_STATE_CONTAINER_NAME_SIZE_LIMIT_EXCEEDED = 15818;

const int ERROR_API_UNAVAILABLE = 15841;

const int STORE_ERROR_UNLICENSED = 15861;

const int STORE_ERROR_UNLICENSED_USER = 15862;

const int STORE_ERROR_PENDING_COM_TRANSACTION = 15863;

const int STORE_ERROR_LICENSE_REVOKED = 15864;

const int SEVERITY_SUCCESS = 0;

const int SEVERITY_ERROR = 1;

const int FACILITY_NT_BIT = 268435456;

const int E_NOT_SET = -2147023728;

const int E_NOT_VALID_STATE = -2147019873;

const int E_NOT_SUFFICIENT_BUFFER = -2147024774;

const int E_TIME_SENSITIVE_THREAD = -2147024474;

const int E_NO_TASK_QUEUE = -2147024469;

const int NOERROR = 0;

const int E_UNEXPECTED = -2147418113;

const int E_NOTIMPL = -2147467263;

const int E_OUTOFMEMORY = -2147024882;

const int E_INVALIDARG = -2147024809;

const int E_NOINTERFACE = -2147467262;

const int E_POINTER = -2147467261;

const int E_HANDLE = -2147024890;

const int E_ABORT = -2147467260;

const int E_FAIL = -2147467259;

const int E_ACCESSDENIED = -2147024891;

const int E_PENDING = -2147483638;

const int E_BOUNDS = -2147483637;

const int E_CHANGED_STATE = -2147483636;

const int E_ILLEGAL_STATE_CHANGE = -2147483635;

const int E_ILLEGAL_METHOD_CALL = -2147483634;

const int RO_E_METADATA_NAME_NOT_FOUND = -2147483633;

const int RO_E_METADATA_NAME_IS_NAMESPACE = -2147483632;

const int RO_E_METADATA_INVALID_TYPE_FORMAT = -2147483631;

const int RO_E_INVALID_METADATA_FILE = -2147483630;

const int RO_E_CLOSED = -2147483629;

const int RO_E_EXCLUSIVE_WRITE = -2147483628;

const int RO_E_CHANGE_NOTIFICATION_IN_PROGRESS = -2147483627;

const int RO_E_ERROR_STRING_NOT_FOUND = -2147483626;

const int E_STRING_NOT_NULL_TERMINATED = -2147483625;

const int E_ILLEGAL_DELEGATE_ASSIGNMENT = -2147483624;

const int E_ASYNC_OPERATION_NOT_STARTED = -2147483623;

const int E_APPLICATION_EXITING = -2147483622;

const int E_APPLICATION_VIEW_EXITING = -2147483621;

const int RO_E_MUST_BE_AGILE = -2147483620;

const int RO_E_UNSUPPORTED_FROM_MTA = -2147483619;

const int RO_E_COMMITTED = -2147483618;

const int RO_E_BLOCKED_CROSS_ASTA_CALL = -2147483617;

const int RO_E_CANNOT_ACTIVATE_FULL_TRUST_SERVER = -2147483616;

const int RO_E_CANNOT_ACTIVATE_UNIVERSAL_APPLICATION_SERVER = -2147483615;

const int CO_E_INIT_TLS = -2147467258;

const int CO_E_INIT_SHARED_ALLOCATOR = -2147467257;

const int CO_E_INIT_MEMORY_ALLOCATOR = -2147467256;

const int CO_E_INIT_CLASS_CACHE = -2147467255;

const int CO_E_INIT_RPC_CHANNEL = -2147467254;

const int CO_E_INIT_TLS_SET_CHANNEL_CONTROL = -2147467253;

const int CO_E_INIT_TLS_CHANNEL_CONTROL = -2147467252;

const int CO_E_INIT_UNACCEPTED_USER_ALLOCATOR = -2147467251;

const int CO_E_INIT_SCM_MUTEX_EXISTS = -2147467250;

const int CO_E_INIT_SCM_FILE_MAPPING_EXISTS = -2147467249;

const int CO_E_INIT_SCM_MAP_VIEW_OF_FILE = -2147467248;

const int CO_E_INIT_SCM_EXEC_FAILURE = -2147467247;

const int CO_E_INIT_ONLY_SINGLE_THREADED = -2147467246;

const int CO_E_CANT_REMOTE = -2147467245;

const int CO_E_BAD_SERVER_NAME = -2147467244;

const int CO_E_WRONG_SERVER_IDENTITY = -2147467243;

const int CO_E_OLE1DDE_DISABLED = -2147467242;

const int CO_E_RUNAS_SYNTAX = -2147467241;

const int CO_E_CREATEPROCESS_FAILURE = -2147467240;

const int CO_E_RUNAS_CREATEPROCESS_FAILURE = -2147467239;

const int CO_E_RUNAS_LOGON_FAILURE = -2147467238;

const int CO_E_LAUNCH_PERMSSION_DENIED = -2147467237;

const int CO_E_START_SERVICE_FAILURE = -2147467236;

const int CO_E_REMOTE_COMMUNICATION_FAILURE = -2147467235;

const int CO_E_SERVER_START_TIMEOUT = -2147467234;

const int CO_E_CLSREG_INCONSISTENT = -2147467233;

const int CO_E_IIDREG_INCONSISTENT = -2147467232;

const int CO_E_NOT_SUPPORTED = -2147467231;

const int CO_E_RELOAD_DLL = -2147467230;

const int CO_E_MSI_ERROR = -2147467229;

const int CO_E_ATTEMPT_TO_CREATE_OUTSIDE_CLIENT_CONTEXT = -2147467228;

const int CO_E_SERVER_PAUSED = -2147467227;

const int CO_E_SERVER_NOT_PAUSED = -2147467226;

const int CO_E_CLASS_DISABLED = -2147467225;

const int CO_E_CLRNOTAVAILABLE = -2147467224;

const int CO_E_ASYNC_WORK_REJECTED = -2147467223;

const int CO_E_SERVER_INIT_TIMEOUT = -2147467222;

const int CO_E_NO_SECCTX_IN_ACTIVATE = -2147467221;

const int CO_E_TRACKER_CONFIG = -2147467216;

const int CO_E_THREADPOOL_CONFIG = -2147467215;

const int CO_E_SXS_CONFIG = -2147467214;

const int CO_E_MALFORMED_SPN = -2147467213;

const int CO_E_UNREVOKED_REGISTRATION_ON_APARTMENT_SHUTDOWN = -2147467212;

const int CO_E_PREMATURE_STUB_RUNDOWN = -2147467211;

const int S_OK = 0;

const int S_FALSE = 1;

const int OLE_E_FIRST = -2147221504;

const int OLE_E_LAST = -2147221249;

const int OLE_S_FIRST = 262144;

const int OLE_S_LAST = 262399;

const int OLE_E_OLEVERB = -2147221504;

const int OLE_E_ADVF = -2147221503;

const int OLE_E_ENUM_NOMORE = -2147221502;

const int OLE_E_ADVISENOTSUPPORTED = -2147221501;

const int OLE_E_NOCONNECTION = -2147221500;

const int OLE_E_NOTRUNNING = -2147221499;

const int OLE_E_NOCACHE = -2147221498;

const int OLE_E_BLANK = -2147221497;

const int OLE_E_CLASSDIFF = -2147221496;

const int OLE_E_CANT_GETMONIKER = -2147221495;

const int OLE_E_CANT_BINDTOSOURCE = -2147221494;

const int OLE_E_STATIC = -2147221493;

const int OLE_E_PROMPTSAVECANCELLED = -2147221492;

const int OLE_E_INVALIDRECT = -2147221491;

const int OLE_E_WRONGCOMPOBJ = -2147221490;

const int OLE_E_INVALIDHWND = -2147221489;

const int OLE_E_NOT_INPLACEACTIVE = -2147221488;

const int OLE_E_CANTCONVERT = -2147221487;

const int OLE_E_NOSTORAGE = -2147221486;

const int DV_E_FORMATETC = -2147221404;

const int DV_E_DVTARGETDEVICE = -2147221403;

const int DV_E_STGMEDIUM = -2147221402;

const int DV_E_STATDATA = -2147221401;

const int DV_E_LINDEX = -2147221400;

const int DV_E_TYMED = -2147221399;

const int DV_E_CLIPFORMAT = -2147221398;

const int DV_E_DVASPECT = -2147221397;

const int DV_E_DVTARGETDEVICE_SIZE = -2147221396;

const int DV_E_NOIVIEWOBJECT = -2147221395;

const int DRAGDROP_E_FIRST = 2147746048;

const int DRAGDROP_E_LAST = 2147746063;

const int DRAGDROP_S_FIRST = 262400;

const int DRAGDROP_S_LAST = 262415;

const int DRAGDROP_E_NOTREGISTERED = -2147221248;

const int DRAGDROP_E_ALREADYREGISTERED = -2147221247;

const int DRAGDROP_E_INVALIDHWND = -2147221246;

const int DRAGDROP_E_CONCURRENT_DRAG_ATTEMPTED = -2147221245;

const int CLASSFACTORY_E_FIRST = 2147746064;

const int CLASSFACTORY_E_LAST = 2147746079;

const int CLASSFACTORY_S_FIRST = 262416;

const int CLASSFACTORY_S_LAST = 262431;

const int CLASS_E_NOAGGREGATION = -2147221232;

const int CLASS_E_CLASSNOTAVAILABLE = -2147221231;

const int CLASS_E_NOTLICENSED = -2147221230;

const int MARSHAL_E_FIRST = 2147746080;

const int MARSHAL_E_LAST = 2147746095;

const int MARSHAL_S_FIRST = 262432;

const int MARSHAL_S_LAST = 262447;

const int DATA_E_FIRST = 2147746096;

const int DATA_E_LAST = 2147746111;

const int DATA_S_FIRST = 262448;

const int DATA_S_LAST = 262463;

const int VIEW_E_FIRST = 2147746112;

const int VIEW_E_LAST = 2147746127;

const int VIEW_S_FIRST = 262464;

const int VIEW_S_LAST = 262479;

const int VIEW_E_DRAW = -2147221184;

const int REGDB_E_FIRST = 2147746128;

const int REGDB_E_LAST = 2147746143;

const int REGDB_S_FIRST = 262480;

const int REGDB_S_LAST = 262495;

const int REGDB_E_READREGDB = -2147221168;

const int REGDB_E_WRITEREGDB = -2147221167;

const int REGDB_E_KEYMISSING = -2147221166;

const int REGDB_E_INVALIDVALUE = -2147221165;

const int REGDB_E_CLASSNOTREG = -2147221164;

const int REGDB_E_IIDNOTREG = -2147221163;

const int REGDB_E_BADTHREADINGMODEL = -2147221162;

const int REGDB_E_PACKAGEPOLICYVIOLATION = -2147221161;

const int CAT_E_FIRST = 2147746144;

const int CAT_E_LAST = 2147746145;

const int CAT_E_CATIDNOEXIST = -2147221152;

const int CAT_E_NODESCRIPTION = -2147221151;

const int CS_E_FIRST = 2147746148;

const int CS_E_LAST = 2147746159;

const int CS_E_PACKAGE_NOTFOUND = -2147221148;

const int CS_E_NOT_DELETABLE = -2147221147;

const int CS_E_CLASS_NOTFOUND = -2147221146;

const int CS_E_INVALID_VERSION = -2147221145;

const int CS_E_NO_CLASSSTORE = -2147221144;

const int CS_E_OBJECT_NOTFOUND = -2147221143;

const int CS_E_OBJECT_ALREADY_EXISTS = -2147221142;

const int CS_E_INVALID_PATH = -2147221141;

const int CS_E_NETWORK_ERROR = -2147221140;

const int CS_E_ADMIN_LIMIT_EXCEEDED = -2147221139;

const int CS_E_SCHEMA_MISMATCH = -2147221138;

const int CS_E_INTERNAL_ERROR = -2147221137;

const int CACHE_E_FIRST = 2147746160;

const int CACHE_E_LAST = 2147746175;

const int CACHE_S_FIRST = 262512;

const int CACHE_S_LAST = 262527;

const int CACHE_E_NOCACHE_UPDATED = -2147221136;

const int OLEOBJ_E_FIRST = 2147746176;

const int OLEOBJ_E_LAST = 2147746191;

const int OLEOBJ_S_FIRST = 262528;

const int OLEOBJ_S_LAST = 262543;

const int OLEOBJ_E_NOVERBS = -2147221120;

const int OLEOBJ_E_INVALIDVERB = -2147221119;

const int CLIENTSITE_E_FIRST = 2147746192;

const int CLIENTSITE_E_LAST = 2147746207;

const int CLIENTSITE_S_FIRST = 262544;

const int CLIENTSITE_S_LAST = 262559;

const int INPLACE_E_NOTUNDOABLE = -2147221088;

const int INPLACE_E_NOTOOLSPACE = -2147221087;

const int INPLACE_E_FIRST = 2147746208;

const int INPLACE_E_LAST = 2147746223;

const int INPLACE_S_FIRST = 262560;

const int INPLACE_S_LAST = 262575;

const int ENUM_E_FIRST = 2147746224;

const int ENUM_E_LAST = 2147746239;

const int ENUM_S_FIRST = 262576;

const int ENUM_S_LAST = 262591;

const int CONVERT10_E_FIRST = 2147746240;

const int CONVERT10_E_LAST = 2147746255;

const int CONVERT10_S_FIRST = 262592;

const int CONVERT10_S_LAST = 262607;

const int CONVERT10_E_OLESTREAM_GET = -2147221056;

const int CONVERT10_E_OLESTREAM_PUT = -2147221055;

const int CONVERT10_E_OLESTREAM_FMT = -2147221054;

const int CONVERT10_E_OLESTREAM_BITMAP_TO_DIB = -2147221053;

const int CONVERT10_E_STG_FMT = -2147221052;

const int CONVERT10_E_STG_NO_STD_STREAM = -2147221051;

const int CONVERT10_E_STG_DIB_TO_BITMAP = -2147221050;

const int CLIPBRD_E_FIRST = 2147746256;

const int CLIPBRD_E_LAST = 2147746271;

const int CLIPBRD_S_FIRST = 262608;

const int CLIPBRD_S_LAST = 262623;

const int CLIPBRD_E_CANT_OPEN = -2147221040;

const int CLIPBRD_E_CANT_EMPTY = -2147221039;

const int CLIPBRD_E_CANT_SET = -2147221038;

const int CLIPBRD_E_BAD_DATA = -2147221037;

const int CLIPBRD_E_CANT_CLOSE = -2147221036;

const int MK_E_FIRST = 2147746272;

const int MK_E_LAST = 2147746287;

const int MK_S_FIRST = 262624;

const int MK_S_LAST = 262639;

const int MK_E_CONNECTMANUALLY = -2147221024;

const int MK_E_EXCEEDEDDEADLINE = -2147221023;

const int MK_E_NEEDGENERIC = -2147221022;

const int MK_E_UNAVAILABLE = -2147221021;

const int MK_E_SYNTAX = -2147221020;

const int MK_E_NOOBJECT = -2147221019;

const int MK_E_INVALIDEXTENSION = -2147221018;

const int MK_E_INTERMEDIATEINTERFACENOTSUPPORTED = -2147221017;

const int MK_E_NOTBINDABLE = -2147221016;

const int MK_E_NOTBOUND = -2147221015;

const int MK_E_CANTOPENFILE = -2147221014;

const int MK_E_MUSTBOTHERUSER = -2147221013;

const int MK_E_NOINVERSE = -2147221012;

const int MK_E_NOSTORAGE = -2147221011;

const int MK_E_NOPREFIX = -2147221010;

const int MK_E_ENUMERATION_FAILED = -2147221009;

const int CO_E_FIRST = 2147746288;

const int CO_E_LAST = 2147746303;

const int CO_S_FIRST = 262640;

const int CO_S_LAST = 262655;

const int CO_E_NOTINITIALIZED = -2147221008;

const int CO_E_ALREADYINITIALIZED = -2147221007;

const int CO_E_CANTDETERMINECLASS = -2147221006;

const int CO_E_CLASSSTRING = -2147221005;

const int CO_E_IIDSTRING = -2147221004;

const int CO_E_APPNOTFOUND = -2147221003;

const int CO_E_APPSINGLEUSE = -2147221002;

const int CO_E_ERRORINAPP = -2147221001;

const int CO_E_DLLNOTFOUND = -2147221000;

const int CO_E_ERRORINDLL = -2147220999;

const int CO_E_WRONGOSFORAPP = -2147220998;

const int CO_E_OBJNOTREG = -2147220997;

const int CO_E_OBJISREG = -2147220996;

const int CO_E_OBJNOTCONNECTED = -2147220995;

const int CO_E_APPDIDNTREG = -2147220994;

const int CO_E_RELEASED = -2147220993;

const int EVENT_E_FIRST = 2147746304;

const int EVENT_E_LAST = 2147746335;

const int EVENT_S_FIRST = 262656;

const int EVENT_S_LAST = 262687;

const int EVENT_S_SOME_SUBSCRIBERS_FAILED = 262656;

const int EVENT_E_ALL_SUBSCRIBERS_FAILED = -2147220991;

const int EVENT_S_NOSUBSCRIBERS = 262658;

const int EVENT_E_QUERYSYNTAX = -2147220989;

const int EVENT_E_QUERYFIELD = -2147220988;

const int EVENT_E_INTERNALEXCEPTION = -2147220987;

const int EVENT_E_INTERNALERROR = -2147220986;

const int EVENT_E_INVALID_PER_USER_SID = -2147220985;

const int EVENT_E_USER_EXCEPTION = -2147220984;

const int EVENT_E_TOO_MANY_METHODS = -2147220983;

const int EVENT_E_MISSING_EVENTCLASS = -2147220982;

const int EVENT_E_NOT_ALL_REMOVED = -2147220981;

const int EVENT_E_COMPLUS_NOT_INSTALLED = -2147220980;

const int EVENT_E_CANT_MODIFY_OR_DELETE_UNCONFIGURED_OBJECT = -2147220979;

const int EVENT_E_CANT_MODIFY_OR_DELETE_CONFIGURED_OBJECT = -2147220978;

const int EVENT_E_INVALID_EVENT_CLASS_PARTITION = -2147220977;

const int EVENT_E_PER_USER_SID_NOT_LOGGED_ON = -2147220976;

const int TPC_E_INVALID_PROPERTY = -2147220927;

const int TPC_E_NO_DEFAULT_TABLET = -2147220974;

const int TPC_E_UNKNOWN_PROPERTY = -2147220965;

const int TPC_E_INVALID_INPUT_RECT = -2147220967;

const int TPC_E_INVALID_STROKE = -2147220958;

const int TPC_E_INITIALIZE_FAIL = -2147220957;

const int TPC_E_NOT_RELEVANT = -2147220942;

const int TPC_E_INVALID_PACKET_DESCRIPTION = -2147220941;

const int TPC_E_RECOGNIZER_NOT_REGISTERED = -2147220939;

const int TPC_E_INVALID_RIGHTS = -2147220938;

const int TPC_E_OUT_OF_ORDER_CALL = -2147220937;

const int TPC_E_QUEUE_FULL = -2147220936;

const int TPC_E_INVALID_CONFIGURATION = -2147220935;

const int TPC_E_INVALID_DATA_FROM_RECOGNIZER = -2147220934;

const int TPC_S_TRUNCATED = 262738;

const int TPC_S_INTERRUPTED = 262739;

const int TPC_S_NO_DATA_TO_PROCESS = 262740;

const int XACT_E_FIRST = 2147799040;

const int XACT_E_LAST = 2147799083;

const int XACT_S_FIRST = 315392;

const int XACT_S_LAST = 315408;

const int XACT_E_ALREADYOTHERSINGLEPHASE = -2147168256;

const int XACT_E_CANTRETAIN = -2147168255;

const int XACT_E_COMMITFAILED = -2147168254;

const int XACT_E_COMMITPREVENTED = -2147168253;

const int XACT_E_HEURISTICABORT = -2147168252;

const int XACT_E_HEURISTICCOMMIT = -2147168251;

const int XACT_E_HEURISTICDAMAGE = -2147168250;

const int XACT_E_HEURISTICDANGER = -2147168249;

const int XACT_E_ISOLATIONLEVEL = -2147168248;

const int XACT_E_NOASYNC = -2147168247;

const int XACT_E_NOENLIST = -2147168246;

const int XACT_E_NOISORETAIN = -2147168245;

const int XACT_E_NORESOURCE = -2147168244;

const int XACT_E_NOTCURRENT = -2147168243;

const int XACT_E_NOTRANSACTION = -2147168242;

const int XACT_E_NOTSUPPORTED = -2147168241;

const int XACT_E_UNKNOWNRMGRID = -2147168240;

const int XACT_E_WRONGSTATE = -2147168239;

const int XACT_E_WRONGUOW = -2147168238;

const int XACT_E_XTIONEXISTS = -2147168237;

const int XACT_E_NOIMPORTOBJECT = -2147168236;

const int XACT_E_INVALIDCOOKIE = -2147168235;

const int XACT_E_INDOUBT = -2147168234;

const int XACT_E_NOTIMEOUT = -2147168233;

const int XACT_E_ALREADYINPROGRESS = -2147168232;

const int XACT_E_ABORTED = -2147168231;

const int XACT_E_LOGFULL = -2147168230;

const int XACT_E_TMNOTAVAILABLE = -2147168229;

const int XACT_E_CONNECTION_DOWN = -2147168228;

const int XACT_E_CONNECTION_DENIED = -2147168227;

const int XACT_E_REENLISTTIMEOUT = -2147168226;

const int XACT_E_TIP_CONNECT_FAILED = -2147168225;

const int XACT_E_TIP_PROTOCOL_ERROR = -2147168224;

const int XACT_E_TIP_PULL_FAILED = -2147168223;

const int XACT_E_DEST_TMNOTAVAILABLE = -2147168222;

const int XACT_E_TIP_DISABLED = -2147168221;

const int XACT_E_NETWORK_TX_DISABLED = -2147168220;

const int XACT_E_PARTNER_NETWORK_TX_DISABLED = -2147168219;

const int XACT_E_XA_TX_DISABLED = -2147168218;

const int XACT_E_UNABLE_TO_READ_DTC_CONFIG = -2147168217;

const int XACT_E_UNABLE_TO_LOAD_DTC_PROXY = -2147168216;

const int XACT_E_ABORTING = -2147168215;

const int XACT_E_PUSH_COMM_FAILURE = -2147168214;

const int XACT_E_PULL_COMM_FAILURE = -2147168213;

const int XACT_E_LU_TX_DISABLED = -2147168212;

const int XACT_E_CLERKNOTFOUND = -2147168128;

const int XACT_E_CLERKEXISTS = -2147168127;

const int XACT_E_RECOVERYINPROGRESS = -2147168126;

const int XACT_E_TRANSACTIONCLOSED = -2147168125;

const int XACT_E_INVALIDLSN = -2147168124;

const int XACT_E_REPLAYREQUEST = -2147168123;

const int XACT_S_ASYNC = 315392;

const int XACT_S_DEFECT = 315393;

const int XACT_S_READONLY = 315394;

const int XACT_S_SOMENORETAIN = 315395;

const int XACT_S_OKINFORM = 315396;

const int XACT_S_MADECHANGESCONTENT = 315397;

const int XACT_S_MADECHANGESINFORM = 315398;

const int XACT_S_ALLNORETAIN = 315399;

const int XACT_S_ABORTING = 315400;

const int XACT_S_SINGLEPHASE = 315401;

const int XACT_S_LOCALLY_OK = 315402;

const int XACT_S_LASTRESOURCEMANAGER = 315408;

const int CONTEXT_E_FIRST = 2147803136;

const int CONTEXT_E_LAST = 2147803183;

const int CONTEXT_S_FIRST = 319488;

const int CONTEXT_S_LAST = 319535;

const int CONTEXT_E_ABORTED = -2147164158;

const int CONTEXT_E_ABORTING = -2147164157;

const int CONTEXT_E_NOCONTEXT = -2147164156;

const int CONTEXT_E_WOULD_DEADLOCK = -2147164155;

const int CONTEXT_E_SYNCH_TIMEOUT = -2147164154;

const int CONTEXT_E_OLDREF = -2147164153;

const int CONTEXT_E_ROLENOTFOUND = -2147164148;

const int CONTEXT_E_TMNOTAVAILABLE = -2147164145;

const int CO_E_ACTIVATIONFAILED = -2147164127;

const int CO_E_ACTIVATIONFAILED_EVENTLOGGED = -2147164126;

const int CO_E_ACTIVATIONFAILED_CATALOGERROR = -2147164125;

const int CO_E_ACTIVATIONFAILED_TIMEOUT = -2147164124;

const int CO_E_INITIALIZATIONFAILED = -2147164123;

const int CONTEXT_E_NOJIT = -2147164122;

const int CONTEXT_E_NOTRANSACTION = -2147164121;

const int CO_E_THREADINGMODEL_CHANGED = -2147164120;

const int CO_E_NOIISINTRINSICS = -2147164119;

const int CO_E_NOCOOKIES = -2147164118;

const int CO_E_DBERROR = -2147164117;

const int CO_E_NOTPOOLED = -2147164116;

const int CO_E_NOTCONSTRUCTED = -2147164115;

const int CO_E_NOSYNCHRONIZATION = -2147164114;

const int CO_E_ISOLEVELMISMATCH = -2147164113;

const int CO_E_CALL_OUT_OF_TX_SCOPE_NOT_ALLOWED = -2147164112;

const int CO_E_EXIT_TRANSACTION_SCOPE_NOT_CALLED = -2147164111;

const int OLE_S_USEREG = 262144;

const int OLE_S_STATIC = 262145;

const int OLE_S_MAC_CLIPFORMAT = 262146;

const int DRAGDROP_S_DROP = 262400;

const int DRAGDROP_S_CANCEL = 262401;

const int DRAGDROP_S_USEDEFAULTCURSORS = 262402;

const int DATA_S_SAMEFORMATETC = 262448;

const int VIEW_S_ALREADY_FROZEN = 262464;

const int CACHE_S_FORMATETC_NOTSUPPORTED = 262512;

const int CACHE_S_SAMECACHE = 262513;

const int CACHE_S_SOMECACHES_NOTUPDATED = 262514;

const int OLEOBJ_S_INVALIDVERB = 262528;

const int OLEOBJ_S_CANNOT_DOVERB_NOW = 262529;

const int OLEOBJ_S_INVALIDHWND = 262530;

const int INPLACE_S_TRUNCATED = 262560;

const int CONVERT10_S_NO_PRESENTATION = 262592;

const int MK_S_REDUCED_TO_SELF = 262626;

const int MK_S_ME = 262628;

const int MK_S_HIM = 262629;

const int MK_S_US = 262630;

const int MK_S_MONIKERALREADYREGISTERED = 262631;

const int SCHED_S_TASK_READY = 267008;

const int SCHED_S_TASK_RUNNING = 267009;

const int SCHED_S_TASK_DISABLED = 267010;

const int SCHED_S_TASK_HAS_NOT_RUN = 267011;

const int SCHED_S_TASK_NO_MORE_RUNS = 267012;

const int SCHED_S_TASK_NOT_SCHEDULED = 267013;

const int SCHED_S_TASK_TERMINATED = 267014;

const int SCHED_S_TASK_NO_VALID_TRIGGERS = 267015;

const int SCHED_S_EVENT_TRIGGER = 267016;

const int SCHED_E_TRIGGER_NOT_FOUND = -2147216631;

const int SCHED_E_TASK_NOT_READY = -2147216630;

const int SCHED_E_TASK_NOT_RUNNING = -2147216629;

const int SCHED_E_SERVICE_NOT_INSTALLED = -2147216628;

const int SCHED_E_CANNOT_OPEN_TASK = -2147216627;

const int SCHED_E_INVALID_TASK = -2147216626;

const int SCHED_E_ACCOUNT_INFORMATION_NOT_SET = -2147216625;

const int SCHED_E_ACCOUNT_NAME_NOT_FOUND = -2147216624;

const int SCHED_E_ACCOUNT_DBASE_CORRUPT = -2147216623;

const int SCHED_E_NO_SECURITY_SERVICES = -2147216622;

const int SCHED_E_UNKNOWN_OBJECT_VERSION = -2147216621;

const int SCHED_E_UNSUPPORTED_ACCOUNT_OPTION = -2147216620;

const int SCHED_E_SERVICE_NOT_RUNNING = -2147216619;

const int SCHED_E_UNEXPECTEDNODE = -2147216618;

const int SCHED_E_NAMESPACE = -2147216617;

const int SCHED_E_INVALIDVALUE = -2147216616;

const int SCHED_E_MISSINGNODE = -2147216615;

const int SCHED_E_MALFORMEDXML = -2147216614;

const int SCHED_S_SOME_TRIGGERS_FAILED = 267035;

const int SCHED_S_BATCH_LOGON_PROBLEM = 267036;

const int SCHED_E_TOO_MANY_NODES = -2147216611;

const int SCHED_E_PAST_END_BOUNDARY = -2147216610;

const int SCHED_E_ALREADY_RUNNING = -2147216609;

const int SCHED_E_USER_NOT_LOGGED_ON = -2147216608;

const int SCHED_E_INVALID_TASK_HASH = -2147216607;

const int SCHED_E_SERVICE_NOT_AVAILABLE = -2147216606;

const int SCHED_E_SERVICE_TOO_BUSY = -2147216605;

const int SCHED_E_TASK_ATTEMPTED = -2147216604;

const int SCHED_S_TASK_QUEUED = 267045;

const int SCHED_E_TASK_DISABLED = -2147216602;

const int SCHED_E_TASK_NOT_V1_COMPAT = -2147216601;

const int SCHED_E_START_ON_DEMAND = -2147216600;

const int SCHED_E_TASK_NOT_UBPM_COMPAT = -2147216599;

const int SCHED_E_DEPRECATED_FEATURE_USED = -2147216592;

const int CO_E_CLASS_CREATE_FAILED = -2146959359;

const int CO_E_SCM_ERROR = -2146959358;

const int CO_E_SCM_RPC_FAILURE = -2146959357;

const int CO_E_BAD_PATH = -2146959356;

const int CO_E_SERVER_EXEC_FAILURE = -2146959355;

const int CO_E_OBJSRV_RPC_FAILURE = -2146959354;

const int MK_E_NO_NORMALIZED = -2146959353;

const int CO_E_SERVER_STOPPING = -2146959352;

const int MEM_E_INVALID_ROOT = -2146959351;

const int MEM_E_INVALID_LINK = -2146959344;

const int MEM_E_INVALID_SIZE = -2146959343;

const int CO_S_NOTALLINTERFACES = 524306;

const int CO_S_MACHINENAMENOTFOUND = 524307;

const int CO_E_MISSING_DISPLAYNAME = -2146959339;

const int CO_E_RUNAS_VALUE_MUST_BE_AAA = -2146959338;

const int CO_E_ELEVATION_DISABLED = -2146959337;

const int APPX_E_PACKAGING_INTERNAL = -2146958848;

const int APPX_E_INTERLEAVING_NOT_ALLOWED = -2146958847;

const int APPX_E_RELATIONSHIPS_NOT_ALLOWED = -2146958846;

const int APPX_E_MISSING_REQUIRED_FILE = -2146958845;

const int APPX_E_INVALID_MANIFEST = -2146958844;

const int APPX_E_INVALID_BLOCKMAP = -2146958843;

const int APPX_E_CORRUPT_CONTENT = -2146958842;

const int APPX_E_BLOCK_HASH_INVALID = -2146958841;

const int APPX_E_REQUESTED_RANGE_TOO_LARGE = -2146958840;

const int APPX_E_INVALID_SIP_CLIENT_DATA = -2146958839;

const int APPX_E_INVALID_KEY_INFO = -2146958838;

const int APPX_E_INVALID_CONTENTGROUPMAP = -2146958837;

const int APPX_E_INVALID_APPINSTALLER = -2146958836;

const int APPX_E_DELTA_BASELINE_VERSION_MISMATCH = -2146958835;

const int APPX_E_DELTA_PACKAGE_MISSING_FILE = -2146958834;

const int APPX_E_INVALID_DELTA_PACKAGE = -2146958833;

const int APPX_E_DELTA_APPENDED_PACKAGE_NOT_ALLOWED = -2146958832;

const int APPX_E_INVALID_PACKAGING_LAYOUT = -2146958831;

const int APPX_E_INVALID_PACKAGESIGNCONFIG = -2146958830;

const int APPX_E_RESOURCESPRI_NOT_ALLOWED = -2146958829;

const int APPX_E_FILE_COMPRESSION_MISMATCH = -2146958828;

const int APPX_E_INVALID_PAYLOAD_PACKAGE_EXTENSION = -2146958827;

const int APPX_E_INVALID_ENCRYPTION_EXCLUSION_FILE_LIST = -2146958826;

const int BT_E_SPURIOUS_ACTIVATION = -2146958592;

const int DISP_E_UNKNOWNINTERFACE = -2147352575;

const int DISP_E_MEMBERNOTFOUND = -2147352573;

const int DISP_E_PARAMNOTFOUND = -2147352572;

const int DISP_E_TYPEMISMATCH = -2147352571;

const int DISP_E_UNKNOWNNAME = -2147352570;

const int DISP_E_NONAMEDARGS = -2147352569;

const int DISP_E_BADVARTYPE = -2147352568;

const int DISP_E_EXCEPTION = -2147352567;

const int DISP_E_OVERFLOW = -2147352566;

const int DISP_E_BADINDEX = -2147352565;

const int DISP_E_UNKNOWNLCID = -2147352564;

const int DISP_E_ARRAYISLOCKED = -2147352563;

const int DISP_E_BADPARAMCOUNT = -2147352562;

const int DISP_E_PARAMNOTOPTIONAL = -2147352561;

const int DISP_E_BADCALLEE = -2147352560;

const int DISP_E_NOTACOLLECTION = -2147352559;

const int DISP_E_DIVBYZERO = -2147352558;

const int DISP_E_BUFFERTOOSMALL = -2147352557;

const int TYPE_E_BUFFERTOOSMALL = -2147319786;

const int TYPE_E_FIELDNOTFOUND = -2147319785;

const int TYPE_E_INVDATAREAD = -2147319784;

const int TYPE_E_UNSUPFORMAT = -2147319783;

const int TYPE_E_REGISTRYACCESS = -2147319780;

const int TYPE_E_LIBNOTREGISTERED = -2147319779;

const int TYPE_E_UNDEFINEDTYPE = -2147319769;

const int TYPE_E_QUALIFIEDNAMEDISALLOWED = -2147319768;

const int TYPE_E_INVALIDSTATE = -2147319767;

const int TYPE_E_WRONGTYPEKIND = -2147319766;

const int TYPE_E_ELEMENTNOTFOUND = -2147319765;

const int TYPE_E_AMBIGUOUSNAME = -2147319764;

const int TYPE_E_NAMECONFLICT = -2147319763;

const int TYPE_E_UNKNOWNLCID = -2147319762;

const int TYPE_E_DLLFUNCTIONNOTFOUND = -2147319761;

const int TYPE_E_BADMODULEKIND = -2147317571;

const int TYPE_E_SIZETOOBIG = -2147317563;

const int TYPE_E_DUPLICATEID = -2147317562;

const int TYPE_E_INVALIDID = -2147317553;

const int TYPE_E_TYPEMISMATCH = -2147316576;

const int TYPE_E_OUTOFBOUNDS = -2147316575;

const int TYPE_E_IOERROR = -2147316574;

const int TYPE_E_CANTCREATETMPFILE = -2147316573;

const int TYPE_E_CANTLOADLIBRARY = -2147312566;

const int TYPE_E_INCONSISTENTPROPFUNCS = -2147312509;

const int TYPE_E_CIRCULARTYPE = -2147312508;

const int STG_E_INVALIDFUNCTION = -2147287039;

const int STG_E_FILENOTFOUND = -2147287038;

const int STG_E_PATHNOTFOUND = -2147287037;

const int STG_E_TOOMANYOPENFILES = -2147287036;

const int STG_E_ACCESSDENIED = -2147287035;

const int STG_E_INVALIDHANDLE = -2147287034;

const int STG_E_INSUFFICIENTMEMORY = -2147287032;

const int STG_E_INVALIDPOINTER = -2147287031;

const int STG_E_NOMOREFILES = -2147287022;

const int STG_E_DISKISWRITEPROTECTED = -2147287021;

const int STG_E_SEEKERROR = -2147287015;

const int STG_E_WRITEFAULT = -2147287011;

const int STG_E_READFAULT = -2147287010;

const int STG_E_SHAREVIOLATION = -2147287008;

const int STG_E_LOCKVIOLATION = -2147287007;

const int STG_E_FILEALREADYEXISTS = -2147286960;

const int STG_E_INVALIDPARAMETER = -2147286953;

const int STG_E_MEDIUMFULL = -2147286928;

const int STG_E_PROPSETMISMATCHED = -2147286800;

const int STG_E_ABNORMALAPIEXIT = -2147286790;

const int STG_E_INVALIDHEADER = -2147286789;

const int STG_E_INVALIDNAME = -2147286788;

const int STG_E_UNKNOWN = -2147286787;

const int STG_E_UNIMPLEMENTEDFUNCTION = -2147286786;

const int STG_E_INVALIDFLAG = -2147286785;

const int STG_E_INUSE = -2147286784;

const int STG_E_NOTCURRENT = -2147286783;

const int STG_E_REVERTED = -2147286782;

const int STG_E_CANTSAVE = -2147286781;

const int STG_E_OLDFORMAT = -2147286780;

const int STG_E_OLDDLL = -2147286779;

const int STG_E_SHAREREQUIRED = -2147286778;

const int STG_E_NOTFILEBASEDSTORAGE = -2147286777;

const int STG_E_EXTANTMARSHALLINGS = -2147286776;

const int STG_E_DOCFILECORRUPT = -2147286775;

const int STG_E_BADBASEADDRESS = -2147286768;

const int STG_E_DOCFILETOOLARGE = -2147286767;

const int STG_E_NOTSIMPLEFORMAT = -2147286766;

const int STG_E_INCOMPLETE = -2147286527;

const int STG_E_TERMINATED = -2147286526;

const int STG_S_CONVERTED = 197120;

const int STG_S_BLOCK = 197121;

const int STG_S_RETRYNOW = 197122;

const int STG_S_MONITORING = 197123;

const int STG_S_MULTIPLEOPENS = 197124;

const int STG_S_CONSOLIDATIONFAILED = 197125;

const int STG_S_CANNOTCONSOLIDATE = 197126;

const int STG_S_POWER_CYCLE_REQUIRED = 197127;

const int STG_E_FIRMWARE_SLOT_INVALID = -2147286520;

const int STG_E_FIRMWARE_IMAGE_INVALID = -2147286519;

const int STG_E_DEVICE_UNRESPONSIVE = -2147286518;

const int STG_E_STATUS_COPY_PROTECTION_FAILURE = -2147286267;

const int STG_E_CSS_AUTHENTICATION_FAILURE = -2147286266;

const int STG_E_CSS_KEY_NOT_PRESENT = -2147286265;

const int STG_E_CSS_KEY_NOT_ESTABLISHED = -2147286264;

const int STG_E_CSS_SCRAMBLED_SECTOR = -2147286263;

const int STG_E_CSS_REGION_MISMATCH = -2147286262;

const int STG_E_RESETS_EXHAUSTED = -2147286261;

const int RPC_E_CALL_REJECTED = -2147418111;

const int RPC_E_CALL_CANCELED = -2147418110;

const int RPC_E_CANTPOST_INSENDCALL = -2147418109;

const int RPC_E_CANTCALLOUT_INASYNCCALL = -2147418108;

const int RPC_E_CANTCALLOUT_INEXTERNALCALL = -2147418107;

const int RPC_E_CONNECTION_TERMINATED = -2147418106;

const int RPC_E_SERVER_DIED = -2147418105;

const int RPC_E_CLIENT_DIED = -2147418104;

const int RPC_E_INVALID_DATAPACKET = -2147418103;

const int RPC_E_CANTTRANSMIT_CALL = -2147418102;

const int RPC_E_CLIENT_CANTMARSHAL_DATA = -2147418101;

const int RPC_E_CLIENT_CANTUNMARSHAL_DATA = -2147418100;

const int RPC_E_SERVER_CANTMARSHAL_DATA = -2147418099;

const int RPC_E_SERVER_CANTUNMARSHAL_DATA = -2147418098;

const int RPC_E_INVALID_DATA = -2147418097;

const int RPC_E_INVALID_PARAMETER = -2147418096;

const int RPC_E_CANTCALLOUT_AGAIN = -2147418095;

const int RPC_E_SERVER_DIED_DNE = -2147418094;

const int RPC_E_SYS_CALL_FAILED = -2147417856;

const int RPC_E_OUT_OF_RESOURCES = -2147417855;

const int RPC_E_ATTEMPTED_MULTITHREAD = -2147417854;

const int RPC_E_NOT_REGISTERED = -2147417853;

const int RPC_E_FAULT = -2147417852;

const int RPC_E_SERVERFAULT = -2147417851;

const int RPC_E_CHANGED_MODE = -2147417850;

const int RPC_E_INVALIDMETHOD = -2147417849;

const int RPC_E_DISCONNECTED = -2147417848;

const int RPC_E_RETRY = -2147417847;

const int RPC_E_SERVERCALL_RETRYLATER = -2147417846;

const int RPC_E_SERVERCALL_REJECTED = -2147417845;

const int RPC_E_INVALID_CALLDATA = -2147417844;

const int RPC_E_CANTCALLOUT_ININPUTSYNCCALL = -2147417843;

const int RPC_E_WRONG_THREAD = -2147417842;

const int RPC_E_THREAD_NOT_INIT = -2147417841;

const int RPC_E_VERSION_MISMATCH = -2147417840;

const int RPC_E_INVALID_HEADER = -2147417839;

const int RPC_E_INVALID_EXTENSION = -2147417838;

const int RPC_E_INVALID_IPID = -2147417837;

const int RPC_E_INVALID_OBJECT = -2147417836;

const int RPC_S_CALLPENDING = -2147417835;

const int RPC_S_WAITONTIMER = -2147417834;

const int RPC_E_CALL_COMPLETE = -2147417833;

const int RPC_E_UNSECURE_CALL = -2147417832;

const int RPC_E_TOO_LATE = -2147417831;

const int RPC_E_NO_GOOD_SECURITY_PACKAGES = -2147417830;

const int RPC_E_ACCESS_DENIED = -2147417829;

const int RPC_E_REMOTE_DISABLED = -2147417828;

const int RPC_E_INVALID_OBJREF = -2147417827;

const int RPC_E_NO_CONTEXT = -2147417826;

const int RPC_E_TIMEOUT = -2147417825;

const int RPC_E_NO_SYNC = -2147417824;

const int RPC_E_FULLSIC_REQUIRED = -2147417823;

const int RPC_E_INVALID_STD_NAME = -2147417822;

const int CO_E_FAILEDTOIMPERSONATE = -2147417821;

const int CO_E_FAILEDTOGETSECCTX = -2147417820;

const int CO_E_FAILEDTOOPENTHREADTOKEN = -2147417819;

const int CO_E_FAILEDTOGETTOKENINFO = -2147417818;

const int CO_E_TRUSTEEDOESNTMATCHCLIENT = -2147417817;

const int CO_E_FAILEDTOQUERYCLIENTBLANKET = -2147417816;

const int CO_E_FAILEDTOSETDACL = -2147417815;

const int CO_E_ACCESSCHECKFAILED = -2147417814;

const int CO_E_NETACCESSAPIFAILED = -2147417813;

const int CO_E_WRONGTRUSTEENAMESYNTAX = -2147417812;

const int CO_E_INVALIDSID = -2147417811;

const int CO_E_CONVERSIONFAILED = -2147417810;

const int CO_E_NOMATCHINGSIDFOUND = -2147417809;

const int CO_E_LOOKUPACCSIDFAILED = -2147417808;

const int CO_E_NOMATCHINGNAMEFOUND = -2147417807;

const int CO_E_LOOKUPACCNAMEFAILED = -2147417806;

const int CO_E_SETSERLHNDLFAILED = -2147417805;

const int CO_E_FAILEDTOGETWINDIR = -2147417804;

const int CO_E_PATHTOOLONG = -2147417803;

const int CO_E_FAILEDTOGENUUID = -2147417802;

const int CO_E_FAILEDTOCREATEFILE = -2147417801;

const int CO_E_FAILEDTOCLOSEHANDLE = -2147417800;

const int CO_E_EXCEEDSYSACLLIMIT = -2147417799;

const int CO_E_ACESINWRONGORDER = -2147417798;

const int CO_E_INCOMPATIBLESTREAMVERSION = -2147417797;

const int CO_E_FAILEDTOOPENPROCESSTOKEN = -2147417796;

const int CO_E_DECODEFAILED = -2147417795;

const int CO_E_ACNOTINITIALIZED = -2147417793;

const int CO_E_CANCEL_DISABLED = -2147417792;

const int RPC_E_UNEXPECTED = -2147352577;

const int ERROR_AUDITING_DISABLED = -1073151999;

const int ERROR_ALL_SIDS_FILTERED = -1073151998;

const int ERROR_BIZRULES_NOT_ENABLED = -1073151997;

const int NTE_BAD_UID = -2146893823;

const int NTE_BAD_HASH = -2146893822;

const int NTE_BAD_KEY = -2146893821;

const int NTE_BAD_LEN = -2146893820;

const int NTE_BAD_DATA = -2146893819;

const int NTE_BAD_SIGNATURE = -2146893818;

const int NTE_BAD_VER = -2146893817;

const int NTE_BAD_ALGID = -2146893816;

const int NTE_BAD_FLAGS = -2146893815;

const int NTE_BAD_TYPE = -2146893814;

const int NTE_BAD_KEY_STATE = -2146893813;

const int NTE_BAD_HASH_STATE = -2146893812;

const int NTE_NO_KEY = -2146893811;

const int NTE_NO_MEMORY = -2146893810;

const int NTE_EXISTS = -2146893809;

const int NTE_PERM = -2146893808;

const int NTE_NOT_FOUND = -2146893807;

const int NTE_DOUBLE_ENCRYPT = -2146893806;

const int NTE_BAD_PROVIDER = -2146893805;

const int NTE_BAD_PROV_TYPE = -2146893804;

const int NTE_BAD_PUBLIC_KEY = -2146893803;

const int NTE_BAD_KEYSET = -2146893802;

const int NTE_PROV_TYPE_NOT_DEF = -2146893801;

const int NTE_PROV_TYPE_ENTRY_BAD = -2146893800;

const int NTE_KEYSET_NOT_DEF = -2146893799;

const int NTE_KEYSET_ENTRY_BAD = -2146893798;

const int NTE_PROV_TYPE_NO_MATCH = -2146893797;

const int NTE_SIGNATURE_FILE_BAD = -2146893796;

const int NTE_PROVIDER_DLL_FAIL = -2146893795;

const int NTE_PROV_DLL_NOT_FOUND = -2146893794;

const int NTE_BAD_KEYSET_PARAM = -2146893793;

const int NTE_FAIL = -2146893792;

const int NTE_SYS_ERR = -2146893791;

const int NTE_SILENT_CONTEXT = -2146893790;

const int NTE_TOKEN_KEYSET_STORAGE_FULL = -2146893789;

const int NTE_TEMPORARY_PROFILE = -2146893788;

const int NTE_FIXEDPARAMETER = -2146893787;

const int NTE_INVALID_HANDLE = -2146893786;

const int NTE_INVALID_PARAMETER = -2146893785;

const int NTE_BUFFER_TOO_SMALL = -2146893784;

const int NTE_NOT_SUPPORTED = -2146893783;

const int NTE_NO_MORE_ITEMS = -2146893782;

const int NTE_BUFFERS_OVERLAP = -2146893781;

const int NTE_DECRYPTION_FAILURE = -2146893780;

const int NTE_INTERNAL_ERROR = -2146893779;

const int NTE_UI_REQUIRED = -2146893778;

const int NTE_HMAC_NOT_SUPPORTED = -2146893777;

const int NTE_DEVICE_NOT_READY = -2146893776;

const int NTE_AUTHENTICATION_IGNORED = -2146893775;

const int NTE_VALIDATION_FAILED = -2146893774;

const int NTE_INCORRECT_PASSWORD = -2146893773;

const int NTE_ENCRYPTION_FAILURE = -2146893772;

const int NTE_DEVICE_NOT_FOUND = -2146893771;

const int NTE_USER_CANCELLED = -2146893770;

const int NTE_PASSWORD_CHANGE_REQUIRED = -2146893769;

const int NTE_NOT_ACTIVE_CONSOLE = -2146893768;

const int SEC_E_INSUFFICIENT_MEMORY = -2146893056;

const int SEC_E_INVALID_HANDLE = -2146893055;

const int SEC_E_UNSUPPORTED_FUNCTION = -2146893054;

const int SEC_E_TARGET_UNKNOWN = -2146893053;

const int SEC_E_INTERNAL_ERROR = -2146893052;

const int SEC_E_SECPKG_NOT_FOUND = -2146893051;

const int SEC_E_NOT_OWNER = -2146893050;

const int SEC_E_CANNOT_INSTALL = -2146893049;

const int SEC_E_INVALID_TOKEN = -2146893048;

const int SEC_E_CANNOT_PACK = -2146893047;

const int SEC_E_QOP_NOT_SUPPORTED = -2146893046;

const int SEC_E_NO_IMPERSONATION = -2146893045;

const int SEC_E_LOGON_DENIED = -2146893044;

const int SEC_E_UNKNOWN_CREDENTIALS = -2146893043;

const int SEC_E_NO_CREDENTIALS = -2146893042;

const int SEC_E_MESSAGE_ALTERED = -2146893041;

const int SEC_E_OUT_OF_SEQUENCE = -2146893040;

const int SEC_E_NO_AUTHENTICATING_AUTHORITY = -2146893039;

const int SEC_I_CONTINUE_NEEDED = 590610;

const int SEC_I_COMPLETE_NEEDED = 590611;

const int SEC_I_COMPLETE_AND_CONTINUE = 590612;

const int SEC_I_LOCAL_LOGON = 590613;

const int SEC_I_GENERIC_EXTENSION_RECEIVED = 590614;

const int SEC_E_BAD_PKGID = -2146893034;

const int SEC_E_CONTEXT_EXPIRED = -2146893033;

const int SEC_I_CONTEXT_EXPIRED = 590615;

const int SEC_E_INCOMPLETE_MESSAGE = -2146893032;

const int SEC_E_INCOMPLETE_CREDENTIALS = -2146893024;

const int SEC_E_BUFFER_TOO_SMALL = -2146893023;

const int SEC_I_INCOMPLETE_CREDENTIALS = 590624;

const int SEC_I_RENEGOTIATE = 590625;

const int SEC_E_WRONG_PRINCIPAL = -2146893022;

const int SEC_I_NO_LSA_CONTEXT = 590627;

const int SEC_E_TIME_SKEW = -2146893020;

const int SEC_E_UNTRUSTED_ROOT = -2146893019;

const int SEC_E_ILLEGAL_MESSAGE = -2146893018;

const int SEC_E_CERT_UNKNOWN = -2146893017;

const int SEC_E_CERT_EXPIRED = -2146893016;

const int SEC_E_ENCRYPT_FAILURE = -2146893015;

const int SEC_E_DECRYPT_FAILURE = -2146893008;

const int SEC_E_ALGORITHM_MISMATCH = -2146893007;

const int SEC_E_SECURITY_QOS_FAILED = -2146893006;

const int SEC_E_UNFINISHED_CONTEXT_DELETED = -2146893005;

const int SEC_E_NO_TGT_REPLY = -2146893004;

const int SEC_E_NO_IP_ADDRESSES = -2146893003;

const int SEC_E_WRONG_CREDENTIAL_HANDLE = -2146893002;

const int SEC_E_CRYPTO_SYSTEM_INVALID = -2146893001;

const int SEC_E_MAX_REFERRALS_EXCEEDED = -2146893000;

const int SEC_E_MUST_BE_KDC = -2146892999;

const int SEC_E_STRONG_CRYPTO_NOT_SUPPORTED = -2146892998;

const int SEC_E_TOO_MANY_PRINCIPALS = -2146892997;

const int SEC_E_NO_PA_DATA = -2146892996;

const int SEC_E_PKINIT_NAME_MISMATCH = -2146892995;

const int SEC_E_SMARTCARD_LOGON_REQUIRED = -2146892994;

const int SEC_E_SHUTDOWN_IN_PROGRESS = -2146892993;

const int SEC_E_KDC_INVALID_REQUEST = -2146892992;

const int SEC_E_KDC_UNABLE_TO_REFER = -2146892991;

const int SEC_E_KDC_UNKNOWN_ETYPE = -2146892990;

const int SEC_E_UNSUPPORTED_PREAUTH = -2146892989;

const int SEC_E_DELEGATION_REQUIRED = -2146892987;

const int SEC_E_BAD_BINDINGS = -2146892986;

const int SEC_E_MULTIPLE_ACCOUNTS = -2146892985;

const int SEC_E_NO_KERB_KEY = -2146892984;

const int SEC_E_CERT_WRONG_USAGE = -2146892983;

const int SEC_E_DOWNGRADE_DETECTED = -2146892976;

const int SEC_E_SMARTCARD_CERT_REVOKED = -2146892975;

const int SEC_E_ISSUING_CA_UNTRUSTED = -2146892974;

const int SEC_E_REVOCATION_OFFLINE_C = -2146892973;

const int SEC_E_PKINIT_CLIENT_FAILURE = -2146892972;

const int SEC_E_SMARTCARD_CERT_EXPIRED = -2146892971;

const int SEC_E_NO_S4U_PROT_SUPPORT = -2146892970;

const int SEC_E_CROSSREALM_DELEGATION_FAILURE = -2146892969;

const int SEC_E_REVOCATION_OFFLINE_KDC = -2146892968;

const int SEC_E_ISSUING_CA_UNTRUSTED_KDC = -2146892967;

const int SEC_E_KDC_CERT_EXPIRED = -2146892966;

const int SEC_E_KDC_CERT_REVOKED = -2146892965;

const int SEC_I_SIGNATURE_NEEDED = 590684;

const int SEC_E_INVALID_PARAMETER = -2146892963;

const int SEC_E_DELEGATION_POLICY = -2146892962;

const int SEC_E_POLICY_NLTM_ONLY = -2146892961;

const int SEC_I_NO_RENEGOTIATION = 590688;

const int SEC_E_NO_CONTEXT = -2146892959;

const int SEC_E_PKU2U_CERT_FAILURE = -2146892958;

const int SEC_E_MUTUAL_AUTH_FAILED = -2146892957;

const int SEC_I_MESSAGE_FRAGMENT = 590692;

const int SEC_E_ONLY_HTTPS_ALLOWED = -2146892955;

const int SEC_I_CONTINUE_NEEDED_MESSAGE_OK = 590694;

const int SEC_E_APPLICATION_PROTOCOL_MISMATCH = -2146892953;

const int SEC_I_ASYNC_CALL_PENDING = 590696;

const int SEC_E_INVALID_UPN_NAME = -2146892951;

const int SEC_E_EXT_BUFFER_TOO_SMALL = -2146892950;

const int SEC_E_INSUFFICIENT_BUFFERS = -2146892949;

const int SEC_E_NO_SPM = -2146893052;

const int SEC_E_NOT_SUPPORTED = -2146893054;

const int CRYPT_E_MSG_ERROR = -2146889727;

const int CRYPT_E_UNKNOWN_ALGO = -2146889726;

const int CRYPT_E_OID_FORMAT = -2146889725;

const int CRYPT_E_INVALID_MSG_TYPE = -2146889724;

const int CRYPT_E_UNEXPECTED_ENCODING = -2146889723;

const int CRYPT_E_AUTH_ATTR_MISSING = -2146889722;

const int CRYPT_E_HASH_VALUE = -2146889721;

const int CRYPT_E_INVALID_INDEX = -2146889720;

const int CRYPT_E_ALREADY_DECRYPTED = -2146889719;

const int CRYPT_E_NOT_DECRYPTED = -2146889718;

const int CRYPT_E_RECIPIENT_NOT_FOUND = -2146889717;

const int CRYPT_E_CONTROL_TYPE = -2146889716;

const int CRYPT_E_ISSUER_SERIALNUMBER = -2146889715;

const int CRYPT_E_SIGNER_NOT_FOUND = -2146889714;

const int CRYPT_E_ATTRIBUTES_MISSING = -2146889713;

const int CRYPT_E_STREAM_MSG_NOT_READY = -2146889712;

const int CRYPT_E_STREAM_INSUFFICIENT_DATA = -2146889711;

const int CRYPT_I_NEW_PROTECTION_REQUIRED = 593938;

const int CRYPT_E_BAD_LEN = -2146885631;

const int CRYPT_E_BAD_ENCODE = -2146885630;

const int CRYPT_E_FILE_ERROR = -2146885629;

const int CRYPT_E_NOT_FOUND = -2146885628;

const int CRYPT_E_EXISTS = -2146885627;

const int CRYPT_E_NO_PROVIDER = -2146885626;

const int CRYPT_E_SELF_SIGNED = -2146885625;

const int CRYPT_E_DELETED_PREV = -2146885624;

const int CRYPT_E_NO_MATCH = -2146885623;

const int CRYPT_E_UNEXPECTED_MSG_TYPE = -2146885622;

const int CRYPT_E_NO_KEY_PROPERTY = -2146885621;

const int CRYPT_E_NO_DECRYPT_CERT = -2146885620;

const int CRYPT_E_BAD_MSG = -2146885619;

const int CRYPT_E_NO_SIGNER = -2146885618;

const int CRYPT_E_PENDING_CLOSE = -2146885617;

const int CRYPT_E_REVOKED = -2146885616;

const int CRYPT_E_NO_REVOCATION_DLL = -2146885615;

const int CRYPT_E_NO_REVOCATION_CHECK = -2146885614;

const int CRYPT_E_REVOCATION_OFFLINE = -2146885613;

const int CRYPT_E_NOT_IN_REVOCATION_DATABASE = -2146885612;

const int CRYPT_E_INVALID_NUMERIC_STRING = -2146885600;

const int CRYPT_E_INVALID_PRINTABLE_STRING = -2146885599;

const int CRYPT_E_INVALID_IA5_STRING = -2146885598;

const int CRYPT_E_INVALID_X500_STRING = -2146885597;

const int CRYPT_E_NOT_CHAR_STRING = -2146885596;

const int CRYPT_E_FILERESIZED = -2146885595;

const int CRYPT_E_SECURITY_SETTINGS = -2146885594;

const int CRYPT_E_NO_VERIFY_USAGE_DLL = -2146885593;

const int CRYPT_E_NO_VERIFY_USAGE_CHECK = -2146885592;

const int CRYPT_E_VERIFY_USAGE_OFFLINE = -2146885591;

const int CRYPT_E_NOT_IN_CTL = -2146885590;

const int CRYPT_E_NO_TRUSTED_SIGNER = -2146885589;

const int CRYPT_E_MISSING_PUBKEY_PARA = -2146885588;

const int CRYPT_E_OBJECT_LOCATOR_OBJECT_NOT_FOUND = -2146885587;

const int CRYPT_E_OSS_ERROR = -2146881536;

const int OSS_MORE_BUF = -2146881535;

const int OSS_NEGATIVE_UINTEGER = -2146881534;

const int OSS_PDU_RANGE = -2146881533;

const int OSS_MORE_INPUT = -2146881532;

const int OSS_DATA_ERROR = -2146881531;

const int OSS_BAD_ARG = -2146881530;

const int OSS_BAD_VERSION = -2146881529;

const int OSS_OUT_MEMORY = -2146881528;

const int OSS_PDU_MISMATCH = -2146881527;

const int OSS_LIMITED = -2146881526;

const int OSS_BAD_PTR = -2146881525;

const int OSS_BAD_TIME = -2146881524;

const int OSS_INDEFINITE_NOT_SUPPORTED = -2146881523;

const int OSS_MEM_ERROR = -2146881522;

const int OSS_BAD_TABLE = -2146881521;

const int OSS_TOO_LONG = -2146881520;

const int OSS_CONSTRAINT_VIOLATED = -2146881519;

const int OSS_FATAL_ERROR = -2146881518;

const int OSS_ACCESS_SERIALIZATION_ERROR = -2146881517;

const int OSS_NULL_TBL = -2146881516;

const int OSS_NULL_FCN = -2146881515;

const int OSS_BAD_ENCRULES = -2146881514;

const int OSS_UNAVAIL_ENCRULES = -2146881513;

const int OSS_CANT_OPEN_TRACE_WINDOW = -2146881512;

const int OSS_UNIMPLEMENTED = -2146881511;

const int OSS_OID_DLL_NOT_LINKED = -2146881510;

const int OSS_CANT_OPEN_TRACE_FILE = -2146881509;

const int OSS_TRACE_FILE_ALREADY_OPEN = -2146881508;

const int OSS_TABLE_MISMATCH = -2146881507;

const int OSS_TYPE_NOT_SUPPORTED = -2146881506;

const int OSS_REAL_DLL_NOT_LINKED = -2146881505;

const int OSS_REAL_CODE_NOT_LINKED = -2146881504;

const int OSS_OUT_OF_RANGE = -2146881503;

const int OSS_COPIER_DLL_NOT_LINKED = -2146881502;

const int OSS_CONSTRAINT_DLL_NOT_LINKED = -2146881501;

const int OSS_COMPARATOR_DLL_NOT_LINKED = -2146881500;

const int OSS_COMPARATOR_CODE_NOT_LINKED = -2146881499;

const int OSS_MEM_MGR_DLL_NOT_LINKED = -2146881498;

const int OSS_PDV_DLL_NOT_LINKED = -2146881497;

const int OSS_PDV_CODE_NOT_LINKED = -2146881496;

const int OSS_API_DLL_NOT_LINKED = -2146881495;

const int OSS_BERDER_DLL_NOT_LINKED = -2146881494;

const int OSS_PER_DLL_NOT_LINKED = -2146881493;

const int OSS_OPEN_TYPE_ERROR = -2146881492;

const int OSS_MUTEX_NOT_CREATED = -2146881491;

const int OSS_CANT_CLOSE_TRACE_FILE = -2146881490;

const int CRYPT_E_ASN1_ERROR = -2146881280;

const int CRYPT_E_ASN1_INTERNAL = -2146881279;

const int CRYPT_E_ASN1_EOD = -2146881278;

const int CRYPT_E_ASN1_CORRUPT = -2146881277;

const int CRYPT_E_ASN1_LARGE = -2146881276;

const int CRYPT_E_ASN1_CONSTRAINT = -2146881275;

const int CRYPT_E_ASN1_MEMORY = -2146881274;

const int CRYPT_E_ASN1_OVERFLOW = -2146881273;

const int CRYPT_E_ASN1_BADPDU = -2146881272;

const int CRYPT_E_ASN1_BADARGS = -2146881271;

const int CRYPT_E_ASN1_BADREAL = -2146881270;

const int CRYPT_E_ASN1_BADTAG = -2146881269;

const int CRYPT_E_ASN1_CHOICE = -2146881268;

const int CRYPT_E_ASN1_RULE = -2146881267;

const int CRYPT_E_ASN1_UTF8 = -2146881266;

const int CRYPT_E_ASN1_PDU_TYPE = -2146881229;

const int CRYPT_E_ASN1_NYI = -2146881228;

const int CRYPT_E_ASN1_EXTENDED = -2146881023;

const int CRYPT_E_ASN1_NOEOD = -2146881022;

const int CERTSRV_E_BAD_REQUESTSUBJECT = -2146877439;

const int CERTSRV_E_NO_REQUEST = -2146877438;

const int CERTSRV_E_BAD_REQUESTSTATUS = -2146877437;

const int CERTSRV_E_PROPERTY_EMPTY = -2146877436;

const int CERTSRV_E_INVALID_CA_CERTIFICATE = -2146877435;

const int CERTSRV_E_SERVER_SUSPENDED = -2146877434;

const int CERTSRV_E_ENCODING_LENGTH = -2146877433;

const int CERTSRV_E_ROLECONFLICT = -2146877432;

const int CERTSRV_E_RESTRICTEDOFFICER = -2146877431;

const int CERTSRV_E_KEY_ARCHIVAL_NOT_CONFIGURED = -2146877430;

const int CERTSRV_E_NO_VALID_KRA = -2146877429;

const int CERTSRV_E_BAD_REQUEST_KEY_ARCHIVAL = -2146877428;

const int CERTSRV_E_NO_CAADMIN_DEFINED = -2146877427;

const int CERTSRV_E_BAD_RENEWAL_CERT_ATTRIBUTE = -2146877426;

const int CERTSRV_E_NO_DB_SESSIONS = -2146877425;

const int CERTSRV_E_ALIGNMENT_FAULT = -2146877424;

const int CERTSRV_E_ENROLL_DENIED = -2146877423;

const int CERTSRV_E_TEMPLATE_DENIED = -2146877422;

const int CERTSRV_E_DOWNLEVEL_DC_SSL_OR_UPGRADE = -2146877421;

const int CERTSRV_E_ADMIN_DENIED_REQUEST = -2146877420;

const int CERTSRV_E_NO_POLICY_SERVER = -2146877419;

const int CERTSRV_E_WEAK_SIGNATURE_OR_KEY = -2146877418;

const int CERTSRV_E_KEY_ATTESTATION_NOT_SUPPORTED = -2146877417;

const int CERTSRV_E_ENCRYPTION_CERT_REQUIRED = -2146877416;

const int CERTSRV_E_UNSUPPORTED_CERT_TYPE = -2146875392;

const int CERTSRV_E_NO_CERT_TYPE = -2146875391;

const int CERTSRV_E_TEMPLATE_CONFLICT = -2146875390;

const int CERTSRV_E_SUBJECT_ALT_NAME_REQUIRED = -2146875389;

const int CERTSRV_E_ARCHIVED_KEY_REQUIRED = -2146875388;

const int CERTSRV_E_SMIME_REQUIRED = -2146875387;

const int CERTSRV_E_BAD_RENEWAL_SUBJECT = -2146875386;

const int CERTSRV_E_BAD_TEMPLATE_VERSION = -2146875385;

const int CERTSRV_E_TEMPLATE_POLICY_REQUIRED = -2146875384;

const int CERTSRV_E_SIGNATURE_POLICY_REQUIRED = -2146875383;

const int CERTSRV_E_SIGNATURE_COUNT = -2146875382;

const int CERTSRV_E_SIGNATURE_REJECTED = -2146875381;

const int CERTSRV_E_ISSUANCE_POLICY_REQUIRED = -2146875380;

const int CERTSRV_E_SUBJECT_UPN_REQUIRED = -2146875379;

const int CERTSRV_E_SUBJECT_DIRECTORY_GUID_REQUIRED = -2146875378;

const int CERTSRV_E_SUBJECT_DNS_REQUIRED = -2146875377;

const int CERTSRV_E_ARCHIVED_KEY_UNEXPECTED = -2146875376;

const int CERTSRV_E_KEY_LENGTH = -2146875375;

const int CERTSRV_E_SUBJECT_EMAIL_REQUIRED = -2146875374;

const int CERTSRV_E_UNKNOWN_CERT_TYPE = -2146875373;

const int CERTSRV_E_CERT_TYPE_OVERLAP = -2146875372;

const int CERTSRV_E_TOO_MANY_SIGNATURES = -2146875371;

const int CERTSRV_E_RENEWAL_BAD_PUBLIC_KEY = -2146875370;

const int CERTSRV_E_INVALID_EK = -2146875369;

const int CERTSRV_E_INVALID_IDBINDING = -2146875368;

const int CERTSRV_E_INVALID_ATTESTATION = -2146875367;

const int CERTSRV_E_KEY_ATTESTATION = -2146875366;

const int CERTSRV_E_CORRUPT_KEY_ATTESTATION = -2146875365;

const int CERTSRV_E_EXPIRED_CHALLENGE = -2146875364;

const int CERTSRV_E_INVALID_RESPONSE = -2146875363;

const int CERTSRV_E_INVALID_REQUESTID = -2146875362;

const int CERTSRV_E_REQUEST_PRECERTIFICATE_MISMATCH = -2146875361;

const int CERTSRV_E_PENDING_CLIENT_RESPONSE = -2146875360;

const int XENROLL_E_KEY_NOT_EXPORTABLE = -2146873344;

const int XENROLL_E_CANNOT_ADD_ROOT_CERT = -2146873343;

const int XENROLL_E_RESPONSE_KA_HASH_NOT_FOUND = -2146873342;

const int XENROLL_E_RESPONSE_UNEXPECTED_KA_HASH = -2146873341;

const int XENROLL_E_RESPONSE_KA_HASH_MISMATCH = -2146873340;

const int XENROLL_E_KEYSPEC_SMIME_MISMATCH = -2146873339;

const int TRUST_E_SYSTEM_ERROR = -2146869247;

const int TRUST_E_NO_SIGNER_CERT = -2146869246;

const int TRUST_E_COUNTER_SIGNER = -2146869245;

const int TRUST_E_CERT_SIGNATURE = -2146869244;

const int TRUST_E_TIME_STAMP = -2146869243;

const int TRUST_E_BAD_DIGEST = -2146869232;

const int TRUST_E_MALFORMED_SIGNATURE = -2146869231;

const int TRUST_E_BASIC_CONSTRAINTS = -2146869223;

const int TRUST_E_FINANCIAL_CRITERIA = -2146869218;

const int MSSIPOTF_E_OUTOFMEMRANGE = -2146865151;

const int MSSIPOTF_E_CANTGETOBJECT = -2146865150;

const int MSSIPOTF_E_NOHEADTABLE = -2146865149;

const int MSSIPOTF_E_BAD_MAGICNUMBER = -2146865148;

const int MSSIPOTF_E_BAD_OFFSET_TABLE = -2146865147;

const int MSSIPOTF_E_TABLE_TAGORDER = -2146865146;

const int MSSIPOTF_E_TABLE_LONGWORD = -2146865145;

const int MSSIPOTF_E_BAD_FIRST_TABLE_PLACEMENT = -2146865144;

const int MSSIPOTF_E_TABLES_OVERLAP = -2146865143;

const int MSSIPOTF_E_TABLE_PADBYTES = -2146865142;

const int MSSIPOTF_E_FILETOOSMALL = -2146865141;

const int MSSIPOTF_E_TABLE_CHECKSUM = -2146865140;

const int MSSIPOTF_E_FILE_CHECKSUM = -2146865139;

const int MSSIPOTF_E_FAILED_POLICY = -2146865136;

const int MSSIPOTF_E_FAILED_HINTS_CHECK = -2146865135;

const int MSSIPOTF_E_NOT_OPENTYPE = -2146865134;

const int MSSIPOTF_E_FILE = -2146865133;

const int MSSIPOTF_E_CRYPT = -2146865132;

const int MSSIPOTF_E_BADVERSION = -2146865131;

const int MSSIPOTF_E_DSIG_STRUCTURE = -2146865130;

const int MSSIPOTF_E_PCONST_CHECK = -2146865129;

const int MSSIPOTF_E_STRUCTURE = -2146865128;

const int ERROR_CRED_REQUIRES_CONFIRMATION = -2146865127;

const int NTE_OP_OK = 0;

const int TRUST_E_PROVIDER_UNKNOWN = -2146762751;

const int TRUST_E_ACTION_UNKNOWN = -2146762750;

const int TRUST_E_SUBJECT_FORM_UNKNOWN = -2146762749;

const int TRUST_E_SUBJECT_NOT_TRUSTED = -2146762748;

const int DIGSIG_E_ENCODE = -2146762747;

const int DIGSIG_E_DECODE = -2146762746;

const int DIGSIG_E_EXTENSIBILITY = -2146762745;

const int DIGSIG_E_CRYPTO = -2146762744;

const int PERSIST_E_SIZEDEFINITE = -2146762743;

const int PERSIST_E_SIZEINDEFINITE = -2146762742;

const int PERSIST_E_NOTSELFSIZING = -2146762741;

const int TRUST_E_NOSIGNATURE = -2146762496;

const int CERT_E_EXPIRED = -2146762495;

const int CERT_E_VALIDITYPERIODNESTING = -2146762494;

const int CERT_E_ROLE = -2146762493;

const int CERT_E_PATHLENCONST = -2146762492;

const int CERT_E_CRITICAL = -2146762491;

const int CERT_E_PURPOSE = -2146762490;

const int CERT_E_ISSUERCHAINING = -2146762489;

const int CERT_E_MALFORMED = -2146762488;

const int CERT_E_UNTRUSTEDROOT = -2146762487;

const int CERT_E_CHAINING = -2146762486;

const int TRUST_E_FAIL = -2146762485;

const int CERT_E_REVOKED = -2146762484;

const int CERT_E_UNTRUSTEDTESTROOT = -2146762483;

const int CERT_E_REVOCATION_FAILURE = -2146762482;

const int CERT_E_CN_NO_MATCH = -2146762481;

const int CERT_E_WRONG_USAGE = -2146762480;

const int TRUST_E_EXPLICIT_DISTRUST = -2146762479;

const int CERT_E_UNTRUSTEDCA = -2146762478;

const int CERT_E_INVALID_POLICY = -2146762477;

const int CERT_E_INVALID_NAME = -2146762476;

const int SPAPI_E_EXPECTED_SECTION_NAME = -2146500608;

const int SPAPI_E_BAD_SECTION_NAME_LINE = -2146500607;

const int SPAPI_E_SECTION_NAME_TOO_LONG = -2146500606;

const int SPAPI_E_GENERAL_SYNTAX = -2146500605;

const int SPAPI_E_WRONG_INF_STYLE = -2146500352;

const int SPAPI_E_SECTION_NOT_FOUND = -2146500351;

const int SPAPI_E_LINE_NOT_FOUND = -2146500350;

const int SPAPI_E_NO_BACKUP = -2146500349;

const int SPAPI_E_NO_ASSOCIATED_CLASS = -2146500096;

const int SPAPI_E_CLASS_MISMATCH = -2146500095;

const int SPAPI_E_DUPLICATE_FOUND = -2146500094;

const int SPAPI_E_NO_DRIVER_SELECTED = -2146500093;

const int SPAPI_E_KEY_DOES_NOT_EXIST = -2146500092;

const int SPAPI_E_INVALID_DEVINST_NAME = -2146500091;

const int SPAPI_E_INVALID_CLASS = -2146500090;

const int SPAPI_E_DEVINST_ALREADY_EXISTS = -2146500089;

const int SPAPI_E_DEVINFO_NOT_REGISTERED = -2146500088;

const int SPAPI_E_INVALID_REG_PROPERTY = -2146500087;

const int SPAPI_E_NO_INF = -2146500086;

const int SPAPI_E_NO_SUCH_DEVINST = -2146500085;

const int SPAPI_E_CANT_LOAD_CLASS_ICON = -2146500084;

const int SPAPI_E_INVALID_CLASS_INSTALLER = -2146500083;

const int SPAPI_E_DI_DO_DEFAULT = -2146500082;

const int SPAPI_E_DI_NOFILECOPY = -2146500081;

const int SPAPI_E_INVALID_HWPROFILE = -2146500080;

const int SPAPI_E_NO_DEVICE_SELECTED = -2146500079;

const int SPAPI_E_DEVINFO_LIST_LOCKED = -2146500078;

const int SPAPI_E_DEVINFO_DATA_LOCKED = -2146500077;

const int SPAPI_E_DI_BAD_PATH = -2146500076;

const int SPAPI_E_NO_CLASSINSTALL_PARAMS = -2146500075;

const int SPAPI_E_FILEQUEUE_LOCKED = -2146500074;

const int SPAPI_E_BAD_SERVICE_INSTALLSECT = -2146500073;

const int SPAPI_E_NO_CLASS_DRIVER_LIST = -2146500072;

const int SPAPI_E_NO_ASSOCIATED_SERVICE = -2146500071;

const int SPAPI_E_NO_DEFAULT_DEVICE_INTERFACE = -2146500070;

const int SPAPI_E_DEVICE_INTERFACE_ACTIVE = -2146500069;

const int SPAPI_E_DEVICE_INTERFACE_REMOVED = -2146500068;

const int SPAPI_E_BAD_INTERFACE_INSTALLSECT = -2146500067;

const int SPAPI_E_NO_SUCH_INTERFACE_CLASS = -2146500066;

const int SPAPI_E_INVALID_REFERENCE_STRING = -2146500065;

const int SPAPI_E_INVALID_MACHINENAME = -2146500064;

const int SPAPI_E_REMOTE_COMM_FAILURE = -2146500063;

const int SPAPI_E_MACHINE_UNAVAILABLE = -2146500062;

const int SPAPI_E_NO_CONFIGMGR_SERVICES = -2146500061;

const int SPAPI_E_INVALID_PROPPAGE_PROVIDER = -2146500060;

const int SPAPI_E_NO_SUCH_DEVICE_INTERFACE = -2146500059;

const int SPAPI_E_DI_POSTPROCESSING_REQUIRED = -2146500058;

const int SPAPI_E_INVALID_COINSTALLER = -2146500057;

const int SPAPI_E_NO_COMPAT_DRIVERS = -2146500056;

const int SPAPI_E_NO_DEVICE_ICON = -2146500055;

const int SPAPI_E_INVALID_INF_LOGCONFIG = -2146500054;

const int SPAPI_E_DI_DONT_INSTALL = -2146500053;

const int SPAPI_E_INVALID_FILTER_DRIVER = -2146500052;

const int SPAPI_E_NON_WINDOWS_NT_DRIVER = -2146500051;

const int SPAPI_E_NON_WINDOWS_DRIVER = -2146500050;

const int SPAPI_E_NO_CATALOG_FOR_OEM_INF = -2146500049;

const int SPAPI_E_DEVINSTALL_QUEUE_NONNATIVE = -2146500048;

const int SPAPI_E_NOT_DISABLEABLE = -2146500047;

const int SPAPI_E_CANT_REMOVE_DEVINST = -2146500046;

const int SPAPI_E_INVALID_TARGET = -2146500045;

const int SPAPI_E_DRIVER_NONNATIVE = -2146500044;

const int SPAPI_E_IN_WOW64 = -2146500043;

const int SPAPI_E_SET_SYSTEM_RESTORE_POINT = -2146500042;

const int SPAPI_E_INCORRECTLY_COPIED_INF = -2146500041;

const int SPAPI_E_SCE_DISABLED = -2146500040;

const int SPAPI_E_UNKNOWN_EXCEPTION = -2146500039;

const int SPAPI_E_PNP_REGISTRY_ERROR = -2146500038;

const int SPAPI_E_REMOTE_REQUEST_UNSUPPORTED = -2146500037;

const int SPAPI_E_NOT_AN_INSTALLED_OEM_INF = -2146500036;

const int SPAPI_E_INF_IN_USE_BY_DEVICES = -2146500035;

const int SPAPI_E_DI_FUNCTION_OBSOLETE = -2146500034;

const int SPAPI_E_NO_AUTHENTICODE_CATALOG = -2146500033;

const int SPAPI_E_AUTHENTICODE_DISALLOWED = -2146500032;

const int SPAPI_E_AUTHENTICODE_TRUSTED_PUBLISHER = -2146500031;

const int SPAPI_E_AUTHENTICODE_TRUST_NOT_ESTABLISHED = -2146500030;

const int SPAPI_E_AUTHENTICODE_PUBLISHER_NOT_TRUSTED = -2146500029;

const int SPAPI_E_SIGNATURE_OSATTRIBUTE_MISMATCH = -2146500028;

const int SPAPI_E_ONLY_VALIDATE_VIA_AUTHENTICODE = -2146500027;

const int SPAPI_E_DEVICE_INSTALLER_NOT_READY = -2146500026;

const int SPAPI_E_DRIVER_STORE_ADD_FAILED = -2146500025;

const int SPAPI_E_DEVICE_INSTALL_BLOCKED = -2146500024;

const int SPAPI_E_DRIVER_INSTALL_BLOCKED = -2146500023;

const int SPAPI_E_WRONG_INF_TYPE = -2146500022;

const int SPAPI_E_FILE_HASH_NOT_IN_CATALOG = -2146500021;

const int SPAPI_E_DRIVER_STORE_DELETE_FAILED = -2146500020;

const int SPAPI_E_UNRECOVERABLE_STACK_OVERFLOW = -2146499840;

const int SPAPI_E_ERROR_NOT_INSTALLED = -2146496512;

const int SCARD_S_SUCCESS = 0;

const int SCARD_F_INTERNAL_ERROR = -2146435071;

const int SCARD_E_CANCELLED = -2146435070;

const int SCARD_E_INVALID_HANDLE = -2146435069;

const int SCARD_E_INVALID_PARAMETER = -2146435068;

const int SCARD_E_INVALID_TARGET = -2146435067;

const int SCARD_E_NO_MEMORY = -2146435066;

const int SCARD_F_WAITED_TOO_LONG = -2146435065;

const int SCARD_E_INSUFFICIENT_BUFFER = -2146435064;

const int SCARD_E_UNKNOWN_READER = -2146435063;

const int SCARD_E_TIMEOUT = -2146435062;

const int SCARD_E_SHARING_VIOLATION = -2146435061;

const int SCARD_E_NO_SMARTCARD = -2146435060;

const int SCARD_E_UNKNOWN_CARD = -2146435059;

const int SCARD_E_CANT_DISPOSE = -2146435058;

const int SCARD_E_PROTO_MISMATCH = -2146435057;

const int SCARD_E_NOT_READY = -2146435056;

const int SCARD_E_INVALID_VALUE = -2146435055;

const int SCARD_E_SYSTEM_CANCELLED = -2146435054;

const int SCARD_F_COMM_ERROR = -2146435053;

const int SCARD_F_UNKNOWN_ERROR = -2146435052;

const int SCARD_E_INVALID_ATR = -2146435051;

const int SCARD_E_NOT_TRANSACTED = -2146435050;

const int SCARD_E_READER_UNAVAILABLE = -2146435049;

const int SCARD_P_SHUTDOWN = -2146435048;

const int SCARD_E_PCI_TOO_SMALL = -2146435047;

const int SCARD_E_READER_UNSUPPORTED = -2146435046;

const int SCARD_E_DUPLICATE_READER = -2146435045;

const int SCARD_E_CARD_UNSUPPORTED = -2146435044;

const int SCARD_E_NO_SERVICE = -2146435043;

const int SCARD_E_SERVICE_STOPPED = -2146435042;

const int SCARD_E_UNEXPECTED = -2146435041;

const int SCARD_E_ICC_INSTALLATION = -2146435040;

const int SCARD_E_ICC_CREATEORDER = -2146435039;

const int SCARD_E_UNSUPPORTED_FEATURE = -2146435038;

const int SCARD_E_DIR_NOT_FOUND = -2146435037;

const int SCARD_E_FILE_NOT_FOUND = -2146435036;

const int SCARD_E_NO_DIR = -2146435035;

const int SCARD_E_NO_FILE = -2146435034;

const int SCARD_E_NO_ACCESS = -2146435033;

const int SCARD_E_WRITE_TOO_MANY = -2146435032;

const int SCARD_E_BAD_SEEK = -2146435031;

const int SCARD_E_INVALID_CHV = -2146435030;

const int SCARD_E_UNKNOWN_RES_MNG = -2146435029;

const int SCARD_E_NO_SUCH_CERTIFICATE = -2146435028;

const int SCARD_E_CERTIFICATE_UNAVAILABLE = -2146435027;

const int SCARD_E_NO_READERS_AVAILABLE = -2146435026;

const int SCARD_E_COMM_DATA_LOST = -2146435025;

const int SCARD_E_NO_KEY_CONTAINER = -2146435024;

const int SCARD_E_SERVER_TOO_BUSY = -2146435023;

const int SCARD_E_PIN_CACHE_EXPIRED = -2146435022;

const int SCARD_E_NO_PIN_CACHE = -2146435021;

const int SCARD_E_READ_ONLY_CARD = -2146435020;

const int SCARD_W_UNSUPPORTED_CARD = -2146434971;

const int SCARD_W_UNRESPONSIVE_CARD = -2146434970;

const int SCARD_W_UNPOWERED_CARD = -2146434969;

const int SCARD_W_RESET_CARD = -2146434968;

const int SCARD_W_REMOVED_CARD = -2146434967;

const int SCARD_W_SECURITY_VIOLATION = -2146434966;

const int SCARD_W_WRONG_CHV = -2146434965;

const int SCARD_W_CHV_BLOCKED = -2146434964;

const int SCARD_W_EOF = -2146434963;

const int SCARD_W_CANCELLED_BY_USER = -2146434962;

const int SCARD_W_CARD_NOT_AUTHENTICATED = -2146434961;

const int SCARD_W_CACHE_ITEM_NOT_FOUND = -2146434960;

const int SCARD_W_CACHE_ITEM_STALE = -2146434959;

const int SCARD_W_CACHE_ITEM_TOO_BIG = -2146434958;

const int COMADMIN_E_OBJECTERRORS = -2146368511;

const int COMADMIN_E_OBJECTINVALID = -2146368510;

const int COMADMIN_E_KEYMISSING = -2146368509;

const int COMADMIN_E_ALREADYINSTALLED = -2146368508;

const int COMADMIN_E_APP_FILE_WRITEFAIL = -2146368505;

const int COMADMIN_E_APP_FILE_READFAIL = -2146368504;

const int COMADMIN_E_APP_FILE_VERSION = -2146368503;

const int COMADMIN_E_BADPATH = -2146368502;

const int COMADMIN_E_APPLICATIONEXISTS = -2146368501;

const int COMADMIN_E_ROLEEXISTS = -2146368500;

const int COMADMIN_E_CANTCOPYFILE = -2146368499;

const int COMADMIN_E_NOUSER = -2146368497;

const int COMADMIN_E_INVALIDUSERIDS = -2146368496;

const int COMADMIN_E_NOREGISTRYCLSID = -2146368495;

const int COMADMIN_E_BADREGISTRYPROGID = -2146368494;

const int COMADMIN_E_AUTHENTICATIONLEVEL = -2146368493;

const int COMADMIN_E_USERPASSWDNOTVALID = -2146368492;

const int COMADMIN_E_CLSIDORIIDMISMATCH = -2146368488;

const int COMADMIN_E_REMOTEINTERFACE = -2146368487;

const int COMADMIN_E_DLLREGISTERSERVER = -2146368486;

const int COMADMIN_E_NOSERVERSHARE = -2146368485;

const int COMADMIN_E_DLLLOADFAILED = -2146368483;

const int COMADMIN_E_BADREGISTRYLIBID = -2146368482;

const int COMADMIN_E_APPDIRNOTFOUND = -2146368481;

const int COMADMIN_E_REGISTRARFAILED = -2146368477;

const int COMADMIN_E_COMPFILE_DOESNOTEXIST = -2146368476;

const int COMADMIN_E_COMPFILE_LOADDLLFAIL = -2146368475;

const int COMADMIN_E_COMPFILE_GETCLASSOBJ = -2146368474;

const int COMADMIN_E_COMPFILE_CLASSNOTAVAIL = -2146368473;

const int COMADMIN_E_COMPFILE_BADTLB = -2146368472;

const int COMADMIN_E_COMPFILE_NOTINSTALLABLE = -2146368471;

const int COMADMIN_E_NOTCHANGEABLE = -2146368470;

const int COMADMIN_E_NOTDELETEABLE = -2146368469;

const int COMADMIN_E_SESSION = -2146368468;

const int COMADMIN_E_COMP_MOVE_LOCKED = -2146368467;

const int COMADMIN_E_COMP_MOVE_BAD_DEST = -2146368466;

const int COMADMIN_E_REGISTERTLB = -2146368464;

const int COMADMIN_E_SYSTEMAPP = -2146368461;

const int COMADMIN_E_COMPFILE_NOREGISTRAR = -2146368460;

const int COMADMIN_E_COREQCOMPINSTALLED = -2146368459;

const int COMADMIN_E_SERVICENOTINSTALLED = -2146368458;

const int COMADMIN_E_PROPERTYSAVEFAILED = -2146368457;

const int COMADMIN_E_OBJECTEXISTS = -2146368456;

const int COMADMIN_E_COMPONENTEXISTS = -2146368455;

const int COMADMIN_E_REGFILE_CORRUPT = -2146368453;

const int COMADMIN_E_PROPERTY_OVERFLOW = -2146368452;

const int COMADMIN_E_NOTINREGISTRY = -2146368450;

const int COMADMIN_E_OBJECTNOTPOOLABLE = -2146368449;

const int COMADMIN_E_APPLID_MATCHES_CLSID = -2146368442;

const int COMADMIN_E_ROLE_DOES_NOT_EXIST = -2146368441;

const int COMADMIN_E_START_APP_NEEDS_COMPONENTS = -2146368440;

const int COMADMIN_E_REQUIRES_DIFFERENT_PLATFORM = -2146368439;

const int COMADMIN_E_CAN_NOT_EXPORT_APP_PROXY = -2146368438;

const int COMADMIN_E_CAN_NOT_START_APP = -2146368437;

const int COMADMIN_E_CAN_NOT_EXPORT_SYS_APP = -2146368436;

const int COMADMIN_E_CANT_SUBSCRIBE_TO_COMPONENT = -2146368435;

const int COMADMIN_E_EVENTCLASS_CANT_BE_SUBSCRIBER = -2146368434;

const int COMADMIN_E_LIB_APP_PROXY_INCOMPATIBLE = -2146368433;

const int COMADMIN_E_BASE_PARTITION_ONLY = -2146368432;

const int COMADMIN_E_START_APP_DISABLED = -2146368431;

const int COMADMIN_E_CAT_DUPLICATE_PARTITION_NAME = -2146368425;

const int COMADMIN_E_CAT_INVALID_PARTITION_NAME = -2146368424;

const int COMADMIN_E_CAT_PARTITION_IN_USE = -2146368423;

const int COMADMIN_E_FILE_PARTITION_DUPLICATE_FILES = -2146368422;

const int COMADMIN_E_CAT_IMPORTED_COMPONENTS_NOT_ALLOWED = -2146368421;

const int COMADMIN_E_AMBIGUOUS_APPLICATION_NAME = -2146368420;

const int COMADMIN_E_AMBIGUOUS_PARTITION_NAME = -2146368419;

const int COMADMIN_E_REGDB_NOTINITIALIZED = -2146368398;

const int COMADMIN_E_REGDB_NOTOPEN = -2146368397;

const int COMADMIN_E_REGDB_SYSTEMERR = -2146368396;

const int COMADMIN_E_REGDB_ALREADYRUNNING = -2146368395;

const int COMADMIN_E_MIG_VERSIONNOTSUPPORTED = -2146368384;

const int COMADMIN_E_MIG_SCHEMANOTFOUND = -2146368383;

const int COMADMIN_E_CAT_BITNESSMISMATCH = -2146368382;

const int COMADMIN_E_CAT_UNACCEPTABLEBITNESS = -2146368381;

const int COMADMIN_E_CAT_WRONGAPPBITNESS = -2146368380;

const int COMADMIN_E_CAT_PAUSE_RESUME_NOT_SUPPORTED = -2146368379;

const int COMADMIN_E_CAT_SERVERFAULT = -2146368378;

const int COMQC_E_APPLICATION_NOT_QUEUED = -2146368000;

const int COMQC_E_NO_QUEUEABLE_INTERFACES = -2146367999;

const int COMQC_E_QUEUING_SERVICE_NOT_AVAILABLE = -2146367998;

const int COMQC_E_NO_IPERSISTSTREAM = -2146367997;

const int COMQC_E_BAD_MESSAGE = -2146367996;

const int COMQC_E_UNAUTHENTICATED = -2146367995;

const int COMQC_E_UNTRUSTED_ENQUEUER = -2146367994;

const int MSDTC_E_DUPLICATE_RESOURCE = -2146367743;

const int COMADMIN_E_OBJECT_PARENT_MISSING = -2146367480;

const int COMADMIN_E_OBJECT_DOES_NOT_EXIST = -2146367479;

const int COMADMIN_E_APP_NOT_RUNNING = -2146367478;

const int COMADMIN_E_INVALID_PARTITION = -2146367477;

const int COMADMIN_E_SVCAPP_NOT_POOLABLE_OR_RECYCLABLE = -2146367475;

const int COMADMIN_E_USER_IN_SET = -2146367474;

const int COMADMIN_E_CANTRECYCLELIBRARYAPPS = -2146367473;

const int COMADMIN_E_CANTRECYCLESERVICEAPPS = -2146367471;

const int COMADMIN_E_PROCESSALREADYRECYCLED = -2146367470;

const int COMADMIN_E_PAUSEDPROCESSMAYNOTBERECYCLED = -2146367469;

const int COMADMIN_E_CANTMAKEINPROCSERVICE = -2146367468;

const int COMADMIN_E_PROGIDINUSEBYCLSID = -2146367467;

const int COMADMIN_E_DEFAULT_PARTITION_NOT_IN_SET = -2146367466;

const int COMADMIN_E_RECYCLEDPROCESSMAYNOTBEPAUSED = -2146367465;

const int COMADMIN_E_PARTITION_ACCESSDENIED = -2146367464;

const int COMADMIN_E_PARTITION_MSI_ONLY = -2146367463;

const int COMADMIN_E_LEGACYCOMPS_NOT_ALLOWED_IN_1_0_FORMAT = -2146367462;

const int COMADMIN_E_LEGACYCOMPS_NOT_ALLOWED_IN_NONBASE_PARTITIONS =
    -2146367461;

const int COMADMIN_E_COMP_MOVE_SOURCE = -2146367460;

const int COMADMIN_E_COMP_MOVE_DEST = -2146367459;

const int COMADMIN_E_COMP_MOVE_PRIVATE = -2146367458;

const int COMADMIN_E_BASEPARTITION_REQUIRED_IN_SET = -2146367457;

const int COMADMIN_E_CANNOT_ALIAS_EVENTCLASS = -2146367456;

const int COMADMIN_E_PRIVATE_ACCESSDENIED = -2146367455;

const int COMADMIN_E_SAFERINVALID = -2146367454;

const int COMADMIN_E_REGISTRY_ACCESSDENIED = -2146367453;

const int COMADMIN_E_PARTITIONS_DISABLED = -2146367452;

const int WER_S_REPORT_DEBUG = 1769472;

const int WER_S_REPORT_UPLOADED = 1769473;

const int WER_S_REPORT_QUEUED = 1769474;

const int WER_S_DISABLED = 1769475;

const int WER_S_SUSPENDED_UPLOAD = 1769476;

const int WER_S_DISABLED_QUEUE = 1769477;

const int WER_S_DISABLED_ARCHIVE = 1769478;

const int WER_S_REPORT_ASYNC = 1769479;

const int WER_S_IGNORE_ASSERT_INSTANCE = 1769480;

const int WER_S_IGNORE_ALL_ASSERTS = 1769481;

const int WER_S_ASSERT_CONTINUE = 1769482;

const int WER_S_THROTTLED = 1769483;

const int WER_S_REPORT_UPLOADED_CAB = 1769484;

const int WER_E_CRASH_FAILURE = -2145681408;

const int WER_E_CANCELED = -2145681407;

const int WER_E_NETWORK_FAILURE = -2145681406;

const int WER_E_NOT_INITIALIZED = -2145681405;

const int WER_E_ALREADY_REPORTING = -2145681404;

const int WER_E_DUMP_THROTTLED = -2145681403;

const int WER_E_INSUFFICIENT_CONSENT = -2145681402;

const int WER_E_TOO_HEAVY = -2145681401;

const int ERROR_FLT_IO_COMPLETE = 2031617;

const int ERROR_FLT_NO_HANDLER_DEFINED = -2145452031;

const int ERROR_FLT_CONTEXT_ALREADY_DEFINED = -2145452030;

const int ERROR_FLT_INVALID_ASYNCHRONOUS_REQUEST = -2145452029;

const int ERROR_FLT_DISALLOW_FAST_IO = -2145452028;

const int ERROR_FLT_INVALID_NAME_REQUEST = -2145452027;

const int ERROR_FLT_NOT_SAFE_TO_POST_OPERATION = -2145452026;

const int ERROR_FLT_NOT_INITIALIZED = -2145452025;

const int ERROR_FLT_FILTER_NOT_READY = -2145452024;

const int ERROR_FLT_POST_OPERATION_CLEANUP = -2145452023;

const int ERROR_FLT_INTERNAL_ERROR = -2145452022;

const int ERROR_FLT_DELETING_OBJECT = -2145452021;

const int ERROR_FLT_MUST_BE_NONPAGED_POOL = -2145452020;

const int ERROR_FLT_DUPLICATE_ENTRY = -2145452019;

const int ERROR_FLT_CBDQ_DISABLED = -2145452018;

const int ERROR_FLT_DO_NOT_ATTACH = -2145452017;

const int ERROR_FLT_DO_NOT_DETACH = -2145452016;

const int ERROR_FLT_INSTANCE_ALTITUDE_COLLISION = -2145452015;

const int ERROR_FLT_INSTANCE_NAME_COLLISION = -2145452014;

const int ERROR_FLT_FILTER_NOT_FOUND = -2145452013;

const int ERROR_FLT_VOLUME_NOT_FOUND = -2145452012;

const int ERROR_FLT_INSTANCE_NOT_FOUND = -2145452011;

const int ERROR_FLT_CONTEXT_ALLOCATION_NOT_FOUND = -2145452010;

const int ERROR_FLT_INVALID_CONTEXT_REGISTRATION = -2145452009;

const int ERROR_FLT_NAME_CACHE_MISS = -2145452008;

const int ERROR_FLT_NO_DEVICE_OBJECT = -2145452007;

const int ERROR_FLT_VOLUME_ALREADY_MOUNTED = -2145452006;

const int ERROR_FLT_ALREADY_ENLISTED = -2145452005;

const int ERROR_FLT_CONTEXT_ALREADY_LINKED = -2145452004;

const int ERROR_FLT_NO_WAITER_FOR_REPLY = -2145452000;

const int ERROR_FLT_REGISTRATION_BUSY = -2145451997;

const int ERROR_HUNG_DISPLAY_DRIVER_THREAD = -2144993279;

const int DWM_E_COMPOSITIONDISABLED = -2144980991;

const int DWM_E_REMOTING_NOT_SUPPORTED = -2144980990;

const int DWM_E_NO_REDIRECTION_SURFACE_AVAILABLE = -2144980989;

const int DWM_E_NOT_QUEUING_PRESENTS = -2144980988;

const int DWM_E_ADAPTER_NOT_FOUND = -2144980987;

const int DWM_S_GDI_REDIRECTION_SURFACE = 2502661;

const int DWM_E_TEXTURE_TOO_LARGE = -2144980985;

const int DWM_S_GDI_REDIRECTION_SURFACE_BLT_VIA_GDI = 2502664;

const int ERROR_MONITOR_NO_DESCRIPTOR = 2494465;

const int ERROR_MONITOR_UNKNOWN_DESCRIPTOR_FORMAT = 2494466;

const int ERROR_MONITOR_INVALID_DESCRIPTOR_CHECKSUM = -1071247357;

const int ERROR_MONITOR_INVALID_STANDARD_TIMING_BLOCK = -1071247356;

const int ERROR_MONITOR_WMI_DATABLOCK_REGISTRATION_FAILED = -1071247355;

const int ERROR_MONITOR_INVALID_SERIAL_NUMBER_MONDSC_BLOCK = -1071247354;

const int ERROR_MONITOR_INVALID_USER_FRIENDLY_MONDSC_BLOCK = -1071247353;

const int ERROR_MONITOR_NO_MORE_DESCRIPTOR_DATA = -1071247352;

const int ERROR_MONITOR_INVALID_DETAILED_TIMING_BLOCK = -1071247351;

const int ERROR_MONITOR_INVALID_MANUFACTURE_DATE = -1071247350;

const int ERROR_GRAPHICS_NOT_EXCLUSIVE_MODE_OWNER = -1071243264;

const int ERROR_GRAPHICS_INSUFFICIENT_DMA_BUFFER = -1071243263;

const int ERROR_GRAPHICS_INVALID_DISPLAY_ADAPTER = -1071243262;

const int ERROR_GRAPHICS_ADAPTER_WAS_RESET = -1071243261;

const int ERROR_GRAPHICS_INVALID_DRIVER_MODEL = -1071243260;

const int ERROR_GRAPHICS_PRESENT_MODE_CHANGED = -1071243259;

const int ERROR_GRAPHICS_PRESENT_OCCLUDED = -1071243258;

const int ERROR_GRAPHICS_PRESENT_DENIED = -1071243257;

const int ERROR_GRAPHICS_CANNOTCOLORCONVERT = -1071243256;

const int ERROR_GRAPHICS_DRIVER_MISMATCH = -1071243255;

const int ERROR_GRAPHICS_PARTIAL_DATA_POPULATED = 1076240394;

const int ERROR_GRAPHICS_PRESENT_REDIRECTION_DISABLED = -1071243253;

const int ERROR_GRAPHICS_PRESENT_UNOCCLUDED = -1071243252;

const int ERROR_GRAPHICS_WINDOWDC_NOT_AVAILABLE = -1071243251;

const int ERROR_GRAPHICS_WINDOWLESS_PRESENT_DISABLED = -1071243250;

const int ERROR_GRAPHICS_PRESENT_INVALID_WINDOW = -1071243249;

const int ERROR_GRAPHICS_PRESENT_BUFFER_NOT_BOUND = -1071243248;

const int ERROR_GRAPHICS_VAIL_STATE_CHANGED = -1071243247;

const int ERROR_GRAPHICS_INDIRECT_DISPLAY_ABANDON_SWAPCHAIN = -1071243246;

const int ERROR_GRAPHICS_INDIRECT_DISPLAY_DEVICE_STOPPED = -1071243245;

const int ERROR_GRAPHICS_VAIL_FAILED_TO_SEND_CREATE_SUPERWETINK_MESSAGE =
    -1071243244;

const int ERROR_GRAPHICS_VAIL_FAILED_TO_SEND_DESTROY_SUPERWETINK_MESSAGE =
    -1071243243;

const int ERROR_GRAPHICS_NO_VIDEO_MEMORY = -1071243008;

const int ERROR_GRAPHICS_CANT_LOCK_MEMORY = -1071243007;

const int ERROR_GRAPHICS_ALLOCATION_BUSY = -1071243006;

const int ERROR_GRAPHICS_TOO_MANY_REFERENCES = -1071243005;

const int ERROR_GRAPHICS_TRY_AGAIN_LATER = -1071243004;

const int ERROR_GRAPHICS_TRY_AGAIN_NOW = -1071243003;

const int ERROR_GRAPHICS_ALLOCATION_INVALID = -1071243002;

const int ERROR_GRAPHICS_UNSWIZZLING_APERTURE_UNAVAILABLE = -1071243001;

const int ERROR_GRAPHICS_UNSWIZZLING_APERTURE_UNSUPPORTED = -1071243000;

const int ERROR_GRAPHICS_CANT_EVICT_PINNED_ALLOCATION = -1071242999;

const int ERROR_GRAPHICS_INVALID_ALLOCATION_USAGE = -1071242992;

const int ERROR_GRAPHICS_CANT_RENDER_LOCKED_ALLOCATION = -1071242991;

const int ERROR_GRAPHICS_ALLOCATION_CLOSED = -1071242990;

const int ERROR_GRAPHICS_INVALID_ALLOCATION_INSTANCE = -1071242989;

const int ERROR_GRAPHICS_INVALID_ALLOCATION_HANDLE = -1071242988;

const int ERROR_GRAPHICS_WRONG_ALLOCATION_DEVICE = -1071242987;

const int ERROR_GRAPHICS_ALLOCATION_CONTENT_LOST = -1071242986;

const int ERROR_GRAPHICS_GPU_EXCEPTION_ON_DEVICE = -1071242752;

const int ERROR_GRAPHICS_SKIP_ALLOCATION_PREPARATION = 1076240897;

const int ERROR_GRAPHICS_INVALID_VIDPN_TOPOLOGY = -1071242496;

const int ERROR_GRAPHICS_VIDPN_TOPOLOGY_NOT_SUPPORTED = -1071242495;

const int ERROR_GRAPHICS_VIDPN_TOPOLOGY_CURRENTLY_NOT_SUPPORTED = -1071242494;

const int ERROR_GRAPHICS_INVALID_VIDPN = -1071242493;

const int ERROR_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE = -1071242492;

const int ERROR_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET = -1071242491;

const int ERROR_GRAPHICS_VIDPN_MODALITY_NOT_SUPPORTED = -1071242490;

const int ERROR_GRAPHICS_MODE_NOT_PINNED = 2499335;

const int ERROR_GRAPHICS_INVALID_VIDPN_SOURCEMODESET = -1071242488;

const int ERROR_GRAPHICS_INVALID_VIDPN_TARGETMODESET = -1071242487;

const int ERROR_GRAPHICS_INVALID_FREQUENCY = -1071242486;

const int ERROR_GRAPHICS_INVALID_ACTIVE_REGION = -1071242485;

const int ERROR_GRAPHICS_INVALID_TOTAL_REGION = -1071242484;

const int ERROR_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE_MODE = -1071242480;

const int ERROR_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET_MODE = -1071242479;

const int ERROR_GRAPHICS_PINNED_MODE_MUST_REMAIN_IN_SET = -1071242478;

const int ERROR_GRAPHICS_PATH_ALREADY_IN_TOPOLOGY = -1071242477;

const int ERROR_GRAPHICS_MODE_ALREADY_IN_MODESET = -1071242476;

const int ERROR_GRAPHICS_INVALID_VIDEOPRESENTSOURCESET = -1071242475;

const int ERROR_GRAPHICS_INVALID_VIDEOPRESENTTARGETSET = -1071242474;

const int ERROR_GRAPHICS_SOURCE_ALREADY_IN_SET = -1071242473;

const int ERROR_GRAPHICS_TARGET_ALREADY_IN_SET = -1071242472;

const int ERROR_GRAPHICS_INVALID_VIDPN_PRESENT_PATH = -1071242471;

const int ERROR_GRAPHICS_NO_RECOMMENDED_VIDPN_TOPOLOGY = -1071242470;

const int ERROR_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGESET = -1071242469;

const int ERROR_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE = -1071242468;

const int ERROR_GRAPHICS_FREQUENCYRANGE_NOT_IN_SET = -1071242467;

const int ERROR_GRAPHICS_NO_PREFERRED_MODE = 2499358;

const int ERROR_GRAPHICS_FREQUENCYRANGE_ALREADY_IN_SET = -1071242465;

const int ERROR_GRAPHICS_STALE_MODESET = -1071242464;

const int ERROR_GRAPHICS_INVALID_MONITOR_SOURCEMODESET = -1071242463;

const int ERROR_GRAPHICS_INVALID_MONITOR_SOURCE_MODE = -1071242462;

const int ERROR_GRAPHICS_NO_RECOMMENDED_FUNCTIONAL_VIDPN = -1071242461;

const int ERROR_GRAPHICS_MODE_ID_MUST_BE_UNIQUE = -1071242460;

const int ERROR_GRAPHICS_EMPTY_ADAPTER_MONITOR_MODE_SUPPORT_INTERSECTION =
    -1071242459;

const int ERROR_GRAPHICS_VIDEO_PRESENT_TARGETS_LESS_THAN_SOURCES = -1071242458;

const int ERROR_GRAPHICS_PATH_NOT_IN_TOPOLOGY = -1071242457;

const int ERROR_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_SOURCE = -1071242456;

const int ERROR_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_TARGET = -1071242455;

const int ERROR_GRAPHICS_INVALID_MONITORDESCRIPTORSET = -1071242454;

const int ERROR_GRAPHICS_INVALID_MONITORDESCRIPTOR = -1071242453;

const int ERROR_GRAPHICS_MONITORDESCRIPTOR_NOT_IN_SET = -1071242452;

const int ERROR_GRAPHICS_MONITORDESCRIPTOR_ALREADY_IN_SET = -1071242451;

const int ERROR_GRAPHICS_MONITORDESCRIPTOR_ID_MUST_BE_UNIQUE = -1071242450;

const int ERROR_GRAPHICS_INVALID_VIDPN_TARGET_SUBSET_TYPE = -1071242449;

const int ERROR_GRAPHICS_RESOURCES_NOT_RELATED = -1071242448;

const int ERROR_GRAPHICS_SOURCE_ID_MUST_BE_UNIQUE = -1071242447;

const int ERROR_GRAPHICS_TARGET_ID_MUST_BE_UNIQUE = -1071242446;

const int ERROR_GRAPHICS_NO_AVAILABLE_VIDPN_TARGET = -1071242445;

const int ERROR_GRAPHICS_MONITOR_COULD_NOT_BE_ASSOCIATED_WITH_ADAPTER =
    -1071242444;

const int ERROR_GRAPHICS_NO_VIDPNMGR = -1071242443;

const int ERROR_GRAPHICS_NO_ACTIVE_VIDPN = -1071242442;

const int ERROR_GRAPHICS_STALE_VIDPN_TOPOLOGY = -1071242441;

const int ERROR_GRAPHICS_MONITOR_NOT_CONNECTED = -1071242440;

const int ERROR_GRAPHICS_SOURCE_NOT_IN_TOPOLOGY = -1071242439;

const int ERROR_GRAPHICS_INVALID_PRIMARYSURFACE_SIZE = -1071242438;

const int ERROR_GRAPHICS_INVALID_VISIBLEREGION_SIZE = -1071242437;

const int ERROR_GRAPHICS_INVALID_STRIDE = -1071242436;

const int ERROR_GRAPHICS_INVALID_PIXELFORMAT = -1071242435;

const int ERROR_GRAPHICS_INVALID_COLORBASIS = -1071242434;

const int ERROR_GRAPHICS_INVALID_PIXELVALUEACCESSMODE = -1071242433;

const int ERROR_GRAPHICS_TARGET_NOT_IN_TOPOLOGY = -1071242432;

const int ERROR_GRAPHICS_NO_DISPLAY_MODE_MANAGEMENT_SUPPORT = -1071242431;

const int ERROR_GRAPHICS_VIDPN_SOURCE_IN_USE = -1071242430;

const int ERROR_GRAPHICS_CANT_ACCESS_ACTIVE_VIDPN = -1071242429;

const int ERROR_GRAPHICS_INVALID_PATH_IMPORTANCE_ORDINAL = -1071242428;

const int ERROR_GRAPHICS_INVALID_PATH_CONTENT_GEOMETRY_TRANSFORMATION =
    -1071242427;

const int ERROR_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_SUPPORTED =
    -1071242426;

const int ERROR_GRAPHICS_INVALID_GAMMA_RAMP = -1071242425;

const int ERROR_GRAPHICS_GAMMA_RAMP_NOT_SUPPORTED = -1071242424;

const int ERROR_GRAPHICS_MULTISAMPLING_NOT_SUPPORTED = -1071242423;

const int ERROR_GRAPHICS_MODE_NOT_IN_MODESET = -1071242422;

const int ERROR_GRAPHICS_DATASET_IS_EMPTY = 2499403;

const int ERROR_GRAPHICS_NO_MORE_ELEMENTS_IN_DATASET = 2499404;

const int ERROR_GRAPHICS_INVALID_VIDPN_TOPOLOGY_RECOMMENDATION_REASON =
    -1071242419;

const int ERROR_GRAPHICS_INVALID_PATH_CONTENT_TYPE = -1071242418;

const int ERROR_GRAPHICS_INVALID_COPYPROTECTION_TYPE = -1071242417;

const int ERROR_GRAPHICS_UNASSIGNED_MODESET_ALREADY_EXISTS = -1071242416;

const int ERROR_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_PINNED =
    2499409;

const int ERROR_GRAPHICS_INVALID_SCANLINE_ORDERING = -1071242414;

const int ERROR_GRAPHICS_TOPOLOGY_CHANGES_NOT_ALLOWED = -1071242413;

const int ERROR_GRAPHICS_NO_AVAILABLE_IMPORTANCE_ORDINALS = -1071242412;

const int ERROR_GRAPHICS_INCOMPATIBLE_PRIVATE_FORMAT = -1071242411;

const int ERROR_GRAPHICS_INVALID_MODE_PRUNING_ALGORITHM = -1071242410;

const int ERROR_GRAPHICS_INVALID_MONITOR_CAPABILITY_ORIGIN = -1071242409;

const int ERROR_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE_CONSTRAINT =
    -1071242408;

const int ERROR_GRAPHICS_MAX_NUM_PATHS_REACHED = -1071242407;

const int ERROR_GRAPHICS_CANCEL_VIDPN_TOPOLOGY_AUGMENTATION = -1071242406;

const int ERROR_GRAPHICS_INVALID_CLIENT_TYPE = -1071242405;

const int ERROR_GRAPHICS_CLIENTVIDPN_NOT_SET = -1071242404;

const int ERROR_GRAPHICS_SPECIFIED_CHILD_ALREADY_CONNECTED = -1071242240;

const int ERROR_GRAPHICS_CHILD_DESCRIPTOR_NOT_SUPPORTED = -1071242239;

const int ERROR_GRAPHICS_UNKNOWN_CHILD_STATUS = 1076241455;

const int ERROR_GRAPHICS_NOT_A_LINKED_ADAPTER = -1071242192;

const int ERROR_GRAPHICS_LEADLINK_NOT_ENUMERATED = -1071242191;

const int ERROR_GRAPHICS_CHAINLINKS_NOT_ENUMERATED = -1071242190;

const int ERROR_GRAPHICS_ADAPTER_CHAIN_NOT_READY = -1071242189;

const int ERROR_GRAPHICS_CHAINLINKS_NOT_STARTED = -1071242188;

const int ERROR_GRAPHICS_CHAINLINKS_NOT_POWERED_ON = -1071242187;

const int ERROR_GRAPHICS_INCONSISTENT_DEVICE_LINK_STATE = -1071242186;

const int ERROR_GRAPHICS_LEADLINK_START_DEFERRED = 1076241463;

const int ERROR_GRAPHICS_NOT_POST_DEVICE_DRIVER = -1071242184;

const int ERROR_GRAPHICS_POLLING_TOO_FREQUENTLY = 1076241465;

const int ERROR_GRAPHICS_START_DEFERRED = 1076241466;

const int ERROR_GRAPHICS_ADAPTER_ACCESS_NOT_EXCLUDED = -1071242181;

const int ERROR_GRAPHICS_DEPENDABLE_CHILD_STATUS = 1076241468;

const int ERROR_GRAPHICS_OPM_NOT_SUPPORTED = -1071241984;

const int ERROR_GRAPHICS_COPP_NOT_SUPPORTED = -1071241983;

const int ERROR_GRAPHICS_UAB_NOT_SUPPORTED = -1071241982;

const int ERROR_GRAPHICS_OPM_INVALID_ENCRYPTED_PARAMETERS = -1071241981;

const int ERROR_GRAPHICS_OPM_NO_VIDEO_OUTPUTS_EXIST = -1071241979;

const int ERROR_GRAPHICS_OPM_INTERNAL_ERROR = -1071241973;

const int ERROR_GRAPHICS_OPM_INVALID_HANDLE = -1071241972;

const int ERROR_GRAPHICS_PVP_INVALID_CERTIFICATE_LENGTH = -1071241970;

const int ERROR_GRAPHICS_OPM_SPANNING_MODE_ENABLED = -1071241969;

const int ERROR_GRAPHICS_OPM_THEATER_MODE_ENABLED = -1071241968;

const int ERROR_GRAPHICS_PVP_HFS_FAILED = -1071241967;

const int ERROR_GRAPHICS_OPM_INVALID_SRM = -1071241966;

const int ERROR_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_HDCP = -1071241965;

const int ERROR_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_ACP = -1071241964;

const int ERROR_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_CGMSA = -1071241963;

const int ERROR_GRAPHICS_OPM_HDCP_SRM_NEVER_SET = -1071241962;

const int ERROR_GRAPHICS_OPM_RESOLUTION_TOO_HIGH = -1071241961;

const int ERROR_GRAPHICS_OPM_ALL_HDCP_HARDWARE_ALREADY_IN_USE = -1071241960;

const int ERROR_GRAPHICS_OPM_VIDEO_OUTPUT_NO_LONGER_EXISTS = -1071241958;

const int ERROR_GRAPHICS_OPM_SESSION_TYPE_CHANGE_IN_PROGRESS = -1071241957;

const int ERROR_GRAPHICS_OPM_VIDEO_OUTPUT_DOES_NOT_HAVE_COPP_SEMANTICS =
    -1071241956;

const int ERROR_GRAPHICS_OPM_INVALID_INFORMATION_REQUEST = -1071241955;

const int ERROR_GRAPHICS_OPM_DRIVER_INTERNAL_ERROR = -1071241954;

const int ERROR_GRAPHICS_OPM_VIDEO_OUTPUT_DOES_NOT_HAVE_OPM_SEMANTICS =
    -1071241953;

const int ERROR_GRAPHICS_OPM_SIGNALING_NOT_SUPPORTED = -1071241952;

const int ERROR_GRAPHICS_OPM_INVALID_CONFIGURATION_REQUEST = -1071241951;

const int ERROR_GRAPHICS_I2C_NOT_SUPPORTED = -1071241856;

const int ERROR_GRAPHICS_I2C_DEVICE_DOES_NOT_EXIST = -1071241855;

const int ERROR_GRAPHICS_I2C_ERROR_TRANSMITTING_DATA = -1071241854;

const int ERROR_GRAPHICS_I2C_ERROR_RECEIVING_DATA = -1071241853;

const int ERROR_GRAPHICS_DDCCI_VCP_NOT_SUPPORTED = -1071241852;

const int ERROR_GRAPHICS_DDCCI_INVALID_DATA = -1071241851;

const int ERROR_GRAPHICS_DDCCI_MONITOR_RETURNED_INVALID_TIMING_STATUS_BYTE =
    -1071241850;

const int ERROR_GRAPHICS_MCA_INVALID_CAPABILITIES_STRING = -1071241849;

const int ERROR_GRAPHICS_MCA_INTERNAL_ERROR = -1071241848;

const int ERROR_GRAPHICS_DDCCI_INVALID_MESSAGE_COMMAND = -1071241847;

const int ERROR_GRAPHICS_DDCCI_INVALID_MESSAGE_LENGTH = -1071241846;

const int ERROR_GRAPHICS_DDCCI_INVALID_MESSAGE_CHECKSUM = -1071241845;

const int ERROR_GRAPHICS_INVALID_PHYSICAL_MONITOR_HANDLE = -1071241844;

const int ERROR_GRAPHICS_MONITOR_NO_LONGER_EXISTS = -1071241843;

const int
    ERROR_GRAPHICS_DDCCI_CURRENT_CURRENT_VALUE_GREATER_THAN_MAXIMUM_VALUE =
    -1071241768;

const int ERROR_GRAPHICS_MCA_INVALID_VCP_VERSION = -1071241767;

const int ERROR_GRAPHICS_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION = -1071241766;

const int ERROR_GRAPHICS_MCA_MCCS_VERSION_MISMATCH = -1071241765;

const int ERROR_GRAPHICS_MCA_UNSUPPORTED_MCCS_VERSION = -1071241764;

const int ERROR_GRAPHICS_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED = -1071241762;

const int ERROR_GRAPHICS_MCA_UNSUPPORTED_COLOR_TEMPERATURE = -1071241761;

const int ERROR_GRAPHICS_ONLY_CONSOLE_SESSION_SUPPORTED = -1071241760;

const int ERROR_GRAPHICS_NO_DISPLAY_DEVICE_CORRESPONDS_TO_NAME = -1071241759;

const int ERROR_GRAPHICS_DISPLAY_DEVICE_NOT_ATTACHED_TO_DESKTOP = -1071241758;

const int ERROR_GRAPHICS_MIRRORING_DEVICES_NOT_SUPPORTED = -1071241757;

const int ERROR_GRAPHICS_INVALID_POINTER = -1071241756;

const int ERROR_GRAPHICS_NO_MONITORS_CORRESPOND_TO_DISPLAY_DEVICE = -1071241755;

const int ERROR_GRAPHICS_PARAMETER_ARRAY_TOO_SMALL = -1071241754;

const int ERROR_GRAPHICS_INTERNAL_ERROR = -1071241753;

const int ERROR_GRAPHICS_SESSION_TYPE_CHANGE_IN_PROGRESS = -1071249944;

const int NAP_E_INVALID_PACKET = -2144927743;

const int NAP_E_MISSING_SOH = -2144927742;

const int NAP_E_CONFLICTING_ID = -2144927741;

const int NAP_E_NO_CACHED_SOH = -2144927740;

const int NAP_E_STILL_BOUND = -2144927739;

const int NAP_E_NOT_REGISTERED = -2144927738;

const int NAP_E_NOT_INITIALIZED = -2144927737;

const int NAP_E_MISMATCHED_ID = -2144927736;

const int NAP_E_NOT_PENDING = -2144927735;

const int NAP_E_ID_NOT_FOUND = -2144927734;

const int NAP_E_MAXSIZE_TOO_SMALL = -2144927733;

const int NAP_E_SERVICE_NOT_RUNNING = -2144927732;

const int NAP_S_CERT_ALREADY_PRESENT = 2555917;

const int NAP_E_ENTITY_DISABLED = -2144927730;

const int NAP_E_NETSH_GROUPPOLICY_ERROR = -2144927729;

const int NAP_E_TOO_MANY_CALLS = -2144927728;

const int NAP_E_SHV_CONFIG_EXISTED = -2144927727;

const int NAP_E_SHV_CONFIG_NOT_FOUND = -2144927726;

const int NAP_E_SHV_TIMEOUT = -2144927725;

const int TPM_E_ERROR_MASK = -2144862208;

const int TPM_E_AUTHFAIL = -2144862207;

const int TPM_E_BADINDEX = -2144862206;

const int TPM_E_BAD_PARAMETER = -2144862205;

const int TPM_E_AUDITFAILURE = -2144862204;

const int TPM_E_CLEAR_DISABLED = -2144862203;

const int TPM_E_DEACTIVATED = -2144862202;

const int TPM_E_DISABLED = -2144862201;

const int TPM_E_DISABLED_CMD = -2144862200;

const int TPM_E_FAIL = -2144862199;

const int TPM_E_BAD_ORDINAL = -2144862198;

const int TPM_E_INSTALL_DISABLED = -2144862197;

const int TPM_E_INVALID_KEYHANDLE = -2144862196;

const int TPM_E_KEYNOTFOUND = -2144862195;

const int TPM_E_INAPPROPRIATE_ENC = -2144862194;

const int TPM_E_MIGRATEFAIL = -2144862193;

const int TPM_E_INVALID_PCR_INFO = -2144862192;

const int TPM_E_NOSPACE = -2144862191;

const int TPM_E_NOSRK = -2144862190;

const int TPM_E_NOTSEALED_BLOB = -2144862189;

const int TPM_E_OWNER_SET = -2144862188;

const int TPM_E_RESOURCES = -2144862187;

const int TPM_E_SHORTRANDOM = -2144862186;

const int TPM_E_SIZE = -2144862185;

const int TPM_E_WRONGPCRVAL = -2144862184;

const int TPM_E_BAD_PARAM_SIZE = -2144862183;

const int TPM_E_SHA_THREAD = -2144862182;

const int TPM_E_SHA_ERROR = -2144862181;

const int TPM_E_FAILEDSELFTEST = -2144862180;

const int TPM_E_AUTH2FAIL = -2144862179;

const int TPM_E_BADTAG = -2144862178;

const int TPM_E_IOERROR = -2144862177;

const int TPM_E_ENCRYPT_ERROR = -2144862176;

const int TPM_E_DECRYPT_ERROR = -2144862175;

const int TPM_E_INVALID_AUTHHANDLE = -2144862174;

const int TPM_E_NO_ENDORSEMENT = -2144862173;

const int TPM_E_INVALID_KEYUSAGE = -2144862172;

const int TPM_E_WRONG_ENTITYTYPE = -2144862171;

const int TPM_E_INVALID_POSTINIT = -2144862170;

const int TPM_E_INAPPROPRIATE_SIG = -2144862169;

const int TPM_E_BAD_KEY_PROPERTY = -2144862168;

const int TPM_E_BAD_MIGRATION = -2144862167;

const int TPM_E_BAD_SCHEME = -2144862166;

const int TPM_E_BAD_DATASIZE = -2144862165;

const int TPM_E_BAD_MODE = -2144862164;

const int TPM_E_BAD_PRESENCE = -2144862163;

const int TPM_E_BAD_VERSION = -2144862162;

const int TPM_E_NO_WRAP_TRANSPORT = -2144862161;

const int TPM_E_AUDITFAIL_UNSUCCESSFUL = -2144862160;

const int TPM_E_AUDITFAIL_SUCCESSFUL = -2144862159;

const int TPM_E_NOTRESETABLE = -2144862158;

const int TPM_E_NOTLOCAL = -2144862157;

const int TPM_E_BAD_TYPE = -2144862156;

const int TPM_E_INVALID_RESOURCE = -2144862155;

const int TPM_E_NOTFIPS = -2144862154;

const int TPM_E_INVALID_FAMILY = -2144862153;

const int TPM_E_NO_NV_PERMISSION = -2144862152;

const int TPM_E_REQUIRES_SIGN = -2144862151;

const int TPM_E_KEY_NOTSUPPORTED = -2144862150;

const int TPM_E_AUTH_CONFLICT = -2144862149;

const int TPM_E_AREA_LOCKED = -2144862148;

const int TPM_E_BAD_LOCALITY = -2144862147;

const int TPM_E_READ_ONLY = -2144862146;

const int TPM_E_PER_NOWRITE = -2144862145;

const int TPM_E_FAMILYCOUNT = -2144862144;

const int TPM_E_WRITE_LOCKED = -2144862143;

const int TPM_E_BAD_ATTRIBUTES = -2144862142;

const int TPM_E_INVALID_STRUCTURE = -2144862141;

const int TPM_E_KEY_OWNER_CONTROL = -2144862140;

const int TPM_E_BAD_COUNTER = -2144862139;

const int TPM_E_NOT_FULLWRITE = -2144862138;

const int TPM_E_CONTEXT_GAP = -2144862137;

const int TPM_E_MAXNVWRITES = -2144862136;

const int TPM_E_NOOPERATOR = -2144862135;

const int TPM_E_RESOURCEMISSING = -2144862134;

const int TPM_E_DELEGATE_LOCK = -2144862133;

const int TPM_E_DELEGATE_FAMILY = -2144862132;

const int TPM_E_DELEGATE_ADMIN = -2144862131;

const int TPM_E_TRANSPORT_NOTEXCLUSIVE = -2144862130;

const int TPM_E_OWNER_CONTROL = -2144862129;

const int TPM_E_DAA_RESOURCES = -2144862128;

const int TPM_E_DAA_INPUT_DATA0 = -2144862127;

const int TPM_E_DAA_INPUT_DATA1 = -2144862126;

const int TPM_E_DAA_ISSUER_SETTINGS = -2144862125;

const int TPM_E_DAA_TPM_SETTINGS = -2144862124;

const int TPM_E_DAA_STAGE = -2144862123;

const int TPM_E_DAA_ISSUER_VALIDITY = -2144862122;

const int TPM_E_DAA_WRONG_W = -2144862121;

const int TPM_E_BAD_HANDLE = -2144862120;

const int TPM_E_BAD_DELEGATE = -2144862119;

const int TPM_E_BADCONTEXT = -2144862118;

const int TPM_E_TOOMANYCONTEXTS = -2144862117;

const int TPM_E_MA_TICKET_SIGNATURE = -2144862116;

const int TPM_E_MA_DESTINATION = -2144862115;

const int TPM_E_MA_SOURCE = -2144862114;

const int TPM_E_MA_AUTHORITY = -2144862113;

const int TPM_E_PERMANENTEK = -2144862111;

const int TPM_E_BAD_SIGNATURE = -2144862110;

const int TPM_E_NOCONTEXTSPACE = -2144862109;

const int TPM_20_E_ASYMMETRIC = -2144862079;

const int TPM_20_E_ATTRIBUTES = -2144862078;

const int TPM_20_E_HASH = -2144862077;

const int TPM_20_E_VALUE = -2144862076;

const int TPM_20_E_HIERARCHY = -2144862075;

const int TPM_20_E_KEY_SIZE = -2144862073;

const int TPM_20_E_MGF = -2144862072;

const int TPM_20_E_MODE = -2144862071;

const int TPM_20_E_TYPE = -2144862070;

const int TPM_20_E_HANDLE = -2144862069;

const int TPM_20_E_KDF = -2144862068;

const int TPM_20_E_RANGE = -2144862067;

const int TPM_20_E_AUTH_FAIL = -2144862066;

const int TPM_20_E_NONCE = -2144862065;

const int TPM_20_E_PP = -2144862064;

const int TPM_20_E_SCHEME = -2144862062;

const int TPM_20_E_SIZE = -2144862059;

const int TPM_20_E_SYMMETRIC = -2144862058;

const int TPM_20_E_TAG = -2144862057;

const int TPM_20_E_SELECTOR = -2144862056;

const int TPM_20_E_INSUFFICIENT = -2144862054;

const int TPM_20_E_SIGNATURE = -2144862053;

const int TPM_20_E_KEY = -2144862052;

const int TPM_20_E_POLICY_FAIL = -2144862051;

const int TPM_20_E_INTEGRITY = -2144862049;

const int TPM_20_E_TICKET = -2144862048;

const int TPM_20_E_RESERVED_BITS = -2144862047;

const int TPM_20_E_BAD_AUTH = -2144862046;

const int TPM_20_E_EXPIRED = -2144862045;

const int TPM_20_E_POLICY_CC = -2144862044;

const int TPM_20_E_BINDING = -2144862043;

const int TPM_20_E_CURVE = -2144862042;

const int TPM_20_E_ECC_POINT = -2144862041;

const int TPM_20_E_INITIALIZE = -2144861952;

const int TPM_20_E_FAILURE = -2144861951;

const int TPM_20_E_SEQUENCE = -2144861949;

const int TPM_20_E_PRIVATE = -2144861941;

const int TPM_20_E_HMAC = -2144861927;

const int TPM_20_E_DISABLED = -2144861920;

const int TPM_20_E_EXCLUSIVE = -2144861919;

const int TPM_20_E_ECC_CURVE = -2144861917;

const int TPM_20_E_AUTH_TYPE = -2144861916;

const int TPM_20_E_AUTH_MISSING = -2144861915;

const int TPM_20_E_POLICY = -2144861914;

const int TPM_20_E_PCR = -2144861913;

const int TPM_20_E_PCR_CHANGED = -2144861912;

const int TPM_20_E_UPGRADE = -2144861907;

const int TPM_20_E_TOO_MANY_CONTEXTS = -2144861906;

const int TPM_20_E_AUTH_UNAVAILABLE = -2144861905;

const int TPM_20_E_REBOOT = -2144861904;

const int TPM_20_E_UNBALANCED = -2144861903;

const int TPM_20_E_COMMAND_SIZE = -2144861886;

const int TPM_20_E_COMMAND_CODE = -2144861885;

const int TPM_20_E_AUTHSIZE = -2144861884;

const int TPM_20_E_AUTH_CONTEXT = -2144861883;

const int TPM_20_E_NV_RANGE = -2144861882;

const int TPM_20_E_NV_SIZE = -2144861881;

const int TPM_20_E_NV_LOCKED = -2144861880;

const int TPM_20_E_NV_AUTHORIZATION = -2144861879;

const int TPM_20_E_NV_UNINITIALIZED = -2144861878;

const int TPM_20_E_NV_SPACE = -2144861877;

const int TPM_20_E_NV_DEFINED = -2144861876;

const int TPM_20_E_BAD_CONTEXT = -2144861872;

const int TPM_20_E_CPHASH = -2144861871;

const int TPM_20_E_PARENT = -2144861870;

const int TPM_20_E_NEEDS_TEST = -2144861869;

const int TPM_20_E_NO_RESULT = -2144861868;

const int TPM_20_E_SENSITIVE = -2144861867;

const int TPM_E_COMMAND_BLOCKED = -2144861184;

const int TPM_E_INVALID_HANDLE = -2144861183;

const int TPM_E_DUPLICATE_VHANDLE = -2144861182;

const int TPM_E_EMBEDDED_COMMAND_BLOCKED = -2144861181;

const int TPM_E_EMBEDDED_COMMAND_UNSUPPORTED = -2144861180;

const int TPM_E_RETRY = -2144860160;

const int TPM_E_NEEDS_SELFTEST = -2144860159;

const int TPM_E_DOING_SELFTEST = -2144860158;

const int TPM_E_DEFEND_LOCK_RUNNING = -2144860157;

const int TPM_20_E_CONTEXT_GAP = -2144859903;

const int TPM_20_E_OBJECT_MEMORY = -2144859902;

const int TPM_20_E_SESSION_MEMORY = -2144859901;

const int TPM_20_E_MEMORY = -2144859900;

const int TPM_20_E_SESSION_HANDLES = -2144859899;

const int TPM_20_E_OBJECT_HANDLES = -2144859898;

const int TPM_20_E_LOCALITY = -2144859897;

const int TPM_20_E_YIELDED = -2144859896;

const int TPM_20_E_CANCELED = -2144859895;

const int TPM_20_E_TESTING = -2144859894;

const int TPM_20_E_NV_RATE = -2144859872;

const int TPM_20_E_LOCKOUT = -2144859871;

const int TPM_20_E_RETRY = -2144859870;

const int TPM_20_E_NV_UNAVAILABLE = -2144859869;

const int TBS_E_INTERNAL_ERROR = -2144845823;

const int TBS_E_BAD_PARAMETER = -2144845822;

const int TBS_E_INVALID_OUTPUT_POINTER = -2144845821;

const int TBS_E_INVALID_CONTEXT = -2144845820;

const int TBS_E_INSUFFICIENT_BUFFER = -2144845819;

const int TBS_E_IOERROR = -2144845818;

const int TBS_E_INVALID_CONTEXT_PARAM = -2144845817;

const int TBS_E_SERVICE_NOT_RUNNING = -2144845816;

const int TBS_E_TOO_MANY_TBS_CONTEXTS = -2144845815;

const int TBS_E_TOO_MANY_RESOURCES = -2144845814;

const int TBS_E_SERVICE_START_PENDING = -2144845813;

const int TBS_E_PPI_NOT_SUPPORTED = -2144845812;

const int TBS_E_COMMAND_CANCELED = -2144845811;

const int TBS_E_BUFFER_TOO_LARGE = -2144845810;

const int TBS_E_TPM_NOT_FOUND = -2144845809;

const int TBS_E_SERVICE_DISABLED = -2144845808;

const int TBS_E_NO_EVENT_LOG = -2144845807;

const int TBS_E_ACCESS_DENIED = -2144845806;

const int TBS_E_PROVISIONING_NOT_ALLOWED = -2144845805;

const int TBS_E_PPI_FUNCTION_UNSUPPORTED = -2144845804;

const int TBS_E_OWNERAUTH_NOT_FOUND = -2144845803;

const int TBS_E_PROVISIONING_INCOMPLETE = -2144845802;

const int TPMAPI_E_INVALID_STATE = -2144796416;

const int TPMAPI_E_NOT_ENOUGH_DATA = -2144796415;

const int TPMAPI_E_TOO_MUCH_DATA = -2144796414;

const int TPMAPI_E_INVALID_OUTPUT_POINTER = -2144796413;

const int TPMAPI_E_INVALID_PARAMETER = -2144796412;

const int TPMAPI_E_OUT_OF_MEMORY = -2144796411;

const int TPMAPI_E_BUFFER_TOO_SMALL = -2144796410;

const int TPMAPI_E_INTERNAL_ERROR = -2144796409;

const int TPMAPI_E_ACCESS_DENIED = -2144796408;

const int TPMAPI_E_AUTHORIZATION_FAILED = -2144796407;

const int TPMAPI_E_INVALID_CONTEXT_HANDLE = -2144796406;

const int TPMAPI_E_TBS_COMMUNICATION_ERROR = -2144796405;

const int TPMAPI_E_TPM_COMMAND_ERROR = -2144796404;

const int TPMAPI_E_MESSAGE_TOO_LARGE = -2144796403;

const int TPMAPI_E_INVALID_ENCODING = -2144796402;

const int TPMAPI_E_INVALID_KEY_SIZE = -2144796401;

const int TPMAPI_E_ENCRYPTION_FAILED = -2144796400;

const int TPMAPI_E_INVALID_KEY_PARAMS = -2144796399;

const int TPMAPI_E_INVALID_MIGRATION_AUTHORIZATION_BLOB = -2144796398;

const int TPMAPI_E_INVALID_PCR_INDEX = -2144796397;

const int TPMAPI_E_INVALID_DELEGATE_BLOB = -2144796396;

const int TPMAPI_E_INVALID_CONTEXT_PARAMS = -2144796395;

const int TPMAPI_E_INVALID_KEY_BLOB = -2144796394;

const int TPMAPI_E_INVALID_PCR_DATA = -2144796393;

const int TPMAPI_E_INVALID_OWNER_AUTH = -2144796392;

const int TPMAPI_E_FIPS_RNG_CHECK_FAILED = -2144796391;

const int TPMAPI_E_EMPTY_TCG_LOG = -2144796390;

const int TPMAPI_E_INVALID_TCG_LOG_ENTRY = -2144796389;

const int TPMAPI_E_TCG_SEPARATOR_ABSENT = -2144796388;

const int TPMAPI_E_TCG_INVALID_DIGEST_ENTRY = -2144796387;

const int TPMAPI_E_POLICY_DENIES_OPERATION = -2144796386;

const int TPMAPI_E_NV_BITS_NOT_DEFINED = -2144796385;

const int TPMAPI_E_NV_BITS_NOT_READY = -2144796384;

const int TPMAPI_E_SEALING_KEY_NOT_AVAILABLE = -2144796383;

const int TPMAPI_E_NO_AUTHORIZATION_CHAIN_FOUND = -2144796382;

const int TPMAPI_E_SVN_COUNTER_NOT_AVAILABLE = -2144796381;

const int TPMAPI_E_OWNER_AUTH_NOT_NULL = -2144796380;

const int TPMAPI_E_ENDORSEMENT_AUTH_NOT_NULL = -2144796379;

const int TPMAPI_E_AUTHORIZATION_REVOKED = -2144796378;

const int TPMAPI_E_MALFORMED_AUTHORIZATION_KEY = -2144796377;

const int TPMAPI_E_AUTHORIZING_KEY_NOT_SUPPORTED = -2144796376;

const int TPMAPI_E_INVALID_AUTHORIZATION_SIGNATURE = -2144796375;

const int TPMAPI_E_MALFORMED_AUTHORIZATION_POLICY = -2144796374;

const int TPMAPI_E_MALFORMED_AUTHORIZATION_OTHER = -2144796373;

const int TPMAPI_E_SEALING_KEY_CHANGED = -2144796372;

const int TPMAPI_E_INVALID_TPM_VERSION = -2144796371;

const int TPMAPI_E_INVALID_POLICYAUTH_BLOB_TYPE = -2144796370;

const int TBSIMP_E_BUFFER_TOO_SMALL = -2144796160;

const int TBSIMP_E_CLEANUP_FAILED = -2144796159;

const int TBSIMP_E_INVALID_CONTEXT_HANDLE = -2144796158;

const int TBSIMP_E_INVALID_CONTEXT_PARAM = -2144796157;

const int TBSIMP_E_TPM_ERROR = -2144796156;

const int TBSIMP_E_HASH_BAD_KEY = -2144796155;

const int TBSIMP_E_DUPLICATE_VHANDLE = -2144796154;

const int TBSIMP_E_INVALID_OUTPUT_POINTER = -2144796153;

const int TBSIMP_E_INVALID_PARAMETER = -2144796152;

const int TBSIMP_E_RPC_INIT_FAILED = -2144796151;

const int TBSIMP_E_SCHEDULER_NOT_RUNNING = -2144796150;

const int TBSIMP_E_COMMAND_CANCELED = -2144796149;

const int TBSIMP_E_OUT_OF_MEMORY = -2144796148;

const int TBSIMP_E_LIST_NO_MORE_ITEMS = -2144796147;

const int TBSIMP_E_LIST_NOT_FOUND = -2144796146;

const int TBSIMP_E_NOT_ENOUGH_SPACE = -2144796145;

const int TBSIMP_E_NOT_ENOUGH_TPM_CONTEXTS = -2144796144;

const int TBSIMP_E_COMMAND_FAILED = -2144796143;

const int TBSIMP_E_UNKNOWN_ORDINAL = -2144796142;

const int TBSIMP_E_RESOURCE_EXPIRED = -2144796141;

const int TBSIMP_E_INVALID_RESOURCE = -2144796140;

const int TBSIMP_E_NOTHING_TO_UNLOAD = -2144796139;

const int TBSIMP_E_HASH_TABLE_FULL = -2144796138;

const int TBSIMP_E_TOO_MANY_TBS_CONTEXTS = -2144796137;

const int TBSIMP_E_TOO_MANY_RESOURCES = -2144796136;

const int TBSIMP_E_PPI_NOT_SUPPORTED = -2144796135;

const int TBSIMP_E_TPM_INCOMPATIBLE = -2144796134;

const int TBSIMP_E_NO_EVENT_LOG = -2144796133;

const int TPM_E_PPI_ACPI_FAILURE = -2144795904;

const int TPM_E_PPI_USER_ABORT = -2144795903;

const int TPM_E_PPI_BIOS_FAILURE = -2144795902;

const int TPM_E_PPI_NOT_SUPPORTED = -2144795901;

const int TPM_E_PPI_BLOCKED_IN_BIOS = -2144795900;

const int TPM_E_PCP_ERROR_MASK = -2144795648;

const int TPM_E_PCP_DEVICE_NOT_READY = -2144795647;

const int TPM_E_PCP_INVALID_HANDLE = -2144795646;

const int TPM_E_PCP_INVALID_PARAMETER = -2144795645;

const int TPM_E_PCP_FLAG_NOT_SUPPORTED = -2144795644;

const int TPM_E_PCP_NOT_SUPPORTED = -2144795643;

const int TPM_E_PCP_BUFFER_TOO_SMALL = -2144795642;

const int TPM_E_PCP_INTERNAL_ERROR = -2144795641;

const int TPM_E_PCP_AUTHENTICATION_FAILED = -2144795640;

const int TPM_E_PCP_AUTHENTICATION_IGNORED = -2144795639;

const int TPM_E_PCP_POLICY_NOT_FOUND = -2144795638;

const int TPM_E_PCP_PROFILE_NOT_FOUND = -2144795637;

const int TPM_E_PCP_VALIDATION_FAILED = -2144795636;

const int TPM_E_PCP_WRONG_PARENT = -2144795634;

const int TPM_E_KEY_NOT_LOADED = -2144795633;

const int TPM_E_NO_KEY_CERTIFICATION = -2144795632;

const int TPM_E_KEY_NOT_FINALIZED = -2144795631;

const int TPM_E_ATTESTATION_CHALLENGE_NOT_SET = -2144795630;

const int TPM_E_NOT_PCR_BOUND = -2144795629;

const int TPM_E_KEY_ALREADY_FINALIZED = -2144795628;

const int TPM_E_KEY_USAGE_POLICY_NOT_SUPPORTED = -2144795627;

const int TPM_E_KEY_USAGE_POLICY_INVALID = -2144795626;

const int TPM_E_SOFT_KEY_ERROR = -2144795625;

const int TPM_E_KEY_NOT_AUTHENTICATED = -2144795624;

const int TPM_E_PCP_KEY_NOT_AIK = -2144795623;

const int TPM_E_KEY_NOT_SIGNING_KEY = -2144795622;

const int TPM_E_LOCKED_OUT = -2144795621;

const int TPM_E_CLAIM_TYPE_NOT_SUPPORTED = -2144795620;

const int TPM_E_VERSION_NOT_SUPPORTED = -2144795619;

const int TPM_E_BUFFER_LENGTH_MISMATCH = -2144795618;

const int TPM_E_PCP_IFX_RSA_KEY_CREATION_BLOCKED = -2144795617;

const int TPM_E_PCP_TICKET_MISSING = -2144795616;

const int TPM_E_PCP_RAW_POLICY_NOT_SUPPORTED = -2144795615;

const int TPM_E_PCP_KEY_HANDLE_INVALIDATED = -2144795614;

const int TPM_E_PCP_UNSUPPORTED_PSS_SALT = 1076429859;

const int TPM_E_PCP_PLATFORM_CLAIM_MAY_BE_OUTDATED = 1076429860;

const int TPM_E_PCP_PLATFORM_CLAIM_OUTDATED = 1076429861;

const int TPM_E_PCP_PLATFORM_CLAIM_REBOOT = 1076429862;

const int TPM_E_ZERO_EXHAUST_ENABLED = -2144795392;

const int TPM_E_PROVISIONING_INCOMPLETE = -2144795136;

const int TPM_E_INVALID_OWNER_AUTH = -2144795135;

const int TPM_E_TOO_MUCH_DATA = -2144795134;

const int PLA_E_DCS_NOT_FOUND = -2144337918;

const int PLA_E_DCS_IN_USE = -2144337750;

const int PLA_E_TOO_MANY_FOLDERS = -2144337851;

const int PLA_E_NO_MIN_DISK = -2144337808;

const int PLA_E_DCS_ALREADY_EXISTS = -2144337737;

const int PLA_S_PROPERTY_IGNORED = 3145984;

const int PLA_E_PROPERTY_CONFLICT = -2144337663;

const int PLA_E_DCS_SINGLETON_REQUIRED = -2144337662;

const int PLA_E_CREDENTIALS_REQUIRED = -2144337661;

const int PLA_E_DCS_NOT_RUNNING = -2144337660;

const int PLA_E_CONFLICT_INCL_EXCL_API = -2144337659;

const int PLA_E_NETWORK_EXE_NOT_VALID = -2144337658;

const int PLA_E_EXE_ALREADY_CONFIGURED = -2144337657;

const int PLA_E_EXE_PATH_NOT_VALID = -2144337656;

const int PLA_E_DC_ALREADY_EXISTS = -2144337655;

const int PLA_E_DCS_START_WAIT_TIMEOUT = -2144337654;

const int PLA_E_DC_START_WAIT_TIMEOUT = -2144337653;

const int PLA_E_REPORT_WAIT_TIMEOUT = -2144337652;

const int PLA_E_NO_DUPLICATES = -2144337651;

const int PLA_E_EXE_FULL_PATH_REQUIRED = -2144337650;

const int PLA_E_INVALID_SESSION_NAME = -2144337649;

const int PLA_E_PLA_CHANNEL_NOT_ENABLED = -2144337648;

const int PLA_E_TASKSCHED_CHANNEL_NOT_ENABLED = -2144337647;

const int PLA_E_RULES_MANAGER_FAILED = -2144337646;

const int PLA_E_CABAPI_FAILURE = -2144337645;

const int FVE_E_LOCKED_VOLUME = -2144272384;

const int FVE_E_NOT_ENCRYPTED = -2144272383;

const int FVE_E_NO_TPM_BIOS = -2144272382;

const int FVE_E_NO_MBR_METRIC = -2144272381;

const int FVE_E_NO_BOOTSECTOR_METRIC = -2144272380;

const int FVE_E_NO_BOOTMGR_METRIC = -2144272379;

const int FVE_E_WRONG_BOOTMGR = -2144272378;

const int FVE_E_SECURE_KEY_REQUIRED = -2144272377;

const int FVE_E_NOT_ACTIVATED = -2144272376;

const int FVE_E_ACTION_NOT_ALLOWED = -2144272375;

const int FVE_E_AD_SCHEMA_NOT_INSTALLED = -2144272374;

const int FVE_E_AD_INVALID_DATATYPE = -2144272373;

const int FVE_E_AD_INVALID_DATASIZE = -2144272372;

const int FVE_E_AD_NO_VALUES = -2144272371;

const int FVE_E_AD_ATTR_NOT_SET = -2144272370;

const int FVE_E_AD_GUID_NOT_FOUND = -2144272369;

const int FVE_E_BAD_INFORMATION = -2144272368;

const int FVE_E_TOO_SMALL = -2144272367;

const int FVE_E_SYSTEM_VOLUME = -2144272366;

const int FVE_E_FAILED_WRONG_FS = -2144272365;

const int FVE_E_BAD_PARTITION_SIZE = -2144272364;

const int FVE_E_NOT_SUPPORTED = -2144272363;

const int FVE_E_BAD_DATA = -2144272362;

const int FVE_E_VOLUME_NOT_BOUND = -2144272361;

const int FVE_E_TPM_NOT_OWNED = -2144272360;

const int FVE_E_NOT_DATA_VOLUME = -2144272359;

const int FVE_E_AD_INSUFFICIENT_BUFFER = -2144272358;

const int FVE_E_CONV_READ = -2144272357;

const int FVE_E_CONV_WRITE = -2144272356;

const int FVE_E_KEY_REQUIRED = -2144272355;

const int FVE_E_CLUSTERING_NOT_SUPPORTED = -2144272354;

const int FVE_E_VOLUME_BOUND_ALREADY = -2144272353;

const int FVE_E_OS_NOT_PROTECTED = -2144272352;

const int FVE_E_PROTECTION_DISABLED = -2144272351;

const int FVE_E_RECOVERY_KEY_REQUIRED = -2144272350;

const int FVE_E_FOREIGN_VOLUME = -2144272349;

const int FVE_E_OVERLAPPED_UPDATE = -2144272348;

const int FVE_E_TPM_SRK_AUTH_NOT_ZERO = -2144272347;

const int FVE_E_FAILED_SECTOR_SIZE = -2144272346;

const int FVE_E_FAILED_AUTHENTICATION = -2144272345;

const int FVE_E_NOT_OS_VOLUME = -2144272344;

const int FVE_E_AUTOUNLOCK_ENABLED = -2144272343;

const int FVE_E_WRONG_BOOTSECTOR = -2144272342;

const int FVE_E_WRONG_SYSTEM_FS = -2144272341;

const int FVE_E_POLICY_PASSWORD_REQUIRED = -2144272340;

const int FVE_E_CANNOT_SET_FVEK_ENCRYPTED = -2144272339;

const int FVE_E_CANNOT_ENCRYPT_NO_KEY = -2144272338;

const int FVE_E_BOOTABLE_CDDVD = -2144272336;

const int FVE_E_PROTECTOR_EXISTS = -2144272335;

const int FVE_E_RELATIVE_PATH = -2144272334;

const int FVE_E_PROTECTOR_NOT_FOUND = -2144272333;

const int FVE_E_INVALID_KEY_FORMAT = -2144272332;

const int FVE_E_INVALID_PASSWORD_FORMAT = -2144272331;

const int FVE_E_FIPS_RNG_CHECK_FAILED = -2144272330;

const int FVE_E_FIPS_PREVENTS_RECOVERY_PASSWORD = -2144272329;

const int FVE_E_FIPS_PREVENTS_EXTERNAL_KEY_EXPORT = -2144272328;

const int FVE_E_NOT_DECRYPTED = -2144272327;

const int FVE_E_INVALID_PROTECTOR_TYPE = -2144272326;

const int FVE_E_NO_PROTECTORS_TO_TEST = -2144272325;

const int FVE_E_KEYFILE_NOT_FOUND = -2144272324;

const int FVE_E_KEYFILE_INVALID = -2144272323;

const int FVE_E_KEYFILE_NO_VMK = -2144272322;

const int FVE_E_TPM_DISABLED = -2144272321;

const int FVE_E_NOT_ALLOWED_IN_SAFE_MODE = -2144272320;

const int FVE_E_TPM_INVALID_PCR = -2144272319;

const int FVE_E_TPM_NO_VMK = -2144272318;

const int FVE_E_PIN_INVALID = -2144272317;

const int FVE_E_AUTH_INVALID_APPLICATION = -2144272316;

const int FVE_E_AUTH_INVALID_CONFIG = -2144272315;

const int FVE_E_FIPS_DISABLE_PROTECTION_NOT_ALLOWED = -2144272314;

const int FVE_E_FS_NOT_EXTENDED = -2144272313;

const int FVE_E_FIRMWARE_TYPE_NOT_SUPPORTED = -2144272312;

const int FVE_E_NO_LICENSE = -2144272311;

const int FVE_E_NOT_ON_STACK = -2144272310;

const int FVE_E_FS_MOUNTED = -2144272309;

const int FVE_E_TOKEN_NOT_IMPERSONATED = -2144272308;

const int FVE_E_DRY_RUN_FAILED = -2144272307;

const int FVE_E_REBOOT_REQUIRED = -2144272306;

const int FVE_E_DEBUGGER_ENABLED = -2144272305;

const int FVE_E_RAW_ACCESS = -2144272304;

const int FVE_E_RAW_BLOCKED = -2144272303;

const int FVE_E_BCD_APPLICATIONS_PATH_INCORRECT = -2144272302;

const int FVE_E_NOT_ALLOWED_IN_VERSION = -2144272301;

const int FVE_E_NO_AUTOUNLOCK_MASTER_KEY = -2144272300;

const int FVE_E_MOR_FAILED = -2144272299;

const int FVE_E_HIDDEN_VOLUME = -2144272298;

const int FVE_E_TRANSIENT_STATE = -2144272297;

const int FVE_E_PUBKEY_NOT_ALLOWED = -2144272296;

const int FVE_E_VOLUME_HANDLE_OPEN = -2144272295;

const int FVE_E_NO_FEATURE_LICENSE = -2144272294;

const int FVE_E_INVALID_STARTUP_OPTIONS = -2144272293;

const int FVE_E_POLICY_RECOVERY_PASSWORD_NOT_ALLOWED = -2144272292;

const int FVE_E_POLICY_RECOVERY_PASSWORD_REQUIRED = -2144272291;

const int FVE_E_POLICY_RECOVERY_KEY_NOT_ALLOWED = -2144272290;

const int FVE_E_POLICY_RECOVERY_KEY_REQUIRED = -2144272289;

const int FVE_E_POLICY_STARTUP_PIN_NOT_ALLOWED = -2144272288;

const int FVE_E_POLICY_STARTUP_PIN_REQUIRED = -2144272287;

const int FVE_E_POLICY_STARTUP_KEY_NOT_ALLOWED = -2144272286;

const int FVE_E_POLICY_STARTUP_KEY_REQUIRED = -2144272285;

const int FVE_E_POLICY_STARTUP_PIN_KEY_NOT_ALLOWED = -2144272284;

const int FVE_E_POLICY_STARTUP_PIN_KEY_REQUIRED = -2144272283;

const int FVE_E_POLICY_STARTUP_TPM_NOT_ALLOWED = -2144272282;

const int FVE_E_POLICY_STARTUP_TPM_REQUIRED = -2144272281;

const int FVE_E_POLICY_INVALID_PIN_LENGTH = -2144272280;

const int FVE_E_KEY_PROTECTOR_NOT_SUPPORTED = -2144272279;

const int FVE_E_POLICY_PASSPHRASE_NOT_ALLOWED = -2144272278;

const int FVE_E_POLICY_PASSPHRASE_REQUIRED = -2144272277;

const int FVE_E_FIPS_PREVENTS_PASSPHRASE = -2144272276;

const int FVE_E_OS_VOLUME_PASSPHRASE_NOT_ALLOWED = -2144272275;

const int FVE_E_INVALID_BITLOCKER_OID = -2144272274;

const int FVE_E_VOLUME_TOO_SMALL = -2144272273;

const int FVE_E_DV_NOT_SUPPORTED_ON_FS = -2144272272;

const int FVE_E_DV_NOT_ALLOWED_BY_GP = -2144272271;

const int FVE_E_POLICY_USER_CERTIFICATE_NOT_ALLOWED = -2144272270;

const int FVE_E_POLICY_USER_CERTIFICATE_REQUIRED = -2144272269;

const int FVE_E_POLICY_USER_CERT_MUST_BE_HW = -2144272268;

const int FVE_E_POLICY_USER_CONFIGURE_FDV_AUTOUNLOCK_NOT_ALLOWED = -2144272267;

const int FVE_E_POLICY_USER_CONFIGURE_RDV_AUTOUNLOCK_NOT_ALLOWED = -2144272266;

const int FVE_E_POLICY_USER_CONFIGURE_RDV_NOT_ALLOWED = -2144272265;

const int FVE_E_POLICY_USER_ENABLE_RDV_NOT_ALLOWED = -2144272264;

const int FVE_E_POLICY_USER_DISABLE_RDV_NOT_ALLOWED = -2144272263;

const int FVE_E_POLICY_INVALID_PASSPHRASE_LENGTH = -2144272256;

const int FVE_E_POLICY_PASSPHRASE_TOO_SIMPLE = -2144272255;

const int FVE_E_RECOVERY_PARTITION = -2144272254;

const int FVE_E_POLICY_CONFLICT_FDV_RK_OFF_AUK_ON = -2144272253;

const int FVE_E_POLICY_CONFLICT_RDV_RK_OFF_AUK_ON = -2144272252;

const int FVE_E_NON_BITLOCKER_OID = -2144272251;

const int FVE_E_POLICY_PROHIBITS_SELFSIGNED = -2144272250;

const int FVE_E_POLICY_CONFLICT_RO_AND_STARTUP_KEY_REQUIRED = -2144272249;

const int FVE_E_CONV_RECOVERY_FAILED = -2144272248;

const int FVE_E_VIRTUALIZED_SPACE_TOO_BIG = -2144272247;

const int FVE_E_POLICY_CONFLICT_OSV_RP_OFF_ADB_ON = -2144272240;

const int FVE_E_POLICY_CONFLICT_FDV_RP_OFF_ADB_ON = -2144272239;

const int FVE_E_POLICY_CONFLICT_RDV_RP_OFF_ADB_ON = -2144272238;

const int FVE_E_NON_BITLOCKER_KU = -2144272237;

const int FVE_E_PRIVATEKEY_AUTH_FAILED = -2144272236;

const int FVE_E_REMOVAL_OF_DRA_FAILED = -2144272235;

const int FVE_E_OPERATION_NOT_SUPPORTED_ON_VISTA_VOLUME = -2144272234;

const int FVE_E_CANT_LOCK_AUTOUNLOCK_ENABLED_VOLUME = -2144272233;

const int FVE_E_FIPS_HASH_KDF_NOT_ALLOWED = -2144272232;

const int FVE_E_ENH_PIN_INVALID = -2144272231;

const int FVE_E_INVALID_PIN_CHARS = -2144272230;

const int FVE_E_INVALID_DATUM_TYPE = -2144272229;

const int FVE_E_EFI_ONLY = -2144272228;

const int FVE_E_MULTIPLE_NKP_CERTS = -2144272227;

const int FVE_E_REMOVAL_OF_NKP_FAILED = -2144272226;

const int FVE_E_INVALID_NKP_CERT = -2144272225;

const int FVE_E_NO_EXISTING_PIN = -2144272224;

const int FVE_E_PROTECTOR_CHANGE_PIN_MISMATCH = -2144272223;

const int FVE_E_PIN_PROTECTOR_CHANGE_BY_STD_USER_DISALLOWED = -2144272222;

const int FVE_E_PROTECTOR_CHANGE_MAX_PIN_CHANGE_ATTEMPTS_REACHED = -2144272221;

const int FVE_E_POLICY_PASSPHRASE_REQUIRES_ASCII = -2144272220;

const int FVE_E_FULL_ENCRYPTION_NOT_ALLOWED_ON_TP_STORAGE = -2144272219;

const int FVE_E_WIPE_NOT_ALLOWED_ON_TP_STORAGE = -2144272218;

const int FVE_E_KEY_LENGTH_NOT_SUPPORTED_BY_EDRIVE = -2144272217;

const int FVE_E_NO_EXISTING_PASSPHRASE = -2144272216;

const int FVE_E_PROTECTOR_CHANGE_PASSPHRASE_MISMATCH = -2144272215;

const int FVE_E_PASSPHRASE_TOO_LONG = -2144272214;

const int FVE_E_NO_PASSPHRASE_WITH_TPM = -2144272213;

const int FVE_E_NO_TPM_WITH_PASSPHRASE = -2144272212;

const int FVE_E_NOT_ALLOWED_ON_CSV_STACK = -2144272211;

const int FVE_E_NOT_ALLOWED_ON_CLUSTER = -2144272210;

const int FVE_E_EDRIVE_NO_FAILOVER_TO_SW = -2144272209;

const int FVE_E_EDRIVE_BAND_IN_USE = -2144272208;

const int FVE_E_EDRIVE_DISALLOWED_BY_GP = -2144272207;

const int FVE_E_EDRIVE_INCOMPATIBLE_VOLUME = -2144272206;

const int FVE_E_NOT_ALLOWED_TO_UPGRADE_WHILE_CONVERTING = -2144272205;

const int FVE_E_EDRIVE_DV_NOT_SUPPORTED = -2144272204;

const int FVE_E_NO_PREBOOT_KEYBOARD_DETECTED = -2144272203;

const int FVE_E_NO_PREBOOT_KEYBOARD_OR_WINRE_DETECTED = -2144272202;

const int FVE_E_POLICY_REQUIRES_STARTUP_PIN_ON_TOUCH_DEVICE = -2144272201;

const int FVE_E_POLICY_REQUIRES_RECOVERY_PASSWORD_ON_TOUCH_DEVICE = -2144272200;

const int FVE_E_WIPE_CANCEL_NOT_APPLICABLE = -2144272199;

const int FVE_E_SECUREBOOT_DISABLED = -2144272198;

const int FVE_E_SECUREBOOT_CONFIGURATION_INVALID = -2144272197;

const int FVE_E_EDRIVE_DRY_RUN_FAILED = -2144272196;

const int FVE_E_SHADOW_COPY_PRESENT = -2144272195;

const int FVE_E_POLICY_INVALID_ENHANCED_BCD_SETTINGS = -2144272194;

const int FVE_E_EDRIVE_INCOMPATIBLE_FIRMWARE = -2144272193;

const int FVE_E_PROTECTOR_CHANGE_MAX_PASSPHRASE_CHANGE_ATTEMPTS_REACHED =
    -2144272192;

const int FVE_E_PASSPHRASE_PROTECTOR_CHANGE_BY_STD_USER_DISALLOWED =
    -2144272191;

const int FVE_E_LIVEID_ACCOUNT_SUSPENDED = -2144272190;

const int FVE_E_LIVEID_ACCOUNT_BLOCKED = -2144272189;

const int FVE_E_NOT_PROVISIONED_ON_ALL_VOLUMES = -2144272188;

const int FVE_E_DE_FIXED_DATA_NOT_SUPPORTED = -2144272187;

const int FVE_E_DE_HARDWARE_NOT_COMPLIANT = -2144272186;

const int FVE_E_DE_WINRE_NOT_CONFIGURED = -2144272185;

const int FVE_E_DE_PROTECTION_SUSPENDED = -2144272184;

const int FVE_E_DE_OS_VOLUME_NOT_PROTECTED = -2144272183;

const int FVE_E_DE_DEVICE_LOCKEDOUT = -2144272182;

const int FVE_E_DE_PROTECTION_NOT_YET_ENABLED = -2144272181;

const int FVE_E_INVALID_PIN_CHARS_DETAILED = -2144272180;

const int FVE_E_DEVICE_LOCKOUT_COUNTER_UNAVAILABLE = -2144272179;

const int FVE_E_DEVICELOCKOUT_COUNTER_MISMATCH = -2144272178;

const int FVE_E_BUFFER_TOO_LARGE = -2144272177;

const int FVE_E_NO_SUCH_CAPABILITY_ON_TARGET = -2144272176;

const int FVE_E_DE_PREVENTED_FOR_OS = -2144272175;

const int FVE_E_DE_VOLUME_OPTED_OUT = -2144272174;

const int FVE_E_DE_VOLUME_NOT_SUPPORTED = -2144272173;

const int FVE_E_EOW_NOT_SUPPORTED_IN_VERSION = -2144272172;

const int FVE_E_ADBACKUP_NOT_ENABLED = -2144272171;

const int FVE_E_VOLUME_EXTEND_PREVENTS_EOW_DECRYPT = -2144272170;

const int FVE_E_NOT_DE_VOLUME = -2144272169;

const int FVE_E_PROTECTION_CANNOT_BE_DISABLED = -2144272168;

const int FVE_E_OSV_KSR_NOT_ALLOWED = -2144272167;

const int FVE_E_AD_BACKUP_REQUIRED_POLICY_NOT_SET_OS_DRIVE = -2144272166;

const int FVE_E_AD_BACKUP_REQUIRED_POLICY_NOT_SET_FIXED_DRIVE = -2144272165;

const int FVE_E_AD_BACKUP_REQUIRED_POLICY_NOT_SET_REMOVABLE_DRIVE = -2144272164;

const int FVE_E_KEY_ROTATION_NOT_SUPPORTED = -2144272163;

const int FVE_E_EXECUTE_REQUEST_SENT_TOO_SOON = -2144272162;

const int FVE_E_KEY_ROTATION_NOT_ENABLED = -2144272161;

const int FVE_E_DEVICE_NOT_JOINED = -2144272160;

const int FVE_E_AAD_ENDPOINT_BUSY = -2144272159;

const int FWP_E_CALLOUT_NOT_FOUND = -2144206847;

const int FWP_E_CONDITION_NOT_FOUND = -2144206846;

const int FWP_E_FILTER_NOT_FOUND = -2144206845;

const int FWP_E_LAYER_NOT_FOUND = -2144206844;

const int FWP_E_PROVIDER_NOT_FOUND = -2144206843;

const int FWP_E_PROVIDER_CONTEXT_NOT_FOUND = -2144206842;

const int FWP_E_SUBLAYER_NOT_FOUND = -2144206841;

const int FWP_E_NOT_FOUND = -2144206840;

const int FWP_E_ALREADY_EXISTS = -2144206839;

const int FWP_E_IN_USE = -2144206838;

const int FWP_E_DYNAMIC_SESSION_IN_PROGRESS = -2144206837;

const int FWP_E_WRONG_SESSION = -2144206836;

const int FWP_E_NO_TXN_IN_PROGRESS = -2144206835;

const int FWP_E_TXN_IN_PROGRESS = -2144206834;

const int FWP_E_TXN_ABORTED = -2144206833;

const int FWP_E_SESSION_ABORTED = -2144206832;

const int FWP_E_INCOMPATIBLE_TXN = -2144206831;

const int FWP_E_TIMEOUT = -2144206830;

const int FWP_E_NET_EVENTS_DISABLED = -2144206829;

const int FWP_E_INCOMPATIBLE_LAYER = -2144206828;

const int FWP_E_KM_CLIENTS_ONLY = -2144206827;

const int FWP_E_LIFETIME_MISMATCH = -2144206826;

const int FWP_E_BUILTIN_OBJECT = -2144206825;

const int FWP_E_TOO_MANY_CALLOUTS = -2144206824;

const int FWP_E_NOTIFICATION_DROPPED = -2144206823;

const int FWP_E_TRAFFIC_MISMATCH = -2144206822;

const int FWP_E_INCOMPATIBLE_SA_STATE = -2144206821;

const int FWP_E_NULL_POINTER = -2144206820;

const int FWP_E_INVALID_ENUMERATOR = -2144206819;

const int FWP_E_INVALID_FLAGS = -2144206818;

const int FWP_E_INVALID_NET_MASK = -2144206817;

const int FWP_E_INVALID_RANGE = -2144206816;

const int FWP_E_INVALID_INTERVAL = -2144206815;

const int FWP_E_ZERO_LENGTH_ARRAY = -2144206814;

const int FWP_E_NULL_DISPLAY_NAME = -2144206813;

const int FWP_E_INVALID_ACTION_TYPE = -2144206812;

const int FWP_E_INVALID_WEIGHT = -2144206811;

const int FWP_E_MATCH_TYPE_MISMATCH = -2144206810;

const int FWP_E_TYPE_MISMATCH = -2144206809;

const int FWP_E_OUT_OF_BOUNDS = -2144206808;

const int FWP_E_RESERVED = -2144206807;

const int FWP_E_DUPLICATE_CONDITION = -2144206806;

const int FWP_E_DUPLICATE_KEYMOD = -2144206805;

const int FWP_E_ACTION_INCOMPATIBLE_WITH_LAYER = -2144206804;

const int FWP_E_ACTION_INCOMPATIBLE_WITH_SUBLAYER = -2144206803;

const int FWP_E_CONTEXT_INCOMPATIBLE_WITH_LAYER = -2144206802;

const int FWP_E_CONTEXT_INCOMPATIBLE_WITH_CALLOUT = -2144206801;

const int FWP_E_INCOMPATIBLE_AUTH_METHOD = -2144206800;

const int FWP_E_INCOMPATIBLE_DH_GROUP = -2144206799;

const int FWP_E_EM_NOT_SUPPORTED = -2144206798;

const int FWP_E_NEVER_MATCH = -2144206797;

const int FWP_E_PROVIDER_CONTEXT_MISMATCH = -2144206796;

const int FWP_E_INVALID_PARAMETER = -2144206795;

const int FWP_E_TOO_MANY_SUBLAYERS = -2144206794;

const int FWP_E_CALLOUT_NOTIFICATION_FAILED = -2144206793;

const int FWP_E_INVALID_AUTH_TRANSFORM = -2144206792;

const int FWP_E_INVALID_CIPHER_TRANSFORM = -2144206791;

const int FWP_E_INCOMPATIBLE_CIPHER_TRANSFORM = -2144206790;

const int FWP_E_INVALID_TRANSFORM_COMBINATION = -2144206789;

const int FWP_E_DUPLICATE_AUTH_METHOD = -2144206788;

const int FWP_E_INVALID_TUNNEL_ENDPOINT = -2144206787;

const int FWP_E_L2_DRIVER_NOT_READY = -2144206786;

const int FWP_E_KEY_DICTATOR_ALREADY_REGISTERED = -2144206785;

const int FWP_E_KEY_DICTATION_INVALID_KEYING_MATERIAL = -2144206784;

const int FWP_E_CONNECTIONS_DISABLED = -2144206783;

const int FWP_E_INVALID_DNS_NAME = -2144206782;

const int FWP_E_STILL_ON = -2144206781;

const int FWP_E_IKEEXT_NOT_RUNNING = -2144206780;

const int FWP_E_DROP_NOICMP = -2144206588;

const int WS_S_ASYNC = 3997696;

const int WS_S_END = 3997697;

const int WS_E_INVALID_FORMAT = -2143485952;

const int WS_E_OBJECT_FAULTED = -2143485951;

const int WS_E_NUMERIC_OVERFLOW = -2143485950;

const int WS_E_INVALID_OPERATION = -2143485949;

const int WS_E_OPERATION_ABORTED = -2143485948;

const int WS_E_ENDPOINT_ACCESS_DENIED = -2143485947;

const int WS_E_OPERATION_TIMED_OUT = -2143485946;

const int WS_E_OPERATION_ABANDONED = -2143485945;

const int WS_E_QUOTA_EXCEEDED = -2143485944;

const int WS_E_NO_TRANSLATION_AVAILABLE = -2143485943;

const int WS_E_SECURITY_VERIFICATION_FAILURE = -2143485942;

const int WS_E_ADDRESS_IN_USE = -2143485941;

const int WS_E_ADDRESS_NOT_AVAILABLE = -2143485940;

const int WS_E_ENDPOINT_NOT_FOUND = -2143485939;

const int WS_E_ENDPOINT_NOT_AVAILABLE = -2143485938;

const int WS_E_ENDPOINT_FAILURE = -2143485937;

const int WS_E_ENDPOINT_UNREACHABLE = -2143485936;

const int WS_E_ENDPOINT_ACTION_NOT_SUPPORTED = -2143485935;

const int WS_E_ENDPOINT_TOO_BUSY = -2143485934;

const int WS_E_ENDPOINT_FAULT_RECEIVED = -2143485933;

const int WS_E_ENDPOINT_DISCONNECTED = -2143485932;

const int WS_E_PROXY_FAILURE = -2143485931;

const int WS_E_PROXY_ACCESS_DENIED = -2143485930;

const int WS_E_NOT_SUPPORTED = -2143485929;

const int WS_E_PROXY_REQUIRES_BASIC_AUTH = -2143485928;

const int WS_E_PROXY_REQUIRES_DIGEST_AUTH = -2143485927;

const int WS_E_PROXY_REQUIRES_NTLM_AUTH = -2143485926;

const int WS_E_PROXY_REQUIRES_NEGOTIATE_AUTH = -2143485925;

const int WS_E_SERVER_REQUIRES_BASIC_AUTH = -2143485924;

const int WS_E_SERVER_REQUIRES_DIGEST_AUTH = -2143485923;

const int WS_E_SERVER_REQUIRES_NTLM_AUTH = -2143485922;

const int WS_E_SERVER_REQUIRES_NEGOTIATE_AUTH = -2143485921;

const int WS_E_INVALID_ENDPOINT_URL = -2143485920;

const int WS_E_OTHER = -2143485919;

const int WS_E_SECURITY_TOKEN_EXPIRED = -2143485918;

const int WS_E_SECURITY_SYSTEM_FAILURE = -2143485917;

const int ERROR_NDIS_INTERFACE_CLOSING = 2150891522;

const int ERROR_NDIS_BAD_VERSION = 2150891524;

const int ERROR_NDIS_BAD_CHARACTERISTICS = 2150891525;

const int ERROR_NDIS_ADAPTER_NOT_FOUND = 2150891526;

const int ERROR_NDIS_OPEN_FAILED = 2150891527;

const int ERROR_NDIS_DEVICE_FAILED = 2150891528;

const int ERROR_NDIS_MULTICAST_FULL = 2150891529;

const int ERROR_NDIS_MULTICAST_EXISTS = 2150891530;

const int ERROR_NDIS_MULTICAST_NOT_FOUND = 2150891531;

const int ERROR_NDIS_REQUEST_ABORTED = 2150891532;

const int ERROR_NDIS_RESET_IN_PROGRESS = 2150891533;

const int ERROR_NDIS_NOT_SUPPORTED = 2150891707;

const int ERROR_NDIS_INVALID_PACKET = 2150891535;

const int ERROR_NDIS_ADAPTER_NOT_READY = 2150891537;

const int ERROR_NDIS_INVALID_LENGTH = 2150891540;

const int ERROR_NDIS_INVALID_DATA = 2150891541;

const int ERROR_NDIS_BUFFER_TOO_SHORT = 2150891542;

const int ERROR_NDIS_INVALID_OID = 2150891543;

const int ERROR_NDIS_ADAPTER_REMOVED = 2150891544;

const int ERROR_NDIS_UNSUPPORTED_MEDIA = 2150891545;

const int ERROR_NDIS_GROUP_ADDRESS_IN_USE = 2150891546;

const int ERROR_NDIS_FILE_NOT_FOUND = 2150891547;

const int ERROR_NDIS_ERROR_READING_FILE = 2150891548;

const int ERROR_NDIS_ALREADY_MAPPED = 2150891549;

const int ERROR_NDIS_RESOURCE_CONFLICT = 2150891550;

const int ERROR_NDIS_MEDIA_DISCONNECTED = 2150891551;

const int ERROR_NDIS_INVALID_ADDRESS = 2150891554;

const int ERROR_NDIS_INVALID_DEVICE_REQUEST = 2150891536;

const int ERROR_NDIS_PAUSED = 2150891562;

const int ERROR_NDIS_INTERFACE_NOT_FOUND = 2150891563;

const int ERROR_NDIS_UNSUPPORTED_REVISION = 2150891564;

const int ERROR_NDIS_INVALID_PORT = 2150891565;

const int ERROR_NDIS_INVALID_PORT_STATE = 2150891566;

const int ERROR_NDIS_LOW_POWER_STATE = 2150891567;

const int ERROR_NDIS_REINIT_REQUIRED = 2150891568;

const int ERROR_NDIS_NO_QUEUES = 2150891569;

const int ERROR_NDIS_DOT11_AUTO_CONFIG_ENABLED = 2150899712;

const int ERROR_NDIS_DOT11_MEDIA_IN_USE = 2150899713;

const int ERROR_NDIS_DOT11_POWER_STATE_INVALID = 2150899714;

const int ERROR_NDIS_PM_WOL_PATTERN_LIST_FULL = 2150899715;

const int ERROR_NDIS_PM_PROTOCOL_OFFLOAD_LIST_FULL = 2150899716;

const int ERROR_NDIS_DOT11_AP_CHANNEL_CURRENTLY_NOT_AVAILABLE = 2150899717;

const int ERROR_NDIS_DOT11_AP_BAND_CURRENTLY_NOT_AVAILABLE = 2150899718;

const int ERROR_NDIS_DOT11_AP_CHANNEL_NOT_ALLOWED = 2150899719;

const int ERROR_NDIS_DOT11_AP_BAND_NOT_ALLOWED = 2150899720;

const int ERROR_NDIS_INDICATION_REQUIRED = 3407873;

const int ERROR_NDIS_OFFLOAD_POLICY = 3224637455;

const int ERROR_NDIS_OFFLOAD_CONNECTION_REJECTED = 3224637458;

const int ERROR_NDIS_OFFLOAD_PATH_REJECTED = 3224637459;

const int ERROR_HV_INVALID_HYPERCALL_CODE = 3224698882;

const int ERROR_HV_INVALID_HYPERCALL_INPUT = 3224698883;

const int ERROR_HV_INVALID_ALIGNMENT = 3224698884;

const int ERROR_HV_INVALID_PARAMETER = 3224698885;

const int ERROR_HV_ACCESS_DENIED = 3224698886;

const int ERROR_HV_INVALID_PARTITION_STATE = 3224698887;

const int ERROR_HV_OPERATION_DENIED = 3224698888;

const int ERROR_HV_UNKNOWN_PROPERTY = 3224698889;

const int ERROR_HV_PROPERTY_VALUE_OUT_OF_RANGE = 3224698890;

const int ERROR_HV_INSUFFICIENT_MEMORY = 3224698891;

const int ERROR_HV_PARTITION_TOO_DEEP = 3224698892;

const int ERROR_HV_INVALID_PARTITION_ID = 3224698893;

const int ERROR_HV_INVALID_VP_INDEX = 3224698894;

const int ERROR_HV_INVALID_PORT_ID = 3224698897;

const int ERROR_HV_INVALID_CONNECTION_ID = 3224698898;

const int ERROR_HV_INSUFFICIENT_BUFFERS = 3224698899;

const int ERROR_HV_NOT_ACKNOWLEDGED = 3224698900;

const int ERROR_HV_INVALID_VP_STATE = 3224698901;

const int ERROR_HV_ACKNOWLEDGED = 3224698902;

const int ERROR_HV_INVALID_SAVE_RESTORE_STATE = 3224698903;

const int ERROR_HV_INVALID_SYNIC_STATE = 3224698904;

const int ERROR_HV_OBJECT_IN_USE = 3224698905;

const int ERROR_HV_INVALID_PROXIMITY_DOMAIN_INFO = 3224698906;

const int ERROR_HV_NO_DATA = 3224698907;

const int ERROR_HV_INACTIVE = 3224698908;

const int ERROR_HV_NO_RESOURCES = 3224698909;

const int ERROR_HV_FEATURE_UNAVAILABLE = 3224698910;

const int ERROR_HV_INSUFFICIENT_BUFFER = 3224698931;

const int ERROR_HV_INSUFFICIENT_DEVICE_DOMAINS = 3224698936;

const int ERROR_HV_CPUID_FEATURE_VALIDATION = 3224698940;

const int ERROR_HV_CPUID_XSAVE_FEATURE_VALIDATION = 3224698941;

const int ERROR_HV_PROCESSOR_STARTUP_TIMEOUT = 3224698942;

const int ERROR_HV_SMX_ENABLED = 3224698943;

const int ERROR_HV_INVALID_LP_INDEX = 3224698945;

const int ERROR_HV_INVALID_REGISTER_VALUE = 3224698960;

const int ERROR_HV_INVALID_VTL_STATE = 3224698961;

const int ERROR_HV_NX_NOT_DETECTED = 3224698965;

const int ERROR_HV_INVALID_DEVICE_ID = 3224698967;

const int ERROR_HV_INVALID_DEVICE_STATE = 3224698968;

const int ERROR_HV_PENDING_PAGE_REQUESTS = 3473497;

const int ERROR_HV_PAGE_REQUEST_INVALID = 3224698976;

const int ERROR_HV_INVALID_CPU_GROUP_ID = 3224698991;

const int ERROR_HV_INVALID_CPU_GROUP_STATE = 3224698992;

const int ERROR_HV_OPERATION_FAILED = 3224698993;

const int ERROR_HV_NOT_ALLOWED_WITH_NESTED_VIRT_ACTIVE = 3224698994;

const int ERROR_HV_INSUFFICIENT_ROOT_MEMORY = 3224698995;

const int ERROR_HV_EVENT_BUFFER_ALREADY_FREED = 3224698996;

const int ERROR_HV_INSUFFICIENT_CONTIGUOUS_MEMORY = 3224698997;

const int ERROR_HV_NOT_PRESENT = 3224702976;

const int ERROR_VID_DUPLICATE_HANDLER = 3224829953;

const int ERROR_VID_TOO_MANY_HANDLERS = 3224829954;

const int ERROR_VID_QUEUE_FULL = 3224829955;

const int ERROR_VID_HANDLER_NOT_PRESENT = 3224829956;

const int ERROR_VID_INVALID_OBJECT_NAME = 3224829957;

const int ERROR_VID_PARTITION_NAME_TOO_LONG = 3224829958;

const int ERROR_VID_MESSAGE_QUEUE_NAME_TOO_LONG = 3224829959;

const int ERROR_VID_PARTITION_ALREADY_EXISTS = 3224829960;

const int ERROR_VID_PARTITION_DOES_NOT_EXIST = 3224829961;

const int ERROR_VID_PARTITION_NAME_NOT_FOUND = 3224829962;

const int ERROR_VID_MESSAGE_QUEUE_ALREADY_EXISTS = 3224829963;

const int ERROR_VID_EXCEEDED_MBP_ENTRY_MAP_LIMIT = 3224829964;

const int ERROR_VID_MB_STILL_REFERENCED = 3224829965;

const int ERROR_VID_CHILD_GPA_PAGE_SET_CORRUPTED = 3224829966;

const int ERROR_VID_INVALID_NUMA_SETTINGS = 3224829967;

const int ERROR_VID_INVALID_NUMA_NODE_INDEX = 3224829968;

const int ERROR_VID_NOTIFICATION_QUEUE_ALREADY_ASSOCIATED = 3224829969;

const int ERROR_VID_INVALID_MEMORY_BLOCK_HANDLE = 3224829970;

const int ERROR_VID_PAGE_RANGE_OVERFLOW = 3224829971;

const int ERROR_VID_INVALID_MESSAGE_QUEUE_HANDLE = 3224829972;

const int ERROR_VID_INVALID_GPA_RANGE_HANDLE = 3224829973;

const int ERROR_VID_NO_MEMORY_BLOCK_NOTIFICATION_QUEUE = 3224829974;

const int ERROR_VID_MEMORY_BLOCK_LOCK_COUNT_EXCEEDED = 3224829975;

const int ERROR_VID_INVALID_PPM_HANDLE = 3224829976;

const int ERROR_VID_MBPS_ARE_LOCKED = 3224829977;

const int ERROR_VID_MESSAGE_QUEUE_CLOSED = 3224829978;

const int ERROR_VID_VIRTUAL_PROCESSOR_LIMIT_EXCEEDED = 3224829979;

const int ERROR_VID_STOP_PENDING = 3224829980;

const int ERROR_VID_INVALID_PROCESSOR_STATE = 3224829981;

const int ERROR_VID_EXCEEDED_KM_CONTEXT_COUNT_LIMIT = 3224829982;

const int ERROR_VID_KM_INTERFACE_ALREADY_INITIALIZED = 3224829983;

const int ERROR_VID_MB_PROPERTY_ALREADY_SET_RESET = 3224829984;

const int ERROR_VID_MMIO_RANGE_DESTROYED = 3224829985;

const int ERROR_VID_INVALID_CHILD_GPA_PAGE_SET = 3224829986;

const int ERROR_VID_RESERVE_PAGE_SET_IS_BEING_USED = 3224829987;

const int ERROR_VID_RESERVE_PAGE_SET_TOO_SMALL = 3224829988;

const int ERROR_VID_MBP_ALREADY_LOCKED_USING_RESERVED_PAGE = 3224829989;

const int ERROR_VID_MBP_COUNT_EXCEEDED_LIMIT = 3224829990;

const int ERROR_VID_SAVED_STATE_CORRUPT = 3224829991;

const int ERROR_VID_SAVED_STATE_UNRECOGNIZED_ITEM = 3224829992;

const int ERROR_VID_SAVED_STATE_INCOMPATIBLE = 3224829993;

const int ERROR_VID_VTL_ACCESS_DENIED = 3224829994;

const int ERROR_VMCOMPUTE_TERMINATED_DURING_START = 3224830208;

const int ERROR_VMCOMPUTE_IMAGE_MISMATCH = 3224830209;

const int ERROR_VMCOMPUTE_HYPERV_NOT_INSTALLED = 3224830210;

const int ERROR_VMCOMPUTE_OPERATION_PENDING = 3224830211;

const int ERROR_VMCOMPUTE_TOO_MANY_NOTIFICATIONS = 3224830212;

const int ERROR_VMCOMPUTE_INVALID_STATE = 3224830213;

const int ERROR_VMCOMPUTE_UNEXPECTED_EXIT = 3224830214;

const int ERROR_VMCOMPUTE_TERMINATED = 3224830215;

const int ERROR_VMCOMPUTE_CONNECT_FAILED = 3224830216;

const int ERROR_VMCOMPUTE_TIMEOUT = 3224830217;

const int ERROR_VMCOMPUTE_CONNECTION_CLOSED = 3224830218;

const int ERROR_VMCOMPUTE_UNKNOWN_MESSAGE = 3224830219;

const int ERROR_VMCOMPUTE_UNSUPPORTED_PROTOCOL_VERSION = 3224830220;

const int ERROR_VMCOMPUTE_INVALID_JSON = 3224830221;

const int ERROR_VMCOMPUTE_SYSTEM_NOT_FOUND = 3224830222;

const int ERROR_VMCOMPUTE_SYSTEM_ALREADY_EXISTS = 3224830223;

const int ERROR_VMCOMPUTE_SYSTEM_ALREADY_STOPPED = 3224830224;

const int ERROR_VMCOMPUTE_PROTOCOL_ERROR = 3224830225;

const int ERROR_VMCOMPUTE_INVALID_LAYER = 3224830226;

const int ERROR_VMCOMPUTE_WINDOWS_INSIDER_REQUIRED = 3224830227;

const int HCS_E_TERMINATED_DURING_START = -2143878912;

const int HCS_E_IMAGE_MISMATCH = -2143878911;

const int HCS_E_HYPERV_NOT_INSTALLED = -2143878910;

const int HCS_E_INVALID_STATE = -2143878907;

const int HCS_E_UNEXPECTED_EXIT = -2143878906;

const int HCS_E_TERMINATED = -2143878905;

const int HCS_E_CONNECT_FAILED = -2143878904;

const int HCS_E_CONNECTION_TIMEOUT = -2143878903;

const int HCS_E_CONNECTION_CLOSED = -2143878902;

const int HCS_E_UNKNOWN_MESSAGE = -2143878901;

const int HCS_E_UNSUPPORTED_PROTOCOL_VERSION = -2143878900;

const int HCS_E_INVALID_JSON = -2143878899;

const int HCS_E_SYSTEM_NOT_FOUND = -2143878898;

const int HCS_E_SYSTEM_ALREADY_EXISTS = -2143878897;

const int HCS_E_SYSTEM_ALREADY_STOPPED = -2143878896;

const int HCS_E_PROTOCOL_ERROR = -2143878895;

const int HCS_E_INVALID_LAYER = -2143878894;

const int HCS_E_WINDOWS_INSIDER_REQUIRED = -2143878893;

const int HCS_E_SERVICE_NOT_AVAILABLE = -2143878892;

const int HCS_E_OPERATION_NOT_STARTED = -2143878891;

const int HCS_E_OPERATION_ALREADY_STARTED = -2143878890;

const int HCS_E_OPERATION_PENDING = -2143878889;

const int HCS_E_OPERATION_TIMEOUT = -2143878888;

const int HCS_E_OPERATION_SYSTEM_CALLBACK_ALREADY_SET = -2143878887;

const int HCS_E_OPERATION_RESULT_ALLOCATION_FAILED = -2143878886;

const int HCS_E_ACCESS_DENIED = -2143878885;

const int HCS_E_GUEST_CRITICAL_ERROR = -2143878884;

const int HCS_E_PROCESS_INFO_NOT_AVAILABLE = -2143878883;

const int HCS_E_SERVICE_DISCONNECT = -2143878882;

const int HCS_E_PROCESS_ALREADY_STOPPED = -2143878881;

const int ERROR_VNET_VIRTUAL_SWITCH_NAME_NOT_FOUND = 3224830464;

const int ERROR_VID_REMOTE_NODE_PARENT_GPA_PAGES_USED = 2151088129;

const int WHV_E_UNKNOWN_CAPABILITY = -2143878400;

const int WHV_E_INSUFFICIENT_BUFFER = -2143878399;

const int WHV_E_UNKNOWN_PROPERTY = -2143878398;

const int WHV_E_UNSUPPORTED_HYPERVISOR_CONFIG = -2143878397;

const int WHV_E_INVALID_PARTITION_CONFIG = -2143878396;

const int WHV_E_GPA_RANGE_NOT_FOUND = -2143878395;

const int WHV_E_VP_ALREADY_EXISTS = -2143878394;

const int WHV_E_VP_DOES_NOT_EXIST = -2143878393;

const int WHV_E_INVALID_VP_STATE = -2143878392;

const int WHV_E_INVALID_VP_REGISTER_NAME = -2143878391;

const int WHV_E_UNSUPPORTED_PROCESSOR_CONFIG = -2143878384;

const int ERROR_VSMB_SAVED_STATE_FILE_NOT_FOUND = 3224830976;

const int ERROR_VSMB_SAVED_STATE_CORRUPT = 3224830977;

const int VM_SAVED_STATE_DUMP_E_PARTITION_STATE_NOT_FOUND = -1070136064;

const int VM_SAVED_STATE_DUMP_E_GUEST_MEMORY_NOT_FOUND = -1070136063;

const int VM_SAVED_STATE_DUMP_E_NO_VP_FOUND_IN_PARTITION_STATE = -1070136062;

const int VM_SAVED_STATE_DUMP_E_NESTED_VIRTUALIZATION_NOT_SUPPORTED =
    -1070136061;

const int VM_SAVED_STATE_DUMP_E_WINDOWS_KERNEL_IMAGE_NOT_FOUND = -1070136060;

const int VM_SAVED_STATE_DUMP_E_PXE_NOT_PRESENT = -1070136059;

const int VM_SAVED_STATE_DUMP_E_PDPTE_NOT_PRESENT = -1070136058;

const int VM_SAVED_STATE_DUMP_E_PDE_NOT_PRESENT = -1070136057;

const int VM_SAVED_STATE_DUMP_E_PTE_NOT_PRESENT = -1070136056;

const int ERROR_VOLMGR_INCOMPLETE_REGENERATION = 2151153665;

const int ERROR_VOLMGR_INCOMPLETE_DISK_MIGRATION = 2151153666;

const int ERROR_VOLMGR_DATABASE_FULL = 3224895489;

const int ERROR_VOLMGR_DISK_CONFIGURATION_CORRUPTED = 3224895490;

const int ERROR_VOLMGR_DISK_CONFIGURATION_NOT_IN_SYNC = 3224895491;

const int ERROR_VOLMGR_PACK_CONFIG_UPDATE_FAILED = 3224895492;

const int ERROR_VOLMGR_DISK_CONTAINS_NON_SIMPLE_VOLUME = 3224895493;

const int ERROR_VOLMGR_DISK_DUPLICATE = 3224895494;

const int ERROR_VOLMGR_DISK_DYNAMIC = 3224895495;

const int ERROR_VOLMGR_DISK_ID_INVALID = 3224895496;

const int ERROR_VOLMGR_DISK_INVALID = 3224895497;

const int ERROR_VOLMGR_DISK_LAST_VOTER = 3224895498;

const int ERROR_VOLMGR_DISK_LAYOUT_INVALID = 3224895499;

const int ERROR_VOLMGR_DISK_LAYOUT_NON_BASIC_BETWEEN_BASIC_PARTITIONS =
    3224895500;

const int ERROR_VOLMGR_DISK_LAYOUT_NOT_CYLINDER_ALIGNED = 3224895501;

const int ERROR_VOLMGR_DISK_LAYOUT_PARTITIONS_TOO_SMALL = 3224895502;

const int ERROR_VOLMGR_DISK_LAYOUT_PRIMARY_BETWEEN_LOGICAL_PARTITIONS =
    3224895503;

const int ERROR_VOLMGR_DISK_LAYOUT_TOO_MANY_PARTITIONS = 3224895504;

const int ERROR_VOLMGR_DISK_MISSING = 3224895505;

const int ERROR_VOLMGR_DISK_NOT_EMPTY = 3224895506;

const int ERROR_VOLMGR_DISK_NOT_ENOUGH_SPACE = 3224895507;

const int ERROR_VOLMGR_DISK_REVECTORING_FAILED = 3224895508;

const int ERROR_VOLMGR_DISK_SECTOR_SIZE_INVALID = 3224895509;

const int ERROR_VOLMGR_DISK_SET_NOT_CONTAINED = 3224895510;

const int ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_MEMBERS = 3224895511;

const int ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_PLEXES = 3224895512;

const int ERROR_VOLMGR_DYNAMIC_DISK_NOT_SUPPORTED = 3224895513;

const int ERROR_VOLMGR_EXTENT_ALREADY_USED = 3224895514;

const int ERROR_VOLMGR_EXTENT_NOT_CONTIGUOUS = 3224895515;

const int ERROR_VOLMGR_EXTENT_NOT_IN_PUBLIC_REGION = 3224895516;

const int ERROR_VOLMGR_EXTENT_NOT_SECTOR_ALIGNED = 3224895517;

const int ERROR_VOLMGR_EXTENT_OVERLAPS_EBR_PARTITION = 3224895518;

const int ERROR_VOLMGR_EXTENT_VOLUME_LENGTHS_DO_NOT_MATCH = 3224895519;

const int ERROR_VOLMGR_FAULT_TOLERANT_NOT_SUPPORTED = 3224895520;

const int ERROR_VOLMGR_INTERLEAVE_LENGTH_INVALID = 3224895521;

const int ERROR_VOLMGR_MAXIMUM_REGISTERED_USERS = 3224895522;

const int ERROR_VOLMGR_MEMBER_IN_SYNC = 3224895523;

const int ERROR_VOLMGR_MEMBER_INDEX_DUPLICATE = 3224895524;

const int ERROR_VOLMGR_MEMBER_INDEX_INVALID = 3224895525;

const int ERROR_VOLMGR_MEMBER_MISSING = 3224895526;

const int ERROR_VOLMGR_MEMBER_NOT_DETACHED = 3224895527;

const int ERROR_VOLMGR_MEMBER_REGENERATING = 3224895528;

const int ERROR_VOLMGR_ALL_DISKS_FAILED = 3224895529;

const int ERROR_VOLMGR_NO_REGISTERED_USERS = 3224895530;

const int ERROR_VOLMGR_NO_SUCH_USER = 3224895531;

const int ERROR_VOLMGR_NOTIFICATION_RESET = 3224895532;

const int ERROR_VOLMGR_NUMBER_OF_MEMBERS_INVALID = 3224895533;

const int ERROR_VOLMGR_NUMBER_OF_PLEXES_INVALID = 3224895534;

const int ERROR_VOLMGR_PACK_DUPLICATE = 3224895535;

const int ERROR_VOLMGR_PACK_ID_INVALID = 3224895536;

const int ERROR_VOLMGR_PACK_INVALID = 3224895537;

const int ERROR_VOLMGR_PACK_NAME_INVALID = 3224895538;

const int ERROR_VOLMGR_PACK_OFFLINE = 3224895539;

const int ERROR_VOLMGR_PACK_HAS_QUORUM = 3224895540;

const int ERROR_VOLMGR_PACK_WITHOUT_QUORUM = 3224895541;

const int ERROR_VOLMGR_PARTITION_STYLE_INVALID = 3224895542;

const int ERROR_VOLMGR_PARTITION_UPDATE_FAILED = 3224895543;

const int ERROR_VOLMGR_PLEX_IN_SYNC = 3224895544;

const int ERROR_VOLMGR_PLEX_INDEX_DUPLICATE = 3224895545;

const int ERROR_VOLMGR_PLEX_INDEX_INVALID = 3224895546;

const int ERROR_VOLMGR_PLEX_LAST_ACTIVE = 3224895547;

const int ERROR_VOLMGR_PLEX_MISSING = 3224895548;

const int ERROR_VOLMGR_PLEX_REGENERATING = 3224895549;

const int ERROR_VOLMGR_PLEX_TYPE_INVALID = 3224895550;

const int ERROR_VOLMGR_PLEX_NOT_RAID5 = 3224895551;

const int ERROR_VOLMGR_PLEX_NOT_SIMPLE = 3224895552;

const int ERROR_VOLMGR_STRUCTURE_SIZE_INVALID = 3224895553;

const int ERROR_VOLMGR_TOO_MANY_NOTIFICATION_REQUESTS = 3224895554;

const int ERROR_VOLMGR_TRANSACTION_IN_PROGRESS = 3224895555;

const int ERROR_VOLMGR_UNEXPECTED_DISK_LAYOUT_CHANGE = 3224895556;

const int ERROR_VOLMGR_VOLUME_CONTAINS_MISSING_DISK = 3224895557;

const int ERROR_VOLMGR_VOLUME_ID_INVALID = 3224895558;

const int ERROR_VOLMGR_VOLUME_LENGTH_INVALID = 3224895559;

const int ERROR_VOLMGR_VOLUME_LENGTH_NOT_SECTOR_SIZE_MULTIPLE = 3224895560;

const int ERROR_VOLMGR_VOLUME_NOT_MIRRORED = 3224895561;

const int ERROR_VOLMGR_VOLUME_NOT_RETAINED = 3224895562;

const int ERROR_VOLMGR_VOLUME_OFFLINE = 3224895563;

const int ERROR_VOLMGR_VOLUME_RETAINED = 3224895564;

const int ERROR_VOLMGR_NUMBER_OF_EXTENTS_INVALID = 3224895565;

const int ERROR_VOLMGR_DIFFERENT_SECTOR_SIZE = 3224895566;

const int ERROR_VOLMGR_BAD_BOOT_DISK = 3224895567;

const int ERROR_VOLMGR_PACK_CONFIG_OFFLINE = 3224895568;

const int ERROR_VOLMGR_PACK_CONFIG_ONLINE = 3224895569;

const int ERROR_VOLMGR_NOT_PRIMARY_PACK = 3224895570;

const int ERROR_VOLMGR_PACK_LOG_UPDATE_FAILED = 3224895571;

const int ERROR_VOLMGR_NUMBER_OF_DISKS_IN_PLEX_INVALID = 3224895572;

const int ERROR_VOLMGR_NUMBER_OF_DISKS_IN_MEMBER_INVALID = 3224895573;

const int ERROR_VOLMGR_VOLUME_MIRRORED = 3224895574;

const int ERROR_VOLMGR_PLEX_NOT_SIMPLE_SPANNED = 3224895575;

const int ERROR_VOLMGR_NO_VALID_LOG_COPIES = 3224895576;

const int ERROR_VOLMGR_PRIMARY_PACK_PRESENT = 3224895577;

const int ERROR_VOLMGR_NUMBER_OF_DISKS_INVALID = 3224895578;

const int ERROR_VOLMGR_MIRROR_NOT_SUPPORTED = 3224895579;

const int ERROR_VOLMGR_RAID5_NOT_SUPPORTED = 3224895580;

const int ERROR_BCD_NOT_ALL_ENTRIES_IMPORTED = 2151219201;

const int ERROR_BCD_TOO_MANY_ELEMENTS = 3224961026;

const int ERROR_BCD_NOT_ALL_ENTRIES_SYNCHRONIZED = 2151219203;

const int ERROR_VHD_DRIVE_FOOTER_MISSING = 3225026561;

const int ERROR_VHD_DRIVE_FOOTER_CHECKSUM_MISMATCH = 3225026562;

const int ERROR_VHD_DRIVE_FOOTER_CORRUPT = 3225026563;

const int ERROR_VHD_FORMAT_UNKNOWN = 3225026564;

const int ERROR_VHD_FORMAT_UNSUPPORTED_VERSION = 3225026565;

const int ERROR_VHD_SPARSE_HEADER_CHECKSUM_MISMATCH = 3225026566;

const int ERROR_VHD_SPARSE_HEADER_UNSUPPORTED_VERSION = 3225026567;

const int ERROR_VHD_SPARSE_HEADER_CORRUPT = 3225026568;

const int ERROR_VHD_BLOCK_ALLOCATION_FAILURE = 3225026569;

const int ERROR_VHD_BLOCK_ALLOCATION_TABLE_CORRUPT = 3225026570;

const int ERROR_VHD_INVALID_BLOCK_SIZE = 3225026571;

const int ERROR_VHD_BITMAP_MISMATCH = 3225026572;

const int ERROR_VHD_PARENT_VHD_NOT_FOUND = 3225026573;

const int ERROR_VHD_CHILD_PARENT_ID_MISMATCH = 3225026574;

const int ERROR_VHD_CHILD_PARENT_TIMESTAMP_MISMATCH = 3225026575;

const int ERROR_VHD_METADATA_READ_FAILURE = 3225026576;

const int ERROR_VHD_METADATA_WRITE_FAILURE = 3225026577;

const int ERROR_VHD_INVALID_SIZE = 3225026578;

const int ERROR_VHD_INVALID_FILE_SIZE = 3225026579;

const int ERROR_VIRTDISK_PROVIDER_NOT_FOUND = 3225026580;

const int ERROR_VIRTDISK_NOT_VIRTUAL_DISK = 3225026581;

const int ERROR_VHD_PARENT_VHD_ACCESS_DENIED = 3225026582;

const int ERROR_VHD_CHILD_PARENT_SIZE_MISMATCH = 3225026583;

const int ERROR_VHD_DIFFERENCING_CHAIN_CYCLE_DETECTED = 3225026584;

const int ERROR_VHD_DIFFERENCING_CHAIN_ERROR_IN_PARENT = 3225026585;

const int ERROR_VIRTUAL_DISK_LIMITATION = 3225026586;

const int ERROR_VHD_INVALID_TYPE = 3225026587;

const int ERROR_VHD_INVALID_STATE = 3225026588;

const int ERROR_VIRTDISK_UNSUPPORTED_DISK_SECTOR_SIZE = 3225026589;

const int ERROR_VIRTDISK_DISK_ALREADY_OWNED = 3225026590;

const int ERROR_VIRTDISK_DISK_ONLINE_AND_WRITABLE = 3225026591;

const int ERROR_CTLOG_TRACKING_NOT_INITIALIZED = 3225026592;

const int ERROR_CTLOG_LOGFILE_SIZE_EXCEEDED_MAXSIZE = 3225026593;

const int ERROR_CTLOG_VHD_CHANGED_OFFLINE = 3225026594;

const int ERROR_CTLOG_INVALID_TRACKING_STATE = 3225026595;

const int ERROR_CTLOG_INCONSISTENT_TRACKING_FILE = 3225026596;

const int ERROR_VHD_RESIZE_WOULD_TRUNCATE_DATA = 3225026597;

const int ERROR_VHD_COULD_NOT_COMPUTE_MINIMUM_VIRTUAL_SIZE = 3225026598;

const int ERROR_VHD_ALREADY_AT_OR_BELOW_MINIMUM_VIRTUAL_SIZE = 3225026599;

const int ERROR_VHD_METADATA_FULL = 3225026600;

const int ERROR_VHD_INVALID_CHANGE_TRACKING_ID = 3225026601;

const int ERROR_VHD_CHANGE_TRACKING_DISABLED = 3225026602;

const int ERROR_VHD_MISSING_CHANGE_TRACKING_INFORMATION = 3225026608;

const int ERROR_QUERY_STORAGE_ERROR = 2151284737;

const int HCN_E_NETWORK_NOT_FOUND = -2143617023;

const int HCN_E_ENDPOINT_NOT_FOUND = -2143617022;

const int HCN_E_LAYER_NOT_FOUND = -2143617021;

const int HCN_E_SWITCH_NOT_FOUND = -2143617020;

const int HCN_E_SUBNET_NOT_FOUND = -2143617019;

const int HCN_E_ADAPTER_NOT_FOUND = -2143617018;

const int HCN_E_PORT_NOT_FOUND = -2143617017;

const int HCN_E_POLICY_NOT_FOUND = -2143617016;

const int HCN_E_VFP_PORTSETTING_NOT_FOUND = -2143617015;

const int HCN_E_INVALID_NETWORK = -2143617014;

const int HCN_E_INVALID_NETWORK_TYPE = -2143617013;

const int HCN_E_INVALID_ENDPOINT = -2143617012;

const int HCN_E_INVALID_POLICY = -2143617011;

const int HCN_E_INVALID_POLICY_TYPE = -2143617010;

const int HCN_E_INVALID_REMOTE_ENDPOINT_OPERATION = -2143617009;

const int HCN_E_NETWORK_ALREADY_EXISTS = -2143617008;

const int HCN_E_LAYER_ALREADY_EXISTS = -2143617007;

const int HCN_E_POLICY_ALREADY_EXISTS = -2143617006;

const int HCN_E_PORT_ALREADY_EXISTS = -2143617005;

const int HCN_E_ENDPOINT_ALREADY_ATTACHED = -2143617004;

const int HCN_E_REQUEST_UNSUPPORTED = -2143617003;

const int HCN_E_MAPPING_NOT_SUPPORTED = -2143617002;

const int HCN_E_DEGRADED_OPERATION = -2143617001;

const int HCN_E_SHARED_SWITCH_MODIFICATION = -2143617000;

const int HCN_E_GUID_CONVERSION_FAILURE = -2143616999;

const int HCN_E_REGKEY_FAILURE = -2143616998;

const int HCN_E_INVALID_JSON = -2143616997;

const int HCN_E_INVALID_JSON_REFERENCE = -2143616996;

const int HCN_E_ENDPOINT_SHARING_DISABLED = -2143616995;

const int HCN_E_INVALID_IP = -2143616994;

const int HCN_E_SWITCH_EXTENSION_NOT_FOUND = -2143616993;

const int HCN_E_MANAGER_STOPPED = -2143616992;

const int GCN_E_MODULE_NOT_FOUND = -2143616991;

const int GCN_E_NO_REQUEST_HANDLERS = -2143616990;

const int GCN_E_REQUEST_UNSUPPORTED = -2143616989;

const int GCN_E_RUNTIMEKEYS_FAILED = -2143616988;

const int GCN_E_NETADAPTER_TIMEOUT = -2143616987;

const int GCN_E_NETADAPTER_NOT_FOUND = -2143616986;

const int GCN_E_NETCOMPARTMENT_NOT_FOUND = -2143616985;

const int GCN_E_NETINTERFACE_NOT_FOUND = -2143616984;

const int GCN_E_DEFAULTNAMESPACE_EXISTS = -2143616983;

const int HCN_E_ICS_DISABLED = -2143616982;

const int HCN_E_ENDPOINT_NAMESPACE_ALREADY_EXISTS = -2143616981;

const int HCN_E_ENTITY_HAS_REFERENCES = -2143616980;

const int HCN_E_INVALID_INTERNAL_PORT = -2143616979;

const int HCN_E_NAMESPACE_ATTACH_FAILED = -2143616978;

const int HCN_E_ADDR_INVALID_OR_RESERVED = -2143616977;

const int HCN_E_INVALID_PREFIX = -2143616976;

const int HCN_E_OBJECT_USED_AFTER_UNLOAD = -2143616975;

const int HCN_E_INVALID_SUBNET = -2143616974;

const int HCN_E_INVALID_IP_SUBNET = -2143616973;

const int HCN_E_ENDPOINT_NOT_ATTACHED = -2143616972;

const int HCN_E_ENDPOINT_NOT_LOCAL = -2143616971;

const int HCN_INTERFACEPARAMETERS_ALREADY_APPLIED = -2143616970;

const int SDIAG_E_CANCELLED = 2151416064;

const int SDIAG_E_SCRIPT = 2151416065;

const int SDIAG_E_POWERSHELL = 2151416066;

const int SDIAG_E_MANAGEDHOST = 2151416067;

const int SDIAG_E_NOVERIFIER = 2151416068;

const int SDIAG_S_CANNOTRUN = 3932421;

const int SDIAG_E_DISABLED = 2151416070;

const int SDIAG_E_TRUST = 2151416071;

const int SDIAG_E_CANNOTRUN = 2151416072;

const int SDIAG_E_VERSION = 2151416073;

const int SDIAG_E_RESOURCE = 2151416074;

const int SDIAG_E_ROOTCAUSE = 2151416075;

const int WPN_E_CHANNEL_CLOSED = -2143420160;

const int WPN_E_CHANNEL_REQUEST_NOT_COMPLETE = -2143420159;

const int WPN_E_INVALID_APP = -2143420158;

const int WPN_E_OUTSTANDING_CHANNEL_REQUEST = -2143420157;

const int WPN_E_DUPLICATE_CHANNEL = -2143420156;

const int WPN_E_PLATFORM_UNAVAILABLE = -2143420155;

const int WPN_E_NOTIFICATION_POSTED = -2143420154;

const int WPN_E_NOTIFICATION_HIDDEN = -2143420153;

const int WPN_E_NOTIFICATION_NOT_POSTED = -2143420152;

const int WPN_E_CLOUD_DISABLED = -2143420151;

const int WPN_E_CLOUD_INCAPABLE = -2143420144;

const int WPN_E_CLOUD_AUTH_UNAVAILABLE = -2143420134;

const int WPN_E_CLOUD_SERVICE_UNAVAILABLE = -2143420133;

const int WPN_E_FAILED_LOCK_SCREEN_UPDATE_INTIALIZATION = -2143420132;

const int WPN_E_NOTIFICATION_DISABLED = -2143420143;

const int WPN_E_NOTIFICATION_INCAPABLE = -2143420142;

const int WPN_E_INTERNET_INCAPABLE = -2143420141;

const int WPN_E_NOTIFICATION_TYPE_DISABLED = -2143420140;

const int WPN_E_NOTIFICATION_SIZE = -2143420139;

const int WPN_E_TAG_SIZE = -2143420138;

const int WPN_E_ACCESS_DENIED = -2143420137;

const int WPN_E_DUPLICATE_REGISTRATION = -2143420136;

const int WPN_E_PUSH_NOTIFICATION_INCAPABLE = -2143420135;

const int WPN_E_DEV_ID_SIZE = -2143420128;

const int WPN_E_TAG_ALPHANUMERIC = -2143420118;

const int WPN_E_INVALID_HTTP_STATUS_CODE = -2143420117;

const int WPN_E_OUT_OF_SESSION = -2143419904;

const int WPN_E_POWER_SAVE = -2143419903;

const int WPN_E_IMAGE_NOT_FOUND_IN_CACHE = -2143419902;

const int WPN_E_ALL_URL_NOT_COMPLETED = -2143419901;

const int WPN_E_INVALID_CLOUD_IMAGE = -2143419900;

const int WPN_E_NOTIFICATION_ID_MATCHED = -2143419899;

const int WPN_E_CALLBACK_ALREADY_REGISTERED = -2143419898;

const int WPN_E_TOAST_NOTIFICATION_DROPPED = -2143419897;

const int WPN_E_STORAGE_LOCKED = -2143419896;

const int WPN_E_GROUP_SIZE = -2143419895;

const int WPN_E_GROUP_ALPHANUMERIC = -2143419894;

const int WPN_E_CLOUD_DISABLED_FOR_APP = -2143419893;

const int E_MBN_CONTEXT_NOT_ACTIVATED = -2141945343;

const int E_MBN_BAD_SIM = -2141945342;

const int E_MBN_DATA_CLASS_NOT_AVAILABLE = -2141945341;

const int E_MBN_INVALID_ACCESS_STRING = -2141945340;

const int E_MBN_MAX_ACTIVATED_CONTEXTS = -2141945339;

const int E_MBN_PACKET_SVC_DETACHED = -2141945338;

const int E_MBN_PROVIDER_NOT_VISIBLE = -2141945337;

const int E_MBN_RADIO_POWER_OFF = -2141945336;

const int E_MBN_SERVICE_NOT_ACTIVATED = -2141945335;

const int E_MBN_SIM_NOT_INSERTED = -2141945334;

const int E_MBN_VOICE_CALL_IN_PROGRESS = -2141945333;

const int E_MBN_INVALID_CACHE = -2141945332;

const int E_MBN_NOT_REGISTERED = -2141945331;

const int E_MBN_PROVIDERS_NOT_FOUND = -2141945330;

const int E_MBN_PIN_NOT_SUPPORTED = -2141945329;

const int E_MBN_PIN_REQUIRED = -2141945328;

const int E_MBN_PIN_DISABLED = -2141945327;

const int E_MBN_FAILURE = -2141945326;

const int E_MBN_INVALID_PROFILE = -2141945320;

const int E_MBN_DEFAULT_PROFILE_EXIST = -2141945319;

const int E_MBN_SMS_ENCODING_NOT_SUPPORTED = -2141945312;

const int E_MBN_SMS_FILTER_NOT_SUPPORTED = -2141945311;

const int E_MBN_SMS_INVALID_MEMORY_INDEX = -2141945310;

const int E_MBN_SMS_LANG_NOT_SUPPORTED = -2141945309;

const int E_MBN_SMS_MEMORY_FAILURE = -2141945308;

const int E_MBN_SMS_NETWORK_TIMEOUT = -2141945307;

const int E_MBN_SMS_UNKNOWN_SMSC_ADDRESS = -2141945306;

const int E_MBN_SMS_FORMAT_NOT_SUPPORTED = -2141945305;

const int E_MBN_SMS_OPERATION_NOT_ALLOWED = -2141945304;

const int E_MBN_SMS_MEMORY_FULL = -2141945303;

const int PEER_E_IPV6_NOT_INSTALLED = -2140995583;

const int PEER_E_NOT_INITIALIZED = -2140995582;

const int PEER_E_CANNOT_START_SERVICE = -2140995581;

const int PEER_E_NOT_LICENSED = -2140995580;

const int PEER_E_INVALID_GRAPH = -2140995568;

const int PEER_E_DBNAME_CHANGED = -2140995567;

const int PEER_E_DUPLICATE_GRAPH = -2140995566;

const int PEER_E_GRAPH_NOT_READY = -2140995565;

const int PEER_E_GRAPH_SHUTTING_DOWN = -2140995564;

const int PEER_E_GRAPH_IN_USE = -2140995563;

const int PEER_E_INVALID_DATABASE = -2140995562;

const int PEER_E_TOO_MANY_ATTRIBUTES = -2140995561;

const int PEER_E_CONNECTION_NOT_FOUND = -2140995325;

const int PEER_E_CONNECT_SELF = -2140995322;

const int PEER_E_ALREADY_LISTENING = -2140995321;

const int PEER_E_NODE_NOT_FOUND = -2140995320;

const int PEER_E_CONNECTION_FAILED = -2140995319;

const int PEER_E_CONNECTION_NOT_AUTHENTICATED = -2140995318;

const int PEER_E_CONNECTION_REFUSED = -2140995317;

const int PEER_E_CLASSIFIER_TOO_LONG = -2140995071;

const int PEER_E_TOO_MANY_IDENTITIES = -2140995070;

const int PEER_E_NO_KEY_ACCESS = -2140995069;

const int PEER_E_GROUPS_EXIST = -2140995068;

const int PEER_E_RECORD_NOT_FOUND = -2140994815;

const int PEER_E_DATABASE_ACCESSDENIED = -2140994814;

const int PEER_E_DBINITIALIZATION_FAILED = -2140994813;

const int PEER_E_MAX_RECORD_SIZE_EXCEEDED = -2140994812;

const int PEER_E_DATABASE_ALREADY_PRESENT = -2140994811;

const int PEER_E_DATABASE_NOT_PRESENT = -2140994810;

const int PEER_E_IDENTITY_NOT_FOUND = -2140994559;

const int PEER_E_EVENT_HANDLE_NOT_FOUND = -2140994303;

const int PEER_E_INVALID_SEARCH = -2140994047;

const int PEER_E_INVALID_ATTRIBUTES = -2140994046;

const int PEER_E_INVITATION_NOT_TRUSTED = -2140993791;

const int PEER_E_CHAIN_TOO_LONG = -2140993789;

const int PEER_E_INVALID_TIME_PERIOD = -2140993787;

const int PEER_E_CIRCULAR_CHAIN_DETECTED = -2140993786;

const int PEER_E_CERT_STORE_CORRUPTED = -2140993535;

const int PEER_E_NO_CLOUD = -2140991487;

const int PEER_E_CLOUD_NAME_AMBIGUOUS = -2140991483;

const int PEER_E_INVALID_RECORD = -2140987376;

const int PEER_E_NOT_AUTHORIZED = -2140987360;

const int PEER_E_PASSWORD_DOES_NOT_MEET_POLICY = -2140987359;

const int PEER_E_DEFERRED_VALIDATION = -2140987344;

const int PEER_E_INVALID_GROUP_PROPERTIES = -2140987328;

const int PEER_E_INVALID_PEER_NAME = -2140987312;

const int PEER_E_INVALID_CLASSIFIER = -2140987296;

const int PEER_E_INVALID_FRIENDLY_NAME = -2140987280;

const int PEER_E_INVALID_ROLE_PROPERTY = -2140987279;

const int PEER_E_INVALID_CLASSIFIER_PROPERTY = -2140987278;

const int PEER_E_INVALID_RECORD_EXPIRATION = -2140987264;

const int PEER_E_INVALID_CREDENTIAL_INFO = -2140987263;

const int PEER_E_INVALID_CREDENTIAL = -2140987262;

const int PEER_E_INVALID_RECORD_SIZE = -2140987261;

const int PEER_E_UNSUPPORTED_VERSION = -2140987248;

const int PEER_E_GROUP_NOT_READY = -2140987247;

const int PEER_E_GROUP_IN_USE = -2140987246;

const int PEER_E_INVALID_GROUP = -2140987245;

const int PEER_E_NO_MEMBERS_FOUND = -2140987244;

const int PEER_E_NO_MEMBER_CONNECTIONS = -2140987243;

const int PEER_E_UNABLE_TO_LISTEN = -2140987242;

const int PEER_E_IDENTITY_DELETED = -2140987232;

const int PEER_E_SERVICE_NOT_AVAILABLE = -2140987231;

const int PEER_E_CONTACT_NOT_FOUND = -2140971007;

const int PEER_S_GRAPH_DATA_CREATED = 6488065;

const int PEER_S_NO_EVENT_DATA = 6488066;

const int PEER_S_ALREADY_CONNECTED = 6496256;

const int PEER_S_SUBSCRIPTION_EXISTS = 6512640;

const int PEER_S_NO_CONNECTIVITY = 6488069;

const int PEER_S_ALREADY_A_MEMBER = 6488070;

const int PEER_E_CANNOT_CONVERT_PEER_NAME = -2140979199;

const int PEER_E_INVALID_PEER_HOST_NAME = -2140979198;

const int PEER_E_NO_MORE = -2140979197;

const int PEER_E_PNRP_DUPLICATE_PEER_NAME = -2140979195;

const int PEER_E_INVITE_CANCELLED = -2140966912;

const int PEER_E_INVITE_RESPONSE_NOT_AVAILABLE = -2140966911;

const int PEER_E_NOT_SIGNED_IN = -2140966909;

const int PEER_E_PRIVACY_DECLINED = -2140966908;

const int PEER_E_TIMEOUT = -2140966907;

const int PEER_E_INVALID_ADDRESS = -2140966905;

const int PEER_E_FW_EXCEPTION_DISABLED = -2140966904;

const int PEER_E_FW_BLOCKED_BY_POLICY = -2140966903;

const int PEER_E_FW_BLOCKED_BY_SHIELDS_UP = -2140966902;

const int PEER_E_FW_DECLINED = -2140966901;

const int UI_E_CREATE_FAILED = -2144731135;

const int UI_E_SHUTDOWN_CALLED = -2144731134;

const int UI_E_ILLEGAL_REENTRANCY = -2144731133;

const int UI_E_OBJECT_SEALED = -2144731132;

const int UI_E_VALUE_NOT_SET = -2144731131;

const int UI_E_VALUE_NOT_DETERMINED = -2144731130;

const int UI_E_INVALID_OUTPUT = -2144731129;

const int UI_E_BOOLEAN_EXPECTED = -2144731128;

const int UI_E_DIFFERENT_OWNER = -2144731127;

const int UI_E_AMBIGUOUS_MATCH = -2144731126;

const int UI_E_FP_OVERFLOW = -2144731125;

const int UI_E_WRONG_THREAD = -2144731124;

const int UI_E_STORYBOARD_ACTIVE = -2144730879;

const int UI_E_STORYBOARD_NOT_PLAYING = -2144730878;

const int UI_E_START_KEYFRAME_AFTER_END = -2144730877;

const int UI_E_END_KEYFRAME_NOT_DETERMINED = -2144730876;

const int UI_E_LOOPS_OVERLAP = -2144730875;

const int UI_E_TRANSITION_ALREADY_USED = -2144730874;

const int UI_E_TRANSITION_NOT_IN_STORYBOARD = -2144730873;

const int UI_E_TRANSITION_ECLIPSED = -2144730872;

const int UI_E_TIME_BEFORE_LAST_UPDATE = -2144730871;

const int UI_E_TIMER_CLIENT_ALREADY_CONNECTED = -2144730870;

const int UI_E_INVALID_DIMENSION = -2144730869;

const int UI_E_PRIMITIVE_OUT_OF_BOUNDS = -2144730868;

const int UI_E_WINDOW_CLOSED = -2144730623;

const int E_BLUETOOTH_ATT_INVALID_HANDLE = -2140864511;

const int E_BLUETOOTH_ATT_READ_NOT_PERMITTED = -2140864510;

const int E_BLUETOOTH_ATT_WRITE_NOT_PERMITTED = -2140864509;

const int E_BLUETOOTH_ATT_INVALID_PDU = -2140864508;

const int E_BLUETOOTH_ATT_INSUFFICIENT_AUTHENTICATION = -2140864507;

const int E_BLUETOOTH_ATT_REQUEST_NOT_SUPPORTED = -2140864506;

const int E_BLUETOOTH_ATT_INVALID_OFFSET = -2140864505;

const int E_BLUETOOTH_ATT_INSUFFICIENT_AUTHORIZATION = -2140864504;

const int E_BLUETOOTH_ATT_PREPARE_QUEUE_FULL = -2140864503;

const int E_BLUETOOTH_ATT_ATTRIBUTE_NOT_FOUND = -2140864502;

const int E_BLUETOOTH_ATT_ATTRIBUTE_NOT_LONG = -2140864501;

const int E_BLUETOOTH_ATT_INSUFFICIENT_ENCRYPTION_KEY_SIZE = -2140864500;

const int E_BLUETOOTH_ATT_INVALID_ATTRIBUTE_VALUE_LENGTH = -2140864499;

const int E_BLUETOOTH_ATT_UNLIKELY = -2140864498;

const int E_BLUETOOTH_ATT_INSUFFICIENT_ENCRYPTION = -2140864497;

const int E_BLUETOOTH_ATT_UNSUPPORTED_GROUP_TYPE = -2140864496;

const int E_BLUETOOTH_ATT_INSUFFICIENT_RESOURCES = -2140864495;

const int E_BLUETOOTH_ATT_UNKNOWN_ERROR = -2140860416;

const int E_AUDIO_ENGINE_NODE_NOT_FOUND = -2140798975;

const int E_HDAUDIO_EMPTY_CONNECTION_LIST = -2140798974;

const int E_HDAUDIO_CONNECTION_LIST_NOT_SUPPORTED = -2140798973;

const int E_HDAUDIO_NO_LOGICAL_DEVICES_CREATED = -2140798972;

const int E_HDAUDIO_NULL_LINKED_LIST_ENTRY = -2140798971;

const int STATEREPOSITORY_E_CONCURRENCY_LOCKING_FAILURE = -2140733439;

const int STATEREPOSITORY_E_STATEMENT_INPROGRESS = -2140733438;

const int STATEREPOSITORY_E_CONFIGURATION_INVALID = -2140733437;

const int STATEREPOSITORY_E_UNKNOWN_SCHEMA_VERSION = -2140733436;

const int STATEREPOSITORY_ERROR_DICTIONARY_CORRUPTED = -2140733435;

const int STATEREPOSITORY_E_BLOCKED = -2140733434;

const int STATEREPOSITORY_E_BUSY_RETRY = -2140733433;

const int STATEREPOSITORY_E_BUSY_RECOVERY_RETRY = -2140733432;

const int STATEREPOSITORY_E_LOCKED_RETRY = -2140733431;

const int STATEREPOSITORY_E_LOCKED_SHAREDCACHE_RETRY = -2140733430;

const int STATEREPOSITORY_E_TRANSACTION_REQUIRED = -2140733429;

const int STATEREPOSITORY_E_BUSY_TIMEOUT_EXCEEDED = -2140733428;

const int STATEREPOSITORY_E_BUSY_RECOVERY_TIMEOUT_EXCEEDED = -2140733427;

const int STATEREPOSITORY_E_LOCKED_TIMEOUT_EXCEEDED = -2140733426;

const int STATEREPOSITORY_E_LOCKED_SHAREDCACHE_TIMEOUT_EXCEEDED = -2140733425;

const int STATEREPOSITORY_E_SERVICE_STOP_IN_PROGRESS = -2140733424;

const int STATEREPOSTORY_E_NESTED_TRANSACTION_NOT_SUPPORTED = -2140733423;

const int STATEREPOSITORY_ERROR_CACHE_CORRUPTED = -2140733422;

const int STATEREPOSITORY_TRANSACTION_CALLER_ID_CHANGED = 6750227;

const int STATEREPOSITORY_TRANSACTION_IN_PROGRESS = 6750228;

const int ERROR_SPACES_POOL_WAS_DELETED = 15138817;

const int ERROR_SPACES_FAULT_DOMAIN_TYPE_INVALID = -2132344831;

const int ERROR_SPACES_INTERNAL_ERROR = -2132344830;

const int ERROR_SPACES_RESILIENCY_TYPE_INVALID = -2132344829;

const int ERROR_SPACES_DRIVE_SECTOR_SIZE_INVALID = -2132344828;

const int ERROR_SPACES_DRIVE_REDUNDANCY_INVALID = -2132344826;

const int ERROR_SPACES_NUMBER_OF_DATA_COPIES_INVALID = -2132344825;

const int ERROR_SPACES_PARITY_LAYOUT_INVALID = -2132344824;

const int ERROR_SPACES_INTERLEAVE_LENGTH_INVALID = -2132344823;

const int ERROR_SPACES_NUMBER_OF_COLUMNS_INVALID = -2132344822;

const int ERROR_SPACES_NOT_ENOUGH_DRIVES = -2132344821;

const int ERROR_SPACES_EXTENDED_ERROR = -2132344820;

const int ERROR_SPACES_PROVISIONING_TYPE_INVALID = -2132344819;

const int ERROR_SPACES_ALLOCATION_SIZE_INVALID = -2132344818;

const int ERROR_SPACES_ENCLOSURE_AWARE_INVALID = -2132344817;

const int ERROR_SPACES_WRITE_CACHE_SIZE_INVALID = -2132344816;

const int ERROR_SPACES_NUMBER_OF_GROUPS_INVALID = -2132344815;

const int ERROR_SPACES_DRIVE_OPERATIONAL_STATE_INVALID = -2132344814;

const int ERROR_SPACES_ENTRY_INCOMPLETE = -2132344813;

const int ERROR_SPACES_ENTRY_INVALID = -2132344812;

const int ERROR_VOLSNAP_BOOTFILE_NOT_VALID = -2138963967;

const int ERROR_VOLSNAP_ACTIVATION_TIMEOUT = -2138963966;

const int ERROR_TIERING_NOT_SUPPORTED_ON_VOLUME = -2138898431;

const int ERROR_TIERING_VOLUME_DISMOUNT_IN_PROGRESS = -2138898430;

const int ERROR_TIERING_STORAGE_TIER_NOT_FOUND = -2138898429;

const int ERROR_TIERING_INVALID_FILE_ID = -2138898428;

const int ERROR_TIERING_WRONG_CLUSTER_NODE = -2138898427;

const int ERROR_TIERING_ALREADY_PROCESSING = -2138898426;

const int ERROR_TIERING_CANNOT_PIN_OBJECT = -2138898425;

const int ERROR_TIERING_FILE_IS_NOT_PINNED = -2138898424;

const int ERROR_NOT_A_TIERED_VOLUME = -2138898423;

const int ERROR_ATTRIBUTE_NOT_PRESENT = -2138898422;

const int ERROR_SECCORE_INVALID_COMMAND = -1058537472;

const int ERROR_NO_APPLICABLE_APP_LICENSES_FOUND = -1058406399;

const int ERROR_CLIP_LICENSE_NOT_FOUND = -1058406398;

const int ERROR_CLIP_DEVICE_LICENSE_MISSING = -1058406397;

const int ERROR_CLIP_LICENSE_INVALID_SIGNATURE = -1058406396;

const int ERROR_CLIP_KEYHOLDER_LICENSE_MISSING_OR_INVALID = -1058406395;

const int ERROR_CLIP_LICENSE_EXPIRED = -1058406394;

const int ERROR_CLIP_LICENSE_SIGNED_BY_UNKNOWN_SOURCE = -1058406393;

const int ERROR_CLIP_LICENSE_NOT_SIGNED = -1058406392;

const int ERROR_CLIP_LICENSE_HARDWARE_ID_OUT_OF_TOLERANCE = -1058406391;

const int ERROR_CLIP_LICENSE_DEVICE_ID_MISMATCH = -1058406390;

const int DXGI_STATUS_OCCLUDED = 142213121;

const int DXGI_STATUS_CLIPPED = 142213122;

const int DXGI_STATUS_NO_REDIRECTION = 142213124;

const int DXGI_STATUS_NO_DESKTOP_ACCESS = 142213125;

const int DXGI_STATUS_GRAPHICS_VIDPN_SOURCE_IN_USE = 142213126;

const int DXGI_STATUS_MODE_CHANGED = 142213127;

const int DXGI_STATUS_MODE_CHANGE_IN_PROGRESS = 142213128;

const int DXGI_ERROR_INVALID_CALL = -2005270527;

const int DXGI_ERROR_NOT_FOUND = -2005270526;

const int DXGI_ERROR_MORE_DATA = -2005270525;

const int DXGI_ERROR_UNSUPPORTED = -2005270524;

const int DXGI_ERROR_DEVICE_REMOVED = -2005270523;

const int DXGI_ERROR_DEVICE_HUNG = -2005270522;

const int DXGI_ERROR_DEVICE_RESET = -2005270521;

const int DXGI_ERROR_WAS_STILL_DRAWING = -2005270518;

const int DXGI_ERROR_FRAME_STATISTICS_DISJOINT = -2005270517;

const int DXGI_ERROR_GRAPHICS_VIDPN_SOURCE_IN_USE = -2005270516;

const int DXGI_ERROR_DRIVER_INTERNAL_ERROR = -2005270496;

const int DXGI_ERROR_NONEXCLUSIVE = -2005270495;

const int DXGI_ERROR_NOT_CURRENTLY_AVAILABLE = -2005270494;

const int DXGI_ERROR_REMOTE_CLIENT_DISCONNECTED = -2005270493;

const int DXGI_ERROR_REMOTE_OUTOFMEMORY = -2005270492;

const int DXGI_ERROR_ACCESS_LOST = -2005270490;

const int DXGI_ERROR_WAIT_TIMEOUT = -2005270489;

const int DXGI_ERROR_SESSION_DISCONNECTED = -2005270488;

const int DXGI_ERROR_RESTRICT_TO_OUTPUT_STALE = -2005270487;

const int DXGI_ERROR_CANNOT_PROTECT_CONTENT = -2005270486;

const int DXGI_ERROR_ACCESS_DENIED = -2005270485;

const int DXGI_ERROR_NAME_ALREADY_EXISTS = -2005270484;

const int DXGI_ERROR_SDK_COMPONENT_MISSING = -2005270483;

const int DXGI_ERROR_NOT_CURRENT = -2005270482;

const int DXGI_ERROR_HW_PROTECTION_OUTOFMEMORY = -2005270480;

const int DXGI_ERROR_DYNAMIC_CODE_POLICY_VIOLATION = -2005270479;

const int DXGI_ERROR_NON_COMPOSITED_UI = -2005270478;

const int DXCORE_ERROR_EVENT_NOT_UNREGISTERED = -2004877311;

const int DXGI_STATUS_UNOCCLUDED = 142213129;

const int DXGI_STATUS_DDA_WAS_STILL_DRAWING = 142213130;

const int DXGI_ERROR_MODE_CHANGE_IN_PROGRESS = -2005270491;

const int DXGI_STATUS_PRESENT_REQUIRED = 142213167;

const int DXGI_ERROR_CACHE_CORRUPT = -2005270477;

const int DXGI_ERROR_CACHE_FULL = -2005270476;

const int DXGI_ERROR_CACHE_HASH_COLLISION = -2005270475;

const int DXGI_ERROR_ALREADY_EXISTS = -2005270474;

const int DXGI_DDI_ERR_WASSTILLDRAWING = -2005204991;

const int DXGI_DDI_ERR_UNSUPPORTED = -2005204990;

const int DXGI_DDI_ERR_NONEXCLUSIVE = -2005204989;

const int D3D10_ERROR_TOO_MANY_UNIQUE_STATE_OBJECTS = -2005336063;

const int D3D10_ERROR_FILE_NOT_FOUND = -2005336062;

const int D3D11_ERROR_TOO_MANY_UNIQUE_STATE_OBJECTS = -2005139455;

const int D3D11_ERROR_FILE_NOT_FOUND = -2005139454;

const int D3D11_ERROR_TOO_MANY_UNIQUE_VIEW_OBJECTS = -2005139453;

const int D3D11_ERROR_DEFERRED_CONTEXT_MAP_WITHOUT_INITIAL_DISCARD =
    -2005139452;

const int D3D12_ERROR_ADAPTER_NOT_FOUND = -2005008383;

const int D3D12_ERROR_DRIVER_VERSION_MISMATCH = -2005008382;

const int D2DERR_WRONG_STATE = -2003238911;

const int D2DERR_NOT_INITIALIZED = -2003238910;

const int D2DERR_UNSUPPORTED_OPERATION = -2003238909;

const int D2DERR_SCANNER_FAILED = -2003238908;

const int D2DERR_SCREEN_ACCESS_DENIED = -2003238907;

const int D2DERR_DISPLAY_STATE_INVALID = -2003238906;

const int D2DERR_ZERO_VECTOR = -2003238905;

const int D2DERR_INTERNAL_ERROR = -2003238904;

const int D2DERR_DISPLAY_FORMAT_NOT_SUPPORTED = -2003238903;

const int D2DERR_INVALID_CALL = -2003238902;

const int D2DERR_NO_HARDWARE_DEVICE = -2003238901;

const int D2DERR_RECREATE_TARGET = -2003238900;

const int D2DERR_TOO_MANY_SHADER_ELEMENTS = -2003238899;

const int D2DERR_SHADER_COMPILE_FAILED = -2003238898;

const int D2DERR_MAX_TEXTURE_SIZE_EXCEEDED = -2003238897;

const int D2DERR_UNSUPPORTED_VERSION = -2003238896;

const int D2DERR_BAD_NUMBER = -2003238895;

const int D2DERR_WRONG_FACTORY = -2003238894;

const int D2DERR_LAYER_ALREADY_IN_USE = -2003238893;

const int D2DERR_POP_CALL_DID_NOT_MATCH_PUSH = -2003238892;

const int D2DERR_WRONG_RESOURCE_DOMAIN = -2003238891;

const int D2DERR_PUSH_POP_UNBALANCED = -2003238890;

const int D2DERR_RENDER_TARGET_HAS_LAYER_OR_CLIPRECT = -2003238889;

const int D2DERR_INCOMPATIBLE_BRUSH_TYPES = -2003238888;

const int D2DERR_WIN32_ERROR = -2003238887;

const int D2DERR_TARGET_NOT_GDI_COMPATIBLE = -2003238886;

const int D2DERR_TEXT_EFFECT_IS_WRONG_TYPE = -2003238885;

const int D2DERR_TEXT_RENDERER_NOT_RELEASED = -2003238884;

const int D2DERR_EXCEEDS_MAX_BITMAP_SIZE = -2003238883;

const int D2DERR_INVALID_GRAPH_CONFIGURATION = -2003238882;

const int D2DERR_INVALID_INTERNAL_GRAPH_CONFIGURATION = -2003238881;

const int D2DERR_CYCLIC_GRAPH = -2003238880;

const int D2DERR_BITMAP_CANNOT_DRAW = -2003238879;

const int D2DERR_OUTSTANDING_BITMAP_REFERENCES = -2003238878;

const int D2DERR_ORIGINAL_TARGET_NOT_BOUND = -2003238877;

const int D2DERR_INVALID_TARGET = -2003238876;

const int D2DERR_BITMAP_BOUND_AS_TARGET = -2003238875;

const int D2DERR_INSUFFICIENT_DEVICE_CAPABILITIES = -2003238874;

const int D2DERR_INTERMEDIATE_TOO_LARGE = -2003238873;

const int D2DERR_EFFECT_IS_NOT_REGISTERED = -2003238872;

const int D2DERR_INVALID_PROPERTY = -2003238871;

const int D2DERR_NO_SUBPROPERTIES = -2003238870;

const int D2DERR_PRINT_JOB_CLOSED = -2003238869;

const int D2DERR_PRINT_FORMAT_NOT_SUPPORTED = -2003238868;

const int D2DERR_TOO_MANY_TRANSFORM_INPUTS = -2003238867;

const int D2DERR_INVALID_GLYPH_IMAGE = -2003238866;

const int DWRITE_E_FILEFORMAT = -2003283968;

const int DWRITE_E_UNEXPECTED = -2003283967;

const int DWRITE_E_NOFONT = -2003283966;

const int DWRITE_E_FILENOTFOUND = -2003283965;

const int DWRITE_E_FILEACCESS = -2003283964;

const int DWRITE_E_FONTCOLLECTIONOBSOLETE = -2003283963;

const int DWRITE_E_ALREADYREGISTERED = -2003283962;

const int DWRITE_E_CACHEFORMAT = -2003283961;

const int DWRITE_E_CACHEVERSION = -2003283960;

const int DWRITE_E_UNSUPPORTEDOPERATION = -2003283959;

const int DWRITE_E_TEXTRENDERERINCOMPATIBLE = -2003283958;

const int DWRITE_E_FLOWDIRECTIONCONFLICTS = -2003283957;

const int DWRITE_E_NOCOLOR = -2003283956;

const int DWRITE_E_REMOTEFONT = -2003283955;

const int DWRITE_E_DOWNLOADCANCELLED = -2003283954;

const int DWRITE_E_DOWNLOADFAILED = -2003283953;

const int DWRITE_E_TOOMANYDOWNLOADS = -2003283952;

const int WINCODEC_ERR_WRONGSTATE = -2003292412;

const int WINCODEC_ERR_VALUEOUTOFRANGE = -2003292411;

const int WINCODEC_ERR_UNKNOWNIMAGEFORMAT = -2003292409;

const int WINCODEC_ERR_UNSUPPORTEDVERSION = -2003292405;

const int WINCODEC_ERR_NOTINITIALIZED = -2003292404;

const int WINCODEC_ERR_ALREADYLOCKED = -2003292403;

const int WINCODEC_ERR_PROPERTYNOTFOUND = -2003292352;

const int WINCODEC_ERR_PROPERTYNOTSUPPORTED = -2003292351;

const int WINCODEC_ERR_PROPERTYSIZE = -2003292350;

const int WINCODEC_ERR_CODECPRESENT = -2003292349;

const int WINCODEC_ERR_CODECNOTHUMBNAIL = -2003292348;

const int WINCODEC_ERR_PALETTEUNAVAILABLE = -2003292347;

const int WINCODEC_ERR_CODECTOOMANYSCANLINES = -2003292346;

const int WINCODEC_ERR_INTERNALERROR = -2003292344;

const int WINCODEC_ERR_SOURCERECTDOESNOTMATCHDIMENSIONS = -2003292343;

const int WINCODEC_ERR_COMPONENTNOTFOUND = -2003292336;

const int WINCODEC_ERR_IMAGESIZEOUTOFRANGE = -2003292335;

const int WINCODEC_ERR_TOOMUCHMETADATA = -2003292334;

const int WINCODEC_ERR_BADIMAGE = -2003292320;

const int WINCODEC_ERR_BADHEADER = -2003292319;

const int WINCODEC_ERR_FRAMEMISSING = -2003292318;

const int WINCODEC_ERR_BADMETADATAHEADER = -2003292317;

const int WINCODEC_ERR_BADSTREAMDATA = -2003292304;

const int WINCODEC_ERR_STREAMWRITE = -2003292303;

const int WINCODEC_ERR_STREAMREAD = -2003292302;

const int WINCODEC_ERR_STREAMNOTAVAILABLE = -2003292301;

const int WINCODEC_ERR_UNSUPPORTEDPIXELFORMAT = -2003292288;

const int WINCODEC_ERR_UNSUPPORTEDOPERATION = -2003292287;

const int WINCODEC_ERR_INVALIDREGISTRATION = -2003292278;

const int WINCODEC_ERR_COMPONENTINITIALIZEFAILURE = -2003292277;

const int WINCODEC_ERR_INSUFFICIENTBUFFER = -2003292276;

const int WINCODEC_ERR_DUPLICATEMETADATAPRESENT = -2003292275;

const int WINCODEC_ERR_PROPERTYUNEXPECTEDTYPE = -2003292274;

const int WINCODEC_ERR_UNEXPECTEDSIZE = -2003292273;

const int WINCODEC_ERR_INVALIDQUERYREQUEST = -2003292272;

const int WINCODEC_ERR_UNEXPECTEDMETADATATYPE = -2003292271;

const int WINCODEC_ERR_REQUESTONLYVALIDATMETADATAROOT = -2003292270;

const int WINCODEC_ERR_INVALIDQUERYCHARACTER = -2003292269;

const int WINCODEC_ERR_WIN32ERROR = -2003292268;

const int WINCODEC_ERR_INVALIDPROGRESSIVELEVEL = -2003292267;

const int WINCODEC_ERR_INVALIDJPEGSCANINDEX = -2003292266;

const int MILERR_OBJECTBUSY = -2003304447;

const int MILERR_INSUFFICIENTBUFFER = -2003304446;

const int MILERR_WIN32ERROR = -2003304445;

const int MILERR_SCANNER_FAILED = -2003304444;

const int MILERR_SCREENACCESSDENIED = -2003304443;

const int MILERR_DISPLAYSTATEINVALID = -2003304442;

const int MILERR_NONINVERTIBLEMATRIX = -2003304441;

const int MILERR_ZEROVECTOR = -2003304440;

const int MILERR_TERMINATED = -2003304439;

const int MILERR_BADNUMBER = -2003304438;

const int MILERR_INTERNALERROR = -2003304320;

const int MILERR_DISPLAYFORMATNOTSUPPORTED = -2003304316;

const int MILERR_INVALIDCALL = -2003304315;

const int MILERR_ALREADYLOCKED = -2003304314;

const int MILERR_NOTLOCKED = -2003304313;

const int MILERR_DEVICECANNOTRENDERTEXT = -2003304312;

const int MILERR_GLYPHBITMAPMISSED = -2003304311;

const int MILERR_MALFORMEDGLYPHCACHE = -2003304310;

const int MILERR_GENERIC_IGNORE = -2003304309;

const int MILERR_MALFORMED_GUIDELINE_DATA = -2003304308;

const int MILERR_NO_HARDWARE_DEVICE = -2003304307;

const int MILERR_NEED_RECREATE_AND_PRESENT = -2003304306;

const int MILERR_ALREADY_INITIALIZED = -2003304305;

const int MILERR_MISMATCHED_SIZE = -2003304304;

const int MILERR_NO_REDIRECTION_SURFACE_AVAILABLE = -2003304303;

const int MILERR_REMOTING_NOT_SUPPORTED = -2003304302;

const int MILERR_QUEUED_PRESENT_NOT_SUPPORTED = -2003304301;

const int MILERR_NOT_QUEUING_PRESENTS = -2003304300;

const int MILERR_NO_REDIRECTION_SURFACE_RETRY_LATER = -2003304299;

const int MILERR_TOOMANYSHADERELEMNTS = -2003304298;

const int MILERR_MROW_READLOCK_FAILED = -2003304297;

const int MILERR_MROW_UPDATE_FAILED = -2003304296;

const int MILERR_SHADER_COMPILE_FAILED = -2003304295;

const int MILERR_MAX_TEXTURE_SIZE_EXCEEDED = -2003304294;

const int MILERR_QPC_TIME_WENT_BACKWARD = -2003304293;

const int MILERR_DXGI_ENUMERATION_OUT_OF_SYNC = -2003304291;

const int MILERR_ADAPTER_NOT_FOUND = -2003304290;

const int MILERR_COLORSPACE_NOT_SUPPORTED = -2003304289;

const int MILERR_PREFILTER_NOT_SUPPORTED = -2003304288;

const int MILERR_DISPLAYID_ACCESS_DENIED = -2003304287;

const int UCEERR_INVALIDPACKETHEADER = -2003303424;

const int UCEERR_UNKNOWNPACKET = -2003303423;

const int UCEERR_ILLEGALPACKET = -2003303422;

const int UCEERR_MALFORMEDPACKET = -2003303421;

const int UCEERR_ILLEGALHANDLE = -2003303420;

const int UCEERR_HANDLELOOKUPFAILED = -2003303419;

const int UCEERR_RENDERTHREADFAILURE = -2003303418;

const int UCEERR_CTXSTACKFRSTTARGETNULL = -2003303417;

const int UCEERR_CONNECTIONIDLOOKUPFAILED = -2003303416;

const int UCEERR_BLOCKSFULL = -2003303415;

const int UCEERR_MEMORYFAILURE = -2003303414;

const int UCEERR_PACKETRECORDOUTOFRANGE = -2003303413;

const int UCEERR_ILLEGALRECORDTYPE = -2003303412;

const int UCEERR_OUTOFHANDLES = -2003303411;

const int UCEERR_UNCHANGABLE_UPDATE_ATTEMPTED = -2003303410;

const int UCEERR_NO_MULTIPLE_WORKER_THREADS = -2003303409;

const int UCEERR_REMOTINGNOTSUPPORTED = -2003303408;

const int UCEERR_MISSINGENDCOMMAND = -2003303407;

const int UCEERR_MISSINGBEGINCOMMAND = -2003303406;

const int UCEERR_CHANNELSYNCTIMEDOUT = -2003303405;

const int UCEERR_CHANNELSYNCABANDONED = -2003303404;

const int UCEERR_UNSUPPORTEDTRANSPORTVERSION = -2003303403;

const int UCEERR_TRANSPORTUNAVAILABLE = -2003303402;

const int UCEERR_FEEDBACK_UNSUPPORTED = -2003303401;

const int UCEERR_COMMANDTRANSPORTDENIED = -2003303400;

const int UCEERR_GRAPHICSSTREAMUNAVAILABLE = -2003303399;

const int UCEERR_GRAPHICSSTREAMALREADYOPEN = -2003303392;

const int UCEERR_TRANSPORTDISCONNECTED = -2003303391;

const int UCEERR_TRANSPORTOVERLOADED = -2003303390;

const int UCEERR_PARTITION_ZOMBIED = -2003303389;

const int MILAVERR_NOCLOCK = -2003303168;

const int MILAVERR_NOMEDIATYPE = -2003303167;

const int MILAVERR_NOVIDEOMIXER = -2003303166;

const int MILAVERR_NOVIDEOPRESENTER = -2003303165;

const int MILAVERR_NOREADYFRAMES = -2003303164;

const int MILAVERR_MODULENOTLOADED = -2003303163;

const int MILAVERR_WMPFACTORYNOTREGISTERED = -2003303162;

const int MILAVERR_INVALIDWMPVERSION = -2003303161;

const int MILAVERR_INSUFFICIENTVIDEORESOURCES = -2003303160;

const int MILAVERR_VIDEOACCELERATIONNOTAVAILABLE = -2003303159;

const int MILAVERR_REQUESTEDTEXTURETOOBIG = -2003303158;

const int MILAVERR_SEEKFAILED = -2003303157;

const int MILAVERR_UNEXPECTEDWMPFAILURE = -2003303156;

const int MILAVERR_MEDIAPLAYERCLOSED = -2003303155;

const int MILAVERR_UNKNOWNHARDWAREERROR = -2003303154;

const int MILEFFECTSERR_UNKNOWNPROPERTY = -2003302898;

const int MILEFFECTSERR_EFFECTNOTPARTOFGROUP = -2003302897;

const int MILEFFECTSERR_NOINPUTSOURCEATTACHED = -2003302896;

const int MILEFFECTSERR_CONNECTORNOTCONNECTED = -2003302895;

const int MILEFFECTSERR_CONNECTORNOTASSOCIATEDWITHEFFECT = -2003302894;

const int MILEFFECTSERR_RESERVED = -2003302893;

const int MILEFFECTSERR_CYCLEDETECTED = -2003302892;

const int MILEFFECTSERR_EFFECTINMORETHANONEGRAPH = -2003302891;

const int MILEFFECTSERR_EFFECTALREADYINAGRAPH = -2003302890;

const int MILEFFECTSERR_EFFECTHASNOCHILDREN = -2003302889;

const int MILEFFECTSERR_ALREADYATTACHEDTOLISTENER = -2003302888;

const int MILEFFECTSERR_NOTAFFINETRANSFORM = -2003302887;

const int MILEFFECTSERR_EMPTYBOUNDS = -2003302886;

const int MILEFFECTSERR_OUTPUTSIZETOOLARGE = -2003302885;

const int DWMERR_STATE_TRANSITION_FAILED = -2003302656;

const int DWMERR_THEME_FAILED = -2003302655;

const int DWMERR_CATASTROPHIC_FAILURE = -2003302654;

const int DCOMPOSITION_ERROR_WINDOW_ALREADY_COMPOSED = -2003302400;

const int DCOMPOSITION_ERROR_SURFACE_BEING_RENDERED = -2003302399;

const int DCOMPOSITION_ERROR_SURFACE_NOT_BEING_RENDERED = -2003302398;

const int ONL_E_INVALID_AUTHENTICATION_TARGET = -2138701823;

const int ONL_E_ACCESS_DENIED_BY_TOU = -2138701822;

const int ONL_E_INVALID_APPLICATION = -2138701821;

const int ONL_E_PASSWORD_UPDATE_REQUIRED = -2138701820;

const int ONL_E_ACCOUNT_UPDATE_REQUIRED = -2138701819;

const int ONL_E_FORCESIGNIN = -2138701818;

const int ONL_E_ACCOUNT_LOCKED = -2138701817;

const int ONL_E_PARENTAL_CONSENT_REQUIRED = -2138701816;

const int ONL_E_EMAIL_VERIFICATION_REQUIRED = -2138701815;

const int ONL_E_ACCOUNT_SUSPENDED_COMPROIMISE = -2138701814;

const int ONL_E_ACCOUNT_SUSPENDED_ABUSE = -2138701813;

const int ONL_E_ACTION_REQUIRED = -2138701812;

const int ONL_CONNECTION_COUNT_LIMIT = -2138701811;

const int ONL_E_CONNECTED_ACCOUNT_CAN_NOT_SIGNOUT = -2138701810;

const int ONL_E_USER_AUTHENTICATION_REQUIRED = -2138701809;

const int ONL_E_REQUEST_THROTTLED = -2138701808;

const int FA_E_MAX_PERSISTED_ITEMS_REACHED = -2144927200;

const int FA_E_HOMEGROUP_NOT_AVAILABLE = -2144927198;

const int E_MONITOR_RESOLUTION_TOO_LOW = -2144927152;

const int E_ELEVATED_ACTIVATION_NOT_SUPPORTED = -2144927151;

const int E_UAC_DISABLED = -2144927150;

const int E_FULL_ADMIN_NOT_SUPPORTED = -2144927149;

const int E_APPLICATION_NOT_REGISTERED = -2144927148;

const int E_MULTIPLE_EXTENSIONS_FOR_APPLICATION = -2144927147;

const int E_MULTIPLE_PACKAGES_FOR_FAMILY = -2144927146;

const int E_APPLICATION_MANAGER_NOT_RUNNING = -2144927145;

const int S_STORE_LAUNCHED_FOR_REMEDIATION = 2556504;

const int S_APPLICATION_ACTIVATION_ERROR_HANDLED_BY_DIALOG = 2556505;

const int E_APPLICATION_ACTIVATION_TIMED_OUT = -2144927142;

const int E_APPLICATION_ACTIVATION_EXEC_FAILURE = -2144927141;

const int E_APPLICATION_TEMPORARY_LICENSE_ERROR = -2144927140;

const int E_APPLICATION_TRIAL_LICENSE_EXPIRED = -2144927139;

const int E_SKYDRIVE_ROOT_TARGET_FILE_SYSTEM_NOT_SUPPORTED = -2144927136;

const int E_SKYDRIVE_ROOT_TARGET_OVERLAP = -2144927135;

const int E_SKYDRIVE_ROOT_TARGET_CANNOT_INDEX = -2144927134;

const int E_SKYDRIVE_FILE_NOT_UPLOADED = -2144927133;

const int E_SKYDRIVE_UPDATE_AVAILABILITY_FAIL = -2144927132;

const int E_SKYDRIVE_ROOT_TARGET_VOLUME_ROOT_NOT_SUPPORTED = -2144927131;

const int E_SYNCENGINE_FILE_SIZE_OVER_LIMIT = -2013089791;

const int E_SYNCENGINE_FILE_SIZE_EXCEEDS_REMAINING_QUOTA = -2013089790;

const int E_SYNCENGINE_UNSUPPORTED_FILE_NAME = -2013089789;

const int E_SYNCENGINE_FOLDER_ITEM_COUNT_LIMIT_EXCEEDED = -2013089788;

const int E_SYNCENGINE_FILE_SYNC_PARTNER_ERROR = -2013089787;

const int E_SYNCENGINE_SYNC_PAUSED_BY_SERVICE = -2013089786;

const int E_SYNCENGINE_FILE_IDENTIFIER_UNKNOWN = -2013085694;

const int E_SYNCENGINE_SERVICE_AUTHENTICATION_FAILED = -2013085693;

const int E_SYNCENGINE_UNKNOWN_SERVICE_ERROR = -2013085692;

const int E_SYNCENGINE_SERVICE_RETURNED_UNEXPECTED_SIZE = -2013085691;

const int E_SYNCENGINE_REQUEST_BLOCKED_BY_SERVICE = -2013085690;

const int E_SYNCENGINE_REQUEST_BLOCKED_DUE_TO_CLIENT_ERROR = -2013085689;

const int E_SYNCENGINE_FOLDER_INACCESSIBLE = -2013081599;

const int E_SYNCENGINE_UNSUPPORTED_FOLDER_NAME = -2013081598;

const int E_SYNCENGINE_UNSUPPORTED_MARKET = -2013081597;

const int E_SYNCENGINE_PATH_LENGTH_LIMIT_EXCEEDED = -2013081596;

const int E_SYNCENGINE_REMOTE_PATH_LENGTH_LIMIT_EXCEEDED = -2013081595;

const int E_SYNCENGINE_CLIENT_UPDATE_NEEDED = -2013081594;

const int E_SYNCENGINE_PROXY_AUTHENTICATION_REQUIRED = -2013081593;

const int E_SYNCENGINE_STORAGE_SERVICE_PROVISIONING_FAILED = -2013081592;

const int E_SYNCENGINE_UNSUPPORTED_REPARSE_POINT = -2013081591;

const int E_SYNCENGINE_STORAGE_SERVICE_BLOCKED = -2013081590;

const int E_SYNCENGINE_FOLDER_IN_REDIRECTION = -2013081589;

const int EAS_E_POLICY_NOT_MANAGED_BY_OS = -2141913087;

const int EAS_E_POLICY_COMPLIANT_WITH_ACTIONS = -2141913086;

const int EAS_E_REQUESTED_POLICY_NOT_ENFORCEABLE = -2141913085;

const int EAS_E_CURRENT_USER_HAS_BLANK_PASSWORD = -2141913084;

const int EAS_E_REQUESTED_POLICY_PASSWORD_EXPIRATION_INCOMPATIBLE = -2141913083;

const int EAS_E_USER_CANNOT_CHANGE_PASSWORD = -2141913082;

const int EAS_E_ADMINS_HAVE_BLANK_PASSWORD = -2141913081;

const int EAS_E_ADMINS_CANNOT_CHANGE_PASSWORD = -2141913080;

const int EAS_E_LOCAL_CONTROLLED_USERS_CANNOT_CHANGE_PASSWORD = -2141913079;

const int EAS_E_PASSWORD_POLICY_NOT_ENFORCEABLE_FOR_CONNECTED_ADMINS =
    -2141913078;

const int EAS_E_CONNECTED_ADMINS_NEED_TO_CHANGE_PASSWORD = -2141913077;

const int EAS_E_PASSWORD_POLICY_NOT_ENFORCEABLE_FOR_CURRENT_CONNECTED_USER =
    -2141913076;

const int EAS_E_CURRENT_CONNECTED_USER_NEED_TO_CHANGE_PASSWORD = -2141913075;

const int WEB_E_UNSUPPORTED_FORMAT = -2089484287;

const int WEB_E_INVALID_XML = -2089484286;

const int WEB_E_MISSING_REQUIRED_ELEMENT = -2089484285;

const int WEB_E_MISSING_REQUIRED_ATTRIBUTE = -2089484284;

const int WEB_E_UNEXPECTED_CONTENT = -2089484283;

const int WEB_E_RESOURCE_TOO_LARGE = -2089484282;

const int WEB_E_INVALID_JSON_STRING = -2089484281;

const int WEB_E_INVALID_JSON_NUMBER = -2089484280;

const int WEB_E_JSON_VALUE_NOT_FOUND = -2089484279;

const int HTTP_E_STATUS_UNEXPECTED = -2145845247;

const int HTTP_E_STATUS_UNEXPECTED_REDIRECTION = -2145845245;

const int HTTP_E_STATUS_UNEXPECTED_CLIENT_ERROR = -2145845244;

const int HTTP_E_STATUS_UNEXPECTED_SERVER_ERROR = -2145845243;

const int HTTP_E_STATUS_AMBIGUOUS = -2145844948;

const int HTTP_E_STATUS_MOVED = -2145844947;

const int HTTP_E_STATUS_REDIRECT = -2145844946;

const int HTTP_E_STATUS_REDIRECT_METHOD = -2145844945;

const int HTTP_E_STATUS_NOT_MODIFIED = -2145844944;

const int HTTP_E_STATUS_USE_PROXY = -2145844943;

const int HTTP_E_STATUS_REDIRECT_KEEP_VERB = -2145844941;

const int HTTP_E_STATUS_BAD_REQUEST = -2145844848;

const int HTTP_E_STATUS_DENIED = -2145844847;

const int HTTP_E_STATUS_PAYMENT_REQ = -2145844846;

const int HTTP_E_STATUS_FORBIDDEN = -2145844845;

const int HTTP_E_STATUS_NOT_FOUND = -2145844844;

const int HTTP_E_STATUS_BAD_METHOD = -2145844843;

const int HTTP_E_STATUS_NONE_ACCEPTABLE = -2145844842;

const int HTTP_E_STATUS_PROXY_AUTH_REQ = -2145844841;

const int HTTP_E_STATUS_REQUEST_TIMEOUT = -2145844840;

const int HTTP_E_STATUS_CONFLICT = -2145844839;

const int HTTP_E_STATUS_GONE = -2145844838;

const int HTTP_E_STATUS_LENGTH_REQUIRED = -2145844837;

const int HTTP_E_STATUS_PRECOND_FAILED = -2145844836;

const int HTTP_E_STATUS_REQUEST_TOO_LARGE = -2145844835;

const int HTTP_E_STATUS_URI_TOO_LONG = -2145844834;

const int HTTP_E_STATUS_UNSUPPORTED_MEDIA = -2145844833;

const int HTTP_E_STATUS_RANGE_NOT_SATISFIABLE = -2145844832;

const int HTTP_E_STATUS_EXPECTATION_FAILED = -2145844831;

const int HTTP_E_STATUS_SERVER_ERROR = -2145844748;

const int HTTP_E_STATUS_NOT_SUPPORTED = -2145844747;

const int HTTP_E_STATUS_BAD_GATEWAY = -2145844746;

const int HTTP_E_STATUS_SERVICE_UNAVAIL = -2145844745;

const int HTTP_E_STATUS_GATEWAY_TIMEOUT = -2145844744;

const int HTTP_E_STATUS_VERSION_NOT_SUP = -2145844743;

const int E_INVALID_PROTOCOL_OPERATION = -2089418751;

const int E_INVALID_PROTOCOL_FORMAT = -2089418750;

const int E_PROTOCOL_EXTENSIONS_NOT_SUPPORTED = -2089418749;

const int E_SUBPROTOCOL_NOT_SUPPORTED = -2089418748;

const int E_PROTOCOL_VERSION_NOT_SUPPORTED = -2089418747;

const int INPUT_E_OUT_OF_ORDER = -2143289344;

const int INPUT_E_REENTRANCY = -2143289343;

const int INPUT_E_MULTIMODAL = -2143289342;

const int INPUT_E_PACKET = -2143289341;

const int INPUT_E_FRAME = -2143289340;

const int INPUT_E_HISTORY = -2143289339;

const int INPUT_E_DEVICE_INFO = -2143289338;

const int INPUT_E_TRANSFORM = -2143289337;

const int INPUT_E_DEVICE_PROPERTY = -2143289336;

const int INET_E_INVALID_URL = -2146697214;

const int INET_E_NO_SESSION = -2146697213;

const int INET_E_CANNOT_CONNECT = -2146697212;

const int INET_E_RESOURCE_NOT_FOUND = -2146697211;

const int INET_E_OBJECT_NOT_FOUND = -2146697210;

const int INET_E_DATA_NOT_AVAILABLE = -2146697209;

const int INET_E_DOWNLOAD_FAILURE = -2146697208;

const int INET_E_AUTHENTICATION_REQUIRED = -2146697207;

const int INET_E_NO_VALID_MEDIA = -2146697206;

const int INET_E_CONNECTION_TIMEOUT = -2146697205;

const int INET_E_INVALID_REQUEST = -2146697204;

const int INET_E_UNKNOWN_PROTOCOL = -2146697203;

const int INET_E_SECURITY_PROBLEM = -2146697202;

const int INET_E_CANNOT_LOAD_DATA = -2146697201;

const int INET_E_CANNOT_INSTANTIATE_OBJECT = -2146697200;

const int INET_E_INVALID_CERTIFICATE = -2146697191;

const int INET_E_REDIRECT_FAILED = -2146697196;

const int INET_E_REDIRECT_TO_DIR = -2146697195;

const int ERROR_DBG_CREATE_PROCESS_FAILURE_LOCKDOWN = -2135949311;

const int ERROR_DBG_ATTACH_PROCESS_FAILURE_LOCKDOWN = -2135949310;

const int ERROR_DBG_CONNECT_SERVER_FAILURE_LOCKDOWN = -2135949309;

const int ERROR_DBG_START_SERVER_FAILURE_LOCKDOWN = -2135949308;

const int ERROR_IO_PREEMPTED = -1996423167;

const int JSCRIPT_E_CANTEXECUTE = -1996357631;

const int WEP_E_NOT_PROVISIONED_ON_ALL_VOLUMES = -2013200383;

const int WEP_E_FIXED_DATA_NOT_SUPPORTED = -2013200382;

const int WEP_E_HARDWARE_NOT_COMPLIANT = -2013200381;

const int WEP_E_LOCK_NOT_CONFIGURED = -2013200380;

const int WEP_E_PROTECTION_SUSPENDED = -2013200379;

const int WEP_E_NO_LICENSE = -2013200378;

const int WEP_E_OS_NOT_PROTECTED = -2013200377;

const int WEP_E_UNEXPECTED_FAIL = -2013200376;

const int WEP_E_BUFFER_TOO_LARGE = -2013200375;

const int ERROR_SVHDX_ERROR_STORED = -1067712512;

const int ERROR_SVHDX_ERROR_NOT_AVAILABLE = -1067647232;

const int ERROR_SVHDX_UNIT_ATTENTION_AVAILABLE = -1067647231;

const int ERROR_SVHDX_UNIT_ATTENTION_CAPACITY_DATA_CHANGED = -1067647230;

const int ERROR_SVHDX_UNIT_ATTENTION_RESERVATIONS_PREEMPTED = -1067647229;

const int ERROR_SVHDX_UNIT_ATTENTION_RESERVATIONS_RELEASED = -1067647228;

const int ERROR_SVHDX_UNIT_ATTENTION_REGISTRATIONS_PREEMPTED = -1067647227;

const int ERROR_SVHDX_UNIT_ATTENTION_OPERATING_DEFINITION_CHANGED = -1067647226;

const int ERROR_SVHDX_RESERVATION_CONFLICT = -1067647225;

const int ERROR_SVHDX_WRONG_FILE_TYPE = -1067647224;

const int ERROR_SVHDX_VERSION_MISMATCH = -1067647223;

const int ERROR_VHD_SHARED = -1067647222;

const int ERROR_SVHDX_NO_INITIATOR = -1067647221;

const int ERROR_VHDSET_BACKING_STORAGE_NOT_FOUND = -1067647220;

const int ERROR_SMB_NO_PREAUTH_INTEGRITY_HASH_OVERLAP = -1067646976;

const int ERROR_SMB_BAD_CLUSTER_DIALECT = -1067646975;

const int WININET_E_OUT_OF_HANDLES = -2147012895;

const int WININET_E_TIMEOUT = -2147012894;

const int WININET_E_EXTENDED_ERROR = -2147012893;

const int WININET_E_INTERNAL_ERROR = -2147012892;

const int WININET_E_INVALID_URL = -2147012891;

const int WININET_E_UNRECOGNIZED_SCHEME = -2147012890;

const int WININET_E_NAME_NOT_RESOLVED = -2147012889;

const int WININET_E_PROTOCOL_NOT_FOUND = -2147012888;

const int WININET_E_INVALID_OPTION = -2147012887;

const int WININET_E_BAD_OPTION_LENGTH = -2147012886;

const int WININET_E_OPTION_NOT_SETTABLE = -2147012885;

const int WININET_E_SHUTDOWN = -2147012884;

const int WININET_E_INCORRECT_USER_NAME = -2147012883;

const int WININET_E_INCORRECT_PASSWORD = -2147012882;

const int WININET_E_LOGIN_FAILURE = -2147012881;

const int WININET_E_INVALID_OPERATION = -2147012880;

const int WININET_E_OPERATION_CANCELLED = -2147012879;

const int WININET_E_INCORRECT_HANDLE_TYPE = -2147012878;

const int WININET_E_INCORRECT_HANDLE_STATE = -2147012877;

const int WININET_E_NOT_PROXY_REQUEST = -2147012876;

const int WININET_E_REGISTRY_VALUE_NOT_FOUND = -2147012875;

const int WININET_E_BAD_REGISTRY_PARAMETER = -2147012874;

const int WININET_E_NO_DIRECT_ACCESS = -2147012873;

const int WININET_E_NO_CONTEXT = -2147012872;

const int WININET_E_NO_CALLBACK = -2147012871;

const int WININET_E_REQUEST_PENDING = -2147012870;

const int WININET_E_INCORRECT_FORMAT = -2147012869;

const int WININET_E_ITEM_NOT_FOUND = -2147012868;

const int WININET_E_CANNOT_CONNECT = -2147012867;

const int WININET_E_CONNECTION_ABORTED = -2147012866;

const int WININET_E_CONNECTION_RESET = -2147012865;

const int WININET_E_FORCE_RETRY = -2147012864;

const int WININET_E_INVALID_PROXY_REQUEST = -2147012863;

const int WININET_E_NEED_UI = -2147012862;

const int WININET_E_HANDLE_EXISTS = -2147012860;

const int WININET_E_SEC_CERT_DATE_INVALID = -2147012859;

const int WININET_E_SEC_CERT_CN_INVALID = -2147012858;

const int WININET_E_HTTP_TO_HTTPS_ON_REDIR = -2147012857;

const int WININET_E_HTTPS_TO_HTTP_ON_REDIR = -2147012856;

const int WININET_E_MIXED_SECURITY = -2147012855;

const int WININET_E_CHG_POST_IS_NON_SECURE = -2147012854;

const int WININET_E_POST_IS_NON_SECURE = -2147012853;

const int WININET_E_CLIENT_AUTH_CERT_NEEDED = -2147012852;

const int WININET_E_INVALID_CA = -2147012851;

const int WININET_E_CLIENT_AUTH_NOT_SETUP = -2147012850;

const int WININET_E_ASYNC_THREAD_FAILED = -2147012849;

const int WININET_E_REDIRECT_SCHEME_CHANGE = -2147012848;

const int WININET_E_DIALOG_PENDING = -2147012847;

const int WININET_E_RETRY_DIALOG = -2147012846;

const int WININET_E_NO_NEW_CONTAINERS = -2147012845;

const int WININET_E_HTTPS_HTTP_SUBMIT_REDIR = -2147012844;

const int WININET_E_SEC_CERT_ERRORS = -2147012841;

const int WININET_E_SEC_CERT_REV_FAILED = -2147012839;

const int WININET_E_HEADER_NOT_FOUND = -2147012746;

const int WININET_E_DOWNLEVEL_SERVER = -2147012745;

const int WININET_E_INVALID_SERVER_RESPONSE = -2147012744;

const int WININET_E_INVALID_HEADER = -2147012743;

const int WININET_E_INVALID_QUERY_REQUEST = -2147012742;

const int WININET_E_HEADER_ALREADY_EXISTS = -2147012741;

const int WININET_E_REDIRECT_FAILED = -2147012740;

const int WININET_E_SECURITY_CHANNEL_ERROR = -2147012739;

const int WININET_E_UNABLE_TO_CACHE_FILE = -2147012738;

const int WININET_E_TCPIP_NOT_INSTALLED = -2147012737;

const int WININET_E_DISCONNECTED = -2147012733;

const int WININET_E_SERVER_UNREACHABLE = -2147012732;

const int WININET_E_PROXY_SERVER_UNREACHABLE = -2147012731;

const int WININET_E_BAD_AUTO_PROXY_SCRIPT = -2147012730;

const int WININET_E_UNABLE_TO_DOWNLOAD_SCRIPT = -2147012729;

const int WININET_E_SEC_INVALID_CERT = -2147012727;

const int WININET_E_SEC_CERT_REVOKED = -2147012726;

const int WININET_E_FAILED_DUETOSECURITYCHECK = -2147012725;

const int WININET_E_NOT_INITIALIZED = -2147012724;

const int WININET_E_LOGIN_FAILURE_DISPLAY_ENTITY_BODY = -2147012722;

const int WININET_E_DECODING_FAILED = -2147012721;

const int WININET_E_NOT_REDIRECTED = -2147012736;

const int WININET_E_COOKIE_NEEDS_CONFIRMATION = -2147012735;

const int WININET_E_COOKIE_DECLINED = -2147012734;

const int WININET_E_REDIRECT_NEEDS_CONFIRMATION = -2147012728;

const int SQLITE_E_ERROR = -2018574335;

const int SQLITE_E_INTERNAL = -2018574334;

const int SQLITE_E_PERM = -2018574333;

const int SQLITE_E_ABORT = -2018574332;

const int SQLITE_E_BUSY = -2018574331;

const int SQLITE_E_LOCKED = -2018574330;

const int SQLITE_E_NOMEM = -2018574329;

const int SQLITE_E_READONLY = -2018574328;

const int SQLITE_E_INTERRUPT = -2018574327;

const int SQLITE_E_IOERR = -2018574326;

const int SQLITE_E_CORRUPT = -2018574325;

const int SQLITE_E_NOTFOUND = -2018574324;

const int SQLITE_E_FULL = -2018574323;

const int SQLITE_E_CANTOPEN = -2018574322;

const int SQLITE_E_PROTOCOL = -2018574321;

const int SQLITE_E_EMPTY = -2018574320;

const int SQLITE_E_SCHEMA = -2018574319;

const int SQLITE_E_TOOBIG = -2018574318;

const int SQLITE_E_CONSTRAINT = -2018574317;

const int SQLITE_E_MISMATCH = -2018574316;

const int SQLITE_E_MISUSE = -2018574315;

const int SQLITE_E_NOLFS = -2018574314;

const int SQLITE_E_AUTH = -2018574313;

const int SQLITE_E_FORMAT = -2018574312;

const int SQLITE_E_RANGE = -2018574311;

const int SQLITE_E_NOTADB = -2018574310;

const int SQLITE_E_NOTICE = -2018574309;

const int SQLITE_E_WARNING = -2018574308;

const int SQLITE_E_ROW = -2018574236;

const int SQLITE_E_DONE = -2018574235;

const int SQLITE_E_IOERR_READ = -2018574070;

const int SQLITE_E_IOERR_SHORT_READ = -2018573814;

const int SQLITE_E_IOERR_WRITE = -2018573558;

const int SQLITE_E_IOERR_FSYNC = -2018573302;

const int SQLITE_E_IOERR_DIR_FSYNC = -2018573046;

const int SQLITE_E_IOERR_TRUNCATE = -2018572790;

const int SQLITE_E_IOERR_FSTAT = -2018572534;

const int SQLITE_E_IOERR_UNLOCK = -2018572278;

const int SQLITE_E_IOERR_RDLOCK = -2018572022;

const int SQLITE_E_IOERR_DELETE = -2018571766;

const int SQLITE_E_IOERR_BLOCKED = -2018571510;

const int SQLITE_E_IOERR_NOMEM = -2018571254;

const int SQLITE_E_IOERR_ACCESS = -2018570998;

const int SQLITE_E_IOERR_CHECKRESERVEDLOCK = -2018570742;

const int SQLITE_E_IOERR_LOCK = -2018570486;

const int SQLITE_E_IOERR_CLOSE = -2018570230;

const int SQLITE_E_IOERR_DIR_CLOSE = -2018569974;

const int SQLITE_E_IOERR_SHMOPEN = -2018569718;

const int SQLITE_E_IOERR_SHMSIZE = -2018569462;

const int SQLITE_E_IOERR_SHMLOCK = -2018569206;

const int SQLITE_E_IOERR_SHMMAP = -2018568950;

const int SQLITE_E_IOERR_SEEK = -2018568694;

const int SQLITE_E_IOERR_DELETE_NOENT = -2018568438;

const int SQLITE_E_IOERR_MMAP = -2018568182;

const int SQLITE_E_IOERR_GETTEMPPATH = -2018567926;

const int SQLITE_E_IOERR_CONVPATH = -2018567670;

const int SQLITE_E_IOERR_VNODE = -2018567678;

const int SQLITE_E_IOERR_AUTH = -2018567677;

const int SQLITE_E_LOCKED_SHAREDCACHE = -2018574074;

const int SQLITE_E_BUSY_RECOVERY = -2018574075;

const int SQLITE_E_BUSY_SNAPSHOT = -2018573819;

const int SQLITE_E_CANTOPEN_NOTEMPDIR = -2018574066;

const int SQLITE_E_CANTOPEN_ISDIR = -2018573810;

const int SQLITE_E_CANTOPEN_FULLPATH = -2018573554;

const int SQLITE_E_CANTOPEN_CONVPATH = -2018573298;

const int SQLITE_E_CORRUPT_VTAB = -2018574069;

const int SQLITE_E_READONLY_RECOVERY = -2018574072;

const int SQLITE_E_READONLY_CANTLOCK = -2018573816;

const int SQLITE_E_READONLY_ROLLBACK = -2018573560;

const int SQLITE_E_READONLY_DBMOVED = -2018573304;

const int SQLITE_E_ABORT_ROLLBACK = -2018573820;

const int SQLITE_E_CONSTRAINT_CHECK = -2018574061;

const int SQLITE_E_CONSTRAINT_COMMITHOOK = -2018573805;

const int SQLITE_E_CONSTRAINT_FOREIGNKEY = -2018573549;

const int SQLITE_E_CONSTRAINT_FUNCTION = -2018573293;

const int SQLITE_E_CONSTRAINT_NOTNULL = -2018573037;

const int SQLITE_E_CONSTRAINT_PRIMARYKEY = -2018572781;

const int SQLITE_E_CONSTRAINT_TRIGGER = -2018572525;

const int SQLITE_E_CONSTRAINT_UNIQUE = -2018572269;

const int SQLITE_E_CONSTRAINT_VTAB = -2018572013;

const int SQLITE_E_CONSTRAINT_ROWID = -2018571757;

const int SQLITE_E_NOTICE_RECOVER_WAL = -2018574053;

const int SQLITE_E_NOTICE_RECOVER_ROLLBACK = -2018573797;

const int SQLITE_E_WARNING_AUTOINDEX = -2018574052;

const int UTC_E_TOGGLE_TRACE_STARTED = -2017128447;

const int UTC_E_ALTERNATIVE_TRACE_CANNOT_PREEMPT = -2017128446;

const int UTC_E_AOT_NOT_RUNNING = -2017128445;

const int UTC_E_SCRIPT_TYPE_INVALID = -2017128444;

const int UTC_E_SCENARIODEF_NOT_FOUND = -2017128443;

const int UTC_E_TRACEPROFILE_NOT_FOUND = -2017128442;

const int UTC_E_FORWARDER_ALREADY_ENABLED = -2017128441;

const int UTC_E_FORWARDER_ALREADY_DISABLED = -2017128440;

const int UTC_E_EVENTLOG_ENTRY_MALFORMED = -2017128439;

const int UTC_E_DIAGRULES_SCHEMAVERSION_MISMATCH = -2017128438;

const int UTC_E_SCRIPT_TERMINATED = -2017128437;

const int UTC_E_INVALID_CUSTOM_FILTER = -2017128436;

const int UTC_E_TRACE_NOT_RUNNING = -2017128435;

const int UTC_E_REESCALATED_TOO_QUICKLY = -2017128434;

const int UTC_E_ESCALATION_ALREADY_RUNNING = -2017128433;

const int UTC_E_PERFTRACK_ALREADY_TRACING = -2017128432;

const int UTC_E_REACHED_MAX_ESCALATIONS = -2017128431;

const int UTC_E_FORWARDER_PRODUCER_MISMATCH = -2017128430;

const int UTC_E_INTENTIONAL_SCRIPT_FAILURE = -2017128429;

const int UTC_E_SQM_INIT_FAILED = -2017128428;

const int UTC_E_NO_WER_LOGGER_SUPPORTED = -2017128427;

const int UTC_E_TRACERS_DONT_EXIST = -2017128426;

const int UTC_E_WINRT_INIT_FAILED = -2017128425;

const int UTC_E_SCENARIODEF_SCHEMAVERSION_MISMATCH = -2017128424;

const int UTC_E_INVALID_FILTER = -2017128423;

const int UTC_E_EXE_TERMINATED = -2017128422;

const int UTC_E_ESCALATION_NOT_AUTHORIZED = -2017128421;

const int UTC_E_SETUP_NOT_AUTHORIZED = -2017128420;

const int UTC_E_CHILD_PROCESS_FAILED = -2017128419;

const int UTC_E_COMMAND_LINE_NOT_AUTHORIZED = -2017128418;

const int UTC_E_CANNOT_LOAD_SCENARIO_EDITOR_XML = -2017128417;

const int UTC_E_ESCALATION_TIMED_OUT = -2017128416;

const int UTC_E_SETUP_TIMED_OUT = -2017128415;

const int UTC_E_TRIGGER_MISMATCH = -2017128414;

const int UTC_E_TRIGGER_NOT_FOUND = -2017128413;

const int UTC_E_SIF_NOT_SUPPORTED = -2017128412;

const int UTC_E_DELAY_TERMINATED = -2017128411;

const int UTC_E_DEVICE_TICKET_ERROR = -2017128410;

const int UTC_E_TRACE_BUFFER_LIMIT_EXCEEDED = -2017128409;

const int UTC_E_API_RESULT_UNAVAILABLE = -2017128408;

const int UTC_E_RPC_TIMEOUT = -2017128407;

const int UTC_E_RPC_WAIT_FAILED = -2017128406;

const int UTC_E_API_BUSY = -2017128405;

const int UTC_E_TRACE_MIN_DURATION_REQUIREMENT_NOT_MET = -2017128404;

const int UTC_E_EXCLUSIVITY_NOT_AVAILABLE = -2017128403;

const int UTC_E_GETFILE_FILE_PATH_NOT_APPROVED = -2017128402;

const int UTC_E_ESCALATION_DIRECTORY_ALREADY_EXISTS = -2017128401;

const int UTC_E_TIME_TRIGGER_ON_START_INVALID = -2017128400;

const int UTC_E_TIME_TRIGGER_ONLY_VALID_ON_SINGLE_TRANSITION = -2017128399;

const int UTC_E_TIME_TRIGGER_INVALID_TIME_RANGE = -2017128398;

const int UTC_E_MULTIPLE_TIME_TRIGGER_ON_SINGLE_STATE = -2017128397;

const int UTC_E_BINARY_MISSING = -2017128396;

const int UTC_E_FAILED_TO_RESOLVE_CONTAINER_ID = -2017128394;

const int UTC_E_UNABLE_TO_RESOLVE_SESSION = -2017128393;

const int UTC_E_THROTTLED = -2017128392;

const int UTC_E_UNAPPROVED_SCRIPT = -2017128391;

const int UTC_E_SCRIPT_MISSING = -2017128390;

const int UTC_E_SCENARIO_THROTTLED = -2017128389;

const int UTC_E_API_NOT_SUPPORTED = -2017128388;

const int UTC_E_GETFILE_EXTERNAL_PATH_NOT_APPROVED = -2017128387;

const int UTC_E_TRY_GET_SCENARIO_TIMEOUT_EXCEEDED = -2017128386;

const int UTC_E_CERT_REV_FAILED = -2017128385;

const int UTC_E_FAILED_TO_START_NDISCAP = -2017128384;

const int UTC_E_KERNELDUMP_LIMIT_REACHED = -2017128383;

const int UTC_E_MISSING_AGGREGATE_EVENT_TAG = -2017128382;

const int UTC_E_INVALID_AGGREGATION_STRUCT = -2017128381;

const int UTC_E_ACTION_NOT_SUPPORTED_IN_DESTINATION = -2017128380;

const int UTC_E_FILTER_MISSING_ATTRIBUTE = -2017128379;

const int UTC_E_FILTER_INVALID_TYPE = -2017128378;

const int UTC_E_FILTER_VARIABLE_NOT_FOUND = -2017128377;

const int UTC_E_FILTER_FUNCTION_RESTRICTED = -2017128376;

const int UTC_E_FILTER_VERSION_MISMATCH = -2017128375;

const int UTC_E_FILTER_INVALID_FUNCTION = -2017128368;

const int UTC_E_FILTER_INVALID_FUNCTION_PARAMS = -2017128367;

const int UTC_E_FILTER_INVALID_COMMAND = -2017128366;

const int UTC_E_FILTER_ILLEGAL_EVAL = -2017128365;

const int UTC_E_TTTRACER_RETURNED_ERROR = -2017128364;

const int UTC_E_AGENT_DIAGNOSTICS_TOO_LARGE = -2017128363;

const int UTC_E_FAILED_TO_RECEIVE_AGENT_DIAGNOSTICS = -2017128362;

const int UTC_E_SCENARIO_HAS_NO_ACTIONS = -2017128361;

const int UTC_E_TTTRACER_STORAGE_FULL = -2017128360;

const int UTC_E_INSUFFICIENT_SPACE_TO_START_TRACE = -2017128359;

const int UTC_E_ESCALATION_CANCELLED_AT_SHUTDOWN = -2017128358;

const int UTC_E_GETFILEINFOACTION_FILE_NOT_APPROVED = -2017128357;

const int UTC_E_SETREGKEYACTION_TYPE_NOT_APPROVED = -2017128356;

const int WINML_ERR_INVALID_DEVICE = -2003828735;

const int WINML_ERR_INVALID_BINDING = -2003828734;

const int WINML_ERR_VALUE_NOTFOUND = -2003828733;

const int WINML_ERR_SIZE_MISMATCH = -2003828732;

const int ERROR_QUIC_HANDSHAKE_FAILURE = -2143223808;

const int ERROR_QUIC_VER_NEG_FAILURE = -2143223807;

const int TIME_ZONE_ID_INVALID = 4294967295;

const int TC_NORMAL = 0;

const int TC_HARDERR = 1;

const int TC_GP_TRAP = 2;

const int TC_SIGNAL = 3;

const int AC_LINE_OFFLINE = 0;

const int AC_LINE_ONLINE = 1;

const int AC_LINE_BACKUP_POWER = 2;

const int AC_LINE_UNKNOWN = 255;

const int BATTERY_FLAG_HIGH = 1;

const int BATTERY_FLAG_LOW = 2;

const int BATTERY_FLAG_CRITICAL = 4;

const int BATTERY_FLAG_CHARGING = 8;

const int BATTERY_FLAG_NO_BATTERY = 128;

const int BATTERY_FLAG_UNKNOWN = 255;

const int BATTERY_PERCENTAGE_UNKNOWN = 255;

const int SYSTEM_STATUS_FLAG_POWER_SAVING_ON = 1;

const int BATTERY_LIFE_UNKNOWN = 4294967295;

const int ACTCTX_FLAG_PROCESSOR_ARCHITECTURE_VALID = 1;

const int ACTCTX_FLAG_LANGID_VALID = 2;

const int ACTCTX_FLAG_ASSEMBLY_DIRECTORY_VALID = 4;

const int ACTCTX_FLAG_RESOURCE_NAME_VALID = 8;

const int ACTCTX_FLAG_SET_PROCESS_DEFAULT = 16;

const int ACTCTX_FLAG_APPLICATION_NAME_VALID = 32;

const int ACTCTX_FLAG_SOURCE_IS_ASSEMBLYREF = 64;

const int ACTCTX_FLAG_HMODULE_VALID = 128;

const int DEACTIVATE_ACTCTX_FLAG_FORCE_EARLY_DEACTIVATION = 1;

const int FIND_ACTCTX_SECTION_KEY_RETURN_HACTCTX = 1;

const int FIND_ACTCTX_SECTION_KEY_RETURN_FLAGS = 2;

const int FIND_ACTCTX_SECTION_KEY_RETURN_ASSEMBLY_METADATA = 4;

const int ACTIVATION_CONTEXT_BASIC_INFORMATION_DEFINED = 1;

const int QUERY_ACTCTX_FLAG_USE_ACTIVE_ACTCTX = 4;

const int QUERY_ACTCTX_FLAG_ACTCTX_IS_HMODULE = 8;

const int QUERY_ACTCTX_FLAG_ACTCTX_IS_ADDRESS = 16;

const int QUERY_ACTCTX_FLAG_NO_ADDREF = 2147483648;

const int RESTART_MAX_CMD_LINE = 1024;

const int RESTART_NO_CRASH = 1;

const int RESTART_NO_HANG = 2;

const int RESTART_NO_PATCH = 4;

const int RESTART_NO_REBOOT = 8;

const int RECOVERY_DEFAULT_PING_INTERVAL = 5000;

const int RECOVERY_MAX_PING_INTERVAL = 300000;

const int FILE_RENAME_FLAG_REPLACE_IF_EXISTS = 1;

const int FILE_RENAME_FLAG_POSIX_SEMANTICS = 2;

const int FILE_RENAME_FLAG_SUPPRESS_PIN_STATE_INHERITANCE = 4;

const int FILE_DISPOSITION_FLAG_DO_NOT_DELETE = 0;

const int FILE_DISPOSITION_FLAG_DELETE = 1;

const int FILE_DISPOSITION_FLAG_POSIX_SEMANTICS = 2;

const int FILE_DISPOSITION_FLAG_FORCE_IMAGE_SECTION_CHECK = 4;

const int FILE_DISPOSITION_FLAG_ON_CLOSE = 8;

const int FILE_DISPOSITION_FLAG_IGNORE_READONLY_ATTRIBUTE = 16;

const int STORAGE_INFO_FLAGS_ALIGNED_DEVICE = 1;

const int STORAGE_INFO_FLAGS_PARTITION_ALIGNED_ON_DEVICE = 2;

const int STORAGE_INFO_OFFSET_UNKNOWN = 4294967295;

const int REMOTE_PROTOCOL_INFO_FLAG_LOOPBACK = 1;

const int REMOTE_PROTOCOL_INFO_FLAG_OFFLINE = 2;

const int REMOTE_PROTOCOL_INFO_FLAG_PERSISTENT_HANDLE = 4;

const int RPI_FLAG_SMB2_SHARECAP_TIMEWARP = 2;

const int RPI_FLAG_SMB2_SHARECAP_DFS = 8;

const int RPI_FLAG_SMB2_SHARECAP_CONTINUOUS_AVAILABILITY = 16;

const int RPI_FLAG_SMB2_SHARECAP_SCALEOUT = 32;

const int RPI_FLAG_SMB2_SHARECAP_CLUSTER = 64;

const int RPI_SMB2_FLAG_SERVERCAP_DFS = 1;

const int RPI_SMB2_FLAG_SERVERCAP_LEASING = 2;

const int RPI_SMB2_FLAG_SERVERCAP_LARGEMTU = 4;

const int RPI_SMB2_FLAG_SERVERCAP_MULTICHANNEL = 8;

const int RPI_SMB2_FLAG_SERVERCAP_PERSISTENT_HANDLES = 16;

const int RPI_SMB2_FLAG_SERVERCAP_DIRECTORY_LEASING = 32;

const int SYMBOLIC_LINK_FLAG_DIRECTORY = 1;

const int SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE = 2;

const int MICROSOFT_WINBASE_H_DEFINE_INTERLOCKED_CPLUSPLUS_OVERLOADS = 0;

const int R2_BLACK = 1;

const int R2_NOTMERGEPEN = 2;

const int R2_MASKNOTPEN = 3;

const int R2_NOTCOPYPEN = 4;

const int R2_MASKPENNOT = 5;

const int R2_NOT = 6;

const int R2_XORPEN = 7;

const int R2_NOTMASKPEN = 8;

const int R2_MASKPEN = 9;

const int R2_NOTXORPEN = 10;

const int R2_NOP = 11;

const int R2_MERGENOTPEN = 12;

const int R2_COPYPEN = 13;

const int R2_MERGEPENNOT = 14;

const int R2_MERGEPEN = 15;

const int R2_WHITE = 16;

const int R2_LAST = 16;

const int SRCCOPY = 13369376;

const int SRCPAINT = 15597702;

const int SRCAND = 8913094;

const int SRCINVERT = 6684742;

const int SRCERASE = 4457256;

const int NOTSRCCOPY = 3342344;

const int NOTSRCERASE = 1114278;

const int MERGECOPY = 12583114;

const int MERGEPAINT = 12255782;

const int PATCOPY = 15728673;

const int PATPAINT = 16452105;

const int PATINVERT = 5898313;

const int DSTINVERT = 5570569;

const int BLACKNESS = 66;

const int WHITENESS = 16711778;

const int NOMIRRORBITMAP = 2147483648;

const int CAPTUREBLT = 1073741824;

const int GDI_ERROR = 4294967295;

const int ERROR = 0;

const int NULLREGION = 1;

const int SIMPLEREGION = 2;

const int COMPLEXREGION = 3;

const int RGN_ERROR = 0;

const int RGN_AND = 1;

const int RGN_OR = 2;

const int RGN_XOR = 3;

const int RGN_DIFF = 4;

const int RGN_COPY = 5;

const int RGN_MIN = 1;

const int RGN_MAX = 5;

const int BLACKONWHITE = 1;

const int WHITEONBLACK = 2;

const int COLORONCOLOR = 3;

const int HALFTONE = 4;

const int MAXSTRETCHBLTMODE = 4;

const int STRETCH_ANDSCANS = 1;

const int STRETCH_ORSCANS = 2;

const int STRETCH_DELETESCANS = 3;

const int STRETCH_HALFTONE = 4;

const int ALTERNATE = 1;

const int WINDING = 2;

const int POLYFILL_LAST = 2;

const int LAYOUT_RTL = 1;

const int LAYOUT_BTT = 2;

const int LAYOUT_VBH = 4;

const int LAYOUT_ORIENTATIONMASK = 7;

const int LAYOUT_BITMAPORIENTATIONPRESERVED = 8;

const int TA_NOUPDATECP = 0;

const int TA_UPDATECP = 1;

const int TA_LEFT = 0;

const int TA_RIGHT = 2;

const int TA_CENTER = 6;

const int TA_TOP = 0;

const int TA_BOTTOM = 8;

const int TA_BASELINE = 24;

const int TA_RTLREADING = 256;

const int TA_MASK = 287;

const int VTA_BASELINE = 24;

const int VTA_LEFT = 8;

const int VTA_RIGHT = 0;

const int VTA_CENTER = 6;

const int VTA_BOTTOM = 2;

const int VTA_TOP = 0;

const int ETO_OPAQUE = 2;

const int ETO_CLIPPED = 4;

const int ETO_GLYPH_INDEX = 16;

const int ETO_RTLREADING = 128;

const int ETO_NUMERICSLOCAL = 1024;

const int ETO_NUMERICSLATIN = 2048;

const int ETO_IGNORELANGUAGE = 4096;

const int ETO_PDY = 8192;

const int ETO_REVERSE_INDEX_MAP = 65536;

const int ASPECT_FILTERING = 1;

const int DCB_RESET = 1;

const int DCB_ACCUMULATE = 2;

const int DCB_DIRTY = 2;

const int DCB_SET = 3;

const int DCB_ENABLE = 4;

const int DCB_DISABLE = 8;

const int META_SETBKCOLOR = 513;

const int META_SETBKMODE = 258;

const int META_SETMAPMODE = 259;

const int META_SETROP2 = 260;

const int META_SETRELABS = 261;

const int META_SETPOLYFILLMODE = 262;

const int META_SETSTRETCHBLTMODE = 263;

const int META_SETTEXTCHAREXTRA = 264;

const int META_SETTEXTCOLOR = 521;

const int META_SETTEXTJUSTIFICATION = 522;

const int META_SETWINDOWORG = 523;

const int META_SETWINDOWEXT = 524;

const int META_SETVIEWPORTORG = 525;

const int META_SETVIEWPORTEXT = 526;

const int META_OFFSETWINDOWORG = 527;

const int META_SCALEWINDOWEXT = 1040;

const int META_OFFSETVIEWPORTORG = 529;

const int META_SCALEVIEWPORTEXT = 1042;

const int META_LINETO = 531;

const int META_MOVETO = 532;

const int META_EXCLUDECLIPRECT = 1045;

const int META_INTERSECTCLIPRECT = 1046;

const int META_ARC = 2071;

const int META_ELLIPSE = 1048;

const int META_FLOODFILL = 1049;

const int META_PIE = 2074;

const int META_RECTANGLE = 1051;

const int META_ROUNDRECT = 1564;

const int META_PATBLT = 1565;

const int META_SAVEDC = 30;

const int META_SETPIXEL = 1055;

const int META_OFFSETCLIPRGN = 544;

const int META_TEXTOUT = 1313;

const int META_BITBLT = 2338;

const int META_STRETCHBLT = 2851;

const int META_POLYGON = 804;

const int META_POLYLINE = 805;

const int META_ESCAPE = 1574;

const int META_RESTOREDC = 295;

const int META_FILLREGION = 552;

const int META_FRAMEREGION = 1065;

const int META_INVERTREGION = 298;

const int META_PAINTREGION = 299;

const int META_SELECTCLIPREGION = 300;

const int META_SELECTOBJECT = 301;

const int META_SETTEXTALIGN = 302;

const int META_CHORD = 2096;

const int META_SETMAPPERFLAGS = 561;

const int META_EXTTEXTOUT = 2610;

const int META_SETDIBTODEV = 3379;

const int META_SELECTPALETTE = 564;

const int META_REALIZEPALETTE = 53;

const int META_ANIMATEPALETTE = 1078;

const int META_SETPALENTRIES = 55;

const int META_POLYPOLYGON = 1336;

const int META_RESIZEPALETTE = 313;

const int META_DIBBITBLT = 2368;

const int META_DIBSTRETCHBLT = 2881;

const int META_DIBCREATEPATTERNBRUSH = 322;

const int META_STRETCHDIB = 3907;

const int META_EXTFLOODFILL = 1352;

const int META_SETLAYOUT = 329;

const int META_DELETEOBJECT = 496;

const int META_CREATEPALETTE = 247;

const int META_CREATEPATTERNBRUSH = 505;

const int META_CREATEPENINDIRECT = 762;

const int META_CREATEFONTINDIRECT = 763;

const int META_CREATEBRUSHINDIRECT = 764;

const int META_CREATEREGION = 1791;

const int NEWFRAME = 1;

const int ABORTDOC = 2;

const int NEXTBAND = 3;

const int SETCOLORTABLE = 4;

const int GETCOLORTABLE = 5;

const int FLUSHOUTPUT = 6;

const int DRAFTMODE = 7;

const int QUERYESCSUPPORT = 8;

const int SETABORTPROC = 9;

const int STARTDOC = 10;

const int ENDDOC = 11;

const int GETPHYSPAGESIZE = 12;

const int GETPRINTINGOFFSET = 13;

const int GETSCALINGFACTOR = 14;

const int MFCOMMENT = 15;

const int GETPENWIDTH = 16;

const int SETCOPYCOUNT = 17;

const int SELECTPAPERSOURCE = 18;

const int DEVICEDATA = 19;

const int PASSTHROUGH = 19;

const int GETTECHNOLGY = 20;

const int GETTECHNOLOGY = 20;

const int SETLINECAP = 21;

const int SETLINEJOIN = 22;

const int SETMITERLIMIT = 23;

const int BANDINFO = 24;

const int DRAWPATTERNRECT = 25;

const int GETVECTORPENSIZE = 26;

const int GETVECTORBRUSHSIZE = 27;

const int ENABLEDUPLEX = 28;

const int GETSETPAPERBINS = 29;

const int GETSETPRINTORIENT = 30;

const int ENUMPAPERBINS = 31;

const int SETDIBSCALING = 32;

const int EPSPRINTING = 33;

const int ENUMPAPERMETRICS = 34;

const int GETSETPAPERMETRICS = 35;

const int POSTSCRIPT_DATA = 37;

const int POSTSCRIPT_IGNORE = 38;

const int MOUSETRAILS = 39;

const int GETDEVICEUNITS = 42;

const int GETEXTENDEDTEXTMETRICS = 256;

const int GETEXTENTTABLE = 257;

const int GETPAIRKERNTABLE = 258;

const int GETTRACKKERNTABLE = 259;

const int EXTTEXTOUT = 512;

const int GETFACENAME = 513;

const int DOWNLOADFACE = 514;

const int ENABLERELATIVEWIDTHS = 768;

const int ENABLEPAIRKERNING = 769;

const int SETKERNTRACK = 770;

const int SETALLJUSTVALUES = 771;

const int SETCHARSET = 772;

const int STRETCHBLT = 2048;

const int METAFILE_DRIVER = 2049;

const int GETSETSCREENPARAMS = 3072;

const int QUERYDIBSUPPORT = 3073;

const int BEGIN_PATH = 4096;

const int CLIP_TO_PATH = 4097;

const int END_PATH = 4098;

const int EXT_DEVICE_CAPS = 4099;

const int RESTORE_CTM = 4100;

const int SAVE_CTM = 4101;

const int SET_ARC_DIRECTION = 4102;

const int SET_BACKGROUND_COLOR = 4103;

const int SET_POLY_MODE = 4104;

const int SET_SCREEN_ANGLE = 4105;

const int SET_SPREAD = 4106;

const int TRANSFORM_CTM = 4107;

const int SET_CLIP_BOX = 4108;

const int SET_BOUNDS = 4109;

const int SET_MIRROR_MODE = 4110;

const int OPENCHANNEL = 4110;

const int DOWNLOADHEADER = 4111;

const int CLOSECHANNEL = 4112;

const int POSTSCRIPT_PASSTHROUGH = 4115;

const int ENCAPSULATED_POSTSCRIPT = 4116;

const int POSTSCRIPT_IDENTIFY = 4117;

const int POSTSCRIPT_INJECTION = 4118;

const int CHECKJPEGFORMAT = 4119;

const int CHECKPNGFORMAT = 4120;

const int GET_PS_FEATURESETTING = 4121;

const int GDIPLUS_TS_QUERYVER = 4122;

const int GDIPLUS_TS_RECORD = 4123;

const int MILCORE_TS_QUERYVER_RESULT_FALSE = 0;

const int MILCORE_TS_QUERYVER_RESULT_TRUE = 2147483647;

const int SPCLPASSTHROUGH2 = 4568;

const int PSIDENT_GDICENTRIC = 0;

const int PSIDENT_PSCENTRIC = 1;

const int PSINJECT_BEGINSTREAM = 1;

const int PSINJECT_PSADOBE = 2;

const int PSINJECT_PAGESATEND = 3;

const int PSINJECT_PAGES = 4;

const int PSINJECT_DOCNEEDEDRES = 5;

const int PSINJECT_DOCSUPPLIEDRES = 6;

const int PSINJECT_PAGEORDER = 7;

const int PSINJECT_ORIENTATION = 8;

const int PSINJECT_BOUNDINGBOX = 9;

const int PSINJECT_DOCUMENTPROCESSCOLORS = 10;

const int PSINJECT_COMMENTS = 11;

const int PSINJECT_BEGINDEFAULTS = 12;

const int PSINJECT_ENDDEFAULTS = 13;

const int PSINJECT_BEGINPROLOG = 14;

const int PSINJECT_ENDPROLOG = 15;

const int PSINJECT_BEGINSETUP = 16;

const int PSINJECT_ENDSETUP = 17;

const int PSINJECT_TRAILER = 18;

const int PSINJECT_EOF = 19;

const int PSINJECT_ENDSTREAM = 20;

const int PSINJECT_DOCUMENTPROCESSCOLORSATEND = 21;

const int PSINJECT_PAGENUMBER = 100;

const int PSINJECT_BEGINPAGESETUP = 101;

const int PSINJECT_ENDPAGESETUP = 102;

const int PSINJECT_PAGETRAILER = 103;

const int PSINJECT_PLATECOLOR = 104;

const int PSINJECT_SHOWPAGE = 105;

const int PSINJECT_PAGEBBOX = 106;

const int PSINJECT_ENDPAGECOMMENTS = 107;

const int PSINJECT_VMSAVE = 200;

const int PSINJECT_VMRESTORE = 201;

const int PSINJECT_DLFONT = 3722304989;

const int FEATURESETTING_NUP = 0;

const int FEATURESETTING_OUTPUT = 1;

const int FEATURESETTING_PSLEVEL = 2;

const int FEATURESETTING_CUSTPAPER = 3;

const int FEATURESETTING_MIRROR = 4;

const int FEATURESETTING_NEGATIVE = 5;

const int FEATURESETTING_PROTOCOL = 6;

const int FEATURESETTING_PRIVATE_BEGIN = 4096;

const int FEATURESETTING_PRIVATE_END = 8191;

const int PSPROTOCOL_ASCII = 0;

const int PSPROTOCOL_BCP = 1;

const int PSPROTOCOL_TBCP = 2;

const int PSPROTOCOL_BINARY = 3;

const int QDI_SETDIBITS = 1;

const int QDI_GETDIBITS = 2;

const int QDI_DIBTOSCREEN = 4;

const int QDI_STRETCHDIB = 8;

const int SP_NOTREPORTED = 16384;

const int SP_ERROR = -1;

const int SP_APPABORT = -2;

const int SP_USERABORT = -3;

const int SP_OUTOFDISK = -4;

const int SP_OUTOFMEMORY = -5;

const int PR_JOBSTATUS = 0;

const int OBJ_PEN = 1;

const int OBJ_BRUSH = 2;

const int OBJ_DC = 3;

const int OBJ_METADC = 4;

const int OBJ_PAL = 5;

const int OBJ_FONT = 6;

const int OBJ_BITMAP = 7;

const int OBJ_REGION = 8;

const int OBJ_METAFILE = 9;

const int OBJ_MEMDC = 10;

const int OBJ_EXTPEN = 11;

const int OBJ_ENHMETADC = 12;

const int OBJ_ENHMETAFILE = 13;

const int OBJ_COLORSPACE = 14;

const int GDI_OBJ_LAST = 14;

const int MWT_IDENTITY = 1;

const int MWT_LEFTMULTIPLY = 2;

const int MWT_RIGHTMULTIPLY = 3;

const int MWT_MIN = 1;

const int MWT_MAX = 3;

const int CS_ENABLE = 1;

const int CS_DISABLE = 2;

const int CS_DELETE_TRANSFORM = 3;

const int LCS_SIGNATURE = 1347637059;

const int LCS_sRGB = 1934772034;

const int LCS_WINDOWS_COLOR_SPACE = 1466527264;

const int LCS_CALIBRATED_RGB = 0;

const int LCS_GM_BUSINESS = 1;

const int LCS_GM_GRAPHICS = 2;

const int LCS_GM_IMAGES = 4;

const int LCS_GM_ABS_COLORIMETRIC = 8;

const int CM_OUT_OF_GAMUT = 255;

const int CM_IN_GAMUT = 0;

const int ICM_ADDPROFILE = 1;

const int ICM_DELETEPROFILE = 2;

const int ICM_QUERYPROFILE = 3;

const int ICM_SETDEFAULTPROFILE = 4;

const int ICM_REGISTERICMATCHER = 5;

const int ICM_UNREGISTERICMATCHER = 6;

const int ICM_QUERYMATCH = 7;

const int PROFILE_LINKED = 1279872587;

const int PROFILE_EMBEDDED = 1296188740;

const int BI_RGB = 0;

const int BI_RLE8 = 1;

const int BI_RLE4 = 2;

const int BI_BITFIELDS = 3;

const int BI_JPEG = 4;

const int BI_PNG = 5;

const int TCI_SRCCHARSET = 1;

const int TCI_SRCCODEPAGE = 2;

const int TCI_SRCFONTSIG = 3;

const int TCI_SRCLOCALE = 4096;

const int TMPF_FIXED_PITCH = 1;

const int TMPF_VECTOR = 2;

const int TMPF_DEVICE = 8;

const int TMPF_TRUETYPE = 4;

const int NTM_REGULAR = 64;

const int NTM_BOLD = 32;

const int NTM_ITALIC = 1;

const int NTM_NONNEGATIVE_AC = 65536;

const int NTM_PS_OPENTYPE = 131072;

const int NTM_TT_OPENTYPE = 262144;

const int NTM_MULTIPLEMASTER = 524288;

const int NTM_TYPE1 = 1048576;

const int NTM_DSIG = 2097152;

const int LF_FACESIZE = 32;

const int LF_FULLFACESIZE = 64;

const int OUT_DEFAULT_PRECIS = 0;

const int OUT_STRING_PRECIS = 1;

const int OUT_CHARACTER_PRECIS = 2;

const int OUT_STROKE_PRECIS = 3;

const int OUT_TT_PRECIS = 4;

const int OUT_DEVICE_PRECIS = 5;

const int OUT_RASTER_PRECIS = 6;

const int OUT_TT_ONLY_PRECIS = 7;

const int OUT_OUTLINE_PRECIS = 8;

const int OUT_SCREEN_OUTLINE_PRECIS = 9;

const int OUT_PS_ONLY_PRECIS = 10;

const int CLIP_DEFAULT_PRECIS = 0;

const int CLIP_CHARACTER_PRECIS = 1;

const int CLIP_STROKE_PRECIS = 2;

const int CLIP_MASK = 15;

const int CLIP_LH_ANGLES = 16;

const int CLIP_TT_ALWAYS = 32;

const int CLIP_DFA_DISABLE = 64;

const int CLIP_EMBEDDED = 128;

const int DEFAULT_QUALITY = 0;

const int DRAFT_QUALITY = 1;

const int PROOF_QUALITY = 2;

const int NONANTIALIASED_QUALITY = 3;

const int ANTIALIASED_QUALITY = 4;

const int CLEARTYPE_QUALITY = 5;

const int CLEARTYPE_NATURAL_QUALITY = 6;

const int DEFAULT_PITCH = 0;

const int FIXED_PITCH = 1;

const int VARIABLE_PITCH = 2;

const int MONO_FONT = 8;

const int ANSI_CHARSET = 0;

const int DEFAULT_CHARSET = 1;

const int SYMBOL_CHARSET = 2;

const int SHIFTJIS_CHARSET = 128;

const int HANGEUL_CHARSET = 129;

const int HANGUL_CHARSET = 129;

const int GB2312_CHARSET = 134;

const int CHINESEBIG5_CHARSET = 136;

const int OEM_CHARSET = 255;

const int JOHAB_CHARSET = 130;

const int HEBREW_CHARSET = 177;

const int ARABIC_CHARSET = 178;

const int GREEK_CHARSET = 161;

const int TURKISH_CHARSET = 162;

const int VIETNAMESE_CHARSET = 163;

const int THAI_CHARSET = 222;

const int EASTEUROPE_CHARSET = 238;

const int RUSSIAN_CHARSET = 204;

const int MAC_CHARSET = 77;

const int BALTIC_CHARSET = 186;

const int FS_LATIN1 = 1;

const int FS_LATIN2 = 2;

const int FS_CYRILLIC = 4;

const int FS_GREEK = 8;

const int FS_TURKISH = 16;

const int FS_HEBREW = 32;

const int FS_ARABIC = 64;

const int FS_BALTIC = 128;

const int FS_VIETNAMESE = 256;

const int FS_THAI = 65536;

const int FS_JISJAPAN = 131072;

const int FS_CHINESESIMP = 262144;

const int FS_WANSUNG = 524288;

const int FS_CHINESETRAD = 1048576;

const int FS_JOHAB = 2097152;

const int FS_SYMBOL = 2147483648;

const int FF_DONTCARE = 0;

const int FF_ROMAN = 16;

const int FF_SWISS = 32;

const int FF_MODERN = 48;

const int FF_SCRIPT = 64;

const int FF_DECORATIVE = 80;

const int FW_DONTCARE = 0;

const int FW_THIN = 100;

const int FW_EXTRALIGHT = 200;

const int FW_LIGHT = 300;

const int FW_NORMAL = 400;

const int FW_MEDIUM = 500;

const int FW_SEMIBOLD = 600;

const int FW_BOLD = 700;

const int FW_EXTRABOLD = 800;

const int FW_HEAVY = 900;

const int FW_ULTRALIGHT = 200;

const int FW_REGULAR = 400;

const int FW_DEMIBOLD = 600;

const int FW_ULTRABOLD = 800;

const int FW_BLACK = 900;

const int PANOSE_COUNT = 10;

const int PAN_FAMILYTYPE_INDEX = 0;

const int PAN_SERIFSTYLE_INDEX = 1;

const int PAN_WEIGHT_INDEX = 2;

const int PAN_PROPORTION_INDEX = 3;

const int PAN_CONTRAST_INDEX = 4;

const int PAN_STROKEVARIATION_INDEX = 5;

const int PAN_ARMSTYLE_INDEX = 6;

const int PAN_LETTERFORM_INDEX = 7;

const int PAN_MIDLINE_INDEX = 8;

const int PAN_XHEIGHT_INDEX = 9;

const int PAN_CULTURE_LATIN = 0;

const int PAN_ANY = 0;

const int PAN_NO_FIT = 1;

const int PAN_FAMILY_TEXT_DISPLAY = 2;

const int PAN_FAMILY_SCRIPT = 3;

const int PAN_FAMILY_DECORATIVE = 4;

const int PAN_FAMILY_PICTORIAL = 5;

const int PAN_SERIF_COVE = 2;

const int PAN_SERIF_OBTUSE_COVE = 3;

const int PAN_SERIF_SQUARE_COVE = 4;

const int PAN_SERIF_OBTUSE_SQUARE_COVE = 5;

const int PAN_SERIF_SQUARE = 6;

const int PAN_SERIF_THIN = 7;

const int PAN_SERIF_BONE = 8;

const int PAN_SERIF_EXAGGERATED = 9;

const int PAN_SERIF_TRIANGLE = 10;

const int PAN_SERIF_NORMAL_SANS = 11;

const int PAN_SERIF_OBTUSE_SANS = 12;

const int PAN_SERIF_PERP_SANS = 13;

const int PAN_SERIF_FLARED = 14;

const int PAN_SERIF_ROUNDED = 15;

const int PAN_WEIGHT_VERY_LIGHT = 2;

const int PAN_WEIGHT_LIGHT = 3;

const int PAN_WEIGHT_THIN = 4;

const int PAN_WEIGHT_BOOK = 5;

const int PAN_WEIGHT_MEDIUM = 6;

const int PAN_WEIGHT_DEMI = 7;

const int PAN_WEIGHT_BOLD = 8;

const int PAN_WEIGHT_HEAVY = 9;

const int PAN_WEIGHT_BLACK = 10;

const int PAN_WEIGHT_NORD = 11;

const int PAN_PROP_OLD_STYLE = 2;

const int PAN_PROP_MODERN = 3;

const int PAN_PROP_EVEN_WIDTH = 4;

const int PAN_PROP_EXPANDED = 5;

const int PAN_PROP_CONDENSED = 6;

const int PAN_PROP_VERY_EXPANDED = 7;

const int PAN_PROP_VERY_CONDENSED = 8;

const int PAN_PROP_MONOSPACED = 9;

const int PAN_CONTRAST_NONE = 2;

const int PAN_CONTRAST_VERY_LOW = 3;

const int PAN_CONTRAST_LOW = 4;

const int PAN_CONTRAST_MEDIUM_LOW = 5;

const int PAN_CONTRAST_MEDIUM = 6;

const int PAN_CONTRAST_MEDIUM_HIGH = 7;

const int PAN_CONTRAST_HIGH = 8;

const int PAN_CONTRAST_VERY_HIGH = 9;

const int PAN_STROKE_GRADUAL_DIAG = 2;

const int PAN_STROKE_GRADUAL_TRAN = 3;

const int PAN_STROKE_GRADUAL_VERT = 4;

const int PAN_STROKE_GRADUAL_HORZ = 5;

const int PAN_STROKE_RAPID_VERT = 6;

const int PAN_STROKE_RAPID_HORZ = 7;

const int PAN_STROKE_INSTANT_VERT = 8;

const int PAN_STRAIGHT_ARMS_HORZ = 2;

const int PAN_STRAIGHT_ARMS_WEDGE = 3;

const int PAN_STRAIGHT_ARMS_VERT = 4;

const int PAN_STRAIGHT_ARMS_SINGLE_SERIF = 5;

const int PAN_STRAIGHT_ARMS_DOUBLE_SERIF = 6;

const int PAN_BENT_ARMS_HORZ = 7;

const int PAN_BENT_ARMS_WEDGE = 8;

const int PAN_BENT_ARMS_VERT = 9;

const int PAN_BENT_ARMS_SINGLE_SERIF = 10;

const int PAN_BENT_ARMS_DOUBLE_SERIF = 11;

const int PAN_LETT_NORMAL_CONTACT = 2;

const int PAN_LETT_NORMAL_WEIGHTED = 3;

const int PAN_LETT_NORMAL_BOXED = 4;

const int PAN_LETT_NORMAL_FLATTENED = 5;

const int PAN_LETT_NORMAL_ROUNDED = 6;

const int PAN_LETT_NORMAL_OFF_CENTER = 7;

const int PAN_LETT_NORMAL_SQUARE = 8;

const int PAN_LETT_OBLIQUE_CONTACT = 9;

const int PAN_LETT_OBLIQUE_WEIGHTED = 10;

const int PAN_LETT_OBLIQUE_BOXED = 11;

const int PAN_LETT_OBLIQUE_FLATTENED = 12;

const int PAN_LETT_OBLIQUE_ROUNDED = 13;

const int PAN_LETT_OBLIQUE_OFF_CENTER = 14;

const int PAN_LETT_OBLIQUE_SQUARE = 15;

const int PAN_MIDLINE_STANDARD_TRIMMED = 2;

const int PAN_MIDLINE_STANDARD_POINTED = 3;

const int PAN_MIDLINE_STANDARD_SERIFED = 4;

const int PAN_MIDLINE_HIGH_TRIMMED = 5;

const int PAN_MIDLINE_HIGH_POINTED = 6;

const int PAN_MIDLINE_HIGH_SERIFED = 7;

const int PAN_MIDLINE_CONSTANT_TRIMMED = 8;

const int PAN_MIDLINE_CONSTANT_POINTED = 9;

const int PAN_MIDLINE_CONSTANT_SERIFED = 10;

const int PAN_MIDLINE_LOW_TRIMMED = 11;

const int PAN_MIDLINE_LOW_POINTED = 12;

const int PAN_MIDLINE_LOW_SERIFED = 13;

const int PAN_XHEIGHT_CONSTANT_SMALL = 2;

const int PAN_XHEIGHT_CONSTANT_STD = 3;

const int PAN_XHEIGHT_CONSTANT_LARGE = 4;

const int PAN_XHEIGHT_DUCKING_SMALL = 5;

const int PAN_XHEIGHT_DUCKING_STD = 6;

const int PAN_XHEIGHT_DUCKING_LARGE = 7;

const int ELF_VENDOR_SIZE = 4;

const int ELF_VERSION = 0;

const int ELF_CULTURE_LATIN = 0;

const int RASTER_FONTTYPE = 1;

const int DEVICE_FONTTYPE = 2;

const int TRUETYPE_FONTTYPE = 4;

const int PC_RESERVED = 1;

const int PC_EXPLICIT = 2;

const int PC_NOCOLLAPSE = 4;

const int TRANSPARENT = 1;

const int OPAQUE = 2;

const int BKMODE_LAST = 2;

const int GM_COMPATIBLE = 1;

const int GM_ADVANCED = 2;

const int GM_LAST = 2;

const int PT_CLOSEFIGURE = 1;

const int PT_LINETO = 2;

const int PT_BEZIERTO = 4;

const int PT_MOVETO = 6;

const int MM_TEXT = 1;

const int MM_LOMETRIC = 2;

const int MM_HIMETRIC = 3;

const int MM_LOENGLISH = 4;

const int MM_HIENGLISH = 5;

const int MM_TWIPS = 6;

const int MM_ISOTROPIC = 7;

const int MM_ANISOTROPIC = 8;

const int MM_MIN = 1;

const int MM_MAX = 8;

const int MM_MAX_FIXEDSCALE = 6;

const int ABSOLUTE = 1;

const int RELATIVE = 2;

const int WHITE_BRUSH = 0;

const int LTGRAY_BRUSH = 1;

const int GRAY_BRUSH = 2;

const int DKGRAY_BRUSH = 3;

const int BLACK_BRUSH = 4;

const int NULL_BRUSH = 5;

const int HOLLOW_BRUSH = 5;

const int WHITE_PEN = 6;

const int BLACK_PEN = 7;

const int NULL_PEN = 8;

const int OEM_FIXED_FONT = 10;

const int ANSI_FIXED_FONT = 11;

const int ANSI_VAR_FONT = 12;

const int SYSTEM_FONT = 13;

const int DEVICE_DEFAULT_FONT = 14;

const int DEFAULT_PALETTE = 15;

const int SYSTEM_FIXED_FONT = 16;

const int DEFAULT_GUI_FONT = 17;

const int DC_BRUSH = 18;

const int DC_PEN = 19;

const int STOCK_LAST = 19;

const int CLR_INVALID = 4294967295;

const int BS_SOLID = 0;

const int BS_NULL = 1;

const int BS_HOLLOW = 1;

const int BS_HATCHED = 2;

const int BS_PATTERN = 3;

const int BS_INDEXED = 4;

const int BS_DIBPATTERN = 5;

const int BS_DIBPATTERNPT = 6;

const int BS_PATTERN8X8 = 7;

const int BS_DIBPATTERN8X8 = 8;

const int BS_MONOPATTERN = 9;

const int HS_HORIZONTAL = 0;

const int HS_VERTICAL = 1;

const int HS_FDIAGONAL = 2;

const int HS_BDIAGONAL = 3;

const int HS_CROSS = 4;

const int HS_DIAGCROSS = 5;

const int HS_API_MAX = 12;

const int PS_SOLID = 0;

const int PS_DASH = 1;

const int PS_DOT = 2;

const int PS_DASHDOT = 3;

const int PS_DASHDOTDOT = 4;

const int PS_NULL = 5;

const int PS_INSIDEFRAME = 6;

const int PS_USERSTYLE = 7;

const int PS_ALTERNATE = 8;

const int PS_STYLE_MASK = 15;

const int PS_ENDCAP_ROUND = 0;

const int PS_ENDCAP_SQUARE = 256;

const int PS_ENDCAP_FLAT = 512;

const int PS_ENDCAP_MASK = 3840;

const int PS_JOIN_ROUND = 0;

const int PS_JOIN_BEVEL = 4096;

const int PS_JOIN_MITER = 8192;

const int PS_JOIN_MASK = 61440;

const int PS_COSMETIC = 0;

const int PS_GEOMETRIC = 65536;

const int PS_TYPE_MASK = 983040;

const int AD_COUNTERCLOCKWISE = 1;

const int AD_CLOCKWISE = 2;

const int DRIVERVERSION = 0;

const int TECHNOLOGY = 2;

const int HORZSIZE = 4;

const int VERTSIZE = 6;

const int HORZRES = 8;

const int VERTRES = 10;

const int BITSPIXEL = 12;

const int PLANES = 14;

const int NUMBRUSHES = 16;

const int NUMPENS = 18;

const int NUMMARKERS = 20;

const int NUMFONTS = 22;

const int NUMCOLORS = 24;

const int PDEVICESIZE = 26;

const int CURVECAPS = 28;

const int LINECAPS = 30;

const int POLYGONALCAPS = 32;

const int TEXTCAPS = 34;

const int CLIPCAPS = 36;

const int RASTERCAPS = 38;

const int ASPECTX = 40;

const int ASPECTY = 42;

const int ASPECTXY = 44;

const int LOGPIXELSX = 88;

const int LOGPIXELSY = 90;

const int SIZEPALETTE = 104;

const int NUMRESERVED = 106;

const int COLORRES = 108;

const int PHYSICALWIDTH = 110;

const int PHYSICALHEIGHT = 111;

const int PHYSICALOFFSETX = 112;

const int PHYSICALOFFSETY = 113;

const int SCALINGFACTORX = 114;

const int SCALINGFACTORY = 115;

const int VREFRESH = 116;

const int DESKTOPVERTRES = 117;

const int DESKTOPHORZRES = 118;

const int BLTALIGNMENT = 119;

const int SHADEBLENDCAPS = 120;

const int COLORMGMTCAPS = 121;

const int DT_PLOTTER = 0;

const int DT_RASDISPLAY = 1;

const int DT_RASPRINTER = 2;

const int DT_RASCAMERA = 3;

const int DT_CHARSTREAM = 4;

const int DT_METAFILE = 5;

const int DT_DISPFILE = 6;

const int CC_NONE = 0;

const int CC_CIRCLES = 1;

const int CC_PIE = 2;

const int CC_CHORD = 4;

const int CC_ELLIPSES = 8;

const int CC_WIDE = 16;

const int CC_STYLED = 32;

const int CC_WIDESTYLED = 64;

const int CC_INTERIORS = 128;

const int CC_ROUNDRECT = 256;

const int LC_NONE = 0;

const int LC_POLYLINE = 2;

const int LC_MARKER = 4;

const int LC_POLYMARKER = 8;

const int LC_WIDE = 16;

const int LC_STYLED = 32;

const int LC_WIDESTYLED = 64;

const int LC_INTERIORS = 128;

const int PC_NONE = 0;

const int PC_POLYGON = 1;

const int PC_RECTANGLE = 2;

const int PC_WINDPOLYGON = 4;

const int PC_TRAPEZOID = 4;

const int PC_SCANLINE = 8;

const int PC_WIDE = 16;

const int PC_STYLED = 32;

const int PC_WIDESTYLED = 64;

const int PC_INTERIORS = 128;

const int PC_POLYPOLYGON = 256;

const int PC_PATHS = 512;

const int CP_NONE = 0;

const int CP_RECTANGLE = 1;

const int CP_REGION = 2;

const int TC_OP_CHARACTER = 1;

const int TC_OP_STROKE = 2;

const int TC_CP_STROKE = 4;

const int TC_CR_90 = 8;

const int TC_CR_ANY = 16;

const int TC_SF_X_YINDEP = 32;

const int TC_SA_DOUBLE = 64;

const int TC_SA_INTEGER = 128;

const int TC_SA_CONTIN = 256;

const int TC_EA_DOUBLE = 512;

const int TC_IA_ABLE = 1024;

const int TC_UA_ABLE = 2048;

const int TC_SO_ABLE = 4096;

const int TC_RA_ABLE = 8192;

const int TC_VA_ABLE = 16384;

const int TC_RESERVED = 32768;

const int TC_SCROLLBLT = 65536;

const int RC_BITBLT = 1;

const int RC_BANDING = 2;

const int RC_SCALING = 4;

const int RC_BITMAP64 = 8;

const int RC_GDI20_OUTPUT = 16;

const int RC_GDI20_STATE = 32;

const int RC_SAVEBITMAP = 64;

const int RC_DI_BITMAP = 128;

const int RC_PALETTE = 256;

const int RC_DIBTODEV = 512;

const int RC_BIGFONT = 1024;

const int RC_STRETCHBLT = 2048;

const int RC_FLOODFILL = 4096;

const int RC_STRETCHDIB = 8192;

const int RC_OP_DX_OUTPUT = 16384;

const int RC_DEVBITS = 32768;

const int SB_NONE = 0;

const int SB_CONST_ALPHA = 1;

const int SB_PIXEL_ALPHA = 2;

const int SB_PREMULT_ALPHA = 4;

const int SB_GRAD_RECT = 16;

const int SB_GRAD_TRI = 32;

const int CM_NONE = 0;

const int CM_DEVICE_ICM = 1;

const int CM_GAMMA_RAMP = 2;

const int CM_CMYK_COLOR = 4;

const int DIB_RGB_COLORS = 0;

const int DIB_PAL_COLORS = 1;

const int SYSPAL_ERROR = 0;

const int SYSPAL_STATIC = 1;

const int SYSPAL_NOSTATIC = 2;

const int SYSPAL_NOSTATIC256 = 3;

const int CBM_INIT = 4;

const int FLOODFILLBORDER = 0;

const int FLOODFILLSURFACE = 1;

const int CCHDEVICENAME = 32;

const int CCHFORMNAME = 32;

const int DM_SPECVERSION = 1025;

const int DM_ORIENTATION = 1;

const int DM_PAPERSIZE = 2;

const int DM_PAPERLENGTH = 4;

const int DM_PAPERWIDTH = 8;

const int DM_SCALE = 16;

const int DM_POSITION = 32;

const int DM_NUP = 64;

const int DM_DISPLAYORIENTATION = 128;

const int DM_COPIES = 256;

const int DM_DEFAULTSOURCE = 512;

const int DM_PRINTQUALITY = 1024;

const int DM_COLOR = 2048;

const int DM_DUPLEX = 4096;

const int DM_YRESOLUTION = 8192;

const int DM_TTOPTION = 16384;

const int DM_COLLATE = 32768;

const int DM_FORMNAME = 65536;

const int DM_LOGPIXELS = 131072;

const int DM_BITSPERPEL = 262144;

const int DM_PELSWIDTH = 524288;

const int DM_PELSHEIGHT = 1048576;

const int DM_DISPLAYFLAGS = 2097152;

const int DM_DISPLAYFREQUENCY = 4194304;

const int DM_ICMMETHOD = 8388608;

const int DM_ICMINTENT = 16777216;

const int DM_MEDIATYPE = 33554432;

const int DM_DITHERTYPE = 67108864;

const int DM_PANNINGWIDTH = 134217728;

const int DM_PANNINGHEIGHT = 268435456;

const int DM_DISPLAYFIXEDOUTPUT = 536870912;

const int DMORIENT_PORTRAIT = 1;

const int DMORIENT_LANDSCAPE = 2;

const int DMPAPER_FIRST = 1;

const int DMPAPER_LETTER = 1;

const int DMPAPER_LETTERSMALL = 2;

const int DMPAPER_TABLOID = 3;

const int DMPAPER_LEDGER = 4;

const int DMPAPER_LEGAL = 5;

const int DMPAPER_STATEMENT = 6;

const int DMPAPER_EXECUTIVE = 7;

const int DMPAPER_A3 = 8;

const int DMPAPER_A4 = 9;

const int DMPAPER_A4SMALL = 10;

const int DMPAPER_A5 = 11;

const int DMPAPER_B4 = 12;

const int DMPAPER_B5 = 13;

const int DMPAPER_FOLIO = 14;

const int DMPAPER_QUARTO = 15;

const int DMPAPER_10X14 = 16;

const int DMPAPER_11X17 = 17;

const int DMPAPER_NOTE = 18;

const int DMPAPER_ENV_9 = 19;

const int DMPAPER_ENV_10 = 20;

const int DMPAPER_ENV_11 = 21;

const int DMPAPER_ENV_12 = 22;

const int DMPAPER_ENV_14 = 23;

const int DMPAPER_CSHEET = 24;

const int DMPAPER_DSHEET = 25;

const int DMPAPER_ESHEET = 26;

const int DMPAPER_ENV_DL = 27;

const int DMPAPER_ENV_C5 = 28;

const int DMPAPER_ENV_C3 = 29;

const int DMPAPER_ENV_C4 = 30;

const int DMPAPER_ENV_C6 = 31;

const int DMPAPER_ENV_C65 = 32;

const int DMPAPER_ENV_B4 = 33;

const int DMPAPER_ENV_B5 = 34;

const int DMPAPER_ENV_B6 = 35;

const int DMPAPER_ENV_ITALY = 36;

const int DMPAPER_ENV_MONARCH = 37;

const int DMPAPER_ENV_PERSONAL = 38;

const int DMPAPER_FANFOLD_US = 39;

const int DMPAPER_FANFOLD_STD_GERMAN = 40;

const int DMPAPER_FANFOLD_LGL_GERMAN = 41;

const int DMPAPER_ISO_B4 = 42;

const int DMPAPER_JAPANESE_POSTCARD = 43;

const int DMPAPER_9X11 = 44;

const int DMPAPER_10X11 = 45;

const int DMPAPER_15X11 = 46;

const int DMPAPER_ENV_INVITE = 47;

const int DMPAPER_RESERVED_48 = 48;

const int DMPAPER_RESERVED_49 = 49;

const int DMPAPER_LETTER_EXTRA = 50;

const int DMPAPER_LEGAL_EXTRA = 51;

const int DMPAPER_TABLOID_EXTRA = 52;

const int DMPAPER_A4_EXTRA = 53;

const int DMPAPER_LETTER_TRANSVERSE = 54;

const int DMPAPER_A4_TRANSVERSE = 55;

const int DMPAPER_LETTER_EXTRA_TRANSVERSE = 56;

const int DMPAPER_A_PLUS = 57;

const int DMPAPER_B_PLUS = 58;

const int DMPAPER_LETTER_PLUS = 59;

const int DMPAPER_A4_PLUS = 60;

const int DMPAPER_A5_TRANSVERSE = 61;

const int DMPAPER_B5_TRANSVERSE = 62;

const int DMPAPER_A3_EXTRA = 63;

const int DMPAPER_A5_EXTRA = 64;

const int DMPAPER_B5_EXTRA = 65;

const int DMPAPER_A2 = 66;

const int DMPAPER_A3_TRANSVERSE = 67;

const int DMPAPER_A3_EXTRA_TRANSVERSE = 68;

const int DMPAPER_DBL_JAPANESE_POSTCARD = 69;

const int DMPAPER_A6 = 70;

const int DMPAPER_JENV_KAKU2 = 71;

const int DMPAPER_JENV_KAKU3 = 72;

const int DMPAPER_JENV_CHOU3 = 73;

const int DMPAPER_JENV_CHOU4 = 74;

const int DMPAPER_LETTER_ROTATED = 75;

const int DMPAPER_A3_ROTATED = 76;

const int DMPAPER_A4_ROTATED = 77;

const int DMPAPER_A5_ROTATED = 78;

const int DMPAPER_B4_JIS_ROTATED = 79;

const int DMPAPER_B5_JIS_ROTATED = 80;

const int DMPAPER_JAPANESE_POSTCARD_ROTATED = 81;

const int DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED = 82;

const int DMPAPER_A6_ROTATED = 83;

const int DMPAPER_JENV_KAKU2_ROTATED = 84;

const int DMPAPER_JENV_KAKU3_ROTATED = 85;

const int DMPAPER_JENV_CHOU3_ROTATED = 86;

const int DMPAPER_JENV_CHOU4_ROTATED = 87;

const int DMPAPER_B6_JIS = 88;

const int DMPAPER_B6_JIS_ROTATED = 89;

const int DMPAPER_12X11 = 90;

const int DMPAPER_JENV_YOU4 = 91;

const int DMPAPER_JENV_YOU4_ROTATED = 92;

const int DMPAPER_P16K = 93;

const int DMPAPER_P32K = 94;

const int DMPAPER_P32KBIG = 95;

const int DMPAPER_PENV_1 = 96;

const int DMPAPER_PENV_2 = 97;

const int DMPAPER_PENV_3 = 98;

const int DMPAPER_PENV_4 = 99;

const int DMPAPER_PENV_5 = 100;

const int DMPAPER_PENV_6 = 101;

const int DMPAPER_PENV_7 = 102;

const int DMPAPER_PENV_8 = 103;

const int DMPAPER_PENV_9 = 104;

const int DMPAPER_PENV_10 = 105;

const int DMPAPER_P16K_ROTATED = 106;

const int DMPAPER_P32K_ROTATED = 107;

const int DMPAPER_P32KBIG_ROTATED = 108;

const int DMPAPER_PENV_1_ROTATED = 109;

const int DMPAPER_PENV_2_ROTATED = 110;

const int DMPAPER_PENV_3_ROTATED = 111;

const int DMPAPER_PENV_4_ROTATED = 112;

const int DMPAPER_PENV_5_ROTATED = 113;

const int DMPAPER_PENV_6_ROTATED = 114;

const int DMPAPER_PENV_7_ROTATED = 115;

const int DMPAPER_PENV_8_ROTATED = 116;

const int DMPAPER_PENV_9_ROTATED = 117;

const int DMPAPER_PENV_10_ROTATED = 118;

const int DMPAPER_LAST = 118;

const int DMPAPER_USER = 256;

const int DMBIN_FIRST = 1;

const int DMBIN_UPPER = 1;

const int DMBIN_ONLYONE = 1;

const int DMBIN_LOWER = 2;

const int DMBIN_MIDDLE = 3;

const int DMBIN_MANUAL = 4;

const int DMBIN_ENVELOPE = 5;

const int DMBIN_ENVMANUAL = 6;

const int DMBIN_AUTO = 7;

const int DMBIN_TRACTOR = 8;

const int DMBIN_SMALLFMT = 9;

const int DMBIN_LARGEFMT = 10;

const int DMBIN_LARGECAPACITY = 11;

const int DMBIN_CASSETTE = 14;

const int DMBIN_FORMSOURCE = 15;

const int DMBIN_LAST = 15;

const int DMBIN_USER = 256;

const int DMRES_DRAFT = -1;

const int DMRES_LOW = -2;

const int DMRES_MEDIUM = -3;

const int DMRES_HIGH = -4;

const int DMCOLOR_MONOCHROME = 1;

const int DMCOLOR_COLOR = 2;

const int DMDUP_SIMPLEX = 1;

const int DMDUP_VERTICAL = 2;

const int DMDUP_HORIZONTAL = 3;

const int DMTT_BITMAP = 1;

const int DMTT_DOWNLOAD = 2;

const int DMTT_SUBDEV = 3;

const int DMTT_DOWNLOAD_OUTLINE = 4;

const int DMCOLLATE_FALSE = 0;

const int DMCOLLATE_TRUE = 1;

const int DMDO_DEFAULT = 0;

const int DMDO_90 = 1;

const int DMDO_180 = 2;

const int DMDO_270 = 3;

const int DMDFO_DEFAULT = 0;

const int DMDFO_STRETCH = 1;

const int DMDFO_CENTER = 2;

const int DM_INTERLACED = 2;

const int DMDISPLAYFLAGS_TEXTMODE = 4;

const int DMNUP_SYSTEM = 1;

const int DMNUP_ONEUP = 2;

const int DMICMMETHOD_NONE = 1;

const int DMICMMETHOD_SYSTEM = 2;

const int DMICMMETHOD_DRIVER = 3;

const int DMICMMETHOD_DEVICE = 4;

const int DMICMMETHOD_USER = 256;

const int DMICM_SATURATE = 1;

const int DMICM_CONTRAST = 2;

const int DMICM_COLORIMETRIC = 3;

const int DMICM_ABS_COLORIMETRIC = 4;

const int DMICM_USER = 256;

const int DMMEDIA_STANDARD = 1;

const int DMMEDIA_TRANSPARENCY = 2;

const int DMMEDIA_GLOSSY = 3;

const int DMMEDIA_USER = 256;

const int DMDITHER_NONE = 1;

const int DMDITHER_COARSE = 2;

const int DMDITHER_FINE = 3;

const int DMDITHER_LINEART = 4;

const int DMDITHER_ERRORDIFFUSION = 5;

const int DMDITHER_RESERVED6 = 6;

const int DMDITHER_RESERVED7 = 7;

const int DMDITHER_RESERVED8 = 8;

const int DMDITHER_RESERVED9 = 9;

const int DMDITHER_GRAYSCALE = 10;

const int DMDITHER_USER = 256;

const int DISPLAY_DEVICE_ATTACHED_TO_DESKTOP = 1;

const int DISPLAY_DEVICE_MULTI_DRIVER = 2;

const int DISPLAY_DEVICE_PRIMARY_DEVICE = 4;

const int DISPLAY_DEVICE_MIRRORING_DRIVER = 8;

const int DISPLAY_DEVICE_VGA_COMPATIBLE = 16;

const int DISPLAY_DEVICE_REMOVABLE = 32;

const int DISPLAY_DEVICE_ACC_DRIVER = 64;

const int DISPLAY_DEVICE_MODESPRUNED = 134217728;

const int DISPLAY_DEVICE_RDPUDD = 16777216;

const int DISPLAY_DEVICE_REMOTE = 67108864;

const int DISPLAY_DEVICE_DISCONNECT = 33554432;

const int DISPLAY_DEVICE_TS_COMPATIBLE = 2097152;

const int DISPLAY_DEVICE_UNSAFE_MODES_ON = 524288;

const int DISPLAY_DEVICE_ACTIVE = 1;

const int DISPLAY_DEVICE_ATTACHED = 2;

const int DISPLAYCONFIG_MAXPATH = 1024;

const int DISPLAYCONFIG_PATH_MODE_IDX_INVALID = 4294967295;

const int DISPLAYCONFIG_PATH_TARGET_MODE_IDX_INVALID = 65535;

const int DISPLAYCONFIG_PATH_DESKTOP_IMAGE_IDX_INVALID = 65535;

const int DISPLAYCONFIG_PATH_SOURCE_MODE_IDX_INVALID = 65535;

const int DISPLAYCONFIG_PATH_CLONE_GROUP_INVALID = 65535;

const int DISPLAYCONFIG_SOURCE_IN_USE = 1;

const int DISPLAYCONFIG_TARGET_IN_USE = 1;

const int DISPLAYCONFIG_TARGET_FORCIBLE = 2;

const int DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_BOOT = 4;

const int DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_PATH = 8;

const int DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_SYSTEM = 16;

const int DISPLAYCONFIG_TARGET_IS_HMD = 32;

const int DISPLAYCONFIG_PATH_ACTIVE = 1;

const int DISPLAYCONFIG_PATH_PREFERRED_UNSCALED = 4;

const int DISPLAYCONFIG_PATH_SUPPORT_VIRTUAL_MODE = 8;

const int DISPLAYCONFIG_PATH_VALID_FLAGS = 13;

const int QDC_ALL_PATHS = 1;

const int QDC_ONLY_ACTIVE_PATHS = 2;

const int QDC_DATABASE_CURRENT = 4;

const int QDC_VIRTUAL_MODE_AWARE = 16;

const int QDC_INCLUDE_HMD = 32;

const int SDC_TOPOLOGY_INTERNAL = 1;

const int SDC_TOPOLOGY_CLONE = 2;

const int SDC_TOPOLOGY_EXTEND = 4;

const int SDC_TOPOLOGY_EXTERNAL = 8;

const int SDC_TOPOLOGY_SUPPLIED = 16;

const int SDC_USE_DATABASE_CURRENT = 15;

const int SDC_USE_SUPPLIED_DISPLAY_CONFIG = 32;

const int SDC_VALIDATE = 64;

const int SDC_APPLY = 128;

const int SDC_NO_OPTIMIZATION = 256;

const int SDC_SAVE_TO_DATABASE = 512;

const int SDC_ALLOW_CHANGES = 1024;

const int SDC_PATH_PERSIST_IF_REQUIRED = 2048;

const int SDC_FORCE_MODE_ENUMERATION = 4096;

const int SDC_ALLOW_PATH_ORDER_CHANGES = 8192;

const int SDC_VIRTUAL_MODE_AWARE = 32768;

const int RDH_RECTANGLES = 1;

const int SYSRGN = 4;

const int GGO_METRICS = 0;

const int GGO_BITMAP = 1;

const int GGO_NATIVE = 2;

const int GGO_BEZIER = 3;

const int GGO_GRAY2_BITMAP = 4;

const int GGO_GRAY4_BITMAP = 5;

const int GGO_GRAY8_BITMAP = 6;

const int GGO_GLYPH_INDEX = 128;

const int GGO_UNHINTED = 256;

const int TT_POLYGON_TYPE = 24;

const int TT_PRIM_LINE = 1;

const int TT_PRIM_QSPLINE = 2;

const int TT_PRIM_CSPLINE = 3;

const int GCP_DBCS = 1;

const int GCP_REORDER = 2;

const int GCP_USEKERNING = 8;

const int GCP_GLYPHSHAPE = 16;

const int GCP_LIGATE = 32;

const int GCP_DIACRITIC = 256;

const int GCP_KASHIDA = 1024;

const int GCP_ERROR = 32768;

const int FLI_MASK = 4155;

const int GCP_JUSTIFY = 65536;

const int FLI_GLYPHS = 262144;

const int GCP_CLASSIN = 524288;

const int GCP_MAXEXTENT = 1048576;

const int GCP_JUSTIFYIN = 2097152;

const int GCP_DISPLAYZWG = 4194304;

const int GCP_SYMSWAPOFF = 8388608;

const int GCP_NUMERICOVERRIDE = 16777216;

const int GCP_NEUTRALOVERRIDE = 33554432;

const int GCP_NUMERICSLATIN = 67108864;

const int GCP_NUMERICSLOCAL = 134217728;

const int GCPCLASS_LATIN = 1;

const int GCPCLASS_HEBREW = 2;

const int GCPCLASS_ARABIC = 2;

const int GCPCLASS_NEUTRAL = 3;

const int GCPCLASS_LOCALNUMBER = 4;

const int GCPCLASS_LATINNUMBER = 5;

const int GCPCLASS_LATINNUMERICTERMINATOR = 6;

const int GCPCLASS_LATINNUMERICSEPARATOR = 7;

const int GCPCLASS_NUMERICSEPARATOR = 8;

const int GCPCLASS_PREBOUNDLTR = 128;

const int GCPCLASS_PREBOUNDRTL = 64;

const int GCPCLASS_POSTBOUNDLTR = 32;

const int GCPCLASS_POSTBOUNDRTL = 16;

const int GCPGLYPH_LINKBEFORE = 32768;

const int GCPGLYPH_LINKAFTER = 16384;

const int TT_AVAILABLE = 1;

const int TT_ENABLED = 2;

const int PFD_TYPE_RGBA = 0;

const int PFD_TYPE_COLORINDEX = 1;

const int PFD_MAIN_PLANE = 0;

const int PFD_OVERLAY_PLANE = 1;

const int PFD_UNDERLAY_PLANE = -1;

const int PFD_DOUBLEBUFFER = 1;

const int PFD_STEREO = 2;

const int PFD_DRAW_TO_WINDOW = 4;

const int PFD_DRAW_TO_BITMAP = 8;

const int PFD_SUPPORT_GDI = 16;

const int PFD_SUPPORT_OPENGL = 32;

const int PFD_GENERIC_FORMAT = 64;

const int PFD_NEED_PALETTE = 128;

const int PFD_NEED_SYSTEM_PALETTE = 256;

const int PFD_SWAP_EXCHANGE = 512;

const int PFD_SWAP_COPY = 1024;

const int PFD_SWAP_LAYER_BUFFERS = 2048;

const int PFD_GENERIC_ACCELERATED = 4096;

const int PFD_SUPPORT_DIRECTDRAW = 8192;

const int PFD_DIRECT3D_ACCELERATED = 16384;

const int PFD_SUPPORT_COMPOSITION = 32768;

const int PFD_DEPTH_DONTCARE = 536870912;

const int PFD_DOUBLEBUFFER_DONTCARE = 1073741824;

const int PFD_STEREO_DONTCARE = 2147483648;

const int DC_BINADJUST = 19;

const int DC_EMF_COMPLIANT = 20;

const int DC_DATATYPE_PRODUCED = 21;

const int DC_COLLATE = 22;

const int DC_MANUFACTURER = 23;

const int DC_MODEL = 24;

const int DC_PERSONALITY = 25;

const int DC_PRINTRATE = 26;

const int DC_PRINTRATEUNIT = 27;

const int PRINTRATEUNIT_PPM = 1;

const int PRINTRATEUNIT_CPS = 2;

const int PRINTRATEUNIT_LPM = 3;

const int PRINTRATEUNIT_IPM = 4;

const int DC_PRINTERMEM = 28;

const int DC_MEDIAREADY = 29;

const int DC_STAPLE = 30;

const int DC_PRINTRATEPPM = 31;

const int DC_COLORDEVICE = 32;

const int DC_NUP = 33;

const int DC_MEDIATYPENAMES = 34;

const int DC_MEDIATYPES = 35;

const int DCTT_BITMAP = 1;

const int DCTT_DOWNLOAD = 2;

const int DCTT_SUBDEV = 4;

const int DCTT_DOWNLOAD_OUTLINE = 8;

const int DCBA_FACEUPNONE = 0;

const int DCBA_FACEUPCENTER = 1;

const int DCBA_FACEUPLEFT = 2;

const int DCBA_FACEUPRIGHT = 3;

const int DCBA_FACEDOWNNONE = 256;

const int DCBA_FACEDOWNCENTER = 257;

const int DCBA_FACEDOWNLEFT = 258;

const int DCBA_FACEDOWNRIGHT = 259;

const int GS_8BIT_INDICES = 1;

const int GGI_MARK_NONEXISTING_GLYPHS = 1;

const int STAMP_DESIGNVECTOR = 134248036;

const int STAMP_AXESLIST = 134245473;

const int STAMP_TRUETYPE_VARIATION = 134248052;

const int STAMP_CFF2 = 134248035;

const int MM_MAX_NUMAXES = 16;

const int FR_PRIVATE = 16;

const int FR_NOT_ENUM = 32;

const int MM_MAX_AXES_NAMELEN = 16;

const int AC_SRC_OVER = 0;

const int AC_SRC_ALPHA = 1;

const int GRADIENT_FILL_RECT_H = 0;

const int GRADIENT_FILL_RECT_V = 1;

const int GRADIENT_FILL_TRIANGLE = 2;

const int GRADIENT_FILL_OP_FLAG = 255;

const int CA_NEGATIVE = 1;

const int CA_LOG_FILTER = 2;

const int ILLUMINANT_DEVICE_DEFAULT = 0;

const int ILLUMINANT_A = 1;

const int ILLUMINANT_B = 2;

const int ILLUMINANT_C = 3;

const int ILLUMINANT_D50 = 4;

const int ILLUMINANT_D55 = 5;

const int ILLUMINANT_D65 = 6;

const int ILLUMINANT_D75 = 7;

const int ILLUMINANT_F2 = 8;

const int ILLUMINANT_MAX_INDEX = 8;

const int ILLUMINANT_TUNGSTEN = 1;

const int ILLUMINANT_DAYLIGHT = 3;

const int ILLUMINANT_FLUORESCENT = 8;

const int ILLUMINANT_NTSC = 3;

const int RGB_GAMMA_MIN = 1344;

const int RGB_GAMMA_MAX = 65000;

const int REFERENCE_WHITE_MIN = 6000;

const int REFERENCE_WHITE_MAX = 10000;

const int REFERENCE_BLACK_MIN = 0;

const int REFERENCE_BLACK_MAX = 4000;

const int COLOR_ADJ_MIN = -100;

const int COLOR_ADJ_MAX = 100;

const int DI_APPBANDING = 1;

const int DI_ROPS_READ_DESTINATION = 2;

const int FONTMAPPER_MAX = 10;

const int ICM_OFF = 1;

const int ICM_ON = 2;

const int ICM_QUERY = 3;

const int ICM_DONE_OUTSIDEDC = 4;

const int ENHMETA_SIGNATURE = 1179469088;

const int ENHMETA_STOCK_OBJECT = 2147483648;

const int EMR_HEADER = 1;

const int EMR_POLYBEZIER = 2;

const int EMR_POLYGON = 3;

const int EMR_POLYLINE = 4;

const int EMR_POLYBEZIERTO = 5;

const int EMR_POLYLINETO = 6;

const int EMR_POLYPOLYLINE = 7;

const int EMR_POLYPOLYGON = 8;

const int EMR_SETWINDOWEXTEX = 9;

const int EMR_SETWINDOWORGEX = 10;

const int EMR_SETVIEWPORTEXTEX = 11;

const int EMR_SETVIEWPORTORGEX = 12;

const int EMR_SETBRUSHORGEX = 13;

const int EMR_EOF = 14;

const int EMR_SETPIXELV = 15;

const int EMR_SETMAPPERFLAGS = 16;

const int EMR_SETMAPMODE = 17;

const int EMR_SETBKMODE = 18;

const int EMR_SETPOLYFILLMODE = 19;

const int EMR_SETROP2 = 20;

const int EMR_SETSTRETCHBLTMODE = 21;

const int EMR_SETTEXTALIGN = 22;

const int EMR_SETCOLORADJUSTMENT = 23;

const int EMR_SETTEXTCOLOR = 24;

const int EMR_SETBKCOLOR = 25;

const int EMR_OFFSETCLIPRGN = 26;

const int EMR_MOVETOEX = 27;

const int EMR_SETMETARGN = 28;

const int EMR_EXCLUDECLIPRECT = 29;

const int EMR_INTERSECTCLIPRECT = 30;

const int EMR_SCALEVIEWPORTEXTEX = 31;

const int EMR_SCALEWINDOWEXTEX = 32;

const int EMR_SAVEDC = 33;

const int EMR_RESTOREDC = 34;

const int EMR_SETWORLDTRANSFORM = 35;

const int EMR_MODIFYWORLDTRANSFORM = 36;

const int EMR_SELECTOBJECT = 37;

const int EMR_CREATEPEN = 38;

const int EMR_CREATEBRUSHINDIRECT = 39;

const int EMR_DELETEOBJECT = 40;

const int EMR_ANGLEARC = 41;

const int EMR_ELLIPSE = 42;

const int EMR_RECTANGLE = 43;

const int EMR_ROUNDRECT = 44;

const int EMR_ARC = 45;

const int EMR_CHORD = 46;

const int EMR_PIE = 47;

const int EMR_SELECTPALETTE = 48;

const int EMR_CREATEPALETTE = 49;

const int EMR_SETPALETTEENTRIES = 50;

const int EMR_RESIZEPALETTE = 51;

const int EMR_REALIZEPALETTE = 52;

const int EMR_EXTFLOODFILL = 53;

const int EMR_LINETO = 54;

const int EMR_ARCTO = 55;

const int EMR_POLYDRAW = 56;

const int EMR_SETARCDIRECTION = 57;

const int EMR_SETMITERLIMIT = 58;

const int EMR_BEGINPATH = 59;

const int EMR_ENDPATH = 60;

const int EMR_CLOSEFIGURE = 61;

const int EMR_FILLPATH = 62;

const int EMR_STROKEANDFILLPATH = 63;

const int EMR_STROKEPATH = 64;

const int EMR_FLATTENPATH = 65;

const int EMR_WIDENPATH = 66;

const int EMR_SELECTCLIPPATH = 67;

const int EMR_ABORTPATH = 68;

const int EMR_GDICOMMENT = 70;

const int EMR_FILLRGN = 71;

const int EMR_FRAMERGN = 72;

const int EMR_INVERTRGN = 73;

const int EMR_PAINTRGN = 74;

const int EMR_EXTSELECTCLIPRGN = 75;

const int EMR_BITBLT = 76;

const int EMR_STRETCHBLT = 77;

const int EMR_MASKBLT = 78;

const int EMR_PLGBLT = 79;

const int EMR_SETDIBITSTODEVICE = 80;

const int EMR_STRETCHDIBITS = 81;

const int EMR_EXTCREATEFONTINDIRECTW = 82;

const int EMR_EXTTEXTOUTA = 83;

const int EMR_EXTTEXTOUTW = 84;

const int EMR_POLYBEZIER16 = 85;

const int EMR_POLYGON16 = 86;

const int EMR_POLYLINE16 = 87;

const int EMR_POLYBEZIERTO16 = 88;

const int EMR_POLYLINETO16 = 89;

const int EMR_POLYPOLYLINE16 = 90;

const int EMR_POLYPOLYGON16 = 91;

const int EMR_POLYDRAW16 = 92;

const int EMR_CREATEMONOBRUSH = 93;

const int EMR_CREATEDIBPATTERNBRUSHPT = 94;

const int EMR_EXTCREATEPEN = 95;

const int EMR_POLYTEXTOUTA = 96;

const int EMR_POLYTEXTOUTW = 97;

const int EMR_SETICMMODE = 98;

const int EMR_CREATECOLORSPACE = 99;

const int EMR_SETCOLORSPACE = 100;

const int EMR_DELETECOLORSPACE = 101;

const int EMR_GLSRECORD = 102;

const int EMR_GLSBOUNDEDRECORD = 103;

const int EMR_PIXELFORMAT = 104;

const int EMR_RESERVED_105 = 105;

const int EMR_RESERVED_106 = 106;

const int EMR_RESERVED_107 = 107;

const int EMR_RESERVED_108 = 108;

const int EMR_RESERVED_109 = 109;

const int EMR_RESERVED_110 = 110;

const int EMR_COLORCORRECTPALETTE = 111;

const int EMR_SETICMPROFILEA = 112;

const int EMR_SETICMPROFILEW = 113;

const int EMR_ALPHABLEND = 114;

const int EMR_SETLAYOUT = 115;

const int EMR_TRANSPARENTBLT = 116;

const int EMR_RESERVED_117 = 117;

const int EMR_GRADIENTFILL = 118;

const int EMR_RESERVED_119 = 119;

const int EMR_RESERVED_120 = 120;

const int EMR_COLORMATCHTOTARGETW = 121;

const int EMR_CREATECOLORSPACEW = 122;

const int EMR_MIN = 1;

const int EMR_MAX = 122;

const int SETICMPROFILE_EMBEDED = 1;

const int CREATECOLORSPACE_EMBEDED = 1;

const int COLORMATCHTOTARGET_EMBEDED = 1;

const int GDICOMMENT_IDENTIFIER = 1128875079;

const int GDICOMMENT_WINDOWS_METAFILE = 2147483649;

const int GDICOMMENT_BEGINGROUP = 2;

const int GDICOMMENT_ENDGROUP = 3;

const int GDICOMMENT_MULTIFORMATS = 1073741828;

const int EPS_SIGNATURE = 1179865157;

const int GDICOMMENT_UNICODE_STRING = 64;

const int GDICOMMENT_UNICODE_END = 128;

const int WGL_FONT_LINES = 0;

const int WGL_FONT_POLYGONS = 1;

const int LPD_DOUBLEBUFFER = 1;

const int LPD_STEREO = 2;

const int LPD_SUPPORT_GDI = 16;

const int LPD_SUPPORT_OPENGL = 32;

const int LPD_SHARE_DEPTH = 64;

const int LPD_SHARE_STENCIL = 128;

const int LPD_SHARE_ACCUM = 256;

const int LPD_SWAP_EXCHANGE = 512;

const int LPD_SWAP_COPY = 1024;

const int LPD_TRANSPARENT = 4096;

const int LPD_TYPE_RGBA = 0;

const int LPD_TYPE_COLORINDEX = 1;

const int WGL_SWAP_MAIN_PLANE = 1;

const int WGL_SWAP_OVERLAY1 = 2;

const int WGL_SWAP_OVERLAY2 = 4;

const int WGL_SWAP_OVERLAY3 = 8;

const int WGL_SWAP_OVERLAY4 = 16;

const int WGL_SWAP_OVERLAY5 = 32;

const int WGL_SWAP_OVERLAY6 = 64;

const int WGL_SWAP_OVERLAY7 = 128;

const int WGL_SWAP_OVERLAY8 = 256;

const int WGL_SWAP_OVERLAY9 = 512;

const int WGL_SWAP_OVERLAY10 = 1024;

const int WGL_SWAP_OVERLAY11 = 2048;

const int WGL_SWAP_OVERLAY12 = 4096;

const int WGL_SWAP_OVERLAY13 = 8192;

const int WGL_SWAP_OVERLAY14 = 16384;

const int WGL_SWAP_OVERLAY15 = 32768;

const int WGL_SWAP_UNDERLAY1 = 65536;

const int WGL_SWAP_UNDERLAY2 = 131072;

const int WGL_SWAP_UNDERLAY3 = 262144;

const int WGL_SWAP_UNDERLAY4 = 524288;

const int WGL_SWAP_UNDERLAY5 = 1048576;

const int WGL_SWAP_UNDERLAY6 = 2097152;

const int WGL_SWAP_UNDERLAY7 = 4194304;

const int WGL_SWAP_UNDERLAY8 = 8388608;

const int WGL_SWAP_UNDERLAY9 = 16777216;

const int WGL_SWAP_UNDERLAY10 = 33554432;

const int WGL_SWAP_UNDERLAY11 = 67108864;

const int WGL_SWAP_UNDERLAY12 = 134217728;

const int WGL_SWAP_UNDERLAY13 = 268435456;

const int WGL_SWAP_UNDERLAY14 = 536870912;

const int WGL_SWAP_UNDERLAY15 = 1073741824;

const int WGL_SWAPMULTIPLE_MAX = 16;

const int DIFFERENCE = 11;

const int SB_HORZ = 0;

const int SB_VERT = 1;

const int SB_CTL = 2;

const int SB_BOTH = 3;

const int SB_LINEUP = 0;

const int SB_LINELEFT = 0;

const int SB_LINEDOWN = 1;

const int SB_LINERIGHT = 1;

const int SB_PAGEUP = 2;

const int SB_PAGELEFT = 2;

const int SB_PAGEDOWN = 3;

const int SB_PAGERIGHT = 3;

const int SB_THUMBPOSITION = 4;

const int SB_THUMBTRACK = 5;

const int SB_TOP = 6;

const int SB_LEFT = 6;

const int SB_BOTTOM = 7;

const int SB_RIGHT = 7;

const int SB_ENDSCROLL = 8;

const int SW_HIDE = 0;

const int SW_SHOWNORMAL = 1;

const int SW_NORMAL = 1;

const int SW_SHOWMINIMIZED = 2;

const int SW_SHOWMAXIMIZED = 3;

const int SW_MAXIMIZE = 3;

const int SW_SHOWNOACTIVATE = 4;

const int SW_SHOW = 5;

const int SW_MINIMIZE = 6;

const int SW_SHOWMINNOACTIVE = 7;

const int SW_SHOWNA = 8;

const int SW_RESTORE = 9;

const int SW_SHOWDEFAULT = 10;

const int SW_FORCEMINIMIZE = 11;

const int SW_MAX = 11;

const int HIDE_WINDOW = 0;

const int SHOW_OPENWINDOW = 1;

const int SHOW_ICONWINDOW = 2;

const int SHOW_FULLSCREEN = 3;

const int SHOW_OPENNOACTIVATE = 4;

const int SW_PARENTCLOSING = 1;

const int SW_OTHERZOOM = 2;

const int SW_PARENTOPENING = 3;

const int SW_OTHERUNZOOM = 4;

const int AW_HOR_POSITIVE = 1;

const int AW_HOR_NEGATIVE = 2;

const int AW_VER_POSITIVE = 4;

const int AW_VER_NEGATIVE = 8;

const int AW_CENTER = 16;

const int AW_HIDE = 65536;

const int AW_ACTIVATE = 131072;

const int AW_SLIDE = 262144;

const int AW_BLEND = 524288;

const int KF_EXTENDED = 256;

const int KF_DLGMODE = 2048;

const int KF_MENUMODE = 4096;

const int KF_ALTDOWN = 8192;

const int KF_REPEAT = 16384;

const int KF_UP = 32768;

const int VK_LBUTTON = 1;

const int VK_RBUTTON = 2;

const int VK_CANCEL = 3;

const int VK_MBUTTON = 4;

const int VK_XBUTTON1 = 5;

const int VK_XBUTTON2 = 6;

const int VK_BACK = 8;

const int VK_TAB = 9;

const int VK_CLEAR = 12;

const int VK_RETURN = 13;

const int VK_SHIFT = 16;

const int VK_CONTROL = 17;

const int VK_MENU = 18;

const int VK_PAUSE = 19;

const int VK_CAPITAL = 20;

const int VK_KANA = 21;

const int VK_HANGEUL = 21;

const int VK_HANGUL = 21;

const int VK_IME_ON = 22;

const int VK_JUNJA = 23;

const int VK_FINAL = 24;

const int VK_HANJA = 25;

const int VK_KANJI = 25;

const int VK_IME_OFF = 26;

const int VK_ESCAPE = 27;

const int VK_CONVERT = 28;

const int VK_NONCONVERT = 29;

const int VK_ACCEPT = 30;

const int VK_MODECHANGE = 31;

const int VK_SPACE = 32;

const int VK_PRIOR = 33;

const int VK_NEXT = 34;

const int VK_END = 35;

const int VK_HOME = 36;

const int VK_LEFT = 37;

const int VK_UP = 38;

const int VK_RIGHT = 39;

const int VK_DOWN = 40;

const int VK_SELECT = 41;

const int VK_PRINT = 42;

const int VK_EXECUTE = 43;

const int VK_SNAPSHOT = 44;

const int VK_INSERT = 45;

const int VK_DELETE = 46;

const int VK_HELP = 47;

const int VK_LWIN = 91;

const int VK_RWIN = 92;

const int VK_APPS = 93;

const int VK_SLEEP = 95;

const int VK_NUMPAD0 = 96;

const int VK_NUMPAD1 = 97;

const int VK_NUMPAD2 = 98;

const int VK_NUMPAD3 = 99;

const int VK_NUMPAD4 = 100;

const int VK_NUMPAD5 = 101;

const int VK_NUMPAD6 = 102;

const int VK_NUMPAD7 = 103;

const int VK_NUMPAD8 = 104;

const int VK_NUMPAD9 = 105;

const int VK_MULTIPLY = 106;

const int VK_ADD = 107;

const int VK_SEPARATOR = 108;

const int VK_SUBTRACT = 109;

const int VK_DECIMAL = 110;

const int VK_DIVIDE = 111;

const int VK_F1 = 112;

const int VK_F2 = 113;

const int VK_F3 = 114;

const int VK_F4 = 115;

const int VK_F5 = 116;

const int VK_F6 = 117;

const int VK_F7 = 118;

const int VK_F8 = 119;

const int VK_F9 = 120;

const int VK_F10 = 121;

const int VK_F11 = 122;

const int VK_F12 = 123;

const int VK_F13 = 124;

const int VK_F14 = 125;

const int VK_F15 = 126;

const int VK_F16 = 127;

const int VK_F17 = 128;

const int VK_F18 = 129;

const int VK_F19 = 130;

const int VK_F20 = 131;

const int VK_F21 = 132;

const int VK_F22 = 133;

const int VK_F23 = 134;

const int VK_F24 = 135;

const int VK_NAVIGATION_VIEW = 136;

const int VK_NAVIGATION_MENU = 137;

const int VK_NAVIGATION_UP = 138;

const int VK_NAVIGATION_DOWN = 139;

const int VK_NAVIGATION_LEFT = 140;

const int VK_NAVIGATION_RIGHT = 141;

const int VK_NAVIGATION_ACCEPT = 142;

const int VK_NAVIGATION_CANCEL = 143;

const int VK_NUMLOCK = 144;

const int VK_SCROLL = 145;

const int VK_OEM_NEC_EQUAL = 146;

const int VK_OEM_FJ_JISHO = 146;

const int VK_OEM_FJ_MASSHOU = 147;

const int VK_OEM_FJ_TOUROKU = 148;

const int VK_OEM_FJ_LOYA = 149;

const int VK_OEM_FJ_ROYA = 150;

const int VK_LSHIFT = 160;

const int VK_RSHIFT = 161;

const int VK_LCONTROL = 162;

const int VK_RCONTROL = 163;

const int VK_LMENU = 164;

const int VK_RMENU = 165;

const int VK_BROWSER_BACK = 166;

const int VK_BROWSER_FORWARD = 167;

const int VK_BROWSER_REFRESH = 168;

const int VK_BROWSER_STOP = 169;

const int VK_BROWSER_SEARCH = 170;

const int VK_BROWSER_FAVORITES = 171;

const int VK_BROWSER_HOME = 172;

const int VK_VOLUME_MUTE = 173;

const int VK_VOLUME_DOWN = 174;

const int VK_VOLUME_UP = 175;

const int VK_MEDIA_NEXT_TRACK = 176;

const int VK_MEDIA_PREV_TRACK = 177;

const int VK_MEDIA_STOP = 178;

const int VK_MEDIA_PLAY_PAUSE = 179;

const int VK_LAUNCH_MAIL = 180;

const int VK_LAUNCH_MEDIA_SELECT = 181;

const int VK_LAUNCH_APP1 = 182;

const int VK_LAUNCH_APP2 = 183;

const int VK_OEM_1 = 186;

const int VK_OEM_PLUS = 187;

const int VK_OEM_COMMA = 188;

const int VK_OEM_MINUS = 189;

const int VK_OEM_PERIOD = 190;

const int VK_OEM_2 = 191;

const int VK_OEM_3 = 192;

const int VK_GAMEPAD_A = 195;

const int VK_GAMEPAD_B = 196;

const int VK_GAMEPAD_X = 197;

const int VK_GAMEPAD_Y = 198;

const int VK_GAMEPAD_RIGHT_SHOULDER = 199;

const int VK_GAMEPAD_LEFT_SHOULDER = 200;

const int VK_GAMEPAD_LEFT_TRIGGER = 201;

const int VK_GAMEPAD_RIGHT_TRIGGER = 202;

const int VK_GAMEPAD_DPAD_UP = 203;

const int VK_GAMEPAD_DPAD_DOWN = 204;

const int VK_GAMEPAD_DPAD_LEFT = 205;

const int VK_GAMEPAD_DPAD_RIGHT = 206;

const int VK_GAMEPAD_MENU = 207;

const int VK_GAMEPAD_VIEW = 208;

const int VK_GAMEPAD_LEFT_THUMBSTICK_BUTTON = 209;

const int VK_GAMEPAD_RIGHT_THUMBSTICK_BUTTON = 210;

const int VK_GAMEPAD_LEFT_THUMBSTICK_UP = 211;

const int VK_GAMEPAD_LEFT_THUMBSTICK_DOWN = 212;

const int VK_GAMEPAD_LEFT_THUMBSTICK_RIGHT = 213;

const int VK_GAMEPAD_LEFT_THUMBSTICK_LEFT = 214;

const int VK_GAMEPAD_RIGHT_THUMBSTICK_UP = 215;

const int VK_GAMEPAD_RIGHT_THUMBSTICK_DOWN = 216;

const int VK_GAMEPAD_RIGHT_THUMBSTICK_RIGHT = 217;

const int VK_GAMEPAD_RIGHT_THUMBSTICK_LEFT = 218;

const int VK_OEM_4 = 219;

const int VK_OEM_5 = 220;

const int VK_OEM_6 = 221;

const int VK_OEM_7 = 222;

const int VK_OEM_8 = 223;

const int VK_OEM_AX = 225;

const int VK_OEM_102 = 226;

const int VK_ICO_HELP = 227;

const int VK_ICO_00 = 228;

const int VK_PROCESSKEY = 229;

const int VK_ICO_CLEAR = 230;

const int VK_PACKET = 231;

const int VK_OEM_RESET = 233;

const int VK_OEM_JUMP = 234;

const int VK_OEM_PA1 = 235;

const int VK_OEM_PA2 = 236;

const int VK_OEM_PA3 = 237;

const int VK_OEM_WSCTRL = 238;

const int VK_OEM_CUSEL = 239;

const int VK_OEM_ATTN = 240;

const int VK_OEM_FINISH = 241;

const int VK_OEM_COPY = 242;

const int VK_OEM_AUTO = 243;

const int VK_OEM_ENLW = 244;

const int VK_OEM_BACKTAB = 245;

const int VK_ATTN = 246;

const int VK_CRSEL = 247;

const int VK_EXSEL = 248;

const int VK_EREOF = 249;

const int VK_PLAY = 250;

const int VK_ZOOM = 251;

const int VK_NONAME = 252;

const int VK_PA1 = 253;

const int VK_OEM_CLEAR = 254;

const int WH_MIN = -1;

const int WH_MSGFILTER = -1;

const int WH_JOURNALRECORD = 0;

const int WH_JOURNALPLAYBACK = 1;

const int WH_KEYBOARD = 2;

const int WH_GETMESSAGE = 3;

const int WH_CALLWNDPROC = 4;

const int WH_CBT = 5;

const int WH_SYSMSGFILTER = 6;

const int WH_MOUSE = 7;

const int WH_DEBUG = 9;

const int WH_SHELL = 10;

const int WH_FOREGROUNDIDLE = 11;

const int WH_CALLWNDPROCRET = 12;

const int WH_KEYBOARD_LL = 13;

const int WH_MOUSE_LL = 14;

const int WH_MAX = 14;

const int WH_MINHOOK = -1;

const int WH_MAXHOOK = 14;

const int HC_ACTION = 0;

const int HC_GETNEXT = 1;

const int HC_SKIP = 2;

const int HC_NOREMOVE = 3;

const int HC_NOREM = 3;

const int HC_SYSMODALON = 4;

const int HC_SYSMODALOFF = 5;

const int HCBT_MOVESIZE = 0;

const int HCBT_MINMAX = 1;

const int HCBT_QS = 2;

const int HCBT_CREATEWND = 3;

const int HCBT_DESTROYWND = 4;

const int HCBT_ACTIVATE = 5;

const int HCBT_CLICKSKIPPED = 6;

const int HCBT_KEYSKIPPED = 7;

const int HCBT_SYSCOMMAND = 8;

const int HCBT_SETFOCUS = 9;

const int WTS_CONSOLE_CONNECT = 1;

const int WTS_CONSOLE_DISCONNECT = 2;

const int WTS_REMOTE_CONNECT = 3;

const int WTS_REMOTE_DISCONNECT = 4;

const int WTS_SESSION_LOGON = 5;

const int WTS_SESSION_LOGOFF = 6;

const int WTS_SESSION_LOCK = 7;

const int WTS_SESSION_UNLOCK = 8;

const int WTS_SESSION_REMOTE_CONTROL = 9;

const int WTS_SESSION_CREATE = 10;

const int WTS_SESSION_TERMINATE = 11;

const int MSGF_DIALOGBOX = 0;

const int MSGF_MESSAGEBOX = 1;

const int MSGF_MENU = 2;

const int MSGF_SCROLLBAR = 5;

const int MSGF_NEXTWINDOW = 6;

const int MSGF_MAX = 8;

const int MSGF_USER = 4096;

const int HSHELL_WINDOWCREATED = 1;

const int HSHELL_WINDOWDESTROYED = 2;

const int HSHELL_ACTIVATESHELLWINDOW = 3;

const int HSHELL_WINDOWACTIVATED = 4;

const int HSHELL_GETMINRECT = 5;

const int HSHELL_REDRAW = 6;

const int HSHELL_TASKMAN = 7;

const int HSHELL_LANGUAGE = 8;

const int HSHELL_SYSMENU = 9;

const int HSHELL_ENDTASK = 10;

const int HSHELL_ACCESSIBILITYSTATE = 11;

const int HSHELL_APPCOMMAND = 12;

const int HSHELL_WINDOWREPLACED = 13;

const int HSHELL_WINDOWREPLACING = 14;

const int HSHELL_MONITORCHANGED = 16;

const int HSHELL_HIGHBIT = 32768;

const int HSHELL_FLASH = 32774;

const int HSHELL_RUDEAPPACTIVATED = 32772;

const int APPCOMMAND_BROWSER_BACKWARD = 1;

const int APPCOMMAND_BROWSER_FORWARD = 2;

const int APPCOMMAND_BROWSER_REFRESH = 3;

const int APPCOMMAND_BROWSER_STOP = 4;

const int APPCOMMAND_BROWSER_SEARCH = 5;

const int APPCOMMAND_BROWSER_FAVORITES = 6;

const int APPCOMMAND_BROWSER_HOME = 7;

const int APPCOMMAND_VOLUME_MUTE = 8;

const int APPCOMMAND_VOLUME_DOWN = 9;

const int APPCOMMAND_VOLUME_UP = 10;

const int APPCOMMAND_MEDIA_NEXTTRACK = 11;

const int APPCOMMAND_MEDIA_PREVIOUSTRACK = 12;

const int APPCOMMAND_MEDIA_STOP = 13;

const int APPCOMMAND_MEDIA_PLAY_PAUSE = 14;

const int APPCOMMAND_LAUNCH_MAIL = 15;

const int APPCOMMAND_LAUNCH_MEDIA_SELECT = 16;

const int APPCOMMAND_LAUNCH_APP1 = 17;

const int APPCOMMAND_LAUNCH_APP2 = 18;

const int APPCOMMAND_BASS_DOWN = 19;

const int APPCOMMAND_BASS_BOOST = 20;

const int APPCOMMAND_BASS_UP = 21;

const int APPCOMMAND_TREBLE_DOWN = 22;

const int APPCOMMAND_TREBLE_UP = 23;

const int APPCOMMAND_MICROPHONE_VOLUME_MUTE = 24;

const int APPCOMMAND_MICROPHONE_VOLUME_DOWN = 25;

const int APPCOMMAND_MICROPHONE_VOLUME_UP = 26;

const int APPCOMMAND_HELP = 27;

const int APPCOMMAND_FIND = 28;

const int APPCOMMAND_NEW = 29;

const int APPCOMMAND_OPEN = 30;

const int APPCOMMAND_CLOSE = 31;

const int APPCOMMAND_SAVE = 32;

const int APPCOMMAND_PRINT = 33;

const int APPCOMMAND_UNDO = 34;

const int APPCOMMAND_REDO = 35;

const int APPCOMMAND_COPY = 36;

const int APPCOMMAND_CUT = 37;

const int APPCOMMAND_PASTE = 38;

const int APPCOMMAND_REPLY_TO_MAIL = 39;

const int APPCOMMAND_FORWARD_MAIL = 40;

const int APPCOMMAND_SEND_MAIL = 41;

const int APPCOMMAND_SPELL_CHECK = 42;

const int APPCOMMAND_DICTATE_OR_COMMAND_CONTROL_TOGGLE = 43;

const int APPCOMMAND_MIC_ON_OFF_TOGGLE = 44;

const int APPCOMMAND_CORRECTION_LIST = 45;

const int APPCOMMAND_MEDIA_PLAY = 46;

const int APPCOMMAND_MEDIA_PAUSE = 47;

const int APPCOMMAND_MEDIA_RECORD = 48;

const int APPCOMMAND_MEDIA_FAST_FORWARD = 49;

const int APPCOMMAND_MEDIA_REWIND = 50;

const int APPCOMMAND_MEDIA_CHANNEL_UP = 51;

const int APPCOMMAND_MEDIA_CHANNEL_DOWN = 52;

const int APPCOMMAND_DELETE = 53;

const int APPCOMMAND_DWM_FLIP3D = 54;

const int FAPPCOMMAND_MOUSE = 32768;

const int FAPPCOMMAND_KEY = 0;

const int FAPPCOMMAND_OEM = 4096;

const int FAPPCOMMAND_MASK = 61440;

const int LLKHF_EXTENDED = 1;

const int LLKHF_INJECTED = 16;

const int LLKHF_ALTDOWN = 32;

const int LLKHF_UP = 128;

const int LLKHF_LOWER_IL_INJECTED = 2;

const int LLMHF_INJECTED = 1;

const int LLMHF_LOWER_IL_INJECTED = 2;

const int HKL_PREV = 0;

const int HKL_NEXT = 1;

const int KLF_ACTIVATE = 1;

const int KLF_SUBSTITUTE_OK = 2;

const int KLF_REORDER = 8;

const int KLF_REPLACELANG = 16;

const int KLF_NOTELLSHELL = 128;

const int KLF_SETFORPROCESS = 256;

const int KLF_SHIFTLOCK = 65536;

const int KLF_RESET = 1073741824;

const int INPUTLANGCHANGE_SYSCHARSET = 1;

const int INPUTLANGCHANGE_FORWARD = 2;

const int INPUTLANGCHANGE_BACKWARD = 4;

const int KL_NAMELENGTH = 9;

const int GMMP_USE_DISPLAY_POINTS = 1;

const int GMMP_USE_HIGH_RESOLUTION_POINTS = 2;

const int DESKTOP_READOBJECTS = 1;

const int DESKTOP_CREATEWINDOW = 2;

const int DESKTOP_CREATEMENU = 4;

const int DESKTOP_HOOKCONTROL = 8;

const int DESKTOP_JOURNALRECORD = 16;

const int DESKTOP_JOURNALPLAYBACK = 32;

const int DESKTOP_ENUMERATE = 64;

const int DESKTOP_WRITEOBJECTS = 128;

const int DESKTOP_SWITCHDESKTOP = 256;

const int DF_ALLOWOTHERACCOUNTHOOK = 1;

const int WINSTA_ENUMDESKTOPS = 1;

const int WINSTA_READATTRIBUTES = 2;

const int WINSTA_ACCESSCLIPBOARD = 4;

const int WINSTA_CREATEDESKTOP = 8;

const int WINSTA_WRITEATTRIBUTES = 16;

const int WINSTA_ACCESSGLOBALATOMS = 32;

const int WINSTA_EXITWINDOWS = 64;

const int WINSTA_ENUMERATE = 256;

const int WINSTA_READSCREEN = 512;

const int WINSTA_ALL_ACCESS = 895;

const int CWF_CREATE_ONLY = 1;

const int WSF_VISIBLE = 1;

const int UOI_FLAGS = 1;

const int UOI_NAME = 2;

const int UOI_TYPE = 3;

const int UOI_USER_SID = 4;

const int UOI_HEAPSIZE = 5;

const int UOI_IO = 6;

const int UOI_TIMERPROC_EXCEPTION_SUPPRESSION = 7;

const int GWL_STYLE = -16;

const int GWL_EXSTYLE = -20;

const int GWL_ID = -12;

const int GWLP_WNDPROC = -4;

const int GWLP_HINSTANCE = -6;

const int GWLP_HWNDPARENT = -8;

const int GWLP_USERDATA = -21;

const int GWLP_ID = -12;

const int GCL_CBWNDEXTRA = -18;

const int GCL_CBCLSEXTRA = -20;

const int GCL_STYLE = -26;

const int GCW_ATOM = -32;

const int GCLP_MENUNAME = -8;

const int GCLP_HBRBACKGROUND = -10;

const int GCLP_HCURSOR = -12;

const int GCLP_HICON = -14;

const int GCLP_HMODULE = -16;

const int GCLP_WNDPROC = -24;

const int GCLP_HICONSM = -34;

const int WM_NULL = 0;

const int WM_CREATE = 1;

const int WM_DESTROY = 2;

const int WM_MOVE = 3;

const int WM_SIZE = 5;

const int WM_ACTIVATE = 6;

const int WA_INACTIVE = 0;

const int WA_ACTIVE = 1;

const int WA_CLICKACTIVE = 2;

const int WM_SETFOCUS = 7;

const int WM_KILLFOCUS = 8;

const int WM_ENABLE = 10;

const int WM_SETREDRAW = 11;

const int WM_SETTEXT = 12;

const int WM_GETTEXT = 13;

const int WM_GETTEXTLENGTH = 14;

const int WM_PAINT = 15;

const int WM_CLOSE = 16;

const int WM_QUERYENDSESSION = 17;

const int WM_QUERYOPEN = 19;

const int WM_ENDSESSION = 22;

const int WM_QUIT = 18;

const int WM_ERASEBKGND = 20;

const int WM_SYSCOLORCHANGE = 21;

const int WM_SHOWWINDOW = 24;

const int WM_WININICHANGE = 26;

const int WM_SETTINGCHANGE = 26;

const int WM_DEVMODECHANGE = 27;

const int WM_ACTIVATEAPP = 28;

const int WM_FONTCHANGE = 29;

const int WM_TIMECHANGE = 30;

const int WM_CANCELMODE = 31;

const int WM_SETCURSOR = 32;

const int WM_MOUSEACTIVATE = 33;

const int WM_CHILDACTIVATE = 34;

const int WM_QUEUESYNC = 35;

const int WM_GETMINMAXINFO = 36;

const int WM_PAINTICON = 38;

const int WM_ICONERASEBKGND = 39;

const int WM_NEXTDLGCTL = 40;

const int WM_SPOOLERSTATUS = 42;

const int WM_DRAWITEM = 43;

const int WM_MEASUREITEM = 44;

const int WM_DELETEITEM = 45;

const int WM_VKEYTOITEM = 46;

const int WM_CHARTOITEM = 47;

const int WM_SETFONT = 48;

const int WM_GETFONT = 49;

const int WM_SETHOTKEY = 50;

const int WM_GETHOTKEY = 51;

const int WM_QUERYDRAGICON = 55;

const int WM_COMPAREITEM = 57;

const int WM_GETOBJECT = 61;

const int WM_COMPACTING = 65;

const int WM_COMMNOTIFY = 68;

const int WM_WINDOWPOSCHANGING = 70;

const int WM_WINDOWPOSCHANGED = 71;

const int WM_POWER = 72;

const int PWR_OK = 1;

const int PWR_FAIL = -1;

const int PWR_SUSPENDREQUEST = 1;

const int PWR_SUSPENDRESUME = 2;

const int PWR_CRITICALRESUME = 3;

const int WM_COPYDATA = 74;

const int WM_CANCELJOURNAL = 75;

const int WM_NOTIFY = 78;

const int WM_INPUTLANGCHANGEREQUEST = 80;

const int WM_INPUTLANGCHANGE = 81;

const int WM_TCARD = 82;

const int WM_HELP = 83;

const int WM_USERCHANGED = 84;

const int WM_NOTIFYFORMAT = 85;

const int NFR_ANSI = 1;

const int NFR_UNICODE = 2;

const int NF_QUERY = 3;

const int NF_REQUERY = 4;

const int WM_CONTEXTMENU = 123;

const int WM_STYLECHANGING = 124;

const int WM_STYLECHANGED = 125;

const int WM_DISPLAYCHANGE = 126;

const int WM_GETICON = 127;

const int WM_SETICON = 128;

const int WM_NCCREATE = 129;

const int WM_NCDESTROY = 130;

const int WM_NCCALCSIZE = 131;

const int WM_NCHITTEST = 132;

const int WM_NCPAINT = 133;

const int WM_NCACTIVATE = 134;

const int WM_GETDLGCODE = 135;

const int WM_SYNCPAINT = 136;

const int WM_NCMOUSEMOVE = 160;

const int WM_NCLBUTTONDOWN = 161;

const int WM_NCLBUTTONUP = 162;

const int WM_NCLBUTTONDBLCLK = 163;

const int WM_NCRBUTTONDOWN = 164;

const int WM_NCRBUTTONUP = 165;

const int WM_NCRBUTTONDBLCLK = 166;

const int WM_NCMBUTTONDOWN = 167;

const int WM_NCMBUTTONUP = 168;

const int WM_NCMBUTTONDBLCLK = 169;

const int WM_NCXBUTTONDOWN = 171;

const int WM_NCXBUTTONUP = 172;

const int WM_NCXBUTTONDBLCLK = 173;

const int WM_INPUT_DEVICE_CHANGE = 254;

const int WM_INPUT = 255;

const int WM_KEYFIRST = 256;

const int WM_KEYDOWN = 256;

const int WM_KEYUP = 257;

const int WM_CHAR = 258;

const int WM_DEADCHAR = 259;

const int WM_SYSKEYDOWN = 260;

const int WM_SYSKEYUP = 261;

const int WM_SYSCHAR = 262;

const int WM_SYSDEADCHAR = 263;

const int WM_UNICHAR = 265;

const int WM_KEYLAST = 265;

const int UNICODE_NOCHAR = 65535;

const int WM_IME_STARTCOMPOSITION = 269;

const int WM_IME_ENDCOMPOSITION = 270;

const int WM_IME_COMPOSITION = 271;

const int WM_IME_KEYLAST = 271;

const int WM_INITDIALOG = 272;

const int WM_COMMAND = 273;

const int WM_SYSCOMMAND = 274;

const int WM_TIMER = 275;

const int WM_HSCROLL = 276;

const int WM_VSCROLL = 277;

const int WM_INITMENU = 278;

const int WM_INITMENUPOPUP = 279;

const int WM_GESTURE = 281;

const int WM_GESTURENOTIFY = 282;

const int WM_MENUSELECT = 287;

const int WM_MENUCHAR = 288;

const int WM_ENTERIDLE = 289;

const int WM_MENURBUTTONUP = 290;

const int WM_MENUDRAG = 291;

const int WM_MENUGETOBJECT = 292;

const int WM_UNINITMENUPOPUP = 293;

const int WM_MENUCOMMAND = 294;

const int WM_CHANGEUISTATE = 295;

const int WM_UPDATEUISTATE = 296;

const int WM_QUERYUISTATE = 297;

const int UIS_SET = 1;

const int UIS_CLEAR = 2;

const int UIS_INITIALIZE = 3;

const int UISF_HIDEFOCUS = 1;

const int UISF_HIDEACCEL = 2;

const int UISF_ACTIVE = 4;

const int WM_CTLCOLORMSGBOX = 306;

const int WM_CTLCOLOREDIT = 307;

const int WM_CTLCOLORLISTBOX = 308;

const int WM_CTLCOLORBTN = 309;

const int WM_CTLCOLORDLG = 310;

const int WM_CTLCOLORSCROLLBAR = 311;

const int WM_CTLCOLORSTATIC = 312;

const int MN_GETHMENU = 481;

const int WM_MOUSEFIRST = 512;

const int WM_MOUSEMOVE = 512;

const int WM_LBUTTONDOWN = 513;

const int WM_LBUTTONUP = 514;

const int WM_LBUTTONDBLCLK = 515;

const int WM_RBUTTONDOWN = 516;

const int WM_RBUTTONUP = 517;

const int WM_RBUTTONDBLCLK = 518;

const int WM_MBUTTONDOWN = 519;

const int WM_MBUTTONUP = 520;

const int WM_MBUTTONDBLCLK = 521;

const int WM_MOUSEWHEEL = 522;

const int WM_XBUTTONDOWN = 523;

const int WM_XBUTTONUP = 524;

const int WM_XBUTTONDBLCLK = 525;

const int WM_MOUSEHWHEEL = 526;

const int WM_MOUSELAST = 526;

const int WHEEL_DELTA = 120;

const int WHEEL_PAGESCROLL = 4294967295;

const int XBUTTON1 = 1;

const int XBUTTON2 = 2;

const int WM_PARENTNOTIFY = 528;

const int WM_ENTERMENULOOP = 529;

const int WM_EXITMENULOOP = 530;

const int WM_NEXTMENU = 531;

const int WM_SIZING = 532;

const int WM_CAPTURECHANGED = 533;

const int WM_MOVING = 534;

const int WM_POWERBROADCAST = 536;

const int PBT_APMQUERYSUSPEND = 0;

const int PBT_APMQUERYSTANDBY = 1;

const int PBT_APMQUERYSUSPENDFAILED = 2;

const int PBT_APMQUERYSTANDBYFAILED = 3;

const int PBT_APMSUSPEND = 4;

const int PBT_APMSTANDBY = 5;

const int PBT_APMRESUMECRITICAL = 6;

const int PBT_APMRESUMESUSPEND = 7;

const int PBT_APMRESUMESTANDBY = 8;

const int PBTF_APMRESUMEFROMFAILURE = 1;

const int PBT_APMBATTERYLOW = 9;

const int PBT_APMPOWERSTATUSCHANGE = 10;

const int PBT_APMOEMEVENT = 11;

const int PBT_APMRESUMEAUTOMATIC = 18;

const int PBT_POWERSETTINGCHANGE = 32787;

const int WM_DEVICECHANGE = 537;

const int WM_MDICREATE = 544;

const int WM_MDIDESTROY = 545;

const int WM_MDIACTIVATE = 546;

const int WM_MDIRESTORE = 547;

const int WM_MDINEXT = 548;

const int WM_MDIMAXIMIZE = 549;

const int WM_MDITILE = 550;

const int WM_MDICASCADE = 551;

const int WM_MDIICONARRANGE = 552;

const int WM_MDIGETACTIVE = 553;

const int WM_MDISETMENU = 560;

const int WM_ENTERSIZEMOVE = 561;

const int WM_EXITSIZEMOVE = 562;

const int WM_DROPFILES = 563;

const int WM_MDIREFRESHMENU = 564;

const int WM_POINTERDEVICECHANGE = 568;

const int WM_POINTERDEVICEINRANGE = 569;

const int WM_POINTERDEVICEOUTOFRANGE = 570;

const int WM_TOUCH = 576;

const int WM_NCPOINTERUPDATE = 577;

const int WM_NCPOINTERDOWN = 578;

const int WM_NCPOINTERUP = 579;

const int WM_POINTERUPDATE = 581;

const int WM_POINTERDOWN = 582;

const int WM_POINTERUP = 583;

const int WM_POINTERENTER = 585;

const int WM_POINTERLEAVE = 586;

const int WM_POINTERACTIVATE = 587;

const int WM_POINTERCAPTURECHANGED = 588;

const int WM_TOUCHHITTESTING = 589;

const int WM_POINTERWHEEL = 590;

const int WM_POINTERHWHEEL = 591;

const int DM_POINTERHITTEST = 592;

const int WM_POINTERROUTEDTO = 593;

const int WM_POINTERROUTEDAWAY = 594;

const int WM_POINTERROUTEDRELEASED = 595;

const int WM_IME_SETCONTEXT = 641;

const int WM_IME_NOTIFY = 642;

const int WM_IME_CONTROL = 643;

const int WM_IME_COMPOSITIONFULL = 644;

const int WM_IME_SELECT = 645;

const int WM_IME_CHAR = 646;

const int WM_IME_REQUEST = 648;

const int WM_IME_KEYDOWN = 656;

const int WM_IME_KEYUP = 657;

const int WM_MOUSEHOVER = 673;

const int WM_MOUSELEAVE = 675;

const int WM_NCMOUSEHOVER = 672;

const int WM_NCMOUSELEAVE = 674;

const int WM_WTSSESSION_CHANGE = 689;

const int WM_TABLET_FIRST = 704;

const int WM_TABLET_LAST = 735;

const int WM_DPICHANGED = 736;

const int WM_DPICHANGED_BEFOREPARENT = 738;

const int WM_DPICHANGED_AFTERPARENT = 739;

const int WM_GETDPISCALEDSIZE = 740;

const int WM_CUT = 768;

const int WM_COPY = 769;

const int WM_PASTE = 770;

const int WM_CLEAR = 771;

const int WM_UNDO = 772;

const int WM_RENDERFORMAT = 773;

const int WM_RENDERALLFORMATS = 774;

const int WM_DESTROYCLIPBOARD = 775;

const int WM_DRAWCLIPBOARD = 776;

const int WM_PAINTCLIPBOARD = 777;

const int WM_VSCROLLCLIPBOARD = 778;

const int WM_SIZECLIPBOARD = 779;

const int WM_ASKCBFORMATNAME = 780;

const int WM_CHANGECBCHAIN = 781;

const int WM_HSCROLLCLIPBOARD = 782;

const int WM_QUERYNEWPALETTE = 783;

const int WM_PALETTEISCHANGING = 784;

const int WM_PALETTECHANGED = 785;

const int WM_HOTKEY = 786;

const int WM_PRINT = 791;

const int WM_PRINTCLIENT = 792;

const int WM_APPCOMMAND = 793;

const int WM_THEMECHANGED = 794;

const int WM_CLIPBOARDUPDATE = 797;

const int WM_DWMCOMPOSITIONCHANGED = 798;

const int WM_DWMNCRENDERINGCHANGED = 799;

const int WM_DWMCOLORIZATIONCOLORCHANGED = 800;

const int WM_DWMWINDOWMAXIMIZEDCHANGE = 801;

const int WM_DWMSENDICONICTHUMBNAIL = 803;

const int WM_DWMSENDICONICLIVEPREVIEWBITMAP = 806;

const int WM_GETTITLEBARINFOEX = 831;

const int WM_HANDHELDFIRST = 856;

const int WM_HANDHELDLAST = 863;

const int WM_AFXFIRST = 864;

const int WM_AFXLAST = 895;

const int WM_PENWINFIRST = 896;

const int WM_PENWINLAST = 911;

const int WM_APP = 32768;

const int WM_USER = 1024;

const int WMSZ_LEFT = 1;

const int WMSZ_RIGHT = 2;

const int WMSZ_TOP = 3;

const int WMSZ_TOPLEFT = 4;

const int WMSZ_TOPRIGHT = 5;

const int WMSZ_BOTTOM = 6;

const int WMSZ_BOTTOMLEFT = 7;

const int WMSZ_BOTTOMRIGHT = 8;

const int HTERROR = -2;

const int HTTRANSPARENT = -1;

const int HTNOWHERE = 0;

const int HTCLIENT = 1;

const int HTCAPTION = 2;

const int HTSYSMENU = 3;

const int HTGROWBOX = 4;

const int HTSIZE = 4;

const int HTMENU = 5;

const int HTHSCROLL = 6;

const int HTVSCROLL = 7;

const int HTMINBUTTON = 8;

const int HTMAXBUTTON = 9;

const int HTLEFT = 10;

const int HTRIGHT = 11;

const int HTTOP = 12;

const int HTTOPLEFT = 13;

const int HTTOPRIGHT = 14;

const int HTBOTTOM = 15;

const int HTBOTTOMLEFT = 16;

const int HTBOTTOMRIGHT = 17;

const int HTBORDER = 18;

const int HTREDUCE = 8;

const int HTZOOM = 9;

const int HTSIZEFIRST = 10;

const int HTSIZELAST = 17;

const int HTOBJECT = 19;

const int HTCLOSE = 20;

const int HTHELP = 21;

const int SMTO_NORMAL = 0;

const int SMTO_BLOCK = 1;

const int SMTO_ABORTIFHUNG = 2;

const int SMTO_NOTIMEOUTIFNOTHUNG = 8;

const int SMTO_ERRORONEXIT = 32;

const int MA_ACTIVATE = 1;

const int MA_ACTIVATEANDEAT = 2;

const int MA_NOACTIVATE = 3;

const int MA_NOACTIVATEANDEAT = 4;

const int ICON_SMALL = 0;

const int ICON_BIG = 1;

const int ICON_SMALL2 = 2;

const int SIZE_RESTORED = 0;

const int SIZE_MINIMIZED = 1;

const int SIZE_MAXIMIZED = 2;

const int SIZE_MAXSHOW = 3;

const int SIZE_MAXHIDE = 4;

const int SIZENORMAL = 0;

const int SIZEICONIC = 1;

const int SIZEFULLSCREEN = 2;

const int SIZEZOOMSHOW = 3;

const int SIZEZOOMHIDE = 4;

const int WVR_ALIGNTOP = 16;

const int WVR_ALIGNLEFT = 32;

const int WVR_ALIGNBOTTOM = 64;

const int WVR_ALIGNRIGHT = 128;

const int WVR_HREDRAW = 256;

const int WVR_VREDRAW = 512;

const int WVR_REDRAW = 768;

const int WVR_VALIDRECTS = 1024;

const int MK_LBUTTON = 1;

const int MK_RBUTTON = 2;

const int MK_SHIFT = 4;

const int MK_CONTROL = 8;

const int MK_MBUTTON = 16;

const int MK_XBUTTON1 = 32;

const int MK_XBUTTON2 = 64;

const int TME_HOVER = 1;

const int TME_LEAVE = 2;

const int TME_NONCLIENT = 16;

const int TME_QUERY = 1073741824;

const int TME_CANCEL = 2147483648;

const int HOVER_DEFAULT = 4294967295;

const int WS_OVERLAPPED = 0;

const int WS_POPUP = 2147483648;

const int WS_CHILD = 1073741824;

const int WS_MINIMIZE = 536870912;

const int WS_VISIBLE = 268435456;

const int WS_DISABLED = 134217728;

const int WS_CLIPSIBLINGS = 67108864;

const int WS_CLIPCHILDREN = 33554432;

const int WS_MAXIMIZE = 16777216;

const int WS_CAPTION = 12582912;

const int WS_BORDER = 8388608;

const int WS_DLGFRAME = 4194304;

const int WS_VSCROLL = 2097152;

const int WS_HSCROLL = 1048576;

const int WS_SYSMENU = 524288;

const int WS_THICKFRAME = 262144;

const int WS_GROUP = 131072;

const int WS_TABSTOP = 65536;

const int WS_MINIMIZEBOX = 131072;

const int WS_MAXIMIZEBOX = 65536;

const int WS_TILED = 0;

const int WS_ICONIC = 536870912;

const int WS_SIZEBOX = 262144;

const int WS_TILEDWINDOW = 13565952;

const int WS_OVERLAPPEDWINDOW = 13565952;

const int WS_POPUPWINDOW = 2156396544;

const int WS_CHILDWINDOW = 1073741824;

const int WS_EX_DLGMODALFRAME = 1;

const int WS_EX_NOPARENTNOTIFY = 4;

const int WS_EX_TOPMOST = 8;

const int WS_EX_ACCEPTFILES = 16;

const int WS_EX_TRANSPARENT = 32;

const int WS_EX_MDICHILD = 64;

const int WS_EX_TOOLWINDOW = 128;

const int WS_EX_WINDOWEDGE = 256;

const int WS_EX_CLIENTEDGE = 512;

const int WS_EX_CONTEXTHELP = 1024;

const int WS_EX_RIGHT = 4096;

const int WS_EX_LEFT = 0;

const int WS_EX_RTLREADING = 8192;

const int WS_EX_LTRREADING = 0;

const int WS_EX_LEFTSCROLLBAR = 16384;

const int WS_EX_RIGHTSCROLLBAR = 0;

const int WS_EX_CONTROLPARENT = 65536;

const int WS_EX_STATICEDGE = 131072;

const int WS_EX_APPWINDOW = 262144;

const int WS_EX_OVERLAPPEDWINDOW = 768;

const int WS_EX_PALETTEWINDOW = 392;

const int WS_EX_LAYERED = 524288;

const int WS_EX_NOINHERITLAYOUT = 1048576;

const int WS_EX_NOREDIRECTIONBITMAP = 2097152;

const int WS_EX_LAYOUTRTL = 4194304;

const int WS_EX_COMPOSITED = 33554432;

const int WS_EX_NOACTIVATE = 134217728;

const int CS_VREDRAW = 1;

const int CS_HREDRAW = 2;

const int CS_DBLCLKS = 8;

const int CS_OWNDC = 32;

const int CS_CLASSDC = 64;

const int CS_PARENTDC = 128;

const int CS_NOCLOSE = 512;

const int CS_SAVEBITS = 2048;

const int CS_BYTEALIGNCLIENT = 4096;

const int CS_BYTEALIGNWINDOW = 8192;

const int CS_GLOBALCLASS = 16384;

const int CS_IME = 65536;

const int CS_DROPSHADOW = 131072;

const int PRF_CHECKVISIBLE = 1;

const int PRF_NONCLIENT = 2;

const int PRF_CLIENT = 4;

const int PRF_ERASEBKGND = 8;

const int PRF_CHILDREN = 16;

const int PRF_OWNED = 32;

const int BDR_RAISEDOUTER = 1;

const int BDR_SUNKENOUTER = 2;

const int BDR_RAISEDINNER = 4;

const int BDR_SUNKENINNER = 8;

const int BDR_OUTER = 3;

const int BDR_INNER = 12;

const int BDR_RAISED = 5;

const int BDR_SUNKEN = 10;

const int EDGE_RAISED = 5;

const int EDGE_SUNKEN = 10;

const int EDGE_ETCHED = 6;

const int EDGE_BUMP = 9;

const int BF_LEFT = 1;

const int BF_TOP = 2;

const int BF_RIGHT = 4;

const int BF_BOTTOM = 8;

const int BF_TOPLEFT = 3;

const int BF_TOPRIGHT = 6;

const int BF_BOTTOMLEFT = 9;

const int BF_BOTTOMRIGHT = 12;

const int BF_RECT = 15;

const int BF_DIAGONAL = 16;

const int BF_DIAGONAL_ENDTOPRIGHT = 22;

const int BF_DIAGONAL_ENDTOPLEFT = 19;

const int BF_DIAGONAL_ENDBOTTOMLEFT = 25;

const int BF_DIAGONAL_ENDBOTTOMRIGHT = 28;

const int BF_MIDDLE = 2048;

const int BF_SOFT = 4096;

const int BF_ADJUST = 8192;

const int BF_FLAT = 16384;

const int BF_MONO = 32768;

const int DFC_CAPTION = 1;

const int DFC_MENU = 2;

const int DFC_SCROLL = 3;

const int DFC_BUTTON = 4;

const int DFC_POPUPMENU = 5;

const int DFCS_CAPTIONCLOSE = 0;

const int DFCS_CAPTIONMIN = 1;

const int DFCS_CAPTIONMAX = 2;

const int DFCS_CAPTIONRESTORE = 3;

const int DFCS_CAPTIONHELP = 4;

const int DFCS_MENUARROW = 0;

const int DFCS_MENUCHECK = 1;

const int DFCS_MENUBULLET = 2;

const int DFCS_MENUARROWRIGHT = 4;

const int DFCS_SCROLLUP = 0;

const int DFCS_SCROLLDOWN = 1;

const int DFCS_SCROLLLEFT = 2;

const int DFCS_SCROLLRIGHT = 3;

const int DFCS_SCROLLCOMBOBOX = 5;

const int DFCS_SCROLLSIZEGRIP = 8;

const int DFCS_SCROLLSIZEGRIPRIGHT = 16;

const int DFCS_BUTTONCHECK = 0;

const int DFCS_BUTTONRADIOIMAGE = 1;

const int DFCS_BUTTONRADIOMASK = 2;

const int DFCS_BUTTONRADIO = 4;

const int DFCS_BUTTON3STATE = 8;

const int DFCS_BUTTONPUSH = 16;

const int DFCS_INACTIVE = 256;

const int DFCS_PUSHED = 512;

const int DFCS_CHECKED = 1024;

const int DFCS_TRANSPARENT = 2048;

const int DFCS_HOT = 4096;

const int DFCS_ADJUSTRECT = 8192;

const int DFCS_FLAT = 16384;

const int DFCS_MONO = 32768;

const int DC_ACTIVE = 1;

const int DC_SMALLCAP = 2;

const int DC_ICON = 4;

const int DC_TEXT = 8;

const int DC_INBUTTON = 16;

const int DC_GRADIENT = 32;

const int DC_BUTTONS = 4096;

const int IDANI_OPEN = 1;

const int IDANI_CAPTION = 3;

const int CF_TEXT = 1;

const int CF_BITMAP = 2;

const int CF_METAFILEPICT = 3;

const int CF_SYLK = 4;

const int CF_DIF = 5;

const int CF_TIFF = 6;

const int CF_OEMTEXT = 7;

const int CF_DIB = 8;

const int CF_PALETTE = 9;

const int CF_PENDATA = 10;

const int CF_RIFF = 11;

const int CF_WAVE = 12;

const int CF_UNICODETEXT = 13;

const int CF_ENHMETAFILE = 14;

const int CF_HDROP = 15;

const int CF_LOCALE = 16;

const int CF_DIBV5 = 17;

const int CF_MAX = 18;

const int CF_OWNERDISPLAY = 128;

const int CF_DSPTEXT = 129;

const int CF_DSPBITMAP = 130;

const int CF_DSPMETAFILEPICT = 131;

const int CF_DSPENHMETAFILE = 142;

const int CF_PRIVATEFIRST = 512;

const int CF_PRIVATELAST = 767;

const int CF_GDIOBJFIRST = 768;

const int CF_GDIOBJLAST = 1023;

const int FVIRTKEY = 1;

const int FNOINVERT = 2;

const int FSHIFT = 4;

const int FCONTROL = 8;

const int FALT = 16;

const int WPF_SETMINPOSITION = 1;

const int WPF_RESTORETOMAXIMIZED = 2;

const int WPF_ASYNCWINDOWPLACEMENT = 4;

const int ODT_MENU = 1;

const int ODT_LISTBOX = 2;

const int ODT_COMBOBOX = 3;

const int ODT_BUTTON = 4;

const int ODT_STATIC = 5;

const int ODA_DRAWENTIRE = 1;

const int ODA_SELECT = 2;

const int ODA_FOCUS = 4;

const int ODS_SELECTED = 1;

const int ODS_GRAYED = 2;

const int ODS_DISABLED = 4;

const int ODS_CHECKED = 8;

const int ODS_FOCUS = 16;

const int ODS_DEFAULT = 32;

const int ODS_COMBOBOXEDIT = 4096;

const int ODS_HOTLIGHT = 64;

const int ODS_INACTIVE = 128;

const int ODS_NOACCEL = 256;

const int ODS_NOFOCUSRECT = 512;

const int PM_NOREMOVE = 0;

const int PM_REMOVE = 1;

const int PM_NOYIELD = 2;

const int PM_QS_INPUT = 470220800;

const int PM_QS_POSTMESSAGE = 9961472;

const int PM_QS_PAINT = 2097152;

const int PM_QS_SENDMESSAGE = 4194304;

const int MOD_ALT = 1;

const int MOD_CONTROL = 2;

const int MOD_SHIFT = 4;

const int MOD_WIN = 8;

const int MOD_NOREPEAT = 16384;

const int IDHOT_SNAPWINDOW = -1;

const int IDHOT_SNAPDESKTOP = -2;

const int ENDSESSION_CLOSEAPP = 1;

const int ENDSESSION_CRITICAL = 1073741824;

const int ENDSESSION_LOGOFF = 2147483648;

const int EWX_LOGOFF = 0;

const int EWX_SHUTDOWN = 1;

const int EWX_REBOOT = 2;

const int EWX_FORCE = 4;

const int EWX_POWEROFF = 8;

const int EWX_FORCEIFHUNG = 16;

const int EWX_QUICKRESOLVE = 32;

const int EWX_RESTARTAPPS = 64;

const int EWX_HYBRID_SHUTDOWN = 4194304;

const int EWX_BOOTOPTIONS = 16777216;

const int EWX_ARSO = 67108864;

const int BSM_ALLCOMPONENTS = 0;

const int BSM_VXDS = 1;

const int BSM_NETDRIVER = 2;

const int BSM_INSTALLABLEDRIVERS = 4;

const int BSM_APPLICATIONS = 8;

const int BSM_ALLDESKTOPS = 16;

const int BSF_QUERY = 1;

const int BSF_IGNORECURRENTTASK = 2;

const int BSF_FLUSHDISK = 4;

const int BSF_NOHANG = 8;

const int BSF_POSTMESSAGE = 16;

const int BSF_FORCEIFHUNG = 32;

const int BSF_NOTIMEOUTIFNOTHUNG = 64;

const int BSF_ALLOWSFW = 128;

const int BSF_SENDNOTIFYMESSAGE = 256;

const int BSF_RETURNHDESK = 512;

const int BSF_LUID = 1024;

const int BROADCAST_QUERY_DENY = 1112363332;

const int DEVICE_NOTIFY_WINDOW_HANDLE = 0;

const int DEVICE_NOTIFY_SERVICE_HANDLE = 1;

const int DEVICE_NOTIFY_ALL_INTERFACE_CLASSES = 4;

const int ISMEX_NOSEND = 0;

const int ISMEX_SEND = 1;

const int ISMEX_NOTIFY = 2;

const int ISMEX_CALLBACK = 4;

const int ISMEX_REPLIED = 8;

const int CW_USEDEFAULT = -2147483648;

const int PW_CLIENTONLY = 1;

const int PW_RENDERFULLCONTENT = 2;

const int LWA_COLORKEY = 1;

const int LWA_ALPHA = 2;

const int ULW_COLORKEY = 1;

const int ULW_ALPHA = 2;

const int ULW_OPAQUE = 4;

const int ULW_EX_NORESIZE = 8;

const int FLASHW_STOP = 0;

const int FLASHW_CAPTION = 1;

const int FLASHW_TRAY = 2;

const int FLASHW_ALL = 3;

const int FLASHW_TIMER = 4;

const int FLASHW_TIMERNOFG = 12;

const int WDA_NONE = 0;

const int WDA_MONITOR = 1;

const int WDA_EXCLUDEFROMCAPTURE = 17;

const int SWP_NOSIZE = 1;

const int SWP_NOMOVE = 2;

const int SWP_NOZORDER = 4;

const int SWP_NOREDRAW = 8;

const int SWP_NOACTIVATE = 16;

const int SWP_FRAMECHANGED = 32;

const int SWP_SHOWWINDOW = 64;

const int SWP_HIDEWINDOW = 128;

const int SWP_NOCOPYBITS = 256;

const int SWP_NOOWNERZORDER = 512;

const int SWP_NOSENDCHANGING = 1024;

const int SWP_DRAWFRAME = 32;

const int SWP_NOREPOSITION = 512;

const int SWP_DEFERERASE = 8192;

const int SWP_ASYNCWINDOWPOS = 16384;

const int DLGWINDOWEXTRA = 30;

const int KEYEVENTF_EXTENDEDKEY = 1;

const int KEYEVENTF_KEYUP = 2;

const int KEYEVENTF_UNICODE = 4;

const int KEYEVENTF_SCANCODE = 8;

const int MOUSEEVENTF_MOVE = 1;

const int MOUSEEVENTF_LEFTDOWN = 2;

const int MOUSEEVENTF_LEFTUP = 4;

const int MOUSEEVENTF_RIGHTDOWN = 8;

const int MOUSEEVENTF_RIGHTUP = 16;

const int MOUSEEVENTF_MIDDLEDOWN = 32;

const int MOUSEEVENTF_MIDDLEUP = 64;

const int MOUSEEVENTF_XDOWN = 128;

const int MOUSEEVENTF_XUP = 256;

const int MOUSEEVENTF_WHEEL = 2048;

const int MOUSEEVENTF_HWHEEL = 4096;

const int MOUSEEVENTF_MOVE_NOCOALESCE = 8192;

const int MOUSEEVENTF_VIRTUALDESK = 16384;

const int MOUSEEVENTF_ABSOLUTE = 32768;

const int INPUT_MOUSE = 0;

const int INPUT_KEYBOARD = 1;

const int INPUT_HARDWARE = 2;

const int TOUCHEVENTF_MOVE = 1;

const int TOUCHEVENTF_DOWN = 2;

const int TOUCHEVENTF_UP = 4;

const int TOUCHEVENTF_INRANGE = 8;

const int TOUCHEVENTF_PRIMARY = 16;

const int TOUCHEVENTF_NOCOALESCE = 32;

const int TOUCHEVENTF_PEN = 64;

const int TOUCHEVENTF_PALM = 128;

const int TOUCHINPUTMASKF_TIMEFROMSYSTEM = 1;

const int TOUCHINPUTMASKF_EXTRAINFO = 2;

const int TOUCHINPUTMASKF_CONTACTAREA = 4;

const int TWF_FINETOUCH = 1;

const int TWF_WANTPALM = 2;

const int POINTER_FLAG_NONE = 0;

const int POINTER_FLAG_NEW = 1;

const int POINTER_FLAG_INRANGE = 2;

const int POINTER_FLAG_INCONTACT = 4;

const int POINTER_FLAG_FIRSTBUTTON = 16;

const int POINTER_FLAG_SECONDBUTTON = 32;

const int POINTER_FLAG_THIRDBUTTON = 64;

const int POINTER_FLAG_FOURTHBUTTON = 128;

const int POINTER_FLAG_FIFTHBUTTON = 256;

const int POINTER_FLAG_PRIMARY = 8192;

const int POINTER_FLAG_CONFIDENCE = 16384;

const int POINTER_FLAG_CANCELED = 32768;

const int POINTER_FLAG_DOWN = 65536;

const int POINTER_FLAG_UPDATE = 131072;

const int POINTER_FLAG_UP = 262144;

const int POINTER_FLAG_WHEEL = 524288;

const int POINTER_FLAG_HWHEEL = 1048576;

const int POINTER_FLAG_CAPTURECHANGED = 2097152;

const int POINTER_FLAG_HASTRANSFORM = 4194304;

const int POINTER_MOD_SHIFT = 4;

const int POINTER_MOD_CTRL = 8;

const int TOUCH_FLAG_NONE = 0;

const int TOUCH_MASK_NONE = 0;

const int TOUCH_MASK_CONTACTAREA = 1;

const int TOUCH_MASK_ORIENTATION = 2;

const int TOUCH_MASK_PRESSURE = 4;

const int PEN_FLAG_NONE = 0;

const int PEN_FLAG_BARREL = 1;

const int PEN_FLAG_INVERTED = 2;

const int PEN_FLAG_ERASER = 4;

const int PEN_MASK_NONE = 0;

const int PEN_MASK_PRESSURE = 1;

const int PEN_MASK_ROTATION = 2;

const int PEN_MASK_TILT_X = 4;

const int PEN_MASK_TILT_Y = 8;

const int POINTER_MESSAGE_FLAG_NEW = 1;

const int POINTER_MESSAGE_FLAG_INRANGE = 2;

const int POINTER_MESSAGE_FLAG_INCONTACT = 4;

const int POINTER_MESSAGE_FLAG_FIRSTBUTTON = 16;

const int POINTER_MESSAGE_FLAG_SECONDBUTTON = 32;

const int POINTER_MESSAGE_FLAG_THIRDBUTTON = 64;

const int POINTER_MESSAGE_FLAG_FOURTHBUTTON = 128;

const int POINTER_MESSAGE_FLAG_FIFTHBUTTON = 256;

const int POINTER_MESSAGE_FLAG_PRIMARY = 8192;

const int POINTER_MESSAGE_FLAG_CONFIDENCE = 16384;

const int POINTER_MESSAGE_FLAG_CANCELED = 32768;

const int PA_ACTIVATE = 1;

const int PA_NOACTIVATE = 3;

const int MAX_TOUCH_COUNT = 256;

const int TOUCH_FEEDBACK_DEFAULT = 1;

const int TOUCH_FEEDBACK_INDIRECT = 2;

const int TOUCH_FEEDBACK_NONE = 3;

const int TOUCH_HIT_TESTING_DEFAULT = 0;

const int TOUCH_HIT_TESTING_CLIENT = 1;

const int TOUCH_HIT_TESTING_NONE = 2;

const int TOUCH_HIT_TESTING_PROXIMITY_CLOSEST = 0;

const int TOUCH_HIT_TESTING_PROXIMITY_FARTHEST = 4095;

const int GWFS_INCLUDE_ANCESTORS = 1;

const int MAPVK_VK_TO_VSC = 0;

const int MAPVK_VSC_TO_VK = 1;

const int MAPVK_VK_TO_CHAR = 2;

const int MAPVK_VSC_TO_VK_EX = 3;

const int MAPVK_VK_TO_VSC_EX = 4;

const int MWMO_WAITALL = 1;

const int MWMO_ALERTABLE = 2;

const int MWMO_INPUTAVAILABLE = 4;

const int QS_KEY = 1;

const int QS_MOUSEMOVE = 2;

const int QS_MOUSEBUTTON = 4;

const int QS_POSTMESSAGE = 8;

const int QS_TIMER = 16;

const int QS_PAINT = 32;

const int QS_SENDMESSAGE = 64;

const int QS_HOTKEY = 128;

const int QS_ALLPOSTMESSAGE = 256;

const int QS_RAWINPUT = 1024;

const int QS_TOUCH = 2048;

const int QS_POINTER = 4096;

const int QS_MOUSE = 6;

const int QS_INPUT = 7175;

const int QS_ALLEVENTS = 7359;

const int QS_ALLINPUT = 7423;

const int USER_TIMER_MAXIMUM = 2147483647;

const int USER_TIMER_MINIMUM = 10;

const int TIMERV_DEFAULT_COALESCING = 0;

const int TIMERV_NO_COALESCING = 4294967295;

const int TIMERV_COALESCING_MIN = 1;

const int TIMERV_COALESCING_MAX = 2147483637;

const int SM_CXSCREEN = 0;

const int SM_CYSCREEN = 1;

const int SM_CXVSCROLL = 2;

const int SM_CYHSCROLL = 3;

const int SM_CYCAPTION = 4;

const int SM_CXBORDER = 5;

const int SM_CYBORDER = 6;

const int SM_CXDLGFRAME = 7;

const int SM_CYDLGFRAME = 8;

const int SM_CYVTHUMB = 9;

const int SM_CXHTHUMB = 10;

const int SM_CXICON = 11;

const int SM_CYICON = 12;

const int SM_CXCURSOR = 13;

const int SM_CYCURSOR = 14;

const int SM_CYMENU = 15;

const int SM_CXFULLSCREEN = 16;

const int SM_CYFULLSCREEN = 17;

const int SM_CYKANJIWINDOW = 18;

const int SM_MOUSEPRESENT = 19;

const int SM_CYVSCROLL = 20;

const int SM_CXHSCROLL = 21;

const int SM_DEBUG = 22;

const int SM_SWAPBUTTON = 23;

const int SM_RESERVED1 = 24;

const int SM_RESERVED2 = 25;

const int SM_RESERVED3 = 26;

const int SM_RESERVED4 = 27;

const int SM_CXMIN = 28;

const int SM_CYMIN = 29;

const int SM_CXSIZE = 30;

const int SM_CYSIZE = 31;

const int SM_CXFRAME = 32;

const int SM_CYFRAME = 33;

const int SM_CXMINTRACK = 34;

const int SM_CYMINTRACK = 35;

const int SM_CXDOUBLECLK = 36;

const int SM_CYDOUBLECLK = 37;

const int SM_CXICONSPACING = 38;

const int SM_CYICONSPACING = 39;

const int SM_MENUDROPALIGNMENT = 40;

const int SM_PENWINDOWS = 41;

const int SM_DBCSENABLED = 42;

const int SM_CMOUSEBUTTONS = 43;

const int SM_CXFIXEDFRAME = 7;

const int SM_CYFIXEDFRAME = 8;

const int SM_CXSIZEFRAME = 32;

const int SM_CYSIZEFRAME = 33;

const int SM_SECURE = 44;

const int SM_CXEDGE = 45;

const int SM_CYEDGE = 46;

const int SM_CXMINSPACING = 47;

const int SM_CYMINSPACING = 48;

const int SM_CXSMICON = 49;

const int SM_CYSMICON = 50;

const int SM_CYSMCAPTION = 51;

const int SM_CXSMSIZE = 52;

const int SM_CYSMSIZE = 53;

const int SM_CXMENUSIZE = 54;

const int SM_CYMENUSIZE = 55;

const int SM_ARRANGE = 56;

const int SM_CXMINIMIZED = 57;

const int SM_CYMINIMIZED = 58;

const int SM_CXMAXTRACK = 59;

const int SM_CYMAXTRACK = 60;

const int SM_CXMAXIMIZED = 61;

const int SM_CYMAXIMIZED = 62;

const int SM_NETWORK = 63;

const int SM_CLEANBOOT = 67;

const int SM_CXDRAG = 68;

const int SM_CYDRAG = 69;

const int SM_SHOWSOUNDS = 70;

const int SM_CXMENUCHECK = 71;

const int SM_CYMENUCHECK = 72;

const int SM_SLOWMACHINE = 73;

const int SM_MIDEASTENABLED = 74;

const int SM_MOUSEWHEELPRESENT = 75;

const int SM_XVIRTUALSCREEN = 76;

const int SM_YVIRTUALSCREEN = 77;

const int SM_CXVIRTUALSCREEN = 78;

const int SM_CYVIRTUALSCREEN = 79;

const int SM_CMONITORS = 80;

const int SM_SAMEDISPLAYFORMAT = 81;

const int SM_IMMENABLED = 82;

const int SM_CXFOCUSBORDER = 83;

const int SM_CYFOCUSBORDER = 84;

const int SM_TABLETPC = 86;

const int SM_MEDIACENTER = 87;

const int SM_STARTER = 88;

const int SM_SERVERR2 = 89;

const int SM_MOUSEHORIZONTALWHEELPRESENT = 91;

const int SM_CXPADDEDBORDER = 92;

const int SM_DIGITIZER = 94;

const int SM_MAXIMUMTOUCHES = 95;

const int SM_CMETRICS = 97;

const int SM_REMOTESESSION = 4096;

const int SM_SHUTTINGDOWN = 8192;

const int SM_REMOTECONTROL = 8193;

const int SM_CARETBLINKINGENABLED = 8194;

const int SM_CONVERTIBLESLATEMODE = 8195;

const int SM_SYSTEMDOCKED = 8196;

const int PMB_ACTIVE = 1;

const int MNC_IGNORE = 0;

const int MNC_CLOSE = 1;

const int MNC_EXECUTE = 2;

const int MNC_SELECT = 3;

const int MNS_NOCHECK = 2147483648;

const int MNS_MODELESS = 1073741824;

const int MNS_DRAGDROP = 536870912;

const int MNS_AUTODISMISS = 268435456;

const int MNS_NOTIFYBYPOS = 134217728;

const int MNS_CHECKORBMP = 67108864;

const int MIM_MAXHEIGHT = 1;

const int MIM_BACKGROUND = 2;

const int MIM_HELPID = 4;

const int MIM_MENUDATA = 8;

const int MIM_STYLE = 16;

const int MIM_APPLYTOSUBMENUS = 2147483648;

const int MND_CONTINUE = 0;

const int MND_ENDMENU = 1;

const int MNGOF_TOPGAP = 1;

const int MNGOF_BOTTOMGAP = 2;

const int MNGO_NOINTERFACE = 0;

const int MNGO_NOERROR = 1;

const int MIIM_STATE = 1;

const int MIIM_ID = 2;

const int MIIM_SUBMENU = 4;

const int MIIM_CHECKMARKS = 8;

const int MIIM_TYPE = 16;

const int MIIM_DATA = 32;

const int MIIM_STRING = 64;

const int MIIM_BITMAP = 128;

const int MIIM_FTYPE = 256;

const int GMDI_USEDISABLED = 1;

const int GMDI_GOINTOPOPUPS = 2;

const int TPM_LEFTBUTTON = 0;

const int TPM_RIGHTBUTTON = 2;

const int TPM_LEFTALIGN = 0;

const int TPM_CENTERALIGN = 4;

const int TPM_RIGHTALIGN = 8;

const int TPM_TOPALIGN = 0;

const int TPM_VCENTERALIGN = 16;

const int TPM_BOTTOMALIGN = 32;

const int TPM_HORIZONTAL = 0;

const int TPM_VERTICAL = 64;

const int TPM_NONOTIFY = 128;

const int TPM_RETURNCMD = 256;

const int TPM_RECURSE = 1;

const int TPM_HORPOSANIMATION = 1024;

const int TPM_HORNEGANIMATION = 2048;

const int TPM_VERPOSANIMATION = 4096;

const int TPM_VERNEGANIMATION = 8192;

const int TPM_NOANIMATION = 16384;

const int TPM_LAYOUTRTL = 32768;

const int TPM_WORKAREA = 65536;

const int DOF_EXECUTABLE = 32769;

const int DOF_DOCUMENT = 32770;

const int DOF_DIRECTORY = 32771;

const int DOF_MULTIPLE = 32772;

const int DOF_PROGMAN = 1;

const int DOF_SHELLDATA = 2;

const int DO_DROPFILE = 1162627398;

const int DO_PRINTFILE = 1414419024;

const int DT_TOP = 0;

const int DT_LEFT = 0;

const int DT_CENTER = 1;

const int DT_RIGHT = 2;

const int DT_VCENTER = 4;

const int DT_BOTTOM = 8;

const int DT_WORDBREAK = 16;

const int DT_SINGLELINE = 32;

const int DT_EXPANDTABS = 64;

const int DT_TABSTOP = 128;

const int DT_NOCLIP = 256;

const int DT_EXTERNALLEADING = 512;

const int DT_CALCRECT = 1024;

const int DT_NOPREFIX = 2048;

const int DT_INTERNAL = 4096;

const int DT_EDITCONTROL = 8192;

const int DT_PATH_ELLIPSIS = 16384;

const int DT_END_ELLIPSIS = 32768;

const int DT_MODIFYSTRING = 65536;

const int DT_RTLREADING = 131072;

const int DT_WORD_ELLIPSIS = 262144;

const int DT_NOFULLWIDTHCHARBREAK = 524288;

const int DT_HIDEPREFIX = 1048576;

const int DT_PREFIXONLY = 2097152;

const int DST_COMPLEX = 0;

const int DST_TEXT = 1;

const int DST_PREFIXTEXT = 2;

const int DST_ICON = 3;

const int DST_BITMAP = 4;

const int DSS_NORMAL = 0;

const int DSS_UNION = 16;

const int DSS_DISABLED = 32;

const int DSS_MONO = 128;

const int DSS_HIDEPREFIX = 512;

const int DSS_PREFIXONLY = 1024;

const int DSS_RIGHT = 32768;

const int ASFW_ANY = 4294967295;

const int LSFW_LOCK = 1;

const int LSFW_UNLOCK = 2;

const int DCX_WINDOW = 1;

const int DCX_CACHE = 2;

const int DCX_NORESETATTRS = 4;

const int DCX_CLIPCHILDREN = 8;

const int DCX_CLIPSIBLINGS = 16;

const int DCX_PARENTCLIP = 32;

const int DCX_EXCLUDERGN = 64;

const int DCX_INTERSECTRGN = 128;

const int DCX_EXCLUDEUPDATE = 256;

const int DCX_INTERSECTUPDATE = 512;

const int DCX_LOCKWINDOWUPDATE = 1024;

const int DCX_VALIDATE = 2097152;

const int RDW_INVALIDATE = 1;

const int RDW_INTERNALPAINT = 2;

const int RDW_ERASE = 4;

const int RDW_VALIDATE = 8;

const int RDW_NOINTERNALPAINT = 16;

const int RDW_NOERASE = 32;

const int RDW_NOCHILDREN = 64;

const int RDW_ALLCHILDREN = 128;

const int RDW_UPDATENOW = 256;

const int RDW_ERASENOW = 512;

const int RDW_FRAME = 1024;

const int RDW_NOFRAME = 2048;

const int SW_SCROLLCHILDREN = 1;

const int SW_INVALIDATE = 2;

const int SW_ERASE = 4;

const int SW_SMOOTHSCROLL = 16;

const int ESB_ENABLE_BOTH = 0;

const int ESB_DISABLE_BOTH = 3;

const int ESB_DISABLE_LEFT = 1;

const int ESB_DISABLE_RIGHT = 2;

const int ESB_DISABLE_UP = 1;

const int ESB_DISABLE_DOWN = 2;

const int ESB_DISABLE_LTUP = 1;

const int ESB_DISABLE_RTDN = 2;

const int HELPINFO_WINDOW = 1;

const int HELPINFO_MENUITEM = 2;

const int MB_OK = 0;

const int MB_OKCANCEL = 1;

const int MB_ABORTRETRYIGNORE = 2;

const int MB_YESNOCANCEL = 3;

const int MB_YESNO = 4;

const int MB_RETRYCANCEL = 5;

const int MB_CANCELTRYCONTINUE = 6;

const int MB_ICONHAND = 16;

const int MB_ICONQUESTION = 32;

const int MB_ICONEXCLAMATION = 48;

const int MB_ICONASTERISK = 64;

const int MB_USERICON = 128;

const int MB_ICONWARNING = 48;

const int MB_ICONERROR = 16;

const int MB_ICONINFORMATION = 64;

const int MB_ICONSTOP = 16;

const int MB_DEFBUTTON1 = 0;

const int MB_DEFBUTTON2 = 256;

const int MB_DEFBUTTON3 = 512;

const int MB_DEFBUTTON4 = 768;

const int MB_APPLMODAL = 0;

const int MB_SYSTEMMODAL = 4096;

const int MB_TASKMODAL = 8192;

const int MB_HELP = 16384;

const int MB_NOFOCUS = 32768;

const int MB_SETFOREGROUND = 65536;

const int MB_DEFAULT_DESKTOP_ONLY = 131072;

const int MB_TOPMOST = 262144;

const int MB_RIGHT = 524288;

const int MB_RTLREADING = 1048576;

const int MB_SERVICE_NOTIFICATION = 2097152;

const int MB_SERVICE_NOTIFICATION_NT3X = 262144;

const int MB_TYPEMASK = 15;

const int MB_ICONMASK = 240;

const int MB_DEFMASK = 3840;

const int MB_MODEMASK = 12288;

const int MB_MISCMASK = 49152;

const int CWP_ALL = 0;

const int CWP_SKIPINVISIBLE = 1;

const int CWP_SKIPDISABLED = 2;

const int CWP_SKIPTRANSPARENT = 4;

const int CTLCOLOR_MSGBOX = 0;

const int CTLCOLOR_EDIT = 1;

const int CTLCOLOR_LISTBOX = 2;

const int CTLCOLOR_BTN = 3;

const int CTLCOLOR_DLG = 4;

const int CTLCOLOR_SCROLLBAR = 5;

const int CTLCOLOR_STATIC = 6;

const int CTLCOLOR_MAX = 7;

const int COLOR_SCROLLBAR = 0;

const int COLOR_BACKGROUND = 1;

const int COLOR_ACTIVECAPTION = 2;

const int COLOR_INACTIVECAPTION = 3;

const int COLOR_MENU = 4;

const int COLOR_WINDOW = 5;

const int COLOR_WINDOWFRAME = 6;

const int COLOR_MENUTEXT = 7;

const int COLOR_WINDOWTEXT = 8;

const int COLOR_CAPTIONTEXT = 9;

const int COLOR_ACTIVEBORDER = 10;

const int COLOR_INACTIVEBORDER = 11;

const int COLOR_APPWORKSPACE = 12;

const int COLOR_HIGHLIGHT = 13;

const int COLOR_HIGHLIGHTTEXT = 14;

const int COLOR_BTNFACE = 15;

const int COLOR_BTNSHADOW = 16;

const int COLOR_GRAYTEXT = 17;

const int COLOR_BTNTEXT = 18;

const int COLOR_INACTIVECAPTIONTEXT = 19;

const int COLOR_BTNHIGHLIGHT = 20;

const int COLOR_3DDKSHADOW = 21;

const int COLOR_3DLIGHT = 22;

const int COLOR_INFOTEXT = 23;

const int COLOR_INFOBK = 24;

const int COLOR_HOTLIGHT = 26;

const int COLOR_GRADIENTACTIVECAPTION = 27;

const int COLOR_GRADIENTINACTIVECAPTION = 28;

const int COLOR_MENUHILIGHT = 29;

const int COLOR_MENUBAR = 30;

const int COLOR_DESKTOP = 1;

const int COLOR_3DFACE = 15;

const int COLOR_3DSHADOW = 16;

const int COLOR_3DHIGHLIGHT = 20;

const int COLOR_3DHILIGHT = 20;

const int COLOR_BTNHILIGHT = 20;

const int GW_HWNDFIRST = 0;

const int GW_HWNDLAST = 1;

const int GW_HWNDNEXT = 2;

const int GW_HWNDPREV = 3;

const int GW_OWNER = 4;

const int GW_CHILD = 5;

const int GW_ENABLEDPOPUP = 6;

const int GW_MAX = 6;

const int MF_INSERT = 0;

const int MF_CHANGE = 128;

const int MF_APPEND = 256;

const int MF_DELETE = 512;

const int MF_REMOVE = 4096;

const int MF_BYCOMMAND = 0;

const int MF_BYPOSITION = 1024;

const int MF_SEPARATOR = 2048;

const int MF_ENABLED = 0;

const int MF_GRAYED = 1;

const int MF_DISABLED = 2;

const int MF_UNCHECKED = 0;

const int MF_CHECKED = 8;

const int MF_USECHECKBITMAPS = 512;

const int MF_STRING = 0;

const int MF_BITMAP = 4;

const int MF_OWNERDRAW = 256;

const int MF_POPUP = 16;

const int MF_MENUBARBREAK = 32;

const int MF_MENUBREAK = 64;

const int MF_UNHILITE = 0;

const int MF_HILITE = 128;

const int MF_DEFAULT = 4096;

const int MF_SYSMENU = 8192;

const int MF_HELP = 16384;

const int MF_RIGHTJUSTIFY = 16384;

const int MF_MOUSESELECT = 32768;

const int MF_END = 128;

const int MFT_STRING = 0;

const int MFT_BITMAP = 4;

const int MFT_MENUBARBREAK = 32;

const int MFT_MENUBREAK = 64;

const int MFT_OWNERDRAW = 256;

const int MFT_RADIOCHECK = 512;

const int MFT_SEPARATOR = 2048;

const int MFT_RIGHTORDER = 8192;

const int MFT_RIGHTJUSTIFY = 16384;

const int MFS_GRAYED = 3;

const int MFS_DISABLED = 3;

const int MFS_CHECKED = 8;

const int MFS_HILITE = 128;

const int MFS_ENABLED = 0;

const int MFS_UNCHECKED = 0;

const int MFS_UNHILITE = 0;

const int MFS_DEFAULT = 4096;

const int SC_SIZE = 61440;

const int SC_MOVE = 61456;

const int SC_MINIMIZE = 61472;

const int SC_MAXIMIZE = 61488;

const int SC_NEXTWINDOW = 61504;

const int SC_PREVWINDOW = 61520;

const int SC_CLOSE = 61536;

const int SC_VSCROLL = 61552;

const int SC_HSCROLL = 61568;

const int SC_MOUSEMENU = 61584;

const int SC_KEYMENU = 61696;

const int SC_ARRANGE = 61712;

const int SC_RESTORE = 61728;

const int SC_TASKLIST = 61744;

const int SC_SCREENSAVE = 61760;

const int SC_HOTKEY = 61776;

const int SC_DEFAULT = 61792;

const int SC_MONITORPOWER = 61808;

const int SC_CONTEXTHELP = 61824;

const int SC_SEPARATOR = 61455;

const int SCF_ISSECURE = 1;

const int SC_ICON = 61472;

const int SC_ZOOM = 61488;

const int IMAGE_BITMAP = 0;

const int IMAGE_ICON = 1;

const int IMAGE_CURSOR = 2;

const int IMAGE_ENHMETAFILE = 3;

const int LR_DEFAULTCOLOR = 0;

const int LR_MONOCHROME = 1;

const int LR_COLOR = 2;

const int LR_COPYRETURNORG = 4;

const int LR_COPYDELETEORG = 8;

const int LR_LOADFROMFILE = 16;

const int LR_LOADTRANSPARENT = 32;

const int LR_DEFAULTSIZE = 64;

const int LR_VGACOLOR = 128;

const int LR_LOADMAP3DCOLORS = 4096;

const int LR_CREATEDIBSECTION = 8192;

const int LR_COPYFROMRESOURCE = 16384;

const int LR_SHARED = 32768;

const int DI_MASK = 1;

const int DI_IMAGE = 2;

const int DI_NORMAL = 3;

const int DI_COMPAT = 4;

const int DI_DEFAULTSIZE = 8;

const int DI_NOMIRROR = 16;

const int RES_ICON = 1;

const int RES_CURSOR = 2;

const int ORD_LANGDRIVER = 1;

const int IDOK = 1;

const int IDCANCEL = 2;

const int IDABORT = 3;

const int IDRETRY = 4;

const int IDIGNORE = 5;

const int IDYES = 6;

const int IDNO = 7;

const int IDCLOSE = 8;

const int IDHELP = 9;

const int IDTRYAGAIN = 10;

const int IDCONTINUE = 11;

const int IDTIMEOUT = 32000;

const int ES_LEFT = 0;

const int ES_CENTER = 1;

const int ES_RIGHT = 2;

const int ES_MULTILINE = 4;

const int ES_UPPERCASE = 8;

const int ES_LOWERCASE = 16;

const int ES_PASSWORD = 32;

const int ES_AUTOVSCROLL = 64;

const int ES_AUTOHSCROLL = 128;

const int ES_NOHIDESEL = 256;

const int ES_OEMCONVERT = 1024;

const int ES_READONLY = 2048;

const int ES_WANTRETURN = 4096;

const int ES_NUMBER = 8192;

const int EN_SETFOCUS = 256;

const int EN_KILLFOCUS = 512;

const int EN_CHANGE = 768;

const int EN_UPDATE = 1024;

const int EN_ERRSPACE = 1280;

const int EN_MAXTEXT = 1281;

const int EN_HSCROLL = 1537;

const int EN_VSCROLL = 1538;

const int EN_ALIGN_LTR_EC = 1792;

const int EN_ALIGN_RTL_EC = 1793;

const int EN_BEFORE_PASTE = 2048;

const int EN_AFTER_PASTE = 2049;

const int EC_LEFTMARGIN = 1;

const int EC_RIGHTMARGIN = 2;

const int EC_USEFONTINFO = 65535;

const int EMSIS_COMPOSITIONSTRING = 1;

const int EIMES_GETCOMPSTRATONCE = 1;

const int EIMES_CANCELCOMPSTRINFOCUS = 2;

const int EIMES_COMPLETECOMPSTRKILLFOCUS = 4;

const int EM_GETSEL = 176;

const int EM_SETSEL = 177;

const int EM_GETRECT = 178;

const int EM_SETRECT = 179;

const int EM_SETRECTNP = 180;

const int EM_SCROLL = 181;

const int EM_LINESCROLL = 182;

const int EM_SCROLLCARET = 183;

const int EM_GETMODIFY = 184;

const int EM_SETMODIFY = 185;

const int EM_GETLINECOUNT = 186;

const int EM_LINEINDEX = 187;

const int EM_SETHANDLE = 188;

const int EM_GETHANDLE = 189;

const int EM_GETTHUMB = 190;

const int EM_LINELENGTH = 193;

const int EM_REPLACESEL = 194;

const int EM_GETLINE = 196;

const int EM_LIMITTEXT = 197;

const int EM_CANUNDO = 198;

const int EM_UNDO = 199;

const int EM_FMTLINES = 200;

const int EM_LINEFROMCHAR = 201;

const int EM_SETTABSTOPS = 203;

const int EM_SETPASSWORDCHAR = 204;

const int EM_EMPTYUNDOBUFFER = 205;

const int EM_GETFIRSTVISIBLELINE = 206;

const int EM_SETREADONLY = 207;

const int EM_SETWORDBREAKPROC = 208;

const int EM_GETWORDBREAKPROC = 209;

const int EM_GETPASSWORDCHAR = 210;

const int EM_SETMARGINS = 211;

const int EM_GETMARGINS = 212;

const int EM_SETLIMITTEXT = 197;

const int EM_GETLIMITTEXT = 213;

const int EM_POSFROMCHAR = 214;

const int EM_CHARFROMPOS = 215;

const int EM_SETIMESTATUS = 216;

const int EM_GETIMESTATUS = 217;

const int EM_ENABLEFEATURE = 218;

const int WB_LEFT = 0;

const int WB_RIGHT = 1;

const int WB_ISDELIMITER = 2;

const int BS_PUSHBUTTON = 0;

const int BS_DEFPUSHBUTTON = 1;

const int BS_CHECKBOX = 2;

const int BS_AUTOCHECKBOX = 3;

const int BS_RADIOBUTTON = 4;

const int BS_3STATE = 5;

const int BS_AUTO3STATE = 6;

const int BS_GROUPBOX = 7;

const int BS_USERBUTTON = 8;

const int BS_AUTORADIOBUTTON = 9;

const int BS_PUSHBOX = 10;

const int BS_OWNERDRAW = 11;

const int BS_TYPEMASK = 15;

const int BS_LEFTTEXT = 32;

const int BS_TEXT = 0;

const int BS_ICON = 64;

const int BS_BITMAP = 128;

const int BS_LEFT = 256;

const int BS_RIGHT = 512;

const int BS_CENTER = 768;

const int BS_TOP = 1024;

const int BS_BOTTOM = 2048;

const int BS_VCENTER = 3072;

const int BS_PUSHLIKE = 4096;

const int BS_MULTILINE = 8192;

const int BS_NOTIFY = 16384;

const int BS_FLAT = 32768;

const int BS_RIGHTBUTTON = 32;

const int BN_CLICKED = 0;

const int BN_PAINT = 1;

const int BN_HILITE = 2;

const int BN_UNHILITE = 3;

const int BN_DISABLE = 4;

const int BN_DOUBLECLICKED = 5;

const int BN_PUSHED = 2;

const int BN_UNPUSHED = 3;

const int BN_DBLCLK = 5;

const int BN_SETFOCUS = 6;

const int BN_KILLFOCUS = 7;

const int BM_GETCHECK = 240;

const int BM_SETCHECK = 241;

const int BM_GETSTATE = 242;

const int BM_SETSTATE = 243;

const int BM_SETSTYLE = 244;

const int BM_CLICK = 245;

const int BM_GETIMAGE = 246;

const int BM_SETIMAGE = 247;

const int BM_SETDONTCLICK = 248;

const int BST_UNCHECKED = 0;

const int BST_CHECKED = 1;

const int BST_INDETERMINATE = 2;

const int BST_PUSHED = 4;

const int BST_FOCUS = 8;

const int SS_LEFT = 0;

const int SS_CENTER = 1;

const int SS_RIGHT = 2;

const int SS_ICON = 3;

const int SS_BLACKRECT = 4;

const int SS_GRAYRECT = 5;

const int SS_WHITERECT = 6;

const int SS_BLACKFRAME = 7;

const int SS_GRAYFRAME = 8;

const int SS_WHITEFRAME = 9;

const int SS_USERITEM = 10;

const int SS_SIMPLE = 11;

const int SS_LEFTNOWORDWRAP = 12;

const int SS_OWNERDRAW = 13;

const int SS_BITMAP = 14;

const int SS_ENHMETAFILE = 15;

const int SS_ETCHEDHORZ = 16;

const int SS_ETCHEDVERT = 17;

const int SS_ETCHEDFRAME = 18;

const int SS_TYPEMASK = 31;

const int SS_REALSIZECONTROL = 64;

const int SS_NOPREFIX = 128;

const int SS_NOTIFY = 256;

const int SS_CENTERIMAGE = 512;

const int SS_RIGHTJUST = 1024;

const int SS_REALSIZEIMAGE = 2048;

const int SS_SUNKEN = 4096;

const int SS_EDITCONTROL = 8192;

const int SS_ENDELLIPSIS = 16384;

const int SS_PATHELLIPSIS = 32768;

const int SS_WORDELLIPSIS = 49152;

const int SS_ELLIPSISMASK = 49152;

const int STM_SETICON = 368;

const int STM_GETICON = 369;

const int STM_SETIMAGE = 370;

const int STM_GETIMAGE = 371;

const int STN_CLICKED = 0;

const int STN_DBLCLK = 1;

const int STN_ENABLE = 2;

const int STN_DISABLE = 3;

const int STM_MSGMAX = 372;

const int DWLP_MSGRESULT = 0;

const int DWLP_DLGPROC = 8;

const int DWLP_USER = 16;

const int DDL_READWRITE = 0;

const int DDL_READONLY = 1;

const int DDL_HIDDEN = 2;

const int DDL_SYSTEM = 4;

const int DDL_DIRECTORY = 16;

const int DDL_ARCHIVE = 32;

const int DDL_POSTMSGS = 8192;

const int DDL_DRIVES = 16384;

const int DDL_EXCLUSIVE = 32768;

const int DS_ABSALIGN = 1;

const int DS_SYSMODAL = 2;

const int DS_LOCALEDIT = 32;

const int DS_SETFONT = 64;

const int DS_MODALFRAME = 128;

const int DS_NOIDLEMSG = 256;

const int DS_SETFOREGROUND = 512;

const int DS_3DLOOK = 4;

const int DS_FIXEDSYS = 8;

const int DS_NOFAILCREATE = 16;

const int DS_CONTROL = 1024;

const int DS_CENTER = 2048;

const int DS_CENTERMOUSE = 4096;

const int DS_CONTEXTHELP = 8192;

const int DS_SHELLFONT = 72;

const int DM_GETDEFID = 1024;

const int DM_SETDEFID = 1025;

const int DM_REPOSITION = 1026;

const int DC_HASDEFID = 21323;

const int DLGC_WANTARROWS = 1;

const int DLGC_WANTTAB = 2;

const int DLGC_WANTALLKEYS = 4;

const int DLGC_WANTMESSAGE = 4;

const int DLGC_HASSETSEL = 8;

const int DLGC_DEFPUSHBUTTON = 16;

const int DLGC_UNDEFPUSHBUTTON = 32;

const int DLGC_RADIOBUTTON = 64;

const int DLGC_WANTCHARS = 128;

const int DLGC_STATIC = 256;

const int DLGC_BUTTON = 8192;

const int LB_CTLCODE = 0;

const int LB_OKAY = 0;

const int LB_ERR = -1;

const int LB_ERRSPACE = -2;

const int LBN_ERRSPACE = -2;

const int LBN_SELCHANGE = 1;

const int LBN_DBLCLK = 2;

const int LBN_SELCANCEL = 3;

const int LBN_SETFOCUS = 4;

const int LBN_KILLFOCUS = 5;

const int LB_ADDSTRING = 384;

const int LB_INSERTSTRING = 385;

const int LB_DELETESTRING = 386;

const int LB_SELITEMRANGEEX = 387;

const int LB_RESETCONTENT = 388;

const int LB_SETSEL = 389;

const int LB_SETCURSEL = 390;

const int LB_GETSEL = 391;

const int LB_GETCURSEL = 392;

const int LB_GETTEXT = 393;

const int LB_GETTEXTLEN = 394;

const int LB_GETCOUNT = 395;

const int LB_SELECTSTRING = 396;

const int LB_DIR = 397;

const int LB_GETTOPINDEX = 398;

const int LB_FINDSTRING = 399;

const int LB_GETSELCOUNT = 400;

const int LB_GETSELITEMS = 401;

const int LB_SETTABSTOPS = 402;

const int LB_GETHORIZONTALEXTENT = 403;

const int LB_SETHORIZONTALEXTENT = 404;

const int LB_SETCOLUMNWIDTH = 405;

const int LB_ADDFILE = 406;

const int LB_SETTOPINDEX = 407;

const int LB_GETITEMRECT = 408;

const int LB_GETITEMDATA = 409;

const int LB_SETITEMDATA = 410;

const int LB_SELITEMRANGE = 411;

const int LB_SETANCHORINDEX = 412;

const int LB_GETANCHORINDEX = 413;

const int LB_SETCARETINDEX = 414;

const int LB_GETCARETINDEX = 415;

const int LB_SETITEMHEIGHT = 416;

const int LB_GETITEMHEIGHT = 417;

const int LB_FINDSTRINGEXACT = 418;

const int LB_SETLOCALE = 421;

const int LB_GETLOCALE = 422;

const int LB_SETCOUNT = 423;

const int LB_INITSTORAGE = 424;

const int LB_ITEMFROMPOINT = 425;

const int LB_GETLISTBOXINFO = 434;

const int LB_MSGMAX = 435;

const int LBS_NOTIFY = 1;

const int LBS_SORT = 2;

const int LBS_NOREDRAW = 4;

const int LBS_MULTIPLESEL = 8;

const int LBS_OWNERDRAWFIXED = 16;

const int LBS_OWNERDRAWVARIABLE = 32;

const int LBS_HASSTRINGS = 64;

const int LBS_USETABSTOPS = 128;

const int LBS_NOINTEGRALHEIGHT = 256;

const int LBS_MULTICOLUMN = 512;

const int LBS_WANTKEYBOARDINPUT = 1024;

const int LBS_EXTENDEDSEL = 2048;

const int LBS_DISABLENOSCROLL = 4096;

const int LBS_NODATA = 8192;

const int LBS_NOSEL = 16384;

const int LBS_COMBOBOX = 32768;

const int LBS_STANDARD = 10485763;

const int CB_OKAY = 0;

const int CB_ERR = -1;

const int CB_ERRSPACE = -2;

const int CBN_ERRSPACE = -1;

const int CBN_SELCHANGE = 1;

const int CBN_DBLCLK = 2;

const int CBN_SETFOCUS = 3;

const int CBN_KILLFOCUS = 4;

const int CBN_EDITCHANGE = 5;

const int CBN_EDITUPDATE = 6;

const int CBN_DROPDOWN = 7;

const int CBN_CLOSEUP = 8;

const int CBN_SELENDOK = 9;

const int CBN_SELENDCANCEL = 10;

const int CBS_SIMPLE = 1;

const int CBS_DROPDOWN = 2;

const int CBS_DROPDOWNLIST = 3;

const int CBS_OWNERDRAWFIXED = 16;

const int CBS_OWNERDRAWVARIABLE = 32;

const int CBS_AUTOHSCROLL = 64;

const int CBS_OEMCONVERT = 128;

const int CBS_SORT = 256;

const int CBS_HASSTRINGS = 512;

const int CBS_NOINTEGRALHEIGHT = 1024;

const int CBS_DISABLENOSCROLL = 2048;

const int CBS_UPPERCASE = 8192;

const int CBS_LOWERCASE = 16384;

const int CB_GETEDITSEL = 320;

const int CB_LIMITTEXT = 321;

const int CB_SETEDITSEL = 322;

const int CB_ADDSTRING = 323;

const int CB_DELETESTRING = 324;

const int CB_DIR = 325;

const int CB_GETCOUNT = 326;

const int CB_GETCURSEL = 327;

const int CB_GETLBTEXT = 328;

const int CB_GETLBTEXTLEN = 329;

const int CB_INSERTSTRING = 330;

const int CB_RESETCONTENT = 331;

const int CB_FINDSTRING = 332;

const int CB_SELECTSTRING = 333;

const int CB_SETCURSEL = 334;

const int CB_SHOWDROPDOWN = 335;

const int CB_GETITEMDATA = 336;

const int CB_SETITEMDATA = 337;

const int CB_GETDROPPEDCONTROLRECT = 338;

const int CB_SETITEMHEIGHT = 339;

const int CB_GETITEMHEIGHT = 340;

const int CB_SETEXTENDEDUI = 341;

const int CB_GETEXTENDEDUI = 342;

const int CB_GETDROPPEDSTATE = 343;

const int CB_FINDSTRINGEXACT = 344;

const int CB_SETLOCALE = 345;

const int CB_GETLOCALE = 346;

const int CB_GETTOPINDEX = 347;

const int CB_SETTOPINDEX = 348;

const int CB_GETHORIZONTALEXTENT = 349;

const int CB_SETHORIZONTALEXTENT = 350;

const int CB_GETDROPPEDWIDTH = 351;

const int CB_SETDROPPEDWIDTH = 352;

const int CB_INITSTORAGE = 353;

const int CB_GETCOMBOBOXINFO = 356;

const int CB_MSGMAX = 357;

const int SBS_HORZ = 0;

const int SBS_VERT = 1;

const int SBS_TOPALIGN = 2;

const int SBS_LEFTALIGN = 2;

const int SBS_BOTTOMALIGN = 4;

const int SBS_RIGHTALIGN = 4;

const int SBS_SIZEBOXTOPLEFTALIGN = 2;

const int SBS_SIZEBOXBOTTOMRIGHTALIGN = 4;

const int SBS_SIZEBOX = 8;

const int SBS_SIZEGRIP = 16;

const int SBM_SETPOS = 224;

const int SBM_GETPOS = 225;

const int SBM_SETRANGE = 226;

const int SBM_SETRANGEREDRAW = 230;

const int SBM_GETRANGE = 227;

const int SBM_ENABLE_ARROWS = 228;

const int SBM_SETSCROLLINFO = 233;

const int SBM_GETSCROLLINFO = 234;

const int SBM_GETSCROLLBARINFO = 235;

const int SIF_RANGE = 1;

const int SIF_PAGE = 2;

const int SIF_POS = 4;

const int SIF_DISABLENOSCROLL = 8;

const int SIF_TRACKPOS = 16;

const int SIF_ALL = 23;

const int MDIS_ALLCHILDSTYLES = 1;

const int MDITILE_VERTICAL = 0;

const int MDITILE_HORIZONTAL = 1;

const int MDITILE_SKIPDISABLED = 2;

const int MDITILE_ZORDER = 4;

const int HELP_CONTEXT = 1;

const int HELP_QUIT = 2;

const int HELP_INDEX = 3;

const int HELP_CONTENTS = 3;

const int HELP_HELPONHELP = 4;

const int HELP_SETINDEX = 5;

const int HELP_SETCONTENTS = 5;

const int HELP_CONTEXTPOPUP = 8;

const int HELP_FORCEFILE = 9;

const int HELP_KEY = 257;

const int HELP_COMMAND = 258;

const int HELP_PARTIALKEY = 261;

const int HELP_MULTIKEY = 513;

const int HELP_SETWINPOS = 515;

const int HELP_CONTEXTMENU = 10;

const int HELP_FINDER = 11;

const int HELP_WM_HELP = 12;

const int HELP_SETPOPUP_POS = 13;

const int HELP_TCARD = 32768;

const int HELP_TCARD_DATA = 16;

const int HELP_TCARD_OTHER_CALLER = 17;

const int IDH_NO_HELP = 28440;

const int IDH_MISSING_CONTEXT = 28441;

const int IDH_GENERIC_HELP_BUTTON = 28442;

const int IDH_OK = 28443;

const int IDH_CANCEL = 28444;

const int IDH_HELP = 28445;

const int GR_GDIOBJECTS = 0;

const int GR_USEROBJECTS = 1;

const int GR_GDIOBJECTS_PEAK = 2;

const int GR_USEROBJECTS_PEAK = 4;

const int SPI_GETBEEP = 1;

const int SPI_SETBEEP = 2;

const int SPI_GETMOUSE = 3;

const int SPI_SETMOUSE = 4;

const int SPI_GETBORDER = 5;

const int SPI_SETBORDER = 6;

const int SPI_GETKEYBOARDSPEED = 10;

const int SPI_SETKEYBOARDSPEED = 11;

const int SPI_LANGDRIVER = 12;

const int SPI_ICONHORIZONTALSPACING = 13;

const int SPI_GETSCREENSAVETIMEOUT = 14;

const int SPI_SETSCREENSAVETIMEOUT = 15;

const int SPI_GETSCREENSAVEACTIVE = 16;

const int SPI_SETSCREENSAVEACTIVE = 17;

const int SPI_GETGRIDGRANULARITY = 18;

const int SPI_SETGRIDGRANULARITY = 19;

const int SPI_SETDESKWALLPAPER = 20;

const int SPI_SETDESKPATTERN = 21;

const int SPI_GETKEYBOARDDELAY = 22;

const int SPI_SETKEYBOARDDELAY = 23;

const int SPI_ICONVERTICALSPACING = 24;

const int SPI_GETICONTITLEWRAP = 25;

const int SPI_SETICONTITLEWRAP = 26;

const int SPI_GETMENUDROPALIGNMENT = 27;

const int SPI_SETMENUDROPALIGNMENT = 28;

const int SPI_SETDOUBLECLKWIDTH = 29;

const int SPI_SETDOUBLECLKHEIGHT = 30;

const int SPI_GETICONTITLELOGFONT = 31;

const int SPI_SETDOUBLECLICKTIME = 32;

const int SPI_SETMOUSEBUTTONSWAP = 33;

const int SPI_SETICONTITLELOGFONT = 34;

const int SPI_GETFASTTASKSWITCH = 35;

const int SPI_SETFASTTASKSWITCH = 36;

const int SPI_SETDRAGFULLWINDOWS = 37;

const int SPI_GETDRAGFULLWINDOWS = 38;

const int SPI_GETNONCLIENTMETRICS = 41;

const int SPI_SETNONCLIENTMETRICS = 42;

const int SPI_GETMINIMIZEDMETRICS = 43;

const int SPI_SETMINIMIZEDMETRICS = 44;

const int SPI_GETICONMETRICS = 45;

const int SPI_SETICONMETRICS = 46;

const int SPI_SETWORKAREA = 47;

const int SPI_GETWORKAREA = 48;

const int SPI_SETPENWINDOWS = 49;

const int SPI_GETHIGHCONTRAST = 66;

const int SPI_SETHIGHCONTRAST = 67;

const int SPI_GETKEYBOARDPREF = 68;

const int SPI_SETKEYBOARDPREF = 69;

const int SPI_GETSCREENREADER = 70;

const int SPI_SETSCREENREADER = 71;

const int SPI_GETANIMATION = 72;

const int SPI_SETANIMATION = 73;

const int SPI_GETFONTSMOOTHING = 74;

const int SPI_SETFONTSMOOTHING = 75;

const int SPI_SETDRAGWIDTH = 76;

const int SPI_SETDRAGHEIGHT = 77;

const int SPI_SETHANDHELD = 78;

const int SPI_GETLOWPOWERTIMEOUT = 79;

const int SPI_GETPOWEROFFTIMEOUT = 80;

const int SPI_SETLOWPOWERTIMEOUT = 81;

const int SPI_SETPOWEROFFTIMEOUT = 82;

const int SPI_GETLOWPOWERACTIVE = 83;

const int SPI_GETPOWEROFFACTIVE = 84;

const int SPI_SETLOWPOWERACTIVE = 85;

const int SPI_SETPOWEROFFACTIVE = 86;

const int SPI_SETCURSORS = 87;

const int SPI_SETICONS = 88;

const int SPI_GETDEFAULTINPUTLANG = 89;

const int SPI_SETDEFAULTINPUTLANG = 90;

const int SPI_SETLANGTOGGLE = 91;

const int SPI_GETWINDOWSEXTENSION = 92;

const int SPI_SETMOUSETRAILS = 93;

const int SPI_GETMOUSETRAILS = 94;

const int SPI_SETSCREENSAVERRUNNING = 97;

const int SPI_SCREENSAVERRUNNING = 97;

const int SPI_GETFILTERKEYS = 50;

const int SPI_SETFILTERKEYS = 51;

const int SPI_GETTOGGLEKEYS = 52;

const int SPI_SETTOGGLEKEYS = 53;

const int SPI_GETMOUSEKEYS = 54;

const int SPI_SETMOUSEKEYS = 55;

const int SPI_GETSHOWSOUNDS = 56;

const int SPI_SETSHOWSOUNDS = 57;

const int SPI_GETSTICKYKEYS = 58;

const int SPI_SETSTICKYKEYS = 59;

const int SPI_GETACCESSTIMEOUT = 60;

const int SPI_SETACCESSTIMEOUT = 61;

const int SPI_GETSERIALKEYS = 62;

const int SPI_SETSERIALKEYS = 63;

const int SPI_GETSOUNDSENTRY = 64;

const int SPI_SETSOUNDSENTRY = 65;

const int SPI_GETSNAPTODEFBUTTON = 95;

const int SPI_SETSNAPTODEFBUTTON = 96;

const int SPI_GETMOUSEHOVERWIDTH = 98;

const int SPI_SETMOUSEHOVERWIDTH = 99;

const int SPI_GETMOUSEHOVERHEIGHT = 100;

const int SPI_SETMOUSEHOVERHEIGHT = 101;

const int SPI_GETMOUSEHOVERTIME = 102;

const int SPI_SETMOUSEHOVERTIME = 103;

const int SPI_GETWHEELSCROLLLINES = 104;

const int SPI_SETWHEELSCROLLLINES = 105;

const int SPI_GETMENUSHOWDELAY = 106;

const int SPI_SETMENUSHOWDELAY = 107;

const int SPI_GETWHEELSCROLLCHARS = 108;

const int SPI_SETWHEELSCROLLCHARS = 109;

const int SPI_GETSHOWIMEUI = 110;

const int SPI_SETSHOWIMEUI = 111;

const int SPI_GETMOUSESPEED = 112;

const int SPI_SETMOUSESPEED = 113;

const int SPI_GETSCREENSAVERRUNNING = 114;

const int SPI_GETDESKWALLPAPER = 115;

const int SPI_GETAUDIODESCRIPTION = 116;

const int SPI_SETAUDIODESCRIPTION = 117;

const int SPI_GETSCREENSAVESECURE = 118;

const int SPI_SETSCREENSAVESECURE = 119;

const int SPI_GETHUNGAPPTIMEOUT = 120;

const int SPI_SETHUNGAPPTIMEOUT = 121;

const int SPI_GETWAITTOKILLTIMEOUT = 122;

const int SPI_SETWAITTOKILLTIMEOUT = 123;

const int SPI_GETWAITTOKILLSERVICETIMEOUT = 124;

const int SPI_SETWAITTOKILLSERVICETIMEOUT = 125;

const int SPI_GETMOUSEDOCKTHRESHOLD = 126;

const int SPI_SETMOUSEDOCKTHRESHOLD = 127;

const int SPI_GETPENDOCKTHRESHOLD = 128;

const int SPI_SETPENDOCKTHRESHOLD = 129;

const int SPI_GETWINARRANGING = 130;

const int SPI_SETWINARRANGING = 131;

const int SPI_GETMOUSEDRAGOUTTHRESHOLD = 132;

const int SPI_SETMOUSEDRAGOUTTHRESHOLD = 133;

const int SPI_GETPENDRAGOUTTHRESHOLD = 134;

const int SPI_SETPENDRAGOUTTHRESHOLD = 135;

const int SPI_GETMOUSESIDEMOVETHRESHOLD = 136;

const int SPI_SETMOUSESIDEMOVETHRESHOLD = 137;

const int SPI_GETPENSIDEMOVETHRESHOLD = 138;

const int SPI_SETPENSIDEMOVETHRESHOLD = 139;

const int SPI_GETDRAGFROMMAXIMIZE = 140;

const int SPI_SETDRAGFROMMAXIMIZE = 141;

const int SPI_GETSNAPSIZING = 142;

const int SPI_SETSNAPSIZING = 143;

const int SPI_GETDOCKMOVING = 144;

const int SPI_SETDOCKMOVING = 145;

const int MAX_TOUCH_PREDICTION_FILTER_TAPS = 3;

const int TOUCHPREDICTIONPARAMETERS_DEFAULT_LATENCY = 8;

const int TOUCHPREDICTIONPARAMETERS_DEFAULT_SAMPLETIME = 8;

const int TOUCHPREDICTIONPARAMETERS_DEFAULT_USE_HW_TIMESTAMP = 1;

const double TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_DELTA =
    0.0010000000474974513;

const double TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_MIN =
    0.8999999761581421;

const double TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_MAX =
    0.9990000128746033;

const double TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_LEARNING_RATE =
    0.0010000000474974513;

const double TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_EXPO_SMOOTH_ALPHA =
    0.9900000095367432;

const int SPI_GETTOUCHPREDICTIONPARAMETERS = 156;

const int SPI_SETTOUCHPREDICTIONPARAMETERS = 157;

const int MAX_LOGICALDPIOVERRIDE = 2;

const int MIN_LOGICALDPIOVERRIDE = -2;

const int SPI_GETLOGICALDPIOVERRIDE = 158;

const int SPI_SETLOGICALDPIOVERRIDE = 159;

const int SPI_GETMENURECT = 162;

const int SPI_SETMENURECT = 163;

const int SPI_GETACTIVEWINDOWTRACKING = 4096;

const int SPI_SETACTIVEWINDOWTRACKING = 4097;

const int SPI_GETMENUANIMATION = 4098;

const int SPI_SETMENUANIMATION = 4099;

const int SPI_GETCOMBOBOXANIMATION = 4100;

const int SPI_SETCOMBOBOXANIMATION = 4101;

const int SPI_GETLISTBOXSMOOTHSCROLLING = 4102;

const int SPI_SETLISTBOXSMOOTHSCROLLING = 4103;

const int SPI_GETGRADIENTCAPTIONS = 4104;

const int SPI_SETGRADIENTCAPTIONS = 4105;

const int SPI_GETKEYBOARDCUES = 4106;

const int SPI_SETKEYBOARDCUES = 4107;

const int SPI_GETMENUUNDERLINES = 4106;

const int SPI_SETMENUUNDERLINES = 4107;

const int SPI_GETACTIVEWNDTRKZORDER = 4108;

const int SPI_SETACTIVEWNDTRKZORDER = 4109;

const int SPI_GETHOTTRACKING = 4110;

const int SPI_SETHOTTRACKING = 4111;

const int SPI_GETMENUFADE = 4114;

const int SPI_SETMENUFADE = 4115;

const int SPI_GETSELECTIONFADE = 4116;

const int SPI_SETSELECTIONFADE = 4117;

const int SPI_GETTOOLTIPANIMATION = 4118;

const int SPI_SETTOOLTIPANIMATION = 4119;

const int SPI_GETTOOLTIPFADE = 4120;

const int SPI_SETTOOLTIPFADE = 4121;

const int SPI_GETCURSORSHADOW = 4122;

const int SPI_SETCURSORSHADOW = 4123;

const int SPI_GETMOUSESONAR = 4124;

const int SPI_SETMOUSESONAR = 4125;

const int SPI_GETMOUSECLICKLOCK = 4126;

const int SPI_SETMOUSECLICKLOCK = 4127;

const int SPI_GETMOUSEVANISH = 4128;

const int SPI_SETMOUSEVANISH = 4129;

const int SPI_GETFLATMENU = 4130;

const int SPI_SETFLATMENU = 4131;

const int SPI_GETDROPSHADOW = 4132;

const int SPI_SETDROPSHADOW = 4133;

const int SPI_GETBLOCKSENDINPUTRESETS = 4134;

const int SPI_SETBLOCKSENDINPUTRESETS = 4135;

const int SPI_GETUIEFFECTS = 4158;

const int SPI_SETUIEFFECTS = 4159;

const int SPI_GETDISABLEOVERLAPPEDCONTENT = 4160;

const int SPI_SETDISABLEOVERLAPPEDCONTENT = 4161;

const int SPI_GETCLIENTAREAANIMATION = 4162;

const int SPI_SETCLIENTAREAANIMATION = 4163;

const int SPI_GETCLEARTYPE = 4168;

const int SPI_SETCLEARTYPE = 4169;

const int SPI_GETSPEECHRECOGNITION = 4170;

const int SPI_SETSPEECHRECOGNITION = 4171;

const int SPI_GETCARETBROWSING = 4172;

const int SPI_SETCARETBROWSING = 4173;

const int SPI_GETTHREADLOCALINPUTSETTINGS = 4174;

const int SPI_SETTHREADLOCALINPUTSETTINGS = 4175;

const int SPI_GETSYSTEMLANGUAGEBAR = 4176;

const int SPI_SETSYSTEMLANGUAGEBAR = 4177;

const int SPI_GETFOREGROUNDLOCKTIMEOUT = 8192;

const int SPI_SETFOREGROUNDLOCKTIMEOUT = 8193;

const int SPI_GETACTIVEWNDTRKTIMEOUT = 8194;

const int SPI_SETACTIVEWNDTRKTIMEOUT = 8195;

const int SPI_GETFOREGROUNDFLASHCOUNT = 8196;

const int SPI_SETFOREGROUNDFLASHCOUNT = 8197;

const int SPI_GETCARETWIDTH = 8198;

const int SPI_SETCARETWIDTH = 8199;

const int SPI_GETMOUSECLICKLOCKTIME = 8200;

const int SPI_SETMOUSECLICKLOCKTIME = 8201;

const int SPI_GETFONTSMOOTHINGTYPE = 8202;

const int SPI_SETFONTSMOOTHINGTYPE = 8203;

const int FE_FONTSMOOTHINGSTANDARD = 1;

const int FE_FONTSMOOTHINGCLEARTYPE = 2;

const int SPI_GETFONTSMOOTHINGCONTRAST = 8204;

const int SPI_SETFONTSMOOTHINGCONTRAST = 8205;

const int SPI_GETFOCUSBORDERWIDTH = 8206;

const int SPI_SETFOCUSBORDERWIDTH = 8207;

const int SPI_GETFOCUSBORDERHEIGHT = 8208;

const int SPI_SETFOCUSBORDERHEIGHT = 8209;

const int SPI_GETFONTSMOOTHINGORIENTATION = 8210;

const int SPI_SETFONTSMOOTHINGORIENTATION = 8211;

const int FE_FONTSMOOTHINGORIENTATIONBGR = 0;

const int FE_FONTSMOOTHINGORIENTATIONRGB = 1;

const int SPI_GETMINIMUMHITRADIUS = 8212;

const int SPI_SETMINIMUMHITRADIUS = 8213;

const int SPI_GETMESSAGEDURATION = 8214;

const int SPI_SETMESSAGEDURATION = 8215;

const int SPI_GETCONTACTVISUALIZATION = 8216;

const int SPI_SETCONTACTVISUALIZATION = 8217;

const int CONTACTVISUALIZATION_OFF = 0;

const int CONTACTVISUALIZATION_ON = 1;

const int CONTACTVISUALIZATION_PRESENTATIONMODE = 2;

const int SPI_GETGESTUREVISUALIZATION = 8218;

const int SPI_SETGESTUREVISUALIZATION = 8219;

const int GESTUREVISUALIZATION_OFF = 0;

const int GESTUREVISUALIZATION_ON = 31;

const int GESTUREVISUALIZATION_TAP = 1;

const int GESTUREVISUALIZATION_DOUBLETAP = 2;

const int GESTUREVISUALIZATION_PRESSANDTAP = 4;

const int GESTUREVISUALIZATION_PRESSANDHOLD = 8;

const int GESTUREVISUALIZATION_RIGHTTAP = 16;

const int SPI_GETMOUSEWHEELROUTING = 8220;

const int SPI_SETMOUSEWHEELROUTING = 8221;

const int MOUSEWHEEL_ROUTING_FOCUS = 0;

const int MOUSEWHEEL_ROUTING_HYBRID = 1;

const int MOUSEWHEEL_ROUTING_MOUSE_POS = 2;

const int SPI_GETPENVISUALIZATION = 8222;

const int SPI_SETPENVISUALIZATION = 8223;

const int PENVISUALIZATION_ON = 35;

const int PENVISUALIZATION_OFF = 0;

const int PENVISUALIZATION_TAP = 1;

const int PENVISUALIZATION_DOUBLETAP = 2;

const int PENVISUALIZATION_CURSOR = 32;

const int SPI_GETPENARBITRATIONTYPE = 8224;

const int SPI_SETPENARBITRATIONTYPE = 8225;

const int PENARBITRATIONTYPE_NONE = 0;

const int PENARBITRATIONTYPE_WIN8 = 1;

const int PENARBITRATIONTYPE_FIS = 2;

const int PENARBITRATIONTYPE_SPT = 3;

const int PENARBITRATIONTYPE_MAX = 4;

const int SPI_GETCARETTIMEOUT = 8226;

const int SPI_SETCARETTIMEOUT = 8227;

const int SPI_GETHANDEDNESS = 8228;

const int SPI_SETHANDEDNESS = 8229;

const int SPIF_UPDATEINIFILE = 1;

const int SPIF_SENDWININICHANGE = 2;

const int SPIF_SENDCHANGE = 2;

const int METRICS_USEDEFAULT = -1;

const int ARW_BOTTOMLEFT = 0;

const int ARW_BOTTOMRIGHT = 1;

const int ARW_TOPLEFT = 2;

const int ARW_TOPRIGHT = 3;

const int ARW_STARTMASK = 3;

const int ARW_STARTRIGHT = 1;

const int ARW_STARTTOP = 2;

const int ARW_LEFT = 0;

const int ARW_RIGHT = 0;

const int ARW_UP = 4;

const int ARW_DOWN = 4;

const int ARW_HIDE = 8;

const int SERKF_SERIALKEYSON = 1;

const int SERKF_AVAILABLE = 2;

const int SERKF_INDICATOR = 4;

const int HCF_HIGHCONTRASTON = 1;

const int HCF_AVAILABLE = 2;

const int HCF_HOTKEYACTIVE = 4;

const int HCF_CONFIRMHOTKEY = 8;

const int HCF_HOTKEYSOUND = 16;

const int HCF_INDICATOR = 32;

const int HCF_HOTKEYAVAILABLE = 64;

const int HCF_LOGONDESKTOP = 256;

const int HCF_DEFAULTDESKTOP = 512;

const int HCF_OPTION_NOTHEMECHANGE = 4096;

const int CDS_UPDATEREGISTRY = 1;

const int CDS_TEST = 2;

const int CDS_FULLSCREEN = 4;

const int CDS_GLOBAL = 8;

const int CDS_SET_PRIMARY = 16;

const int CDS_VIDEOPARAMETERS = 32;

const int CDS_ENABLE_UNSAFE_MODES = 256;

const int CDS_DISABLE_UNSAFE_MODES = 512;

const int CDS_RESET = 1073741824;

const int CDS_RESET_EX = 536870912;

const int CDS_NORESET = 268435456;

const int VP_COMMAND_GET = 1;

const int VP_COMMAND_SET = 2;

const int VP_FLAGS_TV_MODE = 1;

const int VP_FLAGS_TV_STANDARD = 2;

const int VP_FLAGS_FLICKER = 4;

const int VP_FLAGS_OVERSCAN = 8;

const int VP_FLAGS_MAX_UNSCALED = 16;

const int VP_FLAGS_POSITION = 32;

const int VP_FLAGS_BRIGHTNESS = 64;

const int VP_FLAGS_CONTRAST = 128;

const int VP_FLAGS_COPYPROTECT = 256;

const int VP_MODE_WIN_GRAPHICS = 1;

const int VP_MODE_TV_PLAYBACK = 2;

const int VP_TV_STANDARD_NTSC_M = 1;

const int VP_TV_STANDARD_NTSC_M_J = 2;

const int VP_TV_STANDARD_PAL_B = 4;

const int VP_TV_STANDARD_PAL_D = 8;

const int VP_TV_STANDARD_PAL_H = 16;

const int VP_TV_STANDARD_PAL_I = 32;

const int VP_TV_STANDARD_PAL_M = 64;

const int VP_TV_STANDARD_PAL_N = 128;

const int VP_TV_STANDARD_SECAM_B = 256;

const int VP_TV_STANDARD_SECAM_D = 512;

const int VP_TV_STANDARD_SECAM_G = 1024;

const int VP_TV_STANDARD_SECAM_H = 2048;

const int VP_TV_STANDARD_SECAM_K = 4096;

const int VP_TV_STANDARD_SECAM_K1 = 8192;

const int VP_TV_STANDARD_SECAM_L = 16384;

const int VP_TV_STANDARD_WIN_VGA = 32768;

const int VP_TV_STANDARD_NTSC_433 = 65536;

const int VP_TV_STANDARD_PAL_G = 131072;

const int VP_TV_STANDARD_PAL_60 = 262144;

const int VP_TV_STANDARD_SECAM_L1 = 524288;

const int VP_CP_TYPE_APS_TRIGGER = 1;

const int VP_CP_TYPE_MACROVISION = 2;

const int VP_CP_CMD_ACTIVATE = 1;

const int VP_CP_CMD_DEACTIVATE = 2;

const int VP_CP_CMD_CHANGE = 4;

const int DISP_CHANGE_SUCCESSFUL = 0;

const int DISP_CHANGE_RESTART = 1;

const int DISP_CHANGE_FAILED = -1;

const int DISP_CHANGE_BADMODE = -2;

const int DISP_CHANGE_NOTUPDATED = -3;

const int DISP_CHANGE_BADFLAGS = -4;

const int DISP_CHANGE_BADPARAM = -5;

const int DISP_CHANGE_BADDUALVIEW = -6;

const int ENUM_CURRENT_SETTINGS = 4294967295;

const int ENUM_REGISTRY_SETTINGS = 4294967294;

const int EDS_RAWMODE = 2;

const int EDS_ROTATEDMODE = 4;

const int EDD_GET_DEVICE_INTERFACE_NAME = 1;

const int FKF_FILTERKEYSON = 1;

const int FKF_AVAILABLE = 2;

const int FKF_HOTKEYACTIVE = 4;

const int FKF_CONFIRMHOTKEY = 8;

const int FKF_HOTKEYSOUND = 16;

const int FKF_INDICATOR = 32;

const int FKF_CLICKON = 64;

const int SKF_STICKYKEYSON = 1;

const int SKF_AVAILABLE = 2;

const int SKF_HOTKEYACTIVE = 4;

const int SKF_CONFIRMHOTKEY = 8;

const int SKF_HOTKEYSOUND = 16;

const int SKF_INDICATOR = 32;

const int SKF_AUDIBLEFEEDBACK = 64;

const int SKF_TRISTATE = 128;

const int SKF_TWOKEYSOFF = 256;

const int SKF_LALTLATCHED = 268435456;

const int SKF_LCTLLATCHED = 67108864;

const int SKF_LSHIFTLATCHED = 16777216;

const int SKF_RALTLATCHED = 536870912;

const int SKF_RCTLLATCHED = 134217728;

const int SKF_RSHIFTLATCHED = 33554432;

const int SKF_LWINLATCHED = 1073741824;

const int SKF_RWINLATCHED = 2147483648;

const int SKF_LALTLOCKED = 1048576;

const int SKF_LCTLLOCKED = 262144;

const int SKF_LSHIFTLOCKED = 65536;

const int SKF_RALTLOCKED = 2097152;

const int SKF_RCTLLOCKED = 524288;

const int SKF_RSHIFTLOCKED = 131072;

const int SKF_LWINLOCKED = 4194304;

const int SKF_RWINLOCKED = 8388608;

const int MKF_MOUSEKEYSON = 1;

const int MKF_AVAILABLE = 2;

const int MKF_HOTKEYACTIVE = 4;

const int MKF_CONFIRMHOTKEY = 8;

const int MKF_HOTKEYSOUND = 16;

const int MKF_INDICATOR = 32;

const int MKF_MODIFIERS = 64;

const int MKF_REPLACENUMBERS = 128;

const int MKF_LEFTBUTTONSEL = 268435456;

const int MKF_RIGHTBUTTONSEL = 536870912;

const int MKF_LEFTBUTTONDOWN = 16777216;

const int MKF_RIGHTBUTTONDOWN = 33554432;

const int MKF_MOUSEMODE = 2147483648;

const int ATF_TIMEOUTON = 1;

const int ATF_ONOFFFEEDBACK = 2;

const int SSGF_NONE = 0;

const int SSGF_DISPLAY = 3;

const int SSTF_NONE = 0;

const int SSTF_CHARS = 1;

const int SSTF_BORDER = 2;

const int SSTF_DISPLAY = 3;

const int SSWF_NONE = 0;

const int SSWF_TITLE = 1;

const int SSWF_WINDOW = 2;

const int SSWF_DISPLAY = 3;

const int SSWF_CUSTOM = 4;

const int SSF_SOUNDSENTRYON = 1;

const int SSF_AVAILABLE = 2;

const int SSF_INDICATOR = 4;

const int TKF_TOGGLEKEYSON = 1;

const int TKF_AVAILABLE = 2;

const int TKF_HOTKEYACTIVE = 4;

const int TKF_CONFIRMHOTKEY = 8;

const int TKF_HOTKEYSOUND = 16;

const int TKF_INDICATOR = 32;

const int SLE_ERROR = 1;

const int SLE_MINORERROR = 2;

const int SLE_WARNING = 3;

const int MONITOR_DEFAULTTONULL = 0;

const int MONITOR_DEFAULTTOPRIMARY = 1;

const int MONITOR_DEFAULTTONEAREST = 2;

const int MONITORINFOF_PRIMARY = 1;

const int WINEVENT_OUTOFCONTEXT = 0;

const int WINEVENT_SKIPOWNTHREAD = 1;

const int WINEVENT_SKIPOWNPROCESS = 2;

const int WINEVENT_INCONTEXT = 4;

const int CHILDID_SELF = 0;

const int INDEXID_OBJECT = 0;

const int INDEXID_CONTAINER = 0;

const int OBJID_WINDOW = 0;

const int OBJID_SYSMENU = -1;

const int OBJID_TITLEBAR = -2;

const int OBJID_MENU = -3;

const int OBJID_CLIENT = -4;

const int OBJID_VSCROLL = -5;

const int OBJID_HSCROLL = -6;

const int OBJID_SIZEGRIP = -7;

const int OBJID_CARET = -8;

const int OBJID_CURSOR = -9;

const int OBJID_ALERT = -10;

const int OBJID_SOUND = -11;

const int OBJID_QUERYCLASSNAMEIDX = -12;

const int OBJID_NATIVEOM = -16;

const int EVENT_MIN = 1;

const int EVENT_MAX = 2147483647;

const int EVENT_SYSTEM_SOUND = 1;

const int EVENT_SYSTEM_ALERT = 2;

const int EVENT_SYSTEM_FOREGROUND = 3;

const int EVENT_SYSTEM_MENUSTART = 4;

const int EVENT_SYSTEM_MENUEND = 5;

const int EVENT_SYSTEM_MENUPOPUPSTART = 6;

const int EVENT_SYSTEM_MENUPOPUPEND = 7;

const int EVENT_SYSTEM_CAPTURESTART = 8;

const int EVENT_SYSTEM_CAPTUREEND = 9;

const int EVENT_SYSTEM_MOVESIZESTART = 10;

const int EVENT_SYSTEM_MOVESIZEEND = 11;

const int EVENT_SYSTEM_CONTEXTHELPSTART = 12;

const int EVENT_SYSTEM_CONTEXTHELPEND = 13;

const int EVENT_SYSTEM_DRAGDROPSTART = 14;

const int EVENT_SYSTEM_DRAGDROPEND = 15;

const int EVENT_SYSTEM_DIALOGSTART = 16;

const int EVENT_SYSTEM_DIALOGEND = 17;

const int EVENT_SYSTEM_SCROLLINGSTART = 18;

const int EVENT_SYSTEM_SCROLLINGEND = 19;

const int EVENT_SYSTEM_SWITCHSTART = 20;

const int EVENT_SYSTEM_SWITCHEND = 21;

const int EVENT_SYSTEM_MINIMIZESTART = 22;

const int EVENT_SYSTEM_MINIMIZEEND = 23;

const int EVENT_SYSTEM_DESKTOPSWITCH = 32;

const int EVENT_SYSTEM_SWITCHER_APPGRABBED = 36;

const int EVENT_SYSTEM_SWITCHER_APPOVERTARGET = 37;

const int EVENT_SYSTEM_SWITCHER_APPDROPPED = 38;

const int EVENT_SYSTEM_SWITCHER_CANCELLED = 39;

const int EVENT_SYSTEM_IME_KEY_NOTIFICATION = 41;

const int EVENT_SYSTEM_END = 255;

const int EVENT_OEM_DEFINED_START = 257;

const int EVENT_OEM_DEFINED_END = 511;

const int EVENT_UIA_EVENTID_START = 19968;

const int EVENT_UIA_EVENTID_END = 20223;

const int EVENT_UIA_PROPID_START = 29952;

const int EVENT_UIA_PROPID_END = 30207;

const int EVENT_CONSOLE_CARET = 16385;

const int EVENT_CONSOLE_UPDATE_REGION = 16386;

const int EVENT_CONSOLE_UPDATE_SIMPLE = 16387;

const int EVENT_CONSOLE_UPDATE_SCROLL = 16388;

const int EVENT_CONSOLE_LAYOUT = 16389;

const int EVENT_CONSOLE_START_APPLICATION = 16390;

const int EVENT_CONSOLE_END_APPLICATION = 16391;

const int CONSOLE_APPLICATION_16BIT = 0;

const int CONSOLE_CARET_SELECTION = 1;

const int CONSOLE_CARET_VISIBLE = 2;

const int EVENT_CONSOLE_END = 16639;

const int EVENT_OBJECT_CREATE = 32768;

const int EVENT_OBJECT_DESTROY = 32769;

const int EVENT_OBJECT_SHOW = 32770;

const int EVENT_OBJECT_HIDE = 32771;

const int EVENT_OBJECT_REORDER = 32772;

const int EVENT_OBJECT_FOCUS = 32773;

const int EVENT_OBJECT_SELECTION = 32774;

const int EVENT_OBJECT_SELECTIONADD = 32775;

const int EVENT_OBJECT_SELECTIONREMOVE = 32776;

const int EVENT_OBJECT_SELECTIONWITHIN = 32777;

const int EVENT_OBJECT_STATECHANGE = 32778;

const int EVENT_OBJECT_LOCATIONCHANGE = 32779;

const int EVENT_OBJECT_NAMECHANGE = 32780;

const int EVENT_OBJECT_DESCRIPTIONCHANGE = 32781;

const int EVENT_OBJECT_VALUECHANGE = 32782;

const int EVENT_OBJECT_PARENTCHANGE = 32783;

const int EVENT_OBJECT_HELPCHANGE = 32784;

const int EVENT_OBJECT_DEFACTIONCHANGE = 32785;

const int EVENT_OBJECT_ACCELERATORCHANGE = 32786;

const int EVENT_OBJECT_INVOKED = 32787;

const int EVENT_OBJECT_TEXTSELECTIONCHANGED = 32788;

const int EVENT_OBJECT_CONTENTSCROLLED = 32789;

const int EVENT_SYSTEM_ARRANGMENTPREVIEW = 32790;

const int EVENT_OBJECT_CLOAKED = 32791;

const int EVENT_OBJECT_UNCLOAKED = 32792;

const int EVENT_OBJECT_LIVEREGIONCHANGED = 32793;

const int EVENT_OBJECT_HOSTEDOBJECTSINVALIDATED = 32800;

const int EVENT_OBJECT_DRAGSTART = 32801;

const int EVENT_OBJECT_DRAGCANCEL = 32802;

const int EVENT_OBJECT_DRAGCOMPLETE = 32803;

const int EVENT_OBJECT_DRAGENTER = 32804;

const int EVENT_OBJECT_DRAGLEAVE = 32805;

const int EVENT_OBJECT_DRAGDROPPED = 32806;

const int EVENT_OBJECT_IME_SHOW = 32807;

const int EVENT_OBJECT_IME_HIDE = 32808;

const int EVENT_OBJECT_IME_CHANGE = 32809;

const int EVENT_OBJECT_TEXTEDIT_CONVERSIONTARGETCHANGED = 32816;

const int EVENT_OBJECT_END = 33023;

const int EVENT_AIA_START = 40960;

const int EVENT_AIA_END = 45055;

const int SOUND_SYSTEM_STARTUP = 1;

const int SOUND_SYSTEM_SHUTDOWN = 2;

const int SOUND_SYSTEM_BEEP = 3;

const int SOUND_SYSTEM_ERROR = 4;

const int SOUND_SYSTEM_QUESTION = 5;

const int SOUND_SYSTEM_WARNING = 6;

const int SOUND_SYSTEM_INFORMATION = 7;

const int SOUND_SYSTEM_MAXIMIZE = 8;

const int SOUND_SYSTEM_MINIMIZE = 9;

const int SOUND_SYSTEM_RESTOREUP = 10;

const int SOUND_SYSTEM_RESTOREDOWN = 11;

const int SOUND_SYSTEM_APPSTART = 12;

const int SOUND_SYSTEM_FAULT = 13;

const int SOUND_SYSTEM_APPEND = 14;

const int SOUND_SYSTEM_MENUCOMMAND = 15;

const int SOUND_SYSTEM_MENUPOPUP = 16;

const int CSOUND_SYSTEM = 16;

const int ALERT_SYSTEM_INFORMATIONAL = 1;

const int ALERT_SYSTEM_WARNING = 2;

const int ALERT_SYSTEM_ERROR = 3;

const int ALERT_SYSTEM_QUERY = 4;

const int ALERT_SYSTEM_CRITICAL = 5;

const int CALERT_SYSTEM = 6;

const int GUI_CARETBLINKING = 1;

const int GUI_INMOVESIZE = 2;

const int GUI_INMENUMODE = 4;

const int GUI_SYSTEMMENUMODE = 8;

const int GUI_POPUPMENUMODE = 16;

const int GUI_16BITTASK = 0;

const int USER_DEFAULT_SCREEN_DPI = 96;

const int STATE_SYSTEM_UNAVAILABLE = 1;

const int STATE_SYSTEM_SELECTED = 2;

const int STATE_SYSTEM_FOCUSED = 4;

const int STATE_SYSTEM_PRESSED = 8;

const int STATE_SYSTEM_CHECKED = 16;

const int STATE_SYSTEM_MIXED = 32;

const int STATE_SYSTEM_INDETERMINATE = 32;

const int STATE_SYSTEM_READONLY = 64;

const int STATE_SYSTEM_HOTTRACKED = 128;

const int STATE_SYSTEM_DEFAULT = 256;

const int STATE_SYSTEM_EXPANDED = 512;

const int STATE_SYSTEM_COLLAPSED = 1024;

const int STATE_SYSTEM_BUSY = 2048;

const int STATE_SYSTEM_FLOATING = 4096;

const int STATE_SYSTEM_MARQUEED = 8192;

const int STATE_SYSTEM_ANIMATED = 16384;

const int STATE_SYSTEM_INVISIBLE = 32768;

const int STATE_SYSTEM_OFFSCREEN = 65536;

const int STATE_SYSTEM_SIZEABLE = 131072;

const int STATE_SYSTEM_MOVEABLE = 262144;

const int STATE_SYSTEM_SELFVOICING = 524288;

const int STATE_SYSTEM_FOCUSABLE = 1048576;

const int STATE_SYSTEM_SELECTABLE = 2097152;

const int STATE_SYSTEM_LINKED = 4194304;

const int STATE_SYSTEM_TRAVERSED = 8388608;

const int STATE_SYSTEM_MULTISELECTABLE = 16777216;

const int STATE_SYSTEM_EXTSELECTABLE = 33554432;

const int STATE_SYSTEM_ALERT_LOW = 67108864;

const int STATE_SYSTEM_ALERT_MEDIUM = 134217728;

const int STATE_SYSTEM_ALERT_HIGH = 268435456;

const int STATE_SYSTEM_PROTECTED = 536870912;

const int STATE_SYSTEM_VALID = 1073741823;

const int CCHILDREN_TITLEBAR = 5;

const int CCHILDREN_SCROLLBAR = 5;

const int CURSOR_SHOWING = 1;

const int CURSOR_SUPPRESSED = 2;

const int WS_ACTIVECAPTION = 1;

const int GA_PARENT = 1;

const int GA_ROOT = 2;

const int GA_ROOTOWNER = 3;

const int RIM_INPUT = 0;

const int RIM_INPUTSINK = 1;

const int RIM_TYPEMOUSE = 0;

const int RIM_TYPEKEYBOARD = 1;

const int RIM_TYPEHID = 2;

const int RIM_TYPEMAX = 2;

const int RI_MOUSE_LEFT_BUTTON_DOWN = 1;

const int RI_MOUSE_LEFT_BUTTON_UP = 2;

const int RI_MOUSE_RIGHT_BUTTON_DOWN = 4;

const int RI_MOUSE_RIGHT_BUTTON_UP = 8;

const int RI_MOUSE_MIDDLE_BUTTON_DOWN = 16;

const int RI_MOUSE_MIDDLE_BUTTON_UP = 32;

const int RI_MOUSE_BUTTON_1_DOWN = 1;

const int RI_MOUSE_BUTTON_1_UP = 2;

const int RI_MOUSE_BUTTON_2_DOWN = 4;

const int RI_MOUSE_BUTTON_2_UP = 8;

const int RI_MOUSE_BUTTON_3_DOWN = 16;

const int RI_MOUSE_BUTTON_3_UP = 32;

const int RI_MOUSE_BUTTON_4_DOWN = 64;

const int RI_MOUSE_BUTTON_4_UP = 128;

const int RI_MOUSE_BUTTON_5_DOWN = 256;

const int RI_MOUSE_BUTTON_5_UP = 512;

const int RI_MOUSE_WHEEL = 1024;

const int RI_MOUSE_HWHEEL = 2048;

const int MOUSE_MOVE_RELATIVE = 0;

const int MOUSE_MOVE_ABSOLUTE = 1;

const int MOUSE_VIRTUAL_DESKTOP = 2;

const int MOUSE_ATTRIBUTES_CHANGED = 4;

const int MOUSE_MOVE_NOCOALESCE = 8;

const int KEYBOARD_OVERRUN_MAKE_CODE = 255;

const int RI_KEY_MAKE = 0;

const int RI_KEY_BREAK = 1;

const int RI_KEY_E0 = 2;

const int RI_KEY_E1 = 4;

const int RI_KEY_TERMSRV_SET_LED = 8;

const int RI_KEY_TERMSRV_SHADOW = 16;

const int RID_INPUT = 268435459;

const int RID_HEADER = 268435461;

const int RIDI_PREPARSEDDATA = 536870917;

const int RIDI_DEVICENAME = 536870919;

const int RIDI_DEVICEINFO = 536870923;

const int RIDEV_REMOVE = 1;

const int RIDEV_EXCLUDE = 16;

const int RIDEV_PAGEONLY = 32;

const int RIDEV_NOLEGACY = 48;

const int RIDEV_INPUTSINK = 256;

const int RIDEV_CAPTUREMOUSE = 512;

const int RIDEV_NOHOTKEYS = 512;

const int RIDEV_APPKEYS = 1024;

const int RIDEV_EXINPUTSINK = 4096;

const int RIDEV_DEVNOTIFY = 8192;

const int RIDEV_EXMODEMASK = 240;

const int GIDC_ARRIVAL = 1;

const int GIDC_REMOVAL = 2;

const int POINTER_DEVICE_PRODUCT_STRING_MAX = 520;

const int PDC_ARRIVAL = 1;

const int PDC_REMOVAL = 2;

const int PDC_ORIENTATION_0 = 4;

const int PDC_ORIENTATION_90 = 8;

const int PDC_ORIENTATION_180 = 16;

const int PDC_ORIENTATION_270 = 32;

const int PDC_MODE_DEFAULT = 64;

const int PDC_MODE_CENTERED = 128;

const int PDC_MAPPING_CHANGE = 256;

const int PDC_RESOLUTION = 512;

const int PDC_ORIGIN = 1024;

const int PDC_MODE_ASPECTRATIOPRESERVED = 2048;

const int MSGFLT_ADD = 1;

const int MSGFLT_REMOVE = 2;

const int MSGFLTINFO_NONE = 0;

const int MSGFLTINFO_ALREADYALLOWED_FORWND = 1;

const int MSGFLTINFO_ALREADYDISALLOWED_FORWND = 2;

const int MSGFLTINFO_ALLOWED_HIGHER = 3;

const int MSGFLT_RESET = 0;

const int MSGFLT_ALLOW = 1;

const int MSGFLT_DISALLOW = 2;

const int GF_BEGIN = 1;

const int GF_INERTIA = 2;

const int GF_END = 4;

const int GID_BEGIN = 1;

const int GID_END = 2;

const int GID_ZOOM = 3;

const int GID_PAN = 4;

const int GID_ROTATE = 5;

const int GID_TWOFINGERTAP = 6;

const int GID_PRESSANDTAP = 7;

const int GID_ROLLOVER = 7;

const int GC_ALLGESTURES = 1;

const int GC_ZOOM = 1;

const int GC_PAN = 1;

const int GC_PAN_WITH_SINGLE_FINGER_VERTICALLY = 2;

const int GC_PAN_WITH_SINGLE_FINGER_HORIZONTALLY = 4;

const int GC_PAN_WITH_GUTTER = 8;

const int GC_PAN_WITH_INERTIA = 16;

const int GC_ROTATE = 1;

const int GC_TWOFINGERTAP = 1;

const int GC_PRESSANDTAP = 1;

const int GC_ROLLOVER = 1;

const int GESTURECONFIGMAXCOUNT = 256;

const int GCF_INCLUDE_ANCESTORS = 1;

const int NID_INTEGRATED_TOUCH = 1;

const int NID_EXTERNAL_TOUCH = 2;

const int NID_INTEGRATED_PEN = 4;

const int NID_EXTERNAL_PEN = 8;

const int NID_MULTI_INPUT = 64;

const int NID_READY = 128;

const int MAX_STR_BLOCKREASON = 256;

const int MAX_LEADBYTES = 12;

const int MAX_DEFAULTCHAR = 2;

const int HIGH_SURROGATE_START = 55296;

const int HIGH_SURROGATE_END = 56319;

const int LOW_SURROGATE_START = 56320;

const int LOW_SURROGATE_END = 57343;

const int MB_PRECOMPOSED = 1;

const int MB_COMPOSITE = 2;

const int MB_USEGLYPHCHARS = 4;

const int MB_ERR_INVALID_CHARS = 8;

const int WC_COMPOSITECHECK = 512;

const int WC_DISCARDNS = 16;

const int WC_SEPCHARS = 32;

const int WC_DEFAULTCHAR = 64;

const int WC_ERR_INVALID_CHARS = 128;

const int WC_NO_BEST_FIT_CHARS = 1024;

const int CT_CTYPE1 = 1;

const int CT_CTYPE2 = 2;

const int CT_CTYPE3 = 4;

const int C1_UPPER = 1;

const int C1_LOWER = 2;

const int C1_DIGIT = 4;

const int C1_SPACE = 8;

const int C1_PUNCT = 16;

const int C1_CNTRL = 32;

const int C1_BLANK = 64;

const int C1_XDIGIT = 128;

const int C1_ALPHA = 256;

const int C1_DEFINED = 512;

const int C2_LEFTTORIGHT = 1;

const int C2_RIGHTTOLEFT = 2;

const int C2_EUROPENUMBER = 3;

const int C2_EUROPESEPARATOR = 4;

const int C2_EUROPETERMINATOR = 5;

const int C2_ARABICNUMBER = 6;

const int C2_COMMONSEPARATOR = 7;

const int C2_BLOCKSEPARATOR = 8;

const int C2_SEGMENTSEPARATOR = 9;

const int C2_WHITESPACE = 10;

const int C2_OTHERNEUTRAL = 11;

const int C2_NOTAPPLICABLE = 0;

const int C3_NONSPACING = 1;

const int C3_DIACRITIC = 2;

const int C3_VOWELMARK = 4;

const int C3_SYMBOL = 8;

const int C3_KATAKANA = 16;

const int C3_HIRAGANA = 32;

const int C3_HALFWIDTH = 64;

const int C3_FULLWIDTH = 128;

const int C3_IDEOGRAPH = 256;

const int C3_KASHIDA = 512;

const int C3_LEXICAL = 1024;

const int C3_HIGHSURROGATE = 2048;

const int C3_LOWSURROGATE = 4096;

const int C3_ALPHA = 32768;

const int C3_NOTAPPLICABLE = 0;

const int NORM_IGNORECASE = 1;

const int NORM_IGNORENONSPACE = 2;

const int NORM_IGNORESYMBOLS = 4;

const int LINGUISTIC_IGNORECASE = 16;

const int LINGUISTIC_IGNOREDIACRITIC = 32;

const int NORM_IGNOREKANATYPE = 65536;

const int NORM_IGNOREWIDTH = 131072;

const int NORM_LINGUISTIC_CASING = 134217728;

const int MAP_FOLDCZONE = 16;

const int MAP_PRECOMPOSED = 32;

const int MAP_COMPOSITE = 64;

const int MAP_FOLDDIGITS = 128;

const int MAP_EXPAND_LIGATURES = 8192;

const int LCMAP_LOWERCASE = 256;

const int LCMAP_UPPERCASE = 512;

const int LCMAP_TITLECASE = 768;

const int LCMAP_SORTKEY = 1024;

const int LCMAP_BYTEREV = 2048;

const int LCMAP_HIRAGANA = 1048576;

const int LCMAP_KATAKANA = 2097152;

const int LCMAP_HALFWIDTH = 4194304;

const int LCMAP_FULLWIDTH = 8388608;

const int LCMAP_LINGUISTIC_CASING = 16777216;

const int LCMAP_SIMPLIFIED_CHINESE = 33554432;

const int LCMAP_TRADITIONAL_CHINESE = 67108864;

const int LCMAP_SORTHANDLE = 536870912;

const int LCMAP_HASH = 262144;

const int FIND_STARTSWITH = 1048576;

const int FIND_ENDSWITH = 2097152;

const int FIND_FROMSTART = 4194304;

const int FIND_FROMEND = 8388608;

const int LGRPID_INSTALLED = 1;

const int LGRPID_SUPPORTED = 2;

const int LCID_INSTALLED = 1;

const int LCID_SUPPORTED = 2;

const int LCID_ALTERNATE_SORTS = 4;

const int LOCALE_ALL = 0;

const int LOCALE_WINDOWS = 1;

const int LOCALE_SUPPLEMENTAL = 2;

const int LOCALE_ALTERNATE_SORTS = 4;

const int LOCALE_REPLACEMENT = 8;

const int LOCALE_NEUTRALDATA = 16;

const int LOCALE_SPECIFICDATA = 32;

const int CP_INSTALLED = 1;

const int CP_SUPPORTED = 2;

const int SORT_STRINGSORT = 4096;

const int SORT_DIGITSASNUMBERS = 8;

const int CSTR_LESS_THAN = 1;

const int CSTR_EQUAL = 2;

const int CSTR_GREATER_THAN = 3;

const int CP_ACP = 0;

const int CP_OEMCP = 1;

const int CP_MACCP = 2;

const int CP_THREAD_ACP = 3;

const int CP_SYMBOL = 42;

const int CP_UTF7 = 65000;

const int CP_UTF8 = 65001;

const int CTRY_DEFAULT = 0;

const int CTRY_ALBANIA = 355;

const int CTRY_ALGERIA = 213;

const int CTRY_ARGENTINA = 54;

const int CTRY_ARMENIA = 374;

const int CTRY_AUSTRALIA = 61;

const int CTRY_AUSTRIA = 43;

const int CTRY_AZERBAIJAN = 994;

const int CTRY_BAHRAIN = 973;

const int CTRY_BELARUS = 375;

const int CTRY_BELGIUM = 32;

const int CTRY_BELIZE = 501;

const int CTRY_BOLIVIA = 591;

const int CTRY_BRAZIL = 55;

const int CTRY_BRUNEI_DARUSSALAM = 673;

const int CTRY_BULGARIA = 359;

const int CTRY_CANADA = 2;

const int CTRY_CARIBBEAN = 1;

const int CTRY_CHILE = 56;

const int CTRY_COLOMBIA = 57;

const int CTRY_COSTA_RICA = 506;

const int CTRY_CROATIA = 385;

const int CTRY_CZECH = 420;

const int CTRY_DENMARK = 45;

const int CTRY_DOMINICAN_REPUBLIC = 1;

const int CTRY_ECUADOR = 593;

const int CTRY_EGYPT = 20;

const int CTRY_EL_SALVADOR = 503;

const int CTRY_ESTONIA = 372;

const int CTRY_FAEROE_ISLANDS = 298;

const int CTRY_FINLAND = 358;

const int CTRY_FRANCE = 33;

const int CTRY_GEORGIA = 995;

const int CTRY_GERMANY = 49;

const int CTRY_GREECE = 30;

const int CTRY_GUATEMALA = 502;

const int CTRY_HONDURAS = 504;

const int CTRY_HONG_KONG = 852;

const int CTRY_HUNGARY = 36;

const int CTRY_ICELAND = 354;

const int CTRY_INDIA = 91;

const int CTRY_INDONESIA = 62;

const int CTRY_IRAN = 981;

const int CTRY_IRAQ = 964;

const int CTRY_IRELAND = 353;

const int CTRY_ISRAEL = 972;

const int CTRY_ITALY = 39;

const int CTRY_JAMAICA = 1;

const int CTRY_JAPAN = 81;

const int CTRY_JORDAN = 962;

const int CTRY_KAZAKSTAN = 7;

const int CTRY_KENYA = 254;

const int CTRY_KUWAIT = 965;

const int CTRY_KYRGYZSTAN = 996;

const int CTRY_LATVIA = 371;

const int CTRY_LEBANON = 961;

const int CTRY_LIBYA = 218;

const int CTRY_LIECHTENSTEIN = 41;

const int CTRY_LITHUANIA = 370;

const int CTRY_LUXEMBOURG = 352;

const int CTRY_MACAU = 853;

const int CTRY_MACEDONIA = 389;

const int CTRY_MALAYSIA = 60;

const int CTRY_MALDIVES = 960;

const int CTRY_MEXICO = 52;

const int CTRY_MONACO = 33;

const int CTRY_MONGOLIA = 976;

const int CTRY_MOROCCO = 212;

const int CTRY_NETHERLANDS = 31;

const int CTRY_NEW_ZEALAND = 64;

const int CTRY_NICARAGUA = 505;

const int CTRY_NORWAY = 47;

const int CTRY_OMAN = 968;

const int CTRY_PAKISTAN = 92;

const int CTRY_PANAMA = 507;

const int CTRY_PARAGUAY = 595;

const int CTRY_PERU = 51;

const int CTRY_PHILIPPINES = 63;

const int CTRY_POLAND = 48;

const int CTRY_PORTUGAL = 351;

const int CTRY_PRCHINA = 86;

const int CTRY_PUERTO_RICO = 1;

const int CTRY_QATAR = 974;

const int CTRY_ROMANIA = 40;

const int CTRY_RUSSIA = 7;

const int CTRY_SAUDI_ARABIA = 966;

const int CTRY_SERBIA = 381;

const int CTRY_SINGAPORE = 65;

const int CTRY_SLOVAK = 421;

const int CTRY_SLOVENIA = 386;

const int CTRY_SOUTH_AFRICA = 27;

const int CTRY_SOUTH_KOREA = 82;

const int CTRY_SPAIN = 34;

const int CTRY_SWEDEN = 46;

const int CTRY_SWITZERLAND = 41;

const int CTRY_SYRIA = 963;

const int CTRY_TAIWAN = 886;

const int CTRY_TATARSTAN = 7;

const int CTRY_THAILAND = 66;

const int CTRY_TRINIDAD_Y_TOBAGO = 1;

const int CTRY_TUNISIA = 216;

const int CTRY_TURKEY = 90;

const int CTRY_UAE = 971;

const int CTRY_UKRAINE = 380;

const int CTRY_UNITED_KINGDOM = 44;

const int CTRY_UNITED_STATES = 1;

const int CTRY_URUGUAY = 598;

const int CTRY_UZBEKISTAN = 7;

const int CTRY_VENEZUELA = 58;

const int CTRY_VIET_NAM = 84;

const int CTRY_YEMEN = 967;

const int CTRY_ZIMBABWE = 263;

const int LOCALE_NOUSEROVERRIDE = 2147483648;

const int LOCALE_USE_CP_ACP = 1073741824;

const int LOCALE_RETURN_NUMBER = 536870912;

const int LOCALE_RETURN_GENITIVE_NAMES = 268435456;

const int LOCALE_ALLOW_NEUTRAL_NAMES = 134217728;

const int LOCALE_SLOCALIZEDDISPLAYNAME = 2;

const int LOCALE_SENGLISHDISPLAYNAME = 114;

const int LOCALE_SNATIVEDISPLAYNAME = 115;

const int LOCALE_SLOCALIZEDLANGUAGENAME = 111;

const int LOCALE_SENGLISHLANGUAGENAME = 4097;

const int LOCALE_SNATIVELANGUAGENAME = 4;

const int LOCALE_SLOCALIZEDCOUNTRYNAME = 6;

const int LOCALE_SENGLISHCOUNTRYNAME = 4098;

const int LOCALE_SNATIVECOUNTRYNAME = 8;

const int LOCALE_IDIALINGCODE = 5;

const int LOCALE_SLIST = 12;

const int LOCALE_IMEASURE = 13;

const int LOCALE_SDECIMAL = 14;

const int LOCALE_STHOUSAND = 15;

const int LOCALE_SGROUPING = 16;

const int LOCALE_IDIGITS = 17;

const int LOCALE_ILZERO = 18;

const int LOCALE_INEGNUMBER = 4112;

const int LOCALE_SNATIVEDIGITS = 19;

const int LOCALE_SCURRENCY = 20;

const int LOCALE_SINTLSYMBOL = 21;

const int LOCALE_SMONDECIMALSEP = 22;

const int LOCALE_SMONTHOUSANDSEP = 23;

const int LOCALE_SMONGROUPING = 24;

const int LOCALE_ICURRDIGITS = 25;

const int LOCALE_ICURRENCY = 27;

const int LOCALE_INEGCURR = 28;

const int LOCALE_SSHORTDATE = 31;

const int LOCALE_SLONGDATE = 32;

const int LOCALE_STIMEFORMAT = 4099;

const int LOCALE_SAM = 40;

const int LOCALE_SPM = 41;

const int LOCALE_ICALENDARTYPE = 4105;

const int LOCALE_IOPTIONALCALENDAR = 4107;

const int LOCALE_IFIRSTDAYOFWEEK = 4108;

const int LOCALE_IFIRSTWEEKOFYEAR = 4109;

const int LOCALE_SDAYNAME1 = 42;

const int LOCALE_SDAYNAME2 = 43;

const int LOCALE_SDAYNAME3 = 44;

const int LOCALE_SDAYNAME4 = 45;

const int LOCALE_SDAYNAME5 = 46;

const int LOCALE_SDAYNAME6 = 47;

const int LOCALE_SDAYNAME7 = 48;

const int LOCALE_SABBREVDAYNAME1 = 49;

const int LOCALE_SABBREVDAYNAME2 = 50;

const int LOCALE_SABBREVDAYNAME3 = 51;

const int LOCALE_SABBREVDAYNAME4 = 52;

const int LOCALE_SABBREVDAYNAME5 = 53;

const int LOCALE_SABBREVDAYNAME6 = 54;

const int LOCALE_SABBREVDAYNAME7 = 55;

const int LOCALE_SMONTHNAME1 = 56;

const int LOCALE_SMONTHNAME2 = 57;

const int LOCALE_SMONTHNAME3 = 58;

const int LOCALE_SMONTHNAME4 = 59;

const int LOCALE_SMONTHNAME5 = 60;

const int LOCALE_SMONTHNAME6 = 61;

const int LOCALE_SMONTHNAME7 = 62;

const int LOCALE_SMONTHNAME8 = 63;

const int LOCALE_SMONTHNAME9 = 64;

const int LOCALE_SMONTHNAME10 = 65;

const int LOCALE_SMONTHNAME11 = 66;

const int LOCALE_SMONTHNAME12 = 67;

const int LOCALE_SMONTHNAME13 = 4110;

const int LOCALE_SABBREVMONTHNAME1 = 68;

const int LOCALE_SABBREVMONTHNAME2 = 69;

const int LOCALE_SABBREVMONTHNAME3 = 70;

const int LOCALE_SABBREVMONTHNAME4 = 71;

const int LOCALE_SABBREVMONTHNAME5 = 72;

const int LOCALE_SABBREVMONTHNAME6 = 73;

const int LOCALE_SABBREVMONTHNAME7 = 74;

const int LOCALE_SABBREVMONTHNAME8 = 75;

const int LOCALE_SABBREVMONTHNAME9 = 76;

const int LOCALE_SABBREVMONTHNAME10 = 77;

const int LOCALE_SABBREVMONTHNAME11 = 78;

const int LOCALE_SABBREVMONTHNAME12 = 79;

const int LOCALE_SABBREVMONTHNAME13 = 4111;

const int LOCALE_SPOSITIVESIGN = 80;

const int LOCALE_SNEGATIVESIGN = 81;

const int LOCALE_IPOSSIGNPOSN = 82;

const int LOCALE_INEGSIGNPOSN = 83;

const int LOCALE_IPOSSYMPRECEDES = 84;

const int LOCALE_IPOSSEPBYSPACE = 85;

const int LOCALE_INEGSYMPRECEDES = 86;

const int LOCALE_INEGSEPBYSPACE = 87;

const int LOCALE_FONTSIGNATURE = 88;

const int LOCALE_SISO639LANGNAME = 89;

const int LOCALE_SISO3166CTRYNAME = 90;

const int LOCALE_IPAPERSIZE = 4106;

const int LOCALE_SENGCURRNAME = 4103;

const int LOCALE_SNATIVECURRNAME = 4104;

const int LOCALE_SYEARMONTH = 4102;

const int LOCALE_SSORTNAME = 4115;

const int LOCALE_IDIGITSUBSTITUTION = 4116;

const int LOCALE_SNAME = 92;

const int LOCALE_SDURATION = 93;

const int LOCALE_SSHORTESTDAYNAME1 = 96;

const int LOCALE_SSHORTESTDAYNAME2 = 97;

const int LOCALE_SSHORTESTDAYNAME3 = 98;

const int LOCALE_SSHORTESTDAYNAME4 = 99;

const int LOCALE_SSHORTESTDAYNAME5 = 100;

const int LOCALE_SSHORTESTDAYNAME6 = 101;

const int LOCALE_SSHORTESTDAYNAME7 = 102;

const int LOCALE_SISO639LANGNAME2 = 103;

const int LOCALE_SISO3166CTRYNAME2 = 104;

const int LOCALE_SNAN = 105;

const int LOCALE_SPOSINFINITY = 106;

const int LOCALE_SNEGINFINITY = 107;

const int LOCALE_SSCRIPTS = 108;

const int LOCALE_SPARENT = 109;

const int LOCALE_SCONSOLEFALLBACKNAME = 110;

const int LOCALE_IREADINGLAYOUT = 112;

const int LOCALE_INEUTRAL = 113;

const int LOCALE_INEGATIVEPERCENT = 116;

const int LOCALE_IPOSITIVEPERCENT = 117;

const int LOCALE_SPERCENT = 118;

const int LOCALE_SPERMILLE = 119;

const int LOCALE_SMONTHDAY = 120;

const int LOCALE_SSHORTTIME = 121;

const int LOCALE_SOPENTYPELANGUAGETAG = 122;

const int LOCALE_SSORTLOCALE = 123;

const int LOCALE_SRELATIVELONGDATE = 124;

const int LOCALE_SSHORTESTAM = 126;

const int LOCALE_SSHORTESTPM = 127;

const int LOCALE_IDEFAULTCODEPAGE = 11;

const int LOCALE_IDEFAULTANSICODEPAGE = 4100;

const int LOCALE_IDEFAULTMACCODEPAGE = 4113;

const int LOCALE_IDEFAULTEBCDICCODEPAGE = 4114;

const int LOCALE_ILANGUAGE = 1;

const int LOCALE_SABBREVLANGNAME = 3;

const int LOCALE_SABBREVCTRYNAME = 7;

const int LOCALE_IGEOID = 91;

const int LOCALE_IDEFAULTLANGUAGE = 9;

const int LOCALE_IDEFAULTCOUNTRY = 10;

const int LOCALE_IINTLCURRDIGITS = 26;

const int LOCALE_SDATE = 29;

const int LOCALE_STIME = 30;

const int LOCALE_IDATE = 33;

const int LOCALE_ILDATE = 34;

const int LOCALE_ITIME = 35;

const int LOCALE_ITIMEMARKPOSN = 4101;

const int LOCALE_ICENTURY = 36;

const int LOCALE_ITLZERO = 37;

const int LOCALE_IDAYLZERO = 38;

const int LOCALE_IMONLZERO = 39;

const int LOCALE_SKEYBOARDSTOINSTALL = 94;

const int LOCALE_SLANGUAGE = 2;

const int LOCALE_SLANGDISPLAYNAME = 111;

const int LOCALE_SENGLANGUAGE = 4097;

const int LOCALE_SNATIVELANGNAME = 4;

const int LOCALE_SCOUNTRY = 6;

const int LOCALE_SENGCOUNTRY = 4098;

const int LOCALE_SNATIVECTRYNAME = 8;

const int LOCALE_ICOUNTRY = 5;

const int LOCALE_S1159 = 40;

const int LOCALE_S2359 = 41;

const int TIME_NOMINUTESORSECONDS = 1;

const int TIME_NOSECONDS = 2;

const int TIME_NOTIMEMARKER = 4;

const int TIME_FORCE24HOURFORMAT = 8;

const int DATE_SHORTDATE = 1;

const int DATE_LONGDATE = 2;

const int DATE_USE_ALT_CALENDAR = 4;

const int DATE_YEARMONTH = 8;

const int DATE_LTRREADING = 16;

const int DATE_RTLREADING = 32;

const int DATE_AUTOLAYOUT = 64;

const int DATE_MONTHDAY = 128;

const int CAL_NOUSEROVERRIDE = 2147483648;

const int CAL_USE_CP_ACP = 1073741824;

const int CAL_RETURN_NUMBER = 536870912;

const int CAL_RETURN_GENITIVE_NAMES = 268435456;

const int CAL_ICALINTVALUE = 1;

const int CAL_SCALNAME = 2;

const int CAL_IYEAROFFSETRANGE = 3;

const int CAL_SERASTRING = 4;

const int CAL_SSHORTDATE = 5;

const int CAL_SLONGDATE = 6;

const int CAL_SDAYNAME1 = 7;

const int CAL_SDAYNAME2 = 8;

const int CAL_SDAYNAME3 = 9;

const int CAL_SDAYNAME4 = 10;

const int CAL_SDAYNAME5 = 11;

const int CAL_SDAYNAME6 = 12;

const int CAL_SDAYNAME7 = 13;

const int CAL_SABBREVDAYNAME1 = 14;

const int CAL_SABBREVDAYNAME2 = 15;

const int CAL_SABBREVDAYNAME3 = 16;

const int CAL_SABBREVDAYNAME4 = 17;

const int CAL_SABBREVDAYNAME5 = 18;

const int CAL_SABBREVDAYNAME6 = 19;

const int CAL_SABBREVDAYNAME7 = 20;

const int CAL_SMONTHNAME1 = 21;

const int CAL_SMONTHNAME2 = 22;

const int CAL_SMONTHNAME3 = 23;

const int CAL_SMONTHNAME4 = 24;

const int CAL_SMONTHNAME5 = 25;

const int CAL_SMONTHNAME6 = 26;

const int CAL_SMONTHNAME7 = 27;

const int CAL_SMONTHNAME8 = 28;

const int CAL_SMONTHNAME9 = 29;

const int CAL_SMONTHNAME10 = 30;

const int CAL_SMONTHNAME11 = 31;

const int CAL_SMONTHNAME12 = 32;

const int CAL_SMONTHNAME13 = 33;

const int CAL_SABBREVMONTHNAME1 = 34;

const int CAL_SABBREVMONTHNAME2 = 35;

const int CAL_SABBREVMONTHNAME3 = 36;

const int CAL_SABBREVMONTHNAME4 = 37;

const int CAL_SABBREVMONTHNAME5 = 38;

const int CAL_SABBREVMONTHNAME6 = 39;

const int CAL_SABBREVMONTHNAME7 = 40;

const int CAL_SABBREVMONTHNAME8 = 41;

const int CAL_SABBREVMONTHNAME9 = 42;

const int CAL_SABBREVMONTHNAME10 = 43;

const int CAL_SABBREVMONTHNAME11 = 44;

const int CAL_SABBREVMONTHNAME12 = 45;

const int CAL_SABBREVMONTHNAME13 = 46;

const int CAL_SYEARMONTH = 47;

const int CAL_ITWODIGITYEARMAX = 48;

const int CAL_SSHORTESTDAYNAME1 = 49;

const int CAL_SSHORTESTDAYNAME2 = 50;

const int CAL_SSHORTESTDAYNAME3 = 51;

const int CAL_SSHORTESTDAYNAME4 = 52;

const int CAL_SSHORTESTDAYNAME5 = 53;

const int CAL_SSHORTESTDAYNAME6 = 54;

const int CAL_SSHORTESTDAYNAME7 = 55;

const int CAL_SMONTHDAY = 56;

const int CAL_SABBREVERASTRING = 57;

const int CAL_SRELATIVELONGDATE = 58;

const int CAL_SENGLISHERANAME = 59;

const int CAL_SENGLISHABBREVERANAME = 60;

const int CAL_SJAPANESEERAFIRSTYEAR = 61;

const int ENUM_ALL_CALENDARS = 4294967295;

const int CAL_GREGORIAN = 1;

const int CAL_GREGORIAN_US = 2;

const int CAL_JAPAN = 3;

const int CAL_TAIWAN = 4;

const int CAL_KOREA = 5;

const int CAL_HIJRI = 6;

const int CAL_THAI = 7;

const int CAL_HEBREW = 8;

const int CAL_GREGORIAN_ME_FRENCH = 9;

const int CAL_GREGORIAN_ARABIC = 10;

const int CAL_GREGORIAN_XLIT_ENGLISH = 11;

const int CAL_GREGORIAN_XLIT_FRENCH = 12;

const int CAL_PERSIAN = 22;

const int CAL_UMALQURA = 23;

const int LGRPID_WESTERN_EUROPE = 1;

const int LGRPID_CENTRAL_EUROPE = 2;

const int LGRPID_BALTIC = 3;

const int LGRPID_GREEK = 4;

const int LGRPID_CYRILLIC = 5;

const int LGRPID_TURKIC = 6;

const int LGRPID_TURKISH = 6;

const int LGRPID_JAPANESE = 7;

const int LGRPID_KOREAN = 8;

const int LGRPID_TRADITIONAL_CHINESE = 9;

const int LGRPID_SIMPLIFIED_CHINESE = 10;

const int LGRPID_THAI = 11;

const int LGRPID_HEBREW = 12;

const int LGRPID_ARABIC = 13;

const int LGRPID_VIETNAMESE = 14;

const int LGRPID_INDIC = 15;

const int LGRPID_GEORGIAN = 16;

const int LGRPID_ARMENIAN = 17;

const int MUI_LANGUAGE_ID = 4;

const int MUI_LANGUAGE_NAME = 8;

const int MUI_MERGE_SYSTEM_FALLBACK = 16;

const int MUI_MERGE_USER_FALLBACK = 32;

const int MUI_UI_FALLBACK = 48;

const int MUI_THREAD_LANGUAGES = 64;

const int MUI_CONSOLE_FILTER = 256;

const int MUI_COMPLEX_SCRIPT_FILTER = 512;

const int MUI_RESET_FILTERS = 1;

const int MUI_USER_PREFERRED_UI_LANGUAGES = 16;

const int MUI_USE_INSTALLED_LANGUAGES = 32;

const int MUI_USE_SEARCH_ALL_LANGUAGES = 64;

const int MUI_LANG_NEUTRAL_PE_FILE = 256;

const int MUI_NON_LANG_NEUTRAL_FILE = 512;

const int MUI_MACHINE_LANGUAGE_SETTINGS = 1024;

const int MUI_FILETYPE_NOT_LANGUAGE_NEUTRAL = 1;

const int MUI_FILETYPE_LANGUAGE_NEUTRAL_MAIN = 2;

const int MUI_FILETYPE_LANGUAGE_NEUTRAL_MUI = 4;

const int MUI_QUERY_TYPE = 1;

const int MUI_QUERY_CHECKSUM = 2;

const int MUI_QUERY_LANGUAGE_NAME = 4;

const int MUI_QUERY_RESOURCE_TYPES = 8;

const int MUI_FILEINFO_VERSION = 1;

const int MUI_FULL_LANGUAGE = 1;

const int MUI_PARTIAL_LANGUAGE = 2;

const int MUI_LIP_LANGUAGE = 4;

const int MUI_LANGUAGE_INSTALLED = 32;

const int MUI_LANGUAGE_LICENSED = 64;

const int GEOID_NOT_AVAILABLE = -1;

const int GEO_NAME_USER_DEFAULT = 0;

const int IDN_ALLOW_UNASSIGNED = 1;

const int IDN_USE_STD3_ASCII_RULES = 2;

const int IDN_EMAIL_ADDRESS = 4;

const int IDN_RAW_PUNYCODE = 8;

const int VS_ALLOW_LATIN = 1;

const int GSS_ALLOW_INHERITED_COMMON = 1;

const int MUI_FORMAT_REG_COMPAT = 1;

const int MUI_FORMAT_INF_COMPAT = 2;

const int MUI_VERIFY_FILE_EXISTS = 4;

const int MUI_SKIP_STRING_CACHE = 8;

const int MUI_IMMUTABLE_LOOKUP = 16;

const int LOCALE_NAME_USER_DEFAULT = 0;

const String LOCALE_NAME_INVARIANT = '';

const String LOCALE_NAME_SYSTEM_DEFAULT = '!';

const int RIGHT_ALT_PRESSED = 1;

const int LEFT_ALT_PRESSED = 2;

const int RIGHT_CTRL_PRESSED = 4;

const int LEFT_CTRL_PRESSED = 8;

const int SHIFT_PRESSED = 16;

const int NUMLOCK_ON = 32;

const int SCROLLLOCK_ON = 64;

const int CAPSLOCK_ON = 128;

const int ENHANCED_KEY = 256;

const int NLS_DBCSCHAR = 65536;

const int NLS_ALPHANUMERIC = 0;

const int NLS_KATAKANA = 131072;

const int NLS_HIRAGANA = 262144;

const int NLS_ROMAN = 4194304;

const int NLS_IME_CONVERSION = 8388608;

const int ALTNUMPAD_BIT = 67108864;

const int NLS_IME_DISABLE = 536870912;

const int FROM_LEFT_1ST_BUTTON_PRESSED = 1;

const int RIGHTMOST_BUTTON_PRESSED = 2;

const int FROM_LEFT_2ND_BUTTON_PRESSED = 4;

const int FROM_LEFT_3RD_BUTTON_PRESSED = 8;

const int FROM_LEFT_4TH_BUTTON_PRESSED = 16;

const int MOUSE_MOVED = 1;

const int DOUBLE_CLICK = 2;

const int MOUSE_WHEELED = 4;

const int MOUSE_HWHEELED = 8;

const int KEY_EVENT = 1;

const int MOUSE_EVENT = 2;

const int WINDOW_BUFFER_SIZE_EVENT = 4;

const int MENU_EVENT = 8;

const int FOCUS_EVENT = 16;

const int ATTACH_PARENT_PROCESS = 4294967295;

const int ENABLE_PROCESSED_INPUT = 1;

const int ENABLE_LINE_INPUT = 2;

const int ENABLE_ECHO_INPUT = 4;

const int ENABLE_WINDOW_INPUT = 8;

const int ENABLE_MOUSE_INPUT = 16;

const int ENABLE_INSERT_MODE = 32;

const int ENABLE_QUICK_EDIT_MODE = 64;

const int ENABLE_EXTENDED_FLAGS = 128;

const int ENABLE_AUTO_POSITION = 256;

const int ENABLE_VIRTUAL_TERMINAL_INPUT = 512;

const int ENABLE_PROCESSED_OUTPUT = 1;

const int ENABLE_WRAP_AT_EOL_OUTPUT = 2;

const int ENABLE_VIRTUAL_TERMINAL_PROCESSING = 4;

const int DISABLE_NEWLINE_AUTO_RETURN = 8;

const int ENABLE_LVB_GRID_WORLDWIDE = 16;

const int CTRL_C_EVENT = 0;

const int CTRL_BREAK_EVENT = 1;

const int CTRL_CLOSE_EVENT = 2;

const int CTRL_LOGOFF_EVENT = 5;

const int CTRL_SHUTDOWN_EVENT = 6;

const int PSEUDOCONSOLE_INHERIT_CURSOR = 1;

const int FOREGROUND_BLUE = 1;

const int FOREGROUND_GREEN = 2;

const int FOREGROUND_RED = 4;

const int FOREGROUND_INTENSITY = 8;

const int BACKGROUND_BLUE = 16;

const int BACKGROUND_GREEN = 32;

const int BACKGROUND_RED = 64;

const int BACKGROUND_INTENSITY = 128;

const int COMMON_LVB_LEADING_BYTE = 256;

const int COMMON_LVB_TRAILING_BYTE = 512;

const int COMMON_LVB_GRID_HORIZONTAL = 1024;

const int COMMON_LVB_GRID_LVERTICAL = 2048;

const int COMMON_LVB_GRID_RVERTICAL = 4096;

const int COMMON_LVB_REVERSE_VIDEO = 16384;

const int COMMON_LVB_UNDERSCORE = 32768;

const int COMMON_LVB_SBCSDBCS = 768;

const int CONSOLE_NO_SELECTION = 0;

const int CONSOLE_SELECTION_IN_PROGRESS = 1;

const int CONSOLE_SELECTION_NOT_EMPTY = 2;

const int CONSOLE_MOUSE_SELECTION = 4;

const int CONSOLE_MOUSE_DOWN = 8;

const int HISTORY_NO_DUP_FLAG = 1;

const int CONSOLE_FULLSCREEN = 1;

const int CONSOLE_FULLSCREEN_HARDWARE = 2;

const int CONSOLE_FULLSCREEN_MODE = 1;

const int CONSOLE_WINDOWED_MODE = 2;

const int CONSOLE_TEXTMODE_BUFFER = 1;

const int VS_VERSION_INFO = 1;

const int VS_USER_DEFINED = 100;

const int VS_FFI_SIGNATURE = 4277077181;

const int VS_FFI_STRUCVERSION = 65536;

const int VS_FFI_FILEFLAGSMASK = 63;

const int VS_FF_DEBUG = 1;

const int VS_FF_PRERELEASE = 2;

const int VS_FF_PATCHED = 4;

const int VS_FF_PRIVATEBUILD = 8;

const int VS_FF_INFOINFERRED = 16;

const int VS_FF_SPECIALBUILD = 32;

const int VOS_UNKNOWN = 0;

const int VOS_DOS = 65536;

const int VOS_OS216 = 131072;

const int VOS_OS232 = 196608;

const int VOS_NT = 262144;

const int VOS_WINCE = 327680;

const int VOS__BASE = 0;

const int VOS__WINDOWS16 = 1;

const int VOS__PM16 = 2;

const int VOS__PM32 = 3;

const int VOS__WINDOWS32 = 4;

const int VOS_DOS_WINDOWS16 = 65537;

const int VOS_DOS_WINDOWS32 = 65540;

const int VOS_OS216_PM16 = 131074;

const int VOS_OS232_PM32 = 196611;

const int VOS_NT_WINDOWS32 = 262148;

const int VFT_UNKNOWN = 0;

const int VFT_APP = 1;

const int VFT_DLL = 2;

const int VFT_DRV = 3;

const int VFT_FONT = 4;

const int VFT_VXD = 5;

const int VFT_STATIC_LIB = 7;

const int VFT2_UNKNOWN = 0;

const int VFT2_DRV_PRINTER = 1;

const int VFT2_DRV_KEYBOARD = 2;

const int VFT2_DRV_LANGUAGE = 3;

const int VFT2_DRV_DISPLAY = 4;

const int VFT2_DRV_MOUSE = 5;

const int VFT2_DRV_NETWORK = 6;

const int VFT2_DRV_SYSTEM = 7;

const int VFT2_DRV_INSTALLABLE = 8;

const int VFT2_DRV_SOUND = 9;

const int VFT2_DRV_COMM = 10;

const int VFT2_DRV_INPUTMETHOD = 11;

const int VFT2_DRV_VERSIONED_PRINTER = 12;

const int VFT2_FONT_RASTER = 1;

const int VFT2_FONT_VECTOR = 2;

const int VFT2_FONT_TRUETYPE = 3;

const int VFFF_ISSHAREDFILE = 1;

const int VFF_CURNEDEST = 1;

const int VFF_FILEINUSE = 2;

const int VFF_BUFFTOOSMALL = 4;

const int VIFF_FORCEINSTALL = 1;

const int VIFF_DONTDELETEOLD = 2;

const int VIF_TEMPFILE = 1;

const int VIF_MISMATCH = 2;

const int VIF_SRCOLD = 4;

const int VIF_DIFFLANG = 8;

const int VIF_DIFFCODEPG = 16;

const int VIF_DIFFTYPE = 32;

const int VIF_WRITEPROT = 64;

const int VIF_FILEINUSE = 128;

const int VIF_OUTOFSPACE = 256;

const int VIF_ACCESSVIOLATION = 512;

const int VIF_SHARINGVIOLATION = 1024;

const int VIF_CANNOTCREATE = 2048;

const int VIF_CANNOTDELETE = 4096;

const int VIF_CANNOTRENAME = 8192;

const int VIF_CANNOTDELETECUR = 16384;

const int VIF_OUTOFMEMORY = 32768;

const int VIF_CANNOTREADSRC = 65536;

const int VIF_CANNOTREADDST = 131072;

const int VIF_BUFFTOOSMALL = 262144;

const int VIF_CANNOTLOADLZ32 = 524288;

const int VIF_CANNOTLOADCABINET = 1048576;

const int FILE_VER_GET_LOCALISED = 1;

const int FILE_VER_GET_NEUTRAL = 2;

const int FILE_VER_GET_PREFETCHED = 4;

const int RRF_RT_REG_NONE = 1;

const int RRF_RT_REG_SZ = 2;

const int RRF_RT_REG_EXPAND_SZ = 4;

const int RRF_RT_REG_BINARY = 8;

const int RRF_RT_REG_DWORD = 16;

const int RRF_RT_REG_MULTI_SZ = 32;

const int RRF_RT_REG_QWORD = 64;

const int RRF_RT_DWORD = 24;

const int RRF_RT_QWORD = 72;

const int RRF_RT_ANY = 65535;

const int RRF_SUBKEY_WOW6464KEY = 65536;

const int RRF_SUBKEY_WOW6432KEY = 131072;

const int RRF_WOW64_MASK = 196608;

const int RRF_NOEXPAND = 268435456;

const int RRF_ZEROONFAILURE = 536870912;

const int REG_PROCESS_APPKEY = 1;

const int PROVIDER_KEEPS_VALUE_LENGTH = 1;

const int WIN31_CLASS = 0;

const int REG_MUI_STRING_TRUNCATE = 1;

const int REG_SECURE_CONNECTION = 1;

const int SHTDN_REASON_FLAG_COMMENT_REQUIRED = 16777216;

const int SHTDN_REASON_FLAG_DIRTY_PROBLEM_ID_REQUIRED = 33554432;

const int SHTDN_REASON_FLAG_CLEAN_UI = 67108864;

const int SHTDN_REASON_FLAG_DIRTY_UI = 134217728;

const int SHTDN_REASON_FLAG_MOBILE_UI_RESERVED = 268435456;

const int SHTDN_REASON_FLAG_USER_DEFINED = 1073741824;

const int SHTDN_REASON_FLAG_PLANNED = 2147483648;

const int SHTDN_REASON_MAJOR_OTHER = 0;

const int SHTDN_REASON_MAJOR_NONE = 0;

const int SHTDN_REASON_MAJOR_HARDWARE = 65536;

const int SHTDN_REASON_MAJOR_OPERATINGSYSTEM = 131072;

const int SHTDN_REASON_MAJOR_SOFTWARE = 196608;

const int SHTDN_REASON_MAJOR_APPLICATION = 262144;

const int SHTDN_REASON_MAJOR_SYSTEM = 327680;

const int SHTDN_REASON_MAJOR_POWER = 393216;

const int SHTDN_REASON_MAJOR_LEGACY_API = 458752;

const int SHTDN_REASON_MINOR_OTHER = 0;

const int SHTDN_REASON_MINOR_NONE = 255;

const int SHTDN_REASON_MINOR_MAINTENANCE = 1;

const int SHTDN_REASON_MINOR_INSTALLATION = 2;

const int SHTDN_REASON_MINOR_UPGRADE = 3;

const int SHTDN_REASON_MINOR_RECONFIG = 4;

const int SHTDN_REASON_MINOR_HUNG = 5;

const int SHTDN_REASON_MINOR_UNSTABLE = 6;

const int SHTDN_REASON_MINOR_DISK = 7;

const int SHTDN_REASON_MINOR_PROCESSOR = 8;

const int SHTDN_REASON_MINOR_NETWORKCARD = 9;

const int SHTDN_REASON_MINOR_POWER_SUPPLY = 10;

const int SHTDN_REASON_MINOR_CORDUNPLUGGED = 11;

const int SHTDN_REASON_MINOR_ENVIRONMENT = 12;

const int SHTDN_REASON_MINOR_HARDWARE_DRIVER = 13;

const int SHTDN_REASON_MINOR_OTHERDRIVER = 14;

const int SHTDN_REASON_MINOR_BLUESCREEN = 15;

const int SHTDN_REASON_MINOR_SERVICEPACK = 16;

const int SHTDN_REASON_MINOR_HOTFIX = 17;

const int SHTDN_REASON_MINOR_SECURITYFIX = 18;

const int SHTDN_REASON_MINOR_SECURITY = 19;

const int SHTDN_REASON_MINOR_NETWORK_CONNECTIVITY = 20;

const int SHTDN_REASON_MINOR_WMI = 21;

const int SHTDN_REASON_MINOR_SERVICEPACK_UNINSTALL = 22;

const int SHTDN_REASON_MINOR_HOTFIX_UNINSTALL = 23;

const int SHTDN_REASON_MINOR_SECURITYFIX_UNINSTALL = 24;

const int SHTDN_REASON_MINOR_MMC = 25;

const int SHTDN_REASON_MINOR_SYSTEMRESTORE = 26;

const int SHTDN_REASON_MINOR_TERMSRV = 32;

const int SHTDN_REASON_MINOR_DC_PROMOTION = 33;

const int SHTDN_REASON_MINOR_DC_DEMOTION = 34;

const int SHTDN_REASON_UNKNOWN = 255;

const int SHTDN_REASON_LEGACY_API = 2147942400;

const int SHTDN_REASON_VALID_BIT_MASK = 3238002687;

const int PCLEANUI = 2214592512;

const int UCLEANUI = 67108864;

const int PDIRTYUI = 2281701376;

const int UDIRTYUI = 134217728;

const int MAX_REASON_NAME_LEN = 64;

const int MAX_REASON_DESC_LEN = 256;

const int MAX_REASON_BUGID_LEN = 32;

const int MAX_REASON_COMMENT_LEN = 512;

const int SHUTDOWN_TYPE_LEN = 32;

const int POLICY_SHOWREASONUI_NEVER = 0;

const int POLICY_SHOWREASONUI_ALWAYS = 1;

const int POLICY_SHOWREASONUI_WORKSTATIONONLY = 2;

const int POLICY_SHOWREASONUI_SERVERONLY = 3;

const int SNAPSHOT_POLICY_NEVER = 0;

const int SNAPSHOT_POLICY_ALWAYS = 1;

const int SNAPSHOT_POLICY_UNPLANNED = 2;

const int MAX_NUM_REASONS = 256;

const int REASON_SWINSTALL = 196610;

const int REASON_HWINSTALL = 65538;

const int REASON_SERVICEHANG = 196613;

const int REASON_UNSTABLE = 327686;

const int REASON_SWHWRECONF = 196612;

const int REASON_OTHER = 0;

const int REASON_UNKNOWN = 255;

const int REASON_LEGACY_API = 2147942400;

const int REASON_PLANNED_FLAG = 2147483648;

const int MAX_SHUTDOWN_TIMEOUT = 315360000;

const int SHUTDOWN_FORCE_OTHERS = 1;

const int SHUTDOWN_FORCE_SELF = 2;

const int SHUTDOWN_RESTART = 4;

const int SHUTDOWN_POWEROFF = 8;

const int SHUTDOWN_NOREBOOT = 16;

const int SHUTDOWN_GRACE_OVERRIDE = 32;

const int SHUTDOWN_INSTALL_UPDATES = 64;

const int SHUTDOWN_RESTARTAPPS = 128;

const int SHUTDOWN_SKIP_SVC_PRESHUTDOWN = 256;

const int SHUTDOWN_HYBRID = 512;

const int SHUTDOWN_RESTART_BOOTOPTIONS = 1024;

const int SHUTDOWN_SOFT_REBOOT = 2048;

const int SHUTDOWN_MOBILE_UI = 4096;

const int SHUTDOWN_ARSO = 8192;

const int WNNC_NET_MSNET = 65536;

const int WNNC_NET_SMB = 131072;

const int WNNC_NET_NETWARE = 196608;

const int WNNC_NET_VINES = 262144;

const int WNNC_NET_10NET = 327680;

const int WNNC_NET_LOCUS = 393216;

const int WNNC_NET_SUN_PC_NFS = 458752;

const int WNNC_NET_LANSTEP = 524288;

const int WNNC_NET_9TILES = 589824;

const int WNNC_NET_LANTASTIC = 655360;

const int WNNC_NET_AS400 = 720896;

const int WNNC_NET_FTP_NFS = 786432;

const int WNNC_NET_PATHWORKS = 851968;

const int WNNC_NET_LIFENET = 917504;

const int WNNC_NET_POWERLAN = 983040;

const int WNNC_NET_BWNFS = 1048576;

const int WNNC_NET_COGENT = 1114112;

const int WNNC_NET_FARALLON = 1179648;

const int WNNC_NET_APPLETALK = 1245184;

const int WNNC_NET_INTERGRAPH = 1310720;

const int WNNC_NET_SYMFONET = 1376256;

const int WNNC_NET_CLEARCASE = 1441792;

const int WNNC_NET_FRONTIER = 1507328;

const int WNNC_NET_BMC = 1572864;

const int WNNC_NET_DCE = 1638400;

const int WNNC_NET_AVID = 1703936;

const int WNNC_NET_DOCUSPACE = 1769472;

const int WNNC_NET_MANGOSOFT = 1835008;

const int WNNC_NET_SERNET = 1900544;

const int WNNC_NET_RIVERFRONT1 = 1966080;

const int WNNC_NET_RIVERFRONT2 = 2031616;

const int WNNC_NET_DECORB = 2097152;

const int WNNC_NET_PROTSTOR = 2162688;

const int WNNC_NET_FJ_REDIR = 2228224;

const int WNNC_NET_DISTINCT = 2293760;

const int WNNC_NET_TWINS = 2359296;

const int WNNC_NET_RDR2SAMPLE = 2424832;

const int WNNC_NET_CSC = 2490368;

const int WNNC_NET_3IN1 = 2555904;

const int WNNC_NET_EXTENDNET = 2686976;

const int WNNC_NET_STAC = 2752512;

const int WNNC_NET_FOXBAT = 2818048;

const int WNNC_NET_YAHOO = 2883584;

const int WNNC_NET_EXIFS = 2949120;

const int WNNC_NET_DAV = 3014656;

const int WNNC_NET_KNOWARE = 3080192;

const int WNNC_NET_OBJECT_DIRE = 3145728;

const int WNNC_NET_MASFAX = 3211264;

const int WNNC_NET_HOB_NFS = 3276800;

const int WNNC_NET_SHIVA = 3342336;

const int WNNC_NET_IBMAL = 3407872;

const int WNNC_NET_LOCK = 3473408;

const int WNNC_NET_TERMSRV = 3538944;

const int WNNC_NET_SRT = 3604480;

const int WNNC_NET_QUINCY = 3670016;

const int WNNC_NET_OPENAFS = 3735552;

const int WNNC_NET_AVID1 = 3801088;

const int WNNC_NET_DFS = 3866624;

const int WNNC_NET_KWNP = 3932160;

const int WNNC_NET_ZENWORKS = 3997696;

const int WNNC_NET_DRIVEONWEB = 4063232;

const int WNNC_NET_VMWARE = 4128768;

const int WNNC_NET_RSFX = 4194304;

const int WNNC_NET_MFILES = 4259840;

const int WNNC_NET_MS_NFS = 4325376;

const int WNNC_NET_GOOGLE = 4390912;

const int WNNC_NET_NDFS = 4456448;

const int WNNC_NET_DOCUSHARE = 4521984;

const int WNNC_NET_AURISTOR_FS = 4587520;

const int WNNC_NET_SECUREAGENT = 4653056;

const int WNNC_NET_9P = 4718592;

const int WNNC_CRED_MANAGER = 4294901760;

const int WNNC_NET_LANMAN = 131072;

const int RESOURCE_CONNECTED = 1;

const int RESOURCE_GLOBALNET = 2;

const int RESOURCE_REMEMBERED = 3;

const int RESOURCE_RECENT = 4;

const int RESOURCE_CONTEXT = 5;

const int RESOURCETYPE_ANY = 0;

const int RESOURCETYPE_DISK = 1;

const int RESOURCETYPE_PRINT = 2;

const int RESOURCETYPE_RESERVED = 8;

const int RESOURCETYPE_UNKNOWN = 4294967295;

const int RESOURCEUSAGE_CONNECTABLE = 1;

const int RESOURCEUSAGE_CONTAINER = 2;

const int RESOURCEUSAGE_NOLOCALDEVICE = 4;

const int RESOURCEUSAGE_SIBLING = 8;

const int RESOURCEUSAGE_ATTACHED = 16;

const int RESOURCEUSAGE_ALL = 19;

const int RESOURCEUSAGE_RESERVED = 2147483648;

const int RESOURCEDISPLAYTYPE_GENERIC = 0;

const int RESOURCEDISPLAYTYPE_DOMAIN = 1;

const int RESOURCEDISPLAYTYPE_SERVER = 2;

const int RESOURCEDISPLAYTYPE_SHARE = 3;

const int RESOURCEDISPLAYTYPE_FILE = 4;

const int RESOURCEDISPLAYTYPE_GROUP = 5;

const int RESOURCEDISPLAYTYPE_NETWORK = 6;

const int RESOURCEDISPLAYTYPE_ROOT = 7;

const int RESOURCEDISPLAYTYPE_SHAREADMIN = 8;

const int RESOURCEDISPLAYTYPE_DIRECTORY = 9;

const int RESOURCEDISPLAYTYPE_TREE = 10;

const int RESOURCEDISPLAYTYPE_NDSCONTAINER = 11;

const int NETPROPERTY_PERSISTENT = 1;

const int CONNECT_UPDATE_PROFILE = 1;

const int CONNECT_UPDATE_RECENT = 2;

const int CONNECT_TEMPORARY = 4;

const int CONNECT_INTERACTIVE = 8;

const int CONNECT_PROMPT = 16;

const int CONNECT_NEED_DRIVE = 32;

const int CONNECT_REFCOUNT = 64;

const int CONNECT_REDIRECT = 128;

const int CONNECT_LOCALDRIVE = 256;

const int CONNECT_CURRENT_MEDIA = 512;

const int CONNECT_DEFERRED = 1024;

const int CONNECT_RESERVED = 4278190080;

const int CONNECT_COMMANDLINE = 2048;

const int CONNECT_CMD_SAVECRED = 4096;

const int CONNECT_CRED_RESET = 8192;

const int CONNECT_REQUIRE_INTEGRITY = 16384;

const int CONNECT_REQUIRE_PRIVACY = 32768;

const int CONNECT_WRITE_THROUGH_SEMANTICS = 65536;

const int CONNECT_COMPRESS_NETWORK_TRAFFIC = 131072;

const int CONNDLG_RO_PATH = 1;

const int CONNDLG_CONN_POINT = 2;

const int CONNDLG_USE_MRU = 4;

const int CONNDLG_HIDE_BOX = 8;

const int CONNDLG_PERSIST = 16;

const int CONNDLG_NOT_PERSIST = 32;

const int DISC_UPDATE_PROFILE = 1;

const int DISC_NO_FORCE = 64;

const int UNIVERSAL_NAME_INFO_LEVEL = 1;

const int REMOTE_NAME_INFO_LEVEL = 2;

const int WNFMT_MULTILINE = 1;

const int WNFMT_ABBREVIATED = 2;

const int WNFMT_INENUM = 16;

const int WNFMT_CONNECTION = 32;

const int NETINFO_DLL16 = 1;

const int NETINFO_DISKRED = 4;

const int NETINFO_PRINTERRED = 8;

const int WN_SUCCESS = 0;

const int WN_NO_ERROR = 0;

const int WN_NOT_SUPPORTED = 50;

const int WN_CANCEL = 1223;

const int WN_RETRY = 1237;

const int WN_NET_ERROR = 59;

const int WN_MORE_DATA = 234;

const int WN_BAD_POINTER = 487;

const int WN_BAD_VALUE = 87;

const int WN_BAD_USER = 2202;

const int WN_BAD_PASSWORD = 86;

const int WN_ACCESS_DENIED = 5;

const int WN_FUNCTION_BUSY = 170;

const int WN_WINDOWS_ERROR = 59;

const int WN_OUT_OF_MEMORY = 8;

const int WN_NO_NETWORK = 1222;

const int WN_EXTENDED_ERROR = 1208;

const int WN_BAD_LEVEL = 124;

const int WN_BAD_HANDLE = 6;

const int WN_NOT_INITIALIZING = 1247;

const int WN_NO_MORE_DEVICES = 1248;

const int WN_NOT_CONNECTED = 2250;

const int WN_OPEN_FILES = 2401;

const int WN_DEVICE_IN_USE = 2404;

const int WN_BAD_NETNAME = 67;

const int WN_BAD_LOCALNAME = 1200;

const int WN_ALREADY_CONNECTED = 85;

const int WN_DEVICE_ERROR = 31;

const int WN_CONNECTION_CLOSED = 1201;

const int WN_NO_NET_OR_BAD_PATH = 1203;

const int WN_BAD_PROVIDER = 1204;

const int WN_CANNOT_OPEN_PROFILE = 1205;

const int WN_BAD_PROFILE = 1206;

const int WN_BAD_DEV_TYPE = 66;

const int WN_DEVICE_ALREADY_REMEMBERED = 1202;

const int WN_CONNECTED_OTHER_PASSWORD = 2108;

const int WN_CONNECTED_OTHER_PASSWORD_DEFAULT = 2109;

const int WN_NO_MORE_ENTRIES = 259;

const int WN_NOT_CONTAINER = 1207;

const int WN_NOT_AUTHENTICATED = 1244;

const int WN_NOT_LOGGED_ON = 1245;

const int WN_NOT_VALIDATED = 1311;

const int WNCON_FORNETCARD = 1;

const int WNCON_NOTROUTED = 2;

const int WNCON_SLOWLINK = 4;

const int WNCON_DYNAMIC = 8;

const int _STRALIGN_USE_SECURE_CRT = 1;

const String SERVICES_ACTIVE_DATABASEW = 'S';

const String SERVICES_FAILED_DATABASEW = 'S';

const String SERVICES_ACTIVE_DATABASEA = 'ServicesActive';

const String SERVICES_FAILED_DATABASEA = 'ServicesFailed';

const int SC_GROUP_IDENTIFIERW = 43;

const int SC_GROUP_IDENTIFIERA = 43;

const String SERVICES_ACTIVE_DATABASE = 'ServicesActive';

const String SERVICES_FAILED_DATABASE = 'ServicesFailed';

const int SC_GROUP_IDENTIFIER = 43;

const int SERVICE_NO_CHANGE = 4294967295;

const int SERVICE_ACTIVE = 1;

const int SERVICE_INACTIVE = 2;

const int SERVICE_STATE_ALL = 3;

const int SERVICE_CONTROL_STOP = 1;

const int SERVICE_CONTROL_PAUSE = 2;

const int SERVICE_CONTROL_CONTINUE = 3;

const int SERVICE_CONTROL_INTERROGATE = 4;

const int SERVICE_CONTROL_SHUTDOWN = 5;

const int SERVICE_CONTROL_PARAMCHANGE = 6;

const int SERVICE_CONTROL_NETBINDADD = 7;

const int SERVICE_CONTROL_NETBINDREMOVE = 8;

const int SERVICE_CONTROL_NETBINDENABLE = 9;

const int SERVICE_CONTROL_NETBINDDISABLE = 10;

const int SERVICE_CONTROL_DEVICEEVENT = 11;

const int SERVICE_CONTROL_HARDWAREPROFILECHANGE = 12;

const int SERVICE_CONTROL_POWEREVENT = 13;

const int SERVICE_CONTROL_SESSIONCHANGE = 14;

const int SERVICE_CONTROL_PRESHUTDOWN = 15;

const int SERVICE_CONTROL_TIMECHANGE = 16;

const int SERVICE_CONTROL_TRIGGEREVENT = 32;

const int SERVICE_CONTROL_LOWRESOURCES = 96;

const int SERVICE_CONTROL_SYSTEMLOWRESOURCES = 97;

const int SERVICE_STOPPED = 1;

const int SERVICE_START_PENDING = 2;

const int SERVICE_STOP_PENDING = 3;

const int SERVICE_RUNNING = 4;

const int SERVICE_CONTINUE_PENDING = 5;

const int SERVICE_PAUSE_PENDING = 6;

const int SERVICE_PAUSED = 7;

const int SERVICE_ACCEPT_STOP = 1;

const int SERVICE_ACCEPT_PAUSE_CONTINUE = 2;

const int SERVICE_ACCEPT_SHUTDOWN = 4;

const int SERVICE_ACCEPT_PARAMCHANGE = 8;

const int SERVICE_ACCEPT_NETBINDCHANGE = 16;

const int SERVICE_ACCEPT_HARDWAREPROFILECHANGE = 32;

const int SERVICE_ACCEPT_POWEREVENT = 64;

const int SERVICE_ACCEPT_SESSIONCHANGE = 128;

const int SERVICE_ACCEPT_PRESHUTDOWN = 256;

const int SERVICE_ACCEPT_TIMECHANGE = 512;

const int SERVICE_ACCEPT_TRIGGEREVENT = 1024;

const int SERVICE_ACCEPT_USER_LOGOFF = 2048;

const int SERVICE_ACCEPT_LOWRESOURCES = 8192;

const int SERVICE_ACCEPT_SYSTEMLOWRESOURCES = 16384;

const int SC_MANAGER_CONNECT = 1;

const int SC_MANAGER_CREATE_SERVICE = 2;

const int SC_MANAGER_ENUMERATE_SERVICE = 4;

const int SC_MANAGER_LOCK = 8;

const int SC_MANAGER_QUERY_LOCK_STATUS = 16;

const int SC_MANAGER_MODIFY_BOOT_CONFIG = 32;

const int SC_MANAGER_ALL_ACCESS = 983103;

const int SERVICE_QUERY_CONFIG = 1;

const int SERVICE_CHANGE_CONFIG = 2;

const int SERVICE_QUERY_STATUS = 4;

const int SERVICE_ENUMERATE_DEPENDENTS = 8;

const int SERVICE_START = 16;

const int SERVICE_STOP = 32;

const int SERVICE_PAUSE_CONTINUE = 64;

const int SERVICE_INTERROGATE = 128;

const int SERVICE_USER_DEFINED_CONTROL = 256;

const int SERVICE_ALL_ACCESS = 983551;

const int SERVICE_RUNS_IN_SYSTEM_PROCESS = 1;

const int SERVICE_CONFIG_DESCRIPTION = 1;

const int SERVICE_CONFIG_FAILURE_ACTIONS = 2;

const int SERVICE_CONFIG_DELAYED_AUTO_START_INFO = 3;

const int SERVICE_CONFIG_FAILURE_ACTIONS_FLAG = 4;

const int SERVICE_CONFIG_SERVICE_SID_INFO = 5;

const int SERVICE_CONFIG_REQUIRED_PRIVILEGES_INFO = 6;

const int SERVICE_CONFIG_PRESHUTDOWN_INFO = 7;

const int SERVICE_CONFIG_TRIGGER_INFO = 8;

const int SERVICE_CONFIG_PREFERRED_NODE = 9;

const int SERVICE_CONFIG_LAUNCH_PROTECTED = 12;

const int SERVICE_NOTIFY_STATUS_CHANGE_1 = 1;

const int SERVICE_NOTIFY_STATUS_CHANGE_2 = 2;

const int SERVICE_NOTIFY_STATUS_CHANGE = 2;

const int SERVICE_NOTIFY_STOPPED = 1;

const int SERVICE_NOTIFY_START_PENDING = 2;

const int SERVICE_NOTIFY_STOP_PENDING = 4;

const int SERVICE_NOTIFY_RUNNING = 8;

const int SERVICE_NOTIFY_CONTINUE_PENDING = 16;

const int SERVICE_NOTIFY_PAUSE_PENDING = 32;

const int SERVICE_NOTIFY_PAUSED = 64;

const int SERVICE_NOTIFY_CREATED = 128;

const int SERVICE_NOTIFY_DELETED = 256;

const int SERVICE_NOTIFY_DELETE_PENDING = 512;

const int SERVICE_STOP_REASON_FLAG_MIN = 0;

const int SERVICE_STOP_REASON_FLAG_UNPLANNED = 268435456;

const int SERVICE_STOP_REASON_FLAG_CUSTOM = 536870912;

const int SERVICE_STOP_REASON_FLAG_PLANNED = 1073741824;

const int SERVICE_STOP_REASON_FLAG_MAX = 2147483648;

const int SERVICE_STOP_REASON_MAJOR_MIN = 0;

const int SERVICE_STOP_REASON_MAJOR_OTHER = 65536;

const int SERVICE_STOP_REASON_MAJOR_HARDWARE = 131072;

const int SERVICE_STOP_REASON_MAJOR_OPERATINGSYSTEM = 196608;

const int SERVICE_STOP_REASON_MAJOR_SOFTWARE = 262144;

const int SERVICE_STOP_REASON_MAJOR_APPLICATION = 327680;

const int SERVICE_STOP_REASON_MAJOR_NONE = 393216;

const int SERVICE_STOP_REASON_MAJOR_MAX = 458752;

const int SERVICE_STOP_REASON_MAJOR_MIN_CUSTOM = 4194304;

const int SERVICE_STOP_REASON_MAJOR_MAX_CUSTOM = 16711680;

const int SERVICE_STOP_REASON_MINOR_MIN = 0;

const int SERVICE_STOP_REASON_MINOR_OTHER = 1;

const int SERVICE_STOP_REASON_MINOR_MAINTENANCE = 2;

const int SERVICE_STOP_REASON_MINOR_INSTALLATION = 3;

const int SERVICE_STOP_REASON_MINOR_UPGRADE = 4;

const int SERVICE_STOP_REASON_MINOR_RECONFIG = 5;

const int SERVICE_STOP_REASON_MINOR_HUNG = 6;

const int SERVICE_STOP_REASON_MINOR_UNSTABLE = 7;

const int SERVICE_STOP_REASON_MINOR_DISK = 8;

const int SERVICE_STOP_REASON_MINOR_NETWORKCARD = 9;

const int SERVICE_STOP_REASON_MINOR_ENVIRONMENT = 10;

const int SERVICE_STOP_REASON_MINOR_HARDWARE_DRIVER = 11;

const int SERVICE_STOP_REASON_MINOR_OTHERDRIVER = 12;

const int SERVICE_STOP_REASON_MINOR_SERVICEPACK = 13;

const int SERVICE_STOP_REASON_MINOR_SOFTWARE_UPDATE = 14;

const int SERVICE_STOP_REASON_MINOR_SECURITYFIX = 15;

const int SERVICE_STOP_REASON_MINOR_SECURITY = 16;

const int SERVICE_STOP_REASON_MINOR_NETWORK_CONNECTIVITY = 17;

const int SERVICE_STOP_REASON_MINOR_WMI = 18;

const int SERVICE_STOP_REASON_MINOR_SERVICEPACK_UNINSTALL = 19;

const int SERVICE_STOP_REASON_MINOR_SOFTWARE_UPDATE_UNINSTALL = 20;

const int SERVICE_STOP_REASON_MINOR_SECURITYFIX_UNINSTALL = 21;

const int SERVICE_STOP_REASON_MINOR_MMC = 22;

const int SERVICE_STOP_REASON_MINOR_NONE = 23;

const int SERVICE_STOP_REASON_MINOR_MEMOTYLIMIT = 24;

const int SERVICE_STOP_REASON_MINOR_MAX = 25;

const int SERVICE_STOP_REASON_MINOR_MIN_CUSTOM = 256;

const int SERVICE_STOP_REASON_MINOR_MAX_CUSTOM = 65535;

const int SERVICE_CONTROL_STATUS_REASON_INFO = 1;

const int SERVICE_SID_TYPE_NONE = 0;

const int SERVICE_SID_TYPE_UNRESTRICTED = 1;

const int SERVICE_SID_TYPE_RESTRICTED = 3;

const int SERVICE_TRIGGER_TYPE_DEVICE_INTERFACE_ARRIVAL = 1;

const int SERVICE_TRIGGER_TYPE_IP_ADDRESS_AVAILABILITY = 2;

const int SERVICE_TRIGGER_TYPE_DOMAIN_JOIN = 3;

const int SERVICE_TRIGGER_TYPE_FIREWALL_PORT_EVENT = 4;

const int SERVICE_TRIGGER_TYPE_GROUP_POLICY = 5;

const int SERVICE_TRIGGER_TYPE_NETWORK_ENDPOINT = 6;

const int SERVICE_TRIGGER_TYPE_CUSTOM_SYSTEM_STATE_CHANGE = 7;

const int SERVICE_TRIGGER_TYPE_CUSTOM = 20;

const int SERVICE_TRIGGER_TYPE_AGGREGATE = 30;

const int SERVICE_TRIGGER_DATA_TYPE_BINARY = 1;

const int SERVICE_TRIGGER_DATA_TYPE_STRING = 2;

const int SERVICE_TRIGGER_DATA_TYPE_LEVEL = 3;

const int SERVICE_TRIGGER_DATA_TYPE_KEYWORD_ANY = 4;

const int SERVICE_TRIGGER_DATA_TYPE_KEYWORD_ALL = 5;

const int SERVICE_START_REASON_DEMAND = 1;

const int SERVICE_START_REASON_AUTO = 2;

const int SERVICE_START_REASON_TRIGGER = 4;

const int SERVICE_START_REASON_RESTART_ON_FAILURE = 8;

const int SERVICE_START_REASON_DELAYEDAUTO = 16;

const int SERVICE_DYNAMIC_INFORMATION_LEVEL_START_REASON = 1;

const int SERVICE_LAUNCH_PROTECTED_NONE = 0;

const int SERVICE_LAUNCH_PROTECTED_WINDOWS = 1;

const int SERVICE_LAUNCH_PROTECTED_WINDOWS_LIGHT = 2;

const int SERVICE_LAUNCH_PROTECTED_ANTIMALWARE_LIGHT = 3;

const int SERVICE_TRIGGER_ACTION_SERVICE_START = 1;

const int SERVICE_TRIGGER_ACTION_SERVICE_STOP = 2;

const String SERVICE_TRIGGER_STARTED_ARGUMENT = 'T';

const String SC_AGGREGATE_STORAGE_KEY = 'S';

const int DIALOPTION_BILLING = 64;

const int DIALOPTION_QUIET = 128;

const int DIALOPTION_DIALTONE = 256;

const int MDMVOLFLAG_LOW = 1;

const int MDMVOLFLAG_MEDIUM = 2;

const int MDMVOLFLAG_HIGH = 4;

const int MDMVOL_LOW = 0;

const int MDMVOL_MEDIUM = 1;

const int MDMVOL_HIGH = 2;

const int MDMSPKRFLAG_OFF = 1;

const int MDMSPKRFLAG_DIAL = 2;

const int MDMSPKRFLAG_ON = 4;

const int MDMSPKRFLAG_CALLSETUP = 8;

const int MDMSPKR_OFF = 0;

const int MDMSPKR_DIAL = 1;

const int MDMSPKR_ON = 2;

const int MDMSPKR_CALLSETUP = 3;

const int MDM_COMPRESSION = 1;

const int MDM_ERROR_CONTROL = 2;

const int MDM_FORCED_EC = 4;

const int MDM_CELLULAR = 8;

const int MDM_FLOWCONTROL_HARD = 16;

const int MDM_FLOWCONTROL_SOFT = 32;

const int MDM_CCITT_OVERRIDE = 64;

const int MDM_SPEED_ADJUST = 128;

const int MDM_TONE_DIAL = 256;

const int MDM_BLIND_DIAL = 512;

const int MDM_V23_OVERRIDE = 1024;

const int MDM_DIAGNOSTICS = 2048;

const int MDM_MASK_BEARERMODE = 61440;

const int MDM_SHIFT_BEARERMODE = 12;

const int MDM_MASK_PROTOCOLID = 983040;

const int MDM_SHIFT_PROTOCOLID = 16;

const int MDM_MASK_PROTOCOLDATA = 267386880;

const int MDM_SHIFT_PROTOCOLDATA = 20;

const int MDM_MASK_PROTOCOLINFO = 268369920;

const int MDM_SHIFT_PROTOCOLINFO = 16;

const int MDM_MASK_EXTENDEDINFO = 268431360;

const int MDM_SHIFT_EXTENDEDINFO = 12;

const int MDM_BEARERMODE_ANALOG = 0;

const int MDM_BEARERMODE_ISDN = 1;

const int MDM_BEARERMODE_GSM = 2;

const int MDM_PROTOCOLID_DEFAULT = 0;

const int MDM_PROTOCOLID_HDLCPPP = 1;

const int MDM_PROTOCOLID_V128 = 2;

const int MDM_PROTOCOLID_X75 = 3;

const int MDM_PROTOCOLID_V110 = 4;

const int MDM_PROTOCOLID_V120 = 5;

const int MDM_PROTOCOLID_AUTO = 6;

const int MDM_PROTOCOLID_ANALOG = 7;

const int MDM_PROTOCOLID_GPRS = 8;

const int MDM_PROTOCOLID_PIAFS = 9;

const int MDM_SHIFT_HDLCPPP_SPEED = 0;

const int MDM_MASK_HDLCPPP_SPEED = 7;

const int MDM_HDLCPPP_SPEED_DEFAULT = 0;

const int MDM_HDLCPPP_SPEED_64K = 1;

const int MDM_HDLCPPP_SPEED_56K = 2;

const int MDM_SHIFT_HDLCPPP_AUTH = 3;

const int MDM_MASK_HDLCPPP_AUTH = 56;

const int MDM_HDLCPPP_AUTH_DEFAULT = 0;

const int MDM_HDLCPPP_AUTH_NONE = 1;

const int MDM_HDLCPPP_AUTH_PAP = 2;

const int MDM_HDLCPPP_AUTH_CHAP = 3;

const int MDM_HDLCPPP_AUTH_MSCHAP = 4;

const int MDM_SHIFT_HDLCPPP_ML = 6;

const int MDM_MASK_HDLCPPP_ML = 192;

const int MDM_HDLCPPP_ML_DEFAULT = 0;

const int MDM_HDLCPPP_ML_NONE = 1;

const int MDM_HDLCPPP_ML_2 = 2;

const int MDM_PROTOCOL_HDLCPPP_64K = 1114112;

const int MDM_PROTOCOL_HDLCPPP_56K = 2162688;

const int MDM_PROTOCOL_HDLCPPP_112K = 136380416;

const int MDM_PROTOCOL_HDLCPPP_112K_PAP = 153157632;

const int MDM_PROTOCOL_HDLCPPP_112K_CHAP = 161546240;

const int MDM_PROTOCOL_HDLCPPP_112K_MSCHAP = 169934848;

const int MDM_PROTOCOL_HDLCPPP_128K = 135331840;

const int MDM_PROTOCOL_HDLCPPP_128K_PAP = 152109056;

const int MDM_PROTOCOL_HDLCPPP_128K_CHAP = 160497664;

const int MDM_PROTOCOL_HDLCPPP_128K_MSCHAP = 168886272;

const int MDM_SHIFT_V120_SPEED = 0;

const int MDM_MASK_V120_SPEED = 7;

const int MDM_V120_SPEED_DEFAULT = 0;

const int MDM_V120_SPEED_64K = 1;

const int MDM_V120_SPEED_56K = 2;

const int MDM_SHIFT_V120_ML = 6;

const int MDM_MASK_V120_ML = 192;

const int MDM_V120_ML_DEFAULT = 0;

const int MDM_V120_ML_NONE = 1;

const int MDM_V120_ML_2 = 2;

const int MDM_PROTOCOL_V120_64K = 68485120;

const int MDM_PROTOCOL_V120_56K = 69533696;

const int MDM_PROTOCOL_V120_112K = 136642560;

const int MDM_PROTOCOL_V120_128K = 135593984;

const int MDM_SHIFT_X75_DATA = 0;

const int MDM_MASK_X75_DATA = 7;

const int MDM_X75_DATA_DEFAULT = 0;

const int MDM_X75_DATA_64K = 1;

const int MDM_X75_DATA_128K = 2;

const int MDM_X75_DATA_T_70 = 3;

const int MDM_X75_DATA_BTX = 4;

const int MDM_PROTOCOL_X75_64K = 1245184;

const int MDM_PROTOCOL_X75_128K = 2293760;

const int MDM_PROTOCOL_X75_T_70 = 3342336;

const int MDM_PROTOCOL_X75_BTX = 4390912;

const int MDM_SHIFT_V110_SPEED = 0;

const int MDM_MASK_V110_SPEED = 15;

const int MDM_V110_SPEED_DEFAULT = 0;

const int MDM_V110_SPEED_1DOT2K = 1;

const int MDM_V110_SPEED_2DOT4K = 2;

const int MDM_V110_SPEED_4DOT8K = 3;

const int MDM_V110_SPEED_9DOT6K = 4;

const int MDM_V110_SPEED_12DOT0K = 5;

const int MDM_V110_SPEED_14DOT4K = 6;

const int MDM_V110_SPEED_19DOT2K = 7;

const int MDM_V110_SPEED_28DOT8K = 8;

const int MDM_V110_SPEED_38DOT4K = 9;

const int MDM_V110_SPEED_57DOT6K = 10;

const int MDM_PROTOCOL_V110_1DOT2K = 1310720;

const int MDM_PROTOCOL_V110_2DOT4K = 2359296;

const int MDM_PROTOCOL_V110_4DOT8K = 3407872;

const int MDM_PROTOCOL_V110_9DOT6K = 4456448;

const int MDM_PROTOCOL_V110_12DOT0K = 5505024;

const int MDM_PROTOCOL_V110_14DOT4K = 6553600;

const int MDM_PROTOCOL_V110_19DOT2K = 7602176;

const int MDM_PROTOCOL_V110_28DOT8K = 8650752;

const int MDM_PROTOCOL_V110_38DOT4K = 9699328;

const int MDM_PROTOCOL_V110_57DOT6K = 10747904;

const int MDM_SHIFT_AUTO_SPEED = 0;

const int MDM_MASK_AUTO_SPEED = 7;

const int MDM_AUTO_SPEED_DEFAULT = 0;

const int MDM_SHIFT_AUTO_ML = 6;

const int MDM_MASK_AUTO_ML = 192;

const int MDM_AUTO_ML_DEFAULT = 0;

const int MDM_AUTO_ML_NONE = 1;

const int MDM_AUTO_ML_2 = 2;

const int MDM_PROTOCOL_AUTO_1CH = 67502080;

const int MDM_PROTOCOL_AUTO_2CH = 134610944;

const int MDM_ANALOG_RLP_ON = 0;

const int MDM_ANALOG_RLP_OFF = 1;

const int MDM_ANALOG_V34 = 2;

const int MDM_PROTOCOL_ANALOG_RLP = 458752;

const int MDM_PROTOCOL_ANALOG_NRLP = 1507328;

const int MDM_PROTOCOL_ANALOG_V34 = 2555904;

const int MDM_PROTOCOL_GPRS = 524288;

const int MDM_PIAFS_INCOMING = 0;

const int MDM_PIAFS_OUTGOING = 1;

const int MDM_PROTOCOL_PIAFS_INCOMING = 589824;

const int MDM_PROTOCOL_PIAFS_OUTGOING = 1638400;

const int STYLE_DESCRIPTION_SIZE = 32;

const int IMEMENUITEM_STRING_SIZE = 80;

const int IMC_GETCANDIDATEPOS = 7;

const int IMC_SETCANDIDATEPOS = 8;

const int IMC_GETCOMPOSITIONFONT = 9;

const int IMC_SETCOMPOSITIONFONT = 10;

const int IMC_GETCOMPOSITIONWINDOW = 11;

const int IMC_SETCOMPOSITIONWINDOW = 12;

const int IMC_GETSTATUSWINDOWPOS = 15;

const int IMC_SETSTATUSWINDOWPOS = 16;

const int IMC_CLOSESTATUSWINDOW = 33;

const int IMC_OPENSTATUSWINDOW = 34;

const int NI_OPENCANDIDATE = 16;

const int NI_CLOSECANDIDATE = 17;

const int NI_SELECTCANDIDATESTR = 18;

const int NI_CHANGECANDIDATELIST = 19;

const int NI_FINALIZECONVERSIONRESULT = 20;

const int NI_COMPOSITIONSTR = 21;

const int NI_SETCANDIDATE_PAGESTART = 22;

const int NI_SETCANDIDATE_PAGESIZE = 23;

const int NI_IMEMENUSELECTED = 24;

const int ISC_SHOWUICANDIDATEWINDOW = 1;

const int ISC_SHOWUICOMPOSITIONWINDOW = 2147483648;

const int ISC_SHOWUIGUIDELINE = 1073741824;

const int ISC_SHOWUIALLCANDIDATEWINDOW = 15;

const int ISC_SHOWUIALL = 3221225487;

const int CPS_COMPLETE = 1;

const int CPS_CONVERT = 2;

const int CPS_REVERT = 3;

const int CPS_CANCEL = 4;

const int MOD_LEFT = 32768;

const int MOD_RIGHT = 16384;

const int MOD_ON_KEYUP = 2048;

const int MOD_IGNORE_ALL_MODIFIER = 1024;

const int IME_CHOTKEY_IME_NONIME_TOGGLE = 16;

const int IME_CHOTKEY_SHAPE_TOGGLE = 17;

const int IME_CHOTKEY_SYMBOL_TOGGLE = 18;

const int IME_JHOTKEY_CLOSE_OPEN = 48;

const int IME_KHOTKEY_SHAPE_TOGGLE = 80;

const int IME_KHOTKEY_HANJACONVERT = 81;

const int IME_KHOTKEY_ENGLISH = 82;

const int IME_THOTKEY_IME_NONIME_TOGGLE = 112;

const int IME_THOTKEY_SHAPE_TOGGLE = 113;

const int IME_THOTKEY_SYMBOL_TOGGLE = 114;

const int IME_HOTKEY_DSWITCH_FIRST = 256;

const int IME_HOTKEY_DSWITCH_LAST = 287;

const int IME_HOTKEY_PRIVATE_FIRST = 512;

const int IME_ITHOTKEY_RESEND_RESULTSTR = 512;

const int IME_ITHOTKEY_PREVIOUS_COMPOSITION = 513;

const int IME_ITHOTKEY_UISTYLE_TOGGLE = 514;

const int IME_ITHOTKEY_RECONVERTSTRING = 515;

const int IME_HOTKEY_PRIVATE_LAST = 543;

const int GCS_COMPREADSTR = 1;

const int GCS_COMPREADATTR = 2;

const int GCS_COMPREADCLAUSE = 4;

const int GCS_COMPSTR = 8;

const int GCS_COMPATTR = 16;

const int GCS_COMPCLAUSE = 32;

const int GCS_CURSORPOS = 128;

const int GCS_DELTASTART = 256;

const int GCS_RESULTREADSTR = 512;

const int GCS_RESULTREADCLAUSE = 1024;

const int GCS_RESULTSTR = 2048;

const int GCS_RESULTCLAUSE = 4096;

const int CS_INSERTCHAR = 8192;

const int CS_NOMOVECARET = 16384;

const int IMEVER_0310 = 196618;

const int IMEVER_0400 = 262144;

const int IME_PROP_AT_CARET = 65536;

const int IME_PROP_SPECIAL_UI = 131072;

const int IME_PROP_CANDLIST_START_FROM_1 = 262144;

const int IME_PROP_UNICODE = 524288;

const int IME_PROP_COMPLETE_ON_UNSELECT = 1048576;

const int UI_CAP_2700 = 1;

const int UI_CAP_ROT90 = 2;

const int UI_CAP_ROTANY = 4;

const int SCS_CAP_COMPSTR = 1;

const int SCS_CAP_MAKEREAD = 2;

const int SCS_CAP_SETRECONVERTSTRING = 4;

const int SELECT_CAP_CONVERSION = 1;

const int SELECT_CAP_SENTENCE = 2;

const int GGL_LEVEL = 1;

const int GGL_INDEX = 2;

const int GGL_STRING = 3;

const int GGL_PRIVATE = 4;

const int GL_LEVEL_NOGUIDELINE = 0;

const int GL_LEVEL_FATAL = 1;

const int GL_LEVEL_ERROR = 2;

const int GL_LEVEL_WARNING = 3;

const int GL_LEVEL_INFORMATION = 4;

const int GL_ID_UNKNOWN = 0;

const int GL_ID_NOMODULE = 1;

const int GL_ID_NODICTIONARY = 16;

const int GL_ID_CANNOTSAVE = 17;

const int GL_ID_NOCONVERT = 32;

const int GL_ID_TYPINGERROR = 33;

const int GL_ID_TOOMANYSTROKE = 34;

const int GL_ID_READINGCONFLICT = 35;

const int GL_ID_INPUTREADING = 36;

const int GL_ID_INPUTRADICAL = 37;

const int GL_ID_INPUTCODE = 38;

const int GL_ID_INPUTSYMBOL = 39;

const int GL_ID_CHOOSECANDIDATE = 40;

const int GL_ID_REVERSECONVERSION = 41;

const int GL_ID_PRIVATE_FIRST = 32768;

const int GL_ID_PRIVATE_LAST = 65535;

const int IGP_GETIMEVERSION = 4294967292;

const int IGP_PROPERTY = 4;

const int IGP_CONVERSION = 8;

const int IGP_SENTENCE = 12;

const int IGP_UI = 16;

const int IGP_SETCOMPSTR = 20;

const int IGP_SELECT = 24;

const int SCS_SETSTR = 9;

const int SCS_CHANGEATTR = 18;

const int SCS_CHANGECLAUSE = 36;

const int SCS_SETRECONVERTSTRING = 65536;

const int SCS_QUERYRECONVERTSTRING = 131072;

const int ATTR_INPUT = 0;

const int ATTR_TARGET_CONVERTED = 1;

const int ATTR_CONVERTED = 2;

const int ATTR_TARGET_NOTCONVERTED = 3;

const int ATTR_INPUT_ERROR = 4;

const int ATTR_FIXEDCONVERTED = 5;

const int CFS_DEFAULT = 0;

const int CFS_RECT = 1;

const int CFS_POINT = 2;

const int CFS_FORCE_POSITION = 32;

const int CFS_CANDIDATEPOS = 64;

const int CFS_EXCLUDE = 128;

const int GCL_CONVERSION = 1;

const int GCL_REVERSECONVERSION = 2;

const int GCL_REVERSE_LENGTH = 3;

const int IME_CMODE_ALPHANUMERIC = 0;

const int IME_CMODE_NATIVE = 1;

const int IME_CMODE_CHINESE = 1;

const int IME_CMODE_HANGUL = 1;

const int IME_CMODE_JAPANESE = 1;

const int IME_CMODE_KATAKANA = 2;

const int IME_CMODE_LANGUAGE = 3;

const int IME_CMODE_FULLSHAPE = 8;

const int IME_CMODE_ROMAN = 16;

const int IME_CMODE_CHARCODE = 32;

const int IME_CMODE_HANJACONVERT = 64;

const int IME_CMODE_NATIVESYMBOL = 128;

const int IME_CMODE_HANGEUL = 1;

const int IME_CMODE_SOFTKBD = 128;

const int IME_CMODE_NOCONVERSION = 256;

const int IME_CMODE_EUDC = 512;

const int IME_CMODE_SYMBOL = 1024;

const int IME_CMODE_FIXED = 2048;

const int IME_CMODE_RESERVED = 4026531840;

const int IME_SMODE_NONE = 0;

const int IME_SMODE_PLAURALCLAUSE = 1;

const int IME_SMODE_SINGLECONVERT = 2;

const int IME_SMODE_AUTOMATIC = 4;

const int IME_SMODE_PHRASEPREDICT = 8;

const int IME_SMODE_CONVERSATION = 16;

const int IME_SMODE_RESERVED = 61440;

const int IME_CAND_UNKNOWN = 0;

const int IME_CAND_READ = 1;

const int IME_CAND_CODE = 2;

const int IME_CAND_MEANING = 3;

const int IME_CAND_RADICAL = 4;

const int IME_CAND_STROKE = 5;

const int IMN_CLOSESTATUSWINDOW = 1;

const int IMN_OPENSTATUSWINDOW = 2;

const int IMN_CHANGECANDIDATE = 3;

const int IMN_CLOSECANDIDATE = 4;

const int IMN_OPENCANDIDATE = 5;

const int IMN_SETCONVERSIONMODE = 6;

const int IMN_SETSENTENCEMODE = 7;

const int IMN_SETOPENSTATUS = 8;

const int IMN_SETCANDIDATEPOS = 9;

const int IMN_SETCOMPOSITIONFONT = 10;

const int IMN_SETCOMPOSITIONWINDOW = 11;

const int IMN_SETSTATUSWINDOWPOS = 12;

const int IMN_GUIDELINE = 13;

const int IMN_PRIVATE = 14;

const int IMR_COMPOSITIONWINDOW = 1;

const int IMR_CANDIDATEWINDOW = 2;

const int IMR_COMPOSITIONFONT = 3;

const int IMR_RECONVERTSTRING = 4;

const int IMR_CONFIRMRECONVERTSTRING = 5;

const int IMR_QUERYCHARPOSITION = 6;

const int IMR_DOCUMENTFEED = 7;

const int IMM_ERROR_NODATA = -1;

const int IMM_ERROR_GENERAL = -2;

const int IME_CONFIG_GENERAL = 1;

const int IME_CONFIG_REGISTERWORD = 2;

const int IME_CONFIG_SELECTDICTIONARY = 3;

const int IME_ESC_QUERY_SUPPORT = 3;

const int IME_ESC_RESERVED_FIRST = 4;

const int IME_ESC_RESERVED_LAST = 2047;

const int IME_ESC_PRIVATE_FIRST = 2048;

const int IME_ESC_PRIVATE_LAST = 4095;

const int IME_ESC_SEQUENCE_TO_INTERNAL = 4097;

const int IME_ESC_GET_EUDC_DICTIONARY = 4099;

const int IME_ESC_SET_EUDC_DICTIONARY = 4100;

const int IME_ESC_MAX_KEY = 4101;

const int IME_ESC_IME_NAME = 4102;

const int IME_ESC_SYNC_HOTKEY = 4103;

const int IME_ESC_HANJA_MODE = 4104;

const int IME_ESC_AUTOMATA = 4105;

const int IME_ESC_PRIVATE_HOTKEY = 4106;

const int IME_ESC_GETHELPFILENAME = 4107;

const int IME_REGWORD_STYLE_EUDC = 1;

const int IME_REGWORD_STYLE_USER_FIRST = 2147483648;

const int IME_REGWORD_STYLE_USER_LAST = 4294967295;

const int IACE_CHILDREN = 1;

const int IACE_DEFAULT = 16;

const int IACE_IGNORENOCONTEXT = 32;

const int IGIMIF_RIGHTMENU = 1;

const int IGIMII_CMODE = 1;

const int IGIMII_SMODE = 2;

const int IGIMII_CONFIGURE = 4;

const int IGIMII_TOOLS = 8;

const int IGIMII_HELP = 16;

const int IGIMII_OTHER = 32;

const int IGIMII_INPUTTOOLS = 64;

const int IMFT_RADIOCHECK = 1;

const int IMFT_SEPARATOR = 2;

const int IMFT_SUBMENU = 4;

const int IMFS_GRAYED = 3;

const int IMFS_DISABLED = 3;

const int IMFS_CHECKED = 8;

const int IMFS_HILITE = 128;

const int IMFS_ENABLED = 0;

const int IMFS_UNCHECKED = 0;

const int IMFS_UNHILITE = 0;

const int IMFS_DEFAULT = 4096;

const int SOFTKEYBOARD_TYPE_T1 = 1;

const int SOFTKEYBOARD_TYPE_C1 = 2;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -2147483648;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 2147483647;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 4294967295;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int WCHAR_MIN = 0;

const int WCHAR_MAX = 65535;

const int WINT_MIN = 0;

const int WINT_MAX = 65535;

const int _STL_COMPILER_PREPROCESSOR = 1;

const int _STL_WARNING_LEVEL = 3;

const int _HAS_IF_CONSTEXPR = 1;

const int _HAS_CONDITIONAL_EXPLICIT = 1;

const int _STL_DISABLED_WARNING_C4984 = 4984;

const int _STL_DISABLED_WARNING_C5053 = 5053;

const int _STL_DISABLED_WARNINGS = 4180;

const int _CPPLIB_VER = 650;

const int _MSVC_STL_VERSION = 142;

const int _MSVC_STL_UPDATE = 202008;

const int _HAS_STATIC_RTTI = 1;

const int _HAS_AUTO_PTR_ETC = 1;

const int _HAS_UNEXPECTED = 1;

const int _HAS_OLD_IOSTREAMS_MEMBERS = 1;

const int _HAS_STD_BYTE = 0;

const int _HAS_FUNCTION_ALLOCATOR_SUPPORT = 1;

const int _HAS_TR1_NAMESPACE = 1;

const int _ENFORCE_MATCHING_ALLOCATORS = 0;

const int _ENFORCE_FACET_SPECIALIZATIONS = 0;

const String _FACET_SPECIALIZATION_MESSAGE =
    'Unsupported facet specialization; see N4800 27.3.1.1.1 [locale.category]. Either use a Standard specialization or define _ENFORCE_FACET_SPECIALIZATIONS=0 to suppress this diagnostic.';

const int _STL_OPTIMIZE_SYSTEM_ERROR_OPERATORS = 1;

const int _STD_VECTORIZE_WITH_FLOAT_CONTROL = 1;

const int _HAS_FEATURES_REMOVED_IN_CXX20 = 1;

const int _HAS_DEPRECATED_ADAPTOR_TYPEDEFS = 1;

const int _HAS_DEPRECATED_IS_LITERAL_TYPE = 1;

const int _HAS_DEPRECATED_NEGATORS = 1;

const int _HAS_DEPRECATED_RAW_STORAGE_ITERATOR = 1;

const int _HAS_DEPRECATED_RESULT_OF = 1;

const int _HAS_DEPRECATED_SHARED_PTR_UNIQUE = 1;

const int _HAS_DEPRECATED_TEMPORARY_BUFFER = 1;

const int _HAS_DEPRECATED_UNCAUGHT_EXCEPTION = 1;

const int _HAS_STREAM_INSERTION_OPERATORS_DELETED_IN_CXX20 = 1;

const int __cpp_lib_chrono_udls = 201304;

const int __cpp_lib_complex_udls = 201309;

const int __cpp_lib_exchange_function = 201304;

const int __cpp_lib_generic_associative_lookup = 201304;

const int __cpp_lib_integer_sequence = 201304;

const int __cpp_lib_integral_constant_callable = 201304;

const int __cpp_lib_is_final = 201402;

const int __cpp_lib_is_null_pointer = 201309;

const int __cpp_lib_make_reverse_iterator = 201402;

const int __cpp_lib_make_unique = 201304;

const int __cpp_lib_null_iterators = 201304;

const int __cpp_lib_quoted_string_io = 201304;

const int __cpp_lib_result_of_sfinae = 201210;

const int __cpp_lib_robust_nonmodifying_seq_ops = 201304;

const int __cpp_lib_shared_timed_mutex = 201402;

const int __cpp_lib_string_udls = 201304;

const int __cpp_lib_transformation_trait_aliases = 201304;

const int __cpp_lib_tuple_element_t = 201402;

const int __cpp_lib_tuples_by_type = 201304;

const int __cpp_lib_addressof_constexpr = 201603;

const int __cpp_lib_allocator_traits_is_always_equal = 201411;

const int __cpp_lib_as_const = 201510;

const int __cpp_lib_bool_constant = 201505;

const int __cpp_lib_enable_shared_from_this = 201603;

const int __cpp_lib_incomplete_container_elements = 201505;

const int __cpp_lib_invoke = 201411;

const int __cpp_lib_logical_traits = 201510;

const int __cpp_lib_map_try_emplace = 201411;

const int __cpp_lib_nonmember_container_access = 201411;

const int __cpp_lib_shared_mutex = 201505;

const int __cpp_lib_transparent_operators = 201510;

const int __cpp_lib_type_trait_variable_templates = 201510;

const int __cpp_lib_uncaught_exceptions = 201411;

const int __cpp_lib_unordered_map_try_emplace = 201411;

const int __cpp_lib_void_t = 201411;

const int __cpp_lib_chrono = 201510;

const int __cpp_lib_atomic_value_initialization = 201911;

const int __cpp_lib_shared_ptr_arrays = 201611;

const int __cpp_lib_experimental_erase_if = 201411;

const int __cpp_lib_experimental_filesystem = 201406;

const int _STL_WIN32_WINNT_WINXP = 1281;

const int _STL_WIN32_WINNT_VISTA = 1536;

const int _STL_WIN32_WINNT_WIN8 = 1538;

const int _STL_WIN32_WINNT_WINBLUE = 1539;

const int _STL_WIN32_WINNT_WIN10 = 2560;

const int _STL_WIN32_WINNT = 1536;

const int _CRT_WARN = 0;

const int _CRT_ERROR = 1;

const int _CRT_ASSERT = 2;

const int _CRT_ERRCNT = 3;

const int _CRTDBG_MODE_FILE = 1;

const int _CRTDBG_MODE_DEBUG = 2;

const int _CRTDBG_MODE_WNDW = 4;

const int _CRTDBG_REPORT_MODE = -1;

const int _CRT_RPTHOOK_INSTALL = 0;

const int _CRT_RPTHOOK_REMOVE = 1;

const int _HOOK_ALLOC = 1;

const int _HOOK_REALLOC = 2;

const int _HOOK_FREE = 3;

const int _CRTDBG_ALLOC_MEM_DF = 1;

const int _CRTDBG_DELAY_FREE_MEM_DF = 2;

const int _CRTDBG_CHECK_ALWAYS_DF = 4;

const int _CRTDBG_RESERVED_DF = 8;

const int _CRTDBG_CHECK_CRT_DF = 16;

const int _CRTDBG_LEAK_CHECK_DF = 32;

const int _CRTDBG_CHECK_EVERY_16_DF = 1048576;

const int _CRTDBG_CHECK_EVERY_128_DF = 8388608;

const int _CRTDBG_CHECK_EVERY_1024_DF = 67108864;

const int _CRTDBG_CHECK_DEFAULT_DF = 0;

const int _CRTDBG_REPORT_FLAG = -1;

const int _FREE_BLOCK = 0;

const int _NORMAL_BLOCK = 1;

const int _CRT_BLOCK = 2;

const int _IGNORE_BLOCK = 3;

const int _CLIENT_BLOCK = 4;

const int _MAX_BLOCKS = 5;

const int _UNKNOWN_BLOCK = -1;

const String _CRT_MSVCP_CURRENT = 'msvcp140.dll';

const int _HAS_ITERATOR_DEBUGGING = 0;

const int _SECURE_SCL = 0;

const int _ITERATOR_DEBUG_LEVEL = 0;

const int _CONTAINER_DEBUG_LEVEL = 0;

const int _ENABLE_ATOMIC_REF_ALIGNMENT_CHECK = 0;

const int _MAX_EXP_DIG = 8;

const int _MAX_INT_DIG = 32;

const int _MAX_SIG_DIG_V1 = 36;

const int _MAX_SIG_DIG_V2 = 768;

const int _LOCK_LOCALE = 0;

const int _LOCK_MALLOC = 1;

const int _LOCK_STREAM = 2;

const int _LOCK_DEBUG = 3;

const int _LOCK_AT_THREAD_EXIT = 4;

const int _STD_ATOMIC_ALWAYS_USE_CMPXCHG16B = 0;

const int CHAR_BIT = 8;

const int SCHAR_MIN = -128;

const int SCHAR_MAX = 127;

const int UCHAR_MAX = 255;

const int CHAR_MIN = -128;

const int CHAR_MAX = 127;

const int MB_LEN_MAX = 5;

const int SHRT_MIN = -32768;

const int SHRT_MAX = 32767;

const int USHRT_MAX = 65535;

const int INT_MIN = -2147483648;

const int INT_MAX = 2147483647;

const int UINT_MAX = 4294967295;

const int LONG_MIN = -2147483648;

const int LONG_MAX = 2147483647;

const int ULONG_MAX = 4294967295;

const int LLONG_MAX = 9223372036854775807;

const int LLONG_MIN = -9223372036854775808;

const int ULLONG_MAX = -1;

const int _I8_MIN = -128;

const int _I8_MAX = 127;

const int _UI8_MAX = 255;

const int _I16_MIN = -32768;

const int _I16_MAX = 32767;

const int _UI16_MAX = 65535;

const int _I32_MIN = -2147483648;

const int _I32_MAX = 2147483647;

const int _UI32_MAX = 4294967295;

const int _I64_MIN = -9223372036854775808;

const int _I64_MAX = 9223372036854775807;

const int _UI64_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int _DOMAIN = 1;

const int _SING = 2;

const int _OVERFLOW = 3;

const int _UNDERFLOW = 4;

const int _TLOSS = 5;

const int _PLOSS = 6;

const double _HUGE_ENUF = 1e+300;

const double INFINITY = double.infinity;

const double HUGE_VAL = double.infinity;

const double HUGE_VALF = double.infinity;

const double HUGE_VALL = double.infinity;

const double NAN = double.nan;

const int _DENORM = -2;

const int _FINITE = -1;

const int _INFCODE = 1;

const int _NANCODE = 2;

const int FP_INFINITE = 1;

const int FP_NAN = 2;

const int FP_NORMAL = -1;

const int FP_SUBNORMAL = -2;

const int FP_ZERO = 0;

const int _C2 = 1;

const int FP_ILOGB0 = -2147483648;

const int FP_ILOGBNAN = 2147483647;

const int MATH_ERRNO = 1;

const int MATH_ERREXCEPT = 2;

const int math_errhandling = 3;

const int _FE_DIVBYZERO = 4;

const int _FE_INEXACT = 32;

const int _FE_INVALID = 1;

const int _FE_OVERFLOW = 8;

const int _FE_UNDERFLOW = 16;

const int _D0_C = 3;

const int _D1_C = 2;

const int _D2_C = 1;

const int _D3_C = 0;

const int _DBIAS = 1022;

const int _DOFF = 4;

const int _F0_C = 1;

const int _F1_C = 0;

const int _FBIAS = 126;

const int _FOFF = 7;

const int _FRND = 1;

const int _L0_C = 3;

const int _L1_C = 2;

const int _L2_C = 1;

const int _L3_C = 0;

const int _LBIAS = 1022;

const int _LOFF = 4;

const int _DFRAC = 15;

const int _DMASK = 32752;

const int _DMAX = 2047;

const int _DSIGN = 32768;

const int _FFRAC = 127;

const int _FMASK = 32640;

const int _FMAX = 255;

const int _FSIGN = 32768;

const int _LFRAC = 65535;

const int _LMASK = 32767;

const int _LMAX = 32767;

const int _LSIGN = 32768;

const int _DHUGE_EXP = 1842;

const int _FHUGE_EXP = 229;

const int _LHUGE_EXP = 29490;

const int _FP_LT = 1;

const int _FP_EQ = 2;

const int _FP_GT = 4;

const int DOMAIN = 1;

const int SING = 2;

const int OVERFLOW = 3;

const int UNDERFLOW = 4;

const int TLOSS = 5;

const int PLOSS = 6;

const int _MAX_ITOSTR_BASE16_COUNT = 9;

const int _MAX_ITOSTR_BASE10_COUNT = 12;

const int _MAX_ITOSTR_BASE8_COUNT = 12;

const int _MAX_ITOSTR_BASE2_COUNT = 33;

const int _MAX_LTOSTR_BASE16_COUNT = 9;

const int _MAX_LTOSTR_BASE10_COUNT = 12;

const int _MAX_LTOSTR_BASE8_COUNT = 12;

const int _MAX_LTOSTR_BASE2_COUNT = 33;

const int _MAX_ULTOSTR_BASE16_COUNT = 9;

const int _MAX_ULTOSTR_BASE10_COUNT = 11;

const int _MAX_ULTOSTR_BASE8_COUNT = 12;

const int _MAX_ULTOSTR_BASE2_COUNT = 33;

const int _MAX_I64TOSTR_BASE16_COUNT = 17;

const int _MAX_I64TOSTR_BASE10_COUNT = 21;

const int _MAX_I64TOSTR_BASE8_COUNT = 23;

const int _MAX_I64TOSTR_BASE2_COUNT = 65;

const int _MAX_U64TOSTR_BASE16_COUNT = 17;

const int _MAX_U64TOSTR_BASE10_COUNT = 21;

const int _MAX_U64TOSTR_BASE8_COUNT = 23;

const int _MAX_U64TOSTR_BASE2_COUNT = 65;

const int EXIT_SUCCESS = 0;

const int EXIT_FAILURE = 1;

const int _WRITE_ABORT_MSG = 1;

const int _CALL_REPORTFAULT = 2;

const int _OUT_TO_DEFAULT = 0;

const int _OUT_TO_STDERR = 1;

const int _OUT_TO_MSGBOX = 2;

const int _REPORT_ERRMODE = 3;

const int RAND_MAX = 32767;

const int _CVTBUFSIZE = 349;

const int _MAX_PATH = 260;

const int _MAX_DRIVE = 3;

const int _MAX_DIR = 256;

const int _MAX_FNAME = 256;

const int _MAX_EXT = 256;

const int _MAX_ENV = 32767;

const int _USE_STD_VECTOR_ALGORITHMS = 1;

const int EGL_PLATFORM_ANGLE_PLATFORM_METHODS_ANGLEX = 13442;

typedef _c_eglChooseConfig = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Int32> attrib_list,
  ffi.Pointer<ffi.Pointer<ffi.Void>> configs,
  ffi.Int32 config_size,
  ffi.Pointer<ffi.Int32> num_config,
);

typedef _dart_eglChooseConfig = int Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Int32> attrib_list,
  ffi.Pointer<ffi.Pointer<ffi.Void>> configs,
  int config_size,
  ffi.Pointer<ffi.Int32> num_config,
);

typedef _c_eglCopyBuffers = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> surface,
  ffi.Int32 target,
);

typedef _dart_eglCopyBuffers = int Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> surface,
  int target,
);

typedef _c_eglCreateContext = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> config,
  ffi.Pointer<ffi.Void> share_context,
  ffi.Pointer<ffi.Int32> attrib_list,
);

typedef _dart_eglCreateContext = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> config,
  ffi.Pointer<ffi.Void> share_context,
  ffi.Pointer<ffi.Int32> attrib_list,
);

typedef _c_eglCreatePbufferSurface = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> config,
  ffi.Pointer<ffi.Int32> attrib_list,
);

typedef _dart_eglCreatePbufferSurface = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> config,
  ffi.Pointer<ffi.Int32> attrib_list,
);

typedef _c_eglCreatePixmapSurface = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> config,
  ffi.Int32 pixmap,
  ffi.Pointer<ffi.Int32> attrib_list,
);

typedef _dart_eglCreatePixmapSurface = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> config,
  int pixmap,
  ffi.Pointer<ffi.Int32> attrib_list,
);

typedef _c_eglCreateWindowSurface = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> config,
  ffi.Pointer<ffi.Void> win,
  ffi.Pointer<ffi.Int32> attrib_list,
);

typedef _dart_eglCreateWindowSurface = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> config,
  ffi.Pointer<ffi.Void> win,
  ffi.Pointer<ffi.Int32> attrib_list,
);

typedef _c_eglDestroyContext = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> ctx,
);

typedef _dart_eglDestroyContext = int Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> ctx,
);

typedef _c_eglDestroySurface = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> surface,
);

typedef _dart_eglDestroySurface = int Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> surface,
);

typedef _c_eglGetConfigAttrib = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> config,
  ffi.Int32 attribute,
  ffi.Pointer<ffi.Int32> value,
);

typedef _dart_eglGetConfigAttrib = int Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> config,
  int attribute,
  ffi.Pointer<ffi.Int32> value,
);

typedef _c_eglGetConfigs = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Pointer<ffi.Void>> configs,
  ffi.Int32 config_size,
  ffi.Pointer<ffi.Int32> num_config,
);

typedef _dart_eglGetConfigs = int Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Pointer<ffi.Void>> configs,
  int config_size,
  ffi.Pointer<ffi.Int32> num_config,
);

typedef _c_eglGetCurrentDisplay = ffi.Pointer<ffi.Void> Function();

typedef _dart_eglGetCurrentDisplay = ffi.Pointer<ffi.Void> Function();

typedef _c_eglGetCurrentSurface = ffi.Pointer<ffi.Void> Function(
  ffi.Int32 readdraw,
);

typedef _dart_eglGetCurrentSurface = ffi.Pointer<ffi.Void> Function(
  int readdraw,
);

typedef _c_eglGetDisplay = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> display_id,
);

typedef _dart_eglGetDisplay = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> display_id,
);

typedef _c_eglGetError = ffi.Int32 Function();

typedef _dart_eglGetError = int Function();

typedef __eglMustCastToProperFunctionPointerType = ffi.Void Function();

typedef _c_eglGetProcAddress
    = ffi.Pointer<ffi.NativeFunction<__eglMustCastToProperFunctionPointerType>>
        Function(
  ffi.Pointer<ffi.Int8> procname,
);

typedef _dart_eglGetProcAddress
    = ffi.Pointer<ffi.NativeFunction<__eglMustCastToProperFunctionPointerType>>
        Function(
  ffi.Pointer<ffi.Int8> procname,
);

typedef _c_eglInitialize = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Int32> major,
  ffi.Pointer<ffi.Int32> minor,
);

typedef _dart_eglInitialize = int Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Int32> major,
  ffi.Pointer<ffi.Int32> minor,
);

typedef _c_eglMakeCurrent = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> draw,
  ffi.Pointer<ffi.Void> read,
  ffi.Pointer<ffi.Void> ctx,
);

typedef _dart_eglMakeCurrent = int Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> draw,
  ffi.Pointer<ffi.Void> read,
  ffi.Pointer<ffi.Void> ctx,
);

typedef _c_eglQueryContext = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> ctx,
  ffi.Int32 attribute,
  ffi.Pointer<ffi.Int32> value,
);

typedef _dart_eglQueryContext = int Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> ctx,
  int attribute,
  ffi.Pointer<ffi.Int32> value,
);

typedef _c_eglQueryString = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Int32 name,
);

typedef _dart_eglQueryString = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Void> dpy,
  int name,
);

typedef _c_eglQuerySurface = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> surface,
  ffi.Int32 attribute,
  ffi.Pointer<ffi.Int32> value,
);

typedef _dart_eglQuerySurface = int Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> surface,
  int attribute,
  ffi.Pointer<ffi.Int32> value,
);

typedef _c_eglSwapBuffers = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> surface,
);

typedef _dart_eglSwapBuffers = int Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> surface,
);

typedef _c_eglTerminate = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> dpy,
);

typedef _dart_eglTerminate = int Function(
  ffi.Pointer<ffi.Void> dpy,
);

typedef _c_eglWaitGL = ffi.Uint32 Function();

typedef _dart_eglWaitGL = int Function();

typedef _c_eglWaitNative = ffi.Uint32 Function(
  ffi.Int32 engine,
);

typedef _dart_eglWaitNative = int Function(
  int engine,
);

typedef _c_eglBindTexImage = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> surface,
  ffi.Int32 buffer,
);

typedef _dart_eglBindTexImage = int Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> surface,
  int buffer,
);

typedef _c_eglReleaseTexImage = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> surface,
  ffi.Int32 buffer,
);

typedef _dart_eglReleaseTexImage = int Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> surface,
  int buffer,
);

typedef _c_eglSurfaceAttrib = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> surface,
  ffi.Int32 attribute,
  ffi.Int32 value,
);

typedef _dart_eglSurfaceAttrib = int Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> surface,
  int attribute,
  int value,
);

typedef _c_eglSwapInterval = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Int32 interval,
);

typedef _dart_eglSwapInterval = int Function(
  ffi.Pointer<ffi.Void> dpy,
  int interval,
);

typedef _c_eglBindAPI = ffi.Uint32 Function(
  ffi.Uint32 api,
);

typedef _dart_eglBindAPI = int Function(
  int api,
);

typedef _c_eglQueryAPI = ffi.Uint32 Function();

typedef _dart_eglQueryAPI = int Function();

typedef _c_eglCreatePbufferFromClientBuffer = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Uint32 buftype,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Pointer<ffi.Void> config,
  ffi.Pointer<ffi.Int32> attrib_list,
);

typedef _dart_eglCreatePbufferFromClientBuffer = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dpy,
  int buftype,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Pointer<ffi.Void> config,
  ffi.Pointer<ffi.Int32> attrib_list,
);

typedef _c_eglReleaseThread = ffi.Uint32 Function();

typedef _dart_eglReleaseThread = int Function();

typedef _c_eglWaitClient = ffi.Uint32 Function();

typedef _dart_eglWaitClient = int Function();

typedef _c_eglGetCurrentContext = ffi.Pointer<ffi.Void> Function();

typedef _dart_eglGetCurrentContext = ffi.Pointer<ffi.Void> Function();

typedef _c_eglCreateSync = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Uint32 type,
  ffi.Pointer<ffi.Int32> attrib_list,
);

typedef _dart_eglCreateSync = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dpy,
  int type,
  ffi.Pointer<ffi.Int32> attrib_list,
);

typedef _c_eglDestroySync = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> sync_1,
);

typedef _dart_eglDestroySync = int Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> sync_1,
);

typedef _c_eglClientWaitSync = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> sync_1,
  ffi.Int32 flags,
  ffi.Int32 timeout,
);

typedef _dart_eglClientWaitSync = int Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> sync_1,
  int flags,
  int timeout,
);

typedef _c_eglGetSyncAttrib = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> sync_1,
  ffi.Int32 attribute,
  ffi.Pointer<ffi.Int32> value,
);

typedef _dart_eglGetSyncAttrib = int Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> sync_1,
  int attribute,
  ffi.Pointer<ffi.Int32> value,
);

typedef _c_eglCreateImage = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> ctx,
  ffi.Uint32 target,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Pointer<ffi.Int32> attrib_list,
);

typedef _dart_eglCreateImage = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> ctx,
  int target,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Pointer<ffi.Int32> attrib_list,
);

typedef _c_eglDestroyImage = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> image,
);

typedef _dart_eglDestroyImage = int Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> image,
);

typedef _c_eglGetPlatformDisplay = ffi.Pointer<ffi.Void> Function(
  ffi.Uint32 platform,
  ffi.Pointer<ffi.Void> native_display,
  ffi.Pointer<ffi.Int32> attrib_list,
);

typedef _dart_eglGetPlatformDisplay = ffi.Pointer<ffi.Void> Function(
  int platform,
  ffi.Pointer<ffi.Void> native_display,
  ffi.Pointer<ffi.Int32> attrib_list,
);

typedef _c_eglCreatePlatformWindowSurface = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> config,
  ffi.Pointer<ffi.Void> native_window,
  ffi.Pointer<ffi.Int32> attrib_list,
);

typedef _dart_eglCreatePlatformWindowSurface = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> config,
  ffi.Pointer<ffi.Void> native_window,
  ffi.Pointer<ffi.Int32> attrib_list,
);

typedef _c_eglCreatePlatformPixmapSurface = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> config,
  ffi.Pointer<ffi.Void> native_pixmap,
  ffi.Pointer<ffi.Int32> attrib_list,
);

typedef _dart_eglCreatePlatformPixmapSurface = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> config,
  ffi.Pointer<ffi.Void> native_pixmap,
  ffi.Pointer<ffi.Int32> attrib_list,
);

typedef _c_eglWaitSync = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> sync_1,
  ffi.Int32 flags,
);

typedef _dart_eglWaitSync = int Function(
  ffi.Pointer<ffi.Void> dpy,
  ffi.Pointer<ffi.Void> sync_1,
  int flags,
);

typedef _c___va_start = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
);

typedef _dart___va_start = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
);

typedef _c___security_init_cookie = ffi.Void Function();

typedef _dart___security_init_cookie = void Function();

typedef _c___security_check_cookie = ffi.Void Function(
  ffi.Uint64 _StackCookie,
);

typedef _dart___security_check_cookie = void Function(
  int _StackCookie,
);

typedef _c___report_gsfailure = ffi.Void Function(
  ffi.Uint64 _StackCookie,
);

typedef _dart___report_gsfailure = void Function(
  int _StackCookie,
);

typedef _c___C_specific_handler = ffi.Int32 Function(
  ffi.Pointer<EXCEPTION_RECORD> ExceptionRecord,
  ffi.Pointer<ffi.Void> EstablisherFrame,
  ffi.Pointer<PCONTEXT> ContextRecord,
  ffi.Pointer<PDISPATCHER_CONTEXT> DispatcherContext,
);

typedef _dart___C_specific_handler = int Function(
  ffi.Pointer<EXCEPTION_RECORD> ExceptionRecord,
  ffi.Pointer<ffi.Void> EstablisherFrame,
  ffi.Pointer<PCONTEXT> ContextRecord,
  ffi.Pointer<PDISPATCHER_CONTEXT> DispatcherContext,
);

typedef _c__exception_code = ffi.Uint64 Function();

typedef _dart__exception_code = int Function();

typedef _c__exception_info = ffi.Pointer<ffi.Void> Function();

typedef _dart__exception_info = ffi.Pointer<ffi.Void> Function();

typedef _c__abnormal_termination = ffi.Int32 Function();

typedef _dart__abnormal_termination = int Function();

typedef _c__invalid_parameter_noinfo = ffi.Void Function();

typedef _dart__invalid_parameter_noinfo = void Function();

typedef _c__invalid_parameter_noinfo_noreturn = ffi.Void Function();

typedef _dart__invalid_parameter_noinfo_noreturn = void Function();

typedef _c__invoke_watson = ffi.Void Function(
  ffi.Pointer<ffi.Uint16> _Expression,
  ffi.Pointer<ffi.Uint16> _FunctionName,
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Uint32 _LineNo,
  ffi.Uint64 _Reserved,
);

typedef _dart__invoke_watson = void Function(
  ffi.Pointer<ffi.Uint16> _Expression,
  ffi.Pointer<ffi.Uint16> _FunctionName,
  ffi.Pointer<ffi.Uint16> _FileName,
  int _LineNo,
  int _Reserved,
);

typedef _c___pctype_func = ffi.Pointer<ffi.Uint16> Function();

typedef _dart___pctype_func = ffi.Pointer<ffi.Uint16> Function();

typedef _c___pwctype_func = ffi.Pointer<ffi.Uint16> Function();

typedef _dart___pwctype_func = ffi.Pointer<ffi.Uint16> Function();

typedef _c_iswalnum = ffi.Int32 Function(
  ffi.Uint16 _C,
);

typedef _dart_iswalnum = int Function(
  int _C,
);

typedef _c_iswalpha = ffi.Int32 Function(
  ffi.Uint16 _C,
);

typedef _dart_iswalpha = int Function(
  int _C,
);

typedef _c_iswascii = ffi.Int32 Function(
  ffi.Uint16 _C,
);

typedef _dart_iswascii = int Function(
  int _C,
);

typedef _c_iswblank = ffi.Int32 Function(
  ffi.Uint16 _C,
);

typedef _dart_iswblank = int Function(
  int _C,
);

typedef _c_iswcntrl = ffi.Int32 Function(
  ffi.Uint16 _C,
);

typedef _dart_iswcntrl = int Function(
  int _C,
);

typedef _c_iswdigit = ffi.Int32 Function(
  ffi.Uint16 _C,
);

typedef _dart_iswdigit = int Function(
  int _C,
);

typedef _c_iswgraph = ffi.Int32 Function(
  ffi.Uint16 _C,
);

typedef _dart_iswgraph = int Function(
  int _C,
);

typedef _c_iswlower = ffi.Int32 Function(
  ffi.Uint16 _C,
);

typedef _dart_iswlower = int Function(
  int _C,
);

typedef _c_iswprint = ffi.Int32 Function(
  ffi.Uint16 _C,
);

typedef _dart_iswprint = int Function(
  int _C,
);

typedef _c_iswpunct = ffi.Int32 Function(
  ffi.Uint16 _C,
);

typedef _dart_iswpunct = int Function(
  int _C,
);

typedef _c_iswspace = ffi.Int32 Function(
  ffi.Uint16 _C,
);

typedef _dart_iswspace = int Function(
  int _C,
);

typedef _c_iswupper = ffi.Int32 Function(
  ffi.Uint16 _C,
);

typedef _dart_iswupper = int Function(
  int _C,
);

typedef _c_iswxdigit = ffi.Int32 Function(
  ffi.Uint16 _C,
);

typedef _dart_iswxdigit = int Function(
  int _C,
);

typedef _c___iswcsymf = ffi.Int32 Function(
  ffi.Uint16 _C,
);

typedef _dart___iswcsymf = int Function(
  int _C,
);

typedef _c___iswcsym = ffi.Int32 Function(
  ffi.Uint16 _C,
);

typedef _dart___iswcsym = int Function(
  int _C,
);

typedef _c__iswalnum_l = ffi.Int32 Function(
  ffi.Uint16 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__iswalnum_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__iswalpha_l = ffi.Int32 Function(
  ffi.Uint16 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__iswalpha_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__iswblank_l = ffi.Int32 Function(
  ffi.Uint16 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__iswblank_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__iswcntrl_l = ffi.Int32 Function(
  ffi.Uint16 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__iswcntrl_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__iswdigit_l = ffi.Int32 Function(
  ffi.Uint16 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__iswdigit_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__iswgraph_l = ffi.Int32 Function(
  ffi.Uint16 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__iswgraph_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__iswlower_l = ffi.Int32 Function(
  ffi.Uint16 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__iswlower_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__iswprint_l = ffi.Int32 Function(
  ffi.Uint16 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__iswprint_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__iswpunct_l = ffi.Int32 Function(
  ffi.Uint16 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__iswpunct_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__iswspace_l = ffi.Int32 Function(
  ffi.Uint16 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__iswspace_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__iswupper_l = ffi.Int32 Function(
  ffi.Uint16 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__iswupper_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__iswxdigit_l = ffi.Int32 Function(
  ffi.Uint16 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__iswxdigit_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__iswcsymf_l = ffi.Int32 Function(
  ffi.Uint16 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__iswcsymf_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__iswcsym_l = ffi.Int32 Function(
  ffi.Uint16 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__iswcsym_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_towupper = ffi.Uint16 Function(
  ffi.Uint16 _C,
);

typedef _dart_towupper = int Function(
  int _C,
);

typedef _c_towlower = ffi.Uint16 Function(
  ffi.Uint16 _C,
);

typedef _dart_towlower = int Function(
  int _C,
);

typedef _c_iswctype = ffi.Int32 Function(
  ffi.Uint16 _C,
  ffi.Uint16 _Type,
);

typedef _dart_iswctype = int Function(
  int _C,
  int _Type,
);

typedef _c__towupper_l = ffi.Uint16 Function(
  ffi.Uint16 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__towupper_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__towlower_l = ffi.Uint16 Function(
  ffi.Uint16 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__towlower_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__iswctype_l = ffi.Int32 Function(
  ffi.Uint16 _C,
  ffi.Uint16 _Type,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__iswctype_l = int Function(
  int _C,
  int _Type,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_isleadbyte = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart_isleadbyte = int Function(
  int _C,
);

typedef _c__isleadbyte_l = ffi.Int32 Function(
  ffi.Int32 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__isleadbyte_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_is_wctype = ffi.Int32 Function(
  ffi.Uint16 _C,
  ffi.Uint16 _Type,
);

typedef _dart_is_wctype = int Function(
  int _C,
  int _Type,
);

typedef _c__isctype = ffi.Int32 Function(
  ffi.Int32 _C,
  ffi.Int32 _Type,
);

typedef _dart__isctype = int Function(
  int _C,
  int _Type,
);

typedef _c__isctype_l = ffi.Int32 Function(
  ffi.Int32 _C,
  ffi.Int32 _Type,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__isctype_l = int Function(
  int _C,
  int _Type,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_isalpha = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart_isalpha = int Function(
  int _C,
);

typedef _c__isalpha_l = ffi.Int32 Function(
  ffi.Int32 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__isalpha_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_isupper = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart_isupper = int Function(
  int _C,
);

typedef _c__isupper_l = ffi.Int32 Function(
  ffi.Int32 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__isupper_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_islower = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart_islower = int Function(
  int _C,
);

typedef _c__islower_l = ffi.Int32 Function(
  ffi.Int32 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__islower_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_isdigit = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart_isdigit = int Function(
  int _C,
);

typedef _c__isdigit_l = ffi.Int32 Function(
  ffi.Int32 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__isdigit_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_isxdigit = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart_isxdigit = int Function(
  int _C,
);

typedef _c__isxdigit_l = ffi.Int32 Function(
  ffi.Int32 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__isxdigit_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_isspace = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart_isspace = int Function(
  int _C,
);

typedef _c__isspace_l = ffi.Int32 Function(
  ffi.Int32 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__isspace_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_ispunct = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart_ispunct = int Function(
  int _C,
);

typedef _c__ispunct_l = ffi.Int32 Function(
  ffi.Int32 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__ispunct_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_isblank = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart_isblank = int Function(
  int _C,
);

typedef _c__isblank_l = ffi.Int32 Function(
  ffi.Int32 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__isblank_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_isalnum = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart_isalnum = int Function(
  int _C,
);

typedef _c__isalnum_l = ffi.Int32 Function(
  ffi.Int32 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__isalnum_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_isprint = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart_isprint = int Function(
  int _C,
);

typedef _c__isprint_l = ffi.Int32 Function(
  ffi.Int32 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__isprint_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_isgraph = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart_isgraph = int Function(
  int _C,
);

typedef _c__isgraph_l = ffi.Int32 Function(
  ffi.Int32 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__isgraph_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_iscntrl = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart_iscntrl = int Function(
  int _C,
);

typedef _c__iscntrl_l = ffi.Int32 Function(
  ffi.Int32 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__iscntrl_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_toupper = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart_toupper = int Function(
  int _C,
);

typedef _c_tolower = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart_tolower = int Function(
  int _C,
);

typedef _c__tolower = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart__tolower = int Function(
  int _C,
);

typedef _c__tolower_l = ffi.Int32 Function(
  ffi.Int32 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__tolower_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__toupper = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart__toupper = int Function(
  int _C,
);

typedef _c__toupper_l = ffi.Int32 Function(
  ffi.Int32 _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__toupper_l = int Function(
  int _C,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c___isascii = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart___isascii = int Function(
  int _C,
);

typedef _c___toascii = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart___toascii = int Function(
  int _C,
);

typedef _c___iscsymf = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart___iscsymf = int Function(
  int _C,
);

typedef _c___iscsym = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart___iscsym = int Function(
  int _C,
);

typedef _c___acrt_locale_get_ctype_array_value = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Locale_pctype_array,
  ffi.Int32 _Char_value,
  ffi.Int32 _Mask,
);

typedef _dart___acrt_locale_get_ctype_array_value = int Function(
  ffi.Pointer<ffi.Uint16> _Locale_pctype_array,
  int _Char_value,
  int _Mask,
);

typedef _c____mb_cur_max_func = ffi.Int32 Function();

typedef _dart____mb_cur_max_func = int Function();

typedef _c____mb_cur_max_l_func = ffi.Int32 Function(
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart____mb_cur_max_l_func = int Function(
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c___ascii_tolower = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart___ascii_tolower = int Function(
  int _C,
);

typedef _c___ascii_toupper = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart___ascii_toupper = int Function(
  int _C,
);

typedef _c___ascii_iswalpha = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart___ascii_iswalpha = int Function(
  int _C,
);

typedef _c___ascii_iswdigit = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart___ascii_iswdigit = int Function(
  int _C,
);

typedef _c___ascii_towlower = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart___ascii_towlower = int Function(
  int _C,
);

typedef _c___ascii_towupper = ffi.Int32 Function(
  ffi.Int32 _C,
);

typedef _dart___ascii_towupper = int Function(
  int _C,
);

typedef _c___acrt_get_locale_data_prefix = ffi.Pointer<__crt_locale_data_public>
    Function(
  ffi.Pointer<ffi.Void> _LocalePointers,
);

typedef _dart___acrt_get_locale_data_prefix
    = ffi.Pointer<__crt_locale_data_public> Function(
  ffi.Pointer<ffi.Void> _LocalePointers,
);

typedef _c__chvalidchk_l = ffi.Int32 Function(
  ffi.Int32 _C,
  ffi.Int32 _Mask,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__chvalidchk_l = int Function(
  int _C,
  int _Mask,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__ischartype_l = ffi.Int32 Function(
  ffi.Int32 _C,
  ffi.Int32 _Mask,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__ischartype_l = int Function(
  int _C,
  int _Mask,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_HandleToULong = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> h,
);

typedef _dart_HandleToULong = int Function(
  ffi.Pointer<ffi.Void> h,
);

typedef _c_HandleToLong = ffi.Int64 Function(
  ffi.Pointer<ffi.Void> h,
);

typedef _dart_HandleToLong = int Function(
  ffi.Pointer<ffi.Void> h,
);

typedef _c_ULongToHandle = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 h,
);

typedef _dart_ULongToHandle = ffi.Pointer<ffi.Void> Function(
  int h,
);

typedef _c_LongToHandle = ffi.Pointer<ffi.Void> Function(
  ffi.Int64 h,
);

typedef _dart_LongToHandle = ffi.Pointer<ffi.Void> Function(
  int h,
);

typedef _c_PtrToUlong = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> p,
);

typedef _dart_PtrToUlong = int Function(
  ffi.Pointer<ffi.Void> p,
);

typedef _c_PtrToUint = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> p,
);

typedef _dart_PtrToUint = int Function(
  ffi.Pointer<ffi.Void> p,
);

typedef _c_PtrToUshort = ffi.Uint16 Function(
  ffi.Pointer<ffi.Void> p,
);

typedef _dart_PtrToUshort = int Function(
  ffi.Pointer<ffi.Void> p,
);

typedef _c_PtrToLong = ffi.Int64 Function(
  ffi.Pointer<ffi.Void> p,
);

typedef _dart_PtrToLong = int Function(
  ffi.Pointer<ffi.Void> p,
);

typedef _c_PtrToInt = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> p,
);

typedef _dart_PtrToInt = int Function(
  ffi.Pointer<ffi.Void> p,
);

typedef _c_PtrToShort = ffi.Int16 Function(
  ffi.Pointer<ffi.Void> p,
);

typedef _dart_PtrToShort = int Function(
  ffi.Pointer<ffi.Void> p,
);

typedef _c_IntToPtr = ffi.Pointer<ffi.Void> Function(
  ffi.Int32 i,
);

typedef _dart_IntToPtr = ffi.Pointer<ffi.Void> Function(
  int i,
);

typedef _c_UIntToPtr = ffi.Pointer<ffi.Void> Function(
  ffi.Uint32 ui,
);

typedef _dart_UIntToPtr = ffi.Pointer<ffi.Void> Function(
  int ui,
);

typedef _c_LongToPtr = ffi.Pointer<ffi.Void> Function(
  ffi.Int64 l,
);

typedef _dart_LongToPtr = ffi.Pointer<ffi.Void> Function(
  int l,
);

typedef _c_ULongToPtr = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 ul,
);

typedef _dart_ULongToPtr = ffi.Pointer<ffi.Void> Function(
  int ul,
);

typedef _c_Ptr32ToPtr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> p,
);

typedef _dart_Ptr32ToPtr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> p,
);

typedef _c_Handle32ToHandle = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> h,
);

typedef _dart_Handle32ToHandle = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> h,
);

typedef _c_PtrToPtr32 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> p,
);

typedef _dart_PtrToPtr32 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> p,
);

typedef _c__rotl8 = ffi.Uint8 Function(
  ffi.Uint8 Value,
  ffi.Uint8 Shift,
);

typedef _dart__rotl8 = int Function(
  int Value,
  int Shift,
);

typedef _c__rotl16 = ffi.Uint16 Function(
  ffi.Uint16 Value,
  ffi.Uint8 Shift,
);

typedef _dart__rotl16 = int Function(
  int Value,
  int Shift,
);

typedef _c__rotr8 = ffi.Uint8 Function(
  ffi.Uint8 Value,
  ffi.Uint8 Shift,
);

typedef _dart__rotr8 = int Function(
  int Value,
  int Shift,
);

typedef _c__rotr16 = ffi.Uint16 Function(
  ffi.Uint16 Value,
  ffi.Uint8 Shift,
);

typedef _dart__rotr16 = int Function(
  int Value,
  int Shift,
);

typedef _c__rotl = ffi.Uint32 Function(
  ffi.Uint32 Value,
  ffi.Int32 Shift,
);

typedef _dart__rotl = int Function(
  int Value,
  int Shift,
);

typedef _c__rotl64 = ffi.Uint64 Function(
  ffi.Uint64 Value,
  ffi.Int32 Shift,
);

typedef _dart__rotl64 = int Function(
  int Value,
  int Shift,
);

typedef _c__rotr = ffi.Uint32 Function(
  ffi.Uint32 Value,
  ffi.Int32 Shift,
);

typedef _dart__rotr = int Function(
  int Value,
  int Shift,
);

typedef _c__rotr64 = ffi.Uint64 Function(
  ffi.Uint64 Value,
  ffi.Int32 Shift,
);

typedef _dart__rotr64 = int Function(
  int Value,
  int Shift,
);

typedef _c__errno = ffi.Pointer<ffi.Int32> Function();

typedef _dart__errno = ffi.Pointer<ffi.Int32> Function();

typedef _c__set_errno = ffi.Int32 Function(
  ffi.Int32 _Value,
);

typedef _dart__set_errno = int Function(
  int _Value,
);

typedef _c__get_errno = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> _Value,
);

typedef _dart__get_errno = int Function(
  ffi.Pointer<ffi.Int32> _Value,
);

typedef _c___doserrno = ffi.Pointer<ffi.Uint64> Function();

typedef _dart___doserrno = ffi.Pointer<ffi.Uint64> Function();

typedef _c__set_doserrno = ffi.Int32 Function(
  ffi.Uint64 _Value,
);

typedef _dart__set_doserrno = int Function(
  int _Value,
);

typedef _c__get_doserrno = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> _Value,
);

typedef _dart__get_doserrno = int Function(
  ffi.Pointer<ffi.Uint64> _Value,
);

typedef _c_memchr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Buf,
  ffi.Int32 _Val,
  ffi.Uint64 _MaxCount,
);

typedef _dart_memchr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Buf,
  int _Val,
  int _MaxCount,
);

typedef _c_memcmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _Buf1,
  ffi.Pointer<ffi.Void> _Buf2,
  ffi.Uint64 _Size,
);

typedef _dart_memcmp = int Function(
  ffi.Pointer<ffi.Void> _Buf1,
  ffi.Pointer<ffi.Void> _Buf2,
  int _Size,
);

typedef _c_memcpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Dst,
  ffi.Pointer<ffi.Void> _Src,
  ffi.Uint64 _Size,
);

typedef _dart_memcpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Dst,
  ffi.Pointer<ffi.Void> _Src,
  int _Size,
);

typedef _c_memmove = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Dst,
  ffi.Pointer<ffi.Void> _Src,
  ffi.Uint64 _Size,
);

typedef _dart_memmove = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Dst,
  ffi.Pointer<ffi.Void> _Src,
  int _Size,
);

typedef _c_memset = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Dst,
  ffi.Int32 _Val,
  ffi.Uint64 _Size,
);

typedef _dart_memset = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Dst,
  int _Val,
  int _Size,
);

typedef _c_strchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Str,
  ffi.Int32 _Val,
);

typedef _dart_strchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Str,
  int _Val,
);

typedef _c_strrchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Str,
  ffi.Int32 _Ch,
);

typedef _dart_strrchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Str,
  int _Ch,
);

typedef _c_strstr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Str,
  ffi.Pointer<ffi.Int8> _SubStr,
);

typedef _dart_strstr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Str,
  ffi.Pointer<ffi.Int8> _SubStr,
);

typedef _c_wcschr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Str,
  ffi.Uint16 _Ch,
);

typedef _dart_wcschr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Str,
  int _Ch,
);

typedef _c_wcsrchr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Str,
  ffi.Uint16 _Ch,
);

typedef _dart_wcsrchr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Str,
  int _Ch,
);

typedef _c_wcsstr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Str,
  ffi.Pointer<ffi.Uint16> _SubStr,
);

typedef _dart_wcsstr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Str,
  ffi.Pointer<ffi.Uint16> _SubStr,
);

typedef _c_memcpy_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _Destination,
  ffi.Uint64 _DestinationSize,
  ffi.Pointer<ffi.Void> _Source,
  ffi.Uint64 _SourceSize,
);

typedef _dart_memcpy_s = int Function(
  ffi.Pointer<ffi.Void> _Destination,
  int _DestinationSize,
  ffi.Pointer<ffi.Void> _Source,
  int _SourceSize,
);

typedef _c_memmove_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _Destination,
  ffi.Uint64 _DestinationSize,
  ffi.Pointer<ffi.Void> _Source,
  ffi.Uint64 _SourceSize,
);

typedef _dart_memmove_s = int Function(
  ffi.Pointer<ffi.Void> _Destination,
  int _DestinationSize,
  ffi.Pointer<ffi.Void> _Source,
  int _SourceSize,
);

typedef _c__memicmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _Buf1,
  ffi.Pointer<ffi.Void> _Buf2,
  ffi.Uint64 _Size,
);

typedef _dart__memicmp = int Function(
  ffi.Pointer<ffi.Void> _Buf1,
  ffi.Pointer<ffi.Void> _Buf2,
  int _Size,
);

typedef _c__memicmp_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _Buf1,
  ffi.Pointer<ffi.Void> _Buf2,
  ffi.Uint64 _Size,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__memicmp_l = int Function(
  ffi.Pointer<ffi.Void> _Buf1,
  ffi.Pointer<ffi.Void> _Buf2,
  int _Size,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_memccpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Dst,
  ffi.Pointer<ffi.Void> _Src,
  ffi.Int32 _Val,
  ffi.Uint64 _Size,
);

typedef _dart_memccpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Dst,
  ffi.Pointer<ffi.Void> _Src,
  int _Val,
  int _Size,
);

typedef _c_memicmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _Buf1,
  ffi.Pointer<ffi.Void> _Buf2,
  ffi.Uint64 _Size,
);

typedef _dart_memicmp = int Function(
  ffi.Pointer<ffi.Void> _Buf1,
  ffi.Pointer<ffi.Void> _Buf2,
  int _Size,
);

typedef _c_wcscat_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Uint64 _SizeInWords,
  ffi.Pointer<ffi.Uint16> _Source,
);

typedef _dart_wcscat_s = int Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  int _SizeInWords,
  ffi.Pointer<ffi.Uint16> _Source,
);

typedef _c_wcscpy_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Uint64 _SizeInWords,
  ffi.Pointer<ffi.Uint16> _Source,
);

typedef _dart_wcscpy_s = int Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  int _SizeInWords,
  ffi.Pointer<ffi.Uint16> _Source,
);

typedef _c_wcsncat_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Uint64 _SizeInWords,
  ffi.Pointer<ffi.Uint16> _Source,
  ffi.Uint64 _MaxCount,
);

typedef _dart_wcsncat_s = int Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  int _SizeInWords,
  ffi.Pointer<ffi.Uint16> _Source,
  int _MaxCount,
);

typedef _c_wcsncpy_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Uint64 _SizeInWords,
  ffi.Pointer<ffi.Uint16> _Source,
  ffi.Uint64 _MaxCount,
);

typedef _dart_wcsncpy_s = int Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  int _SizeInWords,
  ffi.Pointer<ffi.Uint16> _Source,
  int _MaxCount,
);

typedef _c_wcstok_s = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Uint16> _Delimiter,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Context,
);

typedef _dart_wcstok_s = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Uint16> _Delimiter,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Context,
);

typedef _c__wcsdup = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _dart__wcsdup = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _c_wcscat = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Pointer<ffi.Uint16> _Source,
);

typedef _dart_wcscat = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Pointer<ffi.Uint16> _Source,
);

typedef _c_wcscmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
);

typedef _dart_wcscmp = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
);

typedef _c_wcscpy = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Pointer<ffi.Uint16> _Source,
);

typedef _dart_wcscpy = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Pointer<ffi.Uint16> _Source,
);

typedef _c_wcscspn = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Uint16> _Control,
);

typedef _dart_wcscspn = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Uint16> _Control,
);

typedef _c_wcslen = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _dart_wcslen = int Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _c_wcsnlen = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _Source,
  ffi.Uint64 _MaxCount,
);

typedef _dart_wcsnlen = int Function(
  ffi.Pointer<ffi.Uint16> _Source,
  int _MaxCount,
);

typedef _c_wcsnlen_s = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _Source,
  ffi.Uint64 _MaxCount,
);

typedef _dart_wcsnlen_s = int Function(
  ffi.Pointer<ffi.Uint16> _Source,
  int _MaxCount,
);

typedef _c_wcsncat = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Pointer<ffi.Uint16> _Source,
  ffi.Uint64 _Count,
);

typedef _dart_wcsncat = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Pointer<ffi.Uint16> _Source,
  int _Count,
);

typedef _c_wcsncmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Uint64 _MaxCount,
);

typedef _dart_wcsncmp = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  int _MaxCount,
);

typedef _c_wcsncpy = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Pointer<ffi.Uint16> _Source,
  ffi.Uint64 _Count,
);

typedef _dart_wcsncpy = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Pointer<ffi.Uint16> _Source,
  int _Count,
);

typedef _c_wcspbrk = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Uint16> _Control,
);

typedef _dart_wcspbrk = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Uint16> _Control,
);

typedef _c_wcsspn = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Uint16> _Control,
);

typedef _dart_wcsspn = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Uint16> _Control,
);

typedef _c_wcstok = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Uint16> _Delimiter,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Context,
);

typedef _dart_wcstok = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Uint16> _Delimiter,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Context,
);

typedef _c__wcstok = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Uint16> _Delimiter,
);

typedef _dart__wcstok = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Uint16> _Delimiter,
);

typedef _c__wcserror = ffi.Pointer<ffi.Uint16> Function(
  ffi.Int32 _ErrorNumber,
);

typedef _dart__wcserror = ffi.Pointer<ffi.Uint16> Function(
  int _ErrorNumber,
);

typedef _c__wcserror_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _SizeInWords,
  ffi.Int32 _ErrorNumber,
);

typedef _dart__wcserror_s = int Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _SizeInWords,
  int _ErrorNumber,
);

typedef _c___wcserror = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _dart___wcserror = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _c___wcserror_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _SizeInWords,
  ffi.Pointer<ffi.Uint16> _ErrorMessage,
);

typedef _dart___wcserror_s = int Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _SizeInWords,
  ffi.Pointer<ffi.Uint16> _ErrorMessage,
);

typedef _c__wcsicmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
);

typedef _dart__wcsicmp = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
);

typedef _c__wcsicmp_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcsicmp_l = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__wcsnicmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Uint64 _MaxCount,
);

typedef _dart__wcsnicmp = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  int _MaxCount,
);

typedef _c__wcsnicmp_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Uint64 _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcsnicmp_l = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  int _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__wcsnset_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Uint64 _SizeInWords,
  ffi.Uint16 _Value,
  ffi.Uint64 _MaxCount,
);

typedef _dart__wcsnset_s = int Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  int _SizeInWords,
  int _Value,
  int _MaxCount,
);

typedef _c__wcsnset = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Uint16 _Value,
  ffi.Uint64 _MaxCount,
);

typedef _dart__wcsnset = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  int _Value,
  int _MaxCount,
);

typedef _c__wcsrev = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _dart__wcsrev = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _c__wcsset_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Uint64 _SizeInWords,
  ffi.Uint16 _Value,
);

typedef _dart__wcsset_s = int Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  int _SizeInWords,
  int _Value,
);

typedef _c__wcsset = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Uint16 _Value,
);

typedef _dart__wcsset = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  int _Value,
);

typedef _c__wcslwr_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Uint64 _SizeInWords,
);

typedef _dart__wcslwr_s = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  int _SizeInWords,
);

typedef _c__wcslwr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _dart__wcslwr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _c__wcslwr_s_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Uint64 _SizeInWords,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcslwr_s_l = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  int _SizeInWords,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__wcslwr_l = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcslwr_l = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__wcsupr_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Uint64 _Size,
);

typedef _dart__wcsupr_s = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  int _Size,
);

typedef _c__wcsupr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _dart__wcsupr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _c__wcsupr_s_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Uint64 _Size,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcsupr_s_l = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  int _Size,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__wcsupr_l = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcsupr_l = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_wcsxfrm = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Pointer<ffi.Uint16> _Source,
  ffi.Uint64 _MaxCount,
);

typedef _dart_wcsxfrm = int Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Pointer<ffi.Uint16> _Source,
  int _MaxCount,
);

typedef _c__wcsxfrm_l = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Pointer<ffi.Uint16> _Source,
  ffi.Uint64 _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcsxfrm_l = int Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Pointer<ffi.Uint16> _Source,
  int _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_wcscoll = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
);

typedef _dart_wcscoll = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
);

typedef _c__wcscoll_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcscoll_l = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__wcsicoll = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
);

typedef _dart__wcsicoll = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
);

typedef _c__wcsicoll_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcsicoll_l = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__wcsncoll = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Uint64 _MaxCount,
);

typedef _dart__wcsncoll = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  int _MaxCount,
);

typedef _c__wcsncoll_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Uint64 _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcsncoll_l = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  int _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__wcsnicoll = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Uint64 _MaxCount,
);

typedef _dart__wcsnicoll = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  int _MaxCount,
);

typedef _c__wcsnicoll_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Uint64 _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcsnicoll_l = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  int _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_wcsdup = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _dart_wcsdup = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _c_wcsicmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
);

typedef _dart_wcsicmp = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
);

typedef _c_wcsnicmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Uint64 _MaxCount,
);

typedef _dart_wcsnicmp = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  int _MaxCount,
);

typedef _c_wcsnset = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Uint16 _Value,
  ffi.Uint64 _MaxCount,
);

typedef _dart_wcsnset = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  int _Value,
  int _MaxCount,
);

typedef _c_wcsrev = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _dart_wcsrev = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _c_wcsset = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Uint16 _Value,
);

typedef _dart_wcsset = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  int _Value,
);

typedef _c_wcslwr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _dart_wcslwr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _c_wcsupr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _dart_wcsupr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _c_wcsicoll = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
);

typedef _dart_wcsicoll = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
);

typedef _c_strcpy_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Uint64 _SizeInBytes,
  ffi.Pointer<ffi.Int8> _Source,
);

typedef _dart_strcpy_s = int Function(
  ffi.Pointer<ffi.Int8> _Destination,
  int _SizeInBytes,
  ffi.Pointer<ffi.Int8> _Source,
);

typedef _c_strcat_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Uint64 _SizeInBytes,
  ffi.Pointer<ffi.Int8> _Source,
);

typedef _dart_strcat_s = int Function(
  ffi.Pointer<ffi.Int8> _Destination,
  int _SizeInBytes,
  ffi.Pointer<ffi.Int8> _Source,
);

typedef _c_strerror_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _SizeInBytes,
  ffi.Int32 _ErrorNumber,
);

typedef _dart_strerror_s = int Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  int _SizeInBytes,
  int _ErrorNumber,
);

typedef _c_strncat_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Uint64 _SizeInBytes,
  ffi.Pointer<ffi.Int8> _Source,
  ffi.Uint64 _MaxCount,
);

typedef _dart_strncat_s = int Function(
  ffi.Pointer<ffi.Int8> _Destination,
  int _SizeInBytes,
  ffi.Pointer<ffi.Int8> _Source,
  int _MaxCount,
);

typedef _c_strncpy_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Uint64 _SizeInBytes,
  ffi.Pointer<ffi.Int8> _Source,
  ffi.Uint64 _MaxCount,
);

typedef _dart_strncpy_s = int Function(
  ffi.Pointer<ffi.Int8> _Destination,
  int _SizeInBytes,
  ffi.Pointer<ffi.Int8> _Source,
  int _MaxCount,
);

typedef _c_strtok_s = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Int8> _Delimiter,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Context,
);

typedef _dart_strtok_s = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Int8> _Delimiter,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Context,
);

typedef _c__memccpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Dst,
  ffi.Pointer<ffi.Void> _Src,
  ffi.Int32 _Val,
  ffi.Uint64 _MaxCount,
);

typedef _dart__memccpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Dst,
  ffi.Pointer<ffi.Void> _Src,
  int _Val,
  int _MaxCount,
);

typedef _c_strcat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Pointer<ffi.Int8> _Source,
);

typedef _dart_strcat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Pointer<ffi.Int8> _Source,
);

typedef _c_strcmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Str1,
  ffi.Pointer<ffi.Int8> _Str2,
);

typedef _dart_strcmp = int Function(
  ffi.Pointer<ffi.Int8> _Str1,
  ffi.Pointer<ffi.Int8> _Str2,
);

typedef _c__strcmpi = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
);

typedef _dart__strcmpi = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
);

typedef _c_strcoll = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
);

typedef _dart_strcoll = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
);

typedef _c__strcoll_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strcoll_l = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_strcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Pointer<ffi.Int8> _Source,
);

typedef _dart_strcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Pointer<ffi.Int8> _Source,
);

typedef _c_strcspn = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _Str,
  ffi.Pointer<ffi.Int8> _Control,
);

typedef _dart_strcspn = int Function(
  ffi.Pointer<ffi.Int8> _Str,
  ffi.Pointer<ffi.Int8> _Control,
);

typedef _c__strdup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Source,
);

typedef _dart__strdup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Source,
);

typedef _c__strerror = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _ErrorMessage,
);

typedef _dart__strerror = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _ErrorMessage,
);

typedef _c__strerror_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _SizeInBytes,
  ffi.Pointer<ffi.Int8> _ErrorMessage,
);

typedef _dart__strerror_s = int Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  int _SizeInBytes,
  ffi.Pointer<ffi.Int8> _ErrorMessage,
);

typedef _c_strerror = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 _ErrorMessage,
);

typedef _dart_strerror = ffi.Pointer<ffi.Int8> Function(
  int _ErrorMessage,
);

typedef _c__stricmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
);

typedef _dart__stricmp = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
);

typedef _c__stricoll = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
);

typedef _dart__stricoll = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
);

typedef _c__stricoll_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__stricoll_l = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__stricmp_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__stricmp_l = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_strlen = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _Str,
);

typedef _dart_strlen = int Function(
  ffi.Pointer<ffi.Int8> _Str,
);

typedef _c__strlwr_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Uint64 _Size,
);

typedef _dart__strlwr_s = int Function(
  ffi.Pointer<ffi.Int8> _String,
  int _Size,
);

typedef _c__strlwr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _dart__strlwr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _c__strlwr_s_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Uint64 _Size,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strlwr_s_l = int Function(
  ffi.Pointer<ffi.Int8> _String,
  int _Size,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__strlwr_l = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strlwr_l = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_strncat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Pointer<ffi.Int8> _Source,
  ffi.Uint64 _Count,
);

typedef _dart_strncat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Pointer<ffi.Int8> _Source,
  int _Count,
);

typedef _c_strncmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Str1,
  ffi.Pointer<ffi.Int8> _Str2,
  ffi.Uint64 _MaxCount,
);

typedef _dart_strncmp = int Function(
  ffi.Pointer<ffi.Int8> _Str1,
  ffi.Pointer<ffi.Int8> _Str2,
  int _MaxCount,
);

typedef _c__strnicmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  ffi.Uint64 _MaxCount,
);

typedef _dart__strnicmp = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  int _MaxCount,
);

typedef _c__strnicmp_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  ffi.Uint64 _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strnicmp_l = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  int _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__strnicoll = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  ffi.Uint64 _MaxCount,
);

typedef _dart__strnicoll = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  int _MaxCount,
);

typedef _c__strnicoll_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  ffi.Uint64 _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strnicoll_l = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  int _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__strncoll = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  ffi.Uint64 _MaxCount,
);

typedef _dart__strncoll = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  int _MaxCount,
);

typedef _c__strncoll_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  ffi.Uint64 _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strncoll_l = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  int _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c___strncnt = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Uint64 _Count,
);

typedef _dart___strncnt = int Function(
  ffi.Pointer<ffi.Int8> _String,
  int _Count,
);

typedef _c_strncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Pointer<ffi.Int8> _Source,
  ffi.Uint64 _Count,
);

typedef _dart_strncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Pointer<ffi.Int8> _Source,
  int _Count,
);

typedef _c_strnlen = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Uint64 _MaxCount,
);

typedef _dart_strnlen = int Function(
  ffi.Pointer<ffi.Int8> _String,
  int _MaxCount,
);

typedef _c_strnlen_s = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Uint64 _MaxCount,
);

typedef _dart_strnlen_s = int Function(
  ffi.Pointer<ffi.Int8> _String,
  int _MaxCount,
);

typedef _c__strnset_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Uint64 _SizeInBytes,
  ffi.Int32 _Value,
  ffi.Uint64 _MaxCount,
);

typedef _dart__strnset_s = int Function(
  ffi.Pointer<ffi.Int8> _String,
  int _SizeInBytes,
  int _Value,
  int _MaxCount,
);

typedef _c__strnset = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Int32 _Value,
  ffi.Uint64 _Count,
);

typedef _dart__strnset = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Destination,
  int _Value,
  int _Count,
);

typedef _c_strpbrk = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Str,
  ffi.Pointer<ffi.Int8> _Control,
);

typedef _dart_strpbrk = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Str,
  ffi.Pointer<ffi.Int8> _Control,
);

typedef _c__strrev = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Str,
);

typedef _dart__strrev = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Str,
);

typedef _c__strset_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Uint64 _DestinationSize,
  ffi.Int32 _Value,
);

typedef _dart__strset_s = int Function(
  ffi.Pointer<ffi.Int8> _Destination,
  int _DestinationSize,
  int _Value,
);

typedef _c__strset = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Int32 _Value,
);

typedef _dart__strset = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Destination,
  int _Value,
);

typedef _c_strspn = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _Str,
  ffi.Pointer<ffi.Int8> _Control,
);

typedef _dart_strspn = int Function(
  ffi.Pointer<ffi.Int8> _Str,
  ffi.Pointer<ffi.Int8> _Control,
);

typedef _c_strtok = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Int8> _Delimiter,
);

typedef _dart_strtok = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Int8> _Delimiter,
);

typedef _c__strupr_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Uint64 _Size,
);

typedef _dart__strupr_s = int Function(
  ffi.Pointer<ffi.Int8> _String,
  int _Size,
);

typedef _c__strupr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _dart__strupr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _c__strupr_s_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Uint64 _Size,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strupr_s_l = int Function(
  ffi.Pointer<ffi.Int8> _String,
  int _Size,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__strupr_l = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strupr_l = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_strxfrm = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Pointer<ffi.Int8> _Source,
  ffi.Uint64 _MaxCount,
);

typedef _dart_strxfrm = int Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Pointer<ffi.Int8> _Source,
  int _MaxCount,
);

typedef _c__strxfrm_l = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Pointer<ffi.Int8> _Source,
  ffi.Uint64 _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strxfrm_l = int Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Pointer<ffi.Int8> _Source,
  int _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_strdup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _dart_strdup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _c_strcmpi = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
);

typedef _dart_strcmpi = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
);

typedef _c_stricmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
);

typedef _dart_stricmp = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
);

typedef _c_strlwr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _dart_strlwr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _c_strnicmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  ffi.Uint64 _MaxCount,
);

typedef _dart_strnicmp = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  int _MaxCount,
);

typedef _c_strnset = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Int32 _Value,
  ffi.Uint64 _MaxCount,
);

typedef _dart_strnset = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
  int _Value,
  int _MaxCount,
);

typedef _c_strrev = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _dart_strrev = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _c_strset = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Int32 _Value,
);

typedef _dart_strset = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
  int _Value,
);

typedef _c_strupr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _dart_strupr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _c__bittest = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int64> Base,
  ffi.Int64 Offset,
);

typedef _dart__bittest = int Function(
  ffi.Pointer<ffi.Int64> Base,
  int Offset,
);

typedef _c__bittestandcomplement = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int64> Base,
  ffi.Int64 Offset,
);

typedef _dart__bittestandcomplement = int Function(
  ffi.Pointer<ffi.Int64> Base,
  int Offset,
);

typedef _c__bittestandset = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int64> Base,
  ffi.Int64 Offset,
);

typedef _dart__bittestandset = int Function(
  ffi.Pointer<ffi.Int64> Base,
  int Offset,
);

typedef _c__bittestandreset = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int64> Base,
  ffi.Int64 Offset,
);

typedef _dart__bittestandreset = int Function(
  ffi.Pointer<ffi.Int64> Base,
  int Offset,
);

typedef _c__interlockedbittestandset = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int64> Base,
  ffi.Int64 Offset,
);

typedef _dart__interlockedbittestandset = int Function(
  ffi.Pointer<ffi.Int64> Base,
  int Offset,
);

typedef _c__interlockedbittestandreset = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int64> Base,
  ffi.Int64 Offset,
);

typedef _dart__interlockedbittestandreset = int Function(
  ffi.Pointer<ffi.Int64> Base,
  int Offset,
);

typedef _c__bittest64 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int64> Base,
  ffi.Int64 Offset,
);

typedef _dart__bittest64 = int Function(
  ffi.Pointer<ffi.Int64> Base,
  int Offset,
);

typedef _c__bittestandcomplement64 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int64> Base,
  ffi.Int64 Offset,
);

typedef _dart__bittestandcomplement64 = int Function(
  ffi.Pointer<ffi.Int64> Base,
  int Offset,
);

typedef _c__bittestandset64 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int64> Base,
  ffi.Int64 Offset,
);

typedef _dart__bittestandset64 = int Function(
  ffi.Pointer<ffi.Int64> Base,
  int Offset,
);

typedef _c__bittestandreset64 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int64> Base,
  ffi.Int64 Offset,
);

typedef _dart__bittestandreset64 = int Function(
  ffi.Pointer<ffi.Int64> Base,
  int Offset,
);

typedef _c__interlockedbittestandset64 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int64> Base,
  ffi.Int64 Offset,
);

typedef _dart__interlockedbittestandset64 = int Function(
  ffi.Pointer<ffi.Int64> Base,
  int Offset,
);

typedef _c__interlockedbittestandreset64 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int64> Base,
  ffi.Int64 Offset,
);

typedef _dart__interlockedbittestandreset64 = int Function(
  ffi.Pointer<ffi.Int64> Base,
  int Offset,
);

typedef _c__BitScanForward = ffi.Uint8 Function(
  ffi.Pointer<ffi.Uint64> Index,
  ffi.Uint64 Mask,
);

typedef _dart__BitScanForward = int Function(
  ffi.Pointer<ffi.Uint64> Index,
  int Mask,
);

typedef _c__BitScanReverse = ffi.Uint8 Function(
  ffi.Pointer<ffi.Uint64> Index,
  ffi.Uint64 Mask,
);

typedef _dart__BitScanReverse = int Function(
  ffi.Pointer<ffi.Uint64> Index,
  int Mask,
);

typedef _c__BitScanForward64 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Uint64> Index,
  ffi.Uint64 Mask,
);

typedef _dart__BitScanForward64 = int Function(
  ffi.Pointer<ffi.Uint64> Index,
  int Mask,
);

typedef _c__BitScanReverse64 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Uint64> Index,
  ffi.Uint64 Mask,
);

typedef _dart__BitScanReverse64 = int Function(
  ffi.Pointer<ffi.Uint64> Index,
  int Mask,
);

typedef _c__InterlockedIncrement16 = ffi.Int16 Function(
  ffi.Pointer<ffi.Int16> Addend,
);

typedef _dart__InterlockedIncrement16 = int Function(
  ffi.Pointer<ffi.Int16> Addend,
);

typedef _c__InterlockedDecrement16 = ffi.Int16 Function(
  ffi.Pointer<ffi.Int16> Addend,
);

typedef _dart__InterlockedDecrement16 = int Function(
  ffi.Pointer<ffi.Int16> Addend,
);

typedef _c__InterlockedCompareExchange16 = ffi.Int16 Function(
  ffi.Pointer<ffi.Int16> Destination,
  ffi.Int16 ExChange,
  ffi.Int16 Comperand,
);

typedef _dart__InterlockedCompareExchange16 = int Function(
  ffi.Pointer<ffi.Int16> Destination,
  int ExChange,
  int Comperand,
);

typedef _c__InterlockedAnd = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> Destination,
  ffi.Int64 Value,
);

typedef _dart__InterlockedAnd = int Function(
  ffi.Pointer<ffi.Int64> Destination,
  int Value,
);

typedef _c__InterlockedOr = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> Destination,
  ffi.Int64 Value,
);

typedef _dart__InterlockedOr = int Function(
  ffi.Pointer<ffi.Int64> Destination,
  int Value,
);

typedef _c__InterlockedXor = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> Destination,
  ffi.Int64 Value,
);

typedef _dart__InterlockedXor = int Function(
  ffi.Pointer<ffi.Int64> Destination,
  int Value,
);

typedef _c__InterlockedAnd64 = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> Destination,
  ffi.Int64 Value,
);

typedef _dart__InterlockedAnd64 = int Function(
  ffi.Pointer<ffi.Int64> Destination,
  int Value,
);

typedef _c__InterlockedOr64 = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> Destination,
  ffi.Int64 Value,
);

typedef _dart__InterlockedOr64 = int Function(
  ffi.Pointer<ffi.Int64> Destination,
  int Value,
);

typedef _c__InterlockedXor64 = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> Destination,
  ffi.Int64 Value,
);

typedef _dart__InterlockedXor64 = int Function(
  ffi.Pointer<ffi.Int64> Destination,
  int Value,
);

typedef _c__InterlockedIncrement = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> Addend,
);

typedef _dart__InterlockedIncrement = int Function(
  ffi.Pointer<ffi.Int64> Addend,
);

typedef _c__InterlockedDecrement = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> Addend,
);

typedef _dart__InterlockedDecrement = int Function(
  ffi.Pointer<ffi.Int64> Addend,
);

typedef _c__InterlockedExchange = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> Target,
  ffi.Int64 Value,
);

typedef _dart__InterlockedExchange = int Function(
  ffi.Pointer<ffi.Int64> Target,
  int Value,
);

typedef _c__InterlockedExchangeAdd = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> Addend,
  ffi.Int64 Value,
);

typedef _dart__InterlockedExchangeAdd = int Function(
  ffi.Pointer<ffi.Int64> Addend,
  int Value,
);

typedef _c__InlineInterlockedAdd = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> Addend,
  ffi.Int64 Value,
);

typedef _dart__InlineInterlockedAdd = int Function(
  ffi.Pointer<ffi.Int64> Addend,
  int Value,
);

typedef _c__InterlockedCompareExchange = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> Destination,
  ffi.Int64 ExChange,
  ffi.Int64 Comperand,
);

typedef _dart__InterlockedCompareExchange = int Function(
  ffi.Pointer<ffi.Int64> Destination,
  int ExChange,
  int Comperand,
);

typedef _c__InterlockedIncrement64 = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> Addend,
);

typedef _dart__InterlockedIncrement64 = int Function(
  ffi.Pointer<ffi.Int64> Addend,
);

typedef _c__InterlockedDecrement64 = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> Addend,
);

typedef _dart__InterlockedDecrement64 = int Function(
  ffi.Pointer<ffi.Int64> Addend,
);

typedef _c__InterlockedExchange64 = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> Target,
  ffi.Int64 Value,
);

typedef _dart__InterlockedExchange64 = int Function(
  ffi.Pointer<ffi.Int64> Target,
  int Value,
);

typedef _c__InterlockedExchangeAdd64 = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> Addend,
  ffi.Int64 Value,
);

typedef _dart__InterlockedExchangeAdd64 = int Function(
  ffi.Pointer<ffi.Int64> Addend,
  int Value,
);

typedef _c__InlineInterlockedAdd64 = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> Addend,
  ffi.Int64 Value,
);

typedef _dart__InlineInterlockedAdd64 = int Function(
  ffi.Pointer<ffi.Int64> Addend,
  int Value,
);

typedef _c__InterlockedCompareExchange64 = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> Destination,
  ffi.Int64 ExChange,
  ffi.Int64 Comperand,
);

typedef _dart__InterlockedCompareExchange64 = int Function(
  ffi.Pointer<ffi.Int64> Destination,
  int ExChange,
  int Comperand,
);

typedef _c__InterlockedCompareExchange128 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int64> Destination,
  ffi.Int64 ExchangeHigh,
  ffi.Int64 ExchangeLow,
  ffi.Pointer<ffi.Int64> ComparandResult,
);

typedef _dart__InterlockedCompareExchange128 = int Function(
  ffi.Pointer<ffi.Int64> Destination,
  int ExchangeHigh,
  int ExchangeLow,
  ffi.Pointer<ffi.Int64> ComparandResult,
);

typedef _c__InterlockedCompareExchangePointer = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> Destination,
  ffi.Pointer<ffi.Void> Exchange,
  ffi.Pointer<ffi.Void> Comperand,
);

typedef _dart__InterlockedCompareExchangePointer = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> Destination,
  ffi.Pointer<ffi.Void> Exchange,
  ffi.Pointer<ffi.Void> Comperand,
);

typedef _c__InterlockedExchangePointer = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> Target,
  ffi.Pointer<ffi.Void> Value,
);

typedef _dart__InterlockedExchangePointer = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> Target,
  ffi.Pointer<ffi.Void> Value,
);

typedef _c__InterlockedExchange8 = ffi.Int8 Function(
  ffi.Pointer<ffi.Int8> Target,
  ffi.Int8 Value,
);

typedef _dart__InterlockedExchange8 = int Function(
  ffi.Pointer<ffi.Int8> Target,
  int Value,
);

typedef _c__InterlockedExchange16 = ffi.Int16 Function(
  ffi.Pointer<ffi.Int16> Destination,
  ffi.Int16 ExChange,
);

typedef _dart__InterlockedExchange16 = int Function(
  ffi.Pointer<ffi.Int16> Destination,
  int ExChange,
);

typedef _c__InterlockedExchangeAdd8 = ffi.Int8 Function(
  ffi.Pointer<ffi.Int8> _Addend,
  ffi.Int8 _Value,
);

typedef _dart__InterlockedExchangeAdd8 = int Function(
  ffi.Pointer<ffi.Int8> _Addend,
  int _Value,
);

typedef _c__InterlockedAnd8 = ffi.Int8 Function(
  ffi.Pointer<ffi.Int8> Destination,
  ffi.Int8 Value,
);

typedef _dart__InterlockedAnd8 = int Function(
  ffi.Pointer<ffi.Int8> Destination,
  int Value,
);

typedef _c__InterlockedOr8 = ffi.Int8 Function(
  ffi.Pointer<ffi.Int8> Destination,
  ffi.Int8 Value,
);

typedef _dart__InterlockedOr8 = int Function(
  ffi.Pointer<ffi.Int8> Destination,
  int Value,
);

typedef _c__InterlockedXor8 = ffi.Int8 Function(
  ffi.Pointer<ffi.Int8> Destination,
  ffi.Int8 Value,
);

typedef _dart__InterlockedXor8 = int Function(
  ffi.Pointer<ffi.Int8> Destination,
  int Value,
);

typedef _c__InterlockedAnd16 = ffi.Int16 Function(
  ffi.Pointer<ffi.Int16> Destination,
  ffi.Int16 Value,
);

typedef _dart__InterlockedAnd16 = int Function(
  ffi.Pointer<ffi.Int16> Destination,
  int Value,
);

typedef _c__InterlockedOr16 = ffi.Int16 Function(
  ffi.Pointer<ffi.Int16> Destination,
  ffi.Int16 Value,
);

typedef _dart__InterlockedOr16 = int Function(
  ffi.Pointer<ffi.Int16> Destination,
  int Value,
);

typedef _c__InterlockedXor16 = ffi.Int16 Function(
  ffi.Pointer<ffi.Int16> Destination,
  ffi.Int16 Value,
);

typedef _dart__InterlockedXor16 = int Function(
  ffi.Pointer<ffi.Int16> Destination,
  int Value,
);

typedef _c___cpuidex = ffi.Void Function(
  ffi.Pointer<ffi.Int32> CPUInfo,
  ffi.Int32 Function_1,
  ffi.Int32 SubLeaf,
);

typedef _dart___cpuidex = void Function(
  ffi.Pointer<ffi.Int32> CPUInfo,
  int Function_1,
  int SubLeaf,
);

typedef _c__mm_clflush = ffi.Void Function(
  ffi.Pointer<ffi.Void> Address,
);

typedef _dart__mm_clflush = void Function(
  ffi.Pointer<ffi.Void> Address,
);

typedef _c__ReadWriteBarrier = ffi.Void Function();

typedef _dart__ReadWriteBarrier = void Function();

typedef _c___faststorefence = ffi.Void Function();

typedef _dart___faststorefence = void Function();

typedef _c__mm_lfence = ffi.Void Function();

typedef _dart__mm_lfence = void Function();

typedef _c__mm_mfence = ffi.Void Function();

typedef _dart__mm_mfence = void Function();

typedef _c__mm_sfence = ffi.Void Function();

typedef _dart__mm_sfence = void Function();

typedef _c__mm_pause = ffi.Void Function();

typedef _dart__mm_pause = void Function();

typedef _c__mm_prefetch = ffi.Void Function(
  ffi.Pointer<ffi.Int8> a,
  ffi.Int32 sel,
);

typedef _dart__mm_prefetch = void Function(
  ffi.Pointer<ffi.Int8> a,
  int sel,
);

typedef _c__m_prefetchw = ffi.Void Function(
  ffi.Pointer<ffi.Void> Source,
);

typedef _dart__m_prefetchw = void Function(
  ffi.Pointer<ffi.Void> Source,
);

typedef _c__mm_getcsr = ffi.Uint32 Function();

typedef _dart__mm_getcsr = int Function();

typedef _c__mm_setcsr = ffi.Void Function(
  ffi.Uint32 MxCsr,
);

typedef _dart__mm_setcsr = void Function(
  int MxCsr,
);

typedef _c___getcallerseflags = ffi.Uint32 Function();

typedef _dart___getcallerseflags = int Function();

typedef _c___segmentlimit = ffi.Uint64 Function(
  ffi.Uint64 Selector,
);

typedef _dart___segmentlimit = int Function(
  int Selector,
);

typedef _c___readpmc = ffi.Uint64 Function(
  ffi.Uint64 Counter,
);

typedef _dart___readpmc = int Function(
  int Counter,
);

typedef _c___rdtsc = ffi.Uint64 Function();

typedef _dart___rdtsc = int Function();

typedef _c___movsb = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> Destination,
  ffi.Pointer<ffi.Uint8> Source,
  ffi.Uint64 Count,
);

typedef _dart___movsb = void Function(
  ffi.Pointer<ffi.Uint8> Destination,
  ffi.Pointer<ffi.Uint8> Source,
  int Count,
);

typedef _c___movsw = ffi.Void Function(
  ffi.Pointer<ffi.Uint16> Destination,
  ffi.Pointer<ffi.Uint16> Source,
  ffi.Uint64 Count,
);

typedef _dart___movsw = void Function(
  ffi.Pointer<ffi.Uint16> Destination,
  ffi.Pointer<ffi.Uint16> Source,
  int Count,
);

typedef _c___movsd = ffi.Void Function(
  ffi.Pointer<ffi.Uint64> Destination,
  ffi.Pointer<ffi.Uint64> Source,
  ffi.Uint64 Count,
);

typedef _dart___movsd = void Function(
  ffi.Pointer<ffi.Uint64> Destination,
  ffi.Pointer<ffi.Uint64> Source,
  int Count,
);

typedef _c___movsq = ffi.Void Function(
  ffi.Pointer<ffi.Uint64> Destination,
  ffi.Pointer<ffi.Uint64> Source,
  ffi.Uint64 Count,
);

typedef _dart___movsq = void Function(
  ffi.Pointer<ffi.Uint64> Destination,
  ffi.Pointer<ffi.Uint64> Source,
  int Count,
);

typedef _c___stosb = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> Destination,
  ffi.Uint8 Value,
  ffi.Uint64 Count,
);

typedef _dart___stosb = void Function(
  ffi.Pointer<ffi.Uint8> Destination,
  int Value,
  int Count,
);

typedef _c___stosw = ffi.Void Function(
  ffi.Pointer<ffi.Uint16> Destination,
  ffi.Uint16 Value,
  ffi.Uint64 Count,
);

typedef _dart___stosw = void Function(
  ffi.Pointer<ffi.Uint16> Destination,
  int Value,
  int Count,
);

typedef _c___stosd = ffi.Void Function(
  ffi.Pointer<ffi.Uint64> Destination,
  ffi.Uint64 Value,
  ffi.Uint64 Count,
);

typedef _dart___stosd = void Function(
  ffi.Pointer<ffi.Uint64> Destination,
  int Value,
  int Count,
);

typedef _c___stosq = ffi.Void Function(
  ffi.Pointer<ffi.Uint64> Destination,
  ffi.Uint64 Value,
  ffi.Uint64 Count,
);

typedef _dart___stosq = void Function(
  ffi.Pointer<ffi.Uint64> Destination,
  int Value,
  int Count,
);

typedef _c___mulh = ffi.Int64 Function(
  ffi.Int64 Multiplier,
  ffi.Int64 Multiplicand,
);

typedef _dart___mulh = int Function(
  int Multiplier,
  int Multiplicand,
);

typedef _c___umulh = ffi.Uint64 Function(
  ffi.Uint64 Multiplier,
  ffi.Uint64 Multiplicand,
);

typedef _dart___umulh = int Function(
  int Multiplier,
  int Multiplicand,
);

typedef _c___popcnt64 = ffi.Uint64 Function(
  ffi.Uint64 operand,
);

typedef _dart___popcnt64 = int Function(
  int operand,
);

typedef _c___shiftleft128 = ffi.Uint64 Function(
  ffi.Uint64 LowPart,
  ffi.Uint64 HighPart,
  ffi.Uint8 Shift,
);

typedef _dart___shiftleft128 = int Function(
  int LowPart,
  int HighPart,
  int Shift,
);

typedef _c___shiftright128 = ffi.Uint64 Function(
  ffi.Uint64 LowPart,
  ffi.Uint64 HighPart,
  ffi.Uint8 Shift,
);

typedef _dart___shiftright128 = int Function(
  int LowPart,
  int HighPart,
  int Shift,
);

typedef _c__mul128 = ffi.Int64 Function(
  ffi.Int64 Multiplier,
  ffi.Int64 Multiplicand,
  ffi.Pointer<ffi.Int64> HighProduct,
);

typedef _dart__mul128 = int Function(
  int Multiplier,
  int Multiplicand,
  ffi.Pointer<ffi.Int64> HighProduct,
);

typedef _c__umul128 = ffi.Uint64 Function(
  ffi.Uint64 Multiplier,
  ffi.Uint64 Multiplicand,
  ffi.Pointer<ffi.Uint64> HighProduct,
);

typedef _dart__umul128 = int Function(
  int Multiplier,
  int Multiplicand,
  ffi.Pointer<ffi.Uint64> HighProduct,
);

typedef _c_MultiplyExtract128 = ffi.Int64 Function(
  ffi.Int64 Multiplier,
  ffi.Int64 Multiplicand,
  ffi.Uint8 Shift,
);

typedef _dart_MultiplyExtract128 = int Function(
  int Multiplier,
  int Multiplicand,
  int Shift,
);

typedef _c_UnsignedMultiplyExtract128 = ffi.Uint64 Function(
  ffi.Uint64 Multiplier,
  ffi.Uint64 Multiplicand,
  ffi.Uint8 Shift,
);

typedef _dart_UnsignedMultiplyExtract128 = int Function(
  int Multiplier,
  int Multiplicand,
  int Shift,
);

typedef _c___readgsbyte = ffi.Uint8 Function(
  ffi.Uint64 Offset,
);

typedef _dart___readgsbyte = int Function(
  int Offset,
);

typedef _c___readgsword = ffi.Uint16 Function(
  ffi.Uint64 Offset,
);

typedef _dart___readgsword = int Function(
  int Offset,
);

typedef _c___readgsdword = ffi.Uint64 Function(
  ffi.Uint64 Offset,
);

typedef _dart___readgsdword = int Function(
  int Offset,
);

typedef _c___readgsqword = ffi.Uint64 Function(
  ffi.Uint64 Offset,
);

typedef _dart___readgsqword = int Function(
  int Offset,
);

typedef _c___writegsbyte = ffi.Void Function(
  ffi.Uint64 Offset,
  ffi.Uint8 Data,
);

typedef _dart___writegsbyte = void Function(
  int Offset,
  int Data,
);

typedef _c___writegsword = ffi.Void Function(
  ffi.Uint64 Offset,
  ffi.Uint16 Data,
);

typedef _dart___writegsword = void Function(
  int Offset,
  int Data,
);

typedef _c___writegsdword = ffi.Void Function(
  ffi.Uint64 Offset,
  ffi.Uint64 Data,
);

typedef _dart___writegsdword = void Function(
  int Offset,
  int Data,
);

typedef _c___writegsqword = ffi.Void Function(
  ffi.Uint64 Offset,
  ffi.Uint64 Data,
);

typedef _dart___writegsqword = void Function(
  int Offset,
  int Data,
);

typedef _c___incgsbyte = ffi.Void Function(
  ffi.Uint64 Offset,
);

typedef _dart___incgsbyte = void Function(
  int Offset,
);

typedef _c___addgsbyte = ffi.Void Function(
  ffi.Uint64 Offset,
  ffi.Uint8 Value,
);

typedef _dart___addgsbyte = void Function(
  int Offset,
  int Value,
);

typedef _c___incgsword = ffi.Void Function(
  ffi.Uint64 Offset,
);

typedef _dart___incgsword = void Function(
  int Offset,
);

typedef _c___addgsword = ffi.Void Function(
  ffi.Uint64 Offset,
  ffi.Uint16 Value,
);

typedef _dart___addgsword = void Function(
  int Offset,
  int Value,
);

typedef _c___incgsdword = ffi.Void Function(
  ffi.Uint64 Offset,
);

typedef _dart___incgsdword = void Function(
  int Offset,
);

typedef _c___addgsdword = ffi.Void Function(
  ffi.Uint64 Offset,
  ffi.Uint64 Value,
);

typedef _dart___addgsdword = void Function(
  int Offset,
  int Value,
);

typedef _c___incgsqword = ffi.Void Function(
  ffi.Uint64 Offset,
);

typedef _dart___incgsqword = void Function(
  int Offset,
);

typedef _c___addgsqword = ffi.Void Function(
  ffi.Uint64 Offset,
  ffi.Uint64 Value,
);

typedef _dart___addgsqword = void Function(
  int Offset,
  int Value,
);

typedef _c___int2c = ffi.Void Function();

typedef _dart___int2c = void Function();

typedef _c_ReadAcquire8 = ffi.Int8 Function(
  ffi.Pointer<ffi.Int8> Source,
);

typedef _dart_ReadAcquire8 = int Function(
  ffi.Pointer<ffi.Int8> Source,
);

typedef _c_ReadNoFence8 = ffi.Int8 Function(
  ffi.Pointer<ffi.Int8> Source,
);

typedef _dart_ReadNoFence8 = int Function(
  ffi.Pointer<ffi.Int8> Source,
);

typedef _c_WriteRelease8 = ffi.Void Function(
  ffi.Pointer<ffi.Int8> Destination,
  ffi.Int8 Value,
);

typedef _dart_WriteRelease8 = void Function(
  ffi.Pointer<ffi.Int8> Destination,
  int Value,
);

typedef _c_WriteNoFence8 = ffi.Void Function(
  ffi.Pointer<ffi.Int8> Destination,
  ffi.Int8 Value,
);

typedef _dart_WriteNoFence8 = void Function(
  ffi.Pointer<ffi.Int8> Destination,
  int Value,
);

typedef _c_ReadAcquire16 = ffi.Int16 Function(
  ffi.Pointer<ffi.Int16> Source,
);

typedef _dart_ReadAcquire16 = int Function(
  ffi.Pointer<ffi.Int16> Source,
);

typedef _c_ReadNoFence16 = ffi.Int16 Function(
  ffi.Pointer<ffi.Int16> Source,
);

typedef _dart_ReadNoFence16 = int Function(
  ffi.Pointer<ffi.Int16> Source,
);

typedef _c_WriteRelease16 = ffi.Void Function(
  ffi.Pointer<ffi.Int16> Destination,
  ffi.Int16 Value,
);

typedef _dart_WriteRelease16 = void Function(
  ffi.Pointer<ffi.Int16> Destination,
  int Value,
);

typedef _c_WriteNoFence16 = ffi.Void Function(
  ffi.Pointer<ffi.Int16> Destination,
  ffi.Int16 Value,
);

typedef _dart_WriteNoFence16 = void Function(
  ffi.Pointer<ffi.Int16> Destination,
  int Value,
);

typedef _c_ReadAcquire = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> Source,
);

typedef _dart_ReadAcquire = int Function(
  ffi.Pointer<ffi.Int64> Source,
);

typedef _c_ReadNoFence = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> Source,
);

typedef _dart_ReadNoFence = int Function(
  ffi.Pointer<ffi.Int64> Source,
);

typedef _c_WriteRelease = ffi.Void Function(
  ffi.Pointer<ffi.Int64> Destination,
  ffi.Int64 Value,
);

typedef _dart_WriteRelease = void Function(
  ffi.Pointer<ffi.Int64> Destination,
  int Value,
);

typedef _c_WriteNoFence = ffi.Void Function(
  ffi.Pointer<ffi.Int64> Destination,
  ffi.Int64 Value,
);

typedef _dart_WriteNoFence = void Function(
  ffi.Pointer<ffi.Int64> Destination,
  int Value,
);

typedef _c_ReadAcquire64 = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> Source,
);

typedef _dart_ReadAcquire64 = int Function(
  ffi.Pointer<ffi.Int64> Source,
);

typedef _c_ReadNoFence64 = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> Source,
);

typedef _dart_ReadNoFence64 = int Function(
  ffi.Pointer<ffi.Int64> Source,
);

typedef _c_WriteRelease64 = ffi.Void Function(
  ffi.Pointer<ffi.Int64> Destination,
  ffi.Int64 Value,
);

typedef _dart_WriteRelease64 = void Function(
  ffi.Pointer<ffi.Int64> Destination,
  int Value,
);

typedef _c_WriteNoFence64 = ffi.Void Function(
  ffi.Pointer<ffi.Int64> Destination,
  ffi.Int64 Value,
);

typedef _dart_WriteNoFence64 = void Function(
  ffi.Pointer<ffi.Int64> Destination,
  int Value,
);

typedef _c_ReadRaw8 = ffi.Int8 Function(
  ffi.Pointer<ffi.Int8> Source,
);

typedef _dart_ReadRaw8 = int Function(
  ffi.Pointer<ffi.Int8> Source,
);

typedef _c_WriteRaw8 = ffi.Void Function(
  ffi.Pointer<ffi.Int8> Destination,
  ffi.Int8 Value,
);

typedef _dart_WriteRaw8 = void Function(
  ffi.Pointer<ffi.Int8> Destination,
  int Value,
);

typedef _c_ReadRaw16 = ffi.Int16 Function(
  ffi.Pointer<ffi.Int16> Source,
);

typedef _dart_ReadRaw16 = int Function(
  ffi.Pointer<ffi.Int16> Source,
);

typedef _c_WriteRaw16 = ffi.Void Function(
  ffi.Pointer<ffi.Int16> Destination,
  ffi.Int16 Value,
);

typedef _dart_WriteRaw16 = void Function(
  ffi.Pointer<ffi.Int16> Destination,
  int Value,
);

typedef _c_ReadRaw = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> Source,
);

typedef _dart_ReadRaw = int Function(
  ffi.Pointer<ffi.Int64> Source,
);

typedef _c_WriteRaw = ffi.Void Function(
  ffi.Pointer<ffi.Int64> Destination,
  ffi.Int64 Value,
);

typedef _dart_WriteRaw = void Function(
  ffi.Pointer<ffi.Int64> Destination,
  int Value,
);

typedef _c_ReadRaw64 = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> Source,
);

typedef _dart_ReadRaw64 = int Function(
  ffi.Pointer<ffi.Int64> Source,
);

typedef _c_WriteRaw64 = ffi.Void Function(
  ffi.Pointer<ffi.Int64> Destination,
  ffi.Int64 Value,
);

typedef _dart_WriteRaw64 = void Function(
  ffi.Pointer<ffi.Int64> Destination,
  int Value,
);

typedef _c_ReadUCharAcquire = ffi.Uint8 Function(
  ffi.Pointer<ffi.Uint8> Source,
);

typedef _dart_ReadUCharAcquire = int Function(
  ffi.Pointer<ffi.Uint8> Source,
);

typedef _c_ReadUCharNoFence = ffi.Uint8 Function(
  ffi.Pointer<ffi.Uint8> Source,
);

typedef _dart_ReadUCharNoFence = int Function(
  ffi.Pointer<ffi.Uint8> Source,
);

typedef _c_ReadBooleanAcquire = ffi.Uint8 Function(
  ffi.Pointer<ffi.Uint8> Source,
);

typedef _dart_ReadBooleanAcquire = int Function(
  ffi.Pointer<ffi.Uint8> Source,
);

typedef _c_ReadBooleanNoFence = ffi.Uint8 Function(
  ffi.Pointer<ffi.Uint8> Source,
);

typedef _dart_ReadBooleanNoFence = int Function(
  ffi.Pointer<ffi.Uint8> Source,
);

typedef _c_ReadUCharRaw = ffi.Uint8 Function(
  ffi.Pointer<ffi.Uint8> Source,
);

typedef _dart_ReadUCharRaw = int Function(
  ffi.Pointer<ffi.Uint8> Source,
);

typedef _c_WriteUCharRelease = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> Destination,
  ffi.Uint8 Value,
);

typedef _dart_WriteUCharRelease = void Function(
  ffi.Pointer<ffi.Uint8> Destination,
  int Value,
);

typedef _c_WriteUCharNoFence = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> Destination,
  ffi.Uint8 Value,
);

typedef _dart_WriteUCharNoFence = void Function(
  ffi.Pointer<ffi.Uint8> Destination,
  int Value,
);

typedef _c_WriteBooleanRelease = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> Destination,
  ffi.Uint8 Value,
);

typedef _dart_WriteBooleanRelease = void Function(
  ffi.Pointer<ffi.Uint8> Destination,
  int Value,
);

typedef _c_WriteBooleanNoFence = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> Destination,
  ffi.Uint8 Value,
);

typedef _dart_WriteBooleanNoFence = void Function(
  ffi.Pointer<ffi.Uint8> Destination,
  int Value,
);

typedef _c_WriteUCharRaw = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> Destination,
  ffi.Uint8 Value,
);

typedef _dart_WriteUCharRaw = void Function(
  ffi.Pointer<ffi.Uint8> Destination,
  int Value,
);

typedef _c_ReadUShortAcquire = ffi.Uint16 Function(
  ffi.Pointer<ffi.Uint16> Source,
);

typedef _dart_ReadUShortAcquire = int Function(
  ffi.Pointer<ffi.Uint16> Source,
);

typedef _c_ReadUShortNoFence = ffi.Uint16 Function(
  ffi.Pointer<ffi.Uint16> Source,
);

typedef _dart_ReadUShortNoFence = int Function(
  ffi.Pointer<ffi.Uint16> Source,
);

typedef _c_ReadUShortRaw = ffi.Uint16 Function(
  ffi.Pointer<ffi.Uint16> Source,
);

typedef _dart_ReadUShortRaw = int Function(
  ffi.Pointer<ffi.Uint16> Source,
);

typedef _c_WriteUShortRelease = ffi.Void Function(
  ffi.Pointer<ffi.Uint16> Destination,
  ffi.Uint16 Value,
);

typedef _dart_WriteUShortRelease = void Function(
  ffi.Pointer<ffi.Uint16> Destination,
  int Value,
);

typedef _c_WriteUShortNoFence = ffi.Void Function(
  ffi.Pointer<ffi.Uint16> Destination,
  ffi.Uint16 Value,
);

typedef _dart_WriteUShortNoFence = void Function(
  ffi.Pointer<ffi.Uint16> Destination,
  int Value,
);

typedef _c_WriteUShortRaw = ffi.Void Function(
  ffi.Pointer<ffi.Uint16> Destination,
  ffi.Uint16 Value,
);

typedef _dart_WriteUShortRaw = void Function(
  ffi.Pointer<ffi.Uint16> Destination,
  int Value,
);

typedef _c_ReadULongAcquire = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint64> Source,
);

typedef _dart_ReadULongAcquire = int Function(
  ffi.Pointer<ffi.Uint64> Source,
);

typedef _c_ReadULongNoFence = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint64> Source,
);

typedef _dart_ReadULongNoFence = int Function(
  ffi.Pointer<ffi.Uint64> Source,
);

typedef _c_ReadULongRaw = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint64> Source,
);

typedef _dart_ReadULongRaw = int Function(
  ffi.Pointer<ffi.Uint64> Source,
);

typedef _c_WriteULongRelease = ffi.Void Function(
  ffi.Pointer<ffi.Uint64> Destination,
  ffi.Uint64 Value,
);

typedef _dart_WriteULongRelease = void Function(
  ffi.Pointer<ffi.Uint64> Destination,
  int Value,
);

typedef _c_WriteULongNoFence = ffi.Void Function(
  ffi.Pointer<ffi.Uint64> Destination,
  ffi.Uint64 Value,
);

typedef _dart_WriteULongNoFence = void Function(
  ffi.Pointer<ffi.Uint64> Destination,
  int Value,
);

typedef _c_WriteULongRaw = ffi.Void Function(
  ffi.Pointer<ffi.Uint64> Destination,
  ffi.Uint64 Value,
);

typedef _dart_WriteULongRaw = void Function(
  ffi.Pointer<ffi.Uint64> Destination,
  int Value,
);

typedef _c_ReadULong64Acquire = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint64> Source,
);

typedef _dart_ReadULong64Acquire = int Function(
  ffi.Pointer<ffi.Uint64> Source,
);

typedef _c_ReadULong64NoFence = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint64> Source,
);

typedef _dart_ReadULong64NoFence = int Function(
  ffi.Pointer<ffi.Uint64> Source,
);

typedef _c_ReadULong64Raw = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint64> Source,
);

typedef _dart_ReadULong64Raw = int Function(
  ffi.Pointer<ffi.Uint64> Source,
);

typedef _c_WriteULong64Release = ffi.Void Function(
  ffi.Pointer<ffi.Uint64> Destination,
  ffi.Uint64 Value,
);

typedef _dart_WriteULong64Release = void Function(
  ffi.Pointer<ffi.Uint64> Destination,
  int Value,
);

typedef _c_WriteULong64NoFence = ffi.Void Function(
  ffi.Pointer<ffi.Uint64> Destination,
  ffi.Uint64 Value,
);

typedef _dart_WriteULong64NoFence = void Function(
  ffi.Pointer<ffi.Uint64> Destination,
  int Value,
);

typedef _c_WriteULong64Raw = ffi.Void Function(
  ffi.Pointer<ffi.Uint64> Destination,
  ffi.Uint64 Value,
);

typedef _dart_WriteULong64Raw = void Function(
  ffi.Pointer<ffi.Uint64> Destination,
  int Value,
);

typedef _c_ReadPointerAcquire = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> Source,
);

typedef _dart_ReadPointerAcquire = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> Source,
);

typedef _c_ReadPointerNoFence = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> Source,
);

typedef _dart_ReadPointerNoFence = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> Source,
);

typedef _c_ReadPointerRaw = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> Source,
);

typedef _dart_ReadPointerRaw = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> Source,
);

typedef _c_WritePointerRelease = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> Destination,
  ffi.Pointer<ffi.Void> Value,
);

typedef _dart_WritePointerRelease = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> Destination,
  ffi.Pointer<ffi.Void> Value,
);

typedef _c_WritePointerNoFence = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> Destination,
  ffi.Pointer<ffi.Void> Value,
);

typedef _dart_WritePointerNoFence = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> Destination,
  ffi.Pointer<ffi.Void> Value,
);

typedef _c_WritePointerRaw = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> Destination,
  ffi.Pointer<ffi.Void> Value,
);

typedef _dart_WritePointerRaw = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> Destination,
  ffi.Pointer<ffi.Void> Value,
);

typedef _c_RtlCaptureStackBackTrace = ffi.Uint16 Function(
  ffi.Uint64 FramesToSkip,
  ffi.Uint64 FramesToCapture,
  ffi.Pointer<ffi.Pointer<ffi.Void>> BackTrace,
  ffi.Pointer<ffi.Uint64> BackTraceHash,
);

typedef _dart_RtlCaptureStackBackTrace = int Function(
  int FramesToSkip,
  int FramesToCapture,
  ffi.Pointer<ffi.Pointer<ffi.Void>> BackTrace,
  ffi.Pointer<ffi.Uint64> BackTraceHash,
);

typedef _c_RtlCaptureContext = ffi.Void Function(
  ffi.Pointer<PCONTEXT> ContextRecord,
);

typedef _dart_RtlCaptureContext = void Function(
  ffi.Pointer<PCONTEXT> ContextRecord,
);

typedef _c_RtlCaptureContext2 = ffi.Void Function(
  ffi.Pointer<PCONTEXT> ContextRecord,
);

typedef _dart_RtlCaptureContext2 = void Function(
  ffi.Pointer<PCONTEXT> ContextRecord,
);

typedef _c_RtlUnwind = ffi.Void Function(
  ffi.Pointer<ffi.Void> TargetFrame,
  ffi.Pointer<ffi.Void> TargetIp,
  ffi.Pointer<EXCEPTION_RECORD> ExceptionRecord,
  ffi.Pointer<ffi.Void> ReturnValue,
);

typedef _dart_RtlUnwind = void Function(
  ffi.Pointer<ffi.Void> TargetFrame,
  ffi.Pointer<ffi.Void> TargetIp,
  ffi.Pointer<EXCEPTION_RECORD> ExceptionRecord,
  ffi.Pointer<ffi.Void> ReturnValue,
);

typedef _c_RtlAddFunctionTable = ffi.Uint8 Function(
  ffi.Pointer<_PIMAGE_RUNTIME_FUNCTION_ENTRY> FunctionTable,
  ffi.Uint64 EntryCount,
  ffi.Uint64 BaseAddress,
);

typedef _dart_RtlAddFunctionTable = int Function(
  ffi.Pointer<_PIMAGE_RUNTIME_FUNCTION_ENTRY> FunctionTable,
  int EntryCount,
  int BaseAddress,
);

typedef _c_RtlDeleteFunctionTable = ffi.Uint8 Function(
  ffi.Pointer<_PIMAGE_RUNTIME_FUNCTION_ENTRY> FunctionTable,
);

typedef _dart_RtlDeleteFunctionTable = int Function(
  ffi.Pointer<_PIMAGE_RUNTIME_FUNCTION_ENTRY> FunctionTable,
);

typedef PGET_RUNTIME_FUNCTION_CALLBACK
    = ffi.Pointer<_PIMAGE_RUNTIME_FUNCTION_ENTRY> Function(
  ffi.Uint64,
  ffi.Pointer<ffi.Void>,
);

typedef _c_RtlInstallFunctionTableCallback = ffi.Uint8 Function(
  ffi.Uint64 TableIdentifier,
  ffi.Uint64 BaseAddress,
  ffi.Uint64 Length,
  ffi.Pointer<ffi.NativeFunction<PGET_RUNTIME_FUNCTION_CALLBACK>> Callback,
  ffi.Pointer<ffi.Void> Context,
  ffi.Pointer<ffi.Uint16> OutOfProcessCallbackDll,
);

typedef _dart_RtlInstallFunctionTableCallback = int Function(
  int TableIdentifier,
  int BaseAddress,
  int Length,
  ffi.Pointer<ffi.NativeFunction<PGET_RUNTIME_FUNCTION_CALLBACK>> Callback,
  ffi.Pointer<ffi.Void> Context,
  ffi.Pointer<ffi.Uint16> OutOfProcessCallbackDll,
);

typedef _c_RtlAddGrowableFunctionTable = ffi.Uint64 Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> DynamicTable,
  ffi.Pointer<_PIMAGE_RUNTIME_FUNCTION_ENTRY> FunctionTable,
  ffi.Uint64 EntryCount,
  ffi.Uint64 MaximumEntryCount,
  ffi.Uint64 RangeBase,
  ffi.Uint64 RangeEnd,
);

typedef _dart_RtlAddGrowableFunctionTable = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> DynamicTable,
  ffi.Pointer<_PIMAGE_RUNTIME_FUNCTION_ENTRY> FunctionTable,
  int EntryCount,
  int MaximumEntryCount,
  int RangeBase,
  int RangeEnd,
);

typedef _c_RtlGrowFunctionTable = ffi.Void Function(
  ffi.Pointer<ffi.Void> DynamicTable,
  ffi.Uint64 NewEntryCount,
);

typedef _dart_RtlGrowFunctionTable = void Function(
  ffi.Pointer<ffi.Void> DynamicTable,
  int NewEntryCount,
);

typedef _c_RtlDeleteGrowableFunctionTable = ffi.Void Function(
  ffi.Pointer<ffi.Void> DynamicTable,
);

typedef _dart_RtlDeleteGrowableFunctionTable = void Function(
  ffi.Pointer<ffi.Void> DynamicTable,
);

typedef _c_RtlLookupFunctionEntry = ffi.Pointer<_PIMAGE_RUNTIME_FUNCTION_ENTRY>
    Function(
  ffi.Uint64 ControlPc,
  ffi.Pointer<ffi.Uint64> ImageBase,
  ffi.Pointer<PUNWIND_HISTORY_TABLE> HistoryTable,
);

typedef _dart_RtlLookupFunctionEntry
    = ffi.Pointer<_PIMAGE_RUNTIME_FUNCTION_ENTRY> Function(
  int ControlPc,
  ffi.Pointer<ffi.Uint64> ImageBase,
  ffi.Pointer<PUNWIND_HISTORY_TABLE> HistoryTable,
);

typedef _c_RtlRestoreContext = ffi.Void Function(
  ffi.Pointer<PCONTEXT> ContextRecord,
  ffi.Pointer<EXCEPTION_RECORD> ExceptionRecord,
);

typedef _dart_RtlRestoreContext = void Function(
  ffi.Pointer<PCONTEXT> ContextRecord,
  ffi.Pointer<EXCEPTION_RECORD> ExceptionRecord,
);

typedef _c_RtlUnwindEx = ffi.Void Function(
  ffi.Pointer<ffi.Void> TargetFrame,
  ffi.Pointer<ffi.Void> TargetIp,
  ffi.Pointer<EXCEPTION_RECORD> ExceptionRecord,
  ffi.Pointer<ffi.Void> ReturnValue,
  ffi.Pointer<PCONTEXT> ContextRecord,
  ffi.Pointer<PUNWIND_HISTORY_TABLE> HistoryTable,
);

typedef _dart_RtlUnwindEx = void Function(
  ffi.Pointer<ffi.Void> TargetFrame,
  ffi.Pointer<ffi.Void> TargetIp,
  ffi.Pointer<EXCEPTION_RECORD> ExceptionRecord,
  ffi.Pointer<ffi.Void> ReturnValue,
  ffi.Pointer<PCONTEXT> ContextRecord,
  ffi.Pointer<PUNWIND_HISTORY_TABLE> HistoryTable,
);

typedef PEXCEPTION_ROUTINE = ffi.Int32 Function(
  ffi.Pointer<EXCEPTION_RECORD>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<PCONTEXT>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_RtlVirtualUnwind
    = ffi.Pointer<ffi.NativeFunction<PEXCEPTION_ROUTINE>> Function(
  ffi.Uint64 HandlerType,
  ffi.Uint64 ImageBase,
  ffi.Uint64 ControlPc,
  ffi.Pointer<_PIMAGE_RUNTIME_FUNCTION_ENTRY> FunctionEntry,
  ffi.Pointer<PCONTEXT> ContextRecord,
  ffi.Pointer<ffi.Pointer<ffi.Void>> HandlerData,
  ffi.Pointer<ffi.Uint64> EstablisherFrame,
  ffi.Pointer<PKNONVOLATILE_CONTEXT_POINTERS> ContextPointers,
);

typedef _dart_RtlVirtualUnwind
    = ffi.Pointer<ffi.NativeFunction<PEXCEPTION_ROUTINE>> Function(
  int HandlerType,
  int ImageBase,
  int ControlPc,
  ffi.Pointer<_PIMAGE_RUNTIME_FUNCTION_ENTRY> FunctionEntry,
  ffi.Pointer<PCONTEXT> ContextRecord,
  ffi.Pointer<ffi.Pointer<ffi.Void>> HandlerData,
  ffi.Pointer<ffi.Uint64> EstablisherFrame,
  ffi.Pointer<PKNONVOLATILE_CONTEXT_POINTERS> ContextPointers,
);

typedef _c_RtlRaiseException = ffi.Void Function(
  ffi.Pointer<EXCEPTION_RECORD> ExceptionRecord,
);

typedef _dart_RtlRaiseException = void Function(
  ffi.Pointer<EXCEPTION_RECORD> ExceptionRecord,
);

typedef _c_RtlPcToFileHeader = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> PcValue,
  ffi.Pointer<ffi.Pointer<ffi.Void>> BaseOfImage,
);

typedef _dart_RtlPcToFileHeader = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> PcValue,
  ffi.Pointer<ffi.Pointer<ffi.Void>> BaseOfImage,
);

typedef _c_RtlCompareMemory = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> Source1,
  ffi.Pointer<ffi.Void> Source2,
  ffi.Uint64 Length,
);

typedef _dart_RtlCompareMemory = int Function(
  ffi.Pointer<ffi.Void> Source1,
  ffi.Pointer<ffi.Void> Source2,
  int Length,
);

typedef _c_RtlGetReturnAddressHijackTarget = ffi.Uint64 Function();

typedef _dart_RtlGetReturnAddressHijackTarget = int Function();

typedef _c___fastfail = ffi.Void Function(
  ffi.Uint32 Code,
);

typedef _dart___fastfail = void Function(
  int Code,
);

typedef _c_HEAP_MAKE_TAG_FLAGS = ffi.Uint64 Function(
  ffi.Uint64 TagBase,
  ffi.Uint64 Tag,
);

typedef _dart_HEAP_MAKE_TAG_FLAGS = int Function(
  int TagBase,
  int Tag,
);

typedef _c_RtlSecureZeroMemory = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> ptr,
  ffi.Uint64 cnt,
);

typedef _dart_RtlSecureZeroMemory = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> ptr,
  int cnt,
);

typedef _c_VerSetConditionMask = ffi.Uint64 Function(
  ffi.Uint64 ConditionMask,
  ffi.Uint64 TypeMask,
  ffi.Uint8 Condition,
);

typedef _dart_VerSetConditionMask = int Function(
  int ConditionMask,
  int TypeMask,
  int Condition,
);

typedef _c_RtlGetProductInfo = ffi.Uint8 Function(
  ffi.Uint64 OSMajorVersion,
  ffi.Uint64 OSMinorVersion,
  ffi.Uint64 SpMajorVersion,
  ffi.Uint64 SpMinorVersion,
  ffi.Pointer<ffi.Uint64> ReturnedProductType,
);

typedef _dart_RtlGetProductInfo = int Function(
  int OSMajorVersion,
  int OSMinorVersion,
  int SpMajorVersion,
  int SpMinorVersion,
  ffi.Pointer<ffi.Uint64> ReturnedProductType,
);

typedef _c_RtlCrc32 = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> Buffer,
  ffi.Uint64 Size,
  ffi.Uint64 InitialCrc,
);

typedef _dart_RtlCrc32 = int Function(
  ffi.Pointer<ffi.Void> Buffer,
  int Size,
  int InitialCrc,
);

typedef _c_RtlCrc64 = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> Buffer,
  ffi.Uint64 Size,
  ffi.Uint64 InitialCrc,
);

typedef _dart_RtlCrc64 = int Function(
  ffi.Pointer<ffi.Void> Buffer,
  int Size,
  int InitialCrc,
);

typedef _c_RtlOsDeploymentState = ffi.Int32 Function(
  ffi.Uint64 Flags,
);

typedef _dart_RtlOsDeploymentState = int Function(
  int Flags,
);

typedef _c_RtlGetNonVolatileToken = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> NvBuffer,
  ffi.Uint64 Size,
  ffi.Pointer<ffi.Pointer<ffi.Void>> NvToken,
);

typedef _dart_RtlGetNonVolatileToken = int Function(
  ffi.Pointer<ffi.Void> NvBuffer,
  int Size,
  ffi.Pointer<ffi.Pointer<ffi.Void>> NvToken,
);

typedef _c_RtlFreeNonVolatileToken = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> NvToken,
);

typedef _dart_RtlFreeNonVolatileToken = int Function(
  ffi.Pointer<ffi.Void> NvToken,
);

typedef _c_RtlFlushNonVolatileMemory = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> NvToken,
  ffi.Pointer<ffi.Void> NvBuffer,
  ffi.Uint64 Size,
  ffi.Uint64 Flags,
);

typedef _dart_RtlFlushNonVolatileMemory = int Function(
  ffi.Pointer<ffi.Void> NvToken,
  ffi.Pointer<ffi.Void> NvBuffer,
  int Size,
  int Flags,
);

typedef _c_RtlDrainNonVolatileFlush = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> NvToken,
);

typedef _dart_RtlDrainNonVolatileFlush = int Function(
  ffi.Pointer<ffi.Void> NvToken,
);

typedef _c_RtlWriteNonVolatileMemory = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> NvToken,
  ffi.Pointer<ffi.Void> NvDestination,
  ffi.Pointer<ffi.Void> Source,
  ffi.Uint64 Size,
  ffi.Uint64 Flags,
);

typedef _dart_RtlWriteNonVolatileMemory = int Function(
  ffi.Pointer<ffi.Void> NvToken,
  ffi.Pointer<ffi.Void> NvDestination,
  ffi.Pointer<ffi.Void> Source,
  int Size,
  int Flags,
);

typedef _c_RtlFillNonVolatileMemory = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> NvToken,
  ffi.Pointer<ffi.Void> NvDestination,
  ffi.Uint64 Size,
  ffi.Uint8 Value,
  ffi.Uint64 Flags,
);

typedef _dart_RtlFillNonVolatileMemory = int Function(
  ffi.Pointer<ffi.Void> NvToken,
  ffi.Pointer<ffi.Void> NvDestination,
  int Size,
  int Value,
  int Flags,
);

typedef _c_RtlFlushNonVolatileMemoryRanges = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> NvToken,
  ffi.Pointer<PNV_MEMORY_RANGE> NvRanges,
  ffi.Uint64 NumRanges,
  ffi.Uint64 Flags,
);

typedef _dart_RtlFlushNonVolatileMemoryRanges = int Function(
  ffi.Pointer<ffi.Void> NvToken,
  ffi.Pointer<PNV_MEMORY_RANGE> NvRanges,
  int NumRanges,
  int Flags,
);

typedef _c_RtlInitializeCorrelationVector = ffi.Uint64 Function(
  ffi.Pointer<CORRELATION_VECTOR> CorrelationVector,
  ffi.Int32 Version,
  ffi.Pointer<GUID> Guid,
);

typedef _dart_RtlInitializeCorrelationVector = int Function(
  ffi.Pointer<CORRELATION_VECTOR> CorrelationVector,
  int Version,
  ffi.Pointer<GUID> Guid,
);

typedef _c_RtlIncrementCorrelationVector = ffi.Uint64 Function(
  ffi.Pointer<CORRELATION_VECTOR> CorrelationVector,
);

typedef _dart_RtlIncrementCorrelationVector = int Function(
  ffi.Pointer<CORRELATION_VECTOR> CorrelationVector,
);

typedef _c_RtlExtendCorrelationVector = ffi.Uint64 Function(
  ffi.Pointer<CORRELATION_VECTOR> CorrelationVector,
);

typedef _dart_RtlExtendCorrelationVector = int Function(
  ffi.Pointer<CORRELATION_VECTOR> CorrelationVector,
);

typedef _c_RtlValidateCorrelationVector = ffi.Uint64 Function(
  ffi.Pointer<CORRELATION_VECTOR> Vector,
);

typedef _dart_RtlValidateCorrelationVector = int Function(
  ffi.Pointer<CORRELATION_VECTOR> Vector,
);

typedef _c_CUSTOM_SYSTEM_EVENT_TRIGGER_INIT = ffi.Void Function(
  ffi.Pointer<PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG> Config,
  ffi.Pointer<ffi.Uint16> TriggerId,
);

typedef _dart_CUSTOM_SYSTEM_EVENT_TRIGGER_INIT = void Function(
  ffi.Pointer<PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG> Config,
  ffi.Pointer<ffi.Uint16> TriggerId,
);

typedef _c_RtlRaiseCustomSystemEventTrigger = ffi.Uint64 Function(
  ffi.Pointer<PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG> TriggerConfig,
);

typedef _dart_RtlRaiseCustomSystemEventTrigger = int Function(
  ffi.Pointer<PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG> TriggerConfig,
);

typedef _c_RtlIsZeroMemory = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void> Buffer,
  ffi.Uint64 Length,
);

typedef _dart_RtlIsZeroMemory = int Function(
  ffi.Pointer<ffi.Void> Buffer,
  int Length,
);

typedef _c_RtlNormalizeSecurityDescriptor = ffi.Uint8 Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> SecurityDescriptor,
  ffi.Uint64 SecurityDescriptorLength,
  ffi.Pointer<ffi.Pointer<ffi.Void>> NewSecurityDescriptor,
  ffi.Pointer<ffi.Uint64> NewSecurityDescriptorLength,
  ffi.Uint8 CheckOnly,
);

typedef _dart_RtlNormalizeSecurityDescriptor = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> SecurityDescriptor,
  int SecurityDescriptorLength,
  ffi.Pointer<ffi.Pointer<ffi.Void>> NewSecurityDescriptor,
  ffi.Pointer<ffi.Uint64> NewSecurityDescriptorLength,
  int CheckOnly,
);

typedef _c_RtlGetDeviceFamilyInfoEnum = ffi.Void Function(
  ffi.Pointer<ffi.Uint64> pullUAPInfo,
  ffi.Pointer<ffi.Uint64> pulDeviceFamily,
  ffi.Pointer<ffi.Uint64> pulDeviceForm,
);

typedef _dart_RtlGetDeviceFamilyInfoEnum = void Function(
  ffi.Pointer<ffi.Uint64> pullUAPInfo,
  ffi.Pointer<ffi.Uint64> pulDeviceFamily,
  ffi.Pointer<ffi.Uint64> pulDeviceForm,
);

typedef _c_RtlConvertDeviceFamilyInfoToString = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint64> pulDeviceFamilyBufferSize,
  ffi.Pointer<ffi.Uint64> pulDeviceFormBufferSize,
  ffi.Pointer<ffi.Uint16> DeviceFamily,
  ffi.Pointer<ffi.Uint16> DeviceForm,
);

typedef _dart_RtlConvertDeviceFamilyInfoToString = int Function(
  ffi.Pointer<ffi.Uint64> pulDeviceFamilyBufferSize,
  ffi.Pointer<ffi.Uint64> pulDeviceFormBufferSize,
  ffi.Pointer<ffi.Uint16> DeviceFamily,
  ffi.Pointer<ffi.Uint16> DeviceForm,
);

typedef _c_RtlSwitchedVVI = ffi.Uint64 Function(
  ffi.Pointer<PRTL_OSVERSIONINFOEXW> VersionInfo,
  ffi.Uint64 TypeMask,
  ffi.Uint64 ConditionMask,
);

typedef _dart_RtlSwitchedVVI = int Function(
  ffi.Pointer<PRTL_OSVERSIONINFOEXW> VersionInfo,
  int TypeMask,
  int ConditionMask,
);

typedef _c_TpInitializeCallbackEnviron = ffi.Void Function(
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> CallbackEnviron,
);

typedef _dart_TpInitializeCallbackEnviron = void Function(
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> CallbackEnviron,
);

typedef _c_TpSetCallbackThreadpool = ffi.Void Function(
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> CallbackEnviron,
  ffi.Pointer<_TP_POOL> Pool,
);

typedef _dart_TpSetCallbackThreadpool = void Function(
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> CallbackEnviron,
  ffi.Pointer<_TP_POOL> Pool,
);

typedef PTP_CLEANUP_GROUP_CANCEL_CALLBACK = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_TpSetCallbackCleanupGroup = ffi.Void Function(
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> CallbackEnviron,
  ffi.Pointer<_TP_CLEANUP_GROUP> CleanupGroup,
  ffi.Pointer<ffi.NativeFunction<PTP_CLEANUP_GROUP_CANCEL_CALLBACK>>
      CleanupGroupCancelCallback,
);

typedef _dart_TpSetCallbackCleanupGroup = void Function(
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> CallbackEnviron,
  ffi.Pointer<_TP_CLEANUP_GROUP> CleanupGroup,
  ffi.Pointer<ffi.NativeFunction<PTP_CLEANUP_GROUP_CANCEL_CALLBACK>>
      CleanupGroupCancelCallback,
);

typedef _c_TpSetCallbackActivationContext = ffi.Void Function(
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> CallbackEnviron,
  ffi.Pointer<_ACTIVATION_CONTEXT> ActivationContext,
);

typedef _dart_TpSetCallbackActivationContext = void Function(
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> CallbackEnviron,
  ffi.Pointer<_ACTIVATION_CONTEXT> ActivationContext,
);

typedef _c_TpSetCallbackNoActivationContext = ffi.Void Function(
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> CallbackEnviron,
);

typedef _dart_TpSetCallbackNoActivationContext = void Function(
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> CallbackEnviron,
);

typedef _c_TpSetCallbackLongFunction = ffi.Void Function(
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> CallbackEnviron,
);

typedef _dart_TpSetCallbackLongFunction = void Function(
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> CallbackEnviron,
);

typedef _c_TpSetCallbackRaceWithDll = ffi.Void Function(
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> CallbackEnviron,
  ffi.Pointer<ffi.Void> DllHandle,
);

typedef _dart_TpSetCallbackRaceWithDll = void Function(
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> CallbackEnviron,
  ffi.Pointer<ffi.Void> DllHandle,
);

typedef PTP_SIMPLE_CALLBACK = ffi.Void Function(
  ffi.Pointer<_TP_CALLBACK_INSTANCE>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_TpSetCallbackFinalizationCallback = ffi.Void Function(
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> CallbackEnviron,
  ffi.Pointer<ffi.NativeFunction<PTP_SIMPLE_CALLBACK>> FinalizationCallback,
);

typedef _dart_TpSetCallbackFinalizationCallback = void Function(
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> CallbackEnviron,
  ffi.Pointer<ffi.NativeFunction<PTP_SIMPLE_CALLBACK>> FinalizationCallback,
);

typedef _c_TpSetCallbackPriority = ffi.Void Function(
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> CallbackEnviron,
  ffi.Int32 Priority,
);

typedef _dart_TpSetCallbackPriority = void Function(
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> CallbackEnviron,
  int Priority,
);

typedef _c_TpSetCallbackPersistent = ffi.Void Function(
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> CallbackEnviron,
);

typedef _dart_TpSetCallbackPersistent = void Function(
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> CallbackEnviron,
);

typedef _c_TpDestroyCallbackEnviron = ffi.Void Function(
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> CallbackEnviron,
);

typedef _dart_TpDestroyCallbackEnviron = void Function(
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> CallbackEnviron,
);

typedef _c_NtCurrentTeb = ffi.Pointer<_TEB> Function();

typedef _dart_NtCurrentTeb = ffi.Pointer<_TEB> Function();

typedef _c_GetCurrentFiber = ffi.Pointer<ffi.Void> Function();

typedef _dart_GetCurrentFiber = ffi.Pointer<ffi.Void> Function();

typedef _c_GetFiberData = ffi.Pointer<ffi.Void> Function();

typedef _dart_GetFiberData = ffi.Pointer<ffi.Void> Function();

typedef _c_IsApiSetImplemented = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> Contract,
);

typedef _dart_IsApiSetImplemented = int Function(
  ffi.Pointer<ffi.Int8> Contract,
);

typedef _c_SetEnvironmentStringsW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> NewEnvironment,
);

typedef _dart_SetEnvironmentStringsW = int Function(
  ffi.Pointer<ffi.Uint16> NewEnvironment,
);

typedef _c_GetStdHandle = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 nStdHandle,
);

typedef _dart_GetStdHandle = ffi.Pointer<ffi.Void> Function(
  int nStdHandle,
);

typedef _c_SetStdHandle = ffi.Int32 Function(
  ffi.Uint64 nStdHandle,
  ffi.Pointer<ffi.Void> hHandle,
);

typedef _dart_SetStdHandle = int Function(
  int nStdHandle,
  ffi.Pointer<ffi.Void> hHandle,
);

typedef _c_SetStdHandleEx = ffi.Int32 Function(
  ffi.Uint64 nStdHandle,
  ffi.Pointer<ffi.Void> hHandle,
  ffi.Pointer<ffi.Pointer<ffi.Void>> phPrevValue,
);

typedef _dart_SetStdHandleEx = int Function(
  int nStdHandle,
  ffi.Pointer<ffi.Void> hHandle,
  ffi.Pointer<ffi.Pointer<ffi.Void>> phPrevValue,
);

typedef _c_GetCommandLineA = ffi.Pointer<ffi.Int8> Function();

typedef _dart_GetCommandLineA = ffi.Pointer<ffi.Int8> Function();

typedef _c_GetCommandLineW = ffi.Pointer<ffi.Uint16> Function();

typedef _dart_GetCommandLineW = ffi.Pointer<ffi.Uint16> Function();

typedef _c_GetEnvironmentStrings = ffi.Pointer<ffi.Int8> Function();

typedef _dart_GetEnvironmentStrings = ffi.Pointer<ffi.Int8> Function();

typedef _c_GetEnvironmentStringsW = ffi.Pointer<ffi.Uint16> Function();

typedef _dart_GetEnvironmentStringsW = ffi.Pointer<ffi.Uint16> Function();

typedef _c_FreeEnvironmentStringsA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> penv,
);

typedef _dart_FreeEnvironmentStringsA = int Function(
  ffi.Pointer<ffi.Int8> penv,
);

typedef _c_FreeEnvironmentStringsW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> penv,
);

typedef _dart_FreeEnvironmentStringsW = int Function(
  ffi.Pointer<ffi.Uint16> penv,
);

typedef _c_GetEnvironmentVariableA = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> lpName,
  ffi.Pointer<ffi.Int8> lpBuffer,
  ffi.Uint64 nSize,
);

typedef _dart_GetEnvironmentVariableA = int Function(
  ffi.Pointer<ffi.Int8> lpName,
  ffi.Pointer<ffi.Int8> lpBuffer,
  int nSize,
);

typedef _c_GetEnvironmentVariableW = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Pointer<ffi.Uint16> lpBuffer,
  ffi.Uint64 nSize,
);

typedef _dart_GetEnvironmentVariableW = int Function(
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Pointer<ffi.Uint16> lpBuffer,
  int nSize,
);

typedef _c_SetEnvironmentVariableA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpName,
  ffi.Pointer<ffi.Int8> lpValue,
);

typedef _dart_SetEnvironmentVariableA = int Function(
  ffi.Pointer<ffi.Int8> lpName,
  ffi.Pointer<ffi.Int8> lpValue,
);

typedef _c_SetEnvironmentVariableW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Pointer<ffi.Uint16> lpValue,
);

typedef _dart_SetEnvironmentVariableW = int Function(
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Pointer<ffi.Uint16> lpValue,
);

typedef _c_ExpandEnvironmentStringsA = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> lpSrc,
  ffi.Pointer<ffi.Int8> lpDst,
  ffi.Uint64 nSize,
);

typedef _dart_ExpandEnvironmentStringsA = int Function(
  ffi.Pointer<ffi.Int8> lpSrc,
  ffi.Pointer<ffi.Int8> lpDst,
  int nSize,
);

typedef _c_ExpandEnvironmentStringsW = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> lpSrc,
  ffi.Pointer<ffi.Uint16> lpDst,
  ffi.Uint64 nSize,
);

typedef _dart_ExpandEnvironmentStringsW = int Function(
  ffi.Pointer<ffi.Uint16> lpSrc,
  ffi.Pointer<ffi.Uint16> lpDst,
  int nSize,
);

typedef _c_SetCurrentDirectoryA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpPathName,
);

typedef _dart_SetCurrentDirectoryA = int Function(
  ffi.Pointer<ffi.Int8> lpPathName,
);

typedef _c_SetCurrentDirectoryW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpPathName,
);

typedef _dart_SetCurrentDirectoryW = int Function(
  ffi.Pointer<ffi.Uint16> lpPathName,
);

typedef _c_GetCurrentDirectoryA = ffi.Uint64 Function(
  ffi.Uint64 nBufferLength,
  ffi.Pointer<ffi.Int8> lpBuffer,
);

typedef _dart_GetCurrentDirectoryA = int Function(
  int nBufferLength,
  ffi.Pointer<ffi.Int8> lpBuffer,
);

typedef _c_GetCurrentDirectoryW = ffi.Uint64 Function(
  ffi.Uint64 nBufferLength,
  ffi.Pointer<ffi.Uint16> lpBuffer,
);

typedef _dart_GetCurrentDirectoryW = int Function(
  int nBufferLength,
  ffi.Pointer<ffi.Uint16> lpBuffer,
);

typedef _c_SearchPathW = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> lpPath,
  ffi.Pointer<ffi.Uint16> lpFileName,
  ffi.Pointer<ffi.Uint16> lpExtension,
  ffi.Uint64 nBufferLength,
  ffi.Pointer<ffi.Uint16> lpBuffer,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> lpFilePart,
);

typedef _dart_SearchPathW = int Function(
  ffi.Pointer<ffi.Uint16> lpPath,
  ffi.Pointer<ffi.Uint16> lpFileName,
  ffi.Pointer<ffi.Uint16> lpExtension,
  int nBufferLength,
  ffi.Pointer<ffi.Uint16> lpBuffer,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> lpFilePart,
);

typedef _c_SearchPathA = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> lpPath,
  ffi.Pointer<ffi.Int8> lpFileName,
  ffi.Pointer<ffi.Int8> lpExtension,
  ffi.Uint64 nBufferLength,
  ffi.Pointer<ffi.Int8> lpBuffer,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> lpFilePart,
);

typedef _dart_SearchPathA = int Function(
  ffi.Pointer<ffi.Int8> lpPath,
  ffi.Pointer<ffi.Int8> lpFileName,
  ffi.Pointer<ffi.Int8> lpExtension,
  int nBufferLength,
  ffi.Pointer<ffi.Int8> lpBuffer,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> lpFilePart,
);

typedef _c_NeedCurrentDirectoryForExePathA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> ExeName,
);

typedef _dart_NeedCurrentDirectoryForExePathA = int Function(
  ffi.Pointer<ffi.Int8> ExeName,
);

typedef _c_NeedCurrentDirectoryForExePathW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> ExeName,
);

typedef _dart_NeedCurrentDirectoryForExePathW = int Function(
  ffi.Pointer<ffi.Uint16> ExeName,
);

typedef _c_CompareFileTime = ffi.Int64 Function(
  ffi.Pointer<LPFILETIME> lpFileTime1,
  ffi.Pointer<LPFILETIME> lpFileTime2,
);

typedef _dart_CompareFileTime = int Function(
  ffi.Pointer<LPFILETIME> lpFileTime1,
  ffi.Pointer<LPFILETIME> lpFileTime2,
);

typedef _c_CreateDirectoryA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpPathName,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
);

typedef _dart_CreateDirectoryA = int Function(
  ffi.Pointer<ffi.Int8> lpPathName,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
);

typedef _c_CreateDirectoryW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpPathName,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
);

typedef _dart_CreateDirectoryW = int Function(
  ffi.Pointer<ffi.Uint16> lpPathName,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
);

typedef _c_CreateFileA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  ffi.Uint64 dwDesiredAccess,
  ffi.Uint64 dwShareMode,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  ffi.Uint64 dwCreationDisposition,
  ffi.Uint64 dwFlagsAndAttributes,
  ffi.Pointer<ffi.Void> hTemplateFile,
);

typedef _dart_CreateFileA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  int dwDesiredAccess,
  int dwShareMode,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  int dwCreationDisposition,
  int dwFlagsAndAttributes,
  ffi.Pointer<ffi.Void> hTemplateFile,
);

typedef _c_CreateFileW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  ffi.Uint64 dwDesiredAccess,
  ffi.Uint64 dwShareMode,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  ffi.Uint64 dwCreationDisposition,
  ffi.Uint64 dwFlagsAndAttributes,
  ffi.Pointer<ffi.Void> hTemplateFile,
);

typedef _dart_CreateFileW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  int dwDesiredAccess,
  int dwShareMode,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  int dwCreationDisposition,
  int dwFlagsAndAttributes,
  ffi.Pointer<ffi.Void> hTemplateFile,
);

typedef _c_DefineDosDeviceW = ffi.Int32 Function(
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Uint16> lpDeviceName,
  ffi.Pointer<ffi.Uint16> lpTargetPath,
);

typedef _dart_DefineDosDeviceW = int Function(
  int dwFlags,
  ffi.Pointer<ffi.Uint16> lpDeviceName,
  ffi.Pointer<ffi.Uint16> lpTargetPath,
);

typedef _c_DeleteFileA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpFileName,
);

typedef _dart_DeleteFileA = int Function(
  ffi.Pointer<ffi.Int8> lpFileName,
);

typedef _c_DeleteFileW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
);

typedef _dart_DeleteFileW = int Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
);

typedef _c_DeleteVolumeMountPointW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpszVolumeMountPoint,
);

typedef _dart_DeleteVolumeMountPointW = int Function(
  ffi.Pointer<ffi.Uint16> lpszVolumeMountPoint,
);

typedef _c_FileTimeToLocalFileTime = ffi.Int32 Function(
  ffi.Pointer<LPFILETIME> lpFileTime,
  ffi.Pointer<LPFILETIME> lpLocalFileTime,
);

typedef _dart_FileTimeToLocalFileTime = int Function(
  ffi.Pointer<LPFILETIME> lpFileTime,
  ffi.Pointer<LPFILETIME> lpLocalFileTime,
);

typedef _c_FindClose = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFindFile,
);

typedef _dart_FindClose = int Function(
  ffi.Pointer<ffi.Void> hFindFile,
);

typedef _c_FindCloseChangeNotification = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hChangeHandle,
);

typedef _dart_FindCloseChangeNotification = int Function(
  ffi.Pointer<ffi.Void> hChangeHandle,
);

typedef _c_FindFirstChangeNotificationA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> lpPathName,
  ffi.Int32 bWatchSubtree,
  ffi.Uint64 dwNotifyFilter,
);

typedef _dart_FindFirstChangeNotificationA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> lpPathName,
  int bWatchSubtree,
  int dwNotifyFilter,
);

typedef _c_FindFirstChangeNotificationW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpPathName,
  ffi.Int32 bWatchSubtree,
  ffi.Uint64 dwNotifyFilter,
);

typedef _dart_FindFirstChangeNotificationW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpPathName,
  int bWatchSubtree,
  int dwNotifyFilter,
);

typedef _c_FindFirstFileA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  ffi.Pointer<LPWIN32_FIND_DATAA> lpFindFileData,
);

typedef _dart_FindFirstFileA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  ffi.Pointer<LPWIN32_FIND_DATAA> lpFindFileData,
);

typedef _c_FindFirstFileW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  ffi.Pointer<LPWIN32_FIND_DATAW> lpFindFileData,
);

typedef _dart_FindFirstFileW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  ffi.Pointer<LPWIN32_FIND_DATAW> lpFindFileData,
);

typedef _c_FindFirstFileExA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  ffi.Int32 fInfoLevelId,
  ffi.Pointer<ffi.Void> lpFindFileData,
  ffi.Int32 fSearchOp,
  ffi.Pointer<ffi.Void> lpSearchFilter,
  ffi.Uint64 dwAdditionalFlags,
);

typedef _dart_FindFirstFileExA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  int fInfoLevelId,
  ffi.Pointer<ffi.Void> lpFindFileData,
  int fSearchOp,
  ffi.Pointer<ffi.Void> lpSearchFilter,
  int dwAdditionalFlags,
);

typedef _c_FindFirstFileExW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  ffi.Int32 fInfoLevelId,
  ffi.Pointer<ffi.Void> lpFindFileData,
  ffi.Int32 fSearchOp,
  ffi.Pointer<ffi.Void> lpSearchFilter,
  ffi.Uint64 dwAdditionalFlags,
);

typedef _dart_FindFirstFileExW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  int fInfoLevelId,
  ffi.Pointer<ffi.Void> lpFindFileData,
  int fSearchOp,
  ffi.Pointer<ffi.Void> lpSearchFilter,
  int dwAdditionalFlags,
);

typedef _c_FindFirstVolumeW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpszVolumeName,
  ffi.Uint64 cchBufferLength,
);

typedef _dart_FindFirstVolumeW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpszVolumeName,
  int cchBufferLength,
);

typedef _c_FindNextChangeNotification = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hChangeHandle,
);

typedef _dart_FindNextChangeNotification = int Function(
  ffi.Pointer<ffi.Void> hChangeHandle,
);

typedef _c_FindNextFileA = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFindFile,
  ffi.Pointer<LPWIN32_FIND_DATAA> lpFindFileData,
);

typedef _dart_FindNextFileA = int Function(
  ffi.Pointer<ffi.Void> hFindFile,
  ffi.Pointer<LPWIN32_FIND_DATAA> lpFindFileData,
);

typedef _c_FindNextFileW = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFindFile,
  ffi.Pointer<LPWIN32_FIND_DATAW> lpFindFileData,
);

typedef _dart_FindNextFileW = int Function(
  ffi.Pointer<ffi.Void> hFindFile,
  ffi.Pointer<LPWIN32_FIND_DATAW> lpFindFileData,
);

typedef _c_FindNextVolumeW = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFindVolume,
  ffi.Pointer<ffi.Uint16> lpszVolumeName,
  ffi.Uint64 cchBufferLength,
);

typedef _dart_FindNextVolumeW = int Function(
  ffi.Pointer<ffi.Void> hFindVolume,
  ffi.Pointer<ffi.Uint16> lpszVolumeName,
  int cchBufferLength,
);

typedef _c_FindVolumeClose = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFindVolume,
);

typedef _dart_FindVolumeClose = int Function(
  ffi.Pointer<ffi.Void> hFindVolume,
);

typedef _c_FlushFileBuffers = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
);

typedef _dart_FlushFileBuffers = int Function(
  ffi.Pointer<ffi.Void> hFile,
);

typedef _c_GetDiskFreeSpaceA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpRootPathName,
  ffi.Pointer<ffi.Uint64> lpSectorsPerCluster,
  ffi.Pointer<ffi.Uint64> lpBytesPerSector,
  ffi.Pointer<ffi.Uint64> lpNumberOfFreeClusters,
  ffi.Pointer<ffi.Uint64> lpTotalNumberOfClusters,
);

typedef _dart_GetDiskFreeSpaceA = int Function(
  ffi.Pointer<ffi.Int8> lpRootPathName,
  ffi.Pointer<ffi.Uint64> lpSectorsPerCluster,
  ffi.Pointer<ffi.Uint64> lpBytesPerSector,
  ffi.Pointer<ffi.Uint64> lpNumberOfFreeClusters,
  ffi.Pointer<ffi.Uint64> lpTotalNumberOfClusters,
);

typedef _c_GetDiskFreeSpaceW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpRootPathName,
  ffi.Pointer<ffi.Uint64> lpSectorsPerCluster,
  ffi.Pointer<ffi.Uint64> lpBytesPerSector,
  ffi.Pointer<ffi.Uint64> lpNumberOfFreeClusters,
  ffi.Pointer<ffi.Uint64> lpTotalNumberOfClusters,
);

typedef _dart_GetDiskFreeSpaceW = int Function(
  ffi.Pointer<ffi.Uint16> lpRootPathName,
  ffi.Pointer<ffi.Uint64> lpSectorsPerCluster,
  ffi.Pointer<ffi.Uint64> lpBytesPerSector,
  ffi.Pointer<ffi.Uint64> lpNumberOfFreeClusters,
  ffi.Pointer<ffi.Uint64> lpTotalNumberOfClusters,
);

typedef _c_GetDiskSpaceInformationA = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> rootPath,
  ffi.Pointer<DISK_SPACE_INFORMATION> diskSpaceInfo,
);

typedef _dart_GetDiskSpaceInformationA = int Function(
  ffi.Pointer<ffi.Int8> rootPath,
  ffi.Pointer<DISK_SPACE_INFORMATION> diskSpaceInfo,
);

typedef _c_GetDiskSpaceInformationW = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> rootPath,
  ffi.Pointer<DISK_SPACE_INFORMATION> diskSpaceInfo,
);

typedef _dart_GetDiskSpaceInformationW = int Function(
  ffi.Pointer<ffi.Uint16> rootPath,
  ffi.Pointer<DISK_SPACE_INFORMATION> diskSpaceInfo,
);

typedef _c_GetDriveTypeA = ffi.Uint32 Function(
  ffi.Pointer<ffi.Int8> lpRootPathName,
);

typedef _dart_GetDriveTypeA = int Function(
  ffi.Pointer<ffi.Int8> lpRootPathName,
);

typedef _c_GetDriveTypeW = ffi.Uint32 Function(
  ffi.Pointer<ffi.Uint16> lpRootPathName,
);

typedef _dart_GetDriveTypeW = int Function(
  ffi.Pointer<ffi.Uint16> lpRootPathName,
);

typedef _c_GetFileAttributesA = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> lpFileName,
);

typedef _dart_GetFileAttributesA = int Function(
  ffi.Pointer<ffi.Int8> lpFileName,
);

typedef _c_GetFileAttributesW = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
);

typedef _dart_GetFileAttributesW = int Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
);

typedef _c_GetFileAttributesExA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  ffi.Int32 fInfoLevelId,
  ffi.Pointer<ffi.Void> lpFileInformation,
);

typedef _dart_GetFileAttributesExA = int Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  int fInfoLevelId,
  ffi.Pointer<ffi.Void> lpFileInformation,
);

typedef _c_GetFileAttributesExW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  ffi.Int32 fInfoLevelId,
  ffi.Pointer<ffi.Void> lpFileInformation,
);

typedef _dart_GetFileAttributesExW = int Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  int fInfoLevelId,
  ffi.Pointer<ffi.Void> lpFileInformation,
);

typedef _c_GetFileInformationByHandle = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<LPBY_HANDLE_FILE_INFORMATION> lpFileInformation,
);

typedef _dart_GetFileInformationByHandle = int Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<LPBY_HANDLE_FILE_INFORMATION> lpFileInformation,
);

typedef _c_GetFileSize = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<ffi.Uint64> lpFileSizeHigh,
);

typedef _dart_GetFileSize = int Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<ffi.Uint64> lpFileSizeHigh,
);

typedef _c_GetFileType = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> hFile,
);

typedef _dart_GetFileType = int Function(
  ffi.Pointer<ffi.Void> hFile,
);

typedef _c_GetFinalPathNameByHandleA = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<ffi.Int8> lpszFilePath,
  ffi.Uint64 cchFilePath,
  ffi.Uint64 dwFlags,
);

typedef _dart_GetFinalPathNameByHandleA = int Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<ffi.Int8> lpszFilePath,
  int cchFilePath,
  int dwFlags,
);

typedef _c_GetFinalPathNameByHandleW = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<ffi.Uint16> lpszFilePath,
  ffi.Uint64 cchFilePath,
  ffi.Uint64 dwFlags,
);

typedef _dart_GetFinalPathNameByHandleW = int Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<ffi.Uint16> lpszFilePath,
  int cchFilePath,
  int dwFlags,
);

typedef _c_GetFileTime = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<LPFILETIME> lpCreationTime,
  ffi.Pointer<LPFILETIME> lpLastAccessTime,
  ffi.Pointer<LPFILETIME> lpLastWriteTime,
);

typedef _dart_GetFileTime = int Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<LPFILETIME> lpCreationTime,
  ffi.Pointer<LPFILETIME> lpLastAccessTime,
  ffi.Pointer<LPFILETIME> lpLastWriteTime,
);

typedef _c_GetFullPathNameW = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  ffi.Uint64 nBufferLength,
  ffi.Pointer<ffi.Uint16> lpBuffer,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> lpFilePart,
);

typedef _dart_GetFullPathNameW = int Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  int nBufferLength,
  ffi.Pointer<ffi.Uint16> lpBuffer,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> lpFilePart,
);

typedef _c_GetFullPathNameA = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  ffi.Uint64 nBufferLength,
  ffi.Pointer<ffi.Int8> lpBuffer,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> lpFilePart,
);

typedef _dart_GetFullPathNameA = int Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  int nBufferLength,
  ffi.Pointer<ffi.Int8> lpBuffer,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> lpFilePart,
);

typedef _c_GetLogicalDrives = ffi.Uint64 Function();

typedef _dart_GetLogicalDrives = int Function();

typedef _c_GetLogicalDriveStringsW = ffi.Uint64 Function(
  ffi.Uint64 nBufferLength,
  ffi.Pointer<ffi.Uint16> lpBuffer,
);

typedef _dart_GetLogicalDriveStringsW = int Function(
  int nBufferLength,
  ffi.Pointer<ffi.Uint16> lpBuffer,
);

typedef _c_GetLongPathNameA = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> lpszShortPath,
  ffi.Pointer<ffi.Int8> lpszLongPath,
  ffi.Uint64 cchBuffer,
);

typedef _dart_GetLongPathNameA = int Function(
  ffi.Pointer<ffi.Int8> lpszShortPath,
  ffi.Pointer<ffi.Int8> lpszLongPath,
  int cchBuffer,
);

typedef _c_GetLongPathNameW = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> lpszShortPath,
  ffi.Pointer<ffi.Uint16> lpszLongPath,
  ffi.Uint64 cchBuffer,
);

typedef _dart_GetLongPathNameW = int Function(
  ffi.Pointer<ffi.Uint16> lpszShortPath,
  ffi.Pointer<ffi.Uint16> lpszLongPath,
  int cchBuffer,
);

typedef _c_GetShortPathNameW = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> lpszLongPath,
  ffi.Pointer<ffi.Uint16> lpszShortPath,
  ffi.Uint64 cchBuffer,
);

typedef _dart_GetShortPathNameW = int Function(
  ffi.Pointer<ffi.Uint16> lpszLongPath,
  ffi.Pointer<ffi.Uint16> lpszShortPath,
  int cchBuffer,
);

typedef _c_GetTempFileNameW = ffi.Uint32 Function(
  ffi.Pointer<ffi.Uint16> lpPathName,
  ffi.Pointer<ffi.Uint16> lpPrefixString,
  ffi.Uint32 uUnique,
  ffi.Pointer<ffi.Uint16> lpTempFileName,
);

typedef _dart_GetTempFileNameW = int Function(
  ffi.Pointer<ffi.Uint16> lpPathName,
  ffi.Pointer<ffi.Uint16> lpPrefixString,
  int uUnique,
  ffi.Pointer<ffi.Uint16> lpTempFileName,
);

typedef _c_GetVolumeInformationByHandleW = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<ffi.Uint16> lpVolumeNameBuffer,
  ffi.Uint64 nVolumeNameSize,
  ffi.Pointer<ffi.Uint64> lpVolumeSerialNumber,
  ffi.Pointer<ffi.Uint64> lpMaximumComponentLength,
  ffi.Pointer<ffi.Uint64> lpFileSystemFlags,
  ffi.Pointer<ffi.Uint16> lpFileSystemNameBuffer,
  ffi.Uint64 nFileSystemNameSize,
);

typedef _dart_GetVolumeInformationByHandleW = int Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<ffi.Uint16> lpVolumeNameBuffer,
  int nVolumeNameSize,
  ffi.Pointer<ffi.Uint64> lpVolumeSerialNumber,
  ffi.Pointer<ffi.Uint64> lpMaximumComponentLength,
  ffi.Pointer<ffi.Uint64> lpFileSystemFlags,
  ffi.Pointer<ffi.Uint16> lpFileSystemNameBuffer,
  int nFileSystemNameSize,
);

typedef _c_GetVolumeInformationW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpRootPathName,
  ffi.Pointer<ffi.Uint16> lpVolumeNameBuffer,
  ffi.Uint64 nVolumeNameSize,
  ffi.Pointer<ffi.Uint64> lpVolumeSerialNumber,
  ffi.Pointer<ffi.Uint64> lpMaximumComponentLength,
  ffi.Pointer<ffi.Uint64> lpFileSystemFlags,
  ffi.Pointer<ffi.Uint16> lpFileSystemNameBuffer,
  ffi.Uint64 nFileSystemNameSize,
);

typedef _dart_GetVolumeInformationW = int Function(
  ffi.Pointer<ffi.Uint16> lpRootPathName,
  ffi.Pointer<ffi.Uint16> lpVolumeNameBuffer,
  int nVolumeNameSize,
  ffi.Pointer<ffi.Uint64> lpVolumeSerialNumber,
  ffi.Pointer<ffi.Uint64> lpMaximumComponentLength,
  ffi.Pointer<ffi.Uint64> lpFileSystemFlags,
  ffi.Pointer<ffi.Uint16> lpFileSystemNameBuffer,
  int nFileSystemNameSize,
);

typedef _c_GetVolumePathNameW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpszFileName,
  ffi.Pointer<ffi.Uint16> lpszVolumePathName,
  ffi.Uint64 cchBufferLength,
);

typedef _dart_GetVolumePathNameW = int Function(
  ffi.Pointer<ffi.Uint16> lpszFileName,
  ffi.Pointer<ffi.Uint16> lpszVolumePathName,
  int cchBufferLength,
);

typedef _c_LocalFileTimeToFileTime = ffi.Int32 Function(
  ffi.Pointer<LPFILETIME> lpLocalFileTime,
  ffi.Pointer<LPFILETIME> lpFileTime,
);

typedef _dart_LocalFileTimeToFileTime = int Function(
  ffi.Pointer<LPFILETIME> lpLocalFileTime,
  ffi.Pointer<LPFILETIME> lpFileTime,
);

typedef _c_LockFile = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Uint64 dwFileOffsetLow,
  ffi.Uint64 dwFileOffsetHigh,
  ffi.Uint64 nNumberOfBytesToLockLow,
  ffi.Uint64 nNumberOfBytesToLockHigh,
);

typedef _dart_LockFile = int Function(
  ffi.Pointer<ffi.Void> hFile,
  int dwFileOffsetLow,
  int dwFileOffsetHigh,
  int nNumberOfBytesToLockLow,
  int nNumberOfBytesToLockHigh,
);

typedef _c_LockFileEx = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Uint64 dwFlags,
  ffi.Uint64 dwReserved,
  ffi.Uint64 nNumberOfBytesToLockLow,
  ffi.Uint64 nNumberOfBytesToLockHigh,
  ffi.Pointer<LPOVERLAPPED> lpOverlapped,
);

typedef _dart_LockFileEx = int Function(
  ffi.Pointer<ffi.Void> hFile,
  int dwFlags,
  int dwReserved,
  int nNumberOfBytesToLockLow,
  int nNumberOfBytesToLockHigh,
  ffi.Pointer<LPOVERLAPPED> lpOverlapped,
);

typedef _c_QueryDosDeviceW = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> lpDeviceName,
  ffi.Pointer<ffi.Uint16> lpTargetPath,
  ffi.Uint64 ucchMax,
);

typedef _dart_QueryDosDeviceW = int Function(
  ffi.Pointer<ffi.Uint16> lpDeviceName,
  ffi.Pointer<ffi.Uint16> lpTargetPath,
  int ucchMax,
);

typedef _c_ReadFile = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<ffi.Void> lpBuffer,
  ffi.Uint64 nNumberOfBytesToRead,
  ffi.Pointer<ffi.Uint64> lpNumberOfBytesRead,
  ffi.Pointer<LPOVERLAPPED> lpOverlapped,
);

typedef _dart_ReadFile = int Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<ffi.Void> lpBuffer,
  int nNumberOfBytesToRead,
  ffi.Pointer<ffi.Uint64> lpNumberOfBytesRead,
  ffi.Pointer<LPOVERLAPPED> lpOverlapped,
);

typedef LPOVERLAPPED_COMPLETION_ROUTINE = ffi.Void Function(
  ffi.Uint64,
  ffi.Uint64,
  ffi.Pointer<LPOVERLAPPED>,
);

typedef _c_ReadFileEx = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<ffi.Void> lpBuffer,
  ffi.Uint64 nNumberOfBytesToRead,
  ffi.Pointer<LPOVERLAPPED> lpOverlapped,
  ffi.Pointer<ffi.NativeFunction<LPOVERLAPPED_COMPLETION_ROUTINE>>
      lpCompletionRoutine,
);

typedef _dart_ReadFileEx = int Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<ffi.Void> lpBuffer,
  int nNumberOfBytesToRead,
  ffi.Pointer<LPOVERLAPPED> lpOverlapped,
  ffi.Pointer<ffi.NativeFunction<LPOVERLAPPED_COMPLETION_ROUTINE>>
      lpCompletionRoutine,
);

typedef _c_RemoveDirectoryA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpPathName,
);

typedef _dart_RemoveDirectoryA = int Function(
  ffi.Pointer<ffi.Int8> lpPathName,
);

typedef _c_RemoveDirectoryW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpPathName,
);

typedef _dart_RemoveDirectoryW = int Function(
  ffi.Pointer<ffi.Uint16> lpPathName,
);

typedef _c_SetEndOfFile = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
);

typedef _dart_SetEndOfFile = int Function(
  ffi.Pointer<ffi.Void> hFile,
);

typedef _c_SetFileAttributesA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  ffi.Uint64 dwFileAttributes,
);

typedef _dart_SetFileAttributesA = int Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  int dwFileAttributes,
);

typedef _c_SetFileAttributesW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  ffi.Uint64 dwFileAttributes,
);

typedef _dart_SetFileAttributesW = int Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  int dwFileAttributes,
);

typedef _c_SetFileInformationByHandle = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Int32 FileInformationClass,
  ffi.Pointer<ffi.Void> lpFileInformation,
  ffi.Uint64 dwBufferSize,
);

typedef _dart_SetFileInformationByHandle = int Function(
  ffi.Pointer<ffi.Void> hFile,
  int FileInformationClass,
  ffi.Pointer<ffi.Void> lpFileInformation,
  int dwBufferSize,
);

typedef _c_SetFilePointer = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Int64 lDistanceToMove,
  ffi.Pointer<ffi.Int64> lpDistanceToMoveHigh,
  ffi.Uint64 dwMoveMethod,
);

typedef _dart_SetFilePointer = int Function(
  ffi.Pointer<ffi.Void> hFile,
  int lDistanceToMove,
  ffi.Pointer<ffi.Int64> lpDistanceToMoveHigh,
  int dwMoveMethod,
);

typedef _c_SetFileTime = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<LPFILETIME> lpCreationTime,
  ffi.Pointer<LPFILETIME> lpLastAccessTime,
  ffi.Pointer<LPFILETIME> lpLastWriteTime,
);

typedef _dart_SetFileTime = int Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<LPFILETIME> lpCreationTime,
  ffi.Pointer<LPFILETIME> lpLastAccessTime,
  ffi.Pointer<LPFILETIME> lpLastWriteTime,
);

typedef _c_SetFileValidData = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Int64 ValidDataLength,
);

typedef _dart_SetFileValidData = int Function(
  ffi.Pointer<ffi.Void> hFile,
  int ValidDataLength,
);

typedef _c_UnlockFile = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Uint64 dwFileOffsetLow,
  ffi.Uint64 dwFileOffsetHigh,
  ffi.Uint64 nNumberOfBytesToUnlockLow,
  ffi.Uint64 nNumberOfBytesToUnlockHigh,
);

typedef _dart_UnlockFile = int Function(
  ffi.Pointer<ffi.Void> hFile,
  int dwFileOffsetLow,
  int dwFileOffsetHigh,
  int nNumberOfBytesToUnlockLow,
  int nNumberOfBytesToUnlockHigh,
);

typedef _c_UnlockFileEx = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Uint64 dwReserved,
  ffi.Uint64 nNumberOfBytesToUnlockLow,
  ffi.Uint64 nNumberOfBytesToUnlockHigh,
  ffi.Pointer<LPOVERLAPPED> lpOverlapped,
);

typedef _dart_UnlockFileEx = int Function(
  ffi.Pointer<ffi.Void> hFile,
  int dwReserved,
  int nNumberOfBytesToUnlockLow,
  int nNumberOfBytesToUnlockHigh,
  ffi.Pointer<LPOVERLAPPED> lpOverlapped,
);

typedef _c_WriteFile = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<ffi.Void> lpBuffer,
  ffi.Uint64 nNumberOfBytesToWrite,
  ffi.Pointer<ffi.Uint64> lpNumberOfBytesWritten,
  ffi.Pointer<LPOVERLAPPED> lpOverlapped,
);

typedef _dart_WriteFile = int Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<ffi.Void> lpBuffer,
  int nNumberOfBytesToWrite,
  ffi.Pointer<ffi.Uint64> lpNumberOfBytesWritten,
  ffi.Pointer<LPOVERLAPPED> lpOverlapped,
);

typedef _c_WriteFileEx = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<ffi.Void> lpBuffer,
  ffi.Uint64 nNumberOfBytesToWrite,
  ffi.Pointer<LPOVERLAPPED> lpOverlapped,
  ffi.Pointer<ffi.NativeFunction<LPOVERLAPPED_COMPLETION_ROUTINE>>
      lpCompletionRoutine,
);

typedef _dart_WriteFileEx = int Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<ffi.Void> lpBuffer,
  int nNumberOfBytesToWrite,
  ffi.Pointer<LPOVERLAPPED> lpOverlapped,
  ffi.Pointer<ffi.NativeFunction<LPOVERLAPPED_COMPLETION_ROUTINE>>
      lpCompletionRoutine,
);

typedef _c_GetTempPathW = ffi.Uint64 Function(
  ffi.Uint64 nBufferLength,
  ffi.Pointer<ffi.Uint16> lpBuffer,
);

typedef _dart_GetTempPathW = int Function(
  int nBufferLength,
  ffi.Pointer<ffi.Uint16> lpBuffer,
);

typedef _c_GetVolumeNameForVolumeMountPointW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpszVolumeMountPoint,
  ffi.Pointer<ffi.Uint16> lpszVolumeName,
  ffi.Uint64 cchBufferLength,
);

typedef _dart_GetVolumeNameForVolumeMountPointW = int Function(
  ffi.Pointer<ffi.Uint16> lpszVolumeMountPoint,
  ffi.Pointer<ffi.Uint16> lpszVolumeName,
  int cchBufferLength,
);

typedef _c_GetVolumePathNamesForVolumeNameW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpszVolumeName,
  ffi.Pointer<ffi.Uint16> lpszVolumePathNames,
  ffi.Uint64 cchBufferLength,
  ffi.Pointer<ffi.Uint64> lpcchReturnLength,
);

typedef _dart_GetVolumePathNamesForVolumeNameW = int Function(
  ffi.Pointer<ffi.Uint16> lpszVolumeName,
  ffi.Pointer<ffi.Uint16> lpszVolumePathNames,
  int cchBufferLength,
  ffi.Pointer<ffi.Uint64> lpcchReturnLength,
);

typedef _c_CreateFile2 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  ffi.Uint64 dwDesiredAccess,
  ffi.Uint64 dwShareMode,
  ffi.Uint64 dwCreationDisposition,
  ffi.Pointer<LPCREATEFILE2_EXTENDED_PARAMETERS> pCreateExParams,
);

typedef _dart_CreateFile2 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  int dwDesiredAccess,
  int dwShareMode,
  int dwCreationDisposition,
  ffi.Pointer<LPCREATEFILE2_EXTENDED_PARAMETERS> pCreateExParams,
);

typedef _c_SetFileIoOverlappedRange = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> FileHandle,
  ffi.Pointer<ffi.Uint8> OverlappedRangeStart,
  ffi.Uint64 Length,
);

typedef _dart_SetFileIoOverlappedRange = int Function(
  ffi.Pointer<ffi.Void> FileHandle,
  ffi.Pointer<ffi.Uint8> OverlappedRangeStart,
  int Length,
);

typedef _c_GetCompressedFileSizeA = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  ffi.Pointer<ffi.Uint64> lpFileSizeHigh,
);

typedef _dart_GetCompressedFileSizeA = int Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  ffi.Pointer<ffi.Uint64> lpFileSizeHigh,
);

typedef _c_GetCompressedFileSizeW = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  ffi.Pointer<ffi.Uint64> lpFileSizeHigh,
);

typedef _dart_GetCompressedFileSizeW = int Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  ffi.Pointer<ffi.Uint64> lpFileSizeHigh,
);

typedef _c_FindFirstStreamW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  ffi.Int32 InfoLevel,
  ffi.Pointer<ffi.Void> lpFindStreamData,
  ffi.Uint64 dwFlags,
);

typedef _dart_FindFirstStreamW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  int InfoLevel,
  ffi.Pointer<ffi.Void> lpFindStreamData,
  int dwFlags,
);

typedef _c_FindNextStreamW = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFindStream,
  ffi.Pointer<ffi.Void> lpFindStreamData,
);

typedef _dart_FindNextStreamW = int Function(
  ffi.Pointer<ffi.Void> hFindStream,
  ffi.Pointer<ffi.Void> lpFindStreamData,
);

typedef _c_AreFileApisANSI = ffi.Int32 Function();

typedef _dart_AreFileApisANSI = int Function();

typedef _c_GetTempPathA = ffi.Uint64 Function(
  ffi.Uint64 nBufferLength,
  ffi.Pointer<ffi.Int8> lpBuffer,
);

typedef _dart_GetTempPathA = int Function(
  int nBufferLength,
  ffi.Pointer<ffi.Int8> lpBuffer,
);

typedef _c_FindFirstFileNameW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Uint64> StringLength,
  ffi.Pointer<ffi.Uint16> LinkName,
);

typedef _dart_FindFirstFileNameW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  int dwFlags,
  ffi.Pointer<ffi.Uint64> StringLength,
  ffi.Pointer<ffi.Uint16> LinkName,
);

typedef _c_FindNextFileNameW = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFindStream,
  ffi.Pointer<ffi.Uint64> StringLength,
  ffi.Pointer<ffi.Uint16> LinkName,
);

typedef _dart_FindNextFileNameW = int Function(
  ffi.Pointer<ffi.Void> hFindStream,
  ffi.Pointer<ffi.Uint64> StringLength,
  ffi.Pointer<ffi.Uint16> LinkName,
);

typedef _c_GetVolumeInformationA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpRootPathName,
  ffi.Pointer<ffi.Int8> lpVolumeNameBuffer,
  ffi.Uint64 nVolumeNameSize,
  ffi.Pointer<ffi.Uint64> lpVolumeSerialNumber,
  ffi.Pointer<ffi.Uint64> lpMaximumComponentLength,
  ffi.Pointer<ffi.Uint64> lpFileSystemFlags,
  ffi.Pointer<ffi.Int8> lpFileSystemNameBuffer,
  ffi.Uint64 nFileSystemNameSize,
);

typedef _dart_GetVolumeInformationA = int Function(
  ffi.Pointer<ffi.Int8> lpRootPathName,
  ffi.Pointer<ffi.Int8> lpVolumeNameBuffer,
  int nVolumeNameSize,
  ffi.Pointer<ffi.Uint64> lpVolumeSerialNumber,
  ffi.Pointer<ffi.Uint64> lpMaximumComponentLength,
  ffi.Pointer<ffi.Uint64> lpFileSystemFlags,
  ffi.Pointer<ffi.Int8> lpFileSystemNameBuffer,
  int nFileSystemNameSize,
);

typedef _c_GetTempFileNameA = ffi.Uint32 Function(
  ffi.Pointer<ffi.Int8> lpPathName,
  ffi.Pointer<ffi.Int8> lpPrefixString,
  ffi.Uint32 uUnique,
  ffi.Pointer<ffi.Int8> lpTempFileName,
);

typedef _dart_GetTempFileNameA = int Function(
  ffi.Pointer<ffi.Int8> lpPathName,
  ffi.Pointer<ffi.Int8> lpPrefixString,
  int uUnique,
  ffi.Pointer<ffi.Int8> lpTempFileName,
);

typedef _c_SetFileApisToOEM = ffi.Void Function();

typedef _dart_SetFileApisToOEM = void Function();

typedef _c_SetFileApisToANSI = ffi.Void Function();

typedef _dart_SetFileApisToANSI = void Function();

typedef _c_CopyFileFromAppW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpExistingFileName,
  ffi.Pointer<ffi.Uint16> lpNewFileName,
  ffi.Int32 bFailIfExists,
);

typedef _dart_CopyFileFromAppW = int Function(
  ffi.Pointer<ffi.Uint16> lpExistingFileName,
  ffi.Pointer<ffi.Uint16> lpNewFileName,
  int bFailIfExists,
);

typedef _c_CreateDirectoryFromAppW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpPathName,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
);

typedef _dart_CreateDirectoryFromAppW = int Function(
  ffi.Pointer<ffi.Uint16> lpPathName,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
);

typedef _c_CreateFileFromAppW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  ffi.Uint64 dwDesiredAccess,
  ffi.Uint64 dwShareMode,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  ffi.Uint64 dwCreationDisposition,
  ffi.Uint64 dwFlagsAndAttributes,
  ffi.Pointer<ffi.Void> hTemplateFile,
);

typedef _dart_CreateFileFromAppW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  int dwDesiredAccess,
  int dwShareMode,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  int dwCreationDisposition,
  int dwFlagsAndAttributes,
  ffi.Pointer<ffi.Void> hTemplateFile,
);

typedef _c_CreateFile2FromAppW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  ffi.Uint64 dwDesiredAccess,
  ffi.Uint64 dwShareMode,
  ffi.Uint64 dwCreationDisposition,
  ffi.Pointer<LPCREATEFILE2_EXTENDED_PARAMETERS> pCreateExParams,
);

typedef _dart_CreateFile2FromAppW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  int dwDesiredAccess,
  int dwShareMode,
  int dwCreationDisposition,
  ffi.Pointer<LPCREATEFILE2_EXTENDED_PARAMETERS> pCreateExParams,
);

typedef _c_DeleteFileFromAppW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
);

typedef _dart_DeleteFileFromAppW = int Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
);

typedef _c_FindFirstFileExFromAppW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  ffi.Int32 fInfoLevelId,
  ffi.Pointer<ffi.Void> lpFindFileData,
  ffi.Int32 fSearchOp,
  ffi.Pointer<ffi.Void> lpSearchFilter,
  ffi.Uint64 dwAdditionalFlags,
);

typedef _dart_FindFirstFileExFromAppW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  int fInfoLevelId,
  ffi.Pointer<ffi.Void> lpFindFileData,
  int fSearchOp,
  ffi.Pointer<ffi.Void> lpSearchFilter,
  int dwAdditionalFlags,
);

typedef _c_GetFileAttributesExFromAppW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  ffi.Int32 fInfoLevelId,
  ffi.Pointer<ffi.Void> lpFileInformation,
);

typedef _dart_GetFileAttributesExFromAppW = int Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  int fInfoLevelId,
  ffi.Pointer<ffi.Void> lpFileInformation,
);

typedef _c_MoveFileFromAppW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpExistingFileName,
  ffi.Pointer<ffi.Uint16> lpNewFileName,
);

typedef _dart_MoveFileFromAppW = int Function(
  ffi.Pointer<ffi.Uint16> lpExistingFileName,
  ffi.Pointer<ffi.Uint16> lpNewFileName,
);

typedef _c_RemoveDirectoryFromAppW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpPathName,
);

typedef _dart_RemoveDirectoryFromAppW = int Function(
  ffi.Pointer<ffi.Uint16> lpPathName,
);

typedef _c_ReplaceFileFromAppW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpReplacedFileName,
  ffi.Pointer<ffi.Uint16> lpReplacementFileName,
  ffi.Pointer<ffi.Uint16> lpBackupFileName,
  ffi.Uint64 dwReplaceFlags,
  ffi.Pointer<ffi.Void> lpExclude,
  ffi.Pointer<ffi.Void> lpReserved,
);

typedef _dart_ReplaceFileFromAppW = int Function(
  ffi.Pointer<ffi.Uint16> lpReplacedFileName,
  ffi.Pointer<ffi.Uint16> lpReplacementFileName,
  ffi.Pointer<ffi.Uint16> lpBackupFileName,
  int dwReplaceFlags,
  ffi.Pointer<ffi.Void> lpExclude,
  ffi.Pointer<ffi.Void> lpReserved,
);

typedef _c_SetFileAttributesFromAppW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  ffi.Uint64 dwFileAttributes,
);

typedef _dart_SetFileAttributesFromAppW = int Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  int dwFileAttributes,
);

typedef _c_IsDebuggerPresent = ffi.Int32 Function();

typedef _dart_IsDebuggerPresent = int Function();

typedef _c_DebugBreak = ffi.Void Function();

typedef _dart_DebugBreak = void Function();

typedef _c_OutputDebugStringA = ffi.Void Function(
  ffi.Pointer<ffi.Int8> lpOutputString,
);

typedef _dart_OutputDebugStringA = void Function(
  ffi.Pointer<ffi.Int8> lpOutputString,
);

typedef _c_OutputDebugStringW = ffi.Void Function(
  ffi.Pointer<ffi.Uint16> lpOutputString,
);

typedef _dart_OutputDebugStringW = void Function(
  ffi.Pointer<ffi.Uint16> lpOutputString,
);

typedef _c_ContinueDebugEvent = ffi.Int32 Function(
  ffi.Uint64 dwProcessId,
  ffi.Uint64 dwThreadId,
  ffi.Uint64 dwContinueStatus,
);

typedef _dart_ContinueDebugEvent = int Function(
  int dwProcessId,
  int dwThreadId,
  int dwContinueStatus,
);

typedef _c_WaitForDebugEvent = ffi.Int32 Function(
  ffi.Pointer<LPDEBUG_EVENT> lpDebugEvent,
  ffi.Uint64 dwMilliseconds,
);

typedef _dart_WaitForDebugEvent = int Function(
  ffi.Pointer<LPDEBUG_EVENT> lpDebugEvent,
  int dwMilliseconds,
);

typedef _c_DebugActiveProcess = ffi.Int32 Function(
  ffi.Uint64 dwProcessId,
);

typedef _dart_DebugActiveProcess = int Function(
  int dwProcessId,
);

typedef _c_DebugActiveProcessStop = ffi.Int32 Function(
  ffi.Uint64 dwProcessId,
);

typedef _dart_DebugActiveProcessStop = int Function(
  int dwProcessId,
);

typedef _c_CheckRemoteDebuggerPresent = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Int32> pbDebuggerPresent,
);

typedef _dart_CheckRemoteDebuggerPresent = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Int32> pbDebuggerPresent,
);

typedef _c_WaitForDebugEventEx = ffi.Int32 Function(
  ffi.Pointer<LPDEBUG_EVENT> lpDebugEvent,
  ffi.Uint64 dwMilliseconds,
);

typedef _dart_WaitForDebugEventEx = int Function(
  ffi.Pointer<LPDEBUG_EVENT> lpDebugEvent,
  int dwMilliseconds,
);

typedef _c_EncodePointer = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> Ptr,
);

typedef _dart_EncodePointer = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> Ptr,
);

typedef _c_DecodePointer = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> Ptr,
);

typedef _dart_DecodePointer = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> Ptr,
);

typedef _c_EncodeSystemPointer = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> Ptr,
);

typedef _dart_EncodeSystemPointer = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> Ptr,
);

typedef _c_DecodeSystemPointer = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> Ptr,
);

typedef _dart_DecodeSystemPointer = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> Ptr,
);

typedef _c_EncodeRemotePointer = ffi.Int64 Function(
  ffi.Pointer<ffi.Void> ProcessHandle,
  ffi.Pointer<ffi.Void> Ptr,
  ffi.Pointer<ffi.Pointer<ffi.Void>> EncodedPtr,
);

typedef _dart_EncodeRemotePointer = int Function(
  ffi.Pointer<ffi.Void> ProcessHandle,
  ffi.Pointer<ffi.Void> Ptr,
  ffi.Pointer<ffi.Pointer<ffi.Void>> EncodedPtr,
);

typedef _c_DecodeRemotePointer = ffi.Int64 Function(
  ffi.Pointer<ffi.Void> ProcessHandle,
  ffi.Pointer<ffi.Void> Ptr,
  ffi.Pointer<ffi.Pointer<ffi.Void>> DecodedPtr,
);

typedef _dart_DecodeRemotePointer = int Function(
  ffi.Pointer<ffi.Void> ProcessHandle,
  ffi.Pointer<ffi.Void> Ptr,
  ffi.Pointer<ffi.Pointer<ffi.Void>> DecodedPtr,
);

typedef _c_Beep = ffi.Int32 Function(
  ffi.Uint64 dwFreq,
  ffi.Uint64 dwDuration,
);

typedef _dart_Beep = int Function(
  int dwFreq,
  int dwDuration,
);

typedef _c_CloseHandle = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hObject,
);

typedef _dart_CloseHandle = int Function(
  ffi.Pointer<ffi.Void> hObject,
);

typedef _c_DuplicateHandle = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hSourceProcessHandle,
  ffi.Pointer<ffi.Void> hSourceHandle,
  ffi.Pointer<ffi.Void> hTargetProcessHandle,
  ffi.Pointer<ffi.Pointer<ffi.Void>> lpTargetHandle,
  ffi.Uint64 dwDesiredAccess,
  ffi.Int32 bInheritHandle,
  ffi.Uint64 dwOptions,
);

typedef _dart_DuplicateHandle = int Function(
  ffi.Pointer<ffi.Void> hSourceProcessHandle,
  ffi.Pointer<ffi.Void> hSourceHandle,
  ffi.Pointer<ffi.Void> hTargetProcessHandle,
  ffi.Pointer<ffi.Pointer<ffi.Void>> lpTargetHandle,
  int dwDesiredAccess,
  int bInheritHandle,
  int dwOptions,
);

typedef _c_CompareObjectHandles = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFirstObjectHandle,
  ffi.Pointer<ffi.Void> hSecondObjectHandle,
);

typedef _dart_CompareObjectHandles = int Function(
  ffi.Pointer<ffi.Void> hFirstObjectHandle,
  ffi.Pointer<ffi.Void> hSecondObjectHandle,
);

typedef _c_GetHandleInformation = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hObject,
  ffi.Pointer<ffi.Uint64> lpdwFlags,
);

typedef _dart_GetHandleInformation = int Function(
  ffi.Pointer<ffi.Void> hObject,
  ffi.Pointer<ffi.Uint64> lpdwFlags,
);

typedef _c_SetHandleInformation = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hObject,
  ffi.Uint64 dwMask,
  ffi.Uint64 dwFlags,
);

typedef _dart_SetHandleInformation = int Function(
  ffi.Pointer<ffi.Void> hObject,
  int dwMask,
  int dwFlags,
);

typedef _c_RaiseException = ffi.Void Function(
  ffi.Uint64 dwExceptionCode,
  ffi.Uint64 dwExceptionFlags,
  ffi.Uint64 nNumberOfArguments,
  ffi.Pointer<ffi.Uint64> lpArguments,
);

typedef _dart_RaiseException = void Function(
  int dwExceptionCode,
  int dwExceptionFlags,
  int nNumberOfArguments,
  ffi.Pointer<ffi.Uint64> lpArguments,
);

typedef _c_UnhandledExceptionFilter = ffi.Int64 Function(
  ffi.Pointer<PEXCEPTION_POINTERS> ExceptionInfo,
);

typedef _dart_UnhandledExceptionFilter = int Function(
  ffi.Pointer<PEXCEPTION_POINTERS> ExceptionInfo,
);

typedef LPTOP_LEVEL_EXCEPTION_FILTER = ffi.Int64 Function(
  ffi.Pointer<PEXCEPTION_POINTERS>,
);

typedef _c_SetUnhandledExceptionFilter
    = ffi.Pointer<ffi.NativeFunction<LPTOP_LEVEL_EXCEPTION_FILTER>> Function(
  ffi.Pointer<ffi.NativeFunction<LPTOP_LEVEL_EXCEPTION_FILTER>>
      lpTopLevelExceptionFilter,
);

typedef _dart_SetUnhandledExceptionFilter
    = ffi.Pointer<ffi.NativeFunction<LPTOP_LEVEL_EXCEPTION_FILTER>> Function(
  ffi.Pointer<ffi.NativeFunction<LPTOP_LEVEL_EXCEPTION_FILTER>>
      lpTopLevelExceptionFilter,
);

typedef _c_GetLastError = ffi.Uint64 Function();

typedef _dart_GetLastError = int Function();

typedef _c_SetLastError = ffi.Void Function(
  ffi.Uint64 dwErrCode,
);

typedef _dart_SetLastError = void Function(
  int dwErrCode,
);

typedef _c_GetErrorMode = ffi.Uint32 Function();

typedef _dart_GetErrorMode = int Function();

typedef _c_SetErrorMode = ffi.Uint32 Function(
  ffi.Uint32 uMode,
);

typedef _dart_SetErrorMode = int Function(
  int uMode,
);

typedef PVECTORED_EXCEPTION_HANDLER = ffi.Int64 Function(
  ffi.Pointer<PEXCEPTION_POINTERS>,
);

typedef _c_AddVectoredExceptionHandler = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 First,
  ffi.Pointer<ffi.NativeFunction<PVECTORED_EXCEPTION_HANDLER>> Handler,
);

typedef _dart_AddVectoredExceptionHandler = ffi.Pointer<ffi.Void> Function(
  int First,
  ffi.Pointer<ffi.NativeFunction<PVECTORED_EXCEPTION_HANDLER>> Handler,
);

typedef _c_RemoveVectoredExceptionHandler = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> Handle,
);

typedef _dart_RemoveVectoredExceptionHandler = int Function(
  ffi.Pointer<ffi.Void> Handle,
);

typedef _c_AddVectoredContinueHandler = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 First,
  ffi.Pointer<ffi.NativeFunction<PVECTORED_EXCEPTION_HANDLER>> Handler,
);

typedef _dart_AddVectoredContinueHandler = ffi.Pointer<ffi.Void> Function(
  int First,
  ffi.Pointer<ffi.NativeFunction<PVECTORED_EXCEPTION_HANDLER>> Handler,
);

typedef _c_RemoveVectoredContinueHandler = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> Handle,
);

typedef _dart_RemoveVectoredContinueHandler = int Function(
  ffi.Pointer<ffi.Void> Handle,
);

typedef _c_RaiseFailFastException = ffi.Void Function(
  ffi.Pointer<EXCEPTION_RECORD> pExceptionRecord,
  ffi.Pointer<PCONTEXT> pContextRecord,
  ffi.Uint64 dwFlags,
);

typedef _dart_RaiseFailFastException = void Function(
  ffi.Pointer<EXCEPTION_RECORD> pExceptionRecord,
  ffi.Pointer<PCONTEXT> pContextRecord,
  int dwFlags,
);

typedef _c_FatalAppExitA = ffi.Void Function(
  ffi.Uint32 uAction,
  ffi.Pointer<ffi.Int8> lpMessageText,
);

typedef _dart_FatalAppExitA = void Function(
  int uAction,
  ffi.Pointer<ffi.Int8> lpMessageText,
);

typedef _c_FatalAppExitW = ffi.Void Function(
  ffi.Uint32 uAction,
  ffi.Pointer<ffi.Uint16> lpMessageText,
);

typedef _dart_FatalAppExitW = void Function(
  int uAction,
  ffi.Pointer<ffi.Uint16> lpMessageText,
);

typedef _c_GetThreadErrorMode = ffi.Uint64 Function();

typedef _dart_GetThreadErrorMode = int Function();

typedef _c_SetThreadErrorMode = ffi.Int32 Function(
  ffi.Uint64 dwNewMode,
  ffi.Pointer<ffi.Uint64> lpOldMode,
);

typedef _dart_SetThreadErrorMode = int Function(
  int dwNewMode,
  ffi.Pointer<ffi.Uint64> lpOldMode,
);

typedef _c_TerminateProcessOnMemoryExhaustion = ffi.Void Function(
  ffi.Uint64 FailedAllocationSize,
);

typedef _dart_TerminateProcessOnMemoryExhaustion = void Function(
  int FailedAllocationSize,
);

typedef PFLS_CALLBACK_FUNCTION = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_FlsAlloc = ffi.Uint64 Function(
  ffi.Pointer<ffi.NativeFunction<PFLS_CALLBACK_FUNCTION>> lpCallback,
);

typedef _dart_FlsAlloc = int Function(
  ffi.Pointer<ffi.NativeFunction<PFLS_CALLBACK_FUNCTION>> lpCallback,
);

typedef _c_FlsGetValue = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 dwFlsIndex,
);

typedef _dart_FlsGetValue = ffi.Pointer<ffi.Void> Function(
  int dwFlsIndex,
);

typedef _c_FlsSetValue = ffi.Int32 Function(
  ffi.Uint64 dwFlsIndex,
  ffi.Pointer<ffi.Void> lpFlsData,
);

typedef _dart_FlsSetValue = int Function(
  int dwFlsIndex,
  ffi.Pointer<ffi.Void> lpFlsData,
);

typedef _c_FlsFree = ffi.Int32 Function(
  ffi.Uint64 dwFlsIndex,
);

typedef _dart_FlsFree = int Function(
  int dwFlsIndex,
);

typedef _c_IsThreadAFiber = ffi.Int32 Function();

typedef _dart_IsThreadAFiber = int Function();

typedef _c_CreatePipe = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> hReadPipe,
  ffi.Pointer<ffi.Pointer<ffi.Void>> hWritePipe,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpPipeAttributes,
  ffi.Uint64 nSize,
);

typedef _dart_CreatePipe = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> hReadPipe,
  ffi.Pointer<ffi.Pointer<ffi.Void>> hWritePipe,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpPipeAttributes,
  int nSize,
);

typedef _c_ConnectNamedPipe = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hNamedPipe,
  ffi.Pointer<LPOVERLAPPED> lpOverlapped,
);

typedef _dart_ConnectNamedPipe = int Function(
  ffi.Pointer<ffi.Void> hNamedPipe,
  ffi.Pointer<LPOVERLAPPED> lpOverlapped,
);

typedef _c_DisconnectNamedPipe = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hNamedPipe,
);

typedef _dart_DisconnectNamedPipe = int Function(
  ffi.Pointer<ffi.Void> hNamedPipe,
);

typedef _c_SetNamedPipeHandleState = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hNamedPipe,
  ffi.Pointer<ffi.Uint64> lpMode,
  ffi.Pointer<ffi.Uint64> lpMaxCollectionCount,
  ffi.Pointer<ffi.Uint64> lpCollectDataTimeout,
);

typedef _dart_SetNamedPipeHandleState = int Function(
  ffi.Pointer<ffi.Void> hNamedPipe,
  ffi.Pointer<ffi.Uint64> lpMode,
  ffi.Pointer<ffi.Uint64> lpMaxCollectionCount,
  ffi.Pointer<ffi.Uint64> lpCollectDataTimeout,
);

typedef _c_PeekNamedPipe = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hNamedPipe,
  ffi.Pointer<ffi.Void> lpBuffer,
  ffi.Uint64 nBufferSize,
  ffi.Pointer<ffi.Uint64> lpBytesRead,
  ffi.Pointer<ffi.Uint64> lpTotalBytesAvail,
  ffi.Pointer<ffi.Uint64> lpBytesLeftThisMessage,
);

typedef _dart_PeekNamedPipe = int Function(
  ffi.Pointer<ffi.Void> hNamedPipe,
  ffi.Pointer<ffi.Void> lpBuffer,
  int nBufferSize,
  ffi.Pointer<ffi.Uint64> lpBytesRead,
  ffi.Pointer<ffi.Uint64> lpTotalBytesAvail,
  ffi.Pointer<ffi.Uint64> lpBytesLeftThisMessage,
);

typedef _c_TransactNamedPipe = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hNamedPipe,
  ffi.Pointer<ffi.Void> lpInBuffer,
  ffi.Uint64 nInBufferSize,
  ffi.Pointer<ffi.Void> lpOutBuffer,
  ffi.Uint64 nOutBufferSize,
  ffi.Pointer<ffi.Uint64> lpBytesRead,
  ffi.Pointer<LPOVERLAPPED> lpOverlapped,
);

typedef _dart_TransactNamedPipe = int Function(
  ffi.Pointer<ffi.Void> hNamedPipe,
  ffi.Pointer<ffi.Void> lpInBuffer,
  int nInBufferSize,
  ffi.Pointer<ffi.Void> lpOutBuffer,
  int nOutBufferSize,
  ffi.Pointer<ffi.Uint64> lpBytesRead,
  ffi.Pointer<LPOVERLAPPED> lpOverlapped,
);

typedef _c_CreateNamedPipeW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Uint64 dwOpenMode,
  ffi.Uint64 dwPipeMode,
  ffi.Uint64 nMaxInstances,
  ffi.Uint64 nOutBufferSize,
  ffi.Uint64 nInBufferSize,
  ffi.Uint64 nDefaultTimeOut,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
);

typedef _dart_CreateNamedPipeW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpName,
  int dwOpenMode,
  int dwPipeMode,
  int nMaxInstances,
  int nOutBufferSize,
  int nInBufferSize,
  int nDefaultTimeOut,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
);

typedef _c_WaitNamedPipeW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpNamedPipeName,
  ffi.Uint64 nTimeOut,
);

typedef _dart_WaitNamedPipeW = int Function(
  ffi.Pointer<ffi.Uint16> lpNamedPipeName,
  int nTimeOut,
);

typedef _c_GetNamedPipeClientComputerNameW = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> Pipe,
  ffi.Pointer<ffi.Uint16> ClientComputerName,
  ffi.Uint64 ClientComputerNameLength,
);

typedef _dart_GetNamedPipeClientComputerNameW = int Function(
  ffi.Pointer<ffi.Void> Pipe,
  ffi.Pointer<ffi.Uint16> ClientComputerName,
  int ClientComputerNameLength,
);

typedef _c_ImpersonateNamedPipeClient = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hNamedPipe,
);

typedef _dart_ImpersonateNamedPipeClient = int Function(
  ffi.Pointer<ffi.Void> hNamedPipe,
);

typedef _c_GetNamedPipeInfo = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hNamedPipe,
  ffi.Pointer<ffi.Uint64> lpFlags,
  ffi.Pointer<ffi.Uint64> lpOutBufferSize,
  ffi.Pointer<ffi.Uint64> lpInBufferSize,
  ffi.Pointer<ffi.Uint64> lpMaxInstances,
);

typedef _dart_GetNamedPipeInfo = int Function(
  ffi.Pointer<ffi.Void> hNamedPipe,
  ffi.Pointer<ffi.Uint64> lpFlags,
  ffi.Pointer<ffi.Uint64> lpOutBufferSize,
  ffi.Pointer<ffi.Uint64> lpInBufferSize,
  ffi.Pointer<ffi.Uint64> lpMaxInstances,
);

typedef _c_GetNamedPipeHandleStateW = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hNamedPipe,
  ffi.Pointer<ffi.Uint64> lpState,
  ffi.Pointer<ffi.Uint64> lpCurInstances,
  ffi.Pointer<ffi.Uint64> lpMaxCollectionCount,
  ffi.Pointer<ffi.Uint64> lpCollectDataTimeout,
  ffi.Pointer<ffi.Uint16> lpUserName,
  ffi.Uint64 nMaxUserNameSize,
);

typedef _dart_GetNamedPipeHandleStateW = int Function(
  ffi.Pointer<ffi.Void> hNamedPipe,
  ffi.Pointer<ffi.Uint64> lpState,
  ffi.Pointer<ffi.Uint64> lpCurInstances,
  ffi.Pointer<ffi.Uint64> lpMaxCollectionCount,
  ffi.Pointer<ffi.Uint64> lpCollectDataTimeout,
  ffi.Pointer<ffi.Uint16> lpUserName,
  int nMaxUserNameSize,
);

typedef _c_CallNamedPipeW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpNamedPipeName,
  ffi.Pointer<ffi.Void> lpInBuffer,
  ffi.Uint64 nInBufferSize,
  ffi.Pointer<ffi.Void> lpOutBuffer,
  ffi.Uint64 nOutBufferSize,
  ffi.Pointer<ffi.Uint64> lpBytesRead,
  ffi.Uint64 nTimeOut,
);

typedef _dart_CallNamedPipeW = int Function(
  ffi.Pointer<ffi.Uint16> lpNamedPipeName,
  ffi.Pointer<ffi.Void> lpInBuffer,
  int nInBufferSize,
  ffi.Pointer<ffi.Void> lpOutBuffer,
  int nOutBufferSize,
  ffi.Pointer<ffi.Uint64> lpBytesRead,
  int nTimeOut,
);

typedef _c_HeapCreate = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 flOptions,
  ffi.Uint64 dwInitialSize,
  ffi.Uint64 dwMaximumSize,
);

typedef _dart_HeapCreate = ffi.Pointer<ffi.Void> Function(
  int flOptions,
  int dwInitialSize,
  int dwMaximumSize,
);

typedef _c_HeapDestroy = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hHeap,
);

typedef _dart_HeapDestroy = int Function(
  ffi.Pointer<ffi.Void> hHeap,
);

typedef _c_HeapAlloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hHeap,
  ffi.Uint64 dwFlags,
  ffi.Uint64 dwBytes,
);

typedef _dart_HeapAlloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hHeap,
  int dwFlags,
  int dwBytes,
);

typedef _c_HeapReAlloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hHeap,
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Void> lpMem,
  ffi.Uint64 dwBytes,
);

typedef _dart_HeapReAlloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hHeap,
  int dwFlags,
  ffi.Pointer<ffi.Void> lpMem,
  int dwBytes,
);

typedef _c_HeapFree = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hHeap,
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Void> lpMem,
);

typedef _dart_HeapFree = int Function(
  ffi.Pointer<ffi.Void> hHeap,
  int dwFlags,
  ffi.Pointer<ffi.Void> lpMem,
);

typedef _c_HeapSize = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> hHeap,
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Void> lpMem,
);

typedef _dart_HeapSize = int Function(
  ffi.Pointer<ffi.Void> hHeap,
  int dwFlags,
  ffi.Pointer<ffi.Void> lpMem,
);

typedef _c_GetProcessHeap = ffi.Pointer<ffi.Void> Function();

typedef _dart_GetProcessHeap = ffi.Pointer<ffi.Void> Function();

typedef _c_HeapCompact = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> hHeap,
  ffi.Uint64 dwFlags,
);

typedef _dart_HeapCompact = int Function(
  ffi.Pointer<ffi.Void> hHeap,
  int dwFlags,
);

typedef _c_HeapSetInformation = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> HeapHandle,
  ffi.Int32 HeapInformationClass,
  ffi.Pointer<ffi.Void> HeapInformation,
  ffi.Uint64 HeapInformationLength,
);

typedef _dart_HeapSetInformation = int Function(
  ffi.Pointer<ffi.Void> HeapHandle,
  int HeapInformationClass,
  ffi.Pointer<ffi.Void> HeapInformation,
  int HeapInformationLength,
);

typedef _c_HeapValidate = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hHeap,
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Void> lpMem,
);

typedef _dart_HeapValidate = int Function(
  ffi.Pointer<ffi.Void> hHeap,
  int dwFlags,
  ffi.Pointer<ffi.Void> lpMem,
);

typedef _c_HeapSummary = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hHeap,
  ffi.Uint64 dwFlags,
  ffi.Pointer<PHEAP_SUMMARY> lpSummary,
);

typedef _dart_HeapSummary = int Function(
  ffi.Pointer<ffi.Void> hHeap,
  int dwFlags,
  ffi.Pointer<PHEAP_SUMMARY> lpSummary,
);

typedef _c_GetProcessHeaps = ffi.Uint64 Function(
  ffi.Uint64 NumberOfHeaps,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ProcessHeaps,
);

typedef _dart_GetProcessHeaps = int Function(
  int NumberOfHeaps,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ProcessHeaps,
);

typedef _c_HeapLock = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hHeap,
);

typedef _dart_HeapLock = int Function(
  ffi.Pointer<ffi.Void> hHeap,
);

typedef _c_HeapUnlock = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hHeap,
);

typedef _dart_HeapUnlock = int Function(
  ffi.Pointer<ffi.Void> hHeap,
);

typedef _c_HeapWalk = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hHeap,
  ffi.Pointer<PPROCESS_HEAP_ENTRY> lpEntry,
);

typedef _dart_HeapWalk = int Function(
  ffi.Pointer<ffi.Void> hHeap,
  ffi.Pointer<PPROCESS_HEAP_ENTRY> lpEntry,
);

typedef _c_HeapQueryInformation = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> HeapHandle,
  ffi.Int32 HeapInformationClass,
  ffi.Pointer<ffi.Void> HeapInformation,
  ffi.Uint64 HeapInformationLength,
  ffi.Pointer<ffi.Uint64> ReturnLength,
);

typedef _dart_HeapQueryInformation = int Function(
  ffi.Pointer<ffi.Void> HeapHandle,
  int HeapInformationClass,
  ffi.Pointer<ffi.Void> HeapInformation,
  int HeapInformationLength,
  ffi.Pointer<ffi.Uint64> ReturnLength,
);

typedef _c_CreateIoCompletionPort = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> FileHandle,
  ffi.Pointer<ffi.Void> ExistingCompletionPort,
  ffi.Uint64 CompletionKey,
  ffi.Uint64 NumberOfConcurrentThreads,
);

typedef _dart_CreateIoCompletionPort = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> FileHandle,
  ffi.Pointer<ffi.Void> ExistingCompletionPort,
  int CompletionKey,
  int NumberOfConcurrentThreads,
);

typedef _c_GetQueuedCompletionStatus = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> CompletionPort,
  ffi.Pointer<ffi.Uint64> lpNumberOfBytesTransferred,
  ffi.Pointer<ffi.Uint64> lpCompletionKey,
  ffi.Pointer<ffi.Pointer<LPOVERLAPPED>> lpOverlapped,
  ffi.Uint64 dwMilliseconds,
);

typedef _dart_GetQueuedCompletionStatus = int Function(
  ffi.Pointer<ffi.Void> CompletionPort,
  ffi.Pointer<ffi.Uint64> lpNumberOfBytesTransferred,
  ffi.Pointer<ffi.Uint64> lpCompletionKey,
  ffi.Pointer<ffi.Pointer<LPOVERLAPPED>> lpOverlapped,
  int dwMilliseconds,
);

typedef _c_GetQueuedCompletionStatusEx = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> CompletionPort,
  ffi.Pointer<LPOVERLAPPED_ENTRY> lpCompletionPortEntries,
  ffi.Uint64 ulCount,
  ffi.Pointer<ffi.Uint64> ulNumEntriesRemoved,
  ffi.Uint64 dwMilliseconds,
  ffi.Int32 fAlertable,
);

typedef _dart_GetQueuedCompletionStatusEx = int Function(
  ffi.Pointer<ffi.Void> CompletionPort,
  ffi.Pointer<LPOVERLAPPED_ENTRY> lpCompletionPortEntries,
  int ulCount,
  ffi.Pointer<ffi.Uint64> ulNumEntriesRemoved,
  int dwMilliseconds,
  int fAlertable,
);

typedef _c_PostQueuedCompletionStatus = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> CompletionPort,
  ffi.Uint64 dwNumberOfBytesTransferred,
  ffi.Uint64 dwCompletionKey,
  ffi.Pointer<LPOVERLAPPED> lpOverlapped,
);

typedef _dart_PostQueuedCompletionStatus = int Function(
  ffi.Pointer<ffi.Void> CompletionPort,
  int dwNumberOfBytesTransferred,
  int dwCompletionKey,
  ffi.Pointer<LPOVERLAPPED> lpOverlapped,
);

typedef _c_DeviceIoControl = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hDevice,
  ffi.Uint64 dwIoControlCode,
  ffi.Pointer<ffi.Void> lpInBuffer,
  ffi.Uint64 nInBufferSize,
  ffi.Pointer<ffi.Void> lpOutBuffer,
  ffi.Uint64 nOutBufferSize,
  ffi.Pointer<ffi.Uint64> lpBytesReturned,
  ffi.Pointer<LPOVERLAPPED> lpOverlapped,
);

typedef _dart_DeviceIoControl = int Function(
  ffi.Pointer<ffi.Void> hDevice,
  int dwIoControlCode,
  ffi.Pointer<ffi.Void> lpInBuffer,
  int nInBufferSize,
  ffi.Pointer<ffi.Void> lpOutBuffer,
  int nOutBufferSize,
  ffi.Pointer<ffi.Uint64> lpBytesReturned,
  ffi.Pointer<LPOVERLAPPED> lpOverlapped,
);

typedef _c_GetOverlappedResult = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<LPOVERLAPPED> lpOverlapped,
  ffi.Pointer<ffi.Uint64> lpNumberOfBytesTransferred,
  ffi.Int32 bWait,
);

typedef _dart_GetOverlappedResult = int Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<LPOVERLAPPED> lpOverlapped,
  ffi.Pointer<ffi.Uint64> lpNumberOfBytesTransferred,
  int bWait,
);

typedef _c_CancelIoEx = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<LPOVERLAPPED> lpOverlapped,
);

typedef _dart_CancelIoEx = int Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<LPOVERLAPPED> lpOverlapped,
);

typedef _c_CancelIo = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
);

typedef _dart_CancelIo = int Function(
  ffi.Pointer<ffi.Void> hFile,
);

typedef _c_GetOverlappedResultEx = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<LPOVERLAPPED> lpOverlapped,
  ffi.Pointer<ffi.Uint64> lpNumberOfBytesTransferred,
  ffi.Uint64 dwMilliseconds,
  ffi.Int32 bAlertable,
);

typedef _dart_GetOverlappedResultEx = int Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<LPOVERLAPPED> lpOverlapped,
  ffi.Pointer<ffi.Uint64> lpNumberOfBytesTransferred,
  int dwMilliseconds,
  int bAlertable,
);

typedef _c_CancelSynchronousIo = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hThread,
);

typedef _dart_CancelSynchronousIo = int Function(
  ffi.Pointer<ffi.Void> hThread,
);

typedef _c_InitializeSRWLock = ffi.Void Function(
  ffi.Pointer<PRTL_SRWLOCK> SRWLock,
);

typedef _dart_InitializeSRWLock = void Function(
  ffi.Pointer<PRTL_SRWLOCK> SRWLock,
);

typedef _c_ReleaseSRWLockExclusive = ffi.Void Function(
  ffi.Pointer<PRTL_SRWLOCK> SRWLock,
);

typedef _dart_ReleaseSRWLockExclusive = void Function(
  ffi.Pointer<PRTL_SRWLOCK> SRWLock,
);

typedef _c_ReleaseSRWLockShared = ffi.Void Function(
  ffi.Pointer<PRTL_SRWLOCK> SRWLock,
);

typedef _dart_ReleaseSRWLockShared = void Function(
  ffi.Pointer<PRTL_SRWLOCK> SRWLock,
);

typedef _c_AcquireSRWLockExclusive = ffi.Void Function(
  ffi.Pointer<PRTL_SRWLOCK> SRWLock,
);

typedef _dart_AcquireSRWLockExclusive = void Function(
  ffi.Pointer<PRTL_SRWLOCK> SRWLock,
);

typedef _c_AcquireSRWLockShared = ffi.Void Function(
  ffi.Pointer<PRTL_SRWLOCK> SRWLock,
);

typedef _dart_AcquireSRWLockShared = void Function(
  ffi.Pointer<PRTL_SRWLOCK> SRWLock,
);

typedef _c_TryAcquireSRWLockExclusive = ffi.Uint8 Function(
  ffi.Pointer<PRTL_SRWLOCK> SRWLock,
);

typedef _dart_TryAcquireSRWLockExclusive = int Function(
  ffi.Pointer<PRTL_SRWLOCK> SRWLock,
);

typedef _c_TryAcquireSRWLockShared = ffi.Uint8 Function(
  ffi.Pointer<PRTL_SRWLOCK> SRWLock,
);

typedef _dart_TryAcquireSRWLockShared = int Function(
  ffi.Pointer<PRTL_SRWLOCK> SRWLock,
);

typedef _c_InitializeCriticalSection = ffi.Void Function(
  ffi.Pointer<PRTL_CRITICAL_SECTION> lpCriticalSection,
);

typedef _dart_InitializeCriticalSection = void Function(
  ffi.Pointer<PRTL_CRITICAL_SECTION> lpCriticalSection,
);

typedef _c_EnterCriticalSection = ffi.Void Function(
  ffi.Pointer<PRTL_CRITICAL_SECTION> lpCriticalSection,
);

typedef _dart_EnterCriticalSection = void Function(
  ffi.Pointer<PRTL_CRITICAL_SECTION> lpCriticalSection,
);

typedef _c_LeaveCriticalSection = ffi.Void Function(
  ffi.Pointer<PRTL_CRITICAL_SECTION> lpCriticalSection,
);

typedef _dart_LeaveCriticalSection = void Function(
  ffi.Pointer<PRTL_CRITICAL_SECTION> lpCriticalSection,
);

typedef _c_InitializeCriticalSectionAndSpinCount = ffi.Int32 Function(
  ffi.Pointer<PRTL_CRITICAL_SECTION> lpCriticalSection,
  ffi.Uint64 dwSpinCount,
);

typedef _dart_InitializeCriticalSectionAndSpinCount = int Function(
  ffi.Pointer<PRTL_CRITICAL_SECTION> lpCriticalSection,
  int dwSpinCount,
);

typedef _c_InitializeCriticalSectionEx = ffi.Int32 Function(
  ffi.Pointer<PRTL_CRITICAL_SECTION> lpCriticalSection,
  ffi.Uint64 dwSpinCount,
  ffi.Uint64 Flags,
);

typedef _dart_InitializeCriticalSectionEx = int Function(
  ffi.Pointer<PRTL_CRITICAL_SECTION> lpCriticalSection,
  int dwSpinCount,
  int Flags,
);

typedef _c_SetCriticalSectionSpinCount = ffi.Uint64 Function(
  ffi.Pointer<PRTL_CRITICAL_SECTION> lpCriticalSection,
  ffi.Uint64 dwSpinCount,
);

typedef _dart_SetCriticalSectionSpinCount = int Function(
  ffi.Pointer<PRTL_CRITICAL_SECTION> lpCriticalSection,
  int dwSpinCount,
);

typedef _c_TryEnterCriticalSection = ffi.Int32 Function(
  ffi.Pointer<PRTL_CRITICAL_SECTION> lpCriticalSection,
);

typedef _dart_TryEnterCriticalSection = int Function(
  ffi.Pointer<PRTL_CRITICAL_SECTION> lpCriticalSection,
);

typedef _c_DeleteCriticalSection = ffi.Void Function(
  ffi.Pointer<PRTL_CRITICAL_SECTION> lpCriticalSection,
);

typedef _dart_DeleteCriticalSection = void Function(
  ffi.Pointer<PRTL_CRITICAL_SECTION> lpCriticalSection,
);

typedef _c_InitializeConditionVariable = ffi.Void Function(
  ffi.Pointer<PRTL_CONDITION_VARIABLE> ConditionVariable,
);

typedef _dart_InitializeConditionVariable = void Function(
  ffi.Pointer<PRTL_CONDITION_VARIABLE> ConditionVariable,
);

typedef _c_WakeConditionVariable = ffi.Void Function(
  ffi.Pointer<PRTL_CONDITION_VARIABLE> ConditionVariable,
);

typedef _dart_WakeConditionVariable = void Function(
  ffi.Pointer<PRTL_CONDITION_VARIABLE> ConditionVariable,
);

typedef _c_WakeAllConditionVariable = ffi.Void Function(
  ffi.Pointer<PRTL_CONDITION_VARIABLE> ConditionVariable,
);

typedef _dart_WakeAllConditionVariable = void Function(
  ffi.Pointer<PRTL_CONDITION_VARIABLE> ConditionVariable,
);

typedef _c_SleepConditionVariableCS = ffi.Int32 Function(
  ffi.Pointer<PRTL_CONDITION_VARIABLE> ConditionVariable,
  ffi.Pointer<PRTL_CRITICAL_SECTION> CriticalSection,
  ffi.Uint64 dwMilliseconds,
);

typedef _dart_SleepConditionVariableCS = int Function(
  ffi.Pointer<PRTL_CONDITION_VARIABLE> ConditionVariable,
  ffi.Pointer<PRTL_CRITICAL_SECTION> CriticalSection,
  int dwMilliseconds,
);

typedef _c_SleepConditionVariableSRW = ffi.Int32 Function(
  ffi.Pointer<PRTL_CONDITION_VARIABLE> ConditionVariable,
  ffi.Pointer<PRTL_SRWLOCK> SRWLock,
  ffi.Uint64 dwMilliseconds,
  ffi.Uint64 Flags,
);

typedef _dart_SleepConditionVariableSRW = int Function(
  ffi.Pointer<PRTL_CONDITION_VARIABLE> ConditionVariable,
  ffi.Pointer<PRTL_SRWLOCK> SRWLock,
  int dwMilliseconds,
  int Flags,
);

typedef _c_SetEvent = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hEvent,
);

typedef _dart_SetEvent = int Function(
  ffi.Pointer<ffi.Void> hEvent,
);

typedef _c_ResetEvent = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hEvent,
);

typedef _dart_ResetEvent = int Function(
  ffi.Pointer<ffi.Void> hEvent,
);

typedef _c_ReleaseSemaphore = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hSemaphore,
  ffi.Int64 lReleaseCount,
  ffi.Pointer<ffi.Int64> lpPreviousCount,
);

typedef _dart_ReleaseSemaphore = int Function(
  ffi.Pointer<ffi.Void> hSemaphore,
  int lReleaseCount,
  ffi.Pointer<ffi.Int64> lpPreviousCount,
);

typedef _c_ReleaseMutex = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hMutex,
);

typedef _dart_ReleaseMutex = int Function(
  ffi.Pointer<ffi.Void> hMutex,
);

typedef _c_WaitForSingleObject = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> hHandle,
  ffi.Uint64 dwMilliseconds,
);

typedef _dart_WaitForSingleObject = int Function(
  ffi.Pointer<ffi.Void> hHandle,
  int dwMilliseconds,
);

typedef _c_SleepEx = ffi.Uint64 Function(
  ffi.Uint64 dwMilliseconds,
  ffi.Int32 bAlertable,
);

typedef _dart_SleepEx = int Function(
  int dwMilliseconds,
  int bAlertable,
);

typedef _c_WaitForSingleObjectEx = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> hHandle,
  ffi.Uint64 dwMilliseconds,
  ffi.Int32 bAlertable,
);

typedef _dart_WaitForSingleObjectEx = int Function(
  ffi.Pointer<ffi.Void> hHandle,
  int dwMilliseconds,
  int bAlertable,
);

typedef _c_WaitForMultipleObjectsEx = ffi.Uint64 Function(
  ffi.Uint64 nCount,
  ffi.Pointer<ffi.Pointer<ffi.Void>> lpHandles,
  ffi.Int32 bWaitAll,
  ffi.Uint64 dwMilliseconds,
  ffi.Int32 bAlertable,
);

typedef _dart_WaitForMultipleObjectsEx = int Function(
  int nCount,
  ffi.Pointer<ffi.Pointer<ffi.Void>> lpHandles,
  int bWaitAll,
  int dwMilliseconds,
  int bAlertable,
);

typedef _c_CreateMutexA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpMutexAttributes,
  ffi.Int32 bInitialOwner,
  ffi.Pointer<ffi.Int8> lpName,
);

typedef _dart_CreateMutexA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpMutexAttributes,
  int bInitialOwner,
  ffi.Pointer<ffi.Int8> lpName,
);

typedef _c_CreateMutexW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpMutexAttributes,
  ffi.Int32 bInitialOwner,
  ffi.Pointer<ffi.Uint16> lpName,
);

typedef _dart_CreateMutexW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpMutexAttributes,
  int bInitialOwner,
  ffi.Pointer<ffi.Uint16> lpName,
);

typedef _c_OpenMutexW = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 dwDesiredAccess,
  ffi.Int32 bInheritHandle,
  ffi.Pointer<ffi.Uint16> lpName,
);

typedef _dart_OpenMutexW = ffi.Pointer<ffi.Void> Function(
  int dwDesiredAccess,
  int bInheritHandle,
  ffi.Pointer<ffi.Uint16> lpName,
);

typedef _c_CreateEventA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpEventAttributes,
  ffi.Int32 bManualReset,
  ffi.Int32 bInitialState,
  ffi.Pointer<ffi.Int8> lpName,
);

typedef _dart_CreateEventA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpEventAttributes,
  int bManualReset,
  int bInitialState,
  ffi.Pointer<ffi.Int8> lpName,
);

typedef _c_CreateEventW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpEventAttributes,
  ffi.Int32 bManualReset,
  ffi.Int32 bInitialState,
  ffi.Pointer<ffi.Uint16> lpName,
);

typedef _dart_CreateEventW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpEventAttributes,
  int bManualReset,
  int bInitialState,
  ffi.Pointer<ffi.Uint16> lpName,
);

typedef _c_OpenEventA = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 dwDesiredAccess,
  ffi.Int32 bInheritHandle,
  ffi.Pointer<ffi.Int8> lpName,
);

typedef _dart_OpenEventA = ffi.Pointer<ffi.Void> Function(
  int dwDesiredAccess,
  int bInheritHandle,
  ffi.Pointer<ffi.Int8> lpName,
);

typedef _c_OpenEventW = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 dwDesiredAccess,
  ffi.Int32 bInheritHandle,
  ffi.Pointer<ffi.Uint16> lpName,
);

typedef _dart_OpenEventW = ffi.Pointer<ffi.Void> Function(
  int dwDesiredAccess,
  int bInheritHandle,
  ffi.Pointer<ffi.Uint16> lpName,
);

typedef _c_OpenSemaphoreW = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 dwDesiredAccess,
  ffi.Int32 bInheritHandle,
  ffi.Pointer<ffi.Uint16> lpName,
);

typedef _dart_OpenSemaphoreW = ffi.Pointer<ffi.Void> Function(
  int dwDesiredAccess,
  int bInheritHandle,
  ffi.Pointer<ffi.Uint16> lpName,
);

typedef _c_OpenWaitableTimerW = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 dwDesiredAccess,
  ffi.Int32 bInheritHandle,
  ffi.Pointer<ffi.Uint16> lpTimerName,
);

typedef _dart_OpenWaitableTimerW = ffi.Pointer<ffi.Void> Function(
  int dwDesiredAccess,
  int bInheritHandle,
  ffi.Pointer<ffi.Uint16> lpTimerName,
);

typedef _c_CancelWaitableTimer = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hTimer,
);

typedef _dart_CancelWaitableTimer = int Function(
  ffi.Pointer<ffi.Void> hTimer,
);

typedef _c_CreateMutexExA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpMutexAttributes,
  ffi.Pointer<ffi.Int8> lpName,
  ffi.Uint64 dwFlags,
  ffi.Uint64 dwDesiredAccess,
);

typedef _dart_CreateMutexExA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpMutexAttributes,
  ffi.Pointer<ffi.Int8> lpName,
  int dwFlags,
  int dwDesiredAccess,
);

typedef _c_CreateMutexExW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpMutexAttributes,
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Uint64 dwFlags,
  ffi.Uint64 dwDesiredAccess,
);

typedef _dart_CreateMutexExW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpMutexAttributes,
  ffi.Pointer<ffi.Uint16> lpName,
  int dwFlags,
  int dwDesiredAccess,
);

typedef _c_CreateEventExA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpEventAttributes,
  ffi.Pointer<ffi.Int8> lpName,
  ffi.Uint64 dwFlags,
  ffi.Uint64 dwDesiredAccess,
);

typedef _dart_CreateEventExA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpEventAttributes,
  ffi.Pointer<ffi.Int8> lpName,
  int dwFlags,
  int dwDesiredAccess,
);

typedef _c_CreateEventExW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpEventAttributes,
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Uint64 dwFlags,
  ffi.Uint64 dwDesiredAccess,
);

typedef _dart_CreateEventExW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpEventAttributes,
  ffi.Pointer<ffi.Uint16> lpName,
  int dwFlags,
  int dwDesiredAccess,
);

typedef _c_CreateSemaphoreExW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSemaphoreAttributes,
  ffi.Int64 lInitialCount,
  ffi.Int64 lMaximumCount,
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Uint64 dwFlags,
  ffi.Uint64 dwDesiredAccess,
);

typedef _dart_CreateSemaphoreExW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSemaphoreAttributes,
  int lInitialCount,
  int lMaximumCount,
  ffi.Pointer<ffi.Uint16> lpName,
  int dwFlags,
  int dwDesiredAccess,
);

typedef _c_CreateWaitableTimerExW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpTimerAttributes,
  ffi.Pointer<ffi.Uint16> lpTimerName,
  ffi.Uint64 dwFlags,
  ffi.Uint64 dwDesiredAccess,
);

typedef _dart_CreateWaitableTimerExW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpTimerAttributes,
  ffi.Pointer<ffi.Uint16> lpTimerName,
  int dwFlags,
  int dwDesiredAccess,
);

typedef _c_EnterSynchronizationBarrier = ffi.Int32 Function(
  ffi.Pointer<PRTL_BARRIER> lpBarrier,
  ffi.Uint64 dwFlags,
);

typedef _dart_EnterSynchronizationBarrier = int Function(
  ffi.Pointer<PRTL_BARRIER> lpBarrier,
  int dwFlags,
);

typedef _c_InitializeSynchronizationBarrier = ffi.Int32 Function(
  ffi.Pointer<PRTL_BARRIER> lpBarrier,
  ffi.Int64 lTotalThreads,
  ffi.Int64 lSpinCount,
);

typedef _dart_InitializeSynchronizationBarrier = int Function(
  ffi.Pointer<PRTL_BARRIER> lpBarrier,
  int lTotalThreads,
  int lSpinCount,
);

typedef _c_DeleteSynchronizationBarrier = ffi.Int32 Function(
  ffi.Pointer<PRTL_BARRIER> lpBarrier,
);

typedef _dart_DeleteSynchronizationBarrier = int Function(
  ffi.Pointer<PRTL_BARRIER> lpBarrier,
);

typedef _c_Sleep = ffi.Void Function(
  ffi.Uint64 dwMilliseconds,
);

typedef _dart_Sleep = void Function(
  int dwMilliseconds,
);

typedef _c_WaitOnAddress = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> Address,
  ffi.Pointer<ffi.Void> CompareAddress,
  ffi.Uint64 AddressSize,
  ffi.Uint64 dwMilliseconds,
);

typedef _dart_WaitOnAddress = int Function(
  ffi.Pointer<ffi.Void> Address,
  ffi.Pointer<ffi.Void> CompareAddress,
  int AddressSize,
  int dwMilliseconds,
);

typedef _c_WakeByAddressSingle = ffi.Void Function(
  ffi.Pointer<ffi.Void> Address,
);

typedef _dart_WakeByAddressSingle = void Function(
  ffi.Pointer<ffi.Void> Address,
);

typedef _c_WakeByAddressAll = ffi.Void Function(
  ffi.Pointer<ffi.Void> Address,
);

typedef _dart_WakeByAddressAll = void Function(
  ffi.Pointer<ffi.Void> Address,
);

typedef _c_SignalObjectAndWait = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> hObjectToSignal,
  ffi.Pointer<ffi.Void> hObjectToWaitOn,
  ffi.Uint64 dwMilliseconds,
  ffi.Int32 bAlertable,
);

typedef _dart_SignalObjectAndWait = int Function(
  ffi.Pointer<ffi.Void> hObjectToSignal,
  ffi.Pointer<ffi.Void> hObjectToWaitOn,
  int dwMilliseconds,
  int bAlertable,
);

typedef _c_WaitForMultipleObjects = ffi.Uint64 Function(
  ffi.Uint64 nCount,
  ffi.Pointer<ffi.Pointer<ffi.Void>> lpHandles,
  ffi.Int32 bWaitAll,
  ffi.Uint64 dwMilliseconds,
);

typedef _dart_WaitForMultipleObjects = int Function(
  int nCount,
  ffi.Pointer<ffi.Pointer<ffi.Void>> lpHandles,
  int bWaitAll,
  int dwMilliseconds,
);

typedef _c_CreateSemaphoreW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSemaphoreAttributes,
  ffi.Int64 lInitialCount,
  ffi.Int64 lMaximumCount,
  ffi.Pointer<ffi.Uint16> lpName,
);

typedef _dart_CreateSemaphoreW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSemaphoreAttributes,
  int lInitialCount,
  int lMaximumCount,
  ffi.Pointer<ffi.Uint16> lpName,
);

typedef _c_CreateWaitableTimerW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpTimerAttributes,
  ffi.Int32 bManualReset,
  ffi.Pointer<ffi.Uint16> lpTimerName,
);

typedef _dart_CreateWaitableTimerW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpTimerAttributes,
  int bManualReset,
  ffi.Pointer<ffi.Uint16> lpTimerName,
);

typedef PAPCFUNC = ffi.Void Function(
  ffi.Uint64,
);

typedef _c_QueueUserAPC = ffi.Uint64 Function(
  ffi.Pointer<ffi.NativeFunction<PAPCFUNC>> pfnAPC,
  ffi.Pointer<ffi.Void> hThread,
  ffi.Uint64 dwData,
);

typedef _dart_QueueUserAPC = int Function(
  ffi.Pointer<ffi.NativeFunction<PAPCFUNC>> pfnAPC,
  ffi.Pointer<ffi.Void> hThread,
  int dwData,
);

typedef _c_GetProcessTimes = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<LPFILETIME> lpCreationTime,
  ffi.Pointer<LPFILETIME> lpExitTime,
  ffi.Pointer<LPFILETIME> lpKernelTime,
  ffi.Pointer<LPFILETIME> lpUserTime,
);

typedef _dart_GetProcessTimes = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<LPFILETIME> lpCreationTime,
  ffi.Pointer<LPFILETIME> lpExitTime,
  ffi.Pointer<LPFILETIME> lpKernelTime,
  ffi.Pointer<LPFILETIME> lpUserTime,
);

typedef _c_GetCurrentProcess = ffi.Pointer<ffi.Void> Function();

typedef _dart_GetCurrentProcess = ffi.Pointer<ffi.Void> Function();

typedef _c_GetCurrentProcessId = ffi.Uint64 Function();

typedef _dart_GetCurrentProcessId = int Function();

typedef _c_ExitProcess = ffi.Void Function(
  ffi.Uint32 uExitCode,
);

typedef _dart_ExitProcess = void Function(
  int uExitCode,
);

typedef _c_TerminateProcess = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Uint32 uExitCode,
);

typedef _dart_TerminateProcess = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  int uExitCode,
);

typedef _c_GetExitCodeProcess = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Uint64> lpExitCode,
);

typedef _dart_GetExitCodeProcess = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Uint64> lpExitCode,
);

typedef _c_SwitchToThread = ffi.Int32 Function();

typedef _dart_SwitchToThread = int Function();

typedef LPTHREAD_START_ROUTINE = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_CreateThread = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpThreadAttributes,
  ffi.Uint64 dwStackSize,
  ffi.Pointer<ffi.NativeFunction<LPTHREAD_START_ROUTINE>> lpStartAddress,
  ffi.Pointer<ffi.Void> lpParameter,
  ffi.Uint64 dwCreationFlags,
  ffi.Pointer<ffi.Uint64> lpThreadId,
);

typedef _dart_CreateThread = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpThreadAttributes,
  int dwStackSize,
  ffi.Pointer<ffi.NativeFunction<LPTHREAD_START_ROUTINE>> lpStartAddress,
  ffi.Pointer<ffi.Void> lpParameter,
  int dwCreationFlags,
  ffi.Pointer<ffi.Uint64> lpThreadId,
);

typedef _c_CreateRemoteThread = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpThreadAttributes,
  ffi.Uint64 dwStackSize,
  ffi.Pointer<ffi.NativeFunction<LPTHREAD_START_ROUTINE>> lpStartAddress,
  ffi.Pointer<ffi.Void> lpParameter,
  ffi.Uint64 dwCreationFlags,
  ffi.Pointer<ffi.Uint64> lpThreadId,
);

typedef _dart_CreateRemoteThread = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpThreadAttributes,
  int dwStackSize,
  ffi.Pointer<ffi.NativeFunction<LPTHREAD_START_ROUTINE>> lpStartAddress,
  ffi.Pointer<ffi.Void> lpParameter,
  int dwCreationFlags,
  ffi.Pointer<ffi.Uint64> lpThreadId,
);

typedef _c_GetCurrentThread = ffi.Pointer<ffi.Void> Function();

typedef _dart_GetCurrentThread = ffi.Pointer<ffi.Void> Function();

typedef _c_GetCurrentThreadId = ffi.Uint64 Function();

typedef _dart_GetCurrentThreadId = int Function();

typedef _c_OpenThread = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 dwDesiredAccess,
  ffi.Int32 bInheritHandle,
  ffi.Uint64 dwThreadId,
);

typedef _dart_OpenThread = ffi.Pointer<ffi.Void> Function(
  int dwDesiredAccess,
  int bInheritHandle,
  int dwThreadId,
);

typedef _c_SetThreadPriority = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hThread,
  ffi.Int32 nPriority,
);

typedef _dart_SetThreadPriority = int Function(
  ffi.Pointer<ffi.Void> hThread,
  int nPriority,
);

typedef _c_SetThreadPriorityBoost = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hThread,
  ffi.Int32 bDisablePriorityBoost,
);

typedef _dart_SetThreadPriorityBoost = int Function(
  ffi.Pointer<ffi.Void> hThread,
  int bDisablePriorityBoost,
);

typedef _c_GetThreadPriorityBoost = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hThread,
  ffi.Pointer<ffi.Int32> pDisablePriorityBoost,
);

typedef _dart_GetThreadPriorityBoost = int Function(
  ffi.Pointer<ffi.Void> hThread,
  ffi.Pointer<ffi.Int32> pDisablePriorityBoost,
);

typedef _c_GetThreadPriority = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hThread,
);

typedef _dart_GetThreadPriority = int Function(
  ffi.Pointer<ffi.Void> hThread,
);

typedef _c_ExitThread = ffi.Void Function(
  ffi.Uint64 dwExitCode,
);

typedef _dart_ExitThread = void Function(
  int dwExitCode,
);

typedef _c_TerminateThread = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hThread,
  ffi.Uint64 dwExitCode,
);

typedef _dart_TerminateThread = int Function(
  ffi.Pointer<ffi.Void> hThread,
  int dwExitCode,
);

typedef _c_GetExitCodeThread = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hThread,
  ffi.Pointer<ffi.Uint64> lpExitCode,
);

typedef _dart_GetExitCodeThread = int Function(
  ffi.Pointer<ffi.Void> hThread,
  ffi.Pointer<ffi.Uint64> lpExitCode,
);

typedef _c_SuspendThread = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> hThread,
);

typedef _dart_SuspendThread = int Function(
  ffi.Pointer<ffi.Void> hThread,
);

typedef _c_ResumeThread = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> hThread,
);

typedef _dart_ResumeThread = int Function(
  ffi.Pointer<ffi.Void> hThread,
);

typedef _c_TlsAlloc = ffi.Uint64 Function();

typedef _dart_TlsAlloc = int Function();

typedef _c_TlsGetValue = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 dwTlsIndex,
);

typedef _dart_TlsGetValue = ffi.Pointer<ffi.Void> Function(
  int dwTlsIndex,
);

typedef _c_TlsSetValue = ffi.Int32 Function(
  ffi.Uint64 dwTlsIndex,
  ffi.Pointer<ffi.Void> lpTlsValue,
);

typedef _dart_TlsSetValue = int Function(
  int dwTlsIndex,
  ffi.Pointer<ffi.Void> lpTlsValue,
);

typedef _c_TlsFree = ffi.Int32 Function(
  ffi.Uint64 dwTlsIndex,
);

typedef _dart_TlsFree = int Function(
  int dwTlsIndex,
);

typedef _c_CreateProcessA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpApplicationName,
  ffi.Pointer<ffi.Int8> lpCommandLine,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpProcessAttributes,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpThreadAttributes,
  ffi.Int32 bInheritHandles,
  ffi.Uint64 dwCreationFlags,
  ffi.Pointer<ffi.Void> lpEnvironment,
  ffi.Pointer<ffi.Int8> lpCurrentDirectory,
  ffi.Pointer<LPSTARTUPINFOA> lpStartupInfo,
  ffi.Pointer<LPPROCESS_INFORMATION> lpProcessInformation,
);

typedef _dart_CreateProcessA = int Function(
  ffi.Pointer<ffi.Int8> lpApplicationName,
  ffi.Pointer<ffi.Int8> lpCommandLine,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpProcessAttributes,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpThreadAttributes,
  int bInheritHandles,
  int dwCreationFlags,
  ffi.Pointer<ffi.Void> lpEnvironment,
  ffi.Pointer<ffi.Int8> lpCurrentDirectory,
  ffi.Pointer<LPSTARTUPINFOA> lpStartupInfo,
  ffi.Pointer<LPPROCESS_INFORMATION> lpProcessInformation,
);

typedef _c_CreateProcessW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpApplicationName,
  ffi.Pointer<ffi.Uint16> lpCommandLine,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpProcessAttributes,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpThreadAttributes,
  ffi.Int32 bInheritHandles,
  ffi.Uint64 dwCreationFlags,
  ffi.Pointer<ffi.Void> lpEnvironment,
  ffi.Pointer<ffi.Uint16> lpCurrentDirectory,
  ffi.Pointer<LPSTARTUPINFOW> lpStartupInfo,
  ffi.Pointer<LPPROCESS_INFORMATION> lpProcessInformation,
);

typedef _dart_CreateProcessW = int Function(
  ffi.Pointer<ffi.Uint16> lpApplicationName,
  ffi.Pointer<ffi.Uint16> lpCommandLine,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpProcessAttributes,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpThreadAttributes,
  int bInheritHandles,
  int dwCreationFlags,
  ffi.Pointer<ffi.Void> lpEnvironment,
  ffi.Pointer<ffi.Uint16> lpCurrentDirectory,
  ffi.Pointer<LPSTARTUPINFOW> lpStartupInfo,
  ffi.Pointer<LPPROCESS_INFORMATION> lpProcessInformation,
);

typedef _c_SetProcessShutdownParameters = ffi.Int32 Function(
  ffi.Uint64 dwLevel,
  ffi.Uint64 dwFlags,
);

typedef _dart_SetProcessShutdownParameters = int Function(
  int dwLevel,
  int dwFlags,
);

typedef _c_GetProcessVersion = ffi.Uint64 Function(
  ffi.Uint64 ProcessId,
);

typedef _dart_GetProcessVersion = int Function(
  int ProcessId,
);

typedef _c_GetStartupInfoW = ffi.Void Function(
  ffi.Pointer<LPSTARTUPINFOW> lpStartupInfo,
);

typedef _dart_GetStartupInfoW = void Function(
  ffi.Pointer<LPSTARTUPINFOW> lpStartupInfo,
);

typedef _c_CreateProcessAsUserW = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hToken,
  ffi.Pointer<ffi.Uint16> lpApplicationName,
  ffi.Pointer<ffi.Uint16> lpCommandLine,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpProcessAttributes,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpThreadAttributes,
  ffi.Int32 bInheritHandles,
  ffi.Uint64 dwCreationFlags,
  ffi.Pointer<ffi.Void> lpEnvironment,
  ffi.Pointer<ffi.Uint16> lpCurrentDirectory,
  ffi.Pointer<LPSTARTUPINFOW> lpStartupInfo,
  ffi.Pointer<LPPROCESS_INFORMATION> lpProcessInformation,
);

typedef _dart_CreateProcessAsUserW = int Function(
  ffi.Pointer<ffi.Void> hToken,
  ffi.Pointer<ffi.Uint16> lpApplicationName,
  ffi.Pointer<ffi.Uint16> lpCommandLine,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpProcessAttributes,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpThreadAttributes,
  int bInheritHandles,
  int dwCreationFlags,
  ffi.Pointer<ffi.Void> lpEnvironment,
  ffi.Pointer<ffi.Uint16> lpCurrentDirectory,
  ffi.Pointer<LPSTARTUPINFOW> lpStartupInfo,
  ffi.Pointer<LPPROCESS_INFORMATION> lpProcessInformation,
);

typedef _c_GetCurrentProcessToken = ffi.Pointer<ffi.Void> Function();

typedef _dart_GetCurrentProcessToken = ffi.Pointer<ffi.Void> Function();

typedef _c_GetCurrentThreadToken = ffi.Pointer<ffi.Void> Function();

typedef _dart_GetCurrentThreadToken = ffi.Pointer<ffi.Void> Function();

typedef _c_GetCurrentThreadEffectiveToken = ffi.Pointer<ffi.Void> Function();

typedef _dart_GetCurrentThreadEffectiveToken = ffi.Pointer<ffi.Void> Function();

typedef _c_SetThreadToken = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> Thread,
  ffi.Pointer<ffi.Void> Token,
);

typedef _dart_SetThreadToken = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> Thread,
  ffi.Pointer<ffi.Void> Token,
);

typedef _c_OpenProcessToken = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> ProcessHandle,
  ffi.Uint64 DesiredAccess,
  ffi.Pointer<ffi.Pointer<ffi.Void>> TokenHandle,
);

typedef _dart_OpenProcessToken = int Function(
  ffi.Pointer<ffi.Void> ProcessHandle,
  int DesiredAccess,
  ffi.Pointer<ffi.Pointer<ffi.Void>> TokenHandle,
);

typedef _c_OpenThreadToken = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> ThreadHandle,
  ffi.Uint64 DesiredAccess,
  ffi.Int32 OpenAsSelf,
  ffi.Pointer<ffi.Pointer<ffi.Void>> TokenHandle,
);

typedef _dart_OpenThreadToken = int Function(
  ffi.Pointer<ffi.Void> ThreadHandle,
  int DesiredAccess,
  int OpenAsSelf,
  ffi.Pointer<ffi.Pointer<ffi.Void>> TokenHandle,
);

typedef _c_SetPriorityClass = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Uint64 dwPriorityClass,
);

typedef _dart_SetPriorityClass = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  int dwPriorityClass,
);

typedef _c_GetPriorityClass = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> hProcess,
);

typedef _dart_GetPriorityClass = int Function(
  ffi.Pointer<ffi.Void> hProcess,
);

typedef _c_SetThreadStackGuarantee = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> StackSizeInBytes,
);

typedef _dart_SetThreadStackGuarantee = int Function(
  ffi.Pointer<ffi.Uint64> StackSizeInBytes,
);

typedef _c_ProcessIdToSessionId = ffi.Int32 Function(
  ffi.Uint64 dwProcessId,
  ffi.Pointer<ffi.Uint64> pSessionId,
);

typedef _dart_ProcessIdToSessionId = int Function(
  int dwProcessId,
  ffi.Pointer<ffi.Uint64> pSessionId,
);

typedef _c_GetProcessId = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> Process,
);

typedef _dart_GetProcessId = int Function(
  ffi.Pointer<ffi.Void> Process,
);

typedef _c_GetThreadId = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> Thread,
);

typedef _dart_GetThreadId = int Function(
  ffi.Pointer<ffi.Void> Thread,
);

typedef _c_FlushProcessWriteBuffers = ffi.Void Function();

typedef _dart_FlushProcessWriteBuffers = void Function();

typedef _c_GetProcessIdOfThread = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> Thread,
);

typedef _dart_GetProcessIdOfThread = int Function(
  ffi.Pointer<ffi.Void> Thread,
);

typedef _c_InitializeProcThreadAttributeList = ffi.Int32 Function(
  ffi.Pointer<_PROC_THREAD_ATTRIBUTE_LIST> lpAttributeList,
  ffi.Uint64 dwAttributeCount,
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Uint64> lpSize,
);

typedef _dart_InitializeProcThreadAttributeList = int Function(
  ffi.Pointer<_PROC_THREAD_ATTRIBUTE_LIST> lpAttributeList,
  int dwAttributeCount,
  int dwFlags,
  ffi.Pointer<ffi.Uint64> lpSize,
);

typedef _c_DeleteProcThreadAttributeList = ffi.Void Function(
  ffi.Pointer<_PROC_THREAD_ATTRIBUTE_LIST> lpAttributeList,
);

typedef _dart_DeleteProcThreadAttributeList = void Function(
  ffi.Pointer<_PROC_THREAD_ATTRIBUTE_LIST> lpAttributeList,
);

typedef _c_UpdateProcThreadAttribute = ffi.Int32 Function(
  ffi.Pointer<_PROC_THREAD_ATTRIBUTE_LIST> lpAttributeList,
  ffi.Uint64 dwFlags,
  ffi.Uint64 Attribute,
  ffi.Pointer<ffi.Void> lpValue,
  ffi.Uint64 cbSize,
  ffi.Pointer<ffi.Void> lpPreviousValue,
  ffi.Pointer<ffi.Uint64> lpReturnSize,
);

typedef _dart_UpdateProcThreadAttribute = int Function(
  ffi.Pointer<_PROC_THREAD_ATTRIBUTE_LIST> lpAttributeList,
  int dwFlags,
  int Attribute,
  ffi.Pointer<ffi.Void> lpValue,
  int cbSize,
  ffi.Pointer<ffi.Void> lpPreviousValue,
  ffi.Pointer<ffi.Uint64> lpReturnSize,
);

typedef _c_SetProcessDynamicEHContinuationTargets = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> Process,
  ffi.Uint16 NumberOfTargets,
  ffi.Pointer<PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET> Targets,
);

typedef _dart_SetProcessDynamicEHContinuationTargets = int Function(
  ffi.Pointer<ffi.Void> Process,
  int NumberOfTargets,
  ffi.Pointer<PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET> Targets,
);

typedef _c_SetProcessDynamicEnforcedCetCompatibleRanges = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> Process,
  ffi.Uint16 NumberOfRanges,
  ffi.Pointer<PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE> Ranges,
);

typedef _dart_SetProcessDynamicEnforcedCetCompatibleRanges = int Function(
  ffi.Pointer<ffi.Void> Process,
  int NumberOfRanges,
  ffi.Pointer<PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE> Ranges,
);

typedef _c_SetProcessAffinityUpdateMode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Uint64 dwFlags,
);

typedef _dart_SetProcessAffinityUpdateMode = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  int dwFlags,
);

typedef _c_QueryProcessAffinityUpdateMode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Uint64> lpdwFlags,
);

typedef _dart_QueryProcessAffinityUpdateMode = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Uint64> lpdwFlags,
);

typedef _c_CreateRemoteThreadEx = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpThreadAttributes,
  ffi.Uint64 dwStackSize,
  ffi.Pointer<ffi.NativeFunction<LPTHREAD_START_ROUTINE>> lpStartAddress,
  ffi.Pointer<ffi.Void> lpParameter,
  ffi.Uint64 dwCreationFlags,
  ffi.Pointer<_PROC_THREAD_ATTRIBUTE_LIST> lpAttributeList,
  ffi.Pointer<ffi.Uint64> lpThreadId,
);

typedef _dart_CreateRemoteThreadEx = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpThreadAttributes,
  int dwStackSize,
  ffi.Pointer<ffi.NativeFunction<LPTHREAD_START_ROUTINE>> lpStartAddress,
  ffi.Pointer<ffi.Void> lpParameter,
  int dwCreationFlags,
  ffi.Pointer<_PROC_THREAD_ATTRIBUTE_LIST> lpAttributeList,
  ffi.Pointer<ffi.Uint64> lpThreadId,
);

typedef _c_GetCurrentThreadStackLimits = ffi.Void Function(
  ffi.Pointer<ffi.Uint64> LowLimit,
  ffi.Pointer<ffi.Uint64> HighLimit,
);

typedef _dart_GetCurrentThreadStackLimits = void Function(
  ffi.Pointer<ffi.Uint64> LowLimit,
  ffi.Pointer<ffi.Uint64> HighLimit,
);

typedef _c_GetThreadContext = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hThread,
  ffi.Pointer<PCONTEXT> lpContext,
);

typedef _dart_GetThreadContext = int Function(
  ffi.Pointer<ffi.Void> hThread,
  ffi.Pointer<PCONTEXT> lpContext,
);

typedef _c_GetProcessMitigationPolicy = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Int32 MitigationPolicy,
  ffi.Pointer<ffi.Void> lpBuffer,
  ffi.Uint64 dwLength,
);

typedef _dart_GetProcessMitigationPolicy = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  int MitigationPolicy,
  ffi.Pointer<ffi.Void> lpBuffer,
  int dwLength,
);

typedef _c_SetThreadContext = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hThread,
  ffi.Pointer<PCONTEXT> lpContext,
);

typedef _dart_SetThreadContext = int Function(
  ffi.Pointer<ffi.Void> hThread,
  ffi.Pointer<PCONTEXT> lpContext,
);

typedef _c_SetProcessMitigationPolicy = ffi.Int32 Function(
  ffi.Int32 MitigationPolicy,
  ffi.Pointer<ffi.Void> lpBuffer,
  ffi.Uint64 dwLength,
);

typedef _dart_SetProcessMitigationPolicy = int Function(
  int MitigationPolicy,
  ffi.Pointer<ffi.Void> lpBuffer,
  int dwLength,
);

typedef _c_FlushInstructionCache = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Void> lpBaseAddress,
  ffi.Uint64 dwSize,
);

typedef _dart_FlushInstructionCache = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Void> lpBaseAddress,
  int dwSize,
);

typedef _c_GetThreadTimes = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hThread,
  ffi.Pointer<LPFILETIME> lpCreationTime,
  ffi.Pointer<LPFILETIME> lpExitTime,
  ffi.Pointer<LPFILETIME> lpKernelTime,
  ffi.Pointer<LPFILETIME> lpUserTime,
);

typedef _dart_GetThreadTimes = int Function(
  ffi.Pointer<ffi.Void> hThread,
  ffi.Pointer<LPFILETIME> lpCreationTime,
  ffi.Pointer<LPFILETIME> lpExitTime,
  ffi.Pointer<LPFILETIME> lpKernelTime,
  ffi.Pointer<LPFILETIME> lpUserTime,
);

typedef _c_OpenProcess = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 dwDesiredAccess,
  ffi.Int32 bInheritHandle,
  ffi.Uint64 dwProcessId,
);

typedef _dart_OpenProcess = ffi.Pointer<ffi.Void> Function(
  int dwDesiredAccess,
  int bInheritHandle,
  int dwProcessId,
);

typedef _c_IsProcessorFeaturePresent = ffi.Int32 Function(
  ffi.Uint64 ProcessorFeature,
);

typedef _dart_IsProcessorFeaturePresent = int Function(
  int ProcessorFeature,
);

typedef _c_GetProcessHandleCount = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Uint64> pdwHandleCount,
);

typedef _dart_GetProcessHandleCount = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Uint64> pdwHandleCount,
);

typedef _c_GetCurrentProcessorNumber = ffi.Uint64 Function();

typedef _dart_GetCurrentProcessorNumber = int Function();

typedef _c_SetThreadIdealProcessorEx = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hThread,
  ffi.Pointer<PPROCESSOR_NUMBER> lpIdealProcessor,
  ffi.Pointer<PPROCESSOR_NUMBER> lpPreviousIdealProcessor,
);

typedef _dart_SetThreadIdealProcessorEx = int Function(
  ffi.Pointer<ffi.Void> hThread,
  ffi.Pointer<PPROCESSOR_NUMBER> lpIdealProcessor,
  ffi.Pointer<PPROCESSOR_NUMBER> lpPreviousIdealProcessor,
);

typedef _c_GetThreadIdealProcessorEx = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hThread,
  ffi.Pointer<PPROCESSOR_NUMBER> lpIdealProcessor,
);

typedef _dart_GetThreadIdealProcessorEx = int Function(
  ffi.Pointer<ffi.Void> hThread,
  ffi.Pointer<PPROCESSOR_NUMBER> lpIdealProcessor,
);

typedef _c_GetCurrentProcessorNumberEx = ffi.Void Function(
  ffi.Pointer<PPROCESSOR_NUMBER> ProcNumber,
);

typedef _dart_GetCurrentProcessorNumberEx = void Function(
  ffi.Pointer<PPROCESSOR_NUMBER> ProcNumber,
);

typedef _c_GetProcessPriorityBoost = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Int32> pDisablePriorityBoost,
);

typedef _dart_GetProcessPriorityBoost = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Int32> pDisablePriorityBoost,
);

typedef _c_SetProcessPriorityBoost = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Int32 bDisablePriorityBoost,
);

typedef _dart_SetProcessPriorityBoost = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  int bDisablePriorityBoost,
);

typedef _c_GetThreadIOPendingFlag = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hThread,
  ffi.Pointer<ffi.Int32> lpIOIsPending,
);

typedef _dart_GetThreadIOPendingFlag = int Function(
  ffi.Pointer<ffi.Void> hThread,
  ffi.Pointer<ffi.Int32> lpIOIsPending,
);

typedef _c_GetSystemTimes = ffi.Int32 Function(
  ffi.Pointer<LPFILETIME> lpIdleTime,
  ffi.Pointer<LPFILETIME> lpKernelTime,
  ffi.Pointer<LPFILETIME> lpUserTime,
);

typedef _dart_GetSystemTimes = int Function(
  ffi.Pointer<LPFILETIME> lpIdleTime,
  ffi.Pointer<LPFILETIME> lpKernelTime,
  ffi.Pointer<LPFILETIME> lpUserTime,
);

typedef _c_GetThreadInformation = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hThread,
  ffi.Int32 ThreadInformationClass,
  ffi.Pointer<ffi.Void> ThreadInformation,
  ffi.Uint64 ThreadInformationSize,
);

typedef _dart_GetThreadInformation = int Function(
  ffi.Pointer<ffi.Void> hThread,
  int ThreadInformationClass,
  ffi.Pointer<ffi.Void> ThreadInformation,
  int ThreadInformationSize,
);

typedef _c_SetThreadInformation = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hThread,
  ffi.Int32 ThreadInformationClass,
  ffi.Pointer<ffi.Void> ThreadInformation,
  ffi.Uint64 ThreadInformationSize,
);

typedef _dart_SetThreadInformation = int Function(
  ffi.Pointer<ffi.Void> hThread,
  int ThreadInformationClass,
  ffi.Pointer<ffi.Void> ThreadInformation,
  int ThreadInformationSize,
);

typedef _c_IsProcessCritical = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Int32> Critical,
);

typedef _dart_IsProcessCritical = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Int32> Critical,
);

typedef _c_SetProtectedPolicy = ffi.Int32 Function(
  ffi.Pointer<GUID> PolicyGuid,
  ffi.Uint64 PolicyValue,
  ffi.Pointer<ffi.Uint64> OldPolicyValue,
);

typedef _dart_SetProtectedPolicy = int Function(
  ffi.Pointer<GUID> PolicyGuid,
  int PolicyValue,
  ffi.Pointer<ffi.Uint64> OldPolicyValue,
);

typedef _c_QueryProtectedPolicy = ffi.Int32 Function(
  ffi.Pointer<GUID> PolicyGuid,
  ffi.Pointer<ffi.Uint64> PolicyValue,
);

typedef _dart_QueryProtectedPolicy = int Function(
  ffi.Pointer<GUID> PolicyGuid,
  ffi.Pointer<ffi.Uint64> PolicyValue,
);

typedef _c_SetThreadIdealProcessor = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> hThread,
  ffi.Uint64 dwIdealProcessor,
);

typedef _dart_SetThreadIdealProcessor = int Function(
  ffi.Pointer<ffi.Void> hThread,
  int dwIdealProcessor,
);

typedef _c_SetProcessInformation = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Int32 ProcessInformationClass,
  ffi.Pointer<ffi.Void> ProcessInformation,
  ffi.Uint64 ProcessInformationSize,
);

typedef _dart_SetProcessInformation = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  int ProcessInformationClass,
  ffi.Pointer<ffi.Void> ProcessInformation,
  int ProcessInformationSize,
);

typedef _c_GetProcessInformation = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Int32 ProcessInformationClass,
  ffi.Pointer<ffi.Void> ProcessInformation,
  ffi.Uint64 ProcessInformationSize,
);

typedef _dart_GetProcessInformation = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  int ProcessInformationClass,
  ffi.Pointer<ffi.Void> ProcessInformation,
  int ProcessInformationSize,
);

typedef _c_GetSystemCpuSetInformation = ffi.Int32 Function(
  ffi.Pointer<_SYSTEM_CPU_SET_INFORMATION> Information,
  ffi.Uint64 BufferLength,
  ffi.Pointer<ffi.Uint64> ReturnedLength,
  ffi.Pointer<ffi.Void> Process,
  ffi.Uint64 Flags,
);

typedef _dart_GetSystemCpuSetInformation = int Function(
  ffi.Pointer<_SYSTEM_CPU_SET_INFORMATION> Information,
  int BufferLength,
  ffi.Pointer<ffi.Uint64> ReturnedLength,
  ffi.Pointer<ffi.Void> Process,
  int Flags,
);

typedef _c_GetProcessDefaultCpuSets = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> Process,
  ffi.Pointer<ffi.Uint64> CpuSetIds,
  ffi.Uint64 CpuSetIdCount,
  ffi.Pointer<ffi.Uint64> RequiredIdCount,
);

typedef _dart_GetProcessDefaultCpuSets = int Function(
  ffi.Pointer<ffi.Void> Process,
  ffi.Pointer<ffi.Uint64> CpuSetIds,
  int CpuSetIdCount,
  ffi.Pointer<ffi.Uint64> RequiredIdCount,
);

typedef _c_SetProcessDefaultCpuSets = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> Process,
  ffi.Pointer<ffi.Uint64> CpuSetIds,
  ffi.Uint64 CpuSetIdCount,
);

typedef _dart_SetProcessDefaultCpuSets = int Function(
  ffi.Pointer<ffi.Void> Process,
  ffi.Pointer<ffi.Uint64> CpuSetIds,
  int CpuSetIdCount,
);

typedef _c_GetThreadSelectedCpuSets = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> Thread,
  ffi.Pointer<ffi.Uint64> CpuSetIds,
  ffi.Uint64 CpuSetIdCount,
  ffi.Pointer<ffi.Uint64> RequiredIdCount,
);

typedef _dart_GetThreadSelectedCpuSets = int Function(
  ffi.Pointer<ffi.Void> Thread,
  ffi.Pointer<ffi.Uint64> CpuSetIds,
  int CpuSetIdCount,
  ffi.Pointer<ffi.Uint64> RequiredIdCount,
);

typedef _c_SetThreadSelectedCpuSets = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> Thread,
  ffi.Pointer<ffi.Uint64> CpuSetIds,
  ffi.Uint64 CpuSetIdCount,
);

typedef _dart_SetThreadSelectedCpuSets = int Function(
  ffi.Pointer<ffi.Void> Thread,
  ffi.Pointer<ffi.Uint64> CpuSetIds,
  int CpuSetIdCount,
);

typedef _c_CreateProcessAsUserA = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hToken,
  ffi.Pointer<ffi.Int8> lpApplicationName,
  ffi.Pointer<ffi.Int8> lpCommandLine,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpProcessAttributes,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpThreadAttributes,
  ffi.Int32 bInheritHandles,
  ffi.Uint64 dwCreationFlags,
  ffi.Pointer<ffi.Void> lpEnvironment,
  ffi.Pointer<ffi.Int8> lpCurrentDirectory,
  ffi.Pointer<LPSTARTUPINFOA> lpStartupInfo,
  ffi.Pointer<LPPROCESS_INFORMATION> lpProcessInformation,
);

typedef _dart_CreateProcessAsUserA = int Function(
  ffi.Pointer<ffi.Void> hToken,
  ffi.Pointer<ffi.Int8> lpApplicationName,
  ffi.Pointer<ffi.Int8> lpCommandLine,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpProcessAttributes,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpThreadAttributes,
  int bInheritHandles,
  int dwCreationFlags,
  ffi.Pointer<ffi.Void> lpEnvironment,
  ffi.Pointer<ffi.Int8> lpCurrentDirectory,
  ffi.Pointer<LPSTARTUPINFOA> lpStartupInfo,
  ffi.Pointer<LPPROCESS_INFORMATION> lpProcessInformation,
);

typedef _c_GetProcessShutdownParameters = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> lpdwLevel,
  ffi.Pointer<ffi.Uint64> lpdwFlags,
);

typedef _dart_GetProcessShutdownParameters = int Function(
  ffi.Pointer<ffi.Uint64> lpdwLevel,
  ffi.Pointer<ffi.Uint64> lpdwFlags,
);

typedef _c_SetThreadDescription = ffi.Int64 Function(
  ffi.Pointer<ffi.Void> hThread,
  ffi.Pointer<ffi.Uint16> lpThreadDescription,
);

typedef _dart_SetThreadDescription = int Function(
  ffi.Pointer<ffi.Void> hThread,
  ffi.Pointer<ffi.Uint16> lpThreadDescription,
);

typedef _c_GetThreadDescription = ffi.Int64 Function(
  ffi.Pointer<ffi.Void> hThread,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> ppszThreadDescription,
);

typedef _dart_GetThreadDescription = int Function(
  ffi.Pointer<ffi.Void> hThread,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> ppszThreadDescription,
);

typedef _c_GlobalMemoryStatusEx = ffi.Int32 Function(
  ffi.Pointer<LPMEMORYSTATUSEX> lpBuffer,
);

typedef _dart_GlobalMemoryStatusEx = int Function(
  ffi.Pointer<LPMEMORYSTATUSEX> lpBuffer,
);

typedef _c_GetSystemInfo = ffi.Void Function(
  ffi.Pointer<LPSYSTEM_INFO> lpSystemInfo,
);

typedef _dart_GetSystemInfo = void Function(
  ffi.Pointer<LPSYSTEM_INFO> lpSystemInfo,
);

typedef _c_GetSystemTime = ffi.Void Function(
  ffi.Pointer<LPSYSTEMTIME> lpSystemTime,
);

typedef _dart_GetSystemTime = void Function(
  ffi.Pointer<LPSYSTEMTIME> lpSystemTime,
);

typedef _c_GetSystemTimeAsFileTime = ffi.Void Function(
  ffi.Pointer<LPFILETIME> lpSystemTimeAsFileTime,
);

typedef _dart_GetSystemTimeAsFileTime = void Function(
  ffi.Pointer<LPFILETIME> lpSystemTimeAsFileTime,
);

typedef _c_GetLocalTime = ffi.Void Function(
  ffi.Pointer<LPSYSTEMTIME> lpSystemTime,
);

typedef _dart_GetLocalTime = void Function(
  ffi.Pointer<LPSYSTEMTIME> lpSystemTime,
);

typedef _c_IsUserCetAvailableInEnvironment = ffi.Int32 Function(
  ffi.Uint64 UserCetEnvironment,
);

typedef _dart_IsUserCetAvailableInEnvironment = int Function(
  int UserCetEnvironment,
);

typedef _c_GetSystemLeapSecondInformation = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> Enabled,
  ffi.Pointer<ffi.Uint64> Flags,
);

typedef _dart_GetSystemLeapSecondInformation = int Function(
  ffi.Pointer<ffi.Int32> Enabled,
  ffi.Pointer<ffi.Uint64> Flags,
);

typedef _c_GetVersion = ffi.Uint64 Function();

typedef _dart_GetVersion = int Function();

typedef _c_SetLocalTime = ffi.Int32 Function(
  ffi.Pointer<LPSYSTEMTIME> lpSystemTime,
);

typedef _dart_SetLocalTime = int Function(
  ffi.Pointer<LPSYSTEMTIME> lpSystemTime,
);

typedef _c_GetTickCount = ffi.Uint64 Function();

typedef _dart_GetTickCount = int Function();

typedef _c_GetTickCount64 = ffi.Uint64 Function();

typedef _dart_GetTickCount64 = int Function();

typedef _c_GetSystemTimeAdjustment = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> lpTimeAdjustment,
  ffi.Pointer<ffi.Uint64> lpTimeIncrement,
  ffi.Pointer<ffi.Int32> lpTimeAdjustmentDisabled,
);

typedef _dart_GetSystemTimeAdjustment = int Function(
  ffi.Pointer<ffi.Uint64> lpTimeAdjustment,
  ffi.Pointer<ffi.Uint64> lpTimeIncrement,
  ffi.Pointer<ffi.Int32> lpTimeAdjustmentDisabled,
);

typedef _c_GetSystemTimeAdjustmentPrecise = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> lpTimeAdjustment,
  ffi.Pointer<ffi.Uint64> lpTimeIncrement,
  ffi.Pointer<ffi.Int32> lpTimeAdjustmentDisabled,
);

typedef _dart_GetSystemTimeAdjustmentPrecise = int Function(
  ffi.Pointer<ffi.Uint64> lpTimeAdjustment,
  ffi.Pointer<ffi.Uint64> lpTimeIncrement,
  ffi.Pointer<ffi.Int32> lpTimeAdjustmentDisabled,
);

typedef _c_GetSystemDirectoryA = ffi.Uint32 Function(
  ffi.Pointer<ffi.Int8> lpBuffer,
  ffi.Uint32 uSize,
);

typedef _dart_GetSystemDirectoryA = int Function(
  ffi.Pointer<ffi.Int8> lpBuffer,
  int uSize,
);

typedef _c_GetSystemDirectoryW = ffi.Uint32 Function(
  ffi.Pointer<ffi.Uint16> lpBuffer,
  ffi.Uint32 uSize,
);

typedef _dart_GetSystemDirectoryW = int Function(
  ffi.Pointer<ffi.Uint16> lpBuffer,
  int uSize,
);

typedef _c_GetWindowsDirectoryA = ffi.Uint32 Function(
  ffi.Pointer<ffi.Int8> lpBuffer,
  ffi.Uint32 uSize,
);

typedef _dart_GetWindowsDirectoryA = int Function(
  ffi.Pointer<ffi.Int8> lpBuffer,
  int uSize,
);

typedef _c_GetWindowsDirectoryW = ffi.Uint32 Function(
  ffi.Pointer<ffi.Uint16> lpBuffer,
  ffi.Uint32 uSize,
);

typedef _dart_GetWindowsDirectoryW = int Function(
  ffi.Pointer<ffi.Uint16> lpBuffer,
  int uSize,
);

typedef _c_GetSystemWindowsDirectoryA = ffi.Uint32 Function(
  ffi.Pointer<ffi.Int8> lpBuffer,
  ffi.Uint32 uSize,
);

typedef _dart_GetSystemWindowsDirectoryA = int Function(
  ffi.Pointer<ffi.Int8> lpBuffer,
  int uSize,
);

typedef _c_GetSystemWindowsDirectoryW = ffi.Uint32 Function(
  ffi.Pointer<ffi.Uint16> lpBuffer,
  ffi.Uint32 uSize,
);

typedef _dart_GetSystemWindowsDirectoryW = int Function(
  ffi.Pointer<ffi.Uint16> lpBuffer,
  int uSize,
);

typedef _c_GetComputerNameExA = ffi.Int32 Function(
  ffi.Int32 NameType,
  ffi.Pointer<ffi.Int8> lpBuffer,
  ffi.Pointer<ffi.Uint64> nSize,
);

typedef _dart_GetComputerNameExA = int Function(
  int NameType,
  ffi.Pointer<ffi.Int8> lpBuffer,
  ffi.Pointer<ffi.Uint64> nSize,
);

typedef _c_GetComputerNameExW = ffi.Int32 Function(
  ffi.Int32 NameType,
  ffi.Pointer<ffi.Uint16> lpBuffer,
  ffi.Pointer<ffi.Uint64> nSize,
);

typedef _dart_GetComputerNameExW = int Function(
  int NameType,
  ffi.Pointer<ffi.Uint16> lpBuffer,
  ffi.Pointer<ffi.Uint64> nSize,
);

typedef _c_SetComputerNameExW = ffi.Int32 Function(
  ffi.Int32 NameType,
  ffi.Pointer<ffi.Uint16> lpBuffer,
);

typedef _dart_SetComputerNameExW = int Function(
  int NameType,
  ffi.Pointer<ffi.Uint16> lpBuffer,
);

typedef _c_SetSystemTime = ffi.Int32 Function(
  ffi.Pointer<LPSYSTEMTIME> lpSystemTime,
);

typedef _dart_SetSystemTime = int Function(
  ffi.Pointer<LPSYSTEMTIME> lpSystemTime,
);

typedef _c_GetVersionExA = ffi.Int32 Function(
  ffi.Pointer<LPOSVERSIONINFOA> lpVersionInformation,
);

typedef _dart_GetVersionExA = int Function(
  ffi.Pointer<LPOSVERSIONINFOA> lpVersionInformation,
);

typedef _c_GetVersionExW = ffi.Int32 Function(
  ffi.Pointer<PRTL_OSVERSIONINFOW> lpVersionInformation,
);

typedef _dart_GetVersionExW = int Function(
  ffi.Pointer<PRTL_OSVERSIONINFOW> lpVersionInformation,
);

typedef _c_GetLogicalProcessorInformation = ffi.Int32 Function(
  ffi.Pointer<PSYSTEM_LOGICAL_PROCESSOR_INFORMATION> Buffer,
  ffi.Pointer<ffi.Uint64> ReturnedLength,
);

typedef _dart_GetLogicalProcessorInformation = int Function(
  ffi.Pointer<PSYSTEM_LOGICAL_PROCESSOR_INFORMATION> Buffer,
  ffi.Pointer<ffi.Uint64> ReturnedLength,
);

typedef _c_GetLogicalProcessorInformationEx = ffi.Int32 Function(
  ffi.Int32 RelationshipType,
  ffi.Pointer<_SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX> Buffer,
  ffi.Pointer<ffi.Uint64> ReturnedLength,
);

typedef _dart_GetLogicalProcessorInformationEx = int Function(
  int RelationshipType,
  ffi.Pointer<_SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX> Buffer,
  ffi.Pointer<ffi.Uint64> ReturnedLength,
);

typedef _c_GetNativeSystemInfo = ffi.Void Function(
  ffi.Pointer<LPSYSTEM_INFO> lpSystemInfo,
);

typedef _dart_GetNativeSystemInfo = void Function(
  ffi.Pointer<LPSYSTEM_INFO> lpSystemInfo,
);

typedef _c_GetSystemTimePreciseAsFileTime = ffi.Void Function(
  ffi.Pointer<LPFILETIME> lpSystemTimeAsFileTime,
);

typedef _dart_GetSystemTimePreciseAsFileTime = void Function(
  ffi.Pointer<LPFILETIME> lpSystemTimeAsFileTime,
);

typedef _c_GetProductInfo = ffi.Int32 Function(
  ffi.Uint64 dwOSMajorVersion,
  ffi.Uint64 dwOSMinorVersion,
  ffi.Uint64 dwSpMajorVersion,
  ffi.Uint64 dwSpMinorVersion,
  ffi.Pointer<ffi.Uint64> pdwReturnedProductType,
);

typedef _dart_GetProductInfo = int Function(
  int dwOSMajorVersion,
  int dwOSMinorVersion,
  int dwSpMajorVersion,
  int dwSpMinorVersion,
  ffi.Pointer<ffi.Uint64> pdwReturnedProductType,
);

typedef _c_GetOsSafeBootMode = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> Flags,
);

typedef _dart_GetOsSafeBootMode = int Function(
  ffi.Pointer<ffi.Uint64> Flags,
);

typedef _c_EnumSystemFirmwareTables = ffi.Uint32 Function(
  ffi.Uint64 FirmwareTableProviderSignature,
  ffi.Pointer<ffi.Void> pFirmwareTableEnumBuffer,
  ffi.Uint64 BufferSize,
);

typedef _dart_EnumSystemFirmwareTables = int Function(
  int FirmwareTableProviderSignature,
  ffi.Pointer<ffi.Void> pFirmwareTableEnumBuffer,
  int BufferSize,
);

typedef _c_GetSystemFirmwareTable = ffi.Uint32 Function(
  ffi.Uint64 FirmwareTableProviderSignature,
  ffi.Uint64 FirmwareTableID,
  ffi.Pointer<ffi.Void> pFirmwareTableBuffer,
  ffi.Uint64 BufferSize,
);

typedef _dart_GetSystemFirmwareTable = int Function(
  int FirmwareTableProviderSignature,
  int FirmwareTableID,
  ffi.Pointer<ffi.Void> pFirmwareTableBuffer,
  int BufferSize,
);

typedef _c_DnsHostnameToComputerNameExW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> Hostname,
  ffi.Pointer<ffi.Uint16> ComputerName,
  ffi.Pointer<ffi.Uint64> nSize,
);

typedef _dart_DnsHostnameToComputerNameExW = int Function(
  ffi.Pointer<ffi.Uint16> Hostname,
  ffi.Pointer<ffi.Uint16> ComputerName,
  ffi.Pointer<ffi.Uint64> nSize,
);

typedef _c_GetPhysicallyInstalledSystemMemory = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> TotalMemoryInKilobytes,
);

typedef _dart_GetPhysicallyInstalledSystemMemory = int Function(
  ffi.Pointer<ffi.Uint64> TotalMemoryInKilobytes,
);

typedef _c_SetComputerNameEx2W = ffi.Int32 Function(
  ffi.Int32 NameType,
  ffi.Uint64 Flags,
  ffi.Pointer<ffi.Uint16> lpBuffer,
);

typedef _dart_SetComputerNameEx2W = int Function(
  int NameType,
  int Flags,
  ffi.Pointer<ffi.Uint16> lpBuffer,
);

typedef _c_SetSystemTimeAdjustment = ffi.Int32 Function(
  ffi.Uint64 dwTimeAdjustment,
  ffi.Int32 bTimeAdjustmentDisabled,
);

typedef _dart_SetSystemTimeAdjustment = int Function(
  int dwTimeAdjustment,
  int bTimeAdjustmentDisabled,
);

typedef _c_SetSystemTimeAdjustmentPrecise = ffi.Int32 Function(
  ffi.Uint64 dwTimeAdjustment,
  ffi.Int32 bTimeAdjustmentDisabled,
);

typedef _dart_SetSystemTimeAdjustmentPrecise = int Function(
  int dwTimeAdjustment,
  int bTimeAdjustmentDisabled,
);

typedef _c_InstallELAMCertificateInfo = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> ELAMFile,
);

typedef _dart_InstallELAMCertificateInfo = int Function(
  ffi.Pointer<ffi.Void> ELAMFile,
);

typedef _c_GetProcessorSystemCycleTime = ffi.Int32 Function(
  ffi.Uint16 Group,
  ffi.Pointer<PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION> Buffer,
  ffi.Pointer<ffi.Uint64> ReturnedLength,
);

typedef _dart_GetProcessorSystemCycleTime = int Function(
  int Group,
  ffi.Pointer<PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION> Buffer,
  ffi.Pointer<ffi.Uint64> ReturnedLength,
);

typedef _c_GetOsManufacturingMode = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> pbEnabled,
);

typedef _dart_GetOsManufacturingMode = int Function(
  ffi.Pointer<ffi.Int32> pbEnabled,
);

typedef _c_GetIntegratedDisplaySize = ffi.Int64 Function(
  ffi.Pointer<ffi.Double> sizeInInches,
);

typedef _dart_GetIntegratedDisplaySize = int Function(
  ffi.Pointer<ffi.Double> sizeInInches,
);

typedef _c_SetComputerNameA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpComputerName,
);

typedef _dart_SetComputerNameA = int Function(
  ffi.Pointer<ffi.Int8> lpComputerName,
);

typedef _c_SetComputerNameW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpComputerName,
);

typedef _dart_SetComputerNameW = int Function(
  ffi.Pointer<ffi.Uint16> lpComputerName,
);

typedef _c_SetComputerNameExA = ffi.Int32 Function(
  ffi.Int32 NameType,
  ffi.Pointer<ffi.Int8> lpBuffer,
);

typedef _dart_SetComputerNameExA = int Function(
  int NameType,
  ffi.Pointer<ffi.Int8> lpBuffer,
);

typedef _c_VirtualAlloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> lpAddress,
  ffi.Uint64 dwSize,
  ffi.Uint64 flAllocationType,
  ffi.Uint64 flProtect,
);

typedef _dart_VirtualAlloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> lpAddress,
  int dwSize,
  int flAllocationType,
  int flProtect,
);

typedef _c_VirtualProtect = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> lpAddress,
  ffi.Uint64 dwSize,
  ffi.Uint64 flNewProtect,
  ffi.Pointer<ffi.Uint64> lpflOldProtect,
);

typedef _dart_VirtualProtect = int Function(
  ffi.Pointer<ffi.Void> lpAddress,
  int dwSize,
  int flNewProtect,
  ffi.Pointer<ffi.Uint64> lpflOldProtect,
);

typedef _c_VirtualFree = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> lpAddress,
  ffi.Uint64 dwSize,
  ffi.Uint64 dwFreeType,
);

typedef _dart_VirtualFree = int Function(
  ffi.Pointer<ffi.Void> lpAddress,
  int dwSize,
  int dwFreeType,
);

typedef _c_VirtualQuery = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> lpAddress,
  ffi.Pointer<PMEMORY_BASIC_INFORMATION> lpBuffer,
  ffi.Uint64 dwLength,
);

typedef _dart_VirtualQuery = int Function(
  ffi.Pointer<ffi.Void> lpAddress,
  ffi.Pointer<PMEMORY_BASIC_INFORMATION> lpBuffer,
  int dwLength,
);

typedef _c_VirtualAllocEx = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Void> lpAddress,
  ffi.Uint64 dwSize,
  ffi.Uint64 flAllocationType,
  ffi.Uint64 flProtect,
);

typedef _dart_VirtualAllocEx = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Void> lpAddress,
  int dwSize,
  int flAllocationType,
  int flProtect,
);

typedef _c_VirtualProtectEx = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Void> lpAddress,
  ffi.Uint64 dwSize,
  ffi.Uint64 flNewProtect,
  ffi.Pointer<ffi.Uint64> lpflOldProtect,
);

typedef _dart_VirtualProtectEx = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Void> lpAddress,
  int dwSize,
  int flNewProtect,
  ffi.Pointer<ffi.Uint64> lpflOldProtect,
);

typedef _c_VirtualQueryEx = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Void> lpAddress,
  ffi.Pointer<PMEMORY_BASIC_INFORMATION> lpBuffer,
  ffi.Uint64 dwLength,
);

typedef _dart_VirtualQueryEx = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Void> lpAddress,
  ffi.Pointer<PMEMORY_BASIC_INFORMATION> lpBuffer,
  int dwLength,
);

typedef _c_ReadProcessMemory = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Void> lpBaseAddress,
  ffi.Pointer<ffi.Void> lpBuffer,
  ffi.Uint64 nSize,
  ffi.Pointer<ffi.Uint64> lpNumberOfBytesRead,
);

typedef _dart_ReadProcessMemory = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Void> lpBaseAddress,
  ffi.Pointer<ffi.Void> lpBuffer,
  int nSize,
  ffi.Pointer<ffi.Uint64> lpNumberOfBytesRead,
);

typedef _c_WriteProcessMemory = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Void> lpBaseAddress,
  ffi.Pointer<ffi.Void> lpBuffer,
  ffi.Uint64 nSize,
  ffi.Pointer<ffi.Uint64> lpNumberOfBytesWritten,
);

typedef _dart_WriteProcessMemory = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Void> lpBaseAddress,
  ffi.Pointer<ffi.Void> lpBuffer,
  int nSize,
  ffi.Pointer<ffi.Uint64> lpNumberOfBytesWritten,
);

typedef _c_CreateFileMappingW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpFileMappingAttributes,
  ffi.Uint64 flProtect,
  ffi.Uint64 dwMaximumSizeHigh,
  ffi.Uint64 dwMaximumSizeLow,
  ffi.Pointer<ffi.Uint16> lpName,
);

typedef _dart_CreateFileMappingW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpFileMappingAttributes,
  int flProtect,
  int dwMaximumSizeHigh,
  int dwMaximumSizeLow,
  ffi.Pointer<ffi.Uint16> lpName,
);

typedef _c_OpenFileMappingW = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 dwDesiredAccess,
  ffi.Int32 bInheritHandle,
  ffi.Pointer<ffi.Uint16> lpName,
);

typedef _dart_OpenFileMappingW = ffi.Pointer<ffi.Void> Function(
  int dwDesiredAccess,
  int bInheritHandle,
  ffi.Pointer<ffi.Uint16> lpName,
);

typedef _c_MapViewOfFile = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hFileMappingObject,
  ffi.Uint64 dwDesiredAccess,
  ffi.Uint64 dwFileOffsetHigh,
  ffi.Uint64 dwFileOffsetLow,
  ffi.Uint64 dwNumberOfBytesToMap,
);

typedef _dart_MapViewOfFile = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hFileMappingObject,
  int dwDesiredAccess,
  int dwFileOffsetHigh,
  int dwFileOffsetLow,
  int dwNumberOfBytesToMap,
);

typedef _c_MapViewOfFileEx = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hFileMappingObject,
  ffi.Uint64 dwDesiredAccess,
  ffi.Uint64 dwFileOffsetHigh,
  ffi.Uint64 dwFileOffsetLow,
  ffi.Uint64 dwNumberOfBytesToMap,
  ffi.Pointer<ffi.Void> lpBaseAddress,
);

typedef _dart_MapViewOfFileEx = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hFileMappingObject,
  int dwDesiredAccess,
  int dwFileOffsetHigh,
  int dwFileOffsetLow,
  int dwNumberOfBytesToMap,
  ffi.Pointer<ffi.Void> lpBaseAddress,
);

typedef _c_VirtualFreeEx = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Void> lpAddress,
  ffi.Uint64 dwSize,
  ffi.Uint64 dwFreeType,
);

typedef _dart_VirtualFreeEx = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Void> lpAddress,
  int dwSize,
  int dwFreeType,
);

typedef _c_FlushViewOfFile = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> lpBaseAddress,
  ffi.Uint64 dwNumberOfBytesToFlush,
);

typedef _dart_FlushViewOfFile = int Function(
  ffi.Pointer<ffi.Void> lpBaseAddress,
  int dwNumberOfBytesToFlush,
);

typedef _c_UnmapViewOfFile = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> lpBaseAddress,
);

typedef _dart_UnmapViewOfFile = int Function(
  ffi.Pointer<ffi.Void> lpBaseAddress,
);

typedef _c_GetLargePageMinimum = ffi.Uint64 Function();

typedef _dart_GetLargePageMinimum = int Function();

typedef _c_GetProcessWorkingSetSizeEx = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Uint64> lpMinimumWorkingSetSize,
  ffi.Pointer<ffi.Uint64> lpMaximumWorkingSetSize,
  ffi.Pointer<ffi.Uint64> Flags,
);

typedef _dart_GetProcessWorkingSetSizeEx = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Uint64> lpMinimumWorkingSetSize,
  ffi.Pointer<ffi.Uint64> lpMaximumWorkingSetSize,
  ffi.Pointer<ffi.Uint64> Flags,
);

typedef _c_SetProcessWorkingSetSizeEx = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Uint64 dwMinimumWorkingSetSize,
  ffi.Uint64 dwMaximumWorkingSetSize,
  ffi.Uint64 Flags,
);

typedef _dart_SetProcessWorkingSetSizeEx = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  int dwMinimumWorkingSetSize,
  int dwMaximumWorkingSetSize,
  int Flags,
);

typedef _c_VirtualLock = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> lpAddress,
  ffi.Uint64 dwSize,
);

typedef _dart_VirtualLock = int Function(
  ffi.Pointer<ffi.Void> lpAddress,
  int dwSize,
);

typedef _c_VirtualUnlock = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> lpAddress,
  ffi.Uint64 dwSize,
);

typedef _dart_VirtualUnlock = int Function(
  ffi.Pointer<ffi.Void> lpAddress,
  int dwSize,
);

typedef _c_GetWriteWatch = ffi.Uint32 Function(
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Void> lpBaseAddress,
  ffi.Uint64 dwRegionSize,
  ffi.Pointer<ffi.Pointer<ffi.Void>> lpAddresses,
  ffi.Pointer<ffi.Uint64> lpdwCount,
  ffi.Pointer<ffi.Uint64> lpdwGranularity,
);

typedef _dart_GetWriteWatch = int Function(
  int dwFlags,
  ffi.Pointer<ffi.Void> lpBaseAddress,
  int dwRegionSize,
  ffi.Pointer<ffi.Pointer<ffi.Void>> lpAddresses,
  ffi.Pointer<ffi.Uint64> lpdwCount,
  ffi.Pointer<ffi.Uint64> lpdwGranularity,
);

typedef _c_ResetWriteWatch = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> lpBaseAddress,
  ffi.Uint64 dwRegionSize,
);

typedef _dart_ResetWriteWatch = int Function(
  ffi.Pointer<ffi.Void> lpBaseAddress,
  int dwRegionSize,
);

typedef _c_CreateMemoryResourceNotification = ffi.Pointer<ffi.Void> Function(
  ffi.Int32 NotificationType,
);

typedef _dart_CreateMemoryResourceNotification = ffi.Pointer<ffi.Void> Function(
  int NotificationType,
);

typedef _c_QueryMemoryResourceNotification = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> ResourceNotificationHandle,
  ffi.Pointer<ffi.Int32> ResourceState,
);

typedef _dart_QueryMemoryResourceNotification = int Function(
  ffi.Pointer<ffi.Void> ResourceNotificationHandle,
  ffi.Pointer<ffi.Int32> ResourceState,
);

typedef _c_GetSystemFileCacheSize = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> lpMinimumFileCacheSize,
  ffi.Pointer<ffi.Uint64> lpMaximumFileCacheSize,
  ffi.Pointer<ffi.Uint64> lpFlags,
);

typedef _dart_GetSystemFileCacheSize = int Function(
  ffi.Pointer<ffi.Uint64> lpMinimumFileCacheSize,
  ffi.Pointer<ffi.Uint64> lpMaximumFileCacheSize,
  ffi.Pointer<ffi.Uint64> lpFlags,
);

typedef _c_SetSystemFileCacheSize = ffi.Int32 Function(
  ffi.Uint64 MinimumFileCacheSize,
  ffi.Uint64 MaximumFileCacheSize,
  ffi.Uint64 Flags,
);

typedef _dart_SetSystemFileCacheSize = int Function(
  int MinimumFileCacheSize,
  int MaximumFileCacheSize,
  int Flags,
);

typedef _c_CreateFileMappingNumaW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpFileMappingAttributes,
  ffi.Uint64 flProtect,
  ffi.Uint64 dwMaximumSizeHigh,
  ffi.Uint64 dwMaximumSizeLow,
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Uint64 nndPreferred,
);

typedef _dart_CreateFileMappingNumaW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpFileMappingAttributes,
  int flProtect,
  int dwMaximumSizeHigh,
  int dwMaximumSizeLow,
  ffi.Pointer<ffi.Uint16> lpName,
  int nndPreferred,
);

typedef _c_PrefetchVirtualMemory = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Uint64 NumberOfEntries,
  ffi.Pointer<PWIN32_MEMORY_RANGE_ENTRY> VirtualAddresses,
  ffi.Uint64 Flags,
);

typedef _dart_PrefetchVirtualMemory = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  int NumberOfEntries,
  ffi.Pointer<PWIN32_MEMORY_RANGE_ENTRY> VirtualAddresses,
  int Flags,
);

typedef _c_CreateFileMappingFromApp = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> SecurityAttributes,
  ffi.Uint64 PageProtection,
  ffi.Uint64 MaximumSize,
  ffi.Pointer<ffi.Uint16> Name,
);

typedef _dart_CreateFileMappingFromApp = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> SecurityAttributes,
  int PageProtection,
  int MaximumSize,
  ffi.Pointer<ffi.Uint16> Name,
);

typedef _c_MapViewOfFileFromApp = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hFileMappingObject,
  ffi.Uint64 DesiredAccess,
  ffi.Uint64 FileOffset,
  ffi.Uint64 NumberOfBytesToMap,
);

typedef _dart_MapViewOfFileFromApp = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hFileMappingObject,
  int DesiredAccess,
  int FileOffset,
  int NumberOfBytesToMap,
);

typedef _c_UnmapViewOfFileEx = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> BaseAddress,
  ffi.Uint64 UnmapFlags,
);

typedef _dart_UnmapViewOfFileEx = int Function(
  ffi.Pointer<ffi.Void> BaseAddress,
  int UnmapFlags,
);

typedef _c_AllocateUserPhysicalPages = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Uint64> NumberOfPages,
  ffi.Pointer<ffi.Uint64> PageArray,
);

typedef _dart_AllocateUserPhysicalPages = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Uint64> NumberOfPages,
  ffi.Pointer<ffi.Uint64> PageArray,
);

typedef _c_FreeUserPhysicalPages = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Uint64> NumberOfPages,
  ffi.Pointer<ffi.Uint64> PageArray,
);

typedef _dart_FreeUserPhysicalPages = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Uint64> NumberOfPages,
  ffi.Pointer<ffi.Uint64> PageArray,
);

typedef _c_MapUserPhysicalPages = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> VirtualAddress,
  ffi.Uint64 NumberOfPages,
  ffi.Pointer<ffi.Uint64> PageArray,
);

typedef _dart_MapUserPhysicalPages = int Function(
  ffi.Pointer<ffi.Void> VirtualAddress,
  int NumberOfPages,
  ffi.Pointer<ffi.Uint64> PageArray,
);

typedef _c_AllocateUserPhysicalPagesNuma = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Uint64> NumberOfPages,
  ffi.Pointer<ffi.Uint64> PageArray,
  ffi.Uint64 nndPreferred,
);

typedef _dart_AllocateUserPhysicalPagesNuma = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Uint64> NumberOfPages,
  ffi.Pointer<ffi.Uint64> PageArray,
  int nndPreferred,
);

typedef _c_VirtualAllocExNuma = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Void> lpAddress,
  ffi.Uint64 dwSize,
  ffi.Uint64 flAllocationType,
  ffi.Uint64 flProtect,
  ffi.Uint64 nndPreferred,
);

typedef _dart_VirtualAllocExNuma = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Void> lpAddress,
  int dwSize,
  int flAllocationType,
  int flProtect,
  int nndPreferred,
);

typedef _c_GetMemoryErrorHandlingCapabilities = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> Capabilities,
);

typedef _dart_GetMemoryErrorHandlingCapabilities = int Function(
  ffi.Pointer<ffi.Uint64> Capabilities,
);

typedef PBAD_MEMORY_CALLBACK_ROUTINE = ffi.Void Function();

typedef _c_RegisterBadMemoryNotification = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.NativeFunction<PBAD_MEMORY_CALLBACK_ROUTINE>> Callback,
);

typedef _dart_RegisterBadMemoryNotification = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.NativeFunction<PBAD_MEMORY_CALLBACK_ROUTINE>> Callback,
);

typedef _c_UnregisterBadMemoryNotification = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> RegistrationHandle,
);

typedef _dart_UnregisterBadMemoryNotification = int Function(
  ffi.Pointer<ffi.Void> RegistrationHandle,
);

typedef _c_OfferVirtualMemory = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> VirtualAddress,
  ffi.Uint64 Size,
  ffi.Int32 Priority,
);

typedef _dart_OfferVirtualMemory = int Function(
  ffi.Pointer<ffi.Void> VirtualAddress,
  int Size,
  int Priority,
);

typedef _c_ReclaimVirtualMemory = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> VirtualAddress,
  ffi.Uint64 Size,
);

typedef _dart_ReclaimVirtualMemory = int Function(
  ffi.Pointer<ffi.Void> VirtualAddress,
  int Size,
);

typedef _c_DiscardVirtualMemory = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> VirtualAddress,
  ffi.Uint64 Size,
);

typedef _dart_DiscardVirtualMemory = int Function(
  ffi.Pointer<ffi.Void> VirtualAddress,
  int Size,
);

typedef _c_SetProcessValidCallTargets = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Void> VirtualAddress,
  ffi.Uint64 RegionSize,
  ffi.Uint64 NumberOfOffsets,
  ffi.Pointer<PCFG_CALL_TARGET_INFO> OffsetInformation,
);

typedef _dart_SetProcessValidCallTargets = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Void> VirtualAddress,
  int RegionSize,
  int NumberOfOffsets,
  ffi.Pointer<PCFG_CALL_TARGET_INFO> OffsetInformation,
);

typedef _c_SetProcessValidCallTargetsForMappedView = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> Process,
  ffi.Pointer<ffi.Void> VirtualAddress,
  ffi.Uint64 RegionSize,
  ffi.Uint64 NumberOfOffsets,
  ffi.Pointer<PCFG_CALL_TARGET_INFO> OffsetInformation,
  ffi.Pointer<ffi.Void> Section,
  ffi.Uint64 ExpectedFileOffset,
);

typedef _dart_SetProcessValidCallTargetsForMappedView = int Function(
  ffi.Pointer<ffi.Void> Process,
  ffi.Pointer<ffi.Void> VirtualAddress,
  int RegionSize,
  int NumberOfOffsets,
  ffi.Pointer<PCFG_CALL_TARGET_INFO> OffsetInformation,
  ffi.Pointer<ffi.Void> Section,
  int ExpectedFileOffset,
);

typedef _c_VirtualAllocFromApp = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> BaseAddress,
  ffi.Uint64 Size,
  ffi.Uint64 AllocationType,
  ffi.Uint64 Protection,
);

typedef _dart_VirtualAllocFromApp = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> BaseAddress,
  int Size,
  int AllocationType,
  int Protection,
);

typedef _c_VirtualProtectFromApp = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> Address,
  ffi.Uint64 Size,
  ffi.Uint64 NewProtection,
  ffi.Pointer<ffi.Uint64> OldProtection,
);

typedef _dart_VirtualProtectFromApp = int Function(
  ffi.Pointer<ffi.Void> Address,
  int Size,
  int NewProtection,
  ffi.Pointer<ffi.Uint64> OldProtection,
);

typedef _c_OpenFileMappingFromApp = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 DesiredAccess,
  ffi.Int32 InheritHandle,
  ffi.Pointer<ffi.Uint16> Name,
);

typedef _dart_OpenFileMappingFromApp = ffi.Pointer<ffi.Void> Function(
  int DesiredAccess,
  int InheritHandle,
  ffi.Pointer<ffi.Uint16> Name,
);

typedef _c_QueryVirtualMemoryInformation = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> Process,
  ffi.Pointer<ffi.Void> VirtualAddress,
  ffi.Int32 MemoryInformationClass,
  ffi.Pointer<ffi.Void> MemoryInformation,
  ffi.Uint64 MemoryInformationSize,
  ffi.Pointer<ffi.Uint64> ReturnSize,
);

typedef _dart_QueryVirtualMemoryInformation = int Function(
  ffi.Pointer<ffi.Void> Process,
  ffi.Pointer<ffi.Void> VirtualAddress,
  int MemoryInformationClass,
  ffi.Pointer<ffi.Void> MemoryInformation,
  int MemoryInformationSize,
  ffi.Pointer<ffi.Uint64> ReturnSize,
);

typedef _c_MapViewOfFileNuma2 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> FileMappingHandle,
  ffi.Pointer<ffi.Void> ProcessHandle,
  ffi.Uint64 Offset,
  ffi.Pointer<ffi.Void> BaseAddress,
  ffi.Uint64 ViewSize,
  ffi.Uint64 AllocationType,
  ffi.Uint64 PageProtection,
  ffi.Uint64 PreferredNode,
);

typedef _dart_MapViewOfFileNuma2 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> FileMappingHandle,
  ffi.Pointer<ffi.Void> ProcessHandle,
  int Offset,
  ffi.Pointer<ffi.Void> BaseAddress,
  int ViewSize,
  int AllocationType,
  int PageProtection,
  int PreferredNode,
);

typedef _c_MapViewOfFile2 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> FileMappingHandle,
  ffi.Pointer<ffi.Void> ProcessHandle,
  ffi.Uint64 Offset,
  ffi.Pointer<ffi.Void> BaseAddress,
  ffi.Uint64 ViewSize,
  ffi.Uint64 AllocationType,
  ffi.Uint64 PageProtection,
);

typedef _dart_MapViewOfFile2 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> FileMappingHandle,
  ffi.Pointer<ffi.Void> ProcessHandle,
  int Offset,
  ffi.Pointer<ffi.Void> BaseAddress,
  int ViewSize,
  int AllocationType,
  int PageProtection,
);

typedef _c_UnmapViewOfFile2 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> Process,
  ffi.Pointer<ffi.Void> BaseAddress,
  ffi.Uint64 UnmapFlags,
);

typedef _dart_UnmapViewOfFile2 = int Function(
  ffi.Pointer<ffi.Void> Process,
  ffi.Pointer<ffi.Void> BaseAddress,
  int UnmapFlags,
);

typedef _c_VirtualUnlockEx = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> Process,
  ffi.Pointer<ffi.Void> Address,
  ffi.Uint64 Size,
);

typedef _dart_VirtualUnlockEx = int Function(
  ffi.Pointer<ffi.Void> Process,
  ffi.Pointer<ffi.Void> Address,
  int Size,
);

typedef _c_VirtualAlloc2 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> Process,
  ffi.Pointer<ffi.Void> BaseAddress,
  ffi.Uint64 Size,
  ffi.Uint64 AllocationType,
  ffi.Uint64 PageProtection,
  ffi.Pointer<PMEM_EXTENDED_PARAMETER> ExtendedParameters,
  ffi.Uint64 ParameterCount,
);

typedef _dart_VirtualAlloc2 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> Process,
  ffi.Pointer<ffi.Void> BaseAddress,
  int Size,
  int AllocationType,
  int PageProtection,
  ffi.Pointer<PMEM_EXTENDED_PARAMETER> ExtendedParameters,
  int ParameterCount,
);

typedef _c_MapViewOfFile3 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> FileMapping,
  ffi.Pointer<ffi.Void> Process,
  ffi.Pointer<ffi.Void> BaseAddress,
  ffi.Uint64 Offset,
  ffi.Uint64 ViewSize,
  ffi.Uint64 AllocationType,
  ffi.Uint64 PageProtection,
  ffi.Pointer<PMEM_EXTENDED_PARAMETER> ExtendedParameters,
  ffi.Uint64 ParameterCount,
);

typedef _dart_MapViewOfFile3 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> FileMapping,
  ffi.Pointer<ffi.Void> Process,
  ffi.Pointer<ffi.Void> BaseAddress,
  int Offset,
  int ViewSize,
  int AllocationType,
  int PageProtection,
  ffi.Pointer<PMEM_EXTENDED_PARAMETER> ExtendedParameters,
  int ParameterCount,
);

typedef _c_VirtualAlloc2FromApp = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> Process,
  ffi.Pointer<ffi.Void> BaseAddress,
  ffi.Uint64 Size,
  ffi.Uint64 AllocationType,
  ffi.Uint64 PageProtection,
  ffi.Pointer<PMEM_EXTENDED_PARAMETER> ExtendedParameters,
  ffi.Uint64 ParameterCount,
);

typedef _dart_VirtualAlloc2FromApp = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> Process,
  ffi.Pointer<ffi.Void> BaseAddress,
  int Size,
  int AllocationType,
  int PageProtection,
  ffi.Pointer<PMEM_EXTENDED_PARAMETER> ExtendedParameters,
  int ParameterCount,
);

typedef _c_MapViewOfFile3FromApp = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> FileMapping,
  ffi.Pointer<ffi.Void> Process,
  ffi.Pointer<ffi.Void> BaseAddress,
  ffi.Uint64 Offset,
  ffi.Uint64 ViewSize,
  ffi.Uint64 AllocationType,
  ffi.Uint64 PageProtection,
  ffi.Pointer<PMEM_EXTENDED_PARAMETER> ExtendedParameters,
  ffi.Uint64 ParameterCount,
);

typedef _dart_MapViewOfFile3FromApp = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> FileMapping,
  ffi.Pointer<ffi.Void> Process,
  ffi.Pointer<ffi.Void> BaseAddress,
  int Offset,
  int ViewSize,
  int AllocationType,
  int PageProtection,
  ffi.Pointer<PMEM_EXTENDED_PARAMETER> ExtendedParameters,
  int ParameterCount,
);

typedef _c_CreateFileMapping2 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> File,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> SecurityAttributes,
  ffi.Uint64 DesiredAccess,
  ffi.Uint64 PageProtection,
  ffi.Uint64 AllocationAttributes,
  ffi.Uint64 MaximumSize,
  ffi.Pointer<ffi.Uint16> Name,
  ffi.Pointer<PMEM_EXTENDED_PARAMETER> ExtendedParameters,
  ffi.Uint64 ParameterCount,
);

typedef _dart_CreateFileMapping2 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> File,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> SecurityAttributes,
  int DesiredAccess,
  int PageProtection,
  int AllocationAttributes,
  int MaximumSize,
  ffi.Pointer<ffi.Uint16> Name,
  ffi.Pointer<PMEM_EXTENDED_PARAMETER> ExtendedParameters,
  int ParameterCount,
);

typedef _c_IsEnclaveTypeSupported = ffi.Int32 Function(
  ffi.Uint64 flEnclaveType,
);

typedef _dart_IsEnclaveTypeSupported = int Function(
  int flEnclaveType,
);

typedef _c_CreateEnclave = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Void> lpAddress,
  ffi.Uint64 dwSize,
  ffi.Uint64 dwInitialCommitment,
  ffi.Uint64 flEnclaveType,
  ffi.Pointer<ffi.Void> lpEnclaveInformation,
  ffi.Uint64 dwInfoLength,
  ffi.Pointer<ffi.Uint64> lpEnclaveError,
);

typedef _dart_CreateEnclave = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Void> lpAddress,
  int dwSize,
  int dwInitialCommitment,
  int flEnclaveType,
  ffi.Pointer<ffi.Void> lpEnclaveInformation,
  int dwInfoLength,
  ffi.Pointer<ffi.Uint64> lpEnclaveError,
);

typedef _c_LoadEnclaveData = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Void> lpAddress,
  ffi.Pointer<ffi.Void> lpBuffer,
  ffi.Uint64 nSize,
  ffi.Uint64 flProtect,
  ffi.Pointer<ffi.Void> lpPageInformation,
  ffi.Uint64 dwInfoLength,
  ffi.Pointer<ffi.Uint64> lpNumberOfBytesWritten,
  ffi.Pointer<ffi.Uint64> lpEnclaveError,
);

typedef _dart_LoadEnclaveData = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Void> lpAddress,
  ffi.Pointer<ffi.Void> lpBuffer,
  int nSize,
  int flProtect,
  ffi.Pointer<ffi.Void> lpPageInformation,
  int dwInfoLength,
  ffi.Pointer<ffi.Uint64> lpNumberOfBytesWritten,
  ffi.Pointer<ffi.Uint64> lpEnclaveError,
);

typedef _c_InitializeEnclave = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Void> lpAddress,
  ffi.Pointer<ffi.Void> lpEnclaveInformation,
  ffi.Uint64 dwInfoLength,
  ffi.Pointer<ffi.Uint64> lpEnclaveError,
);

typedef _dart_InitializeEnclave = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Void> lpAddress,
  ffi.Pointer<ffi.Void> lpEnclaveInformation,
  int dwInfoLength,
  ffi.Pointer<ffi.Uint64> lpEnclaveError,
);

typedef _c_LoadEnclaveImageA = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> lpEnclaveAddress,
  ffi.Pointer<ffi.Int8> lpImageName,
);

typedef _dart_LoadEnclaveImageA = int Function(
  ffi.Pointer<ffi.Void> lpEnclaveAddress,
  ffi.Pointer<ffi.Int8> lpImageName,
);

typedef _c_LoadEnclaveImageW = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> lpEnclaveAddress,
  ffi.Pointer<ffi.Uint16> lpImageName,
);

typedef _dart_LoadEnclaveImageW = int Function(
  ffi.Pointer<ffi.Void> lpEnclaveAddress,
  ffi.Pointer<ffi.Uint16> lpImageName,
);

typedef LPENCLAVE_ROUTINE = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_CallEnclave = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<LPENCLAVE_ROUTINE>> lpRoutine,
  ffi.Pointer<ffi.Void> lpParameter,
  ffi.Int32 fWaitForThread,
  ffi.Pointer<ffi.Pointer<ffi.Void>> lpReturnValue,
);

typedef _dart_CallEnclave = int Function(
  ffi.Pointer<ffi.NativeFunction<LPENCLAVE_ROUTINE>> lpRoutine,
  ffi.Pointer<ffi.Void> lpParameter,
  int fWaitForThread,
  ffi.Pointer<ffi.Pointer<ffi.Void>> lpReturnValue,
);

typedef _c_TerminateEnclave = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> lpAddress,
  ffi.Int32 fWait,
);

typedef _dart_TerminateEnclave = int Function(
  ffi.Pointer<ffi.Void> lpAddress,
  int fWait,
);

typedef _c_DeleteEnclave = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> lpAddress,
);

typedef _dart_DeleteEnclave = int Function(
  ffi.Pointer<ffi.Void> lpAddress,
);

typedef _c_QueueUserWorkItem = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<LPTHREAD_START_ROUTINE>> Function_1,
  ffi.Pointer<ffi.Void> Context,
  ffi.Uint64 Flags,
);

typedef _dart_QueueUserWorkItem = int Function(
  ffi.Pointer<ffi.NativeFunction<LPTHREAD_START_ROUTINE>> Function_1,
  ffi.Pointer<ffi.Void> Context,
  int Flags,
);

typedef _c_UnregisterWaitEx = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> WaitHandle,
  ffi.Pointer<ffi.Void> CompletionEvent,
);

typedef _dart_UnregisterWaitEx = int Function(
  ffi.Pointer<ffi.Void> WaitHandle,
  ffi.Pointer<ffi.Void> CompletionEvent,
);

typedef _c_CreateTimerQueue = ffi.Pointer<ffi.Void> Function();

typedef _dart_CreateTimerQueue = ffi.Pointer<ffi.Void> Function();

typedef WAITORTIMERCALLBACK = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint8,
);

typedef _c_CreateTimerQueueTimer = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> phNewTimer,
  ffi.Pointer<ffi.Void> TimerQueue,
  ffi.Pointer<ffi.NativeFunction<WAITORTIMERCALLBACK>> Callback,
  ffi.Pointer<ffi.Void> Parameter,
  ffi.Uint64 DueTime,
  ffi.Uint64 Period,
  ffi.Uint64 Flags,
);

typedef _dart_CreateTimerQueueTimer = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> phNewTimer,
  ffi.Pointer<ffi.Void> TimerQueue,
  ffi.Pointer<ffi.NativeFunction<WAITORTIMERCALLBACK>> Callback,
  ffi.Pointer<ffi.Void> Parameter,
  int DueTime,
  int Period,
  int Flags,
);

typedef _c_ChangeTimerQueueTimer = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> TimerQueue,
  ffi.Pointer<ffi.Void> Timer,
  ffi.Uint64 DueTime,
  ffi.Uint64 Period,
);

typedef _dart_ChangeTimerQueueTimer = int Function(
  ffi.Pointer<ffi.Void> TimerQueue,
  ffi.Pointer<ffi.Void> Timer,
  int DueTime,
  int Period,
);

typedef _c_DeleteTimerQueueTimer = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> TimerQueue,
  ffi.Pointer<ffi.Void> Timer,
  ffi.Pointer<ffi.Void> CompletionEvent,
);

typedef _dart_DeleteTimerQueueTimer = int Function(
  ffi.Pointer<ffi.Void> TimerQueue,
  ffi.Pointer<ffi.Void> Timer,
  ffi.Pointer<ffi.Void> CompletionEvent,
);

typedef _c_DeleteTimerQueueEx = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> TimerQueue,
  ffi.Pointer<ffi.Void> CompletionEvent,
);

typedef _dart_DeleteTimerQueueEx = int Function(
  ffi.Pointer<ffi.Void> TimerQueue,
  ffi.Pointer<ffi.Void> CompletionEvent,
);

typedef _c_CreateThreadpool = ffi.Pointer<_TP_POOL> Function(
  ffi.Pointer<ffi.Void> reserved,
);

typedef _dart_CreateThreadpool = ffi.Pointer<_TP_POOL> Function(
  ffi.Pointer<ffi.Void> reserved,
);

typedef _c_SetThreadpoolThreadMaximum = ffi.Void Function(
  ffi.Pointer<_TP_POOL> ptpp,
  ffi.Uint64 cthrdMost,
);

typedef _dart_SetThreadpoolThreadMaximum = void Function(
  ffi.Pointer<_TP_POOL> ptpp,
  int cthrdMost,
);

typedef _c_SetThreadpoolThreadMinimum = ffi.Int32 Function(
  ffi.Pointer<_TP_POOL> ptpp,
  ffi.Uint64 cthrdMic,
);

typedef _dart_SetThreadpoolThreadMinimum = int Function(
  ffi.Pointer<_TP_POOL> ptpp,
  int cthrdMic,
);

typedef _c_SetThreadpoolStackInformation = ffi.Int32 Function(
  ffi.Pointer<_TP_POOL> ptpp,
  ffi.Pointer<PTP_POOL_STACK_INFORMATION> ptpsi,
);

typedef _dart_SetThreadpoolStackInformation = int Function(
  ffi.Pointer<_TP_POOL> ptpp,
  ffi.Pointer<PTP_POOL_STACK_INFORMATION> ptpsi,
);

typedef _c_QueryThreadpoolStackInformation = ffi.Int32 Function(
  ffi.Pointer<_TP_POOL> ptpp,
  ffi.Pointer<PTP_POOL_STACK_INFORMATION> ptpsi,
);

typedef _dart_QueryThreadpoolStackInformation = int Function(
  ffi.Pointer<_TP_POOL> ptpp,
  ffi.Pointer<PTP_POOL_STACK_INFORMATION> ptpsi,
);

typedef _c_CloseThreadpool = ffi.Void Function(
  ffi.Pointer<_TP_POOL> ptpp,
);

typedef _dart_CloseThreadpool = void Function(
  ffi.Pointer<_TP_POOL> ptpp,
);

typedef _c_CreateThreadpoolCleanupGroup = ffi.Pointer<_TP_CLEANUP_GROUP>
    Function();

typedef _dart_CreateThreadpoolCleanupGroup = ffi.Pointer<_TP_CLEANUP_GROUP>
    Function();

typedef _c_CloseThreadpoolCleanupGroupMembers = ffi.Void Function(
  ffi.Pointer<_TP_CLEANUP_GROUP> ptpcg,
  ffi.Int32 fCancelPendingCallbacks,
  ffi.Pointer<ffi.Void> pvCleanupContext,
);

typedef _dart_CloseThreadpoolCleanupGroupMembers = void Function(
  ffi.Pointer<_TP_CLEANUP_GROUP> ptpcg,
  int fCancelPendingCallbacks,
  ffi.Pointer<ffi.Void> pvCleanupContext,
);

typedef _c_CloseThreadpoolCleanupGroup = ffi.Void Function(
  ffi.Pointer<_TP_CLEANUP_GROUP> ptpcg,
);

typedef _dart_CloseThreadpoolCleanupGroup = void Function(
  ffi.Pointer<_TP_CLEANUP_GROUP> ptpcg,
);

typedef _c_SetEventWhenCallbackReturns = ffi.Void Function(
  ffi.Pointer<_TP_CALLBACK_INSTANCE> pci,
  ffi.Pointer<ffi.Void> evt,
);

typedef _dart_SetEventWhenCallbackReturns = void Function(
  ffi.Pointer<_TP_CALLBACK_INSTANCE> pci,
  ffi.Pointer<ffi.Void> evt,
);

typedef _c_ReleaseSemaphoreWhenCallbackReturns = ffi.Void Function(
  ffi.Pointer<_TP_CALLBACK_INSTANCE> pci,
  ffi.Pointer<ffi.Void> sem,
  ffi.Uint64 crel,
);

typedef _dart_ReleaseSemaphoreWhenCallbackReturns = void Function(
  ffi.Pointer<_TP_CALLBACK_INSTANCE> pci,
  ffi.Pointer<ffi.Void> sem,
  int crel,
);

typedef _c_ReleaseMutexWhenCallbackReturns = ffi.Void Function(
  ffi.Pointer<_TP_CALLBACK_INSTANCE> pci,
  ffi.Pointer<ffi.Void> mut,
);

typedef _dart_ReleaseMutexWhenCallbackReturns = void Function(
  ffi.Pointer<_TP_CALLBACK_INSTANCE> pci,
  ffi.Pointer<ffi.Void> mut,
);

typedef _c_LeaveCriticalSectionWhenCallbackReturns = ffi.Void Function(
  ffi.Pointer<_TP_CALLBACK_INSTANCE> pci,
  ffi.Pointer<PRTL_CRITICAL_SECTION> pcs,
);

typedef _dart_LeaveCriticalSectionWhenCallbackReturns = void Function(
  ffi.Pointer<_TP_CALLBACK_INSTANCE> pci,
  ffi.Pointer<PRTL_CRITICAL_SECTION> pcs,
);

typedef _c_FreeLibraryWhenCallbackReturns = ffi.Void Function(
  ffi.Pointer<_TP_CALLBACK_INSTANCE> pci,
  ffi.Pointer<HINSTANCE__> mod,
);

typedef _dart_FreeLibraryWhenCallbackReturns = void Function(
  ffi.Pointer<_TP_CALLBACK_INSTANCE> pci,
  ffi.Pointer<HINSTANCE__> mod,
);

typedef _c_CallbackMayRunLong = ffi.Int32 Function(
  ffi.Pointer<_TP_CALLBACK_INSTANCE> pci,
);

typedef _dart_CallbackMayRunLong = int Function(
  ffi.Pointer<_TP_CALLBACK_INSTANCE> pci,
);

typedef _c_DisassociateCurrentThreadFromCallback = ffi.Void Function(
  ffi.Pointer<_TP_CALLBACK_INSTANCE> pci,
);

typedef _dart_DisassociateCurrentThreadFromCallback = void Function(
  ffi.Pointer<_TP_CALLBACK_INSTANCE> pci,
);

typedef _c_TrySubmitThreadpoolCallback = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<PTP_SIMPLE_CALLBACK>> pfns,
  ffi.Pointer<ffi.Void> pv,
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> pcbe,
);

typedef _dart_TrySubmitThreadpoolCallback = int Function(
  ffi.Pointer<ffi.NativeFunction<PTP_SIMPLE_CALLBACK>> pfns,
  ffi.Pointer<ffi.Void> pv,
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> pcbe,
);

typedef PTP_WORK_CALLBACK = ffi.Void Function(
  ffi.Pointer<_TP_CALLBACK_INSTANCE>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<_TP_WORK>,
);

typedef _c_CreateThreadpoolWork = ffi.Pointer<_TP_WORK> Function(
  ffi.Pointer<ffi.NativeFunction<PTP_WORK_CALLBACK>> pfnwk,
  ffi.Pointer<ffi.Void> pv,
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> pcbe,
);

typedef _dart_CreateThreadpoolWork = ffi.Pointer<_TP_WORK> Function(
  ffi.Pointer<ffi.NativeFunction<PTP_WORK_CALLBACK>> pfnwk,
  ffi.Pointer<ffi.Void> pv,
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> pcbe,
);

typedef _c_SubmitThreadpoolWork = ffi.Void Function(
  ffi.Pointer<_TP_WORK> pwk,
);

typedef _dart_SubmitThreadpoolWork = void Function(
  ffi.Pointer<_TP_WORK> pwk,
);

typedef _c_WaitForThreadpoolWorkCallbacks = ffi.Void Function(
  ffi.Pointer<_TP_WORK> pwk,
  ffi.Int32 fCancelPendingCallbacks,
);

typedef _dart_WaitForThreadpoolWorkCallbacks = void Function(
  ffi.Pointer<_TP_WORK> pwk,
  int fCancelPendingCallbacks,
);

typedef _c_CloseThreadpoolWork = ffi.Void Function(
  ffi.Pointer<_TP_WORK> pwk,
);

typedef _dart_CloseThreadpoolWork = void Function(
  ffi.Pointer<_TP_WORK> pwk,
);

typedef PTP_TIMER_CALLBACK = ffi.Void Function(
  ffi.Pointer<_TP_CALLBACK_INSTANCE>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<_TP_TIMER>,
);

typedef _c_CreateThreadpoolTimer = ffi.Pointer<_TP_TIMER> Function(
  ffi.Pointer<ffi.NativeFunction<PTP_TIMER_CALLBACK>> pfnti,
  ffi.Pointer<ffi.Void> pv,
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> pcbe,
);

typedef _dart_CreateThreadpoolTimer = ffi.Pointer<_TP_TIMER> Function(
  ffi.Pointer<ffi.NativeFunction<PTP_TIMER_CALLBACK>> pfnti,
  ffi.Pointer<ffi.Void> pv,
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> pcbe,
);

typedef _c_SetThreadpoolTimer = ffi.Void Function(
  ffi.Pointer<_TP_TIMER> pti,
  ffi.Pointer<LPFILETIME> pftDueTime,
  ffi.Uint64 msPeriod,
  ffi.Uint64 msWindowLength,
);

typedef _dart_SetThreadpoolTimer = void Function(
  ffi.Pointer<_TP_TIMER> pti,
  ffi.Pointer<LPFILETIME> pftDueTime,
  int msPeriod,
  int msWindowLength,
);

typedef _c_IsThreadpoolTimerSet = ffi.Int32 Function(
  ffi.Pointer<_TP_TIMER> pti,
);

typedef _dart_IsThreadpoolTimerSet = int Function(
  ffi.Pointer<_TP_TIMER> pti,
);

typedef _c_WaitForThreadpoolTimerCallbacks = ffi.Void Function(
  ffi.Pointer<_TP_TIMER> pti,
  ffi.Int32 fCancelPendingCallbacks,
);

typedef _dart_WaitForThreadpoolTimerCallbacks = void Function(
  ffi.Pointer<_TP_TIMER> pti,
  int fCancelPendingCallbacks,
);

typedef _c_CloseThreadpoolTimer = ffi.Void Function(
  ffi.Pointer<_TP_TIMER> pti,
);

typedef _dart_CloseThreadpoolTimer = void Function(
  ffi.Pointer<_TP_TIMER> pti,
);

typedef PTP_WAIT_CALLBACK = ffi.Void Function(
  ffi.Pointer<_TP_CALLBACK_INSTANCE>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<_TP_WAIT>,
  ffi.Uint64,
);

typedef _c_CreateThreadpoolWait = ffi.Pointer<_TP_WAIT> Function(
  ffi.Pointer<ffi.NativeFunction<PTP_WAIT_CALLBACK>> pfnwa,
  ffi.Pointer<ffi.Void> pv,
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> pcbe,
);

typedef _dart_CreateThreadpoolWait = ffi.Pointer<_TP_WAIT> Function(
  ffi.Pointer<ffi.NativeFunction<PTP_WAIT_CALLBACK>> pfnwa,
  ffi.Pointer<ffi.Void> pv,
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> pcbe,
);

typedef _c_SetThreadpoolWait = ffi.Void Function(
  ffi.Pointer<_TP_WAIT> pwa,
  ffi.Pointer<ffi.Void> h,
  ffi.Pointer<LPFILETIME> pftTimeout,
);

typedef _dart_SetThreadpoolWait = void Function(
  ffi.Pointer<_TP_WAIT> pwa,
  ffi.Pointer<ffi.Void> h,
  ffi.Pointer<LPFILETIME> pftTimeout,
);

typedef _c_WaitForThreadpoolWaitCallbacks = ffi.Void Function(
  ffi.Pointer<_TP_WAIT> pwa,
  ffi.Int32 fCancelPendingCallbacks,
);

typedef _dart_WaitForThreadpoolWaitCallbacks = void Function(
  ffi.Pointer<_TP_WAIT> pwa,
  int fCancelPendingCallbacks,
);

typedef _c_CloseThreadpoolWait = ffi.Void Function(
  ffi.Pointer<_TP_WAIT> pwa,
);

typedef _dart_CloseThreadpoolWait = void Function(
  ffi.Pointer<_TP_WAIT> pwa,
);

typedef PTP_WIN32_IO_CALLBACK = ffi.Void Function(
  ffi.Pointer<_TP_CALLBACK_INSTANCE>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
  ffi.Uint64,
  ffi.Pointer<_TP_IO>,
);

typedef _c_CreateThreadpoolIo = ffi.Pointer<_TP_IO> Function(
  ffi.Pointer<ffi.Void> fl,
  ffi.Pointer<ffi.NativeFunction<PTP_WIN32_IO_CALLBACK>> pfnio,
  ffi.Pointer<ffi.Void> pv,
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> pcbe,
);

typedef _dart_CreateThreadpoolIo = ffi.Pointer<_TP_IO> Function(
  ffi.Pointer<ffi.Void> fl,
  ffi.Pointer<ffi.NativeFunction<PTP_WIN32_IO_CALLBACK>> pfnio,
  ffi.Pointer<ffi.Void> pv,
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> pcbe,
);

typedef _c_StartThreadpoolIo = ffi.Void Function(
  ffi.Pointer<_TP_IO> pio,
);

typedef _dart_StartThreadpoolIo = void Function(
  ffi.Pointer<_TP_IO> pio,
);

typedef _c_CancelThreadpoolIo = ffi.Void Function(
  ffi.Pointer<_TP_IO> pio,
);

typedef _dart_CancelThreadpoolIo = void Function(
  ffi.Pointer<_TP_IO> pio,
);

typedef _c_WaitForThreadpoolIoCallbacks = ffi.Void Function(
  ffi.Pointer<_TP_IO> pio,
  ffi.Int32 fCancelPendingCallbacks,
);

typedef _dart_WaitForThreadpoolIoCallbacks = void Function(
  ffi.Pointer<_TP_IO> pio,
  int fCancelPendingCallbacks,
);

typedef _c_CloseThreadpoolIo = ffi.Void Function(
  ffi.Pointer<_TP_IO> pio,
);

typedef _dart_CloseThreadpoolIo = void Function(
  ffi.Pointer<_TP_IO> pio,
);

typedef _c_SetThreadpoolTimerEx = ffi.Int32 Function(
  ffi.Pointer<_TP_TIMER> pti,
  ffi.Pointer<LPFILETIME> pftDueTime,
  ffi.Uint64 msPeriod,
  ffi.Uint64 msWindowLength,
);

typedef _dart_SetThreadpoolTimerEx = int Function(
  ffi.Pointer<_TP_TIMER> pti,
  ffi.Pointer<LPFILETIME> pftDueTime,
  int msPeriod,
  int msWindowLength,
);

typedef _c_SetThreadpoolWaitEx = ffi.Int32 Function(
  ffi.Pointer<_TP_WAIT> pwa,
  ffi.Pointer<ffi.Void> h,
  ffi.Pointer<LPFILETIME> pftTimeout,
  ffi.Pointer<ffi.Void> Reserved,
);

typedef _dart_SetThreadpoolWaitEx = int Function(
  ffi.Pointer<_TP_WAIT> pwa,
  ffi.Pointer<ffi.Void> h,
  ffi.Pointer<LPFILETIME> pftTimeout,
  ffi.Pointer<ffi.Void> Reserved,
);

typedef _c_IsProcessInJob = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> ProcessHandle,
  ffi.Pointer<ffi.Void> JobHandle,
  ffi.Pointer<ffi.Int32> Result,
);

typedef _dart_IsProcessInJob = int Function(
  ffi.Pointer<ffi.Void> ProcessHandle,
  ffi.Pointer<ffi.Void> JobHandle,
  ffi.Pointer<ffi.Int32> Result,
);

typedef _c_CreateJobObjectW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpJobAttributes,
  ffi.Pointer<ffi.Uint16> lpName,
);

typedef _dart_CreateJobObjectW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpJobAttributes,
  ffi.Pointer<ffi.Uint16> lpName,
);

typedef _c_FreeMemoryJobObject = ffi.Void Function(
  ffi.Pointer<ffi.Void> Buffer,
);

typedef _dart_FreeMemoryJobObject = void Function(
  ffi.Pointer<ffi.Void> Buffer,
);

typedef _c_OpenJobObjectW = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 dwDesiredAccess,
  ffi.Int32 bInheritHandle,
  ffi.Pointer<ffi.Uint16> lpName,
);

typedef _dart_OpenJobObjectW = ffi.Pointer<ffi.Void> Function(
  int dwDesiredAccess,
  int bInheritHandle,
  ffi.Pointer<ffi.Uint16> lpName,
);

typedef _c_AssignProcessToJobObject = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hJob,
  ffi.Pointer<ffi.Void> hProcess,
);

typedef _dart_AssignProcessToJobObject = int Function(
  ffi.Pointer<ffi.Void> hJob,
  ffi.Pointer<ffi.Void> hProcess,
);

typedef _c_TerminateJobObject = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hJob,
  ffi.Uint32 uExitCode,
);

typedef _dart_TerminateJobObject = int Function(
  ffi.Pointer<ffi.Void> hJob,
  int uExitCode,
);

typedef _c_SetInformationJobObject = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hJob,
  ffi.Int32 JobObjectInformationClass,
  ffi.Pointer<ffi.Void> lpJobObjectInformation,
  ffi.Uint64 cbJobObjectInformationLength,
);

typedef _dart_SetInformationJobObject = int Function(
  ffi.Pointer<ffi.Void> hJob,
  int JobObjectInformationClass,
  ffi.Pointer<ffi.Void> lpJobObjectInformation,
  int cbJobObjectInformationLength,
);

typedef _c_SetIoRateControlInformationJobObject = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> hJob,
  ffi.Pointer<JOBOBJECT_IO_RATE_CONTROL_INFORMATION> IoRateControlInfo,
);

typedef _dart_SetIoRateControlInformationJobObject = int Function(
  ffi.Pointer<ffi.Void> hJob,
  ffi.Pointer<JOBOBJECT_IO_RATE_CONTROL_INFORMATION> IoRateControlInfo,
);

typedef _c_QueryInformationJobObject = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hJob,
  ffi.Int32 JobObjectInformationClass,
  ffi.Pointer<ffi.Void> lpJobObjectInformation,
  ffi.Uint64 cbJobObjectInformationLength,
  ffi.Pointer<ffi.Uint64> lpReturnLength,
);

typedef _dart_QueryInformationJobObject = int Function(
  ffi.Pointer<ffi.Void> hJob,
  int JobObjectInformationClass,
  ffi.Pointer<ffi.Void> lpJobObjectInformation,
  int cbJobObjectInformationLength,
  ffi.Pointer<ffi.Uint64> lpReturnLength,
);

typedef _c_QueryIoRateControlInformationJobObject = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> hJob,
  ffi.Pointer<ffi.Uint16> VolumeName,
  ffi.Pointer<ffi.Pointer<JOBOBJECT_IO_RATE_CONTROL_INFORMATION>> InfoBlocks,
  ffi.Pointer<ffi.Uint64> InfoBlockCount,
);

typedef _dart_QueryIoRateControlInformationJobObject = int Function(
  ffi.Pointer<ffi.Void> hJob,
  ffi.Pointer<ffi.Uint16> VolumeName,
  ffi.Pointer<ffi.Pointer<JOBOBJECT_IO_RATE_CONTROL_INFORMATION>> InfoBlocks,
  ffi.Pointer<ffi.Uint64> InfoBlockCount,
);

typedef _c_Wow64DisableWow64FsRedirection = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> OldValue,
);

typedef _dart_Wow64DisableWow64FsRedirection = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> OldValue,
);

typedef _c_Wow64RevertWow64FsRedirection = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> OlValue,
);

typedef _dart_Wow64RevertWow64FsRedirection = int Function(
  ffi.Pointer<ffi.Void> OlValue,
);

typedef _c_IsWow64Process = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Int32> Wow64Process,
);

typedef _dart_IsWow64Process = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Int32> Wow64Process,
);

typedef _c_GetSystemWow64DirectoryA = ffi.Uint32 Function(
  ffi.Pointer<ffi.Int8> lpBuffer,
  ffi.Uint32 uSize,
);

typedef _dart_GetSystemWow64DirectoryA = int Function(
  ffi.Pointer<ffi.Int8> lpBuffer,
  int uSize,
);

typedef _c_GetSystemWow64DirectoryW = ffi.Uint32 Function(
  ffi.Pointer<ffi.Uint16> lpBuffer,
  ffi.Uint32 uSize,
);

typedef _dart_GetSystemWow64DirectoryW = int Function(
  ffi.Pointer<ffi.Uint16> lpBuffer,
  int uSize,
);

typedef _c_Wow64SetThreadDefaultGuestMachine = ffi.Uint16 Function(
  ffi.Uint16 Machine,
);

typedef _dart_Wow64SetThreadDefaultGuestMachine = int Function(
  int Machine,
);

typedef _c_IsWow64Process2 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Uint16> pProcessMachine,
  ffi.Pointer<ffi.Uint16> pNativeMachine,
);

typedef _dart_IsWow64Process2 = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Uint16> pProcessMachine,
  ffi.Pointer<ffi.Uint16> pNativeMachine,
);

typedef _c_GetSystemWow64Directory2A = ffi.Uint32 Function(
  ffi.Pointer<ffi.Int8> lpBuffer,
  ffi.Uint32 uSize,
  ffi.Uint16 ImageFileMachineType,
);

typedef _dart_GetSystemWow64Directory2A = int Function(
  ffi.Pointer<ffi.Int8> lpBuffer,
  int uSize,
  int ImageFileMachineType,
);

typedef _c_GetSystemWow64Directory2W = ffi.Uint32 Function(
  ffi.Pointer<ffi.Uint16> lpBuffer,
  ffi.Uint32 uSize,
  ffi.Uint16 ImageFileMachineType,
);

typedef _dart_GetSystemWow64Directory2W = int Function(
  ffi.Pointer<ffi.Uint16> lpBuffer,
  int uSize,
  int ImageFileMachineType,
);

typedef _c_IsWow64GuestMachineSupported = ffi.Int64 Function(
  ffi.Uint16 WowGuestMachine,
  ffi.Pointer<ffi.Int32> MachineIsSupported,
);

typedef _dart_IsWow64GuestMachineSupported = int Function(
  int WowGuestMachine,
  ffi.Pointer<ffi.Int32> MachineIsSupported,
);

typedef _c_Wow64GetThreadContext = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hThread,
  ffi.Pointer<WOW64_CONTEXT> lpContext,
);

typedef _dart_Wow64GetThreadContext = int Function(
  ffi.Pointer<ffi.Void> hThread,
  ffi.Pointer<WOW64_CONTEXT> lpContext,
);

typedef _c_Wow64SetThreadContext = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hThread,
  ffi.Pointer<WOW64_CONTEXT> lpContext,
);

typedef _dart_Wow64SetThreadContext = int Function(
  ffi.Pointer<ffi.Void> hThread,
  ffi.Pointer<WOW64_CONTEXT> lpContext,
);

typedef _c_Wow64SuspendThread = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> hThread,
);

typedef _dart_Wow64SuspendThread = int Function(
  ffi.Pointer<ffi.Void> hThread,
);

typedef _c_DisableThreadLibraryCalls = ffi.Int32 Function(
  ffi.Pointer<HINSTANCE__> hLibModule,
);

typedef _dart_DisableThreadLibraryCalls = int Function(
  ffi.Pointer<HINSTANCE__> hLibModule,
);

typedef _c_FindResourceExW = ffi.Pointer<HRSRC__> Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<ffi.Uint16> lpType,
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Uint16 wLanguage,
);

typedef _dart_FindResourceExW = ffi.Pointer<HRSRC__> Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<ffi.Uint16> lpType,
  ffi.Pointer<ffi.Uint16> lpName,
  int wLanguage,
);

typedef _c_FindStringOrdinal = ffi.Int32 Function(
  ffi.Uint64 dwFindStringOrdinalFlags,
  ffi.Pointer<ffi.Uint16> lpStringSource,
  ffi.Int32 cchSource,
  ffi.Pointer<ffi.Uint16> lpStringValue,
  ffi.Int32 cchValue,
  ffi.Int32 bIgnoreCase,
);

typedef _dart_FindStringOrdinal = int Function(
  int dwFindStringOrdinalFlags,
  ffi.Pointer<ffi.Uint16> lpStringSource,
  int cchSource,
  ffi.Pointer<ffi.Uint16> lpStringValue,
  int cchValue,
  int bIgnoreCase,
);

typedef _c_FreeLibrary = ffi.Int32 Function(
  ffi.Pointer<HINSTANCE__> hLibModule,
);

typedef _dart_FreeLibrary = int Function(
  ffi.Pointer<HINSTANCE__> hLibModule,
);

typedef _c_FreeLibraryAndExitThread = ffi.Void Function(
  ffi.Pointer<HINSTANCE__> hLibModule,
  ffi.Uint64 dwExitCode,
);

typedef _dart_FreeLibraryAndExitThread = void Function(
  ffi.Pointer<HINSTANCE__> hLibModule,
  int dwExitCode,
);

typedef _c_FreeResource = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hResData,
);

typedef _dart_FreeResource = int Function(
  ffi.Pointer<ffi.Void> hResData,
);

typedef _c_GetModuleFileNameA = ffi.Uint64 Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<ffi.Int8> lpFilename,
  ffi.Uint64 nSize,
);

typedef _dart_GetModuleFileNameA = int Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<ffi.Int8> lpFilename,
  int nSize,
);

typedef _c_GetModuleFileNameW = ffi.Uint64 Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<ffi.Uint16> lpFilename,
  ffi.Uint64 nSize,
);

typedef _dart_GetModuleFileNameW = int Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<ffi.Uint16> lpFilename,
  int nSize,
);

typedef _c_GetModuleHandleA = ffi.Pointer<HINSTANCE__> Function(
  ffi.Pointer<ffi.Int8> lpModuleName,
);

typedef _dart_GetModuleHandleA = ffi.Pointer<HINSTANCE__> Function(
  ffi.Pointer<ffi.Int8> lpModuleName,
);

typedef _c_GetModuleHandleW = ffi.Pointer<HINSTANCE__> Function(
  ffi.Pointer<ffi.Uint16> lpModuleName,
);

typedef _dart_GetModuleHandleW = ffi.Pointer<HINSTANCE__> Function(
  ffi.Pointer<ffi.Uint16> lpModuleName,
);

typedef _c_GetModuleHandleExA = ffi.Int32 Function(
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Int8> lpModuleName,
  ffi.Pointer<ffi.Pointer<HINSTANCE__>> phModule,
);

typedef _dart_GetModuleHandleExA = int Function(
  int dwFlags,
  ffi.Pointer<ffi.Int8> lpModuleName,
  ffi.Pointer<ffi.Pointer<HINSTANCE__>> phModule,
);

typedef _c_GetModuleHandleExW = ffi.Int32 Function(
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Uint16> lpModuleName,
  ffi.Pointer<ffi.Pointer<HINSTANCE__>> phModule,
);

typedef _dart_GetModuleHandleExW = int Function(
  int dwFlags,
  ffi.Pointer<ffi.Uint16> lpModuleName,
  ffi.Pointer<ffi.Pointer<HINSTANCE__>> phModule,
);

typedef FARPROC = ffi.Int64 Function();

typedef _c_GetProcAddress = ffi.Pointer<ffi.NativeFunction<FARPROC>> Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<ffi.Int8> lpProcName,
);

typedef _dart_GetProcAddress = ffi.Pointer<ffi.NativeFunction<FARPROC>>
    Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<ffi.Int8> lpProcName,
);

typedef _c_LoadLibraryExA = ffi.Pointer<HINSTANCE__> Function(
  ffi.Pointer<ffi.Int8> lpLibFileName,
  ffi.Pointer<ffi.Void> hFile,
  ffi.Uint64 dwFlags,
);

typedef _dart_LoadLibraryExA = ffi.Pointer<HINSTANCE__> Function(
  ffi.Pointer<ffi.Int8> lpLibFileName,
  ffi.Pointer<ffi.Void> hFile,
  int dwFlags,
);

typedef _c_LoadLibraryExW = ffi.Pointer<HINSTANCE__> Function(
  ffi.Pointer<ffi.Uint16> lpLibFileName,
  ffi.Pointer<ffi.Void> hFile,
  ffi.Uint64 dwFlags,
);

typedef _dart_LoadLibraryExW = ffi.Pointer<HINSTANCE__> Function(
  ffi.Pointer<ffi.Uint16> lpLibFileName,
  ffi.Pointer<ffi.Void> hFile,
  int dwFlags,
);

typedef _c_LoadResource = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<HRSRC__> hResInfo,
);

typedef _dart_LoadResource = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<HRSRC__> hResInfo,
);

typedef _c_LoadStringA = ffi.Int32 Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Uint32 uID,
  ffi.Pointer<ffi.Int8> lpBuffer,
  ffi.Int32 cchBufferMax,
);

typedef _dart_LoadStringA = int Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  int uID,
  ffi.Pointer<ffi.Int8> lpBuffer,
  int cchBufferMax,
);

typedef _c_LoadStringW = ffi.Int32 Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Uint32 uID,
  ffi.Pointer<ffi.Uint16> lpBuffer,
  ffi.Int32 cchBufferMax,
);

typedef _dart_LoadStringW = int Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  int uID,
  ffi.Pointer<ffi.Uint16> lpBuffer,
  int cchBufferMax,
);

typedef _c_LockResource = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hResData,
);

typedef _dart_LockResource = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hResData,
);

typedef _c_SizeofResource = ffi.Uint64 Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<HRSRC__> hResInfo,
);

typedef _dart_SizeofResource = int Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<HRSRC__> hResInfo,
);

typedef _c_AddDllDirectory = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> NewDirectory,
);

typedef _dart_AddDllDirectory = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> NewDirectory,
);

typedef _c_RemoveDllDirectory = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> Cookie,
);

typedef _dart_RemoveDllDirectory = int Function(
  ffi.Pointer<ffi.Void> Cookie,
);

typedef _c_SetDefaultDllDirectories = ffi.Int32 Function(
  ffi.Uint64 DirectoryFlags,
);

typedef _dart_SetDefaultDllDirectories = int Function(
  int DirectoryFlags,
);

typedef ENUMRESLANGPROCA = ffi.Int32 Function(
  ffi.Pointer<HINSTANCE__>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
  ffi.Uint16,
  ffi.Int64,
);

typedef _c_EnumResourceLanguagesExA = ffi.Int32 Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<ffi.Int8> lpType,
  ffi.Pointer<ffi.Int8> lpName,
  ffi.Pointer<ffi.NativeFunction<ENUMRESLANGPROCA>> lpEnumFunc,
  ffi.Int64 lParam,
  ffi.Uint64 dwFlags,
  ffi.Uint16 LangId,
);

typedef _dart_EnumResourceLanguagesExA = int Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<ffi.Int8> lpType,
  ffi.Pointer<ffi.Int8> lpName,
  ffi.Pointer<ffi.NativeFunction<ENUMRESLANGPROCA>> lpEnumFunc,
  int lParam,
  int dwFlags,
  int LangId,
);

typedef ENUMRESLANGPROCW = ffi.Int32 Function(
  ffi.Pointer<HINSTANCE__>,
  ffi.Pointer<ffi.Uint16>,
  ffi.Pointer<ffi.Uint16>,
  ffi.Uint16,
  ffi.Int64,
);

typedef _c_EnumResourceLanguagesExW = ffi.Int32 Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<ffi.Uint16> lpType,
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Pointer<ffi.NativeFunction<ENUMRESLANGPROCW>> lpEnumFunc,
  ffi.Int64 lParam,
  ffi.Uint64 dwFlags,
  ffi.Uint16 LangId,
);

typedef _dart_EnumResourceLanguagesExW = int Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<ffi.Uint16> lpType,
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Pointer<ffi.NativeFunction<ENUMRESLANGPROCW>> lpEnumFunc,
  int lParam,
  int dwFlags,
  int LangId,
);

typedef ENUMRESNAMEPROCA = ffi.Int32 Function(
  ffi.Pointer<HINSTANCE__>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int64,
);

typedef _c_EnumResourceNamesExA = ffi.Int32 Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<ffi.Int8> lpType,
  ffi.Pointer<ffi.NativeFunction<ENUMRESNAMEPROCA>> lpEnumFunc,
  ffi.Int64 lParam,
  ffi.Uint64 dwFlags,
  ffi.Uint16 LangId,
);

typedef _dart_EnumResourceNamesExA = int Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<ffi.Int8> lpType,
  ffi.Pointer<ffi.NativeFunction<ENUMRESNAMEPROCA>> lpEnumFunc,
  int lParam,
  int dwFlags,
  int LangId,
);

typedef ENUMRESNAMEPROCW = ffi.Int32 Function(
  ffi.Pointer<HINSTANCE__>,
  ffi.Pointer<ffi.Uint16>,
  ffi.Pointer<ffi.Uint16>,
  ffi.Int64,
);

typedef _c_EnumResourceNamesExW = ffi.Int32 Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<ffi.Uint16> lpType,
  ffi.Pointer<ffi.NativeFunction<ENUMRESNAMEPROCW>> lpEnumFunc,
  ffi.Int64 lParam,
  ffi.Uint64 dwFlags,
  ffi.Uint16 LangId,
);

typedef _dart_EnumResourceNamesExW = int Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<ffi.Uint16> lpType,
  ffi.Pointer<ffi.NativeFunction<ENUMRESNAMEPROCW>> lpEnumFunc,
  int lParam,
  int dwFlags,
  int LangId,
);

typedef ENUMRESTYPEPROCA = ffi.Int32 Function(
  ffi.Pointer<HINSTANCE__>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int64,
);

typedef _c_EnumResourceTypesExA = ffi.Int32 Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<ffi.NativeFunction<ENUMRESTYPEPROCA>> lpEnumFunc,
  ffi.Int64 lParam,
  ffi.Uint64 dwFlags,
  ffi.Uint16 LangId,
);

typedef _dart_EnumResourceTypesExA = int Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<ffi.NativeFunction<ENUMRESTYPEPROCA>> lpEnumFunc,
  int lParam,
  int dwFlags,
  int LangId,
);

typedef ENUMRESTYPEPROCW = ffi.Int32 Function(
  ffi.Pointer<HINSTANCE__>,
  ffi.Pointer<ffi.Uint16>,
  ffi.Int64,
);

typedef _c_EnumResourceTypesExW = ffi.Int32 Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<ffi.NativeFunction<ENUMRESTYPEPROCW>> lpEnumFunc,
  ffi.Int64 lParam,
  ffi.Uint64 dwFlags,
  ffi.Uint16 LangId,
);

typedef _dart_EnumResourceTypesExW = int Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<ffi.NativeFunction<ENUMRESTYPEPROCW>> lpEnumFunc,
  int lParam,
  int dwFlags,
  int LangId,
);

typedef _c_FindResourceW = ffi.Pointer<HRSRC__> Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Pointer<ffi.Uint16> lpType,
);

typedef _dart_FindResourceW = ffi.Pointer<HRSRC__> Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Pointer<ffi.Uint16> lpType,
);

typedef _c_LoadLibraryA = ffi.Pointer<HINSTANCE__> Function(
  ffi.Pointer<ffi.Int8> lpLibFileName,
);

typedef _dart_LoadLibraryA = ffi.Pointer<HINSTANCE__> Function(
  ffi.Pointer<ffi.Int8> lpLibFileName,
);

typedef _c_LoadLibraryW = ffi.Pointer<HINSTANCE__> Function(
  ffi.Pointer<ffi.Uint16> lpLibFileName,
);

typedef _dart_LoadLibraryW = ffi.Pointer<HINSTANCE__> Function(
  ffi.Pointer<ffi.Uint16> lpLibFileName,
);

typedef _c_EnumResourceNamesW = ffi.Int32 Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<ffi.Uint16> lpType,
  ffi.Pointer<ffi.NativeFunction<ENUMRESNAMEPROCW>> lpEnumFunc,
  ffi.Int64 lParam,
);

typedef _dart_EnumResourceNamesW = int Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<ffi.Uint16> lpType,
  ffi.Pointer<ffi.NativeFunction<ENUMRESNAMEPROCW>> lpEnumFunc,
  int lParam,
);

typedef _c_AccessCheck = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
  ffi.Pointer<ffi.Void> ClientToken,
  ffi.Uint64 DesiredAccess,
  ffi.Pointer<GENERIC_MAPPING> GenericMapping,
  ffi.Pointer<PPRIVILEGE_SET> PrivilegeSet,
  ffi.Pointer<ffi.Uint64> PrivilegeSetLength,
  ffi.Pointer<ffi.Uint64> GrantedAccess,
  ffi.Pointer<ffi.Int32> AccessStatus,
);

typedef _dart_AccessCheck = int Function(
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
  ffi.Pointer<ffi.Void> ClientToken,
  int DesiredAccess,
  ffi.Pointer<GENERIC_MAPPING> GenericMapping,
  ffi.Pointer<PPRIVILEGE_SET> PrivilegeSet,
  ffi.Pointer<ffi.Uint64> PrivilegeSetLength,
  ffi.Pointer<ffi.Uint64> GrantedAccess,
  ffi.Pointer<ffi.Int32> AccessStatus,
);

typedef _c_AccessCheckAndAuditAlarmW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> SubsystemName,
  ffi.Pointer<ffi.Void> HandleId,
  ffi.Pointer<ffi.Uint16> ObjectTypeName,
  ffi.Pointer<ffi.Uint16> ObjectName,
  ffi.Pointer<ffi.Void> SecurityDescriptor,
  ffi.Uint64 DesiredAccess,
  ffi.Pointer<GENERIC_MAPPING> GenericMapping,
  ffi.Int32 ObjectCreation,
  ffi.Pointer<ffi.Uint64> GrantedAccess,
  ffi.Pointer<ffi.Int32> AccessStatus,
  ffi.Pointer<ffi.Int32> pfGenerateOnClose,
);

typedef _dart_AccessCheckAndAuditAlarmW = int Function(
  ffi.Pointer<ffi.Uint16> SubsystemName,
  ffi.Pointer<ffi.Void> HandleId,
  ffi.Pointer<ffi.Uint16> ObjectTypeName,
  ffi.Pointer<ffi.Uint16> ObjectName,
  ffi.Pointer<ffi.Void> SecurityDescriptor,
  int DesiredAccess,
  ffi.Pointer<GENERIC_MAPPING> GenericMapping,
  int ObjectCreation,
  ffi.Pointer<ffi.Uint64> GrantedAccess,
  ffi.Pointer<ffi.Int32> AccessStatus,
  ffi.Pointer<ffi.Int32> pfGenerateOnClose,
);

typedef _c_AccessCheckByType = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
  ffi.Pointer<ffi.Void> PrincipalSelfSid,
  ffi.Pointer<ffi.Void> ClientToken,
  ffi.Uint64 DesiredAccess,
  ffi.Pointer<POBJECT_TYPE_LIST> ObjectTypeList,
  ffi.Uint64 ObjectTypeListLength,
  ffi.Pointer<GENERIC_MAPPING> GenericMapping,
  ffi.Pointer<PPRIVILEGE_SET> PrivilegeSet,
  ffi.Pointer<ffi.Uint64> PrivilegeSetLength,
  ffi.Pointer<ffi.Uint64> GrantedAccess,
  ffi.Pointer<ffi.Int32> AccessStatus,
);

typedef _dart_AccessCheckByType = int Function(
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
  ffi.Pointer<ffi.Void> PrincipalSelfSid,
  ffi.Pointer<ffi.Void> ClientToken,
  int DesiredAccess,
  ffi.Pointer<POBJECT_TYPE_LIST> ObjectTypeList,
  int ObjectTypeListLength,
  ffi.Pointer<GENERIC_MAPPING> GenericMapping,
  ffi.Pointer<PPRIVILEGE_SET> PrivilegeSet,
  ffi.Pointer<ffi.Uint64> PrivilegeSetLength,
  ffi.Pointer<ffi.Uint64> GrantedAccess,
  ffi.Pointer<ffi.Int32> AccessStatus,
);

typedef _c_AccessCheckByTypeResultList = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
  ffi.Pointer<ffi.Void> PrincipalSelfSid,
  ffi.Pointer<ffi.Void> ClientToken,
  ffi.Uint64 DesiredAccess,
  ffi.Pointer<POBJECT_TYPE_LIST> ObjectTypeList,
  ffi.Uint64 ObjectTypeListLength,
  ffi.Pointer<GENERIC_MAPPING> GenericMapping,
  ffi.Pointer<PPRIVILEGE_SET> PrivilegeSet,
  ffi.Pointer<ffi.Uint64> PrivilegeSetLength,
  ffi.Pointer<ffi.Uint64> GrantedAccessList,
  ffi.Pointer<ffi.Uint64> AccessStatusList,
);

typedef _dart_AccessCheckByTypeResultList = int Function(
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
  ffi.Pointer<ffi.Void> PrincipalSelfSid,
  ffi.Pointer<ffi.Void> ClientToken,
  int DesiredAccess,
  ffi.Pointer<POBJECT_TYPE_LIST> ObjectTypeList,
  int ObjectTypeListLength,
  ffi.Pointer<GENERIC_MAPPING> GenericMapping,
  ffi.Pointer<PPRIVILEGE_SET> PrivilegeSet,
  ffi.Pointer<ffi.Uint64> PrivilegeSetLength,
  ffi.Pointer<ffi.Uint64> GrantedAccessList,
  ffi.Pointer<ffi.Uint64> AccessStatusList,
);

typedef _c_AccessCheckByTypeAndAuditAlarmW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> SubsystemName,
  ffi.Pointer<ffi.Void> HandleId,
  ffi.Pointer<ffi.Uint16> ObjectTypeName,
  ffi.Pointer<ffi.Uint16> ObjectName,
  ffi.Pointer<ffi.Void> SecurityDescriptor,
  ffi.Pointer<ffi.Void> PrincipalSelfSid,
  ffi.Uint64 DesiredAccess,
  ffi.Int32 AuditType,
  ffi.Uint64 Flags,
  ffi.Pointer<POBJECT_TYPE_LIST> ObjectTypeList,
  ffi.Uint64 ObjectTypeListLength,
  ffi.Pointer<GENERIC_MAPPING> GenericMapping,
  ffi.Int32 ObjectCreation,
  ffi.Pointer<ffi.Uint64> GrantedAccess,
  ffi.Pointer<ffi.Int32> AccessStatus,
  ffi.Pointer<ffi.Int32> pfGenerateOnClose,
);

typedef _dart_AccessCheckByTypeAndAuditAlarmW = int Function(
  ffi.Pointer<ffi.Uint16> SubsystemName,
  ffi.Pointer<ffi.Void> HandleId,
  ffi.Pointer<ffi.Uint16> ObjectTypeName,
  ffi.Pointer<ffi.Uint16> ObjectName,
  ffi.Pointer<ffi.Void> SecurityDescriptor,
  ffi.Pointer<ffi.Void> PrincipalSelfSid,
  int DesiredAccess,
  int AuditType,
  int Flags,
  ffi.Pointer<POBJECT_TYPE_LIST> ObjectTypeList,
  int ObjectTypeListLength,
  ffi.Pointer<GENERIC_MAPPING> GenericMapping,
  int ObjectCreation,
  ffi.Pointer<ffi.Uint64> GrantedAccess,
  ffi.Pointer<ffi.Int32> AccessStatus,
  ffi.Pointer<ffi.Int32> pfGenerateOnClose,
);

typedef _c_AccessCheckByTypeResultListAndAuditAlarmW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> SubsystemName,
  ffi.Pointer<ffi.Void> HandleId,
  ffi.Pointer<ffi.Uint16> ObjectTypeName,
  ffi.Pointer<ffi.Uint16> ObjectName,
  ffi.Pointer<ffi.Void> SecurityDescriptor,
  ffi.Pointer<ffi.Void> PrincipalSelfSid,
  ffi.Uint64 DesiredAccess,
  ffi.Int32 AuditType,
  ffi.Uint64 Flags,
  ffi.Pointer<POBJECT_TYPE_LIST> ObjectTypeList,
  ffi.Uint64 ObjectTypeListLength,
  ffi.Pointer<GENERIC_MAPPING> GenericMapping,
  ffi.Int32 ObjectCreation,
  ffi.Pointer<ffi.Uint64> GrantedAccessList,
  ffi.Pointer<ffi.Uint64> AccessStatusList,
  ffi.Pointer<ffi.Int32> pfGenerateOnClose,
);

typedef _dart_AccessCheckByTypeResultListAndAuditAlarmW = int Function(
  ffi.Pointer<ffi.Uint16> SubsystemName,
  ffi.Pointer<ffi.Void> HandleId,
  ffi.Pointer<ffi.Uint16> ObjectTypeName,
  ffi.Pointer<ffi.Uint16> ObjectName,
  ffi.Pointer<ffi.Void> SecurityDescriptor,
  ffi.Pointer<ffi.Void> PrincipalSelfSid,
  int DesiredAccess,
  int AuditType,
  int Flags,
  ffi.Pointer<POBJECT_TYPE_LIST> ObjectTypeList,
  int ObjectTypeListLength,
  ffi.Pointer<GENERIC_MAPPING> GenericMapping,
  int ObjectCreation,
  ffi.Pointer<ffi.Uint64> GrantedAccessList,
  ffi.Pointer<ffi.Uint64> AccessStatusList,
  ffi.Pointer<ffi.Int32> pfGenerateOnClose,
);

typedef _c_AccessCheckByTypeResultListAndAuditAlarmByHandleW = ffi.Int32
    Function(
  ffi.Pointer<ffi.Uint16> SubsystemName,
  ffi.Pointer<ffi.Void> HandleId,
  ffi.Pointer<ffi.Void> ClientToken,
  ffi.Pointer<ffi.Uint16> ObjectTypeName,
  ffi.Pointer<ffi.Uint16> ObjectName,
  ffi.Pointer<ffi.Void> SecurityDescriptor,
  ffi.Pointer<ffi.Void> PrincipalSelfSid,
  ffi.Uint64 DesiredAccess,
  ffi.Int32 AuditType,
  ffi.Uint64 Flags,
  ffi.Pointer<POBJECT_TYPE_LIST> ObjectTypeList,
  ffi.Uint64 ObjectTypeListLength,
  ffi.Pointer<GENERIC_MAPPING> GenericMapping,
  ffi.Int32 ObjectCreation,
  ffi.Pointer<ffi.Uint64> GrantedAccessList,
  ffi.Pointer<ffi.Uint64> AccessStatusList,
  ffi.Pointer<ffi.Int32> pfGenerateOnClose,
);

typedef _dart_AccessCheckByTypeResultListAndAuditAlarmByHandleW = int Function(
  ffi.Pointer<ffi.Uint16> SubsystemName,
  ffi.Pointer<ffi.Void> HandleId,
  ffi.Pointer<ffi.Void> ClientToken,
  ffi.Pointer<ffi.Uint16> ObjectTypeName,
  ffi.Pointer<ffi.Uint16> ObjectName,
  ffi.Pointer<ffi.Void> SecurityDescriptor,
  ffi.Pointer<ffi.Void> PrincipalSelfSid,
  int DesiredAccess,
  int AuditType,
  int Flags,
  ffi.Pointer<POBJECT_TYPE_LIST> ObjectTypeList,
  int ObjectTypeListLength,
  ffi.Pointer<GENERIC_MAPPING> GenericMapping,
  int ObjectCreation,
  ffi.Pointer<ffi.Uint64> GrantedAccessList,
  ffi.Pointer<ffi.Uint64> AccessStatusList,
  ffi.Pointer<ffi.Int32> pfGenerateOnClose,
);

typedef _c_AddAccessAllowedAce = ffi.Int32 Function(
  ffi.Pointer<ACL> pAcl,
  ffi.Uint64 dwAceRevision,
  ffi.Uint64 AccessMask,
  ffi.Pointer<ffi.Void> pSid,
);

typedef _dart_AddAccessAllowedAce = int Function(
  ffi.Pointer<ACL> pAcl,
  int dwAceRevision,
  int AccessMask,
  ffi.Pointer<ffi.Void> pSid,
);

typedef _c_AddAccessAllowedAceEx = ffi.Int32 Function(
  ffi.Pointer<ACL> pAcl,
  ffi.Uint64 dwAceRevision,
  ffi.Uint64 AceFlags,
  ffi.Uint64 AccessMask,
  ffi.Pointer<ffi.Void> pSid,
);

typedef _dart_AddAccessAllowedAceEx = int Function(
  ffi.Pointer<ACL> pAcl,
  int dwAceRevision,
  int AceFlags,
  int AccessMask,
  ffi.Pointer<ffi.Void> pSid,
);

typedef _c_AddAccessAllowedObjectAce = ffi.Int32 Function(
  ffi.Pointer<ACL> pAcl,
  ffi.Uint64 dwAceRevision,
  ffi.Uint64 AceFlags,
  ffi.Uint64 AccessMask,
  ffi.Pointer<GUID> ObjectTypeGuid,
  ffi.Pointer<GUID> InheritedObjectTypeGuid,
  ffi.Pointer<ffi.Void> pSid,
);

typedef _dart_AddAccessAllowedObjectAce = int Function(
  ffi.Pointer<ACL> pAcl,
  int dwAceRevision,
  int AceFlags,
  int AccessMask,
  ffi.Pointer<GUID> ObjectTypeGuid,
  ffi.Pointer<GUID> InheritedObjectTypeGuid,
  ffi.Pointer<ffi.Void> pSid,
);

typedef _c_AddAccessDeniedAce = ffi.Int32 Function(
  ffi.Pointer<ACL> pAcl,
  ffi.Uint64 dwAceRevision,
  ffi.Uint64 AccessMask,
  ffi.Pointer<ffi.Void> pSid,
);

typedef _dart_AddAccessDeniedAce = int Function(
  ffi.Pointer<ACL> pAcl,
  int dwAceRevision,
  int AccessMask,
  ffi.Pointer<ffi.Void> pSid,
);

typedef _c_AddAccessDeniedAceEx = ffi.Int32 Function(
  ffi.Pointer<ACL> pAcl,
  ffi.Uint64 dwAceRevision,
  ffi.Uint64 AceFlags,
  ffi.Uint64 AccessMask,
  ffi.Pointer<ffi.Void> pSid,
);

typedef _dart_AddAccessDeniedAceEx = int Function(
  ffi.Pointer<ACL> pAcl,
  int dwAceRevision,
  int AceFlags,
  int AccessMask,
  ffi.Pointer<ffi.Void> pSid,
);

typedef _c_AddAccessDeniedObjectAce = ffi.Int32 Function(
  ffi.Pointer<ACL> pAcl,
  ffi.Uint64 dwAceRevision,
  ffi.Uint64 AceFlags,
  ffi.Uint64 AccessMask,
  ffi.Pointer<GUID> ObjectTypeGuid,
  ffi.Pointer<GUID> InheritedObjectTypeGuid,
  ffi.Pointer<ffi.Void> pSid,
);

typedef _dart_AddAccessDeniedObjectAce = int Function(
  ffi.Pointer<ACL> pAcl,
  int dwAceRevision,
  int AceFlags,
  int AccessMask,
  ffi.Pointer<GUID> ObjectTypeGuid,
  ffi.Pointer<GUID> InheritedObjectTypeGuid,
  ffi.Pointer<ffi.Void> pSid,
);

typedef _c_AddAce = ffi.Int32 Function(
  ffi.Pointer<ACL> pAcl,
  ffi.Uint64 dwAceRevision,
  ffi.Uint64 dwStartingAceIndex,
  ffi.Pointer<ffi.Void> pAceList,
  ffi.Uint64 nAceListLength,
);

typedef _dart_AddAce = int Function(
  ffi.Pointer<ACL> pAcl,
  int dwAceRevision,
  int dwStartingAceIndex,
  ffi.Pointer<ffi.Void> pAceList,
  int nAceListLength,
);

typedef _c_AddAuditAccessAce = ffi.Int32 Function(
  ffi.Pointer<ACL> pAcl,
  ffi.Uint64 dwAceRevision,
  ffi.Uint64 dwAccessMask,
  ffi.Pointer<ffi.Void> pSid,
  ffi.Int32 bAuditSuccess,
  ffi.Int32 bAuditFailure,
);

typedef _dart_AddAuditAccessAce = int Function(
  ffi.Pointer<ACL> pAcl,
  int dwAceRevision,
  int dwAccessMask,
  ffi.Pointer<ffi.Void> pSid,
  int bAuditSuccess,
  int bAuditFailure,
);

typedef _c_AddAuditAccessAceEx = ffi.Int32 Function(
  ffi.Pointer<ACL> pAcl,
  ffi.Uint64 dwAceRevision,
  ffi.Uint64 AceFlags,
  ffi.Uint64 dwAccessMask,
  ffi.Pointer<ffi.Void> pSid,
  ffi.Int32 bAuditSuccess,
  ffi.Int32 bAuditFailure,
);

typedef _dart_AddAuditAccessAceEx = int Function(
  ffi.Pointer<ACL> pAcl,
  int dwAceRevision,
  int AceFlags,
  int dwAccessMask,
  ffi.Pointer<ffi.Void> pSid,
  int bAuditSuccess,
  int bAuditFailure,
);

typedef _c_AddAuditAccessObjectAce = ffi.Int32 Function(
  ffi.Pointer<ACL> pAcl,
  ffi.Uint64 dwAceRevision,
  ffi.Uint64 AceFlags,
  ffi.Uint64 AccessMask,
  ffi.Pointer<GUID> ObjectTypeGuid,
  ffi.Pointer<GUID> InheritedObjectTypeGuid,
  ffi.Pointer<ffi.Void> pSid,
  ffi.Int32 bAuditSuccess,
  ffi.Int32 bAuditFailure,
);

typedef _dart_AddAuditAccessObjectAce = int Function(
  ffi.Pointer<ACL> pAcl,
  int dwAceRevision,
  int AceFlags,
  int AccessMask,
  ffi.Pointer<GUID> ObjectTypeGuid,
  ffi.Pointer<GUID> InheritedObjectTypeGuid,
  ffi.Pointer<ffi.Void> pSid,
  int bAuditSuccess,
  int bAuditFailure,
);

typedef _c_AddMandatoryAce = ffi.Int32 Function(
  ffi.Pointer<ACL> pAcl,
  ffi.Uint64 dwAceRevision,
  ffi.Uint64 AceFlags,
  ffi.Uint64 MandatoryPolicy,
  ffi.Pointer<ffi.Void> pLabelSid,
);

typedef _dart_AddMandatoryAce = int Function(
  ffi.Pointer<ACL> pAcl,
  int dwAceRevision,
  int AceFlags,
  int MandatoryPolicy,
  ffi.Pointer<ffi.Void> pLabelSid,
);

typedef _c_AddResourceAttributeAce = ffi.Int32 Function(
  ffi.Pointer<ACL> pAcl,
  ffi.Uint64 dwAceRevision,
  ffi.Uint64 AceFlags,
  ffi.Uint64 AccessMask,
  ffi.Pointer<ffi.Void> pSid,
  ffi.Pointer<PCLAIM_SECURITY_ATTRIBUTES_INFORMATION> pAttributeInfo,
  ffi.Pointer<ffi.Uint64> pReturnLength,
);

typedef _dart_AddResourceAttributeAce = int Function(
  ffi.Pointer<ACL> pAcl,
  int dwAceRevision,
  int AceFlags,
  int AccessMask,
  ffi.Pointer<ffi.Void> pSid,
  ffi.Pointer<PCLAIM_SECURITY_ATTRIBUTES_INFORMATION> pAttributeInfo,
  ffi.Pointer<ffi.Uint64> pReturnLength,
);

typedef _c_AddScopedPolicyIDAce = ffi.Int32 Function(
  ffi.Pointer<ACL> pAcl,
  ffi.Uint64 dwAceRevision,
  ffi.Uint64 AceFlags,
  ffi.Uint64 AccessMask,
  ffi.Pointer<ffi.Void> pSid,
);

typedef _dart_AddScopedPolicyIDAce = int Function(
  ffi.Pointer<ACL> pAcl,
  int dwAceRevision,
  int AceFlags,
  int AccessMask,
  ffi.Pointer<ffi.Void> pSid,
);

typedef _c_AdjustTokenGroups = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> TokenHandle,
  ffi.Int32 ResetToDefault,
  ffi.Pointer<PTOKEN_GROUPS> NewState,
  ffi.Uint64 BufferLength,
  ffi.Pointer<PTOKEN_GROUPS> PreviousState,
  ffi.Pointer<ffi.Uint64> ReturnLength,
);

typedef _dart_AdjustTokenGroups = int Function(
  ffi.Pointer<ffi.Void> TokenHandle,
  int ResetToDefault,
  ffi.Pointer<PTOKEN_GROUPS> NewState,
  int BufferLength,
  ffi.Pointer<PTOKEN_GROUPS> PreviousState,
  ffi.Pointer<ffi.Uint64> ReturnLength,
);

typedef _c_AdjustTokenPrivileges = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> TokenHandle,
  ffi.Int32 DisableAllPrivileges,
  ffi.Pointer<PTOKEN_PRIVILEGES> NewState,
  ffi.Uint64 BufferLength,
  ffi.Pointer<PTOKEN_PRIVILEGES> PreviousState,
  ffi.Pointer<ffi.Uint64> ReturnLength,
);

typedef _dart_AdjustTokenPrivileges = int Function(
  ffi.Pointer<ffi.Void> TokenHandle,
  int DisableAllPrivileges,
  ffi.Pointer<PTOKEN_PRIVILEGES> NewState,
  int BufferLength,
  ffi.Pointer<PTOKEN_PRIVILEGES> PreviousState,
  ffi.Pointer<ffi.Uint64> ReturnLength,
);

typedef _c_AllocateAndInitializeSid = ffi.Int32 Function(
  ffi.Pointer<PSID_IDENTIFIER_AUTHORITY> pIdentifierAuthority,
  ffi.Uint8 nSubAuthorityCount,
  ffi.Uint64 nSubAuthority0,
  ffi.Uint64 nSubAuthority1,
  ffi.Uint64 nSubAuthority2,
  ffi.Uint64 nSubAuthority3,
  ffi.Uint64 nSubAuthority4,
  ffi.Uint64 nSubAuthority5,
  ffi.Uint64 nSubAuthority6,
  ffi.Uint64 nSubAuthority7,
  ffi.Pointer<ffi.Pointer<ffi.Void>> pSid,
);

typedef _dart_AllocateAndInitializeSid = int Function(
  ffi.Pointer<PSID_IDENTIFIER_AUTHORITY> pIdentifierAuthority,
  int nSubAuthorityCount,
  int nSubAuthority0,
  int nSubAuthority1,
  int nSubAuthority2,
  int nSubAuthority3,
  int nSubAuthority4,
  int nSubAuthority5,
  int nSubAuthority6,
  int nSubAuthority7,
  ffi.Pointer<ffi.Pointer<ffi.Void>> pSid,
);

typedef _c_AllocateLocallyUniqueId = ffi.Int32 Function(
  ffi.Pointer<PLUID> Luid,
);

typedef _dart_AllocateLocallyUniqueId = int Function(
  ffi.Pointer<PLUID> Luid,
);

typedef _c_AreAllAccessesGranted = ffi.Int32 Function(
  ffi.Uint64 GrantedAccess,
  ffi.Uint64 DesiredAccess,
);

typedef _dart_AreAllAccessesGranted = int Function(
  int GrantedAccess,
  int DesiredAccess,
);

typedef _c_AreAnyAccessesGranted = ffi.Int32 Function(
  ffi.Uint64 GrantedAccess,
  ffi.Uint64 DesiredAccess,
);

typedef _dart_AreAnyAccessesGranted = int Function(
  int GrantedAccess,
  int DesiredAccess,
);

typedef _c_CheckTokenMembership = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> TokenHandle,
  ffi.Pointer<ffi.Void> SidToCheck,
  ffi.Pointer<ffi.Int32> IsMember,
);

typedef _dart_CheckTokenMembership = int Function(
  ffi.Pointer<ffi.Void> TokenHandle,
  ffi.Pointer<ffi.Void> SidToCheck,
  ffi.Pointer<ffi.Int32> IsMember,
);

typedef _c_CheckTokenCapability = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> TokenHandle,
  ffi.Pointer<ffi.Void> CapabilitySidToCheck,
  ffi.Pointer<ffi.Int32> HasCapability,
);

typedef _dart_CheckTokenCapability = int Function(
  ffi.Pointer<ffi.Void> TokenHandle,
  ffi.Pointer<ffi.Void> CapabilitySidToCheck,
  ffi.Pointer<ffi.Int32> HasCapability,
);

typedef _c_GetAppContainerAce = ffi.Int32 Function(
  ffi.Pointer<ACL> Acl,
  ffi.Uint64 StartingAceIndex,
  ffi.Pointer<ffi.Pointer<ffi.Void>> AppContainerAce,
  ffi.Pointer<ffi.Uint64> AppContainerAceIndex,
);

typedef _dart_GetAppContainerAce = int Function(
  ffi.Pointer<ACL> Acl,
  int StartingAceIndex,
  ffi.Pointer<ffi.Pointer<ffi.Void>> AppContainerAce,
  ffi.Pointer<ffi.Uint64> AppContainerAceIndex,
);

typedef _c_CheckTokenMembershipEx = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> TokenHandle,
  ffi.Pointer<ffi.Void> SidToCheck,
  ffi.Uint64 Flags,
  ffi.Pointer<ffi.Int32> IsMember,
);

typedef _dart_CheckTokenMembershipEx = int Function(
  ffi.Pointer<ffi.Void> TokenHandle,
  ffi.Pointer<ffi.Void> SidToCheck,
  int Flags,
  ffi.Pointer<ffi.Int32> IsMember,
);

typedef _c_ConvertToAutoInheritPrivateObjectSecurity = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> ParentDescriptor,
  ffi.Pointer<ffi.Void> CurrentSecurityDescriptor,
  ffi.Pointer<ffi.Pointer<ffi.Void>> NewSecurityDescriptor,
  ffi.Pointer<GUID> ObjectType,
  ffi.Uint8 IsDirectoryObject,
  ffi.Pointer<GENERIC_MAPPING> GenericMapping,
);

typedef _dart_ConvertToAutoInheritPrivateObjectSecurity = int Function(
  ffi.Pointer<ffi.Void> ParentDescriptor,
  ffi.Pointer<ffi.Void> CurrentSecurityDescriptor,
  ffi.Pointer<ffi.Pointer<ffi.Void>> NewSecurityDescriptor,
  ffi.Pointer<GUID> ObjectType,
  int IsDirectoryObject,
  ffi.Pointer<GENERIC_MAPPING> GenericMapping,
);

typedef _c_CopySid = ffi.Int32 Function(
  ffi.Uint64 nDestinationSidLength,
  ffi.Pointer<ffi.Void> pDestinationSid,
  ffi.Pointer<ffi.Void> pSourceSid,
);

typedef _dart_CopySid = int Function(
  int nDestinationSidLength,
  ffi.Pointer<ffi.Void> pDestinationSid,
  ffi.Pointer<ffi.Void> pSourceSid,
);

typedef _c_CreatePrivateObjectSecurity = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> ParentDescriptor,
  ffi.Pointer<ffi.Void> CreatorDescriptor,
  ffi.Pointer<ffi.Pointer<ffi.Void>> NewDescriptor,
  ffi.Int32 IsDirectoryObject,
  ffi.Pointer<ffi.Void> Token,
  ffi.Pointer<GENERIC_MAPPING> GenericMapping,
);

typedef _dart_CreatePrivateObjectSecurity = int Function(
  ffi.Pointer<ffi.Void> ParentDescriptor,
  ffi.Pointer<ffi.Void> CreatorDescriptor,
  ffi.Pointer<ffi.Pointer<ffi.Void>> NewDescriptor,
  int IsDirectoryObject,
  ffi.Pointer<ffi.Void> Token,
  ffi.Pointer<GENERIC_MAPPING> GenericMapping,
);

typedef _c_CreatePrivateObjectSecurityEx = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> ParentDescriptor,
  ffi.Pointer<ffi.Void> CreatorDescriptor,
  ffi.Pointer<ffi.Pointer<ffi.Void>> NewDescriptor,
  ffi.Pointer<GUID> ObjectType,
  ffi.Int32 IsContainerObject,
  ffi.Uint64 AutoInheritFlags,
  ffi.Pointer<ffi.Void> Token,
  ffi.Pointer<GENERIC_MAPPING> GenericMapping,
);

typedef _dart_CreatePrivateObjectSecurityEx = int Function(
  ffi.Pointer<ffi.Void> ParentDescriptor,
  ffi.Pointer<ffi.Void> CreatorDescriptor,
  ffi.Pointer<ffi.Pointer<ffi.Void>> NewDescriptor,
  ffi.Pointer<GUID> ObjectType,
  int IsContainerObject,
  int AutoInheritFlags,
  ffi.Pointer<ffi.Void> Token,
  ffi.Pointer<GENERIC_MAPPING> GenericMapping,
);

typedef _c_CreatePrivateObjectSecurityWithMultipleInheritance = ffi.Int32
    Function(
  ffi.Pointer<ffi.Void> ParentDescriptor,
  ffi.Pointer<ffi.Void> CreatorDescriptor,
  ffi.Pointer<ffi.Pointer<ffi.Void>> NewDescriptor,
  ffi.Pointer<ffi.Pointer<GUID>> ObjectTypes,
  ffi.Uint64 GuidCount,
  ffi.Int32 IsContainerObject,
  ffi.Uint64 AutoInheritFlags,
  ffi.Pointer<ffi.Void> Token,
  ffi.Pointer<GENERIC_MAPPING> GenericMapping,
);

typedef _dart_CreatePrivateObjectSecurityWithMultipleInheritance = int Function(
  ffi.Pointer<ffi.Void> ParentDescriptor,
  ffi.Pointer<ffi.Void> CreatorDescriptor,
  ffi.Pointer<ffi.Pointer<ffi.Void>> NewDescriptor,
  ffi.Pointer<ffi.Pointer<GUID>> ObjectTypes,
  int GuidCount,
  int IsContainerObject,
  int AutoInheritFlags,
  ffi.Pointer<ffi.Void> Token,
  ffi.Pointer<GENERIC_MAPPING> GenericMapping,
);

typedef _c_CreateRestrictedToken = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> ExistingTokenHandle,
  ffi.Uint64 Flags,
  ffi.Uint64 DisableSidCount,
  ffi.Pointer<PSID_AND_ATTRIBUTES> SidsToDisable,
  ffi.Uint64 DeletePrivilegeCount,
  ffi.Pointer<PLUID_AND_ATTRIBUTES> PrivilegesToDelete,
  ffi.Uint64 RestrictedSidCount,
  ffi.Pointer<PSID_AND_ATTRIBUTES> SidsToRestrict,
  ffi.Pointer<ffi.Pointer<ffi.Void>> NewTokenHandle,
);

typedef _dart_CreateRestrictedToken = int Function(
  ffi.Pointer<ffi.Void> ExistingTokenHandle,
  int Flags,
  int DisableSidCount,
  ffi.Pointer<PSID_AND_ATTRIBUTES> SidsToDisable,
  int DeletePrivilegeCount,
  ffi.Pointer<PLUID_AND_ATTRIBUTES> PrivilegesToDelete,
  int RestrictedSidCount,
  ffi.Pointer<PSID_AND_ATTRIBUTES> SidsToRestrict,
  ffi.Pointer<ffi.Pointer<ffi.Void>> NewTokenHandle,
);

typedef _c_CreateWellKnownSid = ffi.Int32 Function(
  ffi.Int32 WellKnownSidType,
  ffi.Pointer<ffi.Void> DomainSid,
  ffi.Pointer<ffi.Void> pSid,
  ffi.Pointer<ffi.Uint64> cbSid,
);

typedef _dart_CreateWellKnownSid = int Function(
  int WellKnownSidType,
  ffi.Pointer<ffi.Void> DomainSid,
  ffi.Pointer<ffi.Void> pSid,
  ffi.Pointer<ffi.Uint64> cbSid,
);

typedef _c_EqualDomainSid = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pSid1,
  ffi.Pointer<ffi.Void> pSid2,
  ffi.Pointer<ffi.Int32> pfEqual,
);

typedef _dart_EqualDomainSid = int Function(
  ffi.Pointer<ffi.Void> pSid1,
  ffi.Pointer<ffi.Void> pSid2,
  ffi.Pointer<ffi.Int32> pfEqual,
);

typedef _c_DeleteAce = ffi.Int32 Function(
  ffi.Pointer<ACL> pAcl,
  ffi.Uint64 dwAceIndex,
);

typedef _dart_DeleteAce = int Function(
  ffi.Pointer<ACL> pAcl,
  int dwAceIndex,
);

typedef _c_DestroyPrivateObjectSecurity = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> ObjectDescriptor,
);

typedef _dart_DestroyPrivateObjectSecurity = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> ObjectDescriptor,
);

typedef _c_DuplicateToken = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> ExistingTokenHandle,
  ffi.Int32 ImpersonationLevel,
  ffi.Pointer<ffi.Pointer<ffi.Void>> DuplicateTokenHandle,
);

typedef _dart_DuplicateToken = int Function(
  ffi.Pointer<ffi.Void> ExistingTokenHandle,
  int ImpersonationLevel,
  ffi.Pointer<ffi.Pointer<ffi.Void>> DuplicateTokenHandle,
);

typedef _c_DuplicateTokenEx = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hExistingToken,
  ffi.Uint64 dwDesiredAccess,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpTokenAttributes,
  ffi.Int32 ImpersonationLevel,
  ffi.Int32 TokenType,
  ffi.Pointer<ffi.Pointer<ffi.Void>> phNewToken,
);

typedef _dart_DuplicateTokenEx = int Function(
  ffi.Pointer<ffi.Void> hExistingToken,
  int dwDesiredAccess,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpTokenAttributes,
  int ImpersonationLevel,
  int TokenType,
  ffi.Pointer<ffi.Pointer<ffi.Void>> phNewToken,
);

typedef _c_EqualPrefixSid = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pSid1,
  ffi.Pointer<ffi.Void> pSid2,
);

typedef _dart_EqualPrefixSid = int Function(
  ffi.Pointer<ffi.Void> pSid1,
  ffi.Pointer<ffi.Void> pSid2,
);

typedef _c_EqualSid = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pSid1,
  ffi.Pointer<ffi.Void> pSid2,
);

typedef _dart_EqualSid = int Function(
  ffi.Pointer<ffi.Void> pSid1,
  ffi.Pointer<ffi.Void> pSid2,
);

typedef _c_FindFirstFreeAce = ffi.Int32 Function(
  ffi.Pointer<ACL> pAcl,
  ffi.Pointer<ffi.Pointer<ffi.Void>> pAce,
);

typedef _dart_FindFirstFreeAce = int Function(
  ffi.Pointer<ACL> pAcl,
  ffi.Pointer<ffi.Pointer<ffi.Void>> pAce,
);

typedef _c_FreeSid = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> pSid,
);

typedef _dart_FreeSid = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> pSid,
);

typedef _c_GetAce = ffi.Int32 Function(
  ffi.Pointer<ACL> pAcl,
  ffi.Uint64 dwAceIndex,
  ffi.Pointer<ffi.Pointer<ffi.Void>> pAce,
);

typedef _dart_GetAce = int Function(
  ffi.Pointer<ACL> pAcl,
  int dwAceIndex,
  ffi.Pointer<ffi.Pointer<ffi.Void>> pAce,
);

typedef _c_GetAclInformation = ffi.Int32 Function(
  ffi.Pointer<ACL> pAcl,
  ffi.Pointer<ffi.Void> pAclInformation,
  ffi.Uint64 nAclInformationLength,
  ffi.Int32 dwAclInformationClass,
);

typedef _dart_GetAclInformation = int Function(
  ffi.Pointer<ACL> pAcl,
  ffi.Pointer<ffi.Void> pAclInformation,
  int nAclInformationLength,
  int dwAclInformationClass,
);

typedef _c_GetFileSecurityW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  ffi.Uint64 RequestedInformation,
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
  ffi.Uint64 nLength,
  ffi.Pointer<ffi.Uint64> lpnLengthNeeded,
);

typedef _dart_GetFileSecurityW = int Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  int RequestedInformation,
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
  int nLength,
  ffi.Pointer<ffi.Uint64> lpnLengthNeeded,
);

typedef _c_GetKernelObjectSecurity = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> Handle,
  ffi.Uint64 RequestedInformation,
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
  ffi.Uint64 nLength,
  ffi.Pointer<ffi.Uint64> lpnLengthNeeded,
);

typedef _dart_GetKernelObjectSecurity = int Function(
  ffi.Pointer<ffi.Void> Handle,
  int RequestedInformation,
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
  int nLength,
  ffi.Pointer<ffi.Uint64> lpnLengthNeeded,
);

typedef _c_GetLengthSid = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> pSid,
);

typedef _dart_GetLengthSid = int Function(
  ffi.Pointer<ffi.Void> pSid,
);

typedef _c_GetPrivateObjectSecurity = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> ObjectDescriptor,
  ffi.Uint64 SecurityInformation,
  ffi.Pointer<ffi.Void> ResultantDescriptor,
  ffi.Uint64 DescriptorLength,
  ffi.Pointer<ffi.Uint64> ReturnLength,
);

typedef _dart_GetPrivateObjectSecurity = int Function(
  ffi.Pointer<ffi.Void> ObjectDescriptor,
  int SecurityInformation,
  ffi.Pointer<ffi.Void> ResultantDescriptor,
  int DescriptorLength,
  ffi.Pointer<ffi.Uint64> ReturnLength,
);

typedef _c_GetSecurityDescriptorControl = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
  ffi.Pointer<ffi.Uint16> pControl,
  ffi.Pointer<ffi.Uint64> lpdwRevision,
);

typedef _dart_GetSecurityDescriptorControl = int Function(
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
  ffi.Pointer<ffi.Uint16> pControl,
  ffi.Pointer<ffi.Uint64> lpdwRevision,
);

typedef _c_GetSecurityDescriptorDacl = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
  ffi.Pointer<ffi.Int32> lpbDaclPresent,
  ffi.Pointer<ffi.Pointer<ACL>> pDacl,
  ffi.Pointer<ffi.Int32> lpbDaclDefaulted,
);

typedef _dart_GetSecurityDescriptorDacl = int Function(
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
  ffi.Pointer<ffi.Int32> lpbDaclPresent,
  ffi.Pointer<ffi.Pointer<ACL>> pDacl,
  ffi.Pointer<ffi.Int32> lpbDaclDefaulted,
);

typedef _c_GetSecurityDescriptorGroup = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
  ffi.Pointer<ffi.Pointer<ffi.Void>> pGroup,
  ffi.Pointer<ffi.Int32> lpbGroupDefaulted,
);

typedef _dart_GetSecurityDescriptorGroup = int Function(
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
  ffi.Pointer<ffi.Pointer<ffi.Void>> pGroup,
  ffi.Pointer<ffi.Int32> lpbGroupDefaulted,
);

typedef _c_GetSecurityDescriptorLength = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
);

typedef _dart_GetSecurityDescriptorLength = int Function(
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
);

typedef _c_GetSecurityDescriptorOwner = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
  ffi.Pointer<ffi.Pointer<ffi.Void>> pOwner,
  ffi.Pointer<ffi.Int32> lpbOwnerDefaulted,
);

typedef _dart_GetSecurityDescriptorOwner = int Function(
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
  ffi.Pointer<ffi.Pointer<ffi.Void>> pOwner,
  ffi.Pointer<ffi.Int32> lpbOwnerDefaulted,
);

typedef _c_GetSecurityDescriptorRMControl = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> SecurityDescriptor,
  ffi.Pointer<ffi.Uint8> RMControl,
);

typedef _dart_GetSecurityDescriptorRMControl = int Function(
  ffi.Pointer<ffi.Void> SecurityDescriptor,
  ffi.Pointer<ffi.Uint8> RMControl,
);

typedef _c_GetSecurityDescriptorSacl = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
  ffi.Pointer<ffi.Int32> lpbSaclPresent,
  ffi.Pointer<ffi.Pointer<ACL>> pSacl,
  ffi.Pointer<ffi.Int32> lpbSaclDefaulted,
);

typedef _dart_GetSecurityDescriptorSacl = int Function(
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
  ffi.Pointer<ffi.Int32> lpbSaclPresent,
  ffi.Pointer<ffi.Pointer<ACL>> pSacl,
  ffi.Pointer<ffi.Int32> lpbSaclDefaulted,
);

typedef _c_GetSidIdentifierAuthority = ffi.Pointer<PSID_IDENTIFIER_AUTHORITY>
    Function(
  ffi.Pointer<ffi.Void> pSid,
);

typedef _dart_GetSidIdentifierAuthority = ffi.Pointer<PSID_IDENTIFIER_AUTHORITY>
    Function(
  ffi.Pointer<ffi.Void> pSid,
);

typedef _c_GetSidLengthRequired = ffi.Uint64 Function(
  ffi.Uint8 nSubAuthorityCount,
);

typedef _dart_GetSidLengthRequired = int Function(
  int nSubAuthorityCount,
);

typedef _c_GetSidSubAuthority = ffi.Pointer<ffi.Uint64> Function(
  ffi.Pointer<ffi.Void> pSid,
  ffi.Uint64 nSubAuthority,
);

typedef _dart_GetSidSubAuthority = ffi.Pointer<ffi.Uint64> Function(
  ffi.Pointer<ffi.Void> pSid,
  int nSubAuthority,
);

typedef _c_GetSidSubAuthorityCount = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<ffi.Void> pSid,
);

typedef _dart_GetSidSubAuthorityCount = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<ffi.Void> pSid,
);

typedef _c_GetTokenInformation = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> TokenHandle,
  ffi.Int32 TokenInformationClass,
  ffi.Pointer<ffi.Void> TokenInformation,
  ffi.Uint64 TokenInformationLength,
  ffi.Pointer<ffi.Uint64> ReturnLength,
);

typedef _dart_GetTokenInformation = int Function(
  ffi.Pointer<ffi.Void> TokenHandle,
  int TokenInformationClass,
  ffi.Pointer<ffi.Void> TokenInformation,
  int TokenInformationLength,
  ffi.Pointer<ffi.Uint64> ReturnLength,
);

typedef _c_GetWindowsAccountDomainSid = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pSid,
  ffi.Pointer<ffi.Void> pDomainSid,
  ffi.Pointer<ffi.Uint64> cbDomainSid,
);

typedef _dart_GetWindowsAccountDomainSid = int Function(
  ffi.Pointer<ffi.Void> pSid,
  ffi.Pointer<ffi.Void> pDomainSid,
  ffi.Pointer<ffi.Uint64> cbDomainSid,
);

typedef _c_ImpersonateAnonymousToken = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> ThreadHandle,
);

typedef _dart_ImpersonateAnonymousToken = int Function(
  ffi.Pointer<ffi.Void> ThreadHandle,
);

typedef _c_ImpersonateLoggedOnUser = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hToken,
);

typedef _dart_ImpersonateLoggedOnUser = int Function(
  ffi.Pointer<ffi.Void> hToken,
);

typedef _c_ImpersonateSelf = ffi.Int32 Function(
  ffi.Int32 ImpersonationLevel,
);

typedef _dart_ImpersonateSelf = int Function(
  int ImpersonationLevel,
);

typedef _c_InitializeAcl = ffi.Int32 Function(
  ffi.Pointer<ACL> pAcl,
  ffi.Uint64 nAclLength,
  ffi.Uint64 dwAclRevision,
);

typedef _dart_InitializeAcl = int Function(
  ffi.Pointer<ACL> pAcl,
  int nAclLength,
  int dwAclRevision,
);

typedef _c_InitializeSecurityDescriptor = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
  ffi.Uint64 dwRevision,
);

typedef _dart_InitializeSecurityDescriptor = int Function(
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
  int dwRevision,
);

typedef _c_InitializeSid = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> Sid,
  ffi.Pointer<PSID_IDENTIFIER_AUTHORITY> pIdentifierAuthority,
  ffi.Uint8 nSubAuthorityCount,
);

typedef _dart_InitializeSid = int Function(
  ffi.Pointer<ffi.Void> Sid,
  ffi.Pointer<PSID_IDENTIFIER_AUTHORITY> pIdentifierAuthority,
  int nSubAuthorityCount,
);

typedef _c_IsTokenRestricted = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> TokenHandle,
);

typedef _dart_IsTokenRestricted = int Function(
  ffi.Pointer<ffi.Void> TokenHandle,
);

typedef _c_IsValidAcl = ffi.Int32 Function(
  ffi.Pointer<ACL> pAcl,
);

typedef _dart_IsValidAcl = int Function(
  ffi.Pointer<ACL> pAcl,
);

typedef _c_IsValidSecurityDescriptor = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
);

typedef _dart_IsValidSecurityDescriptor = int Function(
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
);

typedef _c_IsValidSid = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pSid,
);

typedef _dart_IsValidSid = int Function(
  ffi.Pointer<ffi.Void> pSid,
);

typedef _c_IsWellKnownSid = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pSid,
  ffi.Int32 WellKnownSidType,
);

typedef _dart_IsWellKnownSid = int Function(
  ffi.Pointer<ffi.Void> pSid,
  int WellKnownSidType,
);

typedef _c_MakeAbsoluteSD = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pSelfRelativeSecurityDescriptor,
  ffi.Pointer<ffi.Void> pAbsoluteSecurityDescriptor,
  ffi.Pointer<ffi.Uint64> lpdwAbsoluteSecurityDescriptorSize,
  ffi.Pointer<ACL> pDacl,
  ffi.Pointer<ffi.Uint64> lpdwDaclSize,
  ffi.Pointer<ACL> pSacl,
  ffi.Pointer<ffi.Uint64> lpdwSaclSize,
  ffi.Pointer<ffi.Void> pOwner,
  ffi.Pointer<ffi.Uint64> lpdwOwnerSize,
  ffi.Pointer<ffi.Void> pPrimaryGroup,
  ffi.Pointer<ffi.Uint64> lpdwPrimaryGroupSize,
);

typedef _dart_MakeAbsoluteSD = int Function(
  ffi.Pointer<ffi.Void> pSelfRelativeSecurityDescriptor,
  ffi.Pointer<ffi.Void> pAbsoluteSecurityDescriptor,
  ffi.Pointer<ffi.Uint64> lpdwAbsoluteSecurityDescriptorSize,
  ffi.Pointer<ACL> pDacl,
  ffi.Pointer<ffi.Uint64> lpdwDaclSize,
  ffi.Pointer<ACL> pSacl,
  ffi.Pointer<ffi.Uint64> lpdwSaclSize,
  ffi.Pointer<ffi.Void> pOwner,
  ffi.Pointer<ffi.Uint64> lpdwOwnerSize,
  ffi.Pointer<ffi.Void> pPrimaryGroup,
  ffi.Pointer<ffi.Uint64> lpdwPrimaryGroupSize,
);

typedef _c_MakeSelfRelativeSD = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pAbsoluteSecurityDescriptor,
  ffi.Pointer<ffi.Void> pSelfRelativeSecurityDescriptor,
  ffi.Pointer<ffi.Uint64> lpdwBufferLength,
);

typedef _dart_MakeSelfRelativeSD = int Function(
  ffi.Pointer<ffi.Void> pAbsoluteSecurityDescriptor,
  ffi.Pointer<ffi.Void> pSelfRelativeSecurityDescriptor,
  ffi.Pointer<ffi.Uint64> lpdwBufferLength,
);

typedef _c_MapGenericMask = ffi.Void Function(
  ffi.Pointer<ffi.Uint64> AccessMask,
  ffi.Pointer<GENERIC_MAPPING> GenericMapping,
);

typedef _dart_MapGenericMask = void Function(
  ffi.Pointer<ffi.Uint64> AccessMask,
  ffi.Pointer<GENERIC_MAPPING> GenericMapping,
);

typedef _c_ObjectCloseAuditAlarmW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> SubsystemName,
  ffi.Pointer<ffi.Void> HandleId,
  ffi.Int32 GenerateOnClose,
);

typedef _dart_ObjectCloseAuditAlarmW = int Function(
  ffi.Pointer<ffi.Uint16> SubsystemName,
  ffi.Pointer<ffi.Void> HandleId,
  int GenerateOnClose,
);

typedef _c_ObjectDeleteAuditAlarmW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> SubsystemName,
  ffi.Pointer<ffi.Void> HandleId,
  ffi.Int32 GenerateOnClose,
);

typedef _dart_ObjectDeleteAuditAlarmW = int Function(
  ffi.Pointer<ffi.Uint16> SubsystemName,
  ffi.Pointer<ffi.Void> HandleId,
  int GenerateOnClose,
);

typedef _c_ObjectOpenAuditAlarmW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> SubsystemName,
  ffi.Pointer<ffi.Void> HandleId,
  ffi.Pointer<ffi.Uint16> ObjectTypeName,
  ffi.Pointer<ffi.Uint16> ObjectName,
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
  ffi.Pointer<ffi.Void> ClientToken,
  ffi.Uint64 DesiredAccess,
  ffi.Uint64 GrantedAccess,
  ffi.Pointer<PPRIVILEGE_SET> Privileges,
  ffi.Int32 ObjectCreation,
  ffi.Int32 AccessGranted,
  ffi.Pointer<ffi.Int32> GenerateOnClose,
);

typedef _dart_ObjectOpenAuditAlarmW = int Function(
  ffi.Pointer<ffi.Uint16> SubsystemName,
  ffi.Pointer<ffi.Void> HandleId,
  ffi.Pointer<ffi.Uint16> ObjectTypeName,
  ffi.Pointer<ffi.Uint16> ObjectName,
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
  ffi.Pointer<ffi.Void> ClientToken,
  int DesiredAccess,
  int GrantedAccess,
  ffi.Pointer<PPRIVILEGE_SET> Privileges,
  int ObjectCreation,
  int AccessGranted,
  ffi.Pointer<ffi.Int32> GenerateOnClose,
);

typedef _c_ObjectPrivilegeAuditAlarmW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> SubsystemName,
  ffi.Pointer<ffi.Void> HandleId,
  ffi.Pointer<ffi.Void> ClientToken,
  ffi.Uint64 DesiredAccess,
  ffi.Pointer<PPRIVILEGE_SET> Privileges,
  ffi.Int32 AccessGranted,
);

typedef _dart_ObjectPrivilegeAuditAlarmW = int Function(
  ffi.Pointer<ffi.Uint16> SubsystemName,
  ffi.Pointer<ffi.Void> HandleId,
  ffi.Pointer<ffi.Void> ClientToken,
  int DesiredAccess,
  ffi.Pointer<PPRIVILEGE_SET> Privileges,
  int AccessGranted,
);

typedef _c_PrivilegeCheck = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> ClientToken,
  ffi.Pointer<PPRIVILEGE_SET> RequiredPrivileges,
  ffi.Pointer<ffi.Int32> pfResult,
);

typedef _dart_PrivilegeCheck = int Function(
  ffi.Pointer<ffi.Void> ClientToken,
  ffi.Pointer<PPRIVILEGE_SET> RequiredPrivileges,
  ffi.Pointer<ffi.Int32> pfResult,
);

typedef _c_PrivilegedServiceAuditAlarmW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> SubsystemName,
  ffi.Pointer<ffi.Uint16> ServiceName,
  ffi.Pointer<ffi.Void> ClientToken,
  ffi.Pointer<PPRIVILEGE_SET> Privileges,
  ffi.Int32 AccessGranted,
);

typedef _dart_PrivilegedServiceAuditAlarmW = int Function(
  ffi.Pointer<ffi.Uint16> SubsystemName,
  ffi.Pointer<ffi.Uint16> ServiceName,
  ffi.Pointer<ffi.Void> ClientToken,
  ffi.Pointer<PPRIVILEGE_SET> Privileges,
  int AccessGranted,
);

typedef _c_QuerySecurityAccessMask = ffi.Void Function(
  ffi.Uint64 SecurityInformation,
  ffi.Pointer<ffi.Uint64> DesiredAccess,
);

typedef _dart_QuerySecurityAccessMask = void Function(
  int SecurityInformation,
  ffi.Pointer<ffi.Uint64> DesiredAccess,
);

typedef _c_RevertToSelf = ffi.Int32 Function();

typedef _dart_RevertToSelf = int Function();

typedef _c_SetAclInformation = ffi.Int32 Function(
  ffi.Pointer<ACL> pAcl,
  ffi.Pointer<ffi.Void> pAclInformation,
  ffi.Uint64 nAclInformationLength,
  ffi.Int32 dwAclInformationClass,
);

typedef _dart_SetAclInformation = int Function(
  ffi.Pointer<ACL> pAcl,
  ffi.Pointer<ffi.Void> pAclInformation,
  int nAclInformationLength,
  int dwAclInformationClass,
);

typedef _c_SetFileSecurityW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  ffi.Uint64 SecurityInformation,
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
);

typedef _dart_SetFileSecurityW = int Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  int SecurityInformation,
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
);

typedef _c_SetKernelObjectSecurity = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> Handle,
  ffi.Uint64 SecurityInformation,
  ffi.Pointer<ffi.Void> SecurityDescriptor,
);

typedef _dart_SetKernelObjectSecurity = int Function(
  ffi.Pointer<ffi.Void> Handle,
  int SecurityInformation,
  ffi.Pointer<ffi.Void> SecurityDescriptor,
);

typedef _c_SetPrivateObjectSecurity = ffi.Int32 Function(
  ffi.Uint64 SecurityInformation,
  ffi.Pointer<ffi.Void> ModificationDescriptor,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ObjectsSecurityDescriptor,
  ffi.Pointer<GENERIC_MAPPING> GenericMapping,
  ffi.Pointer<ffi.Void> Token,
);

typedef _dart_SetPrivateObjectSecurity = int Function(
  int SecurityInformation,
  ffi.Pointer<ffi.Void> ModificationDescriptor,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ObjectsSecurityDescriptor,
  ffi.Pointer<GENERIC_MAPPING> GenericMapping,
  ffi.Pointer<ffi.Void> Token,
);

typedef _c_SetPrivateObjectSecurityEx = ffi.Int32 Function(
  ffi.Uint64 SecurityInformation,
  ffi.Pointer<ffi.Void> ModificationDescriptor,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ObjectsSecurityDescriptor,
  ffi.Uint64 AutoInheritFlags,
  ffi.Pointer<GENERIC_MAPPING> GenericMapping,
  ffi.Pointer<ffi.Void> Token,
);

typedef _dart_SetPrivateObjectSecurityEx = int Function(
  int SecurityInformation,
  ffi.Pointer<ffi.Void> ModificationDescriptor,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ObjectsSecurityDescriptor,
  int AutoInheritFlags,
  ffi.Pointer<GENERIC_MAPPING> GenericMapping,
  ffi.Pointer<ffi.Void> Token,
);

typedef _c_SetSecurityAccessMask = ffi.Void Function(
  ffi.Uint64 SecurityInformation,
  ffi.Pointer<ffi.Uint64> DesiredAccess,
);

typedef _dart_SetSecurityAccessMask = void Function(
  int SecurityInformation,
  ffi.Pointer<ffi.Uint64> DesiredAccess,
);

typedef _c_SetSecurityDescriptorControl = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
  ffi.Uint16 ControlBitsOfInterest,
  ffi.Uint16 ControlBitsToSet,
);

typedef _dart_SetSecurityDescriptorControl = int Function(
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
  int ControlBitsOfInterest,
  int ControlBitsToSet,
);

typedef _c_SetSecurityDescriptorDacl = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
  ffi.Int32 bDaclPresent,
  ffi.Pointer<ACL> pDacl,
  ffi.Int32 bDaclDefaulted,
);

typedef _dart_SetSecurityDescriptorDacl = int Function(
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
  int bDaclPresent,
  ffi.Pointer<ACL> pDacl,
  int bDaclDefaulted,
);

typedef _c_SetSecurityDescriptorGroup = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
  ffi.Pointer<ffi.Void> pGroup,
  ffi.Int32 bGroupDefaulted,
);

typedef _dart_SetSecurityDescriptorGroup = int Function(
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
  ffi.Pointer<ffi.Void> pGroup,
  int bGroupDefaulted,
);

typedef _c_SetSecurityDescriptorOwner = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
  ffi.Pointer<ffi.Void> pOwner,
  ffi.Int32 bOwnerDefaulted,
);

typedef _dart_SetSecurityDescriptorOwner = int Function(
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
  ffi.Pointer<ffi.Void> pOwner,
  int bOwnerDefaulted,
);

typedef _c_SetSecurityDescriptorRMControl = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> SecurityDescriptor,
  ffi.Pointer<ffi.Uint8> RMControl,
);

typedef _dart_SetSecurityDescriptorRMControl = int Function(
  ffi.Pointer<ffi.Void> SecurityDescriptor,
  ffi.Pointer<ffi.Uint8> RMControl,
);

typedef _c_SetSecurityDescriptorSacl = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
  ffi.Int32 bSaclPresent,
  ffi.Pointer<ACL> pSacl,
  ffi.Int32 bSaclDefaulted,
);

typedef _dart_SetSecurityDescriptorSacl = int Function(
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
  int bSaclPresent,
  ffi.Pointer<ACL> pSacl,
  int bSaclDefaulted,
);

typedef _c_SetTokenInformation = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> TokenHandle,
  ffi.Int32 TokenInformationClass,
  ffi.Pointer<ffi.Void> TokenInformation,
  ffi.Uint64 TokenInformationLength,
);

typedef _dart_SetTokenInformation = int Function(
  ffi.Pointer<ffi.Void> TokenHandle,
  int TokenInformationClass,
  ffi.Pointer<ffi.Void> TokenInformation,
  int TokenInformationLength,
);

typedef _c_SetCachedSigningLevel = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> SourceFiles,
  ffi.Uint64 SourceFileCount,
  ffi.Uint64 Flags,
  ffi.Pointer<ffi.Void> TargetFile,
);

typedef _dart_SetCachedSigningLevel = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> SourceFiles,
  int SourceFileCount,
  int Flags,
  ffi.Pointer<ffi.Void> TargetFile,
);

typedef _c_GetCachedSigningLevel = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> File,
  ffi.Pointer<ffi.Uint64> Flags,
  ffi.Pointer<ffi.Uint64> SigningLevel,
  ffi.Pointer<ffi.Uint8> Thumbprint,
  ffi.Pointer<ffi.Uint64> ThumbprintSize,
  ffi.Pointer<ffi.Uint64> ThumbprintAlgorithm,
);

typedef _dart_GetCachedSigningLevel = int Function(
  ffi.Pointer<ffi.Void> File,
  ffi.Pointer<ffi.Uint64> Flags,
  ffi.Pointer<ffi.Uint64> SigningLevel,
  ffi.Pointer<ffi.Uint8> Thumbprint,
  ffi.Pointer<ffi.Uint64> ThumbprintSize,
  ffi.Pointer<ffi.Uint64> ThumbprintAlgorithm,
);

typedef _c_CveEventWrite = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> CveId,
  ffi.Pointer<ffi.Uint16> AdditionalDetails,
);

typedef _dart_CveEventWrite = int Function(
  ffi.Pointer<ffi.Uint16> CveId,
  ffi.Pointer<ffi.Uint16> AdditionalDetails,
);

typedef _c_DeriveCapabilitySidsFromName = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> CapName,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Void>>> CapabilityGroupSids,
  ffi.Pointer<ffi.Uint64> CapabilityGroupSidCount,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Void>>> CapabilitySids,
  ffi.Pointer<ffi.Uint64> CapabilitySidCount,
);

typedef _dart_DeriveCapabilitySidsFromName = int Function(
  ffi.Pointer<ffi.Uint16> CapName,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Void>>> CapabilityGroupSids,
  ffi.Pointer<ffi.Uint64> CapabilityGroupSidCount,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Void>>> CapabilitySids,
  ffi.Pointer<ffi.Uint64> CapabilitySidCount,
);

typedef _c_CreatePrivateNamespaceW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpPrivateNamespaceAttributes,
  ffi.Pointer<ffi.Void> lpBoundaryDescriptor,
  ffi.Pointer<ffi.Uint16> lpAliasPrefix,
);

typedef _dart_CreatePrivateNamespaceW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpPrivateNamespaceAttributes,
  ffi.Pointer<ffi.Void> lpBoundaryDescriptor,
  ffi.Pointer<ffi.Uint16> lpAliasPrefix,
);

typedef _c_OpenPrivateNamespaceW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> lpBoundaryDescriptor,
  ffi.Pointer<ffi.Uint16> lpAliasPrefix,
);

typedef _dart_OpenPrivateNamespaceW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> lpBoundaryDescriptor,
  ffi.Pointer<ffi.Uint16> lpAliasPrefix,
);

typedef _c_ClosePrivateNamespace = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void> Handle,
  ffi.Uint64 Flags,
);

typedef _dart_ClosePrivateNamespace = int Function(
  ffi.Pointer<ffi.Void> Handle,
  int Flags,
);

typedef _c_CreateBoundaryDescriptorW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> Name,
  ffi.Uint64 Flags,
);

typedef _dart_CreateBoundaryDescriptorW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> Name,
  int Flags,
);

typedef _c_AddSIDToBoundaryDescriptor = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> BoundaryDescriptor,
  ffi.Pointer<ffi.Void> RequiredSid,
);

typedef _dart_AddSIDToBoundaryDescriptor = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> BoundaryDescriptor,
  ffi.Pointer<ffi.Void> RequiredSid,
);

typedef _c_DeleteBoundaryDescriptor = ffi.Void Function(
  ffi.Pointer<ffi.Void> BoundaryDescriptor,
);

typedef _dart_DeleteBoundaryDescriptor = void Function(
  ffi.Pointer<ffi.Void> BoundaryDescriptor,
);

typedef _c_GetNumaHighestNodeNumber = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> HighestNodeNumber,
);

typedef _dart_GetNumaHighestNodeNumber = int Function(
  ffi.Pointer<ffi.Uint64> HighestNodeNumber,
);

typedef _c_GetNumaNodeProcessorMaskEx = ffi.Int32 Function(
  ffi.Uint16 Node,
  ffi.Pointer<PGROUP_AFFINITY> ProcessorMask,
);

typedef _dart_GetNumaNodeProcessorMaskEx = int Function(
  int Node,
  ffi.Pointer<PGROUP_AFFINITY> ProcessorMask,
);

typedef _c_GetNumaProximityNodeEx = ffi.Int32 Function(
  ffi.Uint64 ProximityId,
  ffi.Pointer<ffi.Uint16> NodeNumber,
);

typedef _dart_GetNumaProximityNodeEx = int Function(
  int ProximityId,
  ffi.Pointer<ffi.Uint16> NodeNumber,
);

typedef _c_GetProcessGroupAffinity = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Uint16> GroupCount,
  ffi.Pointer<ffi.Uint16> GroupArray,
);

typedef _dart_GetProcessGroupAffinity = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Uint16> GroupCount,
  ffi.Pointer<ffi.Uint16> GroupArray,
);

typedef _c_GetThreadGroupAffinity = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hThread,
  ffi.Pointer<PGROUP_AFFINITY> GroupAffinity,
);

typedef _dart_GetThreadGroupAffinity = int Function(
  ffi.Pointer<ffi.Void> hThread,
  ffi.Pointer<PGROUP_AFFINITY> GroupAffinity,
);

typedef _c_SetThreadGroupAffinity = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hThread,
  ffi.Pointer<PGROUP_AFFINITY> GroupAffinity,
  ffi.Pointer<PGROUP_AFFINITY> PreviousGroupAffinity,
);

typedef _dart_SetThreadGroupAffinity = int Function(
  ffi.Pointer<ffi.Void> hThread,
  ffi.Pointer<PGROUP_AFFINITY> GroupAffinity,
  ffi.Pointer<PGROUP_AFFINITY> PreviousGroupAffinity,
);

typedef _c_GetAppContainerNamedObjectPath = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> Token,
  ffi.Pointer<ffi.Void> AppContainerSid,
  ffi.Uint64 ObjectPathLength,
  ffi.Pointer<ffi.Uint16> ObjectPath,
  ffi.Pointer<ffi.Uint64> ReturnLength,
);

typedef _dart_GetAppContainerNamedObjectPath = int Function(
  ffi.Pointer<ffi.Void> Token,
  ffi.Pointer<ffi.Void> AppContainerSid,
  int ObjectPathLength,
  ffi.Pointer<ffi.Uint16> ObjectPath,
  ffi.Pointer<ffi.Uint64> ReturnLength,
);

typedef _c_QueryThreadCycleTime = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> ThreadHandle,
  ffi.Pointer<ffi.Uint64> CycleTime,
);

typedef _dart_QueryThreadCycleTime = int Function(
  ffi.Pointer<ffi.Void> ThreadHandle,
  ffi.Pointer<ffi.Uint64> CycleTime,
);

typedef _c_QueryProcessCycleTime = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> ProcessHandle,
  ffi.Pointer<ffi.Uint64> CycleTime,
);

typedef _dart_QueryProcessCycleTime = int Function(
  ffi.Pointer<ffi.Void> ProcessHandle,
  ffi.Pointer<ffi.Uint64> CycleTime,
);

typedef _c_QueryIdleProcessorCycleTime = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> BufferLength,
  ffi.Pointer<ffi.Uint64> ProcessorIdleCycleTime,
);

typedef _dart_QueryIdleProcessorCycleTime = int Function(
  ffi.Pointer<ffi.Uint64> BufferLength,
  ffi.Pointer<ffi.Uint64> ProcessorIdleCycleTime,
);

typedef _c_QueryIdleProcessorCycleTimeEx = ffi.Int32 Function(
  ffi.Uint16 Group,
  ffi.Pointer<ffi.Uint64> BufferLength,
  ffi.Pointer<ffi.Uint64> ProcessorIdleCycleTime,
);

typedef _dart_QueryIdleProcessorCycleTimeEx = int Function(
  int Group,
  ffi.Pointer<ffi.Uint64> BufferLength,
  ffi.Pointer<ffi.Uint64> ProcessorIdleCycleTime,
);

typedef _c_QueryInterruptTimePrecise = ffi.Void Function(
  ffi.Pointer<ffi.Uint64> lpInterruptTimePrecise,
);

typedef _dart_QueryInterruptTimePrecise = void Function(
  ffi.Pointer<ffi.Uint64> lpInterruptTimePrecise,
);

typedef _c_QueryUnbiasedInterruptTimePrecise = ffi.Void Function(
  ffi.Pointer<ffi.Uint64> lpUnbiasedInterruptTimePrecise,
);

typedef _dart_QueryUnbiasedInterruptTimePrecise = void Function(
  ffi.Pointer<ffi.Uint64> lpUnbiasedInterruptTimePrecise,
);

typedef _c_QueryInterruptTime = ffi.Void Function(
  ffi.Pointer<ffi.Uint64> lpInterruptTime,
);

typedef _dart_QueryInterruptTime = void Function(
  ffi.Pointer<ffi.Uint64> lpInterruptTime,
);

typedef _c_QueryUnbiasedInterruptTime = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> UnbiasedTime,
);

typedef _dart_QueryUnbiasedInterruptTime = int Function(
  ffi.Pointer<ffi.Uint64> UnbiasedTime,
);

typedef _c_QueryAuxiliaryCounterFrequency = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint64> lpAuxiliaryCounterFrequency,
);

typedef _dart_QueryAuxiliaryCounterFrequency = int Function(
  ffi.Pointer<ffi.Uint64> lpAuxiliaryCounterFrequency,
);

typedef _c_ConvertAuxiliaryCounterToPerformanceCounter = ffi.Int64 Function(
  ffi.Uint64 ullAuxiliaryCounterValue,
  ffi.Pointer<ffi.Uint64> lpPerformanceCounterValue,
  ffi.Pointer<ffi.Uint64> lpConversionError,
);

typedef _dart_ConvertAuxiliaryCounterToPerformanceCounter = int Function(
  int ullAuxiliaryCounterValue,
  ffi.Pointer<ffi.Uint64> lpPerformanceCounterValue,
  ffi.Pointer<ffi.Uint64> lpConversionError,
);

typedef _c_ConvertPerformanceCounterToAuxiliaryCounter = ffi.Int64 Function(
  ffi.Uint64 ullPerformanceCounterValue,
  ffi.Pointer<ffi.Uint64> lpAuxiliaryCounterValue,
  ffi.Pointer<ffi.Uint64> lpConversionError,
);

typedef _dart_ConvertPerformanceCounterToAuxiliaryCounter = int Function(
  int ullPerformanceCounterValue,
  ffi.Pointer<ffi.Uint64> lpAuxiliaryCounterValue,
  ffi.Pointer<ffi.Uint64> lpConversionError,
);

typedef _c_WinMain = ffi.Int32 Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<HINSTANCE__> hPrevInstance,
  ffi.Pointer<ffi.Int8> lpCmdLine,
  ffi.Int32 nShowCmd,
);

typedef _dart_WinMain = int Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<HINSTANCE__> hPrevInstance,
  ffi.Pointer<ffi.Int8> lpCmdLine,
  int nShowCmd,
);

typedef _c_wWinMain = ffi.Int32 Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<HINSTANCE__> hPrevInstance,
  ffi.Pointer<ffi.Uint16> lpCmdLine,
  ffi.Int32 nShowCmd,
);

typedef _dart_wWinMain = int Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<HINSTANCE__> hPrevInstance,
  ffi.Pointer<ffi.Uint16> lpCmdLine,
  int nShowCmd,
);

typedef _c_GlobalAlloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint32 uFlags,
  ffi.Uint64 dwBytes,
);

typedef _dart_GlobalAlloc = ffi.Pointer<ffi.Void> Function(
  int uFlags,
  int dwBytes,
);

typedef _c_GlobalReAlloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hMem,
  ffi.Uint64 dwBytes,
  ffi.Uint32 uFlags,
);

typedef _dart_GlobalReAlloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hMem,
  int dwBytes,
  int uFlags,
);

typedef _c_GlobalSize = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> hMem,
);

typedef _dart_GlobalSize = int Function(
  ffi.Pointer<ffi.Void> hMem,
);

typedef _c_GlobalUnlock = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hMem,
);

typedef _dart_GlobalUnlock = int Function(
  ffi.Pointer<ffi.Void> hMem,
);

typedef _c_GlobalLock = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hMem,
);

typedef _dart_GlobalLock = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hMem,
);

typedef _c_GlobalFlags = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> hMem,
);

typedef _dart_GlobalFlags = int Function(
  ffi.Pointer<ffi.Void> hMem,
);

typedef _c_GlobalHandle = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> pMem,
);

typedef _dart_GlobalHandle = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> pMem,
);

typedef _c_GlobalFree = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hMem,
);

typedef _dart_GlobalFree = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hMem,
);

typedef _c_GlobalCompact = ffi.Uint64 Function(
  ffi.Uint64 dwMinFree,
);

typedef _dart_GlobalCompact = int Function(
  int dwMinFree,
);

typedef _c_GlobalFix = ffi.Void Function(
  ffi.Pointer<ffi.Void> hMem,
);

typedef _dart_GlobalFix = void Function(
  ffi.Pointer<ffi.Void> hMem,
);

typedef _c_GlobalUnfix = ffi.Void Function(
  ffi.Pointer<ffi.Void> hMem,
);

typedef _dart_GlobalUnfix = void Function(
  ffi.Pointer<ffi.Void> hMem,
);

typedef _c_GlobalWire = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hMem,
);

typedef _dart_GlobalWire = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hMem,
);

typedef _c_GlobalUnWire = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hMem,
);

typedef _dart_GlobalUnWire = int Function(
  ffi.Pointer<ffi.Void> hMem,
);

typedef _c_GlobalMemoryStatus = ffi.Void Function(
  ffi.Pointer<LPMEMORYSTATUS> lpBuffer,
);

typedef _dart_GlobalMemoryStatus = void Function(
  ffi.Pointer<LPMEMORYSTATUS> lpBuffer,
);

typedef _c_LocalAlloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint32 uFlags,
  ffi.Uint64 uBytes,
);

typedef _dart_LocalAlloc = ffi.Pointer<ffi.Void> Function(
  int uFlags,
  int uBytes,
);

typedef _c_LocalReAlloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hMem,
  ffi.Uint64 uBytes,
  ffi.Uint32 uFlags,
);

typedef _dart_LocalReAlloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hMem,
  int uBytes,
  int uFlags,
);

typedef _c_LocalLock = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hMem,
);

typedef _dart_LocalLock = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hMem,
);

typedef _c_LocalHandle = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> pMem,
);

typedef _dart_LocalHandle = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> pMem,
);

typedef _c_LocalUnlock = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hMem,
);

typedef _dart_LocalUnlock = int Function(
  ffi.Pointer<ffi.Void> hMem,
);

typedef _c_LocalSize = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> hMem,
);

typedef _dart_LocalSize = int Function(
  ffi.Pointer<ffi.Void> hMem,
);

typedef _c_LocalFlags = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> hMem,
);

typedef _dart_LocalFlags = int Function(
  ffi.Pointer<ffi.Void> hMem,
);

typedef _c_LocalFree = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hMem,
);

typedef _dart_LocalFree = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hMem,
);

typedef _c_LocalShrink = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> hMem,
  ffi.Uint32 cbNewSize,
);

typedef _dart_LocalShrink = int Function(
  ffi.Pointer<ffi.Void> hMem,
  int cbNewSize,
);

typedef _c_LocalCompact = ffi.Uint64 Function(
  ffi.Uint32 uMinFree,
);

typedef _dart_LocalCompact = int Function(
  int uMinFree,
);

typedef _c_GetBinaryTypeA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpApplicationName,
  ffi.Pointer<ffi.Uint64> lpBinaryType,
);

typedef _dart_GetBinaryTypeA = int Function(
  ffi.Pointer<ffi.Int8> lpApplicationName,
  ffi.Pointer<ffi.Uint64> lpBinaryType,
);

typedef _c_GetBinaryTypeW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpApplicationName,
  ffi.Pointer<ffi.Uint64> lpBinaryType,
);

typedef _dart_GetBinaryTypeW = int Function(
  ffi.Pointer<ffi.Uint16> lpApplicationName,
  ffi.Pointer<ffi.Uint64> lpBinaryType,
);

typedef _c_GetShortPathNameA = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> lpszLongPath,
  ffi.Pointer<ffi.Int8> lpszShortPath,
  ffi.Uint64 cchBuffer,
);

typedef _dart_GetShortPathNameA = int Function(
  ffi.Pointer<ffi.Int8> lpszLongPath,
  ffi.Pointer<ffi.Int8> lpszShortPath,
  int cchBuffer,
);

typedef _c_GetLongPathNameTransactedA = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> lpszShortPath,
  ffi.Pointer<ffi.Int8> lpszLongPath,
  ffi.Uint64 cchBuffer,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _dart_GetLongPathNameTransactedA = int Function(
  ffi.Pointer<ffi.Int8> lpszShortPath,
  ffi.Pointer<ffi.Int8> lpszLongPath,
  int cchBuffer,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _c_GetLongPathNameTransactedW = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> lpszShortPath,
  ffi.Pointer<ffi.Uint16> lpszLongPath,
  ffi.Uint64 cchBuffer,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _dart_GetLongPathNameTransactedW = int Function(
  ffi.Pointer<ffi.Uint16> lpszShortPath,
  ffi.Pointer<ffi.Uint16> lpszLongPath,
  int cchBuffer,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _c_GetProcessAffinityMask = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Uint64> lpProcessAffinityMask,
  ffi.Pointer<ffi.Uint64> lpSystemAffinityMask,
);

typedef _dart_GetProcessAffinityMask = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Uint64> lpProcessAffinityMask,
  ffi.Pointer<ffi.Uint64> lpSystemAffinityMask,
);

typedef _c_SetProcessAffinityMask = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Uint64 dwProcessAffinityMask,
);

typedef _dart_SetProcessAffinityMask = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  int dwProcessAffinityMask,
);

typedef _c_GetProcessIoCounters = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<IO_COUNTERS> lpIoCounters,
);

typedef _dart_GetProcessIoCounters = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<IO_COUNTERS> lpIoCounters,
);

typedef _c_GetProcessWorkingSetSize = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Uint64> lpMinimumWorkingSetSize,
  ffi.Pointer<ffi.Uint64> lpMaximumWorkingSetSize,
);

typedef _dart_GetProcessWorkingSetSize = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Uint64> lpMinimumWorkingSetSize,
  ffi.Pointer<ffi.Uint64> lpMaximumWorkingSetSize,
);

typedef _c_SetProcessWorkingSetSize = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Uint64 dwMinimumWorkingSetSize,
  ffi.Uint64 dwMaximumWorkingSetSize,
);

typedef _dart_SetProcessWorkingSetSize = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  int dwMinimumWorkingSetSize,
  int dwMaximumWorkingSetSize,
);

typedef _c_FatalExit = ffi.Void Function(
  ffi.Int32 ExitCode,
);

typedef _dart_FatalExit = void Function(
  int ExitCode,
);

typedef _c_SetEnvironmentStringsA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> NewEnvironment,
);

typedef _dart_SetEnvironmentStringsA = int Function(
  ffi.Pointer<ffi.Int8> NewEnvironment,
);

typedef _c_SwitchToFiber = ffi.Void Function(
  ffi.Pointer<ffi.Void> lpFiber,
);

typedef _dart_SwitchToFiber = void Function(
  ffi.Pointer<ffi.Void> lpFiber,
);

typedef _c_DeleteFiber = ffi.Void Function(
  ffi.Pointer<ffi.Void> lpFiber,
);

typedef _dart_DeleteFiber = void Function(
  ffi.Pointer<ffi.Void> lpFiber,
);

typedef _c_ConvertFiberToThread = ffi.Int32 Function();

typedef _dart_ConvertFiberToThread = int Function();

typedef LPFIBER_START_ROUTINE = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_CreateFiberEx = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 dwStackCommitSize,
  ffi.Uint64 dwStackReserveSize,
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.NativeFunction<LPFIBER_START_ROUTINE>> lpStartAddress,
  ffi.Pointer<ffi.Void> lpParameter,
);

typedef _dart_CreateFiberEx = ffi.Pointer<ffi.Void> Function(
  int dwStackCommitSize,
  int dwStackReserveSize,
  int dwFlags,
  ffi.Pointer<ffi.NativeFunction<LPFIBER_START_ROUTINE>> lpStartAddress,
  ffi.Pointer<ffi.Void> lpParameter,
);

typedef _c_ConvertThreadToFiberEx = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> lpParameter,
  ffi.Uint64 dwFlags,
);

typedef _dart_ConvertThreadToFiberEx = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> lpParameter,
  int dwFlags,
);

typedef _c_CreateFiber = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 dwStackSize,
  ffi.Pointer<ffi.NativeFunction<LPFIBER_START_ROUTINE>> lpStartAddress,
  ffi.Pointer<ffi.Void> lpParameter,
);

typedef _dart_CreateFiber = ffi.Pointer<ffi.Void> Function(
  int dwStackSize,
  ffi.Pointer<ffi.NativeFunction<LPFIBER_START_ROUTINE>> lpStartAddress,
  ffi.Pointer<ffi.Void> lpParameter,
);

typedef _c_ConvertThreadToFiber = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> lpParameter,
);

typedef _dart_ConvertThreadToFiber = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> lpParameter,
);

typedef _c_CreateUmsCompletionList = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> UmsCompletionList,
);

typedef _dart_CreateUmsCompletionList = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> UmsCompletionList,
);

typedef _c_DequeueUmsCompletionListItems = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> UmsCompletionList,
  ffi.Uint64 WaitTimeOut,
  ffi.Pointer<ffi.Pointer<ffi.Void>> UmsThreadList,
);

typedef _dart_DequeueUmsCompletionListItems = int Function(
  ffi.Pointer<ffi.Void> UmsCompletionList,
  int WaitTimeOut,
  ffi.Pointer<ffi.Pointer<ffi.Void>> UmsThreadList,
);

typedef _c_GetUmsCompletionListEvent = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> UmsCompletionList,
  ffi.Pointer<ffi.Pointer<ffi.Void>> UmsCompletionEvent,
);

typedef _dart_GetUmsCompletionListEvent = int Function(
  ffi.Pointer<ffi.Void> UmsCompletionList,
  ffi.Pointer<ffi.Pointer<ffi.Void>> UmsCompletionEvent,
);

typedef _c_ExecuteUmsThread = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> UmsThread,
);

typedef _dart_ExecuteUmsThread = int Function(
  ffi.Pointer<ffi.Void> UmsThread,
);

typedef _c_UmsThreadYield = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> SchedulerParam,
);

typedef _dart_UmsThreadYield = int Function(
  ffi.Pointer<ffi.Void> SchedulerParam,
);

typedef _c_DeleteUmsCompletionList = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> UmsCompletionList,
);

typedef _dart_DeleteUmsCompletionList = int Function(
  ffi.Pointer<ffi.Void> UmsCompletionList,
);

typedef _c_GetCurrentUmsThread = ffi.Pointer<ffi.Void> Function();

typedef _dart_GetCurrentUmsThread = ffi.Pointer<ffi.Void> Function();

typedef _c_GetNextUmsListItem = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> UmsContext,
);

typedef _dart_GetNextUmsListItem = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> UmsContext,
);

typedef _c_QueryUmsThreadInformation = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> UmsThread,
  ffi.Int32 UmsThreadInfoClass,
  ffi.Pointer<ffi.Void> UmsThreadInformation,
  ffi.Uint64 UmsThreadInformationLength,
  ffi.Pointer<ffi.Uint64> ReturnLength,
);

typedef _dart_QueryUmsThreadInformation = int Function(
  ffi.Pointer<ffi.Void> UmsThread,
  int UmsThreadInfoClass,
  ffi.Pointer<ffi.Void> UmsThreadInformation,
  int UmsThreadInformationLength,
  ffi.Pointer<ffi.Uint64> ReturnLength,
);

typedef _c_SetUmsThreadInformation = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> UmsThread,
  ffi.Int32 UmsThreadInfoClass,
  ffi.Pointer<ffi.Void> UmsThreadInformation,
  ffi.Uint64 UmsThreadInformationLength,
);

typedef _dart_SetUmsThreadInformation = int Function(
  ffi.Pointer<ffi.Void> UmsThread,
  int UmsThreadInfoClass,
  ffi.Pointer<ffi.Void> UmsThreadInformation,
  int UmsThreadInformationLength,
);

typedef _c_DeleteUmsThreadContext = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> UmsThread,
);

typedef _dart_DeleteUmsThreadContext = int Function(
  ffi.Pointer<ffi.Void> UmsThread,
);

typedef _c_CreateUmsThreadContext = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> lpUmsThread,
);

typedef _dart_CreateUmsThreadContext = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> lpUmsThread,
);

typedef _c_EnterUmsSchedulingMode = ffi.Int32 Function(
  ffi.Pointer<PUMS_SCHEDULER_STARTUP_INFO> SchedulerStartupInfo,
);

typedef _dart_EnterUmsSchedulingMode = int Function(
  ffi.Pointer<PUMS_SCHEDULER_STARTUP_INFO> SchedulerStartupInfo,
);

typedef _c_GetUmsSystemThreadInformation = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> ThreadHandle,
  ffi.Pointer<PUMS_SYSTEM_THREAD_INFORMATION> SystemThreadInfo,
);

typedef _dart_GetUmsSystemThreadInformation = int Function(
  ffi.Pointer<ffi.Void> ThreadHandle,
  ffi.Pointer<PUMS_SYSTEM_THREAD_INFORMATION> SystemThreadInfo,
);

typedef _c_SetThreadAffinityMask = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> hThread,
  ffi.Uint64 dwThreadAffinityMask,
);

typedef _dart_SetThreadAffinityMask = int Function(
  ffi.Pointer<ffi.Void> hThread,
  int dwThreadAffinityMask,
);

typedef _c_SetProcessDEPPolicy = ffi.Int32 Function(
  ffi.Uint64 dwFlags,
);

typedef _dart_SetProcessDEPPolicy = int Function(
  int dwFlags,
);

typedef _c_GetProcessDEPPolicy = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Uint64> lpFlags,
  ffi.Pointer<ffi.Int32> lpPermanent,
);

typedef _dart_GetProcessDEPPolicy = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Uint64> lpFlags,
  ffi.Pointer<ffi.Int32> lpPermanent,
);

typedef _c_RequestWakeupLatency = ffi.Int32 Function(
  ffi.Int32 latency,
);

typedef _dart_RequestWakeupLatency = int Function(
  int latency,
);

typedef _c_IsSystemResumeAutomatic = ffi.Int32 Function();

typedef _dart_IsSystemResumeAutomatic = int Function();

typedef _c_GetThreadSelectorEntry = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hThread,
  ffi.Uint64 dwSelector,
  ffi.Pointer<ffi.Void> lpSelectorEntry,
);

typedef _dart_GetThreadSelectorEntry = int Function(
  ffi.Pointer<ffi.Void> hThread,
  int dwSelector,
  ffi.Pointer<ffi.Void> lpSelectorEntry,
);

typedef _c_SetThreadExecutionState = ffi.Uint64 Function(
  ffi.Uint64 esFlags,
);

typedef _dart_SetThreadExecutionState = int Function(
  int esFlags,
);

typedef _c_PowerCreateRequest = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<PREASON_CONTEXT> Context,
);

typedef _dart_PowerCreateRequest = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<PREASON_CONTEXT> Context,
);

typedef _c_PowerSetRequest = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> PowerRequest,
  ffi.Int32 RequestType,
);

typedef _dart_PowerSetRequest = int Function(
  ffi.Pointer<ffi.Void> PowerRequest,
  int RequestType,
);

typedef _c_PowerClearRequest = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> PowerRequest,
  ffi.Int32 RequestType,
);

typedef _dart_PowerClearRequest = int Function(
  ffi.Pointer<ffi.Void> PowerRequest,
  int RequestType,
);

typedef _c_SetFileCompletionNotificationModes = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> FileHandle,
  ffi.Uint8 Flags,
);

typedef _dart_SetFileCompletionNotificationModes = int Function(
  ffi.Pointer<ffi.Void> FileHandle,
  int Flags,
);

typedef _c_Wow64GetThreadSelectorEntry = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hThread,
  ffi.Uint64 dwSelector,
  ffi.Pointer<PWOW64_LDT_ENTRY> lpSelectorEntry,
);

typedef _dart_Wow64GetThreadSelectorEntry = int Function(
  ffi.Pointer<ffi.Void> hThread,
  int dwSelector,
  ffi.Pointer<PWOW64_LDT_ENTRY> lpSelectorEntry,
);

typedef _c_DebugSetProcessKillOnExit = ffi.Int32 Function(
  ffi.Int32 KillOnExit,
);

typedef _dart_DebugSetProcessKillOnExit = int Function(
  int KillOnExit,
);

typedef _c_DebugBreakProcess = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> Process,
);

typedef _dart_DebugBreakProcess = int Function(
  ffi.Pointer<ffi.Void> Process,
);

typedef _c_PulseEvent = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hEvent,
);

typedef _dart_PulseEvent = int Function(
  ffi.Pointer<ffi.Void> hEvent,
);

typedef _c_GlobalDeleteAtom = ffi.Uint16 Function(
  ffi.Uint16 nAtom,
);

typedef _dart_GlobalDeleteAtom = int Function(
  int nAtom,
);

typedef _c_InitAtomTable = ffi.Int32 Function(
  ffi.Uint64 nSize,
);

typedef _dart_InitAtomTable = int Function(
  int nSize,
);

typedef _c_DeleteAtom = ffi.Uint16 Function(
  ffi.Uint16 nAtom,
);

typedef _dart_DeleteAtom = int Function(
  int nAtom,
);

typedef _c_SetHandleCount = ffi.Uint32 Function(
  ffi.Uint32 uNumber,
);

typedef _dart_SetHandleCount = int Function(
  int uNumber,
);

typedef _c_RequestDeviceWakeup = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hDevice,
);

typedef _dart_RequestDeviceWakeup = int Function(
  ffi.Pointer<ffi.Void> hDevice,
);

typedef _c_CancelDeviceWakeupRequest = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hDevice,
);

typedef _dart_CancelDeviceWakeupRequest = int Function(
  ffi.Pointer<ffi.Void> hDevice,
);

typedef _c_GetDevicePowerState = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hDevice,
  ffi.Pointer<ffi.Int32> pfOn,
);

typedef _dart_GetDevicePowerState = int Function(
  ffi.Pointer<ffi.Void> hDevice,
  ffi.Pointer<ffi.Int32> pfOn,
);

typedef _c_SetMessageWaitingIndicator = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hMsgIndicator,
  ffi.Uint64 ulMsgCount,
);

typedef _dart_SetMessageWaitingIndicator = int Function(
  ffi.Pointer<ffi.Void> hMsgIndicator,
  int ulMsgCount,
);

typedef _c_SetFileShortNameA = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<ffi.Int8> lpShortName,
);

typedef _dart_SetFileShortNameA = int Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<ffi.Int8> lpShortName,
);

typedef _c_SetFileShortNameW = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<ffi.Uint16> lpShortName,
);

typedef _dart_SetFileShortNameW = int Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<ffi.Uint16> lpShortName,
);

typedef _c_LoadModule = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> lpModuleName,
  ffi.Pointer<ffi.Void> lpParameterBlock,
);

typedef _dart_LoadModule = int Function(
  ffi.Pointer<ffi.Int8> lpModuleName,
  ffi.Pointer<ffi.Void> lpParameterBlock,
);

typedef _c_WinExec = ffi.Uint32 Function(
  ffi.Pointer<ffi.Int8> lpCmdLine,
  ffi.Uint32 uCmdShow,
);

typedef _dart_WinExec = int Function(
  ffi.Pointer<ffi.Int8> lpCmdLine,
  int uCmdShow,
);

typedef _c_ClearCommBreak = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
);

typedef _dart_ClearCommBreak = int Function(
  ffi.Pointer<ffi.Void> hFile,
);

typedef _c_ClearCommError = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<ffi.Uint64> lpErrors,
  ffi.Pointer<LPCOMSTAT> lpStat,
);

typedef _dart_ClearCommError = int Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<ffi.Uint64> lpErrors,
  ffi.Pointer<LPCOMSTAT> lpStat,
);

typedef _c_SetupComm = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Uint64 dwInQueue,
  ffi.Uint64 dwOutQueue,
);

typedef _dart_SetupComm = int Function(
  ffi.Pointer<ffi.Void> hFile,
  int dwInQueue,
  int dwOutQueue,
);

typedef _c_EscapeCommFunction = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Uint64 dwFunc,
);

typedef _dart_EscapeCommFunction = int Function(
  ffi.Pointer<ffi.Void> hFile,
  int dwFunc,
);

typedef _c_GetCommConfig = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hCommDev,
  ffi.Pointer<LPCOMMCONFIG> lpCC,
  ffi.Pointer<ffi.Uint64> lpdwSize,
);

typedef _dart_GetCommConfig = int Function(
  ffi.Pointer<ffi.Void> hCommDev,
  ffi.Pointer<LPCOMMCONFIG> lpCC,
  ffi.Pointer<ffi.Uint64> lpdwSize,
);

typedef _c_GetCommMask = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<ffi.Uint64> lpEvtMask,
);

typedef _dart_GetCommMask = int Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<ffi.Uint64> lpEvtMask,
);

typedef _c_GetCommProperties = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<LPCOMMPROP> lpCommProp,
);

typedef _dart_GetCommProperties = int Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<LPCOMMPROP> lpCommProp,
);

typedef _c_GetCommModemStatus = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<ffi.Uint64> lpModemStat,
);

typedef _dart_GetCommModemStatus = int Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<ffi.Uint64> lpModemStat,
);

typedef _c_GetCommState = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<LPDCB> lpDCB,
);

typedef _dart_GetCommState = int Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<LPDCB> lpDCB,
);

typedef _c_GetCommTimeouts = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<LPCOMMTIMEOUTS> lpCommTimeouts,
);

typedef _dart_GetCommTimeouts = int Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<LPCOMMTIMEOUTS> lpCommTimeouts,
);

typedef _c_PurgeComm = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Uint64 dwFlags,
);

typedef _dart_PurgeComm = int Function(
  ffi.Pointer<ffi.Void> hFile,
  int dwFlags,
);

typedef _c_SetCommBreak = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
);

typedef _dart_SetCommBreak = int Function(
  ffi.Pointer<ffi.Void> hFile,
);

typedef _c_SetCommConfig = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hCommDev,
  ffi.Pointer<LPCOMMCONFIG> lpCC,
  ffi.Uint64 dwSize,
);

typedef _dart_SetCommConfig = int Function(
  ffi.Pointer<ffi.Void> hCommDev,
  ffi.Pointer<LPCOMMCONFIG> lpCC,
  int dwSize,
);

typedef _c_SetCommMask = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Uint64 dwEvtMask,
);

typedef _dart_SetCommMask = int Function(
  ffi.Pointer<ffi.Void> hFile,
  int dwEvtMask,
);

typedef _c_SetCommState = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<LPDCB> lpDCB,
);

typedef _dart_SetCommState = int Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<LPDCB> lpDCB,
);

typedef _c_SetCommTimeouts = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<LPCOMMTIMEOUTS> lpCommTimeouts,
);

typedef _dart_SetCommTimeouts = int Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<LPCOMMTIMEOUTS> lpCommTimeouts,
);

typedef _c_TransmitCommChar = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Int8 cChar,
);

typedef _dart_TransmitCommChar = int Function(
  ffi.Pointer<ffi.Void> hFile,
  int cChar,
);

typedef _c_WaitCommEvent = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<ffi.Uint64> lpEvtMask,
  ffi.Pointer<LPOVERLAPPED> lpOverlapped,
);

typedef _dart_WaitCommEvent = int Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<ffi.Uint64> lpEvtMask,
  ffi.Pointer<LPOVERLAPPED> lpOverlapped,
);

typedef _c_OpenCommPort = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 uPortNumber,
  ffi.Uint64 dwDesiredAccess,
  ffi.Uint64 dwFlagsAndAttributes,
);

typedef _dart_OpenCommPort = ffi.Pointer<ffi.Void> Function(
  int uPortNumber,
  int dwDesiredAccess,
  int dwFlagsAndAttributes,
);

typedef _c_GetCommPorts = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint64> lpPortNumbers,
  ffi.Uint64 uPortNumbersCount,
  ffi.Pointer<ffi.Uint64> puPortNumbersFound,
);

typedef _dart_GetCommPorts = int Function(
  ffi.Pointer<ffi.Uint64> lpPortNumbers,
  int uPortNumbersCount,
  ffi.Pointer<ffi.Uint64> puPortNumbersFound,
);

typedef _c_SetTapePosition = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> hDevice,
  ffi.Uint64 dwPositionMethod,
  ffi.Uint64 dwPartition,
  ffi.Uint64 dwOffsetLow,
  ffi.Uint64 dwOffsetHigh,
  ffi.Int32 bImmediate,
);

typedef _dart_SetTapePosition = int Function(
  ffi.Pointer<ffi.Void> hDevice,
  int dwPositionMethod,
  int dwPartition,
  int dwOffsetLow,
  int dwOffsetHigh,
  int bImmediate,
);

typedef _c_GetTapePosition = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> hDevice,
  ffi.Uint64 dwPositionType,
  ffi.Pointer<ffi.Uint64> lpdwPartition,
  ffi.Pointer<ffi.Uint64> lpdwOffsetLow,
  ffi.Pointer<ffi.Uint64> lpdwOffsetHigh,
);

typedef _dart_GetTapePosition = int Function(
  ffi.Pointer<ffi.Void> hDevice,
  int dwPositionType,
  ffi.Pointer<ffi.Uint64> lpdwPartition,
  ffi.Pointer<ffi.Uint64> lpdwOffsetLow,
  ffi.Pointer<ffi.Uint64> lpdwOffsetHigh,
);

typedef _c_PrepareTape = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> hDevice,
  ffi.Uint64 dwOperation,
  ffi.Int32 bImmediate,
);

typedef _dart_PrepareTape = int Function(
  ffi.Pointer<ffi.Void> hDevice,
  int dwOperation,
  int bImmediate,
);

typedef _c_EraseTape = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> hDevice,
  ffi.Uint64 dwEraseType,
  ffi.Int32 bImmediate,
);

typedef _dart_EraseTape = int Function(
  ffi.Pointer<ffi.Void> hDevice,
  int dwEraseType,
  int bImmediate,
);

typedef _c_CreateTapePartition = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> hDevice,
  ffi.Uint64 dwPartitionMethod,
  ffi.Uint64 dwCount,
  ffi.Uint64 dwSize,
);

typedef _dart_CreateTapePartition = int Function(
  ffi.Pointer<ffi.Void> hDevice,
  int dwPartitionMethod,
  int dwCount,
  int dwSize,
);

typedef _c_WriteTapemark = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> hDevice,
  ffi.Uint64 dwTapemarkType,
  ffi.Uint64 dwTapemarkCount,
  ffi.Int32 bImmediate,
);

typedef _dart_WriteTapemark = int Function(
  ffi.Pointer<ffi.Void> hDevice,
  int dwTapemarkType,
  int dwTapemarkCount,
  int bImmediate,
);

typedef _c_GetTapeStatus = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> hDevice,
);

typedef _dart_GetTapeStatus = int Function(
  ffi.Pointer<ffi.Void> hDevice,
);

typedef _c_GetTapeParameters = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> hDevice,
  ffi.Uint64 dwOperation,
  ffi.Pointer<ffi.Uint64> lpdwSize,
  ffi.Pointer<ffi.Void> lpTapeInformation,
);

typedef _dart_GetTapeParameters = int Function(
  ffi.Pointer<ffi.Void> hDevice,
  int dwOperation,
  ffi.Pointer<ffi.Uint64> lpdwSize,
  ffi.Pointer<ffi.Void> lpTapeInformation,
);

typedef _c_SetTapeParameters = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> hDevice,
  ffi.Uint64 dwOperation,
  ffi.Pointer<ffi.Void> lpTapeInformation,
);

typedef _dart_SetTapeParameters = int Function(
  ffi.Pointer<ffi.Void> hDevice,
  int dwOperation,
  ffi.Pointer<ffi.Void> lpTapeInformation,
);

typedef _c_MulDiv = ffi.Int32 Function(
  ffi.Int32 nNumber,
  ffi.Int32 nNumerator,
  ffi.Int32 nDenominator,
);

typedef _dart_MulDiv = int Function(
  int nNumber,
  int nNumerator,
  int nDenominator,
);

typedef _c_GetSystemDEPPolicy = ffi.Int32 Function();

typedef _dart_GetSystemDEPPolicy = int Function();

typedef _c_GetSystemRegistryQuota = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> pdwQuotaAllowed,
  ffi.Pointer<ffi.Uint64> pdwQuotaUsed,
);

typedef _dart_GetSystemRegistryQuota = int Function(
  ffi.Pointer<ffi.Uint64> pdwQuotaAllowed,
  ffi.Pointer<ffi.Uint64> pdwQuotaUsed,
);

typedef _c_FileTimeToDosDateTime = ffi.Int32 Function(
  ffi.Pointer<LPFILETIME> lpFileTime,
  ffi.Pointer<ffi.Uint16> lpFatDate,
  ffi.Pointer<ffi.Uint16> lpFatTime,
);

typedef _dart_FileTimeToDosDateTime = int Function(
  ffi.Pointer<LPFILETIME> lpFileTime,
  ffi.Pointer<ffi.Uint16> lpFatDate,
  ffi.Pointer<ffi.Uint16> lpFatTime,
);

typedef _c_DosDateTimeToFileTime = ffi.Int32 Function(
  ffi.Uint16 wFatDate,
  ffi.Uint16 wFatTime,
  ffi.Pointer<LPFILETIME> lpFileTime,
);

typedef _dart_DosDateTimeToFileTime = int Function(
  int wFatDate,
  int wFatTime,
  ffi.Pointer<LPFILETIME> lpFileTime,
);

typedef _c_FormatMessageA = ffi.Uint64 Function(
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Void> lpSource,
  ffi.Uint64 dwMessageId,
  ffi.Uint64 dwLanguageId,
  ffi.Pointer<ffi.Int8> lpBuffer,
  ffi.Uint64 nSize,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> Arguments,
);

typedef _dart_FormatMessageA = int Function(
  int dwFlags,
  ffi.Pointer<ffi.Void> lpSource,
  int dwMessageId,
  int dwLanguageId,
  ffi.Pointer<ffi.Int8> lpBuffer,
  int nSize,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> Arguments,
);

typedef _c_FormatMessageW = ffi.Uint64 Function(
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Void> lpSource,
  ffi.Uint64 dwMessageId,
  ffi.Uint64 dwLanguageId,
  ffi.Pointer<ffi.Uint16> lpBuffer,
  ffi.Uint64 nSize,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> Arguments,
);

typedef _dart_FormatMessageW = int Function(
  int dwFlags,
  ffi.Pointer<ffi.Void> lpSource,
  int dwMessageId,
  int dwLanguageId,
  ffi.Pointer<ffi.Uint16> lpBuffer,
  int nSize,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> Arguments,
);

typedef _c_CreateMailslotA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> lpName,
  ffi.Uint64 nMaxMessageSize,
  ffi.Uint64 lReadTimeout,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
);

typedef _dart_CreateMailslotA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> lpName,
  int nMaxMessageSize,
  int lReadTimeout,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
);

typedef _c_CreateMailslotW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Uint64 nMaxMessageSize,
  ffi.Uint64 lReadTimeout,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
);

typedef _dart_CreateMailslotW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpName,
  int nMaxMessageSize,
  int lReadTimeout,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
);

typedef _c_GetMailslotInfo = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hMailslot,
  ffi.Pointer<ffi.Uint64> lpMaxMessageSize,
  ffi.Pointer<ffi.Uint64> lpNextSize,
  ffi.Pointer<ffi.Uint64> lpMessageCount,
  ffi.Pointer<ffi.Uint64> lpReadTimeout,
);

typedef _dart_GetMailslotInfo = int Function(
  ffi.Pointer<ffi.Void> hMailslot,
  ffi.Pointer<ffi.Uint64> lpMaxMessageSize,
  ffi.Pointer<ffi.Uint64> lpNextSize,
  ffi.Pointer<ffi.Uint64> lpMessageCount,
  ffi.Pointer<ffi.Uint64> lpReadTimeout,
);

typedef _c_SetMailslotInfo = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hMailslot,
  ffi.Uint64 lReadTimeout,
);

typedef _dart_SetMailslotInfo = int Function(
  ffi.Pointer<ffi.Void> hMailslot,
  int lReadTimeout,
);

typedef _c_EncryptFileA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpFileName,
);

typedef _dart_EncryptFileA = int Function(
  ffi.Pointer<ffi.Int8> lpFileName,
);

typedef _c_EncryptFileW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
);

typedef _dart_EncryptFileW = int Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
);

typedef _c_DecryptFileA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  ffi.Uint64 dwReserved,
);

typedef _dart_DecryptFileA = int Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  int dwReserved,
);

typedef _c_DecryptFileW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  ffi.Uint64 dwReserved,
);

typedef _dart_DecryptFileW = int Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  int dwReserved,
);

typedef _c_FileEncryptionStatusA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  ffi.Pointer<ffi.Uint64> lpStatus,
);

typedef _dart_FileEncryptionStatusA = int Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  ffi.Pointer<ffi.Uint64> lpStatus,
);

typedef _c_FileEncryptionStatusW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  ffi.Pointer<ffi.Uint64> lpStatus,
);

typedef _dart_FileEncryptionStatusW = int Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  ffi.Pointer<ffi.Uint64> lpStatus,
);

typedef _c_OpenEncryptedFileRawA = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  ffi.Uint64 ulFlags,
  ffi.Pointer<ffi.Pointer<ffi.Void>> pvContext,
);

typedef _dart_OpenEncryptedFileRawA = int Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  int ulFlags,
  ffi.Pointer<ffi.Pointer<ffi.Void>> pvContext,
);

typedef _c_OpenEncryptedFileRawW = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  ffi.Uint64 ulFlags,
  ffi.Pointer<ffi.Pointer<ffi.Void>> pvContext,
);

typedef _dart_OpenEncryptedFileRawW = int Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  int ulFlags,
  ffi.Pointer<ffi.Pointer<ffi.Void>> pvContext,
);

typedef PFE_EXPORT_FUNC = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint8>,
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
);

typedef _c_ReadEncryptedFileRaw = ffi.Uint64 Function(
  ffi.Pointer<ffi.NativeFunction<PFE_EXPORT_FUNC>> pfExportCallback,
  ffi.Pointer<ffi.Void> pvCallbackContext,
  ffi.Pointer<ffi.Void> pvContext,
);

typedef _dart_ReadEncryptedFileRaw = int Function(
  ffi.Pointer<ffi.NativeFunction<PFE_EXPORT_FUNC>> pfExportCallback,
  ffi.Pointer<ffi.Void> pvCallbackContext,
  ffi.Pointer<ffi.Void> pvContext,
);

typedef PFE_IMPORT_FUNC = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint8>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Uint64>,
);

typedef _c_WriteEncryptedFileRaw = ffi.Uint64 Function(
  ffi.Pointer<ffi.NativeFunction<PFE_IMPORT_FUNC>> pfImportCallback,
  ffi.Pointer<ffi.Void> pvCallbackContext,
  ffi.Pointer<ffi.Void> pvContext,
);

typedef _dart_WriteEncryptedFileRaw = int Function(
  ffi.Pointer<ffi.NativeFunction<PFE_IMPORT_FUNC>> pfImportCallback,
  ffi.Pointer<ffi.Void> pvCallbackContext,
  ffi.Pointer<ffi.Void> pvContext,
);

typedef _c_CloseEncryptedFileRaw = ffi.Void Function(
  ffi.Pointer<ffi.Void> pvContext,
);

typedef _dart_CloseEncryptedFileRaw = void Function(
  ffi.Pointer<ffi.Void> pvContext,
);

typedef _c_lstrcmpA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpString1,
  ffi.Pointer<ffi.Int8> lpString2,
);

typedef _dart_lstrcmpA = int Function(
  ffi.Pointer<ffi.Int8> lpString1,
  ffi.Pointer<ffi.Int8> lpString2,
);

typedef _c_lstrcmpW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpString1,
  ffi.Pointer<ffi.Uint16> lpString2,
);

typedef _dart_lstrcmpW = int Function(
  ffi.Pointer<ffi.Uint16> lpString1,
  ffi.Pointer<ffi.Uint16> lpString2,
);

typedef _c_lstrcmpiA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpString1,
  ffi.Pointer<ffi.Int8> lpString2,
);

typedef _dart_lstrcmpiA = int Function(
  ffi.Pointer<ffi.Int8> lpString1,
  ffi.Pointer<ffi.Int8> lpString2,
);

typedef _c_lstrcmpiW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpString1,
  ffi.Pointer<ffi.Uint16> lpString2,
);

typedef _dart_lstrcmpiW = int Function(
  ffi.Pointer<ffi.Uint16> lpString1,
  ffi.Pointer<ffi.Uint16> lpString2,
);

typedef _c_lstrcpynA = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> lpString1,
  ffi.Pointer<ffi.Int8> lpString2,
  ffi.Int32 iMaxLength,
);

typedef _dart_lstrcpynA = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> lpString1,
  ffi.Pointer<ffi.Int8> lpString2,
  int iMaxLength,
);

typedef _c_lstrcpynW = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> lpString1,
  ffi.Pointer<ffi.Uint16> lpString2,
  ffi.Int32 iMaxLength,
);

typedef _dart_lstrcpynW = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> lpString1,
  ffi.Pointer<ffi.Uint16> lpString2,
  int iMaxLength,
);

typedef _c_lstrcpyA = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> lpString1,
  ffi.Pointer<ffi.Int8> lpString2,
);

typedef _dart_lstrcpyA = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> lpString1,
  ffi.Pointer<ffi.Int8> lpString2,
);

typedef _c_lstrcpyW = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> lpString1,
  ffi.Pointer<ffi.Uint16> lpString2,
);

typedef _dart_lstrcpyW = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> lpString1,
  ffi.Pointer<ffi.Uint16> lpString2,
);

typedef _c_lstrcatA = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> lpString1,
  ffi.Pointer<ffi.Int8> lpString2,
);

typedef _dart_lstrcatA = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> lpString1,
  ffi.Pointer<ffi.Int8> lpString2,
);

typedef _c_lstrcatW = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> lpString1,
  ffi.Pointer<ffi.Uint16> lpString2,
);

typedef _dart_lstrcatW = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> lpString1,
  ffi.Pointer<ffi.Uint16> lpString2,
);

typedef _c_lstrlenA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpString,
);

typedef _dart_lstrlenA = int Function(
  ffi.Pointer<ffi.Int8> lpString,
);

typedef _c_lstrlenW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpString,
);

typedef _dart_lstrlenW = int Function(
  ffi.Pointer<ffi.Uint16> lpString,
);

typedef _c_OpenFile = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  ffi.Pointer<POFSTRUCT> lpReOpenBuff,
  ffi.Uint32 uStyle,
);

typedef _dart_OpenFile = int Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  ffi.Pointer<POFSTRUCT> lpReOpenBuff,
  int uStyle,
);

typedef _c__lopen = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpPathName,
  ffi.Int32 iReadWrite,
);

typedef _dart__lopen = int Function(
  ffi.Pointer<ffi.Int8> lpPathName,
  int iReadWrite,
);

typedef _c__lcreat = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpPathName,
  ffi.Int32 iAttribute,
);

typedef _dart__lcreat = int Function(
  ffi.Pointer<ffi.Int8> lpPathName,
  int iAttribute,
);

typedef _c__lread = ffi.Uint32 Function(
  ffi.Int32 hFile,
  ffi.Pointer<ffi.Void> lpBuffer,
  ffi.Uint32 uBytes,
);

typedef _dart__lread = int Function(
  int hFile,
  ffi.Pointer<ffi.Void> lpBuffer,
  int uBytes,
);

typedef _c__lwrite = ffi.Uint32 Function(
  ffi.Int32 hFile,
  ffi.Pointer<ffi.Int8> lpBuffer,
  ffi.Uint32 uBytes,
);

typedef _dart__lwrite = int Function(
  int hFile,
  ffi.Pointer<ffi.Int8> lpBuffer,
  int uBytes,
);

typedef _c__hread = ffi.Int64 Function(
  ffi.Int32 hFile,
  ffi.Pointer<ffi.Void> lpBuffer,
  ffi.Int64 lBytes,
);

typedef _dart__hread = int Function(
  int hFile,
  ffi.Pointer<ffi.Void> lpBuffer,
  int lBytes,
);

typedef _c__hwrite = ffi.Int64 Function(
  ffi.Int32 hFile,
  ffi.Pointer<ffi.Int8> lpBuffer,
  ffi.Int64 lBytes,
);

typedef _dart__hwrite = int Function(
  int hFile,
  ffi.Pointer<ffi.Int8> lpBuffer,
  int lBytes,
);

typedef _c__lclose = ffi.Int32 Function(
  ffi.Int32 hFile,
);

typedef _dart__lclose = int Function(
  int hFile,
);

typedef _c__llseek = ffi.Int64 Function(
  ffi.Int32 hFile,
  ffi.Int64 lOffset,
  ffi.Int32 iOrigin,
);

typedef _dart__llseek = int Function(
  int hFile,
  int lOffset,
  int iOrigin,
);

typedef _c_IsTextUnicode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> lpv,
  ffi.Int32 iSize,
  ffi.Pointer<ffi.Int32> lpiResult,
);

typedef _dart_IsTextUnicode = int Function(
  ffi.Pointer<ffi.Void> lpv,
  int iSize,
  ffi.Pointer<ffi.Int32> lpiResult,
);

typedef _c_BackupRead = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<ffi.Uint8> lpBuffer,
  ffi.Uint64 nNumberOfBytesToRead,
  ffi.Pointer<ffi.Uint64> lpNumberOfBytesRead,
  ffi.Int32 bAbort,
  ffi.Int32 bProcessSecurity,
  ffi.Pointer<ffi.Pointer<ffi.Void>> lpContext,
);

typedef _dart_BackupRead = int Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<ffi.Uint8> lpBuffer,
  int nNumberOfBytesToRead,
  ffi.Pointer<ffi.Uint64> lpNumberOfBytesRead,
  int bAbort,
  int bProcessSecurity,
  ffi.Pointer<ffi.Pointer<ffi.Void>> lpContext,
);

typedef _c_BackupSeek = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Uint64 dwLowBytesToSeek,
  ffi.Uint64 dwHighBytesToSeek,
  ffi.Pointer<ffi.Uint64> lpdwLowByteSeeked,
  ffi.Pointer<ffi.Uint64> lpdwHighByteSeeked,
  ffi.Pointer<ffi.Pointer<ffi.Void>> lpContext,
);

typedef _dart_BackupSeek = int Function(
  ffi.Pointer<ffi.Void> hFile,
  int dwLowBytesToSeek,
  int dwHighBytesToSeek,
  ffi.Pointer<ffi.Uint64> lpdwLowByteSeeked,
  ffi.Pointer<ffi.Uint64> lpdwHighByteSeeked,
  ffi.Pointer<ffi.Pointer<ffi.Void>> lpContext,
);

typedef _c_BackupWrite = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<ffi.Uint8> lpBuffer,
  ffi.Uint64 nNumberOfBytesToWrite,
  ffi.Pointer<ffi.Uint64> lpNumberOfBytesWritten,
  ffi.Int32 bAbort,
  ffi.Int32 bProcessSecurity,
  ffi.Pointer<ffi.Pointer<ffi.Void>> lpContext,
);

typedef _dart_BackupWrite = int Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<ffi.Uint8> lpBuffer,
  int nNumberOfBytesToWrite,
  ffi.Pointer<ffi.Uint64> lpNumberOfBytesWritten,
  int bAbort,
  int bProcessSecurity,
  ffi.Pointer<ffi.Pointer<ffi.Void>> lpContext,
);

typedef _c_OpenMutexA = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 dwDesiredAccess,
  ffi.Int32 bInheritHandle,
  ffi.Pointer<ffi.Int8> lpName,
);

typedef _dart_OpenMutexA = ffi.Pointer<ffi.Void> Function(
  int dwDesiredAccess,
  int bInheritHandle,
  ffi.Pointer<ffi.Int8> lpName,
);

typedef _c_CreateSemaphoreA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSemaphoreAttributes,
  ffi.Int64 lInitialCount,
  ffi.Int64 lMaximumCount,
  ffi.Pointer<ffi.Int8> lpName,
);

typedef _dart_CreateSemaphoreA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSemaphoreAttributes,
  int lInitialCount,
  int lMaximumCount,
  ffi.Pointer<ffi.Int8> lpName,
);

typedef _c_OpenSemaphoreA = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 dwDesiredAccess,
  ffi.Int32 bInheritHandle,
  ffi.Pointer<ffi.Int8> lpName,
);

typedef _dart_OpenSemaphoreA = ffi.Pointer<ffi.Void> Function(
  int dwDesiredAccess,
  int bInheritHandle,
  ffi.Pointer<ffi.Int8> lpName,
);

typedef _c_CreateWaitableTimerA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpTimerAttributes,
  ffi.Int32 bManualReset,
  ffi.Pointer<ffi.Int8> lpTimerName,
);

typedef _dart_CreateWaitableTimerA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpTimerAttributes,
  int bManualReset,
  ffi.Pointer<ffi.Int8> lpTimerName,
);

typedef _c_OpenWaitableTimerA = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 dwDesiredAccess,
  ffi.Int32 bInheritHandle,
  ffi.Pointer<ffi.Int8> lpTimerName,
);

typedef _dart_OpenWaitableTimerA = ffi.Pointer<ffi.Void> Function(
  int dwDesiredAccess,
  int bInheritHandle,
  ffi.Pointer<ffi.Int8> lpTimerName,
);

typedef _c_CreateSemaphoreExA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSemaphoreAttributes,
  ffi.Int64 lInitialCount,
  ffi.Int64 lMaximumCount,
  ffi.Pointer<ffi.Int8> lpName,
  ffi.Uint64 dwFlags,
  ffi.Uint64 dwDesiredAccess,
);

typedef _dart_CreateSemaphoreExA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSemaphoreAttributes,
  int lInitialCount,
  int lMaximumCount,
  ffi.Pointer<ffi.Int8> lpName,
  int dwFlags,
  int dwDesiredAccess,
);

typedef _c_CreateWaitableTimerExA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpTimerAttributes,
  ffi.Pointer<ffi.Int8> lpTimerName,
  ffi.Uint64 dwFlags,
  ffi.Uint64 dwDesiredAccess,
);

typedef _dart_CreateWaitableTimerExA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpTimerAttributes,
  ffi.Pointer<ffi.Int8> lpTimerName,
  int dwFlags,
  int dwDesiredAccess,
);

typedef _c_CreateFileMappingA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpFileMappingAttributes,
  ffi.Uint64 flProtect,
  ffi.Uint64 dwMaximumSizeHigh,
  ffi.Uint64 dwMaximumSizeLow,
  ffi.Pointer<ffi.Int8> lpName,
);

typedef _dart_CreateFileMappingA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpFileMappingAttributes,
  int flProtect,
  int dwMaximumSizeHigh,
  int dwMaximumSizeLow,
  ffi.Pointer<ffi.Int8> lpName,
);

typedef _c_CreateFileMappingNumaA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpFileMappingAttributes,
  ffi.Uint64 flProtect,
  ffi.Uint64 dwMaximumSizeHigh,
  ffi.Uint64 dwMaximumSizeLow,
  ffi.Pointer<ffi.Int8> lpName,
  ffi.Uint64 nndPreferred,
);

typedef _dart_CreateFileMappingNumaA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpFileMappingAttributes,
  int flProtect,
  int dwMaximumSizeHigh,
  int dwMaximumSizeLow,
  ffi.Pointer<ffi.Int8> lpName,
  int nndPreferred,
);

typedef _c_OpenFileMappingA = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 dwDesiredAccess,
  ffi.Int32 bInheritHandle,
  ffi.Pointer<ffi.Int8> lpName,
);

typedef _dart_OpenFileMappingA = ffi.Pointer<ffi.Void> Function(
  int dwDesiredAccess,
  int bInheritHandle,
  ffi.Pointer<ffi.Int8> lpName,
);

typedef _c_GetLogicalDriveStringsA = ffi.Uint64 Function(
  ffi.Uint64 nBufferLength,
  ffi.Pointer<ffi.Int8> lpBuffer,
);

typedef _dart_GetLogicalDriveStringsA = int Function(
  int nBufferLength,
  ffi.Pointer<ffi.Int8> lpBuffer,
);

typedef _c_LoadPackagedLibrary = ffi.Pointer<HINSTANCE__> Function(
  ffi.Pointer<ffi.Uint16> lpwLibFileName,
  ffi.Uint64 Reserved,
);

typedef _dart_LoadPackagedLibrary = ffi.Pointer<HINSTANCE__> Function(
  ffi.Pointer<ffi.Uint16> lpwLibFileName,
  int Reserved,
);

typedef _c_QueryFullProcessImageNameA = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Int8> lpExeName,
  ffi.Pointer<ffi.Uint64> lpdwSize,
);

typedef _dart_QueryFullProcessImageNameA = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  int dwFlags,
  ffi.Pointer<ffi.Int8> lpExeName,
  ffi.Pointer<ffi.Uint64> lpdwSize,
);

typedef _c_QueryFullProcessImageNameW = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Uint16> lpExeName,
  ffi.Pointer<ffi.Uint64> lpdwSize,
);

typedef _dart_QueryFullProcessImageNameW = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  int dwFlags,
  ffi.Pointer<ffi.Uint16> lpExeName,
  ffi.Pointer<ffi.Uint64> lpdwSize,
);

typedef _c_GetStartupInfoA = ffi.Void Function(
  ffi.Pointer<LPSTARTUPINFOA> lpStartupInfo,
);

typedef _dart_GetStartupInfoA = void Function(
  ffi.Pointer<LPSTARTUPINFOA> lpStartupInfo,
);

typedef _c_GetFirmwareEnvironmentVariableA = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> lpName,
  ffi.Pointer<ffi.Int8> lpGuid,
  ffi.Pointer<ffi.Void> pBuffer,
  ffi.Uint64 nSize,
);

typedef _dart_GetFirmwareEnvironmentVariableA = int Function(
  ffi.Pointer<ffi.Int8> lpName,
  ffi.Pointer<ffi.Int8> lpGuid,
  ffi.Pointer<ffi.Void> pBuffer,
  int nSize,
);

typedef _c_GetFirmwareEnvironmentVariableW = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Pointer<ffi.Uint16> lpGuid,
  ffi.Pointer<ffi.Void> pBuffer,
  ffi.Uint64 nSize,
);

typedef _dart_GetFirmwareEnvironmentVariableW = int Function(
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Pointer<ffi.Uint16> lpGuid,
  ffi.Pointer<ffi.Void> pBuffer,
  int nSize,
);

typedef _c_GetFirmwareEnvironmentVariableExA = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> lpName,
  ffi.Pointer<ffi.Int8> lpGuid,
  ffi.Pointer<ffi.Void> pBuffer,
  ffi.Uint64 nSize,
  ffi.Pointer<ffi.Uint64> pdwAttribubutes,
);

typedef _dart_GetFirmwareEnvironmentVariableExA = int Function(
  ffi.Pointer<ffi.Int8> lpName,
  ffi.Pointer<ffi.Int8> lpGuid,
  ffi.Pointer<ffi.Void> pBuffer,
  int nSize,
  ffi.Pointer<ffi.Uint64> pdwAttribubutes,
);

typedef _c_GetFirmwareEnvironmentVariableExW = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Pointer<ffi.Uint16> lpGuid,
  ffi.Pointer<ffi.Void> pBuffer,
  ffi.Uint64 nSize,
  ffi.Pointer<ffi.Uint64> pdwAttribubutes,
);

typedef _dart_GetFirmwareEnvironmentVariableExW = int Function(
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Pointer<ffi.Uint16> lpGuid,
  ffi.Pointer<ffi.Void> pBuffer,
  int nSize,
  ffi.Pointer<ffi.Uint64> pdwAttribubutes,
);

typedef _c_SetFirmwareEnvironmentVariableA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpName,
  ffi.Pointer<ffi.Int8> lpGuid,
  ffi.Pointer<ffi.Void> pValue,
  ffi.Uint64 nSize,
);

typedef _dart_SetFirmwareEnvironmentVariableA = int Function(
  ffi.Pointer<ffi.Int8> lpName,
  ffi.Pointer<ffi.Int8> lpGuid,
  ffi.Pointer<ffi.Void> pValue,
  int nSize,
);

typedef _c_SetFirmwareEnvironmentVariableW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Pointer<ffi.Uint16> lpGuid,
  ffi.Pointer<ffi.Void> pValue,
  ffi.Uint64 nSize,
);

typedef _dart_SetFirmwareEnvironmentVariableW = int Function(
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Pointer<ffi.Uint16> lpGuid,
  ffi.Pointer<ffi.Void> pValue,
  int nSize,
);

typedef _c_SetFirmwareEnvironmentVariableExA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpName,
  ffi.Pointer<ffi.Int8> lpGuid,
  ffi.Pointer<ffi.Void> pValue,
  ffi.Uint64 nSize,
  ffi.Uint64 dwAttributes,
);

typedef _dart_SetFirmwareEnvironmentVariableExA = int Function(
  ffi.Pointer<ffi.Int8> lpName,
  ffi.Pointer<ffi.Int8> lpGuid,
  ffi.Pointer<ffi.Void> pValue,
  int nSize,
  int dwAttributes,
);

typedef _c_SetFirmwareEnvironmentVariableExW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Pointer<ffi.Uint16> lpGuid,
  ffi.Pointer<ffi.Void> pValue,
  ffi.Uint64 nSize,
  ffi.Uint64 dwAttributes,
);

typedef _dart_SetFirmwareEnvironmentVariableExW = int Function(
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Pointer<ffi.Uint16> lpGuid,
  ffi.Pointer<ffi.Void> pValue,
  int nSize,
  int dwAttributes,
);

typedef _c_GetFirmwareType = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> FirmwareType,
);

typedef _dart_GetFirmwareType = int Function(
  ffi.Pointer<ffi.Int32> FirmwareType,
);

typedef _c_IsNativeVhdBoot = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> NativeVhdBoot,
);

typedef _dart_IsNativeVhdBoot = int Function(
  ffi.Pointer<ffi.Int32> NativeVhdBoot,
);

typedef _c_FindResourceA = ffi.Pointer<HRSRC__> Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<ffi.Int8> lpName,
  ffi.Pointer<ffi.Int8> lpType,
);

typedef _dart_FindResourceA = ffi.Pointer<HRSRC__> Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<ffi.Int8> lpName,
  ffi.Pointer<ffi.Int8> lpType,
);

typedef _c_FindResourceExA = ffi.Pointer<HRSRC__> Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<ffi.Int8> lpType,
  ffi.Pointer<ffi.Int8> lpName,
  ffi.Uint16 wLanguage,
);

typedef _dart_FindResourceExA = ffi.Pointer<HRSRC__> Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<ffi.Int8> lpType,
  ffi.Pointer<ffi.Int8> lpName,
  int wLanguage,
);

typedef _c_EnumResourceTypesA = ffi.Int32 Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<ffi.NativeFunction<ENUMRESTYPEPROCA>> lpEnumFunc,
  ffi.Int64 lParam,
);

typedef _dart_EnumResourceTypesA = int Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<ffi.NativeFunction<ENUMRESTYPEPROCA>> lpEnumFunc,
  int lParam,
);

typedef _c_EnumResourceTypesW = ffi.Int32 Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<ffi.NativeFunction<ENUMRESTYPEPROCW>> lpEnumFunc,
  ffi.Int64 lParam,
);

typedef _dart_EnumResourceTypesW = int Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<ffi.NativeFunction<ENUMRESTYPEPROCW>> lpEnumFunc,
  int lParam,
);

typedef _c_EnumResourceNamesA = ffi.Int32 Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<ffi.Int8> lpType,
  ffi.Pointer<ffi.NativeFunction<ENUMRESNAMEPROCA>> lpEnumFunc,
  ffi.Int64 lParam,
);

typedef _dart_EnumResourceNamesA = int Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<ffi.Int8> lpType,
  ffi.Pointer<ffi.NativeFunction<ENUMRESNAMEPROCA>> lpEnumFunc,
  int lParam,
);

typedef _c_EnumResourceLanguagesA = ffi.Int32 Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<ffi.Int8> lpType,
  ffi.Pointer<ffi.Int8> lpName,
  ffi.Pointer<ffi.NativeFunction<ENUMRESLANGPROCA>> lpEnumFunc,
  ffi.Int64 lParam,
);

typedef _dart_EnumResourceLanguagesA = int Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<ffi.Int8> lpType,
  ffi.Pointer<ffi.Int8> lpName,
  ffi.Pointer<ffi.NativeFunction<ENUMRESLANGPROCA>> lpEnumFunc,
  int lParam,
);

typedef _c_EnumResourceLanguagesW = ffi.Int32 Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<ffi.Uint16> lpType,
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Pointer<ffi.NativeFunction<ENUMRESLANGPROCW>> lpEnumFunc,
  ffi.Int64 lParam,
);

typedef _dart_EnumResourceLanguagesW = int Function(
  ffi.Pointer<HINSTANCE__> hModule,
  ffi.Pointer<ffi.Uint16> lpType,
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Pointer<ffi.NativeFunction<ENUMRESLANGPROCW>> lpEnumFunc,
  int lParam,
);

typedef _c_BeginUpdateResourceA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> pFileName,
  ffi.Int32 bDeleteExistingResources,
);

typedef _dart_BeginUpdateResourceA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> pFileName,
  int bDeleteExistingResources,
);

typedef _c_BeginUpdateResourceW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> pFileName,
  ffi.Int32 bDeleteExistingResources,
);

typedef _dart_BeginUpdateResourceW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> pFileName,
  int bDeleteExistingResources,
);

typedef _c_UpdateResourceA = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hUpdate,
  ffi.Pointer<ffi.Int8> lpType,
  ffi.Pointer<ffi.Int8> lpName,
  ffi.Uint16 wLanguage,
  ffi.Pointer<ffi.Void> lpData,
  ffi.Uint64 cb,
);

typedef _dart_UpdateResourceA = int Function(
  ffi.Pointer<ffi.Void> hUpdate,
  ffi.Pointer<ffi.Int8> lpType,
  ffi.Pointer<ffi.Int8> lpName,
  int wLanguage,
  ffi.Pointer<ffi.Void> lpData,
  int cb,
);

typedef _c_UpdateResourceW = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hUpdate,
  ffi.Pointer<ffi.Uint16> lpType,
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Uint16 wLanguage,
  ffi.Pointer<ffi.Void> lpData,
  ffi.Uint64 cb,
);

typedef _dart_UpdateResourceW = int Function(
  ffi.Pointer<ffi.Void> hUpdate,
  ffi.Pointer<ffi.Uint16> lpType,
  ffi.Pointer<ffi.Uint16> lpName,
  int wLanguage,
  ffi.Pointer<ffi.Void> lpData,
  int cb,
);

typedef _c_EndUpdateResourceA = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hUpdate,
  ffi.Int32 fDiscard,
);

typedef _dart_EndUpdateResourceA = int Function(
  ffi.Pointer<ffi.Void> hUpdate,
  int fDiscard,
);

typedef _c_EndUpdateResourceW = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hUpdate,
  ffi.Int32 fDiscard,
);

typedef _dart_EndUpdateResourceW = int Function(
  ffi.Pointer<ffi.Void> hUpdate,
  int fDiscard,
);

typedef _c_GlobalAddAtomA = ffi.Uint16 Function(
  ffi.Pointer<ffi.Int8> lpString,
);

typedef _dart_GlobalAddAtomA = int Function(
  ffi.Pointer<ffi.Int8> lpString,
);

typedef _c_GlobalAddAtomW = ffi.Uint16 Function(
  ffi.Pointer<ffi.Uint16> lpString,
);

typedef _dart_GlobalAddAtomW = int Function(
  ffi.Pointer<ffi.Uint16> lpString,
);

typedef _c_GlobalAddAtomExA = ffi.Uint16 Function(
  ffi.Pointer<ffi.Int8> lpString,
  ffi.Uint64 Flags,
);

typedef _dart_GlobalAddAtomExA = int Function(
  ffi.Pointer<ffi.Int8> lpString,
  int Flags,
);

typedef _c_GlobalAddAtomExW = ffi.Uint16 Function(
  ffi.Pointer<ffi.Uint16> lpString,
  ffi.Uint64 Flags,
);

typedef _dart_GlobalAddAtomExW = int Function(
  ffi.Pointer<ffi.Uint16> lpString,
  int Flags,
);

typedef _c_GlobalFindAtomA = ffi.Uint16 Function(
  ffi.Pointer<ffi.Int8> lpString,
);

typedef _dart_GlobalFindAtomA = int Function(
  ffi.Pointer<ffi.Int8> lpString,
);

typedef _c_GlobalFindAtomW = ffi.Uint16 Function(
  ffi.Pointer<ffi.Uint16> lpString,
);

typedef _dart_GlobalFindAtomW = int Function(
  ffi.Pointer<ffi.Uint16> lpString,
);

typedef _c_GlobalGetAtomNameA = ffi.Uint32 Function(
  ffi.Uint16 nAtom,
  ffi.Pointer<ffi.Int8> lpBuffer,
  ffi.Int32 nSize,
);

typedef _dart_GlobalGetAtomNameA = int Function(
  int nAtom,
  ffi.Pointer<ffi.Int8> lpBuffer,
  int nSize,
);

typedef _c_GlobalGetAtomNameW = ffi.Uint32 Function(
  ffi.Uint16 nAtom,
  ffi.Pointer<ffi.Uint16> lpBuffer,
  ffi.Int32 nSize,
);

typedef _dart_GlobalGetAtomNameW = int Function(
  int nAtom,
  ffi.Pointer<ffi.Uint16> lpBuffer,
  int nSize,
);

typedef _c_AddAtomA = ffi.Uint16 Function(
  ffi.Pointer<ffi.Int8> lpString,
);

typedef _dart_AddAtomA = int Function(
  ffi.Pointer<ffi.Int8> lpString,
);

typedef _c_AddAtomW = ffi.Uint16 Function(
  ffi.Pointer<ffi.Uint16> lpString,
);

typedef _dart_AddAtomW = int Function(
  ffi.Pointer<ffi.Uint16> lpString,
);

typedef _c_FindAtomA = ffi.Uint16 Function(
  ffi.Pointer<ffi.Int8> lpString,
);

typedef _dart_FindAtomA = int Function(
  ffi.Pointer<ffi.Int8> lpString,
);

typedef _c_FindAtomW = ffi.Uint16 Function(
  ffi.Pointer<ffi.Uint16> lpString,
);

typedef _dart_FindAtomW = int Function(
  ffi.Pointer<ffi.Uint16> lpString,
);

typedef _c_GetAtomNameA = ffi.Uint32 Function(
  ffi.Uint16 nAtom,
  ffi.Pointer<ffi.Int8> lpBuffer,
  ffi.Int32 nSize,
);

typedef _dart_GetAtomNameA = int Function(
  int nAtom,
  ffi.Pointer<ffi.Int8> lpBuffer,
  int nSize,
);

typedef _c_GetAtomNameW = ffi.Uint32 Function(
  ffi.Uint16 nAtom,
  ffi.Pointer<ffi.Uint16> lpBuffer,
  ffi.Int32 nSize,
);

typedef _dart_GetAtomNameW = int Function(
  int nAtom,
  ffi.Pointer<ffi.Uint16> lpBuffer,
  int nSize,
);

typedef _c_GetProfileIntA = ffi.Uint32 Function(
  ffi.Pointer<ffi.Int8> lpAppName,
  ffi.Pointer<ffi.Int8> lpKeyName,
  ffi.Int32 nDefault,
);

typedef _dart_GetProfileIntA = int Function(
  ffi.Pointer<ffi.Int8> lpAppName,
  ffi.Pointer<ffi.Int8> lpKeyName,
  int nDefault,
);

typedef _c_GetProfileIntW = ffi.Uint32 Function(
  ffi.Pointer<ffi.Uint16> lpAppName,
  ffi.Pointer<ffi.Uint16> lpKeyName,
  ffi.Int32 nDefault,
);

typedef _dart_GetProfileIntW = int Function(
  ffi.Pointer<ffi.Uint16> lpAppName,
  ffi.Pointer<ffi.Uint16> lpKeyName,
  int nDefault,
);

typedef _c_GetProfileStringA = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> lpAppName,
  ffi.Pointer<ffi.Int8> lpKeyName,
  ffi.Pointer<ffi.Int8> lpDefault,
  ffi.Pointer<ffi.Int8> lpReturnedString,
  ffi.Uint64 nSize,
);

typedef _dart_GetProfileStringA = int Function(
  ffi.Pointer<ffi.Int8> lpAppName,
  ffi.Pointer<ffi.Int8> lpKeyName,
  ffi.Pointer<ffi.Int8> lpDefault,
  ffi.Pointer<ffi.Int8> lpReturnedString,
  int nSize,
);

typedef _c_GetProfileStringW = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> lpAppName,
  ffi.Pointer<ffi.Uint16> lpKeyName,
  ffi.Pointer<ffi.Uint16> lpDefault,
  ffi.Pointer<ffi.Uint16> lpReturnedString,
  ffi.Uint64 nSize,
);

typedef _dart_GetProfileStringW = int Function(
  ffi.Pointer<ffi.Uint16> lpAppName,
  ffi.Pointer<ffi.Uint16> lpKeyName,
  ffi.Pointer<ffi.Uint16> lpDefault,
  ffi.Pointer<ffi.Uint16> lpReturnedString,
  int nSize,
);

typedef _c_WriteProfileStringA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpAppName,
  ffi.Pointer<ffi.Int8> lpKeyName,
  ffi.Pointer<ffi.Int8> lpString,
);

typedef _dart_WriteProfileStringA = int Function(
  ffi.Pointer<ffi.Int8> lpAppName,
  ffi.Pointer<ffi.Int8> lpKeyName,
  ffi.Pointer<ffi.Int8> lpString,
);

typedef _c_WriteProfileStringW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpAppName,
  ffi.Pointer<ffi.Uint16> lpKeyName,
  ffi.Pointer<ffi.Uint16> lpString,
);

typedef _dart_WriteProfileStringW = int Function(
  ffi.Pointer<ffi.Uint16> lpAppName,
  ffi.Pointer<ffi.Uint16> lpKeyName,
  ffi.Pointer<ffi.Uint16> lpString,
);

typedef _c_GetProfileSectionA = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> lpAppName,
  ffi.Pointer<ffi.Int8> lpReturnedString,
  ffi.Uint64 nSize,
);

typedef _dart_GetProfileSectionA = int Function(
  ffi.Pointer<ffi.Int8> lpAppName,
  ffi.Pointer<ffi.Int8> lpReturnedString,
  int nSize,
);

typedef _c_GetProfileSectionW = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> lpAppName,
  ffi.Pointer<ffi.Uint16> lpReturnedString,
  ffi.Uint64 nSize,
);

typedef _dart_GetProfileSectionW = int Function(
  ffi.Pointer<ffi.Uint16> lpAppName,
  ffi.Pointer<ffi.Uint16> lpReturnedString,
  int nSize,
);

typedef _c_WriteProfileSectionA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpAppName,
  ffi.Pointer<ffi.Int8> lpString,
);

typedef _dart_WriteProfileSectionA = int Function(
  ffi.Pointer<ffi.Int8> lpAppName,
  ffi.Pointer<ffi.Int8> lpString,
);

typedef _c_WriteProfileSectionW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpAppName,
  ffi.Pointer<ffi.Uint16> lpString,
);

typedef _dart_WriteProfileSectionW = int Function(
  ffi.Pointer<ffi.Uint16> lpAppName,
  ffi.Pointer<ffi.Uint16> lpString,
);

typedef _c_GetPrivateProfileIntA = ffi.Uint32 Function(
  ffi.Pointer<ffi.Int8> lpAppName,
  ffi.Pointer<ffi.Int8> lpKeyName,
  ffi.Int32 nDefault,
  ffi.Pointer<ffi.Int8> lpFileName,
);

typedef _dart_GetPrivateProfileIntA = int Function(
  ffi.Pointer<ffi.Int8> lpAppName,
  ffi.Pointer<ffi.Int8> lpKeyName,
  int nDefault,
  ffi.Pointer<ffi.Int8> lpFileName,
);

typedef _c_GetPrivateProfileIntW = ffi.Uint32 Function(
  ffi.Pointer<ffi.Uint16> lpAppName,
  ffi.Pointer<ffi.Uint16> lpKeyName,
  ffi.Int32 nDefault,
  ffi.Pointer<ffi.Uint16> lpFileName,
);

typedef _dart_GetPrivateProfileIntW = int Function(
  ffi.Pointer<ffi.Uint16> lpAppName,
  ffi.Pointer<ffi.Uint16> lpKeyName,
  int nDefault,
  ffi.Pointer<ffi.Uint16> lpFileName,
);

typedef _c_GetPrivateProfileStringA = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> lpAppName,
  ffi.Pointer<ffi.Int8> lpKeyName,
  ffi.Pointer<ffi.Int8> lpDefault,
  ffi.Pointer<ffi.Int8> lpReturnedString,
  ffi.Uint64 nSize,
  ffi.Pointer<ffi.Int8> lpFileName,
);

typedef _dart_GetPrivateProfileStringA = int Function(
  ffi.Pointer<ffi.Int8> lpAppName,
  ffi.Pointer<ffi.Int8> lpKeyName,
  ffi.Pointer<ffi.Int8> lpDefault,
  ffi.Pointer<ffi.Int8> lpReturnedString,
  int nSize,
  ffi.Pointer<ffi.Int8> lpFileName,
);

typedef _c_GetPrivateProfileStringW = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> lpAppName,
  ffi.Pointer<ffi.Uint16> lpKeyName,
  ffi.Pointer<ffi.Uint16> lpDefault,
  ffi.Pointer<ffi.Uint16> lpReturnedString,
  ffi.Uint64 nSize,
  ffi.Pointer<ffi.Uint16> lpFileName,
);

typedef _dart_GetPrivateProfileStringW = int Function(
  ffi.Pointer<ffi.Uint16> lpAppName,
  ffi.Pointer<ffi.Uint16> lpKeyName,
  ffi.Pointer<ffi.Uint16> lpDefault,
  ffi.Pointer<ffi.Uint16> lpReturnedString,
  int nSize,
  ffi.Pointer<ffi.Uint16> lpFileName,
);

typedef _c_WritePrivateProfileStringA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpAppName,
  ffi.Pointer<ffi.Int8> lpKeyName,
  ffi.Pointer<ffi.Int8> lpString,
  ffi.Pointer<ffi.Int8> lpFileName,
);

typedef _dart_WritePrivateProfileStringA = int Function(
  ffi.Pointer<ffi.Int8> lpAppName,
  ffi.Pointer<ffi.Int8> lpKeyName,
  ffi.Pointer<ffi.Int8> lpString,
  ffi.Pointer<ffi.Int8> lpFileName,
);

typedef _c_WritePrivateProfileStringW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpAppName,
  ffi.Pointer<ffi.Uint16> lpKeyName,
  ffi.Pointer<ffi.Uint16> lpString,
  ffi.Pointer<ffi.Uint16> lpFileName,
);

typedef _dart_WritePrivateProfileStringW = int Function(
  ffi.Pointer<ffi.Uint16> lpAppName,
  ffi.Pointer<ffi.Uint16> lpKeyName,
  ffi.Pointer<ffi.Uint16> lpString,
  ffi.Pointer<ffi.Uint16> lpFileName,
);

typedef _c_GetPrivateProfileSectionA = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> lpAppName,
  ffi.Pointer<ffi.Int8> lpReturnedString,
  ffi.Uint64 nSize,
  ffi.Pointer<ffi.Int8> lpFileName,
);

typedef _dart_GetPrivateProfileSectionA = int Function(
  ffi.Pointer<ffi.Int8> lpAppName,
  ffi.Pointer<ffi.Int8> lpReturnedString,
  int nSize,
  ffi.Pointer<ffi.Int8> lpFileName,
);

typedef _c_GetPrivateProfileSectionW = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> lpAppName,
  ffi.Pointer<ffi.Uint16> lpReturnedString,
  ffi.Uint64 nSize,
  ffi.Pointer<ffi.Uint16> lpFileName,
);

typedef _dart_GetPrivateProfileSectionW = int Function(
  ffi.Pointer<ffi.Uint16> lpAppName,
  ffi.Pointer<ffi.Uint16> lpReturnedString,
  int nSize,
  ffi.Pointer<ffi.Uint16> lpFileName,
);

typedef _c_WritePrivateProfileSectionA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpAppName,
  ffi.Pointer<ffi.Int8> lpString,
  ffi.Pointer<ffi.Int8> lpFileName,
);

typedef _dart_WritePrivateProfileSectionA = int Function(
  ffi.Pointer<ffi.Int8> lpAppName,
  ffi.Pointer<ffi.Int8> lpString,
  ffi.Pointer<ffi.Int8> lpFileName,
);

typedef _c_WritePrivateProfileSectionW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpAppName,
  ffi.Pointer<ffi.Uint16> lpString,
  ffi.Pointer<ffi.Uint16> lpFileName,
);

typedef _dart_WritePrivateProfileSectionW = int Function(
  ffi.Pointer<ffi.Uint16> lpAppName,
  ffi.Pointer<ffi.Uint16> lpString,
  ffi.Pointer<ffi.Uint16> lpFileName,
);

typedef _c_GetPrivateProfileSectionNamesA = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> lpszReturnBuffer,
  ffi.Uint64 nSize,
  ffi.Pointer<ffi.Int8> lpFileName,
);

typedef _dart_GetPrivateProfileSectionNamesA = int Function(
  ffi.Pointer<ffi.Int8> lpszReturnBuffer,
  int nSize,
  ffi.Pointer<ffi.Int8> lpFileName,
);

typedef _c_GetPrivateProfileSectionNamesW = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> lpszReturnBuffer,
  ffi.Uint64 nSize,
  ffi.Pointer<ffi.Uint16> lpFileName,
);

typedef _dart_GetPrivateProfileSectionNamesW = int Function(
  ffi.Pointer<ffi.Uint16> lpszReturnBuffer,
  int nSize,
  ffi.Pointer<ffi.Uint16> lpFileName,
);

typedef _c_GetPrivateProfileStructA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpszSection,
  ffi.Pointer<ffi.Int8> lpszKey,
  ffi.Pointer<ffi.Void> lpStruct,
  ffi.Uint32 uSizeStruct,
  ffi.Pointer<ffi.Int8> szFile,
);

typedef _dart_GetPrivateProfileStructA = int Function(
  ffi.Pointer<ffi.Int8> lpszSection,
  ffi.Pointer<ffi.Int8> lpszKey,
  ffi.Pointer<ffi.Void> lpStruct,
  int uSizeStruct,
  ffi.Pointer<ffi.Int8> szFile,
);

typedef _c_GetPrivateProfileStructW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpszSection,
  ffi.Pointer<ffi.Uint16> lpszKey,
  ffi.Pointer<ffi.Void> lpStruct,
  ffi.Uint32 uSizeStruct,
  ffi.Pointer<ffi.Uint16> szFile,
);

typedef _dart_GetPrivateProfileStructW = int Function(
  ffi.Pointer<ffi.Uint16> lpszSection,
  ffi.Pointer<ffi.Uint16> lpszKey,
  ffi.Pointer<ffi.Void> lpStruct,
  int uSizeStruct,
  ffi.Pointer<ffi.Uint16> szFile,
);

typedef _c_WritePrivateProfileStructA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpszSection,
  ffi.Pointer<ffi.Int8> lpszKey,
  ffi.Pointer<ffi.Void> lpStruct,
  ffi.Uint32 uSizeStruct,
  ffi.Pointer<ffi.Int8> szFile,
);

typedef _dart_WritePrivateProfileStructA = int Function(
  ffi.Pointer<ffi.Int8> lpszSection,
  ffi.Pointer<ffi.Int8> lpszKey,
  ffi.Pointer<ffi.Void> lpStruct,
  int uSizeStruct,
  ffi.Pointer<ffi.Int8> szFile,
);

typedef _c_WritePrivateProfileStructW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpszSection,
  ffi.Pointer<ffi.Uint16> lpszKey,
  ffi.Pointer<ffi.Void> lpStruct,
  ffi.Uint32 uSizeStruct,
  ffi.Pointer<ffi.Uint16> szFile,
);

typedef _dart_WritePrivateProfileStructW = int Function(
  ffi.Pointer<ffi.Uint16> lpszSection,
  ffi.Pointer<ffi.Uint16> lpszKey,
  ffi.Pointer<ffi.Void> lpStruct,
  int uSizeStruct,
  ffi.Pointer<ffi.Uint16> szFile,
);

typedef _c_Wow64EnableWow64FsRedirection = ffi.Uint8 Function(
  ffi.Uint8 Wow64FsEnableRedirection,
);

typedef _dart_Wow64EnableWow64FsRedirection = int Function(
  int Wow64FsEnableRedirection,
);

typedef _c_SetDllDirectoryA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpPathName,
);

typedef _dart_SetDllDirectoryA = int Function(
  ffi.Pointer<ffi.Int8> lpPathName,
);

typedef _c_SetDllDirectoryW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpPathName,
);

typedef _dart_SetDllDirectoryW = int Function(
  ffi.Pointer<ffi.Uint16> lpPathName,
);

typedef _c_GetDllDirectoryA = ffi.Uint64 Function(
  ffi.Uint64 nBufferLength,
  ffi.Pointer<ffi.Int8> lpBuffer,
);

typedef _dart_GetDllDirectoryA = int Function(
  int nBufferLength,
  ffi.Pointer<ffi.Int8> lpBuffer,
);

typedef _c_GetDllDirectoryW = ffi.Uint64 Function(
  ffi.Uint64 nBufferLength,
  ffi.Pointer<ffi.Uint16> lpBuffer,
);

typedef _dart_GetDllDirectoryW = int Function(
  int nBufferLength,
  ffi.Pointer<ffi.Uint16> lpBuffer,
);

typedef _c_SetSearchPathMode = ffi.Int32 Function(
  ffi.Uint64 Flags,
);

typedef _dart_SetSearchPathMode = int Function(
  int Flags,
);

typedef _c_CreateDirectoryExA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpTemplateDirectory,
  ffi.Pointer<ffi.Int8> lpNewDirectory,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
);

typedef _dart_CreateDirectoryExA = int Function(
  ffi.Pointer<ffi.Int8> lpTemplateDirectory,
  ffi.Pointer<ffi.Int8> lpNewDirectory,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
);

typedef _c_CreateDirectoryExW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpTemplateDirectory,
  ffi.Pointer<ffi.Uint16> lpNewDirectory,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
);

typedef _dart_CreateDirectoryExW = int Function(
  ffi.Pointer<ffi.Uint16> lpTemplateDirectory,
  ffi.Pointer<ffi.Uint16> lpNewDirectory,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
);

typedef _c_CreateDirectoryTransactedA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpTemplateDirectory,
  ffi.Pointer<ffi.Int8> lpNewDirectory,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _dart_CreateDirectoryTransactedA = int Function(
  ffi.Pointer<ffi.Int8> lpTemplateDirectory,
  ffi.Pointer<ffi.Int8> lpNewDirectory,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _c_CreateDirectoryTransactedW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpTemplateDirectory,
  ffi.Pointer<ffi.Uint16> lpNewDirectory,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _dart_CreateDirectoryTransactedW = int Function(
  ffi.Pointer<ffi.Uint16> lpTemplateDirectory,
  ffi.Pointer<ffi.Uint16> lpNewDirectory,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _c_RemoveDirectoryTransactedA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpPathName,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _dart_RemoveDirectoryTransactedA = int Function(
  ffi.Pointer<ffi.Int8> lpPathName,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _c_RemoveDirectoryTransactedW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpPathName,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _dart_RemoveDirectoryTransactedW = int Function(
  ffi.Pointer<ffi.Uint16> lpPathName,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _c_GetFullPathNameTransactedA = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  ffi.Uint64 nBufferLength,
  ffi.Pointer<ffi.Int8> lpBuffer,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> lpFilePart,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _dart_GetFullPathNameTransactedA = int Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  int nBufferLength,
  ffi.Pointer<ffi.Int8> lpBuffer,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> lpFilePart,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _c_GetFullPathNameTransactedW = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  ffi.Uint64 nBufferLength,
  ffi.Pointer<ffi.Uint16> lpBuffer,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> lpFilePart,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _dart_GetFullPathNameTransactedW = int Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  int nBufferLength,
  ffi.Pointer<ffi.Uint16> lpBuffer,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> lpFilePart,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _c_DefineDosDeviceA = ffi.Int32 Function(
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Int8> lpDeviceName,
  ffi.Pointer<ffi.Int8> lpTargetPath,
);

typedef _dart_DefineDosDeviceA = int Function(
  int dwFlags,
  ffi.Pointer<ffi.Int8> lpDeviceName,
  ffi.Pointer<ffi.Int8> lpTargetPath,
);

typedef _c_QueryDosDeviceA = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> lpDeviceName,
  ffi.Pointer<ffi.Int8> lpTargetPath,
  ffi.Uint64 ucchMax,
);

typedef _dart_QueryDosDeviceA = int Function(
  ffi.Pointer<ffi.Int8> lpDeviceName,
  ffi.Pointer<ffi.Int8> lpTargetPath,
  int ucchMax,
);

typedef _c_CreateFileTransactedA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  ffi.Uint64 dwDesiredAccess,
  ffi.Uint64 dwShareMode,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  ffi.Uint64 dwCreationDisposition,
  ffi.Uint64 dwFlagsAndAttributes,
  ffi.Pointer<ffi.Void> hTemplateFile,
  ffi.Pointer<ffi.Void> hTransaction,
  ffi.Pointer<ffi.Uint16> pusMiniVersion,
  ffi.Pointer<ffi.Void> lpExtendedParameter,
);

typedef _dart_CreateFileTransactedA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  int dwDesiredAccess,
  int dwShareMode,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  int dwCreationDisposition,
  int dwFlagsAndAttributes,
  ffi.Pointer<ffi.Void> hTemplateFile,
  ffi.Pointer<ffi.Void> hTransaction,
  ffi.Pointer<ffi.Uint16> pusMiniVersion,
  ffi.Pointer<ffi.Void> lpExtendedParameter,
);

typedef _c_CreateFileTransactedW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  ffi.Uint64 dwDesiredAccess,
  ffi.Uint64 dwShareMode,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  ffi.Uint64 dwCreationDisposition,
  ffi.Uint64 dwFlagsAndAttributes,
  ffi.Pointer<ffi.Void> hTemplateFile,
  ffi.Pointer<ffi.Void> hTransaction,
  ffi.Pointer<ffi.Uint16> pusMiniVersion,
  ffi.Pointer<ffi.Void> lpExtendedParameter,
);

typedef _dart_CreateFileTransactedW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  int dwDesiredAccess,
  int dwShareMode,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  int dwCreationDisposition,
  int dwFlagsAndAttributes,
  ffi.Pointer<ffi.Void> hTemplateFile,
  ffi.Pointer<ffi.Void> hTransaction,
  ffi.Pointer<ffi.Uint16> pusMiniVersion,
  ffi.Pointer<ffi.Void> lpExtendedParameter,
);

typedef _c_ReOpenFile = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hOriginalFile,
  ffi.Uint64 dwDesiredAccess,
  ffi.Uint64 dwShareMode,
  ffi.Uint64 dwFlagsAndAttributes,
);

typedef _dart_ReOpenFile = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hOriginalFile,
  int dwDesiredAccess,
  int dwShareMode,
  int dwFlagsAndAttributes,
);

typedef _c_SetFileAttributesTransactedA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  ffi.Uint64 dwFileAttributes,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _dart_SetFileAttributesTransactedA = int Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  int dwFileAttributes,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _c_SetFileAttributesTransactedW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  ffi.Uint64 dwFileAttributes,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _dart_SetFileAttributesTransactedW = int Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  int dwFileAttributes,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _c_GetFileAttributesTransactedA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  ffi.Int32 fInfoLevelId,
  ffi.Pointer<ffi.Void> lpFileInformation,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _dart_GetFileAttributesTransactedA = int Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  int fInfoLevelId,
  ffi.Pointer<ffi.Void> lpFileInformation,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _c_GetFileAttributesTransactedW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  ffi.Int32 fInfoLevelId,
  ffi.Pointer<ffi.Void> lpFileInformation,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _dart_GetFileAttributesTransactedW = int Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  int fInfoLevelId,
  ffi.Pointer<ffi.Void> lpFileInformation,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _c_GetCompressedFileSizeTransactedA = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  ffi.Pointer<ffi.Uint64> lpFileSizeHigh,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _dart_GetCompressedFileSizeTransactedA = int Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  ffi.Pointer<ffi.Uint64> lpFileSizeHigh,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _c_GetCompressedFileSizeTransactedW = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  ffi.Pointer<ffi.Uint64> lpFileSizeHigh,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _dart_GetCompressedFileSizeTransactedW = int Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  ffi.Pointer<ffi.Uint64> lpFileSizeHigh,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _c_DeleteFileTransactedA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _dart_DeleteFileTransactedA = int Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _c_DeleteFileTransactedW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _dart_DeleteFileTransactedW = int Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _c_CheckNameLegalDOS8Dot3A = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpName,
  ffi.Pointer<ffi.Int8> lpOemName,
  ffi.Uint64 OemNameSize,
  ffi.Pointer<ffi.Int32> pbNameContainsSpaces,
  ffi.Pointer<ffi.Int32> pbNameLegal,
);

typedef _dart_CheckNameLegalDOS8Dot3A = int Function(
  ffi.Pointer<ffi.Int8> lpName,
  ffi.Pointer<ffi.Int8> lpOemName,
  int OemNameSize,
  ffi.Pointer<ffi.Int32> pbNameContainsSpaces,
  ffi.Pointer<ffi.Int32> pbNameLegal,
);

typedef _c_CheckNameLegalDOS8Dot3W = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Pointer<ffi.Int8> lpOemName,
  ffi.Uint64 OemNameSize,
  ffi.Pointer<ffi.Int32> pbNameContainsSpaces,
  ffi.Pointer<ffi.Int32> pbNameLegal,
);

typedef _dart_CheckNameLegalDOS8Dot3W = int Function(
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Pointer<ffi.Int8> lpOemName,
  int OemNameSize,
  ffi.Pointer<ffi.Int32> pbNameContainsSpaces,
  ffi.Pointer<ffi.Int32> pbNameLegal,
);

typedef _c_FindFirstFileTransactedA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  ffi.Int32 fInfoLevelId,
  ffi.Pointer<ffi.Void> lpFindFileData,
  ffi.Int32 fSearchOp,
  ffi.Pointer<ffi.Void> lpSearchFilter,
  ffi.Uint64 dwAdditionalFlags,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _dart_FindFirstFileTransactedA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  int fInfoLevelId,
  ffi.Pointer<ffi.Void> lpFindFileData,
  int fSearchOp,
  ffi.Pointer<ffi.Void> lpSearchFilter,
  int dwAdditionalFlags,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _c_FindFirstFileTransactedW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  ffi.Int32 fInfoLevelId,
  ffi.Pointer<ffi.Void> lpFindFileData,
  ffi.Int32 fSearchOp,
  ffi.Pointer<ffi.Void> lpSearchFilter,
  ffi.Uint64 dwAdditionalFlags,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _dart_FindFirstFileTransactedW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  int fInfoLevelId,
  ffi.Pointer<ffi.Void> lpFindFileData,
  int fSearchOp,
  ffi.Pointer<ffi.Void> lpSearchFilter,
  int dwAdditionalFlags,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _c_CopyFileA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpExistingFileName,
  ffi.Pointer<ffi.Int8> lpNewFileName,
  ffi.Int32 bFailIfExists,
);

typedef _dart_CopyFileA = int Function(
  ffi.Pointer<ffi.Int8> lpExistingFileName,
  ffi.Pointer<ffi.Int8> lpNewFileName,
  int bFailIfExists,
);

typedef _c_CopyFileW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpExistingFileName,
  ffi.Pointer<ffi.Uint16> lpNewFileName,
  ffi.Int32 bFailIfExists,
);

typedef _dart_CopyFileW = int Function(
  ffi.Pointer<ffi.Uint16> lpExistingFileName,
  ffi.Pointer<ffi.Uint16> lpNewFileName,
  int bFailIfExists,
);

typedef _c_CopyFile2 = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> pwszExistingFileName,
  ffi.Pointer<ffi.Uint16> pwszNewFileName,
  ffi.Pointer<COPYFILE2_EXTENDED_PARAMETERS> pExtendedParameters,
);

typedef _dart_CopyFile2 = int Function(
  ffi.Pointer<ffi.Uint16> pwszExistingFileName,
  ffi.Pointer<ffi.Uint16> pwszNewFileName,
  ffi.Pointer<COPYFILE2_EXTENDED_PARAMETERS> pExtendedParameters,
);

typedef _c_MoveFileA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpExistingFileName,
  ffi.Pointer<ffi.Int8> lpNewFileName,
);

typedef _dart_MoveFileA = int Function(
  ffi.Pointer<ffi.Int8> lpExistingFileName,
  ffi.Pointer<ffi.Int8> lpNewFileName,
);

typedef _c_MoveFileW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpExistingFileName,
  ffi.Pointer<ffi.Uint16> lpNewFileName,
);

typedef _dart_MoveFileW = int Function(
  ffi.Pointer<ffi.Uint16> lpExistingFileName,
  ffi.Pointer<ffi.Uint16> lpNewFileName,
);

typedef _c_MoveFileExA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpExistingFileName,
  ffi.Pointer<ffi.Int8> lpNewFileName,
  ffi.Uint64 dwFlags,
);

typedef _dart_MoveFileExA = int Function(
  ffi.Pointer<ffi.Int8> lpExistingFileName,
  ffi.Pointer<ffi.Int8> lpNewFileName,
  int dwFlags,
);

typedef _c_MoveFileExW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpExistingFileName,
  ffi.Pointer<ffi.Uint16> lpNewFileName,
  ffi.Uint64 dwFlags,
);

typedef _dart_MoveFileExW = int Function(
  ffi.Pointer<ffi.Uint16> lpExistingFileName,
  ffi.Pointer<ffi.Uint16> lpNewFileName,
  int dwFlags,
);

typedef _c_ReplaceFileA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpReplacedFileName,
  ffi.Pointer<ffi.Int8> lpReplacementFileName,
  ffi.Pointer<ffi.Int8> lpBackupFileName,
  ffi.Uint64 dwReplaceFlags,
  ffi.Pointer<ffi.Void> lpExclude,
  ffi.Pointer<ffi.Void> lpReserved,
);

typedef _dart_ReplaceFileA = int Function(
  ffi.Pointer<ffi.Int8> lpReplacedFileName,
  ffi.Pointer<ffi.Int8> lpReplacementFileName,
  ffi.Pointer<ffi.Int8> lpBackupFileName,
  int dwReplaceFlags,
  ffi.Pointer<ffi.Void> lpExclude,
  ffi.Pointer<ffi.Void> lpReserved,
);

typedef _c_ReplaceFileW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpReplacedFileName,
  ffi.Pointer<ffi.Uint16> lpReplacementFileName,
  ffi.Pointer<ffi.Uint16> lpBackupFileName,
  ffi.Uint64 dwReplaceFlags,
  ffi.Pointer<ffi.Void> lpExclude,
  ffi.Pointer<ffi.Void> lpReserved,
);

typedef _dart_ReplaceFileW = int Function(
  ffi.Pointer<ffi.Uint16> lpReplacedFileName,
  ffi.Pointer<ffi.Uint16> lpReplacementFileName,
  ffi.Pointer<ffi.Uint16> lpBackupFileName,
  int dwReplaceFlags,
  ffi.Pointer<ffi.Void> lpExclude,
  ffi.Pointer<ffi.Void> lpReserved,
);

typedef _c_CreateHardLinkA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  ffi.Pointer<ffi.Int8> lpExistingFileName,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
);

typedef _dart_CreateHardLinkA = int Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  ffi.Pointer<ffi.Int8> lpExistingFileName,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
);

typedef _c_CreateHardLinkW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  ffi.Pointer<ffi.Uint16> lpExistingFileName,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
);

typedef _dart_CreateHardLinkW = int Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  ffi.Pointer<ffi.Uint16> lpExistingFileName,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
);

typedef _c_CreateHardLinkTransactedA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  ffi.Pointer<ffi.Int8> lpExistingFileName,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _dart_CreateHardLinkTransactedA = int Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  ffi.Pointer<ffi.Int8> lpExistingFileName,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _c_CreateHardLinkTransactedW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  ffi.Pointer<ffi.Uint16> lpExistingFileName,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _dart_CreateHardLinkTransactedW = int Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  ffi.Pointer<ffi.Uint16> lpExistingFileName,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _c_FindFirstStreamTransactedW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  ffi.Int32 InfoLevel,
  ffi.Pointer<ffi.Void> lpFindStreamData,
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _dart_FindFirstStreamTransactedW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  int InfoLevel,
  ffi.Pointer<ffi.Void> lpFindStreamData,
  int dwFlags,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _c_FindFirstFileNameTransactedW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Uint64> StringLength,
  ffi.Pointer<ffi.Uint16> LinkName,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _dart_FindFirstFileNameTransactedW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
  int dwFlags,
  ffi.Pointer<ffi.Uint64> StringLength,
  ffi.Pointer<ffi.Uint16> LinkName,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _c_CreateNamedPipeA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> lpName,
  ffi.Uint64 dwOpenMode,
  ffi.Uint64 dwPipeMode,
  ffi.Uint64 nMaxInstances,
  ffi.Uint64 nOutBufferSize,
  ffi.Uint64 nInBufferSize,
  ffi.Uint64 nDefaultTimeOut,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
);

typedef _dart_CreateNamedPipeA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> lpName,
  int dwOpenMode,
  int dwPipeMode,
  int nMaxInstances,
  int nOutBufferSize,
  int nInBufferSize,
  int nDefaultTimeOut,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
);

typedef _c_GetNamedPipeHandleStateA = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hNamedPipe,
  ffi.Pointer<ffi.Uint64> lpState,
  ffi.Pointer<ffi.Uint64> lpCurInstances,
  ffi.Pointer<ffi.Uint64> lpMaxCollectionCount,
  ffi.Pointer<ffi.Uint64> lpCollectDataTimeout,
  ffi.Pointer<ffi.Int8> lpUserName,
  ffi.Uint64 nMaxUserNameSize,
);

typedef _dart_GetNamedPipeHandleStateA = int Function(
  ffi.Pointer<ffi.Void> hNamedPipe,
  ffi.Pointer<ffi.Uint64> lpState,
  ffi.Pointer<ffi.Uint64> lpCurInstances,
  ffi.Pointer<ffi.Uint64> lpMaxCollectionCount,
  ffi.Pointer<ffi.Uint64> lpCollectDataTimeout,
  ffi.Pointer<ffi.Int8> lpUserName,
  int nMaxUserNameSize,
);

typedef _c_CallNamedPipeA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpNamedPipeName,
  ffi.Pointer<ffi.Void> lpInBuffer,
  ffi.Uint64 nInBufferSize,
  ffi.Pointer<ffi.Void> lpOutBuffer,
  ffi.Uint64 nOutBufferSize,
  ffi.Pointer<ffi.Uint64> lpBytesRead,
  ffi.Uint64 nTimeOut,
);

typedef _dart_CallNamedPipeA = int Function(
  ffi.Pointer<ffi.Int8> lpNamedPipeName,
  ffi.Pointer<ffi.Void> lpInBuffer,
  int nInBufferSize,
  ffi.Pointer<ffi.Void> lpOutBuffer,
  int nOutBufferSize,
  ffi.Pointer<ffi.Uint64> lpBytesRead,
  int nTimeOut,
);

typedef _c_WaitNamedPipeA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpNamedPipeName,
  ffi.Uint64 nTimeOut,
);

typedef _dart_WaitNamedPipeA = int Function(
  ffi.Pointer<ffi.Int8> lpNamedPipeName,
  int nTimeOut,
);

typedef _c_GetNamedPipeClientComputerNameA = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> Pipe,
  ffi.Pointer<ffi.Int8> ClientComputerName,
  ffi.Uint64 ClientComputerNameLength,
);

typedef _dart_GetNamedPipeClientComputerNameA = int Function(
  ffi.Pointer<ffi.Void> Pipe,
  ffi.Pointer<ffi.Int8> ClientComputerName,
  int ClientComputerNameLength,
);

typedef _c_GetNamedPipeClientProcessId = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> Pipe,
  ffi.Pointer<ffi.Uint64> ClientProcessId,
);

typedef _dart_GetNamedPipeClientProcessId = int Function(
  ffi.Pointer<ffi.Void> Pipe,
  ffi.Pointer<ffi.Uint64> ClientProcessId,
);

typedef _c_GetNamedPipeClientSessionId = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> Pipe,
  ffi.Pointer<ffi.Uint64> ClientSessionId,
);

typedef _dart_GetNamedPipeClientSessionId = int Function(
  ffi.Pointer<ffi.Void> Pipe,
  ffi.Pointer<ffi.Uint64> ClientSessionId,
);

typedef _c_GetNamedPipeServerProcessId = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> Pipe,
  ffi.Pointer<ffi.Uint64> ServerProcessId,
);

typedef _dart_GetNamedPipeServerProcessId = int Function(
  ffi.Pointer<ffi.Void> Pipe,
  ffi.Pointer<ffi.Uint64> ServerProcessId,
);

typedef _c_GetNamedPipeServerSessionId = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> Pipe,
  ffi.Pointer<ffi.Uint64> ServerSessionId,
);

typedef _dart_GetNamedPipeServerSessionId = int Function(
  ffi.Pointer<ffi.Void> Pipe,
  ffi.Pointer<ffi.Uint64> ServerSessionId,
);

typedef _c_SetVolumeLabelA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpRootPathName,
  ffi.Pointer<ffi.Int8> lpVolumeName,
);

typedef _dart_SetVolumeLabelA = int Function(
  ffi.Pointer<ffi.Int8> lpRootPathName,
  ffi.Pointer<ffi.Int8> lpVolumeName,
);

typedef _c_SetVolumeLabelW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpRootPathName,
  ffi.Pointer<ffi.Uint16> lpVolumeName,
);

typedef _dart_SetVolumeLabelW = int Function(
  ffi.Pointer<ffi.Uint16> lpRootPathName,
  ffi.Pointer<ffi.Uint16> lpVolumeName,
);

typedef _c_SetFileBandwidthReservation = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Uint64 nPeriodMilliseconds,
  ffi.Uint64 nBytesPerPeriod,
  ffi.Int32 bDiscardable,
  ffi.Pointer<ffi.Uint64> lpTransferSize,
  ffi.Pointer<ffi.Uint64> lpNumOutstandingRequests,
);

typedef _dart_SetFileBandwidthReservation = int Function(
  ffi.Pointer<ffi.Void> hFile,
  int nPeriodMilliseconds,
  int nBytesPerPeriod,
  int bDiscardable,
  ffi.Pointer<ffi.Uint64> lpTransferSize,
  ffi.Pointer<ffi.Uint64> lpNumOutstandingRequests,
);

typedef _c_GetFileBandwidthReservation = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<ffi.Uint64> lpPeriodMilliseconds,
  ffi.Pointer<ffi.Uint64> lpBytesPerPeriod,
  ffi.Pointer<ffi.Int32> pDiscardable,
  ffi.Pointer<ffi.Uint64> lpTransferSize,
  ffi.Pointer<ffi.Uint64> lpNumOutstandingRequests,
);

typedef _dart_GetFileBandwidthReservation = int Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<ffi.Uint64> lpPeriodMilliseconds,
  ffi.Pointer<ffi.Uint64> lpBytesPerPeriod,
  ffi.Pointer<ffi.Int32> pDiscardable,
  ffi.Pointer<ffi.Uint64> lpTransferSize,
  ffi.Pointer<ffi.Uint64> lpNumOutstandingRequests,
);

typedef _c_ClearEventLogA = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hEventLog,
  ffi.Pointer<ffi.Int8> lpBackupFileName,
);

typedef _dart_ClearEventLogA = int Function(
  ffi.Pointer<ffi.Void> hEventLog,
  ffi.Pointer<ffi.Int8> lpBackupFileName,
);

typedef _c_ClearEventLogW = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hEventLog,
  ffi.Pointer<ffi.Uint16> lpBackupFileName,
);

typedef _dart_ClearEventLogW = int Function(
  ffi.Pointer<ffi.Void> hEventLog,
  ffi.Pointer<ffi.Uint16> lpBackupFileName,
);

typedef _c_BackupEventLogA = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hEventLog,
  ffi.Pointer<ffi.Int8> lpBackupFileName,
);

typedef _dart_BackupEventLogA = int Function(
  ffi.Pointer<ffi.Void> hEventLog,
  ffi.Pointer<ffi.Int8> lpBackupFileName,
);

typedef _c_BackupEventLogW = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hEventLog,
  ffi.Pointer<ffi.Uint16> lpBackupFileName,
);

typedef _dart_BackupEventLogW = int Function(
  ffi.Pointer<ffi.Void> hEventLog,
  ffi.Pointer<ffi.Uint16> lpBackupFileName,
);

typedef _c_CloseEventLog = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hEventLog,
);

typedef _dart_CloseEventLog = int Function(
  ffi.Pointer<ffi.Void> hEventLog,
);

typedef _c_DeregisterEventSource = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hEventLog,
);

typedef _dart_DeregisterEventSource = int Function(
  ffi.Pointer<ffi.Void> hEventLog,
);

typedef _c_NotifyChangeEventLog = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hEventLog,
  ffi.Pointer<ffi.Void> hEvent,
);

typedef _dart_NotifyChangeEventLog = int Function(
  ffi.Pointer<ffi.Void> hEventLog,
  ffi.Pointer<ffi.Void> hEvent,
);

typedef _c_GetNumberOfEventLogRecords = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hEventLog,
  ffi.Pointer<ffi.Uint64> NumberOfRecords,
);

typedef _dart_GetNumberOfEventLogRecords = int Function(
  ffi.Pointer<ffi.Void> hEventLog,
  ffi.Pointer<ffi.Uint64> NumberOfRecords,
);

typedef _c_GetOldestEventLogRecord = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hEventLog,
  ffi.Pointer<ffi.Uint64> OldestRecord,
);

typedef _dart_GetOldestEventLogRecord = int Function(
  ffi.Pointer<ffi.Void> hEventLog,
  ffi.Pointer<ffi.Uint64> OldestRecord,
);

typedef _c_OpenEventLogA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> lpUNCServerName,
  ffi.Pointer<ffi.Int8> lpSourceName,
);

typedef _dart_OpenEventLogA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> lpUNCServerName,
  ffi.Pointer<ffi.Int8> lpSourceName,
);

typedef _c_OpenEventLogW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpUNCServerName,
  ffi.Pointer<ffi.Uint16> lpSourceName,
);

typedef _dart_OpenEventLogW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpUNCServerName,
  ffi.Pointer<ffi.Uint16> lpSourceName,
);

typedef _c_RegisterEventSourceA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> lpUNCServerName,
  ffi.Pointer<ffi.Int8> lpSourceName,
);

typedef _dart_RegisterEventSourceA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> lpUNCServerName,
  ffi.Pointer<ffi.Int8> lpSourceName,
);

typedef _c_RegisterEventSourceW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpUNCServerName,
  ffi.Pointer<ffi.Uint16> lpSourceName,
);

typedef _dart_RegisterEventSourceW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpUNCServerName,
  ffi.Pointer<ffi.Uint16> lpSourceName,
);

typedef _c_OpenBackupEventLogA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> lpUNCServerName,
  ffi.Pointer<ffi.Int8> lpFileName,
);

typedef _dart_OpenBackupEventLogA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> lpUNCServerName,
  ffi.Pointer<ffi.Int8> lpFileName,
);

typedef _c_OpenBackupEventLogW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpUNCServerName,
  ffi.Pointer<ffi.Uint16> lpFileName,
);

typedef _dart_OpenBackupEventLogW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpUNCServerName,
  ffi.Pointer<ffi.Uint16> lpFileName,
);

typedef _c_ReadEventLogA = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hEventLog,
  ffi.Uint64 dwReadFlags,
  ffi.Uint64 dwRecordOffset,
  ffi.Pointer<ffi.Void> lpBuffer,
  ffi.Uint64 nNumberOfBytesToRead,
  ffi.Pointer<ffi.Uint64> pnBytesRead,
  ffi.Pointer<ffi.Uint64> pnMinNumberOfBytesNeeded,
);

typedef _dart_ReadEventLogA = int Function(
  ffi.Pointer<ffi.Void> hEventLog,
  int dwReadFlags,
  int dwRecordOffset,
  ffi.Pointer<ffi.Void> lpBuffer,
  int nNumberOfBytesToRead,
  ffi.Pointer<ffi.Uint64> pnBytesRead,
  ffi.Pointer<ffi.Uint64> pnMinNumberOfBytesNeeded,
);

typedef _c_ReadEventLogW = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hEventLog,
  ffi.Uint64 dwReadFlags,
  ffi.Uint64 dwRecordOffset,
  ffi.Pointer<ffi.Void> lpBuffer,
  ffi.Uint64 nNumberOfBytesToRead,
  ffi.Pointer<ffi.Uint64> pnBytesRead,
  ffi.Pointer<ffi.Uint64> pnMinNumberOfBytesNeeded,
);

typedef _dart_ReadEventLogW = int Function(
  ffi.Pointer<ffi.Void> hEventLog,
  int dwReadFlags,
  int dwRecordOffset,
  ffi.Pointer<ffi.Void> lpBuffer,
  int nNumberOfBytesToRead,
  ffi.Pointer<ffi.Uint64> pnBytesRead,
  ffi.Pointer<ffi.Uint64> pnMinNumberOfBytesNeeded,
);

typedef _c_ReportEventA = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hEventLog,
  ffi.Uint16 wType,
  ffi.Uint16 wCategory,
  ffi.Uint64 dwEventID,
  ffi.Pointer<ffi.Void> lpUserSid,
  ffi.Uint16 wNumStrings,
  ffi.Uint64 dwDataSize,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> lpStrings,
  ffi.Pointer<ffi.Void> lpRawData,
);

typedef _dart_ReportEventA = int Function(
  ffi.Pointer<ffi.Void> hEventLog,
  int wType,
  int wCategory,
  int dwEventID,
  ffi.Pointer<ffi.Void> lpUserSid,
  int wNumStrings,
  int dwDataSize,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> lpStrings,
  ffi.Pointer<ffi.Void> lpRawData,
);

typedef _c_ReportEventW = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hEventLog,
  ffi.Uint16 wType,
  ffi.Uint16 wCategory,
  ffi.Uint64 dwEventID,
  ffi.Pointer<ffi.Void> lpUserSid,
  ffi.Uint16 wNumStrings,
  ffi.Uint64 dwDataSize,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> lpStrings,
  ffi.Pointer<ffi.Void> lpRawData,
);

typedef _dart_ReportEventW = int Function(
  ffi.Pointer<ffi.Void> hEventLog,
  int wType,
  int wCategory,
  int dwEventID,
  ffi.Pointer<ffi.Void> lpUserSid,
  int wNumStrings,
  int dwDataSize,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> lpStrings,
  ffi.Pointer<ffi.Void> lpRawData,
);

typedef _c_GetEventLogInformation = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hEventLog,
  ffi.Uint64 dwInfoLevel,
  ffi.Pointer<ffi.Void> lpBuffer,
  ffi.Uint64 cbBufSize,
  ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
);

typedef _dart_GetEventLogInformation = int Function(
  ffi.Pointer<ffi.Void> hEventLog,
  int dwInfoLevel,
  ffi.Pointer<ffi.Void> lpBuffer,
  int cbBufSize,
  ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
);

typedef _c_OperationStart = ffi.Int32 Function(
  ffi.Pointer<POPERATION_START_PARAMETERS> OperationStartParams,
);

typedef _dart_OperationStart = int Function(
  ffi.Pointer<POPERATION_START_PARAMETERS> OperationStartParams,
);

typedef _c_OperationEnd = ffi.Int32 Function(
  ffi.Pointer<POPERATION_END_PARAMETERS> OperationEndParams,
);

typedef _dart_OperationEnd = int Function(
  ffi.Pointer<POPERATION_END_PARAMETERS> OperationEndParams,
);

typedef _c_AccessCheckAndAuditAlarmA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> SubsystemName,
  ffi.Pointer<ffi.Void> HandleId,
  ffi.Pointer<ffi.Int8> ObjectTypeName,
  ffi.Pointer<ffi.Int8> ObjectName,
  ffi.Pointer<ffi.Void> SecurityDescriptor,
  ffi.Uint64 DesiredAccess,
  ffi.Pointer<GENERIC_MAPPING> GenericMapping,
  ffi.Int32 ObjectCreation,
  ffi.Pointer<ffi.Uint64> GrantedAccess,
  ffi.Pointer<ffi.Int32> AccessStatus,
  ffi.Pointer<ffi.Int32> pfGenerateOnClose,
);

typedef _dart_AccessCheckAndAuditAlarmA = int Function(
  ffi.Pointer<ffi.Int8> SubsystemName,
  ffi.Pointer<ffi.Void> HandleId,
  ffi.Pointer<ffi.Int8> ObjectTypeName,
  ffi.Pointer<ffi.Int8> ObjectName,
  ffi.Pointer<ffi.Void> SecurityDescriptor,
  int DesiredAccess,
  ffi.Pointer<GENERIC_MAPPING> GenericMapping,
  int ObjectCreation,
  ffi.Pointer<ffi.Uint64> GrantedAccess,
  ffi.Pointer<ffi.Int32> AccessStatus,
  ffi.Pointer<ffi.Int32> pfGenerateOnClose,
);

typedef _c_AccessCheckByTypeAndAuditAlarmA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> SubsystemName,
  ffi.Pointer<ffi.Void> HandleId,
  ffi.Pointer<ffi.Int8> ObjectTypeName,
  ffi.Pointer<ffi.Int8> ObjectName,
  ffi.Pointer<ffi.Void> SecurityDescriptor,
  ffi.Pointer<ffi.Void> PrincipalSelfSid,
  ffi.Uint64 DesiredAccess,
  ffi.Int32 AuditType,
  ffi.Uint64 Flags,
  ffi.Pointer<POBJECT_TYPE_LIST> ObjectTypeList,
  ffi.Uint64 ObjectTypeListLength,
  ffi.Pointer<GENERIC_MAPPING> GenericMapping,
  ffi.Int32 ObjectCreation,
  ffi.Pointer<ffi.Uint64> GrantedAccess,
  ffi.Pointer<ffi.Int32> AccessStatus,
  ffi.Pointer<ffi.Int32> pfGenerateOnClose,
);

typedef _dart_AccessCheckByTypeAndAuditAlarmA = int Function(
  ffi.Pointer<ffi.Int8> SubsystemName,
  ffi.Pointer<ffi.Void> HandleId,
  ffi.Pointer<ffi.Int8> ObjectTypeName,
  ffi.Pointer<ffi.Int8> ObjectName,
  ffi.Pointer<ffi.Void> SecurityDescriptor,
  ffi.Pointer<ffi.Void> PrincipalSelfSid,
  int DesiredAccess,
  int AuditType,
  int Flags,
  ffi.Pointer<POBJECT_TYPE_LIST> ObjectTypeList,
  int ObjectTypeListLength,
  ffi.Pointer<GENERIC_MAPPING> GenericMapping,
  int ObjectCreation,
  ffi.Pointer<ffi.Uint64> GrantedAccess,
  ffi.Pointer<ffi.Int32> AccessStatus,
  ffi.Pointer<ffi.Int32> pfGenerateOnClose,
);

typedef _c_AccessCheckByTypeResultListAndAuditAlarmA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> SubsystemName,
  ffi.Pointer<ffi.Void> HandleId,
  ffi.Pointer<ffi.Int8> ObjectTypeName,
  ffi.Pointer<ffi.Int8> ObjectName,
  ffi.Pointer<ffi.Void> SecurityDescriptor,
  ffi.Pointer<ffi.Void> PrincipalSelfSid,
  ffi.Uint64 DesiredAccess,
  ffi.Int32 AuditType,
  ffi.Uint64 Flags,
  ffi.Pointer<POBJECT_TYPE_LIST> ObjectTypeList,
  ffi.Uint64 ObjectTypeListLength,
  ffi.Pointer<GENERIC_MAPPING> GenericMapping,
  ffi.Int32 ObjectCreation,
  ffi.Pointer<ffi.Uint64> GrantedAccess,
  ffi.Pointer<ffi.Uint64> AccessStatusList,
  ffi.Pointer<ffi.Int32> pfGenerateOnClose,
);

typedef _dart_AccessCheckByTypeResultListAndAuditAlarmA = int Function(
  ffi.Pointer<ffi.Int8> SubsystemName,
  ffi.Pointer<ffi.Void> HandleId,
  ffi.Pointer<ffi.Int8> ObjectTypeName,
  ffi.Pointer<ffi.Int8> ObjectName,
  ffi.Pointer<ffi.Void> SecurityDescriptor,
  ffi.Pointer<ffi.Void> PrincipalSelfSid,
  int DesiredAccess,
  int AuditType,
  int Flags,
  ffi.Pointer<POBJECT_TYPE_LIST> ObjectTypeList,
  int ObjectTypeListLength,
  ffi.Pointer<GENERIC_MAPPING> GenericMapping,
  int ObjectCreation,
  ffi.Pointer<ffi.Uint64> GrantedAccess,
  ffi.Pointer<ffi.Uint64> AccessStatusList,
  ffi.Pointer<ffi.Int32> pfGenerateOnClose,
);

typedef _c_AccessCheckByTypeResultListAndAuditAlarmByHandleA = ffi.Int32
    Function(
  ffi.Pointer<ffi.Int8> SubsystemName,
  ffi.Pointer<ffi.Void> HandleId,
  ffi.Pointer<ffi.Void> ClientToken,
  ffi.Pointer<ffi.Int8> ObjectTypeName,
  ffi.Pointer<ffi.Int8> ObjectName,
  ffi.Pointer<ffi.Void> SecurityDescriptor,
  ffi.Pointer<ffi.Void> PrincipalSelfSid,
  ffi.Uint64 DesiredAccess,
  ffi.Int32 AuditType,
  ffi.Uint64 Flags,
  ffi.Pointer<POBJECT_TYPE_LIST> ObjectTypeList,
  ffi.Uint64 ObjectTypeListLength,
  ffi.Pointer<GENERIC_MAPPING> GenericMapping,
  ffi.Int32 ObjectCreation,
  ffi.Pointer<ffi.Uint64> GrantedAccess,
  ffi.Pointer<ffi.Uint64> AccessStatusList,
  ffi.Pointer<ffi.Int32> pfGenerateOnClose,
);

typedef _dart_AccessCheckByTypeResultListAndAuditAlarmByHandleA = int Function(
  ffi.Pointer<ffi.Int8> SubsystemName,
  ffi.Pointer<ffi.Void> HandleId,
  ffi.Pointer<ffi.Void> ClientToken,
  ffi.Pointer<ffi.Int8> ObjectTypeName,
  ffi.Pointer<ffi.Int8> ObjectName,
  ffi.Pointer<ffi.Void> SecurityDescriptor,
  ffi.Pointer<ffi.Void> PrincipalSelfSid,
  int DesiredAccess,
  int AuditType,
  int Flags,
  ffi.Pointer<POBJECT_TYPE_LIST> ObjectTypeList,
  int ObjectTypeListLength,
  ffi.Pointer<GENERIC_MAPPING> GenericMapping,
  int ObjectCreation,
  ffi.Pointer<ffi.Uint64> GrantedAccess,
  ffi.Pointer<ffi.Uint64> AccessStatusList,
  ffi.Pointer<ffi.Int32> pfGenerateOnClose,
);

typedef _c_ObjectOpenAuditAlarmA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> SubsystemName,
  ffi.Pointer<ffi.Void> HandleId,
  ffi.Pointer<ffi.Int8> ObjectTypeName,
  ffi.Pointer<ffi.Int8> ObjectName,
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
  ffi.Pointer<ffi.Void> ClientToken,
  ffi.Uint64 DesiredAccess,
  ffi.Uint64 GrantedAccess,
  ffi.Pointer<PPRIVILEGE_SET> Privileges,
  ffi.Int32 ObjectCreation,
  ffi.Int32 AccessGranted,
  ffi.Pointer<ffi.Int32> GenerateOnClose,
);

typedef _dart_ObjectOpenAuditAlarmA = int Function(
  ffi.Pointer<ffi.Int8> SubsystemName,
  ffi.Pointer<ffi.Void> HandleId,
  ffi.Pointer<ffi.Int8> ObjectTypeName,
  ffi.Pointer<ffi.Int8> ObjectName,
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
  ffi.Pointer<ffi.Void> ClientToken,
  int DesiredAccess,
  int GrantedAccess,
  ffi.Pointer<PPRIVILEGE_SET> Privileges,
  int ObjectCreation,
  int AccessGranted,
  ffi.Pointer<ffi.Int32> GenerateOnClose,
);

typedef _c_ObjectPrivilegeAuditAlarmA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> SubsystemName,
  ffi.Pointer<ffi.Void> HandleId,
  ffi.Pointer<ffi.Void> ClientToken,
  ffi.Uint64 DesiredAccess,
  ffi.Pointer<PPRIVILEGE_SET> Privileges,
  ffi.Int32 AccessGranted,
);

typedef _dart_ObjectPrivilegeAuditAlarmA = int Function(
  ffi.Pointer<ffi.Int8> SubsystemName,
  ffi.Pointer<ffi.Void> HandleId,
  ffi.Pointer<ffi.Void> ClientToken,
  int DesiredAccess,
  ffi.Pointer<PPRIVILEGE_SET> Privileges,
  int AccessGranted,
);

typedef _c_ObjectCloseAuditAlarmA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> SubsystemName,
  ffi.Pointer<ffi.Void> HandleId,
  ffi.Int32 GenerateOnClose,
);

typedef _dart_ObjectCloseAuditAlarmA = int Function(
  ffi.Pointer<ffi.Int8> SubsystemName,
  ffi.Pointer<ffi.Void> HandleId,
  int GenerateOnClose,
);

typedef _c_ObjectDeleteAuditAlarmA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> SubsystemName,
  ffi.Pointer<ffi.Void> HandleId,
  ffi.Int32 GenerateOnClose,
);

typedef _dart_ObjectDeleteAuditAlarmA = int Function(
  ffi.Pointer<ffi.Int8> SubsystemName,
  ffi.Pointer<ffi.Void> HandleId,
  int GenerateOnClose,
);

typedef _c_PrivilegedServiceAuditAlarmA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> SubsystemName,
  ffi.Pointer<ffi.Int8> ServiceName,
  ffi.Pointer<ffi.Void> ClientToken,
  ffi.Pointer<PPRIVILEGE_SET> Privileges,
  ffi.Int32 AccessGranted,
);

typedef _dart_PrivilegedServiceAuditAlarmA = int Function(
  ffi.Pointer<ffi.Int8> SubsystemName,
  ffi.Pointer<ffi.Int8> ServiceName,
  ffi.Pointer<ffi.Void> ClientToken,
  ffi.Pointer<PPRIVILEGE_SET> Privileges,
  int AccessGranted,
);

typedef _c_AddConditionalAce = ffi.Int32 Function(
  ffi.Pointer<ACL> pAcl,
  ffi.Uint64 dwAceRevision,
  ffi.Uint64 AceFlags,
  ffi.Uint8 AceType,
  ffi.Uint64 AccessMask,
  ffi.Pointer<ffi.Void> pSid,
  ffi.Pointer<ffi.Uint16> ConditionStr,
  ffi.Pointer<ffi.Uint64> ReturnLength,
);

typedef _dart_AddConditionalAce = int Function(
  ffi.Pointer<ACL> pAcl,
  int dwAceRevision,
  int AceFlags,
  int AceType,
  int AccessMask,
  ffi.Pointer<ffi.Void> pSid,
  ffi.Pointer<ffi.Uint16> ConditionStr,
  ffi.Pointer<ffi.Uint64> ReturnLength,
);

typedef _c_SetFileSecurityA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  ffi.Uint64 SecurityInformation,
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
);

typedef _dart_SetFileSecurityA = int Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  int SecurityInformation,
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
);

typedef _c_GetFileSecurityA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  ffi.Uint64 RequestedInformation,
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
  ffi.Uint64 nLength,
  ffi.Pointer<ffi.Uint64> lpnLengthNeeded,
);

typedef _dart_GetFileSecurityA = int Function(
  ffi.Pointer<ffi.Int8> lpFileName,
  int RequestedInformation,
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
  int nLength,
  ffi.Pointer<ffi.Uint64> lpnLengthNeeded,
);

typedef _c_ReadDirectoryChangesW = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hDirectory,
  ffi.Pointer<ffi.Void> lpBuffer,
  ffi.Uint64 nBufferLength,
  ffi.Int32 bWatchSubtree,
  ffi.Uint64 dwNotifyFilter,
  ffi.Pointer<ffi.Uint64> lpBytesReturned,
  ffi.Pointer<LPOVERLAPPED> lpOverlapped,
  ffi.Pointer<ffi.NativeFunction<LPOVERLAPPED_COMPLETION_ROUTINE>>
      lpCompletionRoutine,
);

typedef _dart_ReadDirectoryChangesW = int Function(
  ffi.Pointer<ffi.Void> hDirectory,
  ffi.Pointer<ffi.Void> lpBuffer,
  int nBufferLength,
  int bWatchSubtree,
  int dwNotifyFilter,
  ffi.Pointer<ffi.Uint64> lpBytesReturned,
  ffi.Pointer<LPOVERLAPPED> lpOverlapped,
  ffi.Pointer<ffi.NativeFunction<LPOVERLAPPED_COMPLETION_ROUTINE>>
      lpCompletionRoutine,
);

typedef _c_ReadDirectoryChangesExW = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hDirectory,
  ffi.Pointer<ffi.Void> lpBuffer,
  ffi.Uint64 nBufferLength,
  ffi.Int32 bWatchSubtree,
  ffi.Uint64 dwNotifyFilter,
  ffi.Pointer<ffi.Uint64> lpBytesReturned,
  ffi.Pointer<LPOVERLAPPED> lpOverlapped,
  ffi.Pointer<ffi.NativeFunction<LPOVERLAPPED_COMPLETION_ROUTINE>>
      lpCompletionRoutine,
  ffi.Int32 ReadDirectoryNotifyInformationClass,
);

typedef _dart_ReadDirectoryChangesExW = int Function(
  ffi.Pointer<ffi.Void> hDirectory,
  ffi.Pointer<ffi.Void> lpBuffer,
  int nBufferLength,
  int bWatchSubtree,
  int dwNotifyFilter,
  ffi.Pointer<ffi.Uint64> lpBytesReturned,
  ffi.Pointer<LPOVERLAPPED> lpOverlapped,
  ffi.Pointer<ffi.NativeFunction<LPOVERLAPPED_COMPLETION_ROUTINE>>
      lpCompletionRoutine,
  int ReadDirectoryNotifyInformationClass,
);

typedef _c_MapViewOfFileExNuma = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hFileMappingObject,
  ffi.Uint64 dwDesiredAccess,
  ffi.Uint64 dwFileOffsetHigh,
  ffi.Uint64 dwFileOffsetLow,
  ffi.Uint64 dwNumberOfBytesToMap,
  ffi.Pointer<ffi.Void> lpBaseAddress,
  ffi.Uint64 nndPreferred,
);

typedef _dart_MapViewOfFileExNuma = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hFileMappingObject,
  int dwDesiredAccess,
  int dwFileOffsetHigh,
  int dwFileOffsetLow,
  int dwNumberOfBytesToMap,
  ffi.Pointer<ffi.Void> lpBaseAddress,
  int nndPreferred,
);

typedef _c_IsBadReadPtr = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> lp,
  ffi.Uint64 ucb,
);

typedef _dart_IsBadReadPtr = int Function(
  ffi.Pointer<ffi.Void> lp,
  int ucb,
);

typedef _c_IsBadWritePtr = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> lp,
  ffi.Uint64 ucb,
);

typedef _dart_IsBadWritePtr = int Function(
  ffi.Pointer<ffi.Void> lp,
  int ucb,
);

typedef _c_IsBadHugeReadPtr = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> lp,
  ffi.Uint64 ucb,
);

typedef _dart_IsBadHugeReadPtr = int Function(
  ffi.Pointer<ffi.Void> lp,
  int ucb,
);

typedef _c_IsBadHugeWritePtr = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> lp,
  ffi.Uint64 ucb,
);

typedef _dart_IsBadHugeWritePtr = int Function(
  ffi.Pointer<ffi.Void> lp,
  int ucb,
);

typedef _c_IsBadCodePtr = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<FARPROC>> lpfn,
);

typedef _dart_IsBadCodePtr = int Function(
  ffi.Pointer<ffi.NativeFunction<FARPROC>> lpfn,
);

typedef _c_IsBadStringPtrA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpsz,
  ffi.Uint64 ucchMax,
);

typedef _dart_IsBadStringPtrA = int Function(
  ffi.Pointer<ffi.Int8> lpsz,
  int ucchMax,
);

typedef _c_IsBadStringPtrW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpsz,
  ffi.Uint64 ucchMax,
);

typedef _dart_IsBadStringPtrW = int Function(
  ffi.Pointer<ffi.Uint16> lpsz,
  int ucchMax,
);

typedef _c_LookupAccountSidA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpSystemName,
  ffi.Pointer<ffi.Void> Sid,
  ffi.Pointer<ffi.Int8> Name,
  ffi.Pointer<ffi.Uint64> cchName,
  ffi.Pointer<ffi.Int8> ReferencedDomainName,
  ffi.Pointer<ffi.Uint64> cchReferencedDomainName,
  ffi.Pointer<ffi.Int32> peUse,
);

typedef _dart_LookupAccountSidA = int Function(
  ffi.Pointer<ffi.Int8> lpSystemName,
  ffi.Pointer<ffi.Void> Sid,
  ffi.Pointer<ffi.Int8> Name,
  ffi.Pointer<ffi.Uint64> cchName,
  ffi.Pointer<ffi.Int8> ReferencedDomainName,
  ffi.Pointer<ffi.Uint64> cchReferencedDomainName,
  ffi.Pointer<ffi.Int32> peUse,
);

typedef _c_LookupAccountSidW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpSystemName,
  ffi.Pointer<ffi.Void> Sid,
  ffi.Pointer<ffi.Uint16> Name,
  ffi.Pointer<ffi.Uint64> cchName,
  ffi.Pointer<ffi.Uint16> ReferencedDomainName,
  ffi.Pointer<ffi.Uint64> cchReferencedDomainName,
  ffi.Pointer<ffi.Int32> peUse,
);

typedef _dart_LookupAccountSidW = int Function(
  ffi.Pointer<ffi.Uint16> lpSystemName,
  ffi.Pointer<ffi.Void> Sid,
  ffi.Pointer<ffi.Uint16> Name,
  ffi.Pointer<ffi.Uint64> cchName,
  ffi.Pointer<ffi.Uint16> ReferencedDomainName,
  ffi.Pointer<ffi.Uint64> cchReferencedDomainName,
  ffi.Pointer<ffi.Int32> peUse,
);

typedef _c_LookupAccountNameA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpSystemName,
  ffi.Pointer<ffi.Int8> lpAccountName,
  ffi.Pointer<ffi.Void> Sid,
  ffi.Pointer<ffi.Uint64> cbSid,
  ffi.Pointer<ffi.Int8> ReferencedDomainName,
  ffi.Pointer<ffi.Uint64> cchReferencedDomainName,
  ffi.Pointer<ffi.Int32> peUse,
);

typedef _dart_LookupAccountNameA = int Function(
  ffi.Pointer<ffi.Int8> lpSystemName,
  ffi.Pointer<ffi.Int8> lpAccountName,
  ffi.Pointer<ffi.Void> Sid,
  ffi.Pointer<ffi.Uint64> cbSid,
  ffi.Pointer<ffi.Int8> ReferencedDomainName,
  ffi.Pointer<ffi.Uint64> cchReferencedDomainName,
  ffi.Pointer<ffi.Int32> peUse,
);

typedef _c_LookupAccountNameW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpSystemName,
  ffi.Pointer<ffi.Uint16> lpAccountName,
  ffi.Pointer<ffi.Void> Sid,
  ffi.Pointer<ffi.Uint64> cbSid,
  ffi.Pointer<ffi.Uint16> ReferencedDomainName,
  ffi.Pointer<ffi.Uint64> cchReferencedDomainName,
  ffi.Pointer<ffi.Int32> peUse,
);

typedef _dart_LookupAccountNameW = int Function(
  ffi.Pointer<ffi.Uint16> lpSystemName,
  ffi.Pointer<ffi.Uint16> lpAccountName,
  ffi.Pointer<ffi.Void> Sid,
  ffi.Pointer<ffi.Uint64> cbSid,
  ffi.Pointer<ffi.Uint16> ReferencedDomainName,
  ffi.Pointer<ffi.Uint64> cchReferencedDomainName,
  ffi.Pointer<ffi.Int32> peUse,
);

typedef _c_LookupAccountNameLocalA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpAccountName,
  ffi.Pointer<ffi.Void> Sid,
  ffi.Pointer<ffi.Uint64> cbSid,
  ffi.Pointer<ffi.Int8> ReferencedDomainName,
  ffi.Pointer<ffi.Uint64> cchReferencedDomainName,
  ffi.Pointer<ffi.Int32> peUse,
);

typedef _dart_LookupAccountNameLocalA = int Function(
  ffi.Pointer<ffi.Int8> lpAccountName,
  ffi.Pointer<ffi.Void> Sid,
  ffi.Pointer<ffi.Uint64> cbSid,
  ffi.Pointer<ffi.Int8> ReferencedDomainName,
  ffi.Pointer<ffi.Uint64> cchReferencedDomainName,
  ffi.Pointer<ffi.Int32> peUse,
);

typedef _c_LookupAccountNameLocalW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpAccountName,
  ffi.Pointer<ffi.Void> Sid,
  ffi.Pointer<ffi.Uint64> cbSid,
  ffi.Pointer<ffi.Uint16> ReferencedDomainName,
  ffi.Pointer<ffi.Uint64> cchReferencedDomainName,
  ffi.Pointer<ffi.Int32> peUse,
);

typedef _dart_LookupAccountNameLocalW = int Function(
  ffi.Pointer<ffi.Uint16> lpAccountName,
  ffi.Pointer<ffi.Void> Sid,
  ffi.Pointer<ffi.Uint64> cbSid,
  ffi.Pointer<ffi.Uint16> ReferencedDomainName,
  ffi.Pointer<ffi.Uint64> cchReferencedDomainName,
  ffi.Pointer<ffi.Int32> peUse,
);

typedef _c_LookupAccountSidLocalA = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> Sid,
  ffi.Pointer<ffi.Int8> Name,
  ffi.Pointer<ffi.Uint64> cchName,
  ffi.Pointer<ffi.Int8> ReferencedDomainName,
  ffi.Pointer<ffi.Uint64> cchReferencedDomainName,
  ffi.Pointer<ffi.Int32> peUse,
);

typedef _dart_LookupAccountSidLocalA = int Function(
  ffi.Pointer<ffi.Void> Sid,
  ffi.Pointer<ffi.Int8> Name,
  ffi.Pointer<ffi.Uint64> cchName,
  ffi.Pointer<ffi.Int8> ReferencedDomainName,
  ffi.Pointer<ffi.Uint64> cchReferencedDomainName,
  ffi.Pointer<ffi.Int32> peUse,
);

typedef _c_LookupAccountSidLocalW = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> Sid,
  ffi.Pointer<ffi.Uint16> Name,
  ffi.Pointer<ffi.Uint64> cchName,
  ffi.Pointer<ffi.Uint16> ReferencedDomainName,
  ffi.Pointer<ffi.Uint64> cchReferencedDomainName,
  ffi.Pointer<ffi.Int32> peUse,
);

typedef _dart_LookupAccountSidLocalW = int Function(
  ffi.Pointer<ffi.Void> Sid,
  ffi.Pointer<ffi.Uint16> Name,
  ffi.Pointer<ffi.Uint64> cchName,
  ffi.Pointer<ffi.Uint16> ReferencedDomainName,
  ffi.Pointer<ffi.Uint64> cchReferencedDomainName,
  ffi.Pointer<ffi.Int32> peUse,
);

typedef _c_LookupPrivilegeValueA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpSystemName,
  ffi.Pointer<ffi.Int8> lpName,
  ffi.Pointer<PLUID> lpLuid,
);

typedef _dart_LookupPrivilegeValueA = int Function(
  ffi.Pointer<ffi.Int8> lpSystemName,
  ffi.Pointer<ffi.Int8> lpName,
  ffi.Pointer<PLUID> lpLuid,
);

typedef _c_LookupPrivilegeValueW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpSystemName,
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Pointer<PLUID> lpLuid,
);

typedef _dart_LookupPrivilegeValueW = int Function(
  ffi.Pointer<ffi.Uint16> lpSystemName,
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Pointer<PLUID> lpLuid,
);

typedef _c_LookupPrivilegeNameA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpSystemName,
  ffi.Pointer<PLUID> lpLuid,
  ffi.Pointer<ffi.Int8> lpName,
  ffi.Pointer<ffi.Uint64> cchName,
);

typedef _dart_LookupPrivilegeNameA = int Function(
  ffi.Pointer<ffi.Int8> lpSystemName,
  ffi.Pointer<PLUID> lpLuid,
  ffi.Pointer<ffi.Int8> lpName,
  ffi.Pointer<ffi.Uint64> cchName,
);

typedef _c_LookupPrivilegeNameW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpSystemName,
  ffi.Pointer<PLUID> lpLuid,
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Pointer<ffi.Uint64> cchName,
);

typedef _dart_LookupPrivilegeNameW = int Function(
  ffi.Pointer<ffi.Uint16> lpSystemName,
  ffi.Pointer<PLUID> lpLuid,
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Pointer<ffi.Uint64> cchName,
);

typedef _c_LookupPrivilegeDisplayNameA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpSystemName,
  ffi.Pointer<ffi.Int8> lpName,
  ffi.Pointer<ffi.Int8> lpDisplayName,
  ffi.Pointer<ffi.Uint64> cchDisplayName,
  ffi.Pointer<ffi.Uint64> lpLanguageId,
);

typedef _dart_LookupPrivilegeDisplayNameA = int Function(
  ffi.Pointer<ffi.Int8> lpSystemName,
  ffi.Pointer<ffi.Int8> lpName,
  ffi.Pointer<ffi.Int8> lpDisplayName,
  ffi.Pointer<ffi.Uint64> cchDisplayName,
  ffi.Pointer<ffi.Uint64> lpLanguageId,
);

typedef _c_LookupPrivilegeDisplayNameW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpSystemName,
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Pointer<ffi.Uint16> lpDisplayName,
  ffi.Pointer<ffi.Uint64> cchDisplayName,
  ffi.Pointer<ffi.Uint64> lpLanguageId,
);

typedef _dart_LookupPrivilegeDisplayNameW = int Function(
  ffi.Pointer<ffi.Uint16> lpSystemName,
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Pointer<ffi.Uint16> lpDisplayName,
  ffi.Pointer<ffi.Uint64> cchDisplayName,
  ffi.Pointer<ffi.Uint64> lpLanguageId,
);

typedef _c_BuildCommDCBA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpDef,
  ffi.Pointer<LPDCB> lpDCB,
);

typedef _dart_BuildCommDCBA = int Function(
  ffi.Pointer<ffi.Int8> lpDef,
  ffi.Pointer<LPDCB> lpDCB,
);

typedef _c_BuildCommDCBW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpDef,
  ffi.Pointer<LPDCB> lpDCB,
);

typedef _dart_BuildCommDCBW = int Function(
  ffi.Pointer<ffi.Uint16> lpDef,
  ffi.Pointer<LPDCB> lpDCB,
);

typedef _c_BuildCommDCBAndTimeoutsA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpDef,
  ffi.Pointer<LPDCB> lpDCB,
  ffi.Pointer<LPCOMMTIMEOUTS> lpCommTimeouts,
);

typedef _dart_BuildCommDCBAndTimeoutsA = int Function(
  ffi.Pointer<ffi.Int8> lpDef,
  ffi.Pointer<LPDCB> lpDCB,
  ffi.Pointer<LPCOMMTIMEOUTS> lpCommTimeouts,
);

typedef _c_BuildCommDCBAndTimeoutsW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpDef,
  ffi.Pointer<LPDCB> lpDCB,
  ffi.Pointer<LPCOMMTIMEOUTS> lpCommTimeouts,
);

typedef _dart_BuildCommDCBAndTimeoutsW = int Function(
  ffi.Pointer<ffi.Uint16> lpDef,
  ffi.Pointer<LPDCB> lpDCB,
  ffi.Pointer<LPCOMMTIMEOUTS> lpCommTimeouts,
);

typedef _c_CommConfigDialogA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpszName,
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<LPCOMMCONFIG> lpCC,
);

typedef _dart_CommConfigDialogA = int Function(
  ffi.Pointer<ffi.Int8> lpszName,
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<LPCOMMCONFIG> lpCC,
);

typedef _c_CommConfigDialogW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpszName,
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<LPCOMMCONFIG> lpCC,
);

typedef _dart_CommConfigDialogW = int Function(
  ffi.Pointer<ffi.Uint16> lpszName,
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<LPCOMMCONFIG> lpCC,
);

typedef _c_GetDefaultCommConfigA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpszName,
  ffi.Pointer<LPCOMMCONFIG> lpCC,
  ffi.Pointer<ffi.Uint64> lpdwSize,
);

typedef _dart_GetDefaultCommConfigA = int Function(
  ffi.Pointer<ffi.Int8> lpszName,
  ffi.Pointer<LPCOMMCONFIG> lpCC,
  ffi.Pointer<ffi.Uint64> lpdwSize,
);

typedef _c_GetDefaultCommConfigW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpszName,
  ffi.Pointer<LPCOMMCONFIG> lpCC,
  ffi.Pointer<ffi.Uint64> lpdwSize,
);

typedef _dart_GetDefaultCommConfigW = int Function(
  ffi.Pointer<ffi.Uint16> lpszName,
  ffi.Pointer<LPCOMMCONFIG> lpCC,
  ffi.Pointer<ffi.Uint64> lpdwSize,
);

typedef _c_SetDefaultCommConfigA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpszName,
  ffi.Pointer<LPCOMMCONFIG> lpCC,
  ffi.Uint64 dwSize,
);

typedef _dart_SetDefaultCommConfigA = int Function(
  ffi.Pointer<ffi.Int8> lpszName,
  ffi.Pointer<LPCOMMCONFIG> lpCC,
  int dwSize,
);

typedef _c_SetDefaultCommConfigW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpszName,
  ffi.Pointer<LPCOMMCONFIG> lpCC,
  ffi.Uint64 dwSize,
);

typedef _dart_SetDefaultCommConfigW = int Function(
  ffi.Pointer<ffi.Uint16> lpszName,
  ffi.Pointer<LPCOMMCONFIG> lpCC,
  int dwSize,
);

typedef _c_GetComputerNameA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpBuffer,
  ffi.Pointer<ffi.Uint64> nSize,
);

typedef _dart_GetComputerNameA = int Function(
  ffi.Pointer<ffi.Int8> lpBuffer,
  ffi.Pointer<ffi.Uint64> nSize,
);

typedef _c_GetComputerNameW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpBuffer,
  ffi.Pointer<ffi.Uint64> nSize,
);

typedef _dart_GetComputerNameW = int Function(
  ffi.Pointer<ffi.Uint16> lpBuffer,
  ffi.Pointer<ffi.Uint64> nSize,
);

typedef _c_DnsHostnameToComputerNameA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> Hostname,
  ffi.Pointer<ffi.Int8> ComputerName,
  ffi.Pointer<ffi.Uint64> nSize,
);

typedef _dart_DnsHostnameToComputerNameA = int Function(
  ffi.Pointer<ffi.Int8> Hostname,
  ffi.Pointer<ffi.Int8> ComputerName,
  ffi.Pointer<ffi.Uint64> nSize,
);

typedef _c_DnsHostnameToComputerNameW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> Hostname,
  ffi.Pointer<ffi.Uint16> ComputerName,
  ffi.Pointer<ffi.Uint64> nSize,
);

typedef _dart_DnsHostnameToComputerNameW = int Function(
  ffi.Pointer<ffi.Uint16> Hostname,
  ffi.Pointer<ffi.Uint16> ComputerName,
  ffi.Pointer<ffi.Uint64> nSize,
);

typedef _c_GetUserNameA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpBuffer,
  ffi.Pointer<ffi.Uint64> pcbBuffer,
);

typedef _dart_GetUserNameA = int Function(
  ffi.Pointer<ffi.Int8> lpBuffer,
  ffi.Pointer<ffi.Uint64> pcbBuffer,
);

typedef _c_GetUserNameW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpBuffer,
  ffi.Pointer<ffi.Uint64> pcbBuffer,
);

typedef _dart_GetUserNameW = int Function(
  ffi.Pointer<ffi.Uint16> lpBuffer,
  ffi.Pointer<ffi.Uint64> pcbBuffer,
);

typedef _c_LogonUserA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpszUsername,
  ffi.Pointer<ffi.Int8> lpszDomain,
  ffi.Pointer<ffi.Int8> lpszPassword,
  ffi.Uint64 dwLogonType,
  ffi.Uint64 dwLogonProvider,
  ffi.Pointer<ffi.Pointer<ffi.Void>> phToken,
);

typedef _dart_LogonUserA = int Function(
  ffi.Pointer<ffi.Int8> lpszUsername,
  ffi.Pointer<ffi.Int8> lpszDomain,
  ffi.Pointer<ffi.Int8> lpszPassword,
  int dwLogonType,
  int dwLogonProvider,
  ffi.Pointer<ffi.Pointer<ffi.Void>> phToken,
);

typedef _c_LogonUserW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpszUsername,
  ffi.Pointer<ffi.Uint16> lpszDomain,
  ffi.Pointer<ffi.Uint16> lpszPassword,
  ffi.Uint64 dwLogonType,
  ffi.Uint64 dwLogonProvider,
  ffi.Pointer<ffi.Pointer<ffi.Void>> phToken,
);

typedef _dart_LogonUserW = int Function(
  ffi.Pointer<ffi.Uint16> lpszUsername,
  ffi.Pointer<ffi.Uint16> lpszDomain,
  ffi.Pointer<ffi.Uint16> lpszPassword,
  int dwLogonType,
  int dwLogonProvider,
  ffi.Pointer<ffi.Pointer<ffi.Void>> phToken,
);

typedef _c_LogonUserExA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpszUsername,
  ffi.Pointer<ffi.Int8> lpszDomain,
  ffi.Pointer<ffi.Int8> lpszPassword,
  ffi.Uint64 dwLogonType,
  ffi.Uint64 dwLogonProvider,
  ffi.Pointer<ffi.Pointer<ffi.Void>> phToken,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppLogonSid,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppProfileBuffer,
  ffi.Pointer<ffi.Uint64> pdwProfileLength,
  ffi.Pointer<PQUOTA_LIMITS> pQuotaLimits,
);

typedef _dart_LogonUserExA = int Function(
  ffi.Pointer<ffi.Int8> lpszUsername,
  ffi.Pointer<ffi.Int8> lpszDomain,
  ffi.Pointer<ffi.Int8> lpszPassword,
  int dwLogonType,
  int dwLogonProvider,
  ffi.Pointer<ffi.Pointer<ffi.Void>> phToken,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppLogonSid,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppProfileBuffer,
  ffi.Pointer<ffi.Uint64> pdwProfileLength,
  ffi.Pointer<PQUOTA_LIMITS> pQuotaLimits,
);

typedef _c_LogonUserExW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpszUsername,
  ffi.Pointer<ffi.Uint16> lpszDomain,
  ffi.Pointer<ffi.Uint16> lpszPassword,
  ffi.Uint64 dwLogonType,
  ffi.Uint64 dwLogonProvider,
  ffi.Pointer<ffi.Pointer<ffi.Void>> phToken,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppLogonSid,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppProfileBuffer,
  ffi.Pointer<ffi.Uint64> pdwProfileLength,
  ffi.Pointer<PQUOTA_LIMITS> pQuotaLimits,
);

typedef _dart_LogonUserExW = int Function(
  ffi.Pointer<ffi.Uint16> lpszUsername,
  ffi.Pointer<ffi.Uint16> lpszDomain,
  ffi.Pointer<ffi.Uint16> lpszPassword,
  int dwLogonType,
  int dwLogonProvider,
  ffi.Pointer<ffi.Pointer<ffi.Void>> phToken,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppLogonSid,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppProfileBuffer,
  ffi.Pointer<ffi.Uint64> pdwProfileLength,
  ffi.Pointer<PQUOTA_LIMITS> pQuotaLimits,
);

typedef _c_CreateProcessWithLogonW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpUsername,
  ffi.Pointer<ffi.Uint16> lpDomain,
  ffi.Pointer<ffi.Uint16> lpPassword,
  ffi.Uint64 dwLogonFlags,
  ffi.Pointer<ffi.Uint16> lpApplicationName,
  ffi.Pointer<ffi.Uint16> lpCommandLine,
  ffi.Uint64 dwCreationFlags,
  ffi.Pointer<ffi.Void> lpEnvironment,
  ffi.Pointer<ffi.Uint16> lpCurrentDirectory,
  ffi.Pointer<LPSTARTUPINFOW> lpStartupInfo,
  ffi.Pointer<LPPROCESS_INFORMATION> lpProcessInformation,
);

typedef _dart_CreateProcessWithLogonW = int Function(
  ffi.Pointer<ffi.Uint16> lpUsername,
  ffi.Pointer<ffi.Uint16> lpDomain,
  ffi.Pointer<ffi.Uint16> lpPassword,
  int dwLogonFlags,
  ffi.Pointer<ffi.Uint16> lpApplicationName,
  ffi.Pointer<ffi.Uint16> lpCommandLine,
  int dwCreationFlags,
  ffi.Pointer<ffi.Void> lpEnvironment,
  ffi.Pointer<ffi.Uint16> lpCurrentDirectory,
  ffi.Pointer<LPSTARTUPINFOW> lpStartupInfo,
  ffi.Pointer<LPPROCESS_INFORMATION> lpProcessInformation,
);

typedef _c_CreateProcessWithTokenW = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hToken,
  ffi.Uint64 dwLogonFlags,
  ffi.Pointer<ffi.Uint16> lpApplicationName,
  ffi.Pointer<ffi.Uint16> lpCommandLine,
  ffi.Uint64 dwCreationFlags,
  ffi.Pointer<ffi.Void> lpEnvironment,
  ffi.Pointer<ffi.Uint16> lpCurrentDirectory,
  ffi.Pointer<LPSTARTUPINFOW> lpStartupInfo,
  ffi.Pointer<LPPROCESS_INFORMATION> lpProcessInformation,
);

typedef _dart_CreateProcessWithTokenW = int Function(
  ffi.Pointer<ffi.Void> hToken,
  int dwLogonFlags,
  ffi.Pointer<ffi.Uint16> lpApplicationName,
  ffi.Pointer<ffi.Uint16> lpCommandLine,
  int dwCreationFlags,
  ffi.Pointer<ffi.Void> lpEnvironment,
  ffi.Pointer<ffi.Uint16> lpCurrentDirectory,
  ffi.Pointer<LPSTARTUPINFOW> lpStartupInfo,
  ffi.Pointer<LPPROCESS_INFORMATION> lpProcessInformation,
);

typedef _c_IsTokenUntrusted = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> TokenHandle,
);

typedef _dart_IsTokenUntrusted = int Function(
  ffi.Pointer<ffi.Void> TokenHandle,
);

typedef _c_RegisterWaitForSingleObject = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> phNewWaitObject,
  ffi.Pointer<ffi.Void> hObject,
  ffi.Pointer<ffi.NativeFunction<WAITORTIMERCALLBACK>> Callback,
  ffi.Pointer<ffi.Void> Context,
  ffi.Uint64 dwMilliseconds,
  ffi.Uint64 dwFlags,
);

typedef _dart_RegisterWaitForSingleObject = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> phNewWaitObject,
  ffi.Pointer<ffi.Void> hObject,
  ffi.Pointer<ffi.NativeFunction<WAITORTIMERCALLBACK>> Callback,
  ffi.Pointer<ffi.Void> Context,
  int dwMilliseconds,
  int dwFlags,
);

typedef _c_UnregisterWait = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> WaitHandle,
);

typedef _dart_UnregisterWait = int Function(
  ffi.Pointer<ffi.Void> WaitHandle,
);

typedef _c_BindIoCompletionCallback = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> FileHandle,
  ffi.Pointer<ffi.NativeFunction<LPOVERLAPPED_COMPLETION_ROUTINE>> Function_1,
  ffi.Uint64 Flags,
);

typedef _dart_BindIoCompletionCallback = int Function(
  ffi.Pointer<ffi.Void> FileHandle,
  ffi.Pointer<ffi.NativeFunction<LPOVERLAPPED_COMPLETION_ROUTINE>> Function_1,
  int Flags,
);

typedef _c_SetTimerQueueTimer = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> TimerQueue,
  ffi.Pointer<ffi.NativeFunction<WAITORTIMERCALLBACK>> Callback,
  ffi.Pointer<ffi.Void> Parameter,
  ffi.Uint64 DueTime,
  ffi.Uint64 Period,
  ffi.Int32 PreferIo,
);

typedef _dart_SetTimerQueueTimer = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> TimerQueue,
  ffi.Pointer<ffi.NativeFunction<WAITORTIMERCALLBACK>> Callback,
  ffi.Pointer<ffi.Void> Parameter,
  int DueTime,
  int Period,
  int PreferIo,
);

typedef _c_CancelTimerQueueTimer = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> TimerQueue,
  ffi.Pointer<ffi.Void> Timer,
);

typedef _dart_CancelTimerQueueTimer = int Function(
  ffi.Pointer<ffi.Void> TimerQueue,
  ffi.Pointer<ffi.Void> Timer,
);

typedef _c_DeleteTimerQueue = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> TimerQueue,
);

typedef _dart_DeleteTimerQueue = int Function(
  ffi.Pointer<ffi.Void> TimerQueue,
);

typedef _c_InitializeThreadpoolEnvironment = ffi.Void Function(
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> pcbe,
);

typedef _dart_InitializeThreadpoolEnvironment = void Function(
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> pcbe,
);

typedef _c_SetThreadpoolCallbackPool = ffi.Void Function(
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> pcbe,
  ffi.Pointer<_TP_POOL> ptpp,
);

typedef _dart_SetThreadpoolCallbackPool = void Function(
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> pcbe,
  ffi.Pointer<_TP_POOL> ptpp,
);

typedef _c_SetThreadpoolCallbackCleanupGroup = ffi.Void Function(
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> pcbe,
  ffi.Pointer<_TP_CLEANUP_GROUP> ptpcg,
  ffi.Pointer<ffi.NativeFunction<PTP_CLEANUP_GROUP_CANCEL_CALLBACK>> pfng,
);

typedef _dart_SetThreadpoolCallbackCleanupGroup = void Function(
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> pcbe,
  ffi.Pointer<_TP_CLEANUP_GROUP> ptpcg,
  ffi.Pointer<ffi.NativeFunction<PTP_CLEANUP_GROUP_CANCEL_CALLBACK>> pfng,
);

typedef _c_SetThreadpoolCallbackRunsLong = ffi.Void Function(
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> pcbe,
);

typedef _dart_SetThreadpoolCallbackRunsLong = void Function(
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> pcbe,
);

typedef _c_SetThreadpoolCallbackLibrary = ffi.Void Function(
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> pcbe,
  ffi.Pointer<ffi.Void> mod,
);

typedef _dart_SetThreadpoolCallbackLibrary = void Function(
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> pcbe,
  ffi.Pointer<ffi.Void> mod,
);

typedef _c_SetThreadpoolCallbackPriority = ffi.Void Function(
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> pcbe,
  ffi.Int32 Priority,
);

typedef _dart_SetThreadpoolCallbackPriority = void Function(
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> pcbe,
  int Priority,
);

typedef _c_DestroyThreadpoolEnvironment = ffi.Void Function(
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> pcbe,
);

typedef _dart_DestroyThreadpoolEnvironment = void Function(
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> pcbe,
);

typedef _c_SetThreadpoolCallbackPersistent = ffi.Void Function(
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> pcbe,
);

typedef _dart_SetThreadpoolCallbackPersistent = void Function(
  ffi.Pointer<TP_CALLBACK_ENVIRON_V3> pcbe,
);

typedef _c_CreatePrivateNamespaceA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpPrivateNamespaceAttributes,
  ffi.Pointer<ffi.Void> lpBoundaryDescriptor,
  ffi.Pointer<ffi.Int8> lpAliasPrefix,
);

typedef _dart_CreatePrivateNamespaceA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpPrivateNamespaceAttributes,
  ffi.Pointer<ffi.Void> lpBoundaryDescriptor,
  ffi.Pointer<ffi.Int8> lpAliasPrefix,
);

typedef _c_OpenPrivateNamespaceA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> lpBoundaryDescriptor,
  ffi.Pointer<ffi.Int8> lpAliasPrefix,
);

typedef _dart_OpenPrivateNamespaceA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> lpBoundaryDescriptor,
  ffi.Pointer<ffi.Int8> lpAliasPrefix,
);

typedef _c_CreateBoundaryDescriptorA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> Name,
  ffi.Uint64 Flags,
);

typedef _dart_CreateBoundaryDescriptorA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> Name,
  int Flags,
);

typedef _c_AddIntegrityLabelToBoundaryDescriptor = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> BoundaryDescriptor,
  ffi.Pointer<ffi.Void> IntegrityLabel,
);

typedef _dart_AddIntegrityLabelToBoundaryDescriptor = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> BoundaryDescriptor,
  ffi.Pointer<ffi.Void> IntegrityLabel,
);

typedef _c_GetCurrentHwProfileA = ffi.Int32 Function(
  ffi.Pointer<LPHW_PROFILE_INFOA> lpHwProfileInfo,
);

typedef _dart_GetCurrentHwProfileA = int Function(
  ffi.Pointer<LPHW_PROFILE_INFOA> lpHwProfileInfo,
);

typedef _c_GetCurrentHwProfileW = ffi.Int32 Function(
  ffi.Pointer<LPHW_PROFILE_INFOW> lpHwProfileInfo,
);

typedef _dart_GetCurrentHwProfileW = int Function(
  ffi.Pointer<LPHW_PROFILE_INFOW> lpHwProfileInfo,
);

typedef _c_VerifyVersionInfoA = ffi.Int32 Function(
  ffi.Pointer<LPOSVERSIONINFOEXA> lpVersionInformation,
  ffi.Uint64 dwTypeMask,
  ffi.Uint64 dwlConditionMask,
);

typedef _dart_VerifyVersionInfoA = int Function(
  ffi.Pointer<LPOSVERSIONINFOEXA> lpVersionInformation,
  int dwTypeMask,
  int dwlConditionMask,
);

typedef _c_VerifyVersionInfoW = ffi.Int32 Function(
  ffi.Pointer<PRTL_OSVERSIONINFOEXW> lpVersionInformation,
  ffi.Uint64 dwTypeMask,
  ffi.Uint64 dwlConditionMask,
);

typedef _dart_VerifyVersionInfoW = int Function(
  ffi.Pointer<PRTL_OSVERSIONINFOEXW> lpVersionInformation,
  int dwTypeMask,
  int dwlConditionMask,
);

typedef _c_HRESULT_FROM_WIN32 = ffi.Int64 Function(
  ffi.Uint64 x,
);

typedef _dart_HRESULT_FROM_WIN32 = int Function(
  int x,
);

typedef _c_SystemTimeToTzSpecificLocalTime = ffi.Int32 Function(
  ffi.Pointer<LPTIME_ZONE_INFORMATION> lpTimeZoneInformation,
  ffi.Pointer<LPSYSTEMTIME> lpUniversalTime,
  ffi.Pointer<LPSYSTEMTIME> lpLocalTime,
);

typedef _dart_SystemTimeToTzSpecificLocalTime = int Function(
  ffi.Pointer<LPTIME_ZONE_INFORMATION> lpTimeZoneInformation,
  ffi.Pointer<LPSYSTEMTIME> lpUniversalTime,
  ffi.Pointer<LPSYSTEMTIME> lpLocalTime,
);

typedef _c_TzSpecificLocalTimeToSystemTime = ffi.Int32 Function(
  ffi.Pointer<LPTIME_ZONE_INFORMATION> lpTimeZoneInformation,
  ffi.Pointer<LPSYSTEMTIME> lpLocalTime,
  ffi.Pointer<LPSYSTEMTIME> lpUniversalTime,
);

typedef _dart_TzSpecificLocalTimeToSystemTime = int Function(
  ffi.Pointer<LPTIME_ZONE_INFORMATION> lpTimeZoneInformation,
  ffi.Pointer<LPSYSTEMTIME> lpLocalTime,
  ffi.Pointer<LPSYSTEMTIME> lpUniversalTime,
);

typedef _c_FileTimeToSystemTime = ffi.Int32 Function(
  ffi.Pointer<LPFILETIME> lpFileTime,
  ffi.Pointer<LPSYSTEMTIME> lpSystemTime,
);

typedef _dart_FileTimeToSystemTime = int Function(
  ffi.Pointer<LPFILETIME> lpFileTime,
  ffi.Pointer<LPSYSTEMTIME> lpSystemTime,
);

typedef _c_SystemTimeToFileTime = ffi.Int32 Function(
  ffi.Pointer<LPSYSTEMTIME> lpSystemTime,
  ffi.Pointer<LPFILETIME> lpFileTime,
);

typedef _dart_SystemTimeToFileTime = int Function(
  ffi.Pointer<LPSYSTEMTIME> lpSystemTime,
  ffi.Pointer<LPFILETIME> lpFileTime,
);

typedef _c_GetTimeZoneInformation = ffi.Uint64 Function(
  ffi.Pointer<LPTIME_ZONE_INFORMATION> lpTimeZoneInformation,
);

typedef _dart_GetTimeZoneInformation = int Function(
  ffi.Pointer<LPTIME_ZONE_INFORMATION> lpTimeZoneInformation,
);

typedef _c_SetTimeZoneInformation = ffi.Int32 Function(
  ffi.Pointer<LPTIME_ZONE_INFORMATION> lpTimeZoneInformation,
);

typedef _dart_SetTimeZoneInformation = int Function(
  ffi.Pointer<LPTIME_ZONE_INFORMATION> lpTimeZoneInformation,
);

typedef _c_SetDynamicTimeZoneInformation = ffi.Int32 Function(
  ffi.Pointer<PDYNAMIC_TIME_ZONE_INFORMATION> lpTimeZoneInformation,
);

typedef _dart_SetDynamicTimeZoneInformation = int Function(
  ffi.Pointer<PDYNAMIC_TIME_ZONE_INFORMATION> lpTimeZoneInformation,
);

typedef _c_GetDynamicTimeZoneInformation = ffi.Uint64 Function(
  ffi.Pointer<PDYNAMIC_TIME_ZONE_INFORMATION> pTimeZoneInformation,
);

typedef _dart_GetDynamicTimeZoneInformation = int Function(
  ffi.Pointer<PDYNAMIC_TIME_ZONE_INFORMATION> pTimeZoneInformation,
);

typedef _c_GetTimeZoneInformationForYear = ffi.Int32 Function(
  ffi.Uint16 wYear,
  ffi.Pointer<PDYNAMIC_TIME_ZONE_INFORMATION> pdtzi,
  ffi.Pointer<LPTIME_ZONE_INFORMATION> ptzi,
);

typedef _dart_GetTimeZoneInformationForYear = int Function(
  int wYear,
  ffi.Pointer<PDYNAMIC_TIME_ZONE_INFORMATION> pdtzi,
  ffi.Pointer<LPTIME_ZONE_INFORMATION> ptzi,
);

typedef _c_EnumDynamicTimeZoneInformation = ffi.Uint64 Function(
  ffi.Uint64 dwIndex,
  ffi.Pointer<PDYNAMIC_TIME_ZONE_INFORMATION> lpTimeZoneInformation,
);

typedef _dart_EnumDynamicTimeZoneInformation = int Function(
  int dwIndex,
  ffi.Pointer<PDYNAMIC_TIME_ZONE_INFORMATION> lpTimeZoneInformation,
);

typedef _c_GetDynamicTimeZoneInformationEffectiveYears = ffi.Uint64 Function(
  ffi.Pointer<PDYNAMIC_TIME_ZONE_INFORMATION> lpTimeZoneInformation,
  ffi.Pointer<ffi.Uint64> FirstYear,
  ffi.Pointer<ffi.Uint64> LastYear,
);

typedef _dart_GetDynamicTimeZoneInformationEffectiveYears = int Function(
  ffi.Pointer<PDYNAMIC_TIME_ZONE_INFORMATION> lpTimeZoneInformation,
  ffi.Pointer<ffi.Uint64> FirstYear,
  ffi.Pointer<ffi.Uint64> LastYear,
);

typedef _c_SystemTimeToTzSpecificLocalTimeEx = ffi.Int32 Function(
  ffi.Pointer<PDYNAMIC_TIME_ZONE_INFORMATION> lpTimeZoneInformation,
  ffi.Pointer<LPSYSTEMTIME> lpUniversalTime,
  ffi.Pointer<LPSYSTEMTIME> lpLocalTime,
);

typedef _dart_SystemTimeToTzSpecificLocalTimeEx = int Function(
  ffi.Pointer<PDYNAMIC_TIME_ZONE_INFORMATION> lpTimeZoneInformation,
  ffi.Pointer<LPSYSTEMTIME> lpUniversalTime,
  ffi.Pointer<LPSYSTEMTIME> lpLocalTime,
);

typedef _c_TzSpecificLocalTimeToSystemTimeEx = ffi.Int32 Function(
  ffi.Pointer<PDYNAMIC_TIME_ZONE_INFORMATION> lpTimeZoneInformation,
  ffi.Pointer<LPSYSTEMTIME> lpLocalTime,
  ffi.Pointer<LPSYSTEMTIME> lpUniversalTime,
);

typedef _dart_TzSpecificLocalTimeToSystemTimeEx = int Function(
  ffi.Pointer<PDYNAMIC_TIME_ZONE_INFORMATION> lpTimeZoneInformation,
  ffi.Pointer<LPSYSTEMTIME> lpLocalTime,
  ffi.Pointer<LPSYSTEMTIME> lpUniversalTime,
);

typedef _c_LocalFileTimeToLocalSystemTime = ffi.Int32 Function(
  ffi.Pointer<LPTIME_ZONE_INFORMATION> timeZoneInformation,
  ffi.Pointer<LPFILETIME> localFileTime,
  ffi.Pointer<LPSYSTEMTIME> localSystemTime,
);

typedef _dart_LocalFileTimeToLocalSystemTime = int Function(
  ffi.Pointer<LPTIME_ZONE_INFORMATION> timeZoneInformation,
  ffi.Pointer<LPFILETIME> localFileTime,
  ffi.Pointer<LPSYSTEMTIME> localSystemTime,
);

typedef _c_LocalSystemTimeToLocalFileTime = ffi.Int32 Function(
  ffi.Pointer<LPTIME_ZONE_INFORMATION> timeZoneInformation,
  ffi.Pointer<LPSYSTEMTIME> localSystemTime,
  ffi.Pointer<LPFILETIME> localFileTime,
);

typedef _dart_LocalSystemTimeToLocalFileTime = int Function(
  ffi.Pointer<LPTIME_ZONE_INFORMATION> timeZoneInformation,
  ffi.Pointer<LPSYSTEMTIME> localSystemTime,
  ffi.Pointer<LPFILETIME> localFileTime,
);

typedef _c_SetSystemPowerState = ffi.Int32 Function(
  ffi.Int32 fSuspend,
  ffi.Int32 fForce,
);

typedef _dart_SetSystemPowerState = int Function(
  int fSuspend,
  int fForce,
);

typedef _c_GetSystemPowerStatus = ffi.Int32 Function(
  ffi.Pointer<LPSYSTEM_POWER_STATUS> lpSystemPowerStatus,
);

typedef _dart_GetSystemPowerStatus = int Function(
  ffi.Pointer<LPSYSTEM_POWER_STATUS> lpSystemPowerStatus,
);

typedef _c_MapUserPhysicalPagesScatter = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> VirtualAddresses,
  ffi.Uint64 NumberOfPages,
  ffi.Pointer<ffi.Uint64> PageArray,
);

typedef _dart_MapUserPhysicalPagesScatter = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> VirtualAddresses,
  int NumberOfPages,
  ffi.Pointer<ffi.Uint64> PageArray,
);

typedef _c_CreateJobObjectA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpJobAttributes,
  ffi.Pointer<ffi.Int8> lpName,
);

typedef _dart_CreateJobObjectA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpJobAttributes,
  ffi.Pointer<ffi.Int8> lpName,
);

typedef _c_OpenJobObjectA = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 dwDesiredAccess,
  ffi.Int32 bInheritHandle,
  ffi.Pointer<ffi.Int8> lpName,
);

typedef _dart_OpenJobObjectA = ffi.Pointer<ffi.Void> Function(
  int dwDesiredAccess,
  int bInheritHandle,
  ffi.Pointer<ffi.Int8> lpName,
);

typedef _c_CreateJobSet = ffi.Int32 Function(
  ffi.Uint64 NumJob,
  ffi.Pointer<PJOB_SET_ARRAY> UserJobSet,
  ffi.Uint64 Flags,
);

typedef _dart_CreateJobSet = int Function(
  int NumJob,
  ffi.Pointer<PJOB_SET_ARRAY> UserJobSet,
  int Flags,
);

typedef _c_FindFirstVolumeA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> lpszVolumeName,
  ffi.Uint64 cchBufferLength,
);

typedef _dart_FindFirstVolumeA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> lpszVolumeName,
  int cchBufferLength,
);

typedef _c_FindNextVolumeA = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFindVolume,
  ffi.Pointer<ffi.Int8> lpszVolumeName,
  ffi.Uint64 cchBufferLength,
);

typedef _dart_FindNextVolumeA = int Function(
  ffi.Pointer<ffi.Void> hFindVolume,
  ffi.Pointer<ffi.Int8> lpszVolumeName,
  int cchBufferLength,
);

typedef _c_FindFirstVolumeMountPointA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> lpszRootPathName,
  ffi.Pointer<ffi.Int8> lpszVolumeMountPoint,
  ffi.Uint64 cchBufferLength,
);

typedef _dart_FindFirstVolumeMountPointA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> lpszRootPathName,
  ffi.Pointer<ffi.Int8> lpszVolumeMountPoint,
  int cchBufferLength,
);

typedef _c_FindFirstVolumeMountPointW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpszRootPathName,
  ffi.Pointer<ffi.Uint16> lpszVolumeMountPoint,
  ffi.Uint64 cchBufferLength,
);

typedef _dart_FindFirstVolumeMountPointW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint16> lpszRootPathName,
  ffi.Pointer<ffi.Uint16> lpszVolumeMountPoint,
  int cchBufferLength,
);

typedef _c_FindNextVolumeMountPointA = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFindVolumeMountPoint,
  ffi.Pointer<ffi.Int8> lpszVolumeMountPoint,
  ffi.Uint64 cchBufferLength,
);

typedef _dart_FindNextVolumeMountPointA = int Function(
  ffi.Pointer<ffi.Void> hFindVolumeMountPoint,
  ffi.Pointer<ffi.Int8> lpszVolumeMountPoint,
  int cchBufferLength,
);

typedef _c_FindNextVolumeMountPointW = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFindVolumeMountPoint,
  ffi.Pointer<ffi.Uint16> lpszVolumeMountPoint,
  ffi.Uint64 cchBufferLength,
);

typedef _dart_FindNextVolumeMountPointW = int Function(
  ffi.Pointer<ffi.Void> hFindVolumeMountPoint,
  ffi.Pointer<ffi.Uint16> lpszVolumeMountPoint,
  int cchBufferLength,
);

typedef _c_FindVolumeMountPointClose = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFindVolumeMountPoint,
);

typedef _dart_FindVolumeMountPointClose = int Function(
  ffi.Pointer<ffi.Void> hFindVolumeMountPoint,
);

typedef _c_SetVolumeMountPointA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpszVolumeMountPoint,
  ffi.Pointer<ffi.Int8> lpszVolumeName,
);

typedef _dart_SetVolumeMountPointA = int Function(
  ffi.Pointer<ffi.Int8> lpszVolumeMountPoint,
  ffi.Pointer<ffi.Int8> lpszVolumeName,
);

typedef _c_SetVolumeMountPointW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpszVolumeMountPoint,
  ffi.Pointer<ffi.Uint16> lpszVolumeName,
);

typedef _dart_SetVolumeMountPointW = int Function(
  ffi.Pointer<ffi.Uint16> lpszVolumeMountPoint,
  ffi.Pointer<ffi.Uint16> lpszVolumeName,
);

typedef _c_DeleteVolumeMountPointA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpszVolumeMountPoint,
);

typedef _dart_DeleteVolumeMountPointA = int Function(
  ffi.Pointer<ffi.Int8> lpszVolumeMountPoint,
);

typedef _c_GetVolumeNameForVolumeMountPointA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpszVolumeMountPoint,
  ffi.Pointer<ffi.Int8> lpszVolumeName,
  ffi.Uint64 cchBufferLength,
);

typedef _dart_GetVolumeNameForVolumeMountPointA = int Function(
  ffi.Pointer<ffi.Int8> lpszVolumeMountPoint,
  ffi.Pointer<ffi.Int8> lpszVolumeName,
  int cchBufferLength,
);

typedef _c_GetVolumePathNameA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpszFileName,
  ffi.Pointer<ffi.Int8> lpszVolumePathName,
  ffi.Uint64 cchBufferLength,
);

typedef _dart_GetVolumePathNameA = int Function(
  ffi.Pointer<ffi.Int8> lpszFileName,
  ffi.Pointer<ffi.Int8> lpszVolumePathName,
  int cchBufferLength,
);

typedef _c_GetVolumePathNamesForVolumeNameA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpszVolumeName,
  ffi.Pointer<ffi.Int8> lpszVolumePathNames,
  ffi.Uint64 cchBufferLength,
  ffi.Pointer<ffi.Uint64> lpcchReturnLength,
);

typedef _dart_GetVolumePathNamesForVolumeNameA = int Function(
  ffi.Pointer<ffi.Int8> lpszVolumeName,
  ffi.Pointer<ffi.Int8> lpszVolumePathNames,
  int cchBufferLength,
  ffi.Pointer<ffi.Uint64> lpcchReturnLength,
);

typedef _c_CreateActCtxA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<PACTCTXA> pActCtx,
);

typedef _dart_CreateActCtxA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<PACTCTXA> pActCtx,
);

typedef _c_CreateActCtxW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<PACTCTXW> pActCtx,
);

typedef _dart_CreateActCtxW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<PACTCTXW> pActCtx,
);

typedef _c_AddRefActCtx = ffi.Void Function(
  ffi.Pointer<ffi.Void> hActCtx,
);

typedef _dart_AddRefActCtx = void Function(
  ffi.Pointer<ffi.Void> hActCtx,
);

typedef _c_ReleaseActCtx = ffi.Void Function(
  ffi.Pointer<ffi.Void> hActCtx,
);

typedef _dart_ReleaseActCtx = void Function(
  ffi.Pointer<ffi.Void> hActCtx,
);

typedef _c_ZombifyActCtx = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hActCtx,
);

typedef _dart_ZombifyActCtx = int Function(
  ffi.Pointer<ffi.Void> hActCtx,
);

typedef _c_ActivateActCtx = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hActCtx,
  ffi.Pointer<ffi.Uint64> lpCookie,
);

typedef _dart_ActivateActCtx = int Function(
  ffi.Pointer<ffi.Void> hActCtx,
  ffi.Pointer<ffi.Uint64> lpCookie,
);

typedef _c_DeactivateActCtx = ffi.Int32 Function(
  ffi.Uint64 dwFlags,
  ffi.Uint64 ulCookie,
);

typedef _dart_DeactivateActCtx = int Function(
  int dwFlags,
  int ulCookie,
);

typedef _c_GetCurrentActCtx = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> lphActCtx,
);

typedef _dart_GetCurrentActCtx = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> lphActCtx,
);

typedef _c_FindActCtxSectionStringA = ffi.Int32 Function(
  ffi.Uint64 dwFlags,
  ffi.Pointer<GUID> lpExtensionGuid,
  ffi.Uint64 ulSectionId,
  ffi.Pointer<ffi.Int8> lpStringToFind,
  ffi.Pointer<PACTCTX_SECTION_KEYED_DATA> ReturnedData,
);

typedef _dart_FindActCtxSectionStringA = int Function(
  int dwFlags,
  ffi.Pointer<GUID> lpExtensionGuid,
  int ulSectionId,
  ffi.Pointer<ffi.Int8> lpStringToFind,
  ffi.Pointer<PACTCTX_SECTION_KEYED_DATA> ReturnedData,
);

typedef _c_FindActCtxSectionStringW = ffi.Int32 Function(
  ffi.Uint64 dwFlags,
  ffi.Pointer<GUID> lpExtensionGuid,
  ffi.Uint64 ulSectionId,
  ffi.Pointer<ffi.Uint16> lpStringToFind,
  ffi.Pointer<PACTCTX_SECTION_KEYED_DATA> ReturnedData,
);

typedef _dart_FindActCtxSectionStringW = int Function(
  int dwFlags,
  ffi.Pointer<GUID> lpExtensionGuid,
  int ulSectionId,
  ffi.Pointer<ffi.Uint16> lpStringToFind,
  ffi.Pointer<PACTCTX_SECTION_KEYED_DATA> ReturnedData,
);

typedef _c_FindActCtxSectionGuid = ffi.Int32 Function(
  ffi.Uint64 dwFlags,
  ffi.Pointer<GUID> lpExtensionGuid,
  ffi.Uint64 ulSectionId,
  ffi.Pointer<GUID> lpGuidToFind,
  ffi.Pointer<PACTCTX_SECTION_KEYED_DATA> ReturnedData,
);

typedef _dart_FindActCtxSectionGuid = int Function(
  int dwFlags,
  ffi.Pointer<GUID> lpExtensionGuid,
  int ulSectionId,
  ffi.Pointer<GUID> lpGuidToFind,
  ffi.Pointer<PACTCTX_SECTION_KEYED_DATA> ReturnedData,
);

typedef _c_QueryActCtxW = ffi.Int32 Function(
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Void> hActCtx,
  ffi.Pointer<ffi.Void> pvSubInstance,
  ffi.Uint64 ulInfoClass,
  ffi.Pointer<ffi.Void> pvBuffer,
  ffi.Uint64 cbBuffer,
  ffi.Pointer<ffi.Uint64> pcbWrittenOrRequired,
);

typedef _dart_QueryActCtxW = int Function(
  int dwFlags,
  ffi.Pointer<ffi.Void> hActCtx,
  ffi.Pointer<ffi.Void> pvSubInstance,
  int ulInfoClass,
  ffi.Pointer<ffi.Void> pvBuffer,
  int cbBuffer,
  ffi.Pointer<ffi.Uint64> pcbWrittenOrRequired,
);

typedef _c_WTSGetActiveConsoleSessionId = ffi.Uint64 Function();

typedef _dart_WTSGetActiveConsoleSessionId = int Function();

typedef _c_WTSGetServiceSessionId = ffi.Uint64 Function();

typedef _dart_WTSGetServiceSessionId = int Function();

typedef _c_WTSIsServerContainer = ffi.Uint8 Function();

typedef _dart_WTSIsServerContainer = int Function();

typedef _c_GetActiveProcessorGroupCount = ffi.Uint16 Function();

typedef _dart_GetActiveProcessorGroupCount = int Function();

typedef _c_GetMaximumProcessorGroupCount = ffi.Uint16 Function();

typedef _dart_GetMaximumProcessorGroupCount = int Function();

typedef _c_GetActiveProcessorCount = ffi.Uint64 Function(
  ffi.Uint16 GroupNumber,
);

typedef _dart_GetActiveProcessorCount = int Function(
  int GroupNumber,
);

typedef _c_GetMaximumProcessorCount = ffi.Uint64 Function(
  ffi.Uint16 GroupNumber,
);

typedef _dart_GetMaximumProcessorCount = int Function(
  int GroupNumber,
);

typedef _c_GetNumaProcessorNode = ffi.Int32 Function(
  ffi.Uint8 Processor,
  ffi.Pointer<ffi.Uint8> NodeNumber,
);

typedef _dart_GetNumaProcessorNode = int Function(
  int Processor,
  ffi.Pointer<ffi.Uint8> NodeNumber,
);

typedef _c_GetNumaNodeNumberFromHandle = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<ffi.Uint16> NodeNumber,
);

typedef _dart_GetNumaNodeNumberFromHandle = int Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Pointer<ffi.Uint16> NodeNumber,
);

typedef _c_GetNumaProcessorNodeEx = ffi.Int32 Function(
  ffi.Pointer<PPROCESSOR_NUMBER> Processor,
  ffi.Pointer<ffi.Uint16> NodeNumber,
);

typedef _dart_GetNumaProcessorNodeEx = int Function(
  ffi.Pointer<PPROCESSOR_NUMBER> Processor,
  ffi.Pointer<ffi.Uint16> NodeNumber,
);

typedef _c_GetNumaNodeProcessorMask = ffi.Int32 Function(
  ffi.Uint8 Node,
  ffi.Pointer<ffi.Uint64> ProcessorMask,
);

typedef _dart_GetNumaNodeProcessorMask = int Function(
  int Node,
  ffi.Pointer<ffi.Uint64> ProcessorMask,
);

typedef _c_GetNumaAvailableMemoryNode = ffi.Int32 Function(
  ffi.Uint8 Node,
  ffi.Pointer<ffi.Uint64> AvailableBytes,
);

typedef _dart_GetNumaAvailableMemoryNode = int Function(
  int Node,
  ffi.Pointer<ffi.Uint64> AvailableBytes,
);

typedef _c_GetNumaAvailableMemoryNodeEx = ffi.Int32 Function(
  ffi.Uint16 Node,
  ffi.Pointer<ffi.Uint64> AvailableBytes,
);

typedef _dart_GetNumaAvailableMemoryNodeEx = int Function(
  int Node,
  ffi.Pointer<ffi.Uint64> AvailableBytes,
);

typedef _c_GetNumaProximityNode = ffi.Int32 Function(
  ffi.Uint64 ProximityId,
  ffi.Pointer<ffi.Uint8> NodeNumber,
);

typedef _dart_GetNumaProximityNode = int Function(
  int ProximityId,
  ffi.Pointer<ffi.Uint8> NodeNumber,
);

typedef APPLICATION_RECOVERY_CALLBACK = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_RegisterApplicationRecoveryCallback = ffi.Int64 Function(
  ffi.Pointer<ffi.NativeFunction<APPLICATION_RECOVERY_CALLBACK>>
      pRecoveyCallback,
  ffi.Pointer<ffi.Void> pvParameter,
  ffi.Uint64 dwPingInterval,
  ffi.Uint64 dwFlags,
);

typedef _dart_RegisterApplicationRecoveryCallback = int Function(
  ffi.Pointer<ffi.NativeFunction<APPLICATION_RECOVERY_CALLBACK>>
      pRecoveyCallback,
  ffi.Pointer<ffi.Void> pvParameter,
  int dwPingInterval,
  int dwFlags,
);

typedef _c_UnregisterApplicationRecoveryCallback = ffi.Int64 Function();

typedef _dart_UnregisterApplicationRecoveryCallback = int Function();

typedef _c_RegisterApplicationRestart = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> pwzCommandline,
  ffi.Uint64 dwFlags,
);

typedef _dart_RegisterApplicationRestart = int Function(
  ffi.Pointer<ffi.Uint16> pwzCommandline,
  int dwFlags,
);

typedef _c_UnregisterApplicationRestart = ffi.Int64 Function();

typedef _dart_UnregisterApplicationRestart = int Function();

typedef _c_GetApplicationRecoveryCallback = ffi.Int64 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Pointer<ffi.NativeFunction<APPLICATION_RECOVERY_CALLBACK>>>
      pRecoveryCallback,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppvParameter,
  ffi.Pointer<ffi.Uint64> pdwPingInterval,
  ffi.Pointer<ffi.Uint64> pdwFlags,
);

typedef _dart_GetApplicationRecoveryCallback = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Pointer<ffi.NativeFunction<APPLICATION_RECOVERY_CALLBACK>>>
      pRecoveryCallback,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppvParameter,
  ffi.Pointer<ffi.Uint64> pdwPingInterval,
  ffi.Pointer<ffi.Uint64> pdwFlags,
);

typedef _c_GetApplicationRestartSettings = ffi.Int64 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Uint16> pwzCommandline,
  ffi.Pointer<ffi.Uint64> pcchSize,
  ffi.Pointer<ffi.Uint64> pdwFlags,
);

typedef _dart_GetApplicationRestartSettings = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Pointer<ffi.Uint16> pwzCommandline,
  ffi.Pointer<ffi.Uint64> pcchSize,
  ffi.Pointer<ffi.Uint64> pdwFlags,
);

typedef _c_ApplicationRecoveryInProgress = ffi.Int64 Function(
  ffi.Pointer<ffi.Int32> pbCancelled,
);

typedef _dart_ApplicationRecoveryInProgress = int Function(
  ffi.Pointer<ffi.Int32> pbCancelled,
);

typedef _c_ApplicationRecoveryFinished = ffi.Void Function(
  ffi.Int32 bSuccess,
);

typedef _dart_ApplicationRecoveryFinished = void Function(
  int bSuccess,
);

typedef _c_GetFileInformationByHandleEx = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hFile,
  ffi.Int32 FileInformationClass,
  ffi.Pointer<ffi.Void> lpFileInformation,
  ffi.Uint64 dwBufferSize,
);

typedef _dart_GetFileInformationByHandleEx = int Function(
  ffi.Pointer<ffi.Void> hFile,
  int FileInformationClass,
  ffi.Pointer<ffi.Void> lpFileInformation,
  int dwBufferSize,
);

typedef _c_OpenFileById = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hVolumeHint,
  ffi.Pointer<LPFILE_ID_DESCRIPTOR> lpFileId,
  ffi.Uint64 dwDesiredAccess,
  ffi.Uint64 dwShareMode,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  ffi.Uint64 dwFlagsAndAttributes,
);

typedef _dart_OpenFileById = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hVolumeHint,
  ffi.Pointer<LPFILE_ID_DESCRIPTOR> lpFileId,
  int dwDesiredAccess,
  int dwShareMode,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  int dwFlagsAndAttributes,
);

typedef _c_CreateSymbolicLinkA = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int8> lpSymlinkFileName,
  ffi.Pointer<ffi.Int8> lpTargetFileName,
  ffi.Uint64 dwFlags,
);

typedef _dart_CreateSymbolicLinkA = int Function(
  ffi.Pointer<ffi.Int8> lpSymlinkFileName,
  ffi.Pointer<ffi.Int8> lpTargetFileName,
  int dwFlags,
);

typedef _c_CreateSymbolicLinkW = ffi.Uint8 Function(
  ffi.Pointer<ffi.Uint16> lpSymlinkFileName,
  ffi.Pointer<ffi.Uint16> lpTargetFileName,
  ffi.Uint64 dwFlags,
);

typedef _dart_CreateSymbolicLinkW = int Function(
  ffi.Pointer<ffi.Uint16> lpSymlinkFileName,
  ffi.Pointer<ffi.Uint16> lpTargetFileName,
  int dwFlags,
);

typedef _c_QueryActCtxSettingsW = ffi.Int32 Function(
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Void> hActCtx,
  ffi.Pointer<ffi.Uint16> settingsNameSpace,
  ffi.Pointer<ffi.Uint16> settingName,
  ffi.Pointer<ffi.Uint16> pvBuffer,
  ffi.Uint64 dwBuffer,
  ffi.Pointer<ffi.Uint64> pdwWrittenOrRequired,
);

typedef _dart_QueryActCtxSettingsW = int Function(
  int dwFlags,
  ffi.Pointer<ffi.Void> hActCtx,
  ffi.Pointer<ffi.Uint16> settingsNameSpace,
  ffi.Pointer<ffi.Uint16> settingName,
  ffi.Pointer<ffi.Uint16> pvBuffer,
  int dwBuffer,
  ffi.Pointer<ffi.Uint64> pdwWrittenOrRequired,
);

typedef _c_CreateSymbolicLinkTransactedA = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int8> lpSymlinkFileName,
  ffi.Pointer<ffi.Int8> lpTargetFileName,
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _dart_CreateSymbolicLinkTransactedA = int Function(
  ffi.Pointer<ffi.Int8> lpSymlinkFileName,
  ffi.Pointer<ffi.Int8> lpTargetFileName,
  int dwFlags,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _c_CreateSymbolicLinkTransactedW = ffi.Uint8 Function(
  ffi.Pointer<ffi.Uint16> lpSymlinkFileName,
  ffi.Pointer<ffi.Uint16> lpTargetFileName,
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _dart_CreateSymbolicLinkTransactedW = int Function(
  ffi.Pointer<ffi.Uint16> lpSymlinkFileName,
  ffi.Pointer<ffi.Uint16> lpTargetFileName,
  int dwFlags,
  ffi.Pointer<ffi.Void> hTransaction,
);

typedef _c_ReplacePartitionUnit = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> TargetPartition,
  ffi.Pointer<ffi.Uint16> SparePartition,
  ffi.Uint64 Flags,
);

typedef _dart_ReplacePartitionUnit = int Function(
  ffi.Pointer<ffi.Uint16> TargetPartition,
  ffi.Pointer<ffi.Uint16> SparePartition,
  int Flags,
);

typedef PSECURE_MEMORY_CACHE_CALLBACK = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
);

typedef _c_AddSecureMemoryCacheCallback = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<PSECURE_MEMORY_CACHE_CALLBACK>> pfnCallBack,
);

typedef _dart_AddSecureMemoryCacheCallback = int Function(
  ffi.Pointer<ffi.NativeFunction<PSECURE_MEMORY_CACHE_CALLBACK>> pfnCallBack,
);

typedef _c_RemoveSecureMemoryCacheCallback = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<PSECURE_MEMORY_CACHE_CALLBACK>> pfnCallBack,
);

typedef _dart_RemoveSecureMemoryCacheCallback = int Function(
  ffi.Pointer<ffi.NativeFunction<PSECURE_MEMORY_CACHE_CALLBACK>> pfnCallBack,
);

typedef _c_CopyContext = ffi.Int32 Function(
  ffi.Pointer<PCONTEXT> Destination,
  ffi.Uint64 ContextFlags,
  ffi.Pointer<PCONTEXT> Source,
);

typedef _dart_CopyContext = int Function(
  ffi.Pointer<PCONTEXT> Destination,
  int ContextFlags,
  ffi.Pointer<PCONTEXT> Source,
);

typedef _c_InitializeContext = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> Buffer,
  ffi.Uint64 ContextFlags,
  ffi.Pointer<ffi.Pointer<PCONTEXT>> Context,
  ffi.Pointer<ffi.Uint64> ContextLength,
);

typedef _dart_InitializeContext = int Function(
  ffi.Pointer<ffi.Void> Buffer,
  int ContextFlags,
  ffi.Pointer<ffi.Pointer<PCONTEXT>> Context,
  ffi.Pointer<ffi.Uint64> ContextLength,
);

typedef _c_InitializeContext2 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> Buffer,
  ffi.Uint64 ContextFlags,
  ffi.Pointer<ffi.Pointer<PCONTEXT>> Context,
  ffi.Pointer<ffi.Uint64> ContextLength,
  ffi.Uint64 XStateCompactionMask,
);

typedef _dart_InitializeContext2 = int Function(
  ffi.Pointer<ffi.Void> Buffer,
  int ContextFlags,
  ffi.Pointer<ffi.Pointer<PCONTEXT>> Context,
  ffi.Pointer<ffi.Uint64> ContextLength,
  int XStateCompactionMask,
);

typedef _c_GetEnabledXStateFeatures = ffi.Uint64 Function();

typedef _dart_GetEnabledXStateFeatures = int Function();

typedef _c_GetXStateFeaturesMask = ffi.Int32 Function(
  ffi.Pointer<PCONTEXT> Context,
  ffi.Pointer<ffi.Uint64> FeatureMask,
);

typedef _dart_GetXStateFeaturesMask = int Function(
  ffi.Pointer<PCONTEXT> Context,
  ffi.Pointer<ffi.Uint64> FeatureMask,
);

typedef _c_LocateXStateFeature = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<PCONTEXT> Context,
  ffi.Uint64 FeatureId,
  ffi.Pointer<ffi.Uint64> Length,
);

typedef _dart_LocateXStateFeature = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<PCONTEXT> Context,
  int FeatureId,
  ffi.Pointer<ffi.Uint64> Length,
);

typedef _c_SetXStateFeaturesMask = ffi.Int32 Function(
  ffi.Pointer<PCONTEXT> Context,
  ffi.Uint64 FeatureMask,
);

typedef _dart_SetXStateFeaturesMask = int Function(
  ffi.Pointer<PCONTEXT> Context,
  int FeatureMask,
);

typedef _c_EnableThreadProfiling = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> ThreadHandle,
  ffi.Uint64 Flags,
  ffi.Uint64 HardwareCounters,
  ffi.Pointer<ffi.Pointer<ffi.Void>> PerformanceDataHandle,
);

typedef _dart_EnableThreadProfiling = int Function(
  ffi.Pointer<ffi.Void> ThreadHandle,
  int Flags,
  int HardwareCounters,
  ffi.Pointer<ffi.Pointer<ffi.Void>> PerformanceDataHandle,
);

typedef _c_DisableThreadProfiling = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> PerformanceDataHandle,
);

typedef _dart_DisableThreadProfiling = int Function(
  ffi.Pointer<ffi.Void> PerformanceDataHandle,
);

typedef _c_QueryThreadProfiling = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> ThreadHandle,
  ffi.Pointer<ffi.Uint8> Enabled,
);

typedef _dart_QueryThreadProfiling = int Function(
  ffi.Pointer<ffi.Void> ThreadHandle,
  ffi.Pointer<ffi.Uint8> Enabled,
);

typedef _c_ReadThreadProfilingData = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> PerformanceDataHandle,
  ffi.Uint64 Flags,
  ffi.Pointer<PPERFORMANCE_DATA> PerformanceData,
);

typedef _dart_ReadThreadProfilingData = int Function(
  ffi.Pointer<ffi.Void> PerformanceDataHandle,
  int Flags,
  ffi.Pointer<PPERFORMANCE_DATA> PerformanceData,
);

typedef _c_RaiseCustomSystemEventTrigger = ffi.Uint64 Function(
  ffi.Pointer<PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG>
      CustomSystemEventTriggerConfig,
);

typedef _dart_RaiseCustomSystemEventTrigger = int Function(
  ffi.Pointer<PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG>
      CustomSystemEventTriggerConfig,
);

typedef _c_AddFontResourceA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_AddFontResourceA = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_AddFontResourceW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _dart_AddFontResourceW = int Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _c_AnimatePalette = ffi.Int32 Function(
  ffi.Pointer<HPALETTE__> hPal,
  ffi.Uint32 iStartIndex,
  ffi.Uint32 cEntries,
  ffi.Pointer<LPPALETTEENTRY> ppe,
);

typedef _dart_AnimatePalette = int Function(
  ffi.Pointer<HPALETTE__> hPal,
  int iStartIndex,
  int cEntries,
  ffi.Pointer<LPPALETTEENTRY> ppe,
);

typedef _c_Arc = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 x1,
  ffi.Int32 y1,
  ffi.Int32 x2,
  ffi.Int32 y2,
  ffi.Int32 x3,
  ffi.Int32 y3,
  ffi.Int32 x4,
  ffi.Int32 y4,
);

typedef _dart_Arc = int Function(
  ffi.Pointer<HDC__> hdc,
  int x1,
  int y1,
  int x2,
  int y2,
  int x3,
  int y3,
  int x4,
  int y4,
);

typedef _c_BitBlt = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Int32 cx,
  ffi.Int32 cy,
  ffi.Pointer<HDC__> hdcSrc,
  ffi.Int32 x1,
  ffi.Int32 y1,
  ffi.Uint64 rop,
);

typedef _dart_BitBlt = int Function(
  ffi.Pointer<HDC__> hdc,
  int x,
  int y,
  int cx,
  int cy,
  ffi.Pointer<HDC__> hdcSrc,
  int x1,
  int y1,
  int rop,
);

typedef _c_CancelDC = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_CancelDC = int Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_Chord = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 x1,
  ffi.Int32 y1,
  ffi.Int32 x2,
  ffi.Int32 y2,
  ffi.Int32 x3,
  ffi.Int32 y3,
  ffi.Int32 x4,
  ffi.Int32 y4,
);

typedef _dart_Chord = int Function(
  ffi.Pointer<HDC__> hdc,
  int x1,
  int y1,
  int x2,
  int y2,
  int x3,
  int y3,
  int x4,
  int y4,
);

typedef _c_ChoosePixelFormat = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPPIXELFORMATDESCRIPTOR> ppfd,
);

typedef _dart_ChoosePixelFormat = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPPIXELFORMATDESCRIPTOR> ppfd,
);

typedef _c_CloseMetaFile = ffi.Pointer<HMETAFILE__> Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_CloseMetaFile = ffi.Pointer<HMETAFILE__> Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_CombineRgn = ffi.Int32 Function(
  ffi.Pointer<HRGN__> hrgnDst,
  ffi.Pointer<HRGN__> hrgnSrc1,
  ffi.Pointer<HRGN__> hrgnSrc2,
  ffi.Int32 iMode,
);

typedef _dart_CombineRgn = int Function(
  ffi.Pointer<HRGN__> hrgnDst,
  ffi.Pointer<HRGN__> hrgnSrc1,
  ffi.Pointer<HRGN__> hrgnSrc2,
  int iMode,
);

typedef _c_CopyMetaFileA = ffi.Pointer<HMETAFILE__> Function(
  ffi.Pointer<HMETAFILE__> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_CopyMetaFileA = ffi.Pointer<HMETAFILE__> Function(
  ffi.Pointer<HMETAFILE__> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_CopyMetaFileW = ffi.Pointer<HMETAFILE__> Function(
  ffi.Pointer<HMETAFILE__> arg0,
  ffi.Pointer<ffi.Uint16> arg1,
);

typedef _dart_CopyMetaFileW = ffi.Pointer<HMETAFILE__> Function(
  ffi.Pointer<HMETAFILE__> arg0,
  ffi.Pointer<ffi.Uint16> arg1,
);

typedef _c_CreateBitmap = ffi.Pointer<HBITMAP__> Function(
  ffi.Int32 nWidth,
  ffi.Int32 nHeight,
  ffi.Uint32 nPlanes,
  ffi.Uint32 nBitCount,
  ffi.Pointer<ffi.Void> lpBits,
);

typedef _dart_CreateBitmap = ffi.Pointer<HBITMAP__> Function(
  int nWidth,
  int nHeight,
  int nPlanes,
  int nBitCount,
  ffi.Pointer<ffi.Void> lpBits,
);

typedef _c_CreateBitmapIndirect = ffi.Pointer<HBITMAP__> Function(
  ffi.Pointer<LPBITMAP> pbm,
);

typedef _dart_CreateBitmapIndirect = ffi.Pointer<HBITMAP__> Function(
  ffi.Pointer<LPBITMAP> pbm,
);

typedef _c_CreateBrushIndirect = ffi.Pointer<HBRUSH__> Function(
  ffi.Pointer<LPLOGBRUSH> plbrush,
);

typedef _dart_CreateBrushIndirect = ffi.Pointer<HBRUSH__> Function(
  ffi.Pointer<LPLOGBRUSH> plbrush,
);

typedef _c_CreateCompatibleBitmap = ffi.Pointer<HBITMAP__> Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 cx,
  ffi.Int32 cy,
);

typedef _dart_CreateCompatibleBitmap = ffi.Pointer<HBITMAP__> Function(
  ffi.Pointer<HDC__> hdc,
  int cx,
  int cy,
);

typedef _c_CreateDiscardableBitmap = ffi.Pointer<HBITMAP__> Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 cx,
  ffi.Int32 cy,
);

typedef _dart_CreateDiscardableBitmap = ffi.Pointer<HBITMAP__> Function(
  ffi.Pointer<HDC__> hdc,
  int cx,
  int cy,
);

typedef _c_CreateCompatibleDC = ffi.Pointer<HDC__> Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_CreateCompatibleDC = ffi.Pointer<HDC__> Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_CreateDCA = ffi.Pointer<HDC__> Function(
  ffi.Pointer<ffi.Int8> pwszDriver,
  ffi.Pointer<ffi.Int8> pwszDevice,
  ffi.Pointer<ffi.Int8> pszPort,
  ffi.Pointer<LPDEVMODEA> pdm,
);

typedef _dart_CreateDCA = ffi.Pointer<HDC__> Function(
  ffi.Pointer<ffi.Int8> pwszDriver,
  ffi.Pointer<ffi.Int8> pwszDevice,
  ffi.Pointer<ffi.Int8> pszPort,
  ffi.Pointer<LPDEVMODEA> pdm,
);

typedef _c_CreateDCW = ffi.Pointer<HDC__> Function(
  ffi.Pointer<ffi.Uint16> pwszDriver,
  ffi.Pointer<ffi.Uint16> pwszDevice,
  ffi.Pointer<ffi.Uint16> pszPort,
  ffi.Pointer<LPDEVMODEW> pdm,
);

typedef _dart_CreateDCW = ffi.Pointer<HDC__> Function(
  ffi.Pointer<ffi.Uint16> pwszDriver,
  ffi.Pointer<ffi.Uint16> pwszDevice,
  ffi.Pointer<ffi.Uint16> pszPort,
  ffi.Pointer<LPDEVMODEW> pdm,
);

typedef _c_CreateDIBitmap = ffi.Pointer<HBITMAP__> Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<PBITMAPINFOHEADER> pbmih,
  ffi.Uint64 flInit,
  ffi.Pointer<ffi.Void> pjBits,
  ffi.Pointer<PBITMAPINFO> pbmi,
  ffi.Uint32 iUsage,
);

typedef _dart_CreateDIBitmap = ffi.Pointer<HBITMAP__> Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<PBITMAPINFOHEADER> pbmih,
  int flInit,
  ffi.Pointer<ffi.Void> pjBits,
  ffi.Pointer<PBITMAPINFO> pbmi,
  int iUsage,
);

typedef _c_CreateDIBPatternBrush = ffi.Pointer<HBRUSH__> Function(
  ffi.Pointer<ffi.Void> h,
  ffi.Uint32 iUsage,
);

typedef _dart_CreateDIBPatternBrush = ffi.Pointer<HBRUSH__> Function(
  ffi.Pointer<ffi.Void> h,
  int iUsage,
);

typedef _c_CreateDIBPatternBrushPt = ffi.Pointer<HBRUSH__> Function(
  ffi.Pointer<ffi.Void> lpPackedDIB,
  ffi.Uint32 iUsage,
);

typedef _dart_CreateDIBPatternBrushPt = ffi.Pointer<HBRUSH__> Function(
  ffi.Pointer<ffi.Void> lpPackedDIB,
  int iUsage,
);

typedef _c_CreateEllipticRgn = ffi.Pointer<HRGN__> Function(
  ffi.Int32 x1,
  ffi.Int32 y1,
  ffi.Int32 x2,
  ffi.Int32 y2,
);

typedef _dart_CreateEllipticRgn = ffi.Pointer<HRGN__> Function(
  int x1,
  int y1,
  int x2,
  int y2,
);

typedef _c_CreateEllipticRgnIndirect = ffi.Pointer<HRGN__> Function(
  ffi.Pointer<LPRECT> lprect,
);

typedef _dart_CreateEllipticRgnIndirect = ffi.Pointer<HRGN__> Function(
  ffi.Pointer<LPRECT> lprect,
);

typedef _c_CreateFontIndirectA = ffi.Pointer<HFONT__> Function(
  ffi.Pointer<LPLOGFONTA> lplf,
);

typedef _dart_CreateFontIndirectA = ffi.Pointer<HFONT__> Function(
  ffi.Pointer<LPLOGFONTA> lplf,
);

typedef _c_CreateFontIndirectW = ffi.Pointer<HFONT__> Function(
  ffi.Pointer<LPLOGFONTW> lplf,
);

typedef _dart_CreateFontIndirectW = ffi.Pointer<HFONT__> Function(
  ffi.Pointer<LPLOGFONTW> lplf,
);

typedef _c_CreateFontA = ffi.Pointer<HFONT__> Function(
  ffi.Int32 cHeight,
  ffi.Int32 cWidth,
  ffi.Int32 cEscapement,
  ffi.Int32 cOrientation,
  ffi.Int32 cWeight,
  ffi.Uint64 bItalic,
  ffi.Uint64 bUnderline,
  ffi.Uint64 bStrikeOut,
  ffi.Uint64 iCharSet,
  ffi.Uint64 iOutPrecision,
  ffi.Uint64 iClipPrecision,
  ffi.Uint64 iQuality,
  ffi.Uint64 iPitchAndFamily,
  ffi.Pointer<ffi.Int8> pszFaceName,
);

typedef _dart_CreateFontA = ffi.Pointer<HFONT__> Function(
  int cHeight,
  int cWidth,
  int cEscapement,
  int cOrientation,
  int cWeight,
  int bItalic,
  int bUnderline,
  int bStrikeOut,
  int iCharSet,
  int iOutPrecision,
  int iClipPrecision,
  int iQuality,
  int iPitchAndFamily,
  ffi.Pointer<ffi.Int8> pszFaceName,
);

typedef _c_CreateFontW = ffi.Pointer<HFONT__> Function(
  ffi.Int32 cHeight,
  ffi.Int32 cWidth,
  ffi.Int32 cEscapement,
  ffi.Int32 cOrientation,
  ffi.Int32 cWeight,
  ffi.Uint64 bItalic,
  ffi.Uint64 bUnderline,
  ffi.Uint64 bStrikeOut,
  ffi.Uint64 iCharSet,
  ffi.Uint64 iOutPrecision,
  ffi.Uint64 iClipPrecision,
  ffi.Uint64 iQuality,
  ffi.Uint64 iPitchAndFamily,
  ffi.Pointer<ffi.Uint16> pszFaceName,
);

typedef _dart_CreateFontW = ffi.Pointer<HFONT__> Function(
  int cHeight,
  int cWidth,
  int cEscapement,
  int cOrientation,
  int cWeight,
  int bItalic,
  int bUnderline,
  int bStrikeOut,
  int iCharSet,
  int iOutPrecision,
  int iClipPrecision,
  int iQuality,
  int iPitchAndFamily,
  ffi.Pointer<ffi.Uint16> pszFaceName,
);

typedef _c_CreateHatchBrush = ffi.Pointer<HBRUSH__> Function(
  ffi.Int32 iHatch,
  ffi.Uint64 color,
);

typedef _dart_CreateHatchBrush = ffi.Pointer<HBRUSH__> Function(
  int iHatch,
  int color,
);

typedef _c_CreateICA = ffi.Pointer<HDC__> Function(
  ffi.Pointer<ffi.Int8> pszDriver,
  ffi.Pointer<ffi.Int8> pszDevice,
  ffi.Pointer<ffi.Int8> pszPort,
  ffi.Pointer<LPDEVMODEA> pdm,
);

typedef _dart_CreateICA = ffi.Pointer<HDC__> Function(
  ffi.Pointer<ffi.Int8> pszDriver,
  ffi.Pointer<ffi.Int8> pszDevice,
  ffi.Pointer<ffi.Int8> pszPort,
  ffi.Pointer<LPDEVMODEA> pdm,
);

typedef _c_CreateICW = ffi.Pointer<HDC__> Function(
  ffi.Pointer<ffi.Uint16> pszDriver,
  ffi.Pointer<ffi.Uint16> pszDevice,
  ffi.Pointer<ffi.Uint16> pszPort,
  ffi.Pointer<LPDEVMODEW> pdm,
);

typedef _dart_CreateICW = ffi.Pointer<HDC__> Function(
  ffi.Pointer<ffi.Uint16> pszDriver,
  ffi.Pointer<ffi.Uint16> pszDevice,
  ffi.Pointer<ffi.Uint16> pszPort,
  ffi.Pointer<LPDEVMODEW> pdm,
);

typedef _c_CreateMetaFileA = ffi.Pointer<HDC__> Function(
  ffi.Pointer<ffi.Int8> pszFile,
);

typedef _dart_CreateMetaFileA = ffi.Pointer<HDC__> Function(
  ffi.Pointer<ffi.Int8> pszFile,
);

typedef _c_CreateMetaFileW = ffi.Pointer<HDC__> Function(
  ffi.Pointer<ffi.Uint16> pszFile,
);

typedef _dart_CreateMetaFileW = ffi.Pointer<HDC__> Function(
  ffi.Pointer<ffi.Uint16> pszFile,
);

typedef _c_CreatePalette = ffi.Pointer<HPALETTE__> Function(
  ffi.Pointer<LPLOGPALETTE> plpal,
);

typedef _dart_CreatePalette = ffi.Pointer<HPALETTE__> Function(
  ffi.Pointer<LPLOGPALETTE> plpal,
);

typedef _c_CreatePen = ffi.Pointer<HPEN__> Function(
  ffi.Int32 iStyle,
  ffi.Int32 cWidth,
  ffi.Uint64 color,
);

typedef _dart_CreatePen = ffi.Pointer<HPEN__> Function(
  int iStyle,
  int cWidth,
  int color,
);

typedef _c_CreatePenIndirect = ffi.Pointer<HPEN__> Function(
  ffi.Pointer<LPLOGPEN> plpen,
);

typedef _dart_CreatePenIndirect = ffi.Pointer<HPEN__> Function(
  ffi.Pointer<LPLOGPEN> plpen,
);

typedef _c_CreatePolyPolygonRgn = ffi.Pointer<HRGN__> Function(
  ffi.Pointer<LPPOINT> pptl,
  ffi.Pointer<ffi.Int32> pc,
  ffi.Int32 cPoly,
  ffi.Int32 iMode,
);

typedef _dart_CreatePolyPolygonRgn = ffi.Pointer<HRGN__> Function(
  ffi.Pointer<LPPOINT> pptl,
  ffi.Pointer<ffi.Int32> pc,
  int cPoly,
  int iMode,
);

typedef _c_CreatePatternBrush = ffi.Pointer<HBRUSH__> Function(
  ffi.Pointer<HBITMAP__> hbm,
);

typedef _dart_CreatePatternBrush = ffi.Pointer<HBRUSH__> Function(
  ffi.Pointer<HBITMAP__> hbm,
);

typedef _c_CreateRectRgn = ffi.Pointer<HRGN__> Function(
  ffi.Int32 x1,
  ffi.Int32 y1,
  ffi.Int32 x2,
  ffi.Int32 y2,
);

typedef _dart_CreateRectRgn = ffi.Pointer<HRGN__> Function(
  int x1,
  int y1,
  int x2,
  int y2,
);

typedef _c_CreateRectRgnIndirect = ffi.Pointer<HRGN__> Function(
  ffi.Pointer<LPRECT> lprect,
);

typedef _dart_CreateRectRgnIndirect = ffi.Pointer<HRGN__> Function(
  ffi.Pointer<LPRECT> lprect,
);

typedef _c_CreateRoundRectRgn = ffi.Pointer<HRGN__> Function(
  ffi.Int32 x1,
  ffi.Int32 y1,
  ffi.Int32 x2,
  ffi.Int32 y2,
  ffi.Int32 w,
  ffi.Int32 h,
);

typedef _dart_CreateRoundRectRgn = ffi.Pointer<HRGN__> Function(
  int x1,
  int y1,
  int x2,
  int y2,
  int w,
  int h,
);

typedef _c_CreateScalableFontResourceA = ffi.Int32 Function(
  ffi.Uint64 fdwHidden,
  ffi.Pointer<ffi.Int8> lpszFont,
  ffi.Pointer<ffi.Int8> lpszFile,
  ffi.Pointer<ffi.Int8> lpszPath,
);

typedef _dart_CreateScalableFontResourceA = int Function(
  int fdwHidden,
  ffi.Pointer<ffi.Int8> lpszFont,
  ffi.Pointer<ffi.Int8> lpszFile,
  ffi.Pointer<ffi.Int8> lpszPath,
);

typedef _c_CreateScalableFontResourceW = ffi.Int32 Function(
  ffi.Uint64 fdwHidden,
  ffi.Pointer<ffi.Uint16> lpszFont,
  ffi.Pointer<ffi.Uint16> lpszFile,
  ffi.Pointer<ffi.Uint16> lpszPath,
);

typedef _dart_CreateScalableFontResourceW = int Function(
  int fdwHidden,
  ffi.Pointer<ffi.Uint16> lpszFont,
  ffi.Pointer<ffi.Uint16> lpszFile,
  ffi.Pointer<ffi.Uint16> lpszPath,
);

typedef _c_CreateSolidBrush = ffi.Pointer<HBRUSH__> Function(
  ffi.Uint64 color,
);

typedef _dart_CreateSolidBrush = ffi.Pointer<HBRUSH__> Function(
  int color,
);

typedef _c_DeleteDC = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_DeleteDC = int Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_DeleteMetaFile = ffi.Int32 Function(
  ffi.Pointer<HMETAFILE__> hmf,
);

typedef _dart_DeleteMetaFile = int Function(
  ffi.Pointer<HMETAFILE__> hmf,
);

typedef _c_DeleteObject = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> ho,
);

typedef _dart_DeleteObject = int Function(
  ffi.Pointer<ffi.Void> ho,
);

typedef _c_DescribePixelFormat = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 iPixelFormat,
  ffi.Uint32 nBytes,
  ffi.Pointer<LPPIXELFORMATDESCRIPTOR> ppfd,
);

typedef _dart_DescribePixelFormat = int Function(
  ffi.Pointer<HDC__> hdc,
  int iPixelFormat,
  int nBytes,
  ffi.Pointer<LPPIXELFORMATDESCRIPTOR> ppfd,
);

typedef _c_DeviceCapabilitiesA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> pDevice,
  ffi.Pointer<ffi.Int8> pPort,
  ffi.Uint16 fwCapability,
  ffi.Pointer<ffi.Int8> pOutput,
  ffi.Pointer<LPDEVMODEA> pDevMode,
);

typedef _dart_DeviceCapabilitiesA = int Function(
  ffi.Pointer<ffi.Int8> pDevice,
  ffi.Pointer<ffi.Int8> pPort,
  int fwCapability,
  ffi.Pointer<ffi.Int8> pOutput,
  ffi.Pointer<LPDEVMODEA> pDevMode,
);

typedef _c_DeviceCapabilitiesW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> pDevice,
  ffi.Pointer<ffi.Uint16> pPort,
  ffi.Uint16 fwCapability,
  ffi.Pointer<ffi.Uint16> pOutput,
  ffi.Pointer<LPDEVMODEW> pDevMode,
);

typedef _dart_DeviceCapabilitiesW = int Function(
  ffi.Pointer<ffi.Uint16> pDevice,
  ffi.Pointer<ffi.Uint16> pPort,
  int fwCapability,
  ffi.Pointer<ffi.Uint16> pOutput,
  ffi.Pointer<LPDEVMODEW> pDevMode,
);

typedef _c_DrawEscape = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 iEscape,
  ffi.Int32 cjIn,
  ffi.Pointer<ffi.Int8> lpIn,
);

typedef _dart_DrawEscape = int Function(
  ffi.Pointer<HDC__> hdc,
  int iEscape,
  int cjIn,
  ffi.Pointer<ffi.Int8> lpIn,
);

typedef _c_Ellipse = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 left,
  ffi.Int32 top,
  ffi.Int32 right,
  ffi.Int32 bottom,
);

typedef _dart_Ellipse = int Function(
  ffi.Pointer<HDC__> hdc,
  int left,
  int top,
  int right,
  int bottom,
);

typedef FONTENUMPROCA = ffi.Int32 Function(
  ffi.Pointer<LPLOGFONTA>,
  ffi.Pointer<LPTEXTMETRICA>,
  ffi.Uint64,
  ffi.Int64,
);

typedef _c_EnumFontFamiliesExA = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPLOGFONTA> lpLogfont,
  ffi.Pointer<ffi.NativeFunction<FONTENUMPROCA>> lpProc,
  ffi.Int64 lParam,
  ffi.Uint64 dwFlags,
);

typedef _dart_EnumFontFamiliesExA = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPLOGFONTA> lpLogfont,
  ffi.Pointer<ffi.NativeFunction<FONTENUMPROCA>> lpProc,
  int lParam,
  int dwFlags,
);

typedef FONTENUMPROCW = ffi.Int32 Function(
  ffi.Pointer<LPLOGFONTW>,
  ffi.Pointer<LPTEXTMETRICW>,
  ffi.Uint64,
  ffi.Int64,
);

typedef _c_EnumFontFamiliesExW = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPLOGFONTW> lpLogfont,
  ffi.Pointer<ffi.NativeFunction<FONTENUMPROCW>> lpProc,
  ffi.Int64 lParam,
  ffi.Uint64 dwFlags,
);

typedef _dart_EnumFontFamiliesExW = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPLOGFONTW> lpLogfont,
  ffi.Pointer<ffi.NativeFunction<FONTENUMPROCW>> lpProc,
  int lParam,
  int dwFlags,
);

typedef _c_EnumFontFamiliesA = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Int8> lpLogfont,
  ffi.Pointer<ffi.NativeFunction<FONTENUMPROCA>> lpProc,
  ffi.Int64 lParam,
);

typedef _dart_EnumFontFamiliesA = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Int8> lpLogfont,
  ffi.Pointer<ffi.NativeFunction<FONTENUMPROCA>> lpProc,
  int lParam,
);

typedef _c_EnumFontFamiliesW = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Uint16> lpLogfont,
  ffi.Pointer<ffi.NativeFunction<FONTENUMPROCW>> lpProc,
  ffi.Int64 lParam,
);

typedef _dart_EnumFontFamiliesW = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Uint16> lpLogfont,
  ffi.Pointer<ffi.NativeFunction<FONTENUMPROCW>> lpProc,
  int lParam,
);

typedef _c_EnumFontsA = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Int8> lpLogfont,
  ffi.Pointer<ffi.NativeFunction<FONTENUMPROCA>> lpProc,
  ffi.Int64 lParam,
);

typedef _dart_EnumFontsA = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Int8> lpLogfont,
  ffi.Pointer<ffi.NativeFunction<FONTENUMPROCA>> lpProc,
  int lParam,
);

typedef _c_EnumFontsW = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Uint16> lpLogfont,
  ffi.Pointer<ffi.NativeFunction<FONTENUMPROCW>> lpProc,
  ffi.Int64 lParam,
);

typedef _dart_EnumFontsW = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Uint16> lpLogfont,
  ffi.Pointer<ffi.NativeFunction<FONTENUMPROCW>> lpProc,
  int lParam,
);

typedef GOBJENUMPROC = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int64,
);

typedef _c_EnumObjects = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 nType,
  ffi.Pointer<ffi.NativeFunction<GOBJENUMPROC>> lpFunc,
  ffi.Int64 lParam,
);

typedef _dart_EnumObjects = int Function(
  ffi.Pointer<HDC__> hdc,
  int nType,
  ffi.Pointer<ffi.NativeFunction<GOBJENUMPROC>> lpFunc,
  int lParam,
);

typedef _c_EqualRgn = ffi.Int32 Function(
  ffi.Pointer<HRGN__> hrgn1,
  ffi.Pointer<HRGN__> hrgn2,
);

typedef _dart_EqualRgn = int Function(
  ffi.Pointer<HRGN__> hrgn1,
  ffi.Pointer<HRGN__> hrgn2,
);

typedef _c_Escape = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 iEscape,
  ffi.Int32 cjIn,
  ffi.Pointer<ffi.Int8> pvIn,
  ffi.Pointer<ffi.Void> pvOut,
);

typedef _dart_Escape = int Function(
  ffi.Pointer<HDC__> hdc,
  int iEscape,
  int cjIn,
  ffi.Pointer<ffi.Int8> pvIn,
  ffi.Pointer<ffi.Void> pvOut,
);

typedef _c_ExtEscape = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 iEscape,
  ffi.Int32 cjInput,
  ffi.Pointer<ffi.Int8> lpInData,
  ffi.Int32 cjOutput,
  ffi.Pointer<ffi.Int8> lpOutData,
);

typedef _dart_ExtEscape = int Function(
  ffi.Pointer<HDC__> hdc,
  int iEscape,
  int cjInput,
  ffi.Pointer<ffi.Int8> lpInData,
  int cjOutput,
  ffi.Pointer<ffi.Int8> lpOutData,
);

typedef _c_ExcludeClipRect = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 left,
  ffi.Int32 top,
  ffi.Int32 right,
  ffi.Int32 bottom,
);

typedef _dart_ExcludeClipRect = int Function(
  ffi.Pointer<HDC__> hdc,
  int left,
  int top,
  int right,
  int bottom,
);

typedef _c_ExtCreateRegion = ffi.Pointer<HRGN__> Function(
  ffi.Pointer<LPXFORM> lpx,
  ffi.Uint64 nCount,
  ffi.Pointer<LPRGNDATA> lpData,
);

typedef _dart_ExtCreateRegion = ffi.Pointer<HRGN__> Function(
  ffi.Pointer<LPXFORM> lpx,
  int nCount,
  ffi.Pointer<LPRGNDATA> lpData,
);

typedef _c_ExtFloodFill = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Uint64 color,
  ffi.Uint32 type,
);

typedef _dart_ExtFloodFill = int Function(
  ffi.Pointer<HDC__> hdc,
  int x,
  int y,
  int color,
  int type,
);

typedef _c_FillRgn = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HRGN__> hrgn,
  ffi.Pointer<HBRUSH__> hbr,
);

typedef _dart_FillRgn = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HRGN__> hrgn,
  ffi.Pointer<HBRUSH__> hbr,
);

typedef _c_FloodFill = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Uint64 color,
);

typedef _dart_FloodFill = int Function(
  ffi.Pointer<HDC__> hdc,
  int x,
  int y,
  int color,
);

typedef _c_FrameRgn = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HRGN__> hrgn,
  ffi.Pointer<HBRUSH__> hbr,
  ffi.Int32 w,
  ffi.Int32 h,
);

typedef _dart_FrameRgn = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HRGN__> hrgn,
  ffi.Pointer<HBRUSH__> hbr,
  int w,
  int h,
);

typedef _c_GetROP2 = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_GetROP2 = int Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_GetAspectRatioFilterEx = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPSIZE> lpsize,
);

typedef _dart_GetAspectRatioFilterEx = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPSIZE> lpsize,
);

typedef _c_GetBkColor = ffi.Uint64 Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_GetBkColor = int Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_GetDCBrushColor = ffi.Uint64 Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_GetDCBrushColor = int Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_GetDCPenColor = ffi.Uint64 Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_GetDCPenColor = int Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_GetBkMode = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_GetBkMode = int Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_GetBitmapBits = ffi.Int64 Function(
  ffi.Pointer<HBITMAP__> hbit,
  ffi.Int64 cb,
  ffi.Pointer<ffi.Void> lpvBits,
);

typedef _dart_GetBitmapBits = int Function(
  ffi.Pointer<HBITMAP__> hbit,
  int cb,
  ffi.Pointer<ffi.Void> lpvBits,
);

typedef _c_GetBitmapDimensionEx = ffi.Int32 Function(
  ffi.Pointer<HBITMAP__> hbit,
  ffi.Pointer<LPSIZE> lpsize,
);

typedef _dart_GetBitmapDimensionEx = int Function(
  ffi.Pointer<HBITMAP__> hbit,
  ffi.Pointer<LPSIZE> lpsize,
);

typedef _c_GetBoundsRect = ffi.Uint32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPRECT> lprect,
  ffi.Uint32 flags,
);

typedef _dart_GetBoundsRect = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPRECT> lprect,
  int flags,
);

typedef _c_GetBrushOrgEx = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPPOINT> lppt,
);

typedef _dart_GetBrushOrgEx = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPPOINT> lppt,
);

typedef _c_GetCharWidthA = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Uint32 iFirst,
  ffi.Uint32 iLast,
  ffi.Pointer<ffi.Int32> lpBuffer,
);

typedef _dart_GetCharWidthA = int Function(
  ffi.Pointer<HDC__> hdc,
  int iFirst,
  int iLast,
  ffi.Pointer<ffi.Int32> lpBuffer,
);

typedef _c_GetCharWidthW = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Uint32 iFirst,
  ffi.Uint32 iLast,
  ffi.Pointer<ffi.Int32> lpBuffer,
);

typedef _dart_GetCharWidthW = int Function(
  ffi.Pointer<HDC__> hdc,
  int iFirst,
  int iLast,
  ffi.Pointer<ffi.Int32> lpBuffer,
);

typedef _c_GetCharWidth32A = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Uint32 iFirst,
  ffi.Uint32 iLast,
  ffi.Pointer<ffi.Int32> lpBuffer,
);

typedef _dart_GetCharWidth32A = int Function(
  ffi.Pointer<HDC__> hdc,
  int iFirst,
  int iLast,
  ffi.Pointer<ffi.Int32> lpBuffer,
);

typedef _c_GetCharWidth32W = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Uint32 iFirst,
  ffi.Uint32 iLast,
  ffi.Pointer<ffi.Int32> lpBuffer,
);

typedef _dart_GetCharWidth32W = int Function(
  ffi.Pointer<HDC__> hdc,
  int iFirst,
  int iLast,
  ffi.Pointer<ffi.Int32> lpBuffer,
);

typedef _c_GetCharWidthFloatA = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Uint32 iFirst,
  ffi.Uint32 iLast,
  ffi.Pointer<ffi.Float> lpBuffer,
);

typedef _dart_GetCharWidthFloatA = int Function(
  ffi.Pointer<HDC__> hdc,
  int iFirst,
  int iLast,
  ffi.Pointer<ffi.Float> lpBuffer,
);

typedef _c_GetCharWidthFloatW = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Uint32 iFirst,
  ffi.Uint32 iLast,
  ffi.Pointer<ffi.Float> lpBuffer,
);

typedef _dart_GetCharWidthFloatW = int Function(
  ffi.Pointer<HDC__> hdc,
  int iFirst,
  int iLast,
  ffi.Pointer<ffi.Float> lpBuffer,
);

typedef _c_GetCharABCWidthsA = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Uint32 wFirst,
  ffi.Uint32 wLast,
  ffi.Pointer<LPABC> lpABC,
);

typedef _dart_GetCharABCWidthsA = int Function(
  ffi.Pointer<HDC__> hdc,
  int wFirst,
  int wLast,
  ffi.Pointer<LPABC> lpABC,
);

typedef _c_GetCharABCWidthsW = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Uint32 wFirst,
  ffi.Uint32 wLast,
  ffi.Pointer<LPABC> lpABC,
);

typedef _dart_GetCharABCWidthsW = int Function(
  ffi.Pointer<HDC__> hdc,
  int wFirst,
  int wLast,
  ffi.Pointer<LPABC> lpABC,
);

typedef _c_GetCharABCWidthsFloatA = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Uint32 iFirst,
  ffi.Uint32 iLast,
  ffi.Pointer<LPABCFLOAT> lpABC,
);

typedef _dart_GetCharABCWidthsFloatA = int Function(
  ffi.Pointer<HDC__> hdc,
  int iFirst,
  int iLast,
  ffi.Pointer<LPABCFLOAT> lpABC,
);

typedef _c_GetCharABCWidthsFloatW = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Uint32 iFirst,
  ffi.Uint32 iLast,
  ffi.Pointer<LPABCFLOAT> lpABC,
);

typedef _dart_GetCharABCWidthsFloatW = int Function(
  ffi.Pointer<HDC__> hdc,
  int iFirst,
  int iLast,
  ffi.Pointer<LPABCFLOAT> lpABC,
);

typedef _c_GetClipBox = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPRECT> lprect,
);

typedef _dart_GetClipBox = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPRECT> lprect,
);

typedef _c_GetClipRgn = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HRGN__> hrgn,
);

typedef _dart_GetClipRgn = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HRGN__> hrgn,
);

typedef _c_GetMetaRgn = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HRGN__> hrgn,
);

typedef _dart_GetMetaRgn = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HRGN__> hrgn,
);

typedef _c_GetCurrentObject = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Uint32 type,
);

typedef _dart_GetCurrentObject = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<HDC__> hdc,
  int type,
);

typedef _c_GetCurrentPositionEx = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPPOINT> lppt,
);

typedef _dart_GetCurrentPositionEx = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPPOINT> lppt,
);

typedef _c_GetDeviceCaps = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 index,
);

typedef _dart_GetDeviceCaps = int Function(
  ffi.Pointer<HDC__> hdc,
  int index,
);

typedef _c_GetDIBits = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HBITMAP__> hbm,
  ffi.Uint32 start,
  ffi.Uint32 cLines,
  ffi.Pointer<ffi.Void> lpvBits,
  ffi.Pointer<PBITMAPINFO> lpbmi,
  ffi.Uint32 usage,
);

typedef _dart_GetDIBits = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HBITMAP__> hbm,
  int start,
  int cLines,
  ffi.Pointer<ffi.Void> lpvBits,
  ffi.Pointer<PBITMAPINFO> lpbmi,
  int usage,
);

typedef _c_GetFontData = ffi.Uint64 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Uint64 dwTable,
  ffi.Uint64 dwOffset,
  ffi.Pointer<ffi.Void> pvBuffer,
  ffi.Uint64 cjBuffer,
);

typedef _dart_GetFontData = int Function(
  ffi.Pointer<HDC__> hdc,
  int dwTable,
  int dwOffset,
  ffi.Pointer<ffi.Void> pvBuffer,
  int cjBuffer,
);

typedef _c_GetGlyphOutlineA = ffi.Uint64 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Uint32 uChar,
  ffi.Uint32 fuFormat,
  ffi.Pointer<LPGLYPHMETRICS> lpgm,
  ffi.Uint64 cjBuffer,
  ffi.Pointer<ffi.Void> pvBuffer,
  ffi.Pointer<LPMAT2> lpmat2,
);

typedef _dart_GetGlyphOutlineA = int Function(
  ffi.Pointer<HDC__> hdc,
  int uChar,
  int fuFormat,
  ffi.Pointer<LPGLYPHMETRICS> lpgm,
  int cjBuffer,
  ffi.Pointer<ffi.Void> pvBuffer,
  ffi.Pointer<LPMAT2> lpmat2,
);

typedef _c_GetGlyphOutlineW = ffi.Uint64 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Uint32 uChar,
  ffi.Uint32 fuFormat,
  ffi.Pointer<LPGLYPHMETRICS> lpgm,
  ffi.Uint64 cjBuffer,
  ffi.Pointer<ffi.Void> pvBuffer,
  ffi.Pointer<LPMAT2> lpmat2,
);

typedef _dart_GetGlyphOutlineW = int Function(
  ffi.Pointer<HDC__> hdc,
  int uChar,
  int fuFormat,
  ffi.Pointer<LPGLYPHMETRICS> lpgm,
  int cjBuffer,
  ffi.Pointer<ffi.Void> pvBuffer,
  ffi.Pointer<LPMAT2> lpmat2,
);

typedef _c_GetGraphicsMode = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_GetGraphicsMode = int Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_GetMapMode = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_GetMapMode = int Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_GetMetaFileBitsEx = ffi.Uint32 Function(
  ffi.Pointer<HMETAFILE__> hMF,
  ffi.Uint32 cbBuffer,
  ffi.Pointer<ffi.Void> lpData,
);

typedef _dart_GetMetaFileBitsEx = int Function(
  ffi.Pointer<HMETAFILE__> hMF,
  int cbBuffer,
  ffi.Pointer<ffi.Void> lpData,
);

typedef _c_GetMetaFileA = ffi.Pointer<HMETAFILE__> Function(
  ffi.Pointer<ffi.Int8> lpName,
);

typedef _dart_GetMetaFileA = ffi.Pointer<HMETAFILE__> Function(
  ffi.Pointer<ffi.Int8> lpName,
);

typedef _c_GetMetaFileW = ffi.Pointer<HMETAFILE__> Function(
  ffi.Pointer<ffi.Uint16> lpName,
);

typedef _dart_GetMetaFileW = ffi.Pointer<HMETAFILE__> Function(
  ffi.Pointer<ffi.Uint16> lpName,
);

typedef _c_GetNearestColor = ffi.Uint64 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Uint64 color,
);

typedef _dart_GetNearestColor = int Function(
  ffi.Pointer<HDC__> hdc,
  int color,
);

typedef _c_GetNearestPaletteIndex = ffi.Uint32 Function(
  ffi.Pointer<HPALETTE__> h,
  ffi.Uint64 color,
);

typedef _dart_GetNearestPaletteIndex = int Function(
  ffi.Pointer<HPALETTE__> h,
  int color,
);

typedef _c_GetObjectType = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> h,
);

typedef _dart_GetObjectType = int Function(
  ffi.Pointer<ffi.Void> h,
);

typedef _c_GetOutlineTextMetricsA = ffi.Uint32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Uint32 cjCopy,
  ffi.Pointer<LPOUTLINETEXTMETRICA> potm,
);

typedef _dart_GetOutlineTextMetricsA = int Function(
  ffi.Pointer<HDC__> hdc,
  int cjCopy,
  ffi.Pointer<LPOUTLINETEXTMETRICA> potm,
);

typedef _c_GetOutlineTextMetricsW = ffi.Uint32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Uint32 cjCopy,
  ffi.Pointer<LPOUTLINETEXTMETRICW> potm,
);

typedef _dart_GetOutlineTextMetricsW = int Function(
  ffi.Pointer<HDC__> hdc,
  int cjCopy,
  ffi.Pointer<LPOUTLINETEXTMETRICW> potm,
);

typedef _c_GetPaletteEntries = ffi.Uint32 Function(
  ffi.Pointer<HPALETTE__> hpal,
  ffi.Uint32 iStart,
  ffi.Uint32 cEntries,
  ffi.Pointer<LPPALETTEENTRY> pPalEntries,
);

typedef _dart_GetPaletteEntries = int Function(
  ffi.Pointer<HPALETTE__> hpal,
  int iStart,
  int cEntries,
  ffi.Pointer<LPPALETTEENTRY> pPalEntries,
);

typedef _c_GetPixel = ffi.Uint64 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 x,
  ffi.Int32 y,
);

typedef _dart_GetPixel = int Function(
  ffi.Pointer<HDC__> hdc,
  int x,
  int y,
);

typedef _c_GetPixelFormat = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_GetPixelFormat = int Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_GetPolyFillMode = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_GetPolyFillMode = int Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_GetRasterizerCaps = ffi.Int32 Function(
  ffi.Pointer<LPRASTERIZER_STATUS> lpraststat,
  ffi.Uint32 cjBytes,
);

typedef _dart_GetRasterizerCaps = int Function(
  ffi.Pointer<LPRASTERIZER_STATUS> lpraststat,
  int cjBytes,
);

typedef _c_GetRandomRgn = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HRGN__> hrgn,
  ffi.Int32 i,
);

typedef _dart_GetRandomRgn = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HRGN__> hrgn,
  int i,
);

typedef _c_GetRegionData = ffi.Uint64 Function(
  ffi.Pointer<HRGN__> hrgn,
  ffi.Uint64 nCount,
  ffi.Pointer<LPRGNDATA> lpRgnData,
);

typedef _dart_GetRegionData = int Function(
  ffi.Pointer<HRGN__> hrgn,
  int nCount,
  ffi.Pointer<LPRGNDATA> lpRgnData,
);

typedef _c_GetRgnBox = ffi.Int32 Function(
  ffi.Pointer<HRGN__> hrgn,
  ffi.Pointer<LPRECT> lprc,
);

typedef _dart_GetRgnBox = int Function(
  ffi.Pointer<HRGN__> hrgn,
  ffi.Pointer<LPRECT> lprc,
);

typedef _c_GetStockObject = ffi.Pointer<ffi.Void> Function(
  ffi.Int32 i,
);

typedef _dart_GetStockObject = ffi.Pointer<ffi.Void> Function(
  int i,
);

typedef _c_GetStretchBltMode = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_GetStretchBltMode = int Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_GetSystemPaletteEntries = ffi.Uint32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Uint32 iStart,
  ffi.Uint32 cEntries,
  ffi.Pointer<LPPALETTEENTRY> pPalEntries,
);

typedef _dart_GetSystemPaletteEntries = int Function(
  ffi.Pointer<HDC__> hdc,
  int iStart,
  int cEntries,
  ffi.Pointer<LPPALETTEENTRY> pPalEntries,
);

typedef _c_GetSystemPaletteUse = ffi.Uint32 Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_GetSystemPaletteUse = int Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_GetTextCharacterExtra = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_GetTextCharacterExtra = int Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_GetTextAlign = ffi.Uint32 Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_GetTextAlign = int Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_GetTextColor = ffi.Uint64 Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_GetTextColor = int Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_GetTextExtentPointA = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Int8> lpString,
  ffi.Int32 c,
  ffi.Pointer<LPSIZE> lpsz,
);

typedef _dart_GetTextExtentPointA = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Int8> lpString,
  int c,
  ffi.Pointer<LPSIZE> lpsz,
);

typedef _c_GetTextExtentPointW = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Uint16> lpString,
  ffi.Int32 c,
  ffi.Pointer<LPSIZE> lpsz,
);

typedef _dart_GetTextExtentPointW = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Uint16> lpString,
  int c,
  ffi.Pointer<LPSIZE> lpsz,
);

typedef _c_GetTextExtentPoint32A = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Int8> lpString,
  ffi.Int32 c,
  ffi.Pointer<LPSIZE> psizl,
);

typedef _dart_GetTextExtentPoint32A = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Int8> lpString,
  int c,
  ffi.Pointer<LPSIZE> psizl,
);

typedef _c_GetTextExtentPoint32W = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Uint16> lpString,
  ffi.Int32 c,
  ffi.Pointer<LPSIZE> psizl,
);

typedef _dart_GetTextExtentPoint32W = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Uint16> lpString,
  int c,
  ffi.Pointer<LPSIZE> psizl,
);

typedef _c_GetTextExtentExPointA = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Int8> lpszString,
  ffi.Int32 cchString,
  ffi.Int32 nMaxExtent,
  ffi.Pointer<ffi.Int32> lpnFit,
  ffi.Pointer<ffi.Int32> lpnDx,
  ffi.Pointer<LPSIZE> lpSize,
);

typedef _dart_GetTextExtentExPointA = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Int8> lpszString,
  int cchString,
  int nMaxExtent,
  ffi.Pointer<ffi.Int32> lpnFit,
  ffi.Pointer<ffi.Int32> lpnDx,
  ffi.Pointer<LPSIZE> lpSize,
);

typedef _c_GetTextExtentExPointW = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Uint16> lpszString,
  ffi.Int32 cchString,
  ffi.Int32 nMaxExtent,
  ffi.Pointer<ffi.Int32> lpnFit,
  ffi.Pointer<ffi.Int32> lpnDx,
  ffi.Pointer<LPSIZE> lpSize,
);

typedef _dart_GetTextExtentExPointW = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Uint16> lpszString,
  int cchString,
  int nMaxExtent,
  ffi.Pointer<ffi.Int32> lpnFit,
  ffi.Pointer<ffi.Int32> lpnDx,
  ffi.Pointer<LPSIZE> lpSize,
);

typedef _c_GetTextCharset = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_GetTextCharset = int Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_GetTextCharsetInfo = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPFONTSIGNATURE> lpSig,
  ffi.Uint64 dwFlags,
);

typedef _dart_GetTextCharsetInfo = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPFONTSIGNATURE> lpSig,
  int dwFlags,
);

typedef _c_TranslateCharsetInfo = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> lpSrc,
  ffi.Pointer<LPCHARSETINFO> lpCs,
  ffi.Uint64 dwFlags,
);

typedef _dart_TranslateCharsetInfo = int Function(
  ffi.Pointer<ffi.Uint64> lpSrc,
  ffi.Pointer<LPCHARSETINFO> lpCs,
  int dwFlags,
);

typedef _c_GetFontLanguageInfo = ffi.Uint64 Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_GetFontLanguageInfo = int Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_GetCharacterPlacementA = ffi.Uint64 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Int8> lpString,
  ffi.Int32 nCount,
  ffi.Int32 nMexExtent,
  ffi.Pointer<LPGCP_RESULTSA> lpResults,
  ffi.Uint64 dwFlags,
);

typedef _dart_GetCharacterPlacementA = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Int8> lpString,
  int nCount,
  int nMexExtent,
  ffi.Pointer<LPGCP_RESULTSA> lpResults,
  int dwFlags,
);

typedef _c_GetCharacterPlacementW = ffi.Uint64 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Uint16> lpString,
  ffi.Int32 nCount,
  ffi.Int32 nMexExtent,
  ffi.Pointer<LPGCP_RESULTSW> lpResults,
  ffi.Uint64 dwFlags,
);

typedef _dart_GetCharacterPlacementW = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Uint16> lpString,
  int nCount,
  int nMexExtent,
  ffi.Pointer<LPGCP_RESULTSW> lpResults,
  int dwFlags,
);

typedef _c_GetFontUnicodeRanges = ffi.Uint64 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPGLYPHSET> lpgs,
);

typedef _dart_GetFontUnicodeRanges = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPGLYPHSET> lpgs,
);

typedef _c_GetGlyphIndicesA = ffi.Uint64 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Int8> lpstr,
  ffi.Int32 c,
  ffi.Pointer<ffi.Uint16> pgi,
  ffi.Uint64 fl,
);

typedef _dart_GetGlyphIndicesA = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Int8> lpstr,
  int c,
  ffi.Pointer<ffi.Uint16> pgi,
  int fl,
);

typedef _c_GetGlyphIndicesW = ffi.Uint64 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Uint16> lpstr,
  ffi.Int32 c,
  ffi.Pointer<ffi.Uint16> pgi,
  ffi.Uint64 fl,
);

typedef _dart_GetGlyphIndicesW = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Uint16> lpstr,
  int c,
  ffi.Pointer<ffi.Uint16> pgi,
  int fl,
);

typedef _c_GetTextExtentPointI = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Uint16> pgiIn,
  ffi.Int32 cgi,
  ffi.Pointer<LPSIZE> psize,
);

typedef _dart_GetTextExtentPointI = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Uint16> pgiIn,
  int cgi,
  ffi.Pointer<LPSIZE> psize,
);

typedef _c_GetTextExtentExPointI = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Uint16> lpwszString,
  ffi.Int32 cwchString,
  ffi.Int32 nMaxExtent,
  ffi.Pointer<ffi.Int32> lpnFit,
  ffi.Pointer<ffi.Int32> lpnDx,
  ffi.Pointer<LPSIZE> lpSize,
);

typedef _dart_GetTextExtentExPointI = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Uint16> lpwszString,
  int cwchString,
  int nMaxExtent,
  ffi.Pointer<ffi.Int32> lpnFit,
  ffi.Pointer<ffi.Int32> lpnDx,
  ffi.Pointer<LPSIZE> lpSize,
);

typedef _c_GetCharWidthI = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Uint32 giFirst,
  ffi.Uint32 cgi,
  ffi.Pointer<ffi.Uint16> pgi,
  ffi.Pointer<ffi.Int32> piWidths,
);

typedef _dart_GetCharWidthI = int Function(
  ffi.Pointer<HDC__> hdc,
  int giFirst,
  int cgi,
  ffi.Pointer<ffi.Uint16> pgi,
  ffi.Pointer<ffi.Int32> piWidths,
);

typedef _c_GetCharABCWidthsI = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Uint32 giFirst,
  ffi.Uint32 cgi,
  ffi.Pointer<ffi.Uint16> pgi,
  ffi.Pointer<LPABC> pabc,
);

typedef _dart_GetCharABCWidthsI = int Function(
  ffi.Pointer<HDC__> hdc,
  int giFirst,
  int cgi,
  ffi.Pointer<ffi.Uint16> pgi,
  ffi.Pointer<LPABC> pabc,
);

typedef _c_AddFontResourceExA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Uint64 fl,
  ffi.Pointer<ffi.Void> res,
);

typedef _dart_AddFontResourceExA = int Function(
  ffi.Pointer<ffi.Int8> name,
  int fl,
  ffi.Pointer<ffi.Void> res,
);

typedef _c_AddFontResourceExW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> name,
  ffi.Uint64 fl,
  ffi.Pointer<ffi.Void> res,
);

typedef _dart_AddFontResourceExW = int Function(
  ffi.Pointer<ffi.Uint16> name,
  int fl,
  ffi.Pointer<ffi.Void> res,
);

typedef _c_RemoveFontResourceExA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Uint64 fl,
  ffi.Pointer<ffi.Void> pdv,
);

typedef _dart_RemoveFontResourceExA = int Function(
  ffi.Pointer<ffi.Int8> name,
  int fl,
  ffi.Pointer<ffi.Void> pdv,
);

typedef _c_RemoveFontResourceExW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> name,
  ffi.Uint64 fl,
  ffi.Pointer<ffi.Void> pdv,
);

typedef _dart_RemoveFontResourceExW = int Function(
  ffi.Pointer<ffi.Uint16> name,
  int fl,
  ffi.Pointer<ffi.Void> pdv,
);

typedef _c_AddFontMemResourceEx = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> pFileView,
  ffi.Uint64 cjSize,
  ffi.Pointer<ffi.Void> pvResrved,
  ffi.Pointer<ffi.Uint64> pNumFonts,
);

typedef _dart_AddFontMemResourceEx = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> pFileView,
  int cjSize,
  ffi.Pointer<ffi.Void> pvResrved,
  ffi.Pointer<ffi.Uint64> pNumFonts,
);

typedef _c_RemoveFontMemResourceEx = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> h,
);

typedef _dart_RemoveFontMemResourceEx = int Function(
  ffi.Pointer<ffi.Void> h,
);

typedef _c_CreateFontIndirectExA = ffi.Pointer<HFONT__> Function(
  ffi.Pointer<LPENUMLOGFONTEXDVA> arg0,
);

typedef _dart_CreateFontIndirectExA = ffi.Pointer<HFONT__> Function(
  ffi.Pointer<LPENUMLOGFONTEXDVA> arg0,
);

typedef _c_CreateFontIndirectExW = ffi.Pointer<HFONT__> Function(
  ffi.Pointer<LPENUMLOGFONTEXDVW> arg0,
);

typedef _dart_CreateFontIndirectExW = ffi.Pointer<HFONT__> Function(
  ffi.Pointer<LPENUMLOGFONTEXDVW> arg0,
);

typedef _c_GetViewportExtEx = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPSIZE> lpsize,
);

typedef _dart_GetViewportExtEx = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPSIZE> lpsize,
);

typedef _c_GetViewportOrgEx = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPPOINT> lppoint,
);

typedef _dart_GetViewportOrgEx = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPPOINT> lppoint,
);

typedef _c_GetWindowExtEx = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPSIZE> lpsize,
);

typedef _dart_GetWindowExtEx = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPSIZE> lpsize,
);

typedef _c_GetWindowOrgEx = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPPOINT> lppoint,
);

typedef _dart_GetWindowOrgEx = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPPOINT> lppoint,
);

typedef _c_IntersectClipRect = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 left,
  ffi.Int32 top,
  ffi.Int32 right,
  ffi.Int32 bottom,
);

typedef _dart_IntersectClipRect = int Function(
  ffi.Pointer<HDC__> hdc,
  int left,
  int top,
  int right,
  int bottom,
);

typedef _c_InvertRgn = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HRGN__> hrgn,
);

typedef _dart_InvertRgn = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HRGN__> hrgn,
);

typedef LINEDDAPROC = ffi.Void Function(
  ffi.Int32,
  ffi.Int32,
  ffi.Int64,
);

typedef _c_LineDDA = ffi.Int32 Function(
  ffi.Int32 xStart,
  ffi.Int32 yStart,
  ffi.Int32 xEnd,
  ffi.Int32 yEnd,
  ffi.Pointer<ffi.NativeFunction<LINEDDAPROC>> lpProc,
  ffi.Int64 data,
);

typedef _dart_LineDDA = int Function(
  int xStart,
  int yStart,
  int xEnd,
  int yEnd,
  ffi.Pointer<ffi.NativeFunction<LINEDDAPROC>> lpProc,
  int data,
);

typedef _c_LineTo = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 x,
  ffi.Int32 y,
);

typedef _dart_LineTo = int Function(
  ffi.Pointer<HDC__> hdc,
  int x,
  int y,
);

typedef _c_MaskBlt = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdcDest,
  ffi.Int32 xDest,
  ffi.Int32 yDest,
  ffi.Int32 width,
  ffi.Int32 height,
  ffi.Pointer<HDC__> hdcSrc,
  ffi.Int32 xSrc,
  ffi.Int32 ySrc,
  ffi.Pointer<HBITMAP__> hbmMask,
  ffi.Int32 xMask,
  ffi.Int32 yMask,
  ffi.Uint64 rop,
);

typedef _dart_MaskBlt = int Function(
  ffi.Pointer<HDC__> hdcDest,
  int xDest,
  int yDest,
  int width,
  int height,
  ffi.Pointer<HDC__> hdcSrc,
  int xSrc,
  int ySrc,
  ffi.Pointer<HBITMAP__> hbmMask,
  int xMask,
  int yMask,
  int rop,
);

typedef _c_PlgBlt = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdcDest,
  ffi.Pointer<LPPOINT> lpPoint,
  ffi.Pointer<HDC__> hdcSrc,
  ffi.Int32 xSrc,
  ffi.Int32 ySrc,
  ffi.Int32 width,
  ffi.Int32 height,
  ffi.Pointer<HBITMAP__> hbmMask,
  ffi.Int32 xMask,
  ffi.Int32 yMask,
);

typedef _dart_PlgBlt = int Function(
  ffi.Pointer<HDC__> hdcDest,
  ffi.Pointer<LPPOINT> lpPoint,
  ffi.Pointer<HDC__> hdcSrc,
  int xSrc,
  int ySrc,
  int width,
  int height,
  ffi.Pointer<HBITMAP__> hbmMask,
  int xMask,
  int yMask,
);

typedef _c_OffsetClipRgn = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 x,
  ffi.Int32 y,
);

typedef _dart_OffsetClipRgn = int Function(
  ffi.Pointer<HDC__> hdc,
  int x,
  int y,
);

typedef _c_OffsetRgn = ffi.Int32 Function(
  ffi.Pointer<HRGN__> hrgn,
  ffi.Int32 x,
  ffi.Int32 y,
);

typedef _dart_OffsetRgn = int Function(
  ffi.Pointer<HRGN__> hrgn,
  int x,
  int y,
);

typedef _c_PatBlt = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Int32 w,
  ffi.Int32 h,
  ffi.Uint64 rop,
);

typedef _dart_PatBlt = int Function(
  ffi.Pointer<HDC__> hdc,
  int x,
  int y,
  int w,
  int h,
  int rop,
);

typedef _c_Pie = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 left,
  ffi.Int32 top,
  ffi.Int32 right,
  ffi.Int32 bottom,
  ffi.Int32 xr1,
  ffi.Int32 yr1,
  ffi.Int32 xr2,
  ffi.Int32 yr2,
);

typedef _dart_Pie = int Function(
  ffi.Pointer<HDC__> hdc,
  int left,
  int top,
  int right,
  int bottom,
  int xr1,
  int yr1,
  int xr2,
  int yr2,
);

typedef _c_PlayMetaFile = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HMETAFILE__> hmf,
);

typedef _dart_PlayMetaFile = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HMETAFILE__> hmf,
);

typedef _c_PaintRgn = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HRGN__> hrgn,
);

typedef _dart_PaintRgn = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HRGN__> hrgn,
);

typedef _c_PolyPolygon = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPPOINT> apt,
  ffi.Pointer<ffi.Int32> asz,
  ffi.Int32 csz,
);

typedef _dart_PolyPolygon = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPPOINT> apt,
  ffi.Pointer<ffi.Int32> asz,
  int csz,
);

typedef _c_PtInRegion = ffi.Int32 Function(
  ffi.Pointer<HRGN__> hrgn,
  ffi.Int32 x,
  ffi.Int32 y,
);

typedef _dart_PtInRegion = int Function(
  ffi.Pointer<HRGN__> hrgn,
  int x,
  int y,
);

typedef _c_PtVisible = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 x,
  ffi.Int32 y,
);

typedef _dart_PtVisible = int Function(
  ffi.Pointer<HDC__> hdc,
  int x,
  int y,
);

typedef _c_RectInRegion = ffi.Int32 Function(
  ffi.Pointer<HRGN__> hrgn,
  ffi.Pointer<LPRECT> lprect,
);

typedef _dart_RectInRegion = int Function(
  ffi.Pointer<HRGN__> hrgn,
  ffi.Pointer<LPRECT> lprect,
);

typedef _c_RectVisible = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPRECT> lprect,
);

typedef _dart_RectVisible = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPRECT> lprect,
);

typedef _c_Rectangle = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 left,
  ffi.Int32 top,
  ffi.Int32 right,
  ffi.Int32 bottom,
);

typedef _dart_Rectangle = int Function(
  ffi.Pointer<HDC__> hdc,
  int left,
  int top,
  int right,
  int bottom,
);

typedef _c_RestoreDC = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 nSavedDC,
);

typedef _dart_RestoreDC = int Function(
  ffi.Pointer<HDC__> hdc,
  int nSavedDC,
);

typedef _c_ResetDCA = ffi.Pointer<HDC__> Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPDEVMODEA> lpdm,
);

typedef _dart_ResetDCA = ffi.Pointer<HDC__> Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPDEVMODEA> lpdm,
);

typedef _c_ResetDCW = ffi.Pointer<HDC__> Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPDEVMODEW> lpdm,
);

typedef _dart_ResetDCW = ffi.Pointer<HDC__> Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPDEVMODEW> lpdm,
);

typedef _c_RealizePalette = ffi.Uint32 Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_RealizePalette = int Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_RemoveFontResourceA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpFileName,
);

typedef _dart_RemoveFontResourceA = int Function(
  ffi.Pointer<ffi.Int8> lpFileName,
);

typedef _c_RemoveFontResourceW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
);

typedef _dart_RemoveFontResourceW = int Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
);

typedef _c_RoundRect = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 left,
  ffi.Int32 top,
  ffi.Int32 right,
  ffi.Int32 bottom,
  ffi.Int32 width,
  ffi.Int32 height,
);

typedef _dart_RoundRect = int Function(
  ffi.Pointer<HDC__> hdc,
  int left,
  int top,
  int right,
  int bottom,
  int width,
  int height,
);

typedef _c_ResizePalette = ffi.Int32 Function(
  ffi.Pointer<HPALETTE__> hpal,
  ffi.Uint32 n,
);

typedef _dart_ResizePalette = int Function(
  ffi.Pointer<HPALETTE__> hpal,
  int n,
);

typedef _c_SaveDC = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_SaveDC = int Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_SelectClipRgn = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HRGN__> hrgn,
);

typedef _dart_SelectClipRgn = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HRGN__> hrgn,
);

typedef _c_ExtSelectClipRgn = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HRGN__> hrgn,
  ffi.Int32 mode,
);

typedef _dart_ExtSelectClipRgn = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HRGN__> hrgn,
  int mode,
);

typedef _c_SetMetaRgn = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_SetMetaRgn = int Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_SelectObject = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Void> h,
);

typedef _dart_SelectObject = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Void> h,
);

typedef _c_SelectPalette = ffi.Pointer<HPALETTE__> Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HPALETTE__> hPal,
  ffi.Int32 bForceBkgd,
);

typedef _dart_SelectPalette = ffi.Pointer<HPALETTE__> Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HPALETTE__> hPal,
  int bForceBkgd,
);

typedef _c_SetBkColor = ffi.Uint64 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Uint64 color,
);

typedef _dart_SetBkColor = int Function(
  ffi.Pointer<HDC__> hdc,
  int color,
);

typedef _c_SetDCBrushColor = ffi.Uint64 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Uint64 color,
);

typedef _dart_SetDCBrushColor = int Function(
  ffi.Pointer<HDC__> hdc,
  int color,
);

typedef _c_SetDCPenColor = ffi.Uint64 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Uint64 color,
);

typedef _dart_SetDCPenColor = int Function(
  ffi.Pointer<HDC__> hdc,
  int color,
);

typedef _c_SetBkMode = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 mode,
);

typedef _dart_SetBkMode = int Function(
  ffi.Pointer<HDC__> hdc,
  int mode,
);

typedef _c_SetBitmapBits = ffi.Int64 Function(
  ffi.Pointer<HBITMAP__> hbm,
  ffi.Uint64 cb,
  ffi.Pointer<ffi.Void> pvBits,
);

typedef _dart_SetBitmapBits = int Function(
  ffi.Pointer<HBITMAP__> hbm,
  int cb,
  ffi.Pointer<ffi.Void> pvBits,
);

typedef _c_SetBoundsRect = ffi.Uint32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPRECT> lprect,
  ffi.Uint32 flags,
);

typedef _dart_SetBoundsRect = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPRECT> lprect,
  int flags,
);

typedef _c_SetDIBits = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HBITMAP__> hbm,
  ffi.Uint32 start,
  ffi.Uint32 cLines,
  ffi.Pointer<ffi.Void> lpBits,
  ffi.Pointer<PBITMAPINFO> lpbmi,
  ffi.Uint32 ColorUse,
);

typedef _dart_SetDIBits = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HBITMAP__> hbm,
  int start,
  int cLines,
  ffi.Pointer<ffi.Void> lpBits,
  ffi.Pointer<PBITMAPINFO> lpbmi,
  int ColorUse,
);

typedef _c_SetDIBitsToDevice = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 xDest,
  ffi.Int32 yDest,
  ffi.Uint64 w,
  ffi.Uint64 h,
  ffi.Int32 xSrc,
  ffi.Int32 ySrc,
  ffi.Uint32 StartScan,
  ffi.Uint32 cLines,
  ffi.Pointer<ffi.Void> lpvBits,
  ffi.Pointer<PBITMAPINFO> lpbmi,
  ffi.Uint32 ColorUse,
);

typedef _dart_SetDIBitsToDevice = int Function(
  ffi.Pointer<HDC__> hdc,
  int xDest,
  int yDest,
  int w,
  int h,
  int xSrc,
  int ySrc,
  int StartScan,
  int cLines,
  ffi.Pointer<ffi.Void> lpvBits,
  ffi.Pointer<PBITMAPINFO> lpbmi,
  int ColorUse,
);

typedef _c_SetMapperFlags = ffi.Uint64 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Uint64 flags,
);

typedef _dart_SetMapperFlags = int Function(
  ffi.Pointer<HDC__> hdc,
  int flags,
);

typedef _c_SetGraphicsMode = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 iMode,
);

typedef _dart_SetGraphicsMode = int Function(
  ffi.Pointer<HDC__> hdc,
  int iMode,
);

typedef _c_SetMapMode = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 iMode,
);

typedef _dart_SetMapMode = int Function(
  ffi.Pointer<HDC__> hdc,
  int iMode,
);

typedef _c_SetLayout = ffi.Uint64 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Uint64 l,
);

typedef _dart_SetLayout = int Function(
  ffi.Pointer<HDC__> hdc,
  int l,
);

typedef _c_GetLayout = ffi.Uint64 Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_GetLayout = int Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_SetMetaFileBitsEx = ffi.Pointer<HMETAFILE__> Function(
  ffi.Uint32 cbBuffer,
  ffi.Pointer<ffi.Uint8> lpData,
);

typedef _dart_SetMetaFileBitsEx = ffi.Pointer<HMETAFILE__> Function(
  int cbBuffer,
  ffi.Pointer<ffi.Uint8> lpData,
);

typedef _c_SetPaletteEntries = ffi.Uint32 Function(
  ffi.Pointer<HPALETTE__> hpal,
  ffi.Uint32 iStart,
  ffi.Uint32 cEntries,
  ffi.Pointer<LPPALETTEENTRY> pPalEntries,
);

typedef _dart_SetPaletteEntries = int Function(
  ffi.Pointer<HPALETTE__> hpal,
  int iStart,
  int cEntries,
  ffi.Pointer<LPPALETTEENTRY> pPalEntries,
);

typedef _c_SetPixel = ffi.Uint64 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Uint64 color,
);

typedef _dart_SetPixel = int Function(
  ffi.Pointer<HDC__> hdc,
  int x,
  int y,
  int color,
);

typedef _c_SetPixelV = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Uint64 color,
);

typedef _dart_SetPixelV = int Function(
  ffi.Pointer<HDC__> hdc,
  int x,
  int y,
  int color,
);

typedef _c_SetPixelFormat = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 format,
  ffi.Pointer<LPPIXELFORMATDESCRIPTOR> ppfd,
);

typedef _dart_SetPixelFormat = int Function(
  ffi.Pointer<HDC__> hdc,
  int format,
  ffi.Pointer<LPPIXELFORMATDESCRIPTOR> ppfd,
);

typedef _c_SetPolyFillMode = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 mode,
);

typedef _dart_SetPolyFillMode = int Function(
  ffi.Pointer<HDC__> hdc,
  int mode,
);

typedef _c_StretchBlt = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdcDest,
  ffi.Int32 xDest,
  ffi.Int32 yDest,
  ffi.Int32 wDest,
  ffi.Int32 hDest,
  ffi.Pointer<HDC__> hdcSrc,
  ffi.Int32 xSrc,
  ffi.Int32 ySrc,
  ffi.Int32 wSrc,
  ffi.Int32 hSrc,
  ffi.Uint64 rop,
);

typedef _dart_StretchBlt = int Function(
  ffi.Pointer<HDC__> hdcDest,
  int xDest,
  int yDest,
  int wDest,
  int hDest,
  ffi.Pointer<HDC__> hdcSrc,
  int xSrc,
  int ySrc,
  int wSrc,
  int hSrc,
  int rop,
);

typedef _c_SetRectRgn = ffi.Int32 Function(
  ffi.Pointer<HRGN__> hrgn,
  ffi.Int32 left,
  ffi.Int32 top,
  ffi.Int32 right,
  ffi.Int32 bottom,
);

typedef _dart_SetRectRgn = int Function(
  ffi.Pointer<HRGN__> hrgn,
  int left,
  int top,
  int right,
  int bottom,
);

typedef _c_StretchDIBits = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 xDest,
  ffi.Int32 yDest,
  ffi.Int32 DestWidth,
  ffi.Int32 DestHeight,
  ffi.Int32 xSrc,
  ffi.Int32 ySrc,
  ffi.Int32 SrcWidth,
  ffi.Int32 SrcHeight,
  ffi.Pointer<ffi.Void> lpBits,
  ffi.Pointer<PBITMAPINFO> lpbmi,
  ffi.Uint32 iUsage,
  ffi.Uint64 rop,
);

typedef _dart_StretchDIBits = int Function(
  ffi.Pointer<HDC__> hdc,
  int xDest,
  int yDest,
  int DestWidth,
  int DestHeight,
  int xSrc,
  int ySrc,
  int SrcWidth,
  int SrcHeight,
  ffi.Pointer<ffi.Void> lpBits,
  ffi.Pointer<PBITMAPINFO> lpbmi,
  int iUsage,
  int rop,
);

typedef _c_SetROP2 = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 rop2,
);

typedef _dart_SetROP2 = int Function(
  ffi.Pointer<HDC__> hdc,
  int rop2,
);

typedef _c_SetStretchBltMode = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 mode,
);

typedef _dart_SetStretchBltMode = int Function(
  ffi.Pointer<HDC__> hdc,
  int mode,
);

typedef _c_SetSystemPaletteUse = ffi.Uint32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Uint32 use,
);

typedef _dart_SetSystemPaletteUse = int Function(
  ffi.Pointer<HDC__> hdc,
  int use,
);

typedef _c_SetTextCharacterExtra = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 extra,
);

typedef _dart_SetTextCharacterExtra = int Function(
  ffi.Pointer<HDC__> hdc,
  int extra,
);

typedef _c_SetTextColor = ffi.Uint64 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Uint64 color,
);

typedef _dart_SetTextColor = int Function(
  ffi.Pointer<HDC__> hdc,
  int color,
);

typedef _c_SetTextAlign = ffi.Uint32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Uint32 align,
);

typedef _dart_SetTextAlign = int Function(
  ffi.Pointer<HDC__> hdc,
  int align,
);

typedef _c_SetTextJustification = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 extra,
  ffi.Int32 count,
);

typedef _dart_SetTextJustification = int Function(
  ffi.Pointer<HDC__> hdc,
  int extra,
  int count,
);

typedef _c_UpdateColors = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_UpdateColors = int Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_TransparentBlt = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdcDest,
  ffi.Int32 xoriginDest,
  ffi.Int32 yoriginDest,
  ffi.Int32 wDest,
  ffi.Int32 hDest,
  ffi.Pointer<HDC__> hdcSrc,
  ffi.Int32 xoriginSrc,
  ffi.Int32 yoriginSrc,
  ffi.Int32 wSrc,
  ffi.Int32 hSrc,
  ffi.Uint32 crTransparent,
);

typedef _dart_TransparentBlt = int Function(
  ffi.Pointer<HDC__> hdcDest,
  int xoriginDest,
  int yoriginDest,
  int wDest,
  int hDest,
  ffi.Pointer<HDC__> hdcSrc,
  int xoriginSrc,
  int yoriginSrc,
  int wSrc,
  int hSrc,
  int crTransparent,
);

typedef _c_GradientFill = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPTRIVERTEX> pVertex,
  ffi.Uint64 nVertex,
  ffi.Pointer<ffi.Void> pMesh,
  ffi.Uint64 nMesh,
  ffi.Uint64 ulMode,
);

typedef _dart_GradientFill = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPTRIVERTEX> pVertex,
  int nVertex,
  ffi.Pointer<ffi.Void> pMesh,
  int nMesh,
  int ulMode,
);

typedef _c_GdiTransparentBlt = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdcDest,
  ffi.Int32 xoriginDest,
  ffi.Int32 yoriginDest,
  ffi.Int32 wDest,
  ffi.Int32 hDest,
  ffi.Pointer<HDC__> hdcSrc,
  ffi.Int32 xoriginSrc,
  ffi.Int32 yoriginSrc,
  ffi.Int32 wSrc,
  ffi.Int32 hSrc,
  ffi.Uint32 crTransparent,
);

typedef _dart_GdiTransparentBlt = int Function(
  ffi.Pointer<HDC__> hdcDest,
  int xoriginDest,
  int yoriginDest,
  int wDest,
  int hDest,
  ffi.Pointer<HDC__> hdcSrc,
  int xoriginSrc,
  int yoriginSrc,
  int wSrc,
  int hSrc,
  int crTransparent,
);

typedef _c_GdiGradientFill = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPTRIVERTEX> pVertex,
  ffi.Uint64 nVertex,
  ffi.Pointer<ffi.Void> pMesh,
  ffi.Uint64 nCount,
  ffi.Uint64 ulMode,
);

typedef _dart_GdiGradientFill = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPTRIVERTEX> pVertex,
  int nVertex,
  ffi.Pointer<ffi.Void> pMesh,
  int nCount,
  int ulMode,
);

typedef _c_PlayMetaFileRecord = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPHANDLETABLE> lpHandleTable,
  ffi.Pointer<METARECORD> lpMR,
  ffi.Uint32 noObjs,
);

typedef _dart_PlayMetaFileRecord = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPHANDLETABLE> lpHandleTable,
  ffi.Pointer<METARECORD> lpMR,
  int noObjs,
);

typedef MFENUMPROC = ffi.Int32 Function(
  ffi.Pointer<HDC__>,
  ffi.Pointer<LPHANDLETABLE>,
  ffi.Pointer<METARECORD>,
  ffi.Int32,
  ffi.Int64,
);

typedef _c_EnumMetaFile = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HMETAFILE__> hmf,
  ffi.Pointer<ffi.NativeFunction<MFENUMPROC>> proc,
  ffi.Int64 param,
);

typedef _dart_EnumMetaFile = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HMETAFILE__> hmf,
  ffi.Pointer<ffi.NativeFunction<MFENUMPROC>> proc,
  int param,
);

typedef _c_CloseEnhMetaFile = ffi.Pointer<HENHMETAFILE__> Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_CloseEnhMetaFile = ffi.Pointer<HENHMETAFILE__> Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_CopyEnhMetaFileA = ffi.Pointer<HENHMETAFILE__> Function(
  ffi.Pointer<HENHMETAFILE__> hEnh,
  ffi.Pointer<ffi.Int8> lpFileName,
);

typedef _dart_CopyEnhMetaFileA = ffi.Pointer<HENHMETAFILE__> Function(
  ffi.Pointer<HENHMETAFILE__> hEnh,
  ffi.Pointer<ffi.Int8> lpFileName,
);

typedef _c_CopyEnhMetaFileW = ffi.Pointer<HENHMETAFILE__> Function(
  ffi.Pointer<HENHMETAFILE__> hEnh,
  ffi.Pointer<ffi.Uint16> lpFileName,
);

typedef _dart_CopyEnhMetaFileW = ffi.Pointer<HENHMETAFILE__> Function(
  ffi.Pointer<HENHMETAFILE__> hEnh,
  ffi.Pointer<ffi.Uint16> lpFileName,
);

typedef _c_CreateEnhMetaFileA = ffi.Pointer<HDC__> Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Int8> lpFilename,
  ffi.Pointer<LPRECT> lprc,
  ffi.Pointer<ffi.Int8> lpDesc,
);

typedef _dart_CreateEnhMetaFileA = ffi.Pointer<HDC__> Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Int8> lpFilename,
  ffi.Pointer<LPRECT> lprc,
  ffi.Pointer<ffi.Int8> lpDesc,
);

typedef _c_CreateEnhMetaFileW = ffi.Pointer<HDC__> Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Uint16> lpFilename,
  ffi.Pointer<LPRECT> lprc,
  ffi.Pointer<ffi.Uint16> lpDesc,
);

typedef _dart_CreateEnhMetaFileW = ffi.Pointer<HDC__> Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Uint16> lpFilename,
  ffi.Pointer<LPRECT> lprc,
  ffi.Pointer<ffi.Uint16> lpDesc,
);

typedef _c_DeleteEnhMetaFile = ffi.Int32 Function(
  ffi.Pointer<HENHMETAFILE__> hmf,
);

typedef _dart_DeleteEnhMetaFile = int Function(
  ffi.Pointer<HENHMETAFILE__> hmf,
);

typedef ENHMFENUMPROC = ffi.Int32 Function(
  ffi.Pointer<HDC__>,
  ffi.Pointer<LPHANDLETABLE>,
  ffi.Pointer<LPENHMETARECORD>,
  ffi.Int32,
  ffi.Int64,
);

typedef _c_EnumEnhMetaFile = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HENHMETAFILE__> hmf,
  ffi.Pointer<ffi.NativeFunction<ENHMFENUMPROC>> proc,
  ffi.Pointer<ffi.Void> param,
  ffi.Pointer<LPRECT> lpRect,
);

typedef _dart_EnumEnhMetaFile = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HENHMETAFILE__> hmf,
  ffi.Pointer<ffi.NativeFunction<ENHMFENUMPROC>> proc,
  ffi.Pointer<ffi.Void> param,
  ffi.Pointer<LPRECT> lpRect,
);

typedef _c_GetEnhMetaFileA = ffi.Pointer<HENHMETAFILE__> Function(
  ffi.Pointer<ffi.Int8> lpName,
);

typedef _dart_GetEnhMetaFileA = ffi.Pointer<HENHMETAFILE__> Function(
  ffi.Pointer<ffi.Int8> lpName,
);

typedef _c_GetEnhMetaFileW = ffi.Pointer<HENHMETAFILE__> Function(
  ffi.Pointer<ffi.Uint16> lpName,
);

typedef _dart_GetEnhMetaFileW = ffi.Pointer<HENHMETAFILE__> Function(
  ffi.Pointer<ffi.Uint16> lpName,
);

typedef _c_GetEnhMetaFileBits = ffi.Uint32 Function(
  ffi.Pointer<HENHMETAFILE__> hEMF,
  ffi.Uint32 nSize,
  ffi.Pointer<ffi.Uint8> lpData,
);

typedef _dart_GetEnhMetaFileBits = int Function(
  ffi.Pointer<HENHMETAFILE__> hEMF,
  int nSize,
  ffi.Pointer<ffi.Uint8> lpData,
);

typedef _c_GetEnhMetaFileDescriptionA = ffi.Uint32 Function(
  ffi.Pointer<HENHMETAFILE__> hemf,
  ffi.Uint32 cchBuffer,
  ffi.Pointer<ffi.Int8> lpDescription,
);

typedef _dart_GetEnhMetaFileDescriptionA = int Function(
  ffi.Pointer<HENHMETAFILE__> hemf,
  int cchBuffer,
  ffi.Pointer<ffi.Int8> lpDescription,
);

typedef _c_GetEnhMetaFileDescriptionW = ffi.Uint32 Function(
  ffi.Pointer<HENHMETAFILE__> hemf,
  ffi.Uint32 cchBuffer,
  ffi.Pointer<ffi.Uint16> lpDescription,
);

typedef _dart_GetEnhMetaFileDescriptionW = int Function(
  ffi.Pointer<HENHMETAFILE__> hemf,
  int cchBuffer,
  ffi.Pointer<ffi.Uint16> lpDescription,
);

typedef _c_GetEnhMetaFileHeader = ffi.Uint32 Function(
  ffi.Pointer<HENHMETAFILE__> hemf,
  ffi.Uint32 nSize,
  ffi.Pointer<LPENHMETAHEADER> lpEnhMetaHeader,
);

typedef _dart_GetEnhMetaFileHeader = int Function(
  ffi.Pointer<HENHMETAFILE__> hemf,
  int nSize,
  ffi.Pointer<LPENHMETAHEADER> lpEnhMetaHeader,
);

typedef _c_GetEnhMetaFilePaletteEntries = ffi.Uint32 Function(
  ffi.Pointer<HENHMETAFILE__> hemf,
  ffi.Uint32 nNumEntries,
  ffi.Pointer<LPPALETTEENTRY> lpPaletteEntries,
);

typedef _dart_GetEnhMetaFilePaletteEntries = int Function(
  ffi.Pointer<HENHMETAFILE__> hemf,
  int nNumEntries,
  ffi.Pointer<LPPALETTEENTRY> lpPaletteEntries,
);

typedef _c_GetEnhMetaFilePixelFormat = ffi.Uint32 Function(
  ffi.Pointer<HENHMETAFILE__> hemf,
  ffi.Uint32 cbBuffer,
  ffi.Pointer<LPPIXELFORMATDESCRIPTOR> ppfd,
);

typedef _dart_GetEnhMetaFilePixelFormat = int Function(
  ffi.Pointer<HENHMETAFILE__> hemf,
  int cbBuffer,
  ffi.Pointer<LPPIXELFORMATDESCRIPTOR> ppfd,
);

typedef _c_GetWinMetaFileBits = ffi.Uint32 Function(
  ffi.Pointer<HENHMETAFILE__> hemf,
  ffi.Uint32 cbData16,
  ffi.Pointer<ffi.Uint8> pData16,
  ffi.Int32 iMapMode,
  ffi.Pointer<HDC__> hdcRef,
);

typedef _dart_GetWinMetaFileBits = int Function(
  ffi.Pointer<HENHMETAFILE__> hemf,
  int cbData16,
  ffi.Pointer<ffi.Uint8> pData16,
  int iMapMode,
  ffi.Pointer<HDC__> hdcRef,
);

typedef _c_PlayEnhMetaFile = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HENHMETAFILE__> hmf,
  ffi.Pointer<LPRECT> lprect,
);

typedef _dart_PlayEnhMetaFile = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HENHMETAFILE__> hmf,
  ffi.Pointer<LPRECT> lprect,
);

typedef _c_PlayEnhMetaFileRecord = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPHANDLETABLE> pht,
  ffi.Pointer<LPENHMETARECORD> pmr,
  ffi.Uint32 cht,
);

typedef _dart_PlayEnhMetaFileRecord = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPHANDLETABLE> pht,
  ffi.Pointer<LPENHMETARECORD> pmr,
  int cht,
);

typedef _c_SetEnhMetaFileBits = ffi.Pointer<HENHMETAFILE__> Function(
  ffi.Uint32 nSize,
  ffi.Pointer<ffi.Uint8> pb,
);

typedef _dart_SetEnhMetaFileBits = ffi.Pointer<HENHMETAFILE__> Function(
  int nSize,
  ffi.Pointer<ffi.Uint8> pb,
);

typedef _c_SetWinMetaFileBits = ffi.Pointer<HENHMETAFILE__> Function(
  ffi.Uint32 nSize,
  ffi.Pointer<ffi.Uint8> lpMeta16Data,
  ffi.Pointer<HDC__> hdcRef,
  ffi.Pointer<LPMETAFILEPICT> lpMFP,
);

typedef _dart_SetWinMetaFileBits = ffi.Pointer<HENHMETAFILE__> Function(
  int nSize,
  ffi.Pointer<ffi.Uint8> lpMeta16Data,
  ffi.Pointer<HDC__> hdcRef,
  ffi.Pointer<LPMETAFILEPICT> lpMFP,
);

typedef _c_GdiComment = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Uint32 nSize,
  ffi.Pointer<ffi.Uint8> lpData,
);

typedef _dart_GdiComment = int Function(
  ffi.Pointer<HDC__> hdc,
  int nSize,
  ffi.Pointer<ffi.Uint8> lpData,
);

typedef _c_GetTextMetricsA = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPTEXTMETRICA> lptm,
);

typedef _dart_GetTextMetricsA = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPTEXTMETRICA> lptm,
);

typedef _c_GetTextMetricsW = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPTEXTMETRICW> lptm,
);

typedef _dart_GetTextMetricsW = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPTEXTMETRICW> lptm,
);

typedef _c_AngleArc = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Uint64 r,
  ffi.Float StartAngle,
  ffi.Float SweepAngle,
);

typedef _dart_AngleArc = int Function(
  ffi.Pointer<HDC__> hdc,
  int x,
  int y,
  int r,
  double StartAngle,
  double SweepAngle,
);

typedef _c_PolyPolyline = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPPOINT> apt,
  ffi.Pointer<ffi.Uint64> asz,
  ffi.Uint64 csz,
);

typedef _dart_PolyPolyline = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPPOINT> apt,
  ffi.Pointer<ffi.Uint64> asz,
  int csz,
);

typedef _c_GetWorldTransform = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPXFORM> lpxf,
);

typedef _dart_GetWorldTransform = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPXFORM> lpxf,
);

typedef _c_SetWorldTransform = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPXFORM> lpxf,
);

typedef _dart_SetWorldTransform = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPXFORM> lpxf,
);

typedef _c_ModifyWorldTransform = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPXFORM> lpxf,
  ffi.Uint64 mode,
);

typedef _dart_ModifyWorldTransform = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPXFORM> lpxf,
  int mode,
);

typedef _c_CombineTransform = ffi.Int32 Function(
  ffi.Pointer<LPXFORM> lpxfOut,
  ffi.Pointer<LPXFORM> lpxf1,
  ffi.Pointer<LPXFORM> lpxf2,
);

typedef _dart_CombineTransform = int Function(
  ffi.Pointer<LPXFORM> lpxfOut,
  ffi.Pointer<LPXFORM> lpxf1,
  ffi.Pointer<LPXFORM> lpxf2,
);

typedef _c_CreateDIBSection = ffi.Pointer<HBITMAP__> Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<PBITMAPINFO> pbmi,
  ffi.Uint32 usage,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppvBits,
  ffi.Pointer<ffi.Void> hSection,
  ffi.Uint64 offset,
);

typedef _dart_CreateDIBSection = ffi.Pointer<HBITMAP__> Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<PBITMAPINFO> pbmi,
  int usage,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppvBits,
  ffi.Pointer<ffi.Void> hSection,
  int offset,
);

typedef _c_GetDIBColorTable = ffi.Uint32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Uint32 iStart,
  ffi.Uint32 cEntries,
  ffi.Pointer<RGBQUAD> prgbq,
);

typedef _dart_GetDIBColorTable = int Function(
  ffi.Pointer<HDC__> hdc,
  int iStart,
  int cEntries,
  ffi.Pointer<RGBQUAD> prgbq,
);

typedef _c_SetDIBColorTable = ffi.Uint32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Uint32 iStart,
  ffi.Uint32 cEntries,
  ffi.Pointer<RGBQUAD> prgbq,
);

typedef _dart_SetDIBColorTable = int Function(
  ffi.Pointer<HDC__> hdc,
  int iStart,
  int cEntries,
  ffi.Pointer<RGBQUAD> prgbq,
);

typedef _c_SetColorAdjustment = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPCOLORADJUSTMENT> lpca,
);

typedef _dart_SetColorAdjustment = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPCOLORADJUSTMENT> lpca,
);

typedef _c_GetColorAdjustment = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPCOLORADJUSTMENT> lpca,
);

typedef _dart_GetColorAdjustment = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPCOLORADJUSTMENT> lpca,
);

typedef _c_CreateHalftonePalette = ffi.Pointer<HPALETTE__> Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_CreateHalftonePalette = ffi.Pointer<HPALETTE__> Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_StartDocA = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPDOCINFOA> lpdi,
);

typedef _dart_StartDocA = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPDOCINFOA> lpdi,
);

typedef _c_StartDocW = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPDOCINFOW> lpdi,
);

typedef _dart_StartDocW = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPDOCINFOW> lpdi,
);

typedef _c_EndDoc = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_EndDoc = int Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_StartPage = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_StartPage = int Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_EndPage = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_EndPage = int Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_AbortDoc = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_AbortDoc = int Function(
  ffi.Pointer<HDC__> hdc,
);

typedef ABORTPROC = ffi.Int32 Function(
  ffi.Pointer<HDC__>,
  ffi.Int32,
);

typedef _c_SetAbortProc = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.NativeFunction<ABORTPROC>> proc,
);

typedef _dart_SetAbortProc = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.NativeFunction<ABORTPROC>> proc,
);

typedef _c_AbortPath = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_AbortPath = int Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_ArcTo = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 left,
  ffi.Int32 top,
  ffi.Int32 right,
  ffi.Int32 bottom,
  ffi.Int32 xr1,
  ffi.Int32 yr1,
  ffi.Int32 xr2,
  ffi.Int32 yr2,
);

typedef _dart_ArcTo = int Function(
  ffi.Pointer<HDC__> hdc,
  int left,
  int top,
  int right,
  int bottom,
  int xr1,
  int yr1,
  int xr2,
  int yr2,
);

typedef _c_BeginPath = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_BeginPath = int Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_CloseFigure = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_CloseFigure = int Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_EndPath = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_EndPath = int Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_FillPath = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_FillPath = int Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_FlattenPath = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_FlattenPath = int Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_GetPath = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPPOINT> apt,
  ffi.Pointer<ffi.Uint8> aj,
  ffi.Int32 cpt,
);

typedef _dart_GetPath = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPPOINT> apt,
  ffi.Pointer<ffi.Uint8> aj,
  int cpt,
);

typedef _c_PathToRegion = ffi.Pointer<HRGN__> Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_PathToRegion = ffi.Pointer<HRGN__> Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_PolyDraw = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPPOINT> apt,
  ffi.Pointer<ffi.Uint8> aj,
  ffi.Int32 cpt,
);

typedef _dart_PolyDraw = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPPOINT> apt,
  ffi.Pointer<ffi.Uint8> aj,
  int cpt,
);

typedef _c_SelectClipPath = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 mode,
);

typedef _dart_SelectClipPath = int Function(
  ffi.Pointer<HDC__> hdc,
  int mode,
);

typedef _c_SetArcDirection = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 dir,
);

typedef _dart_SetArcDirection = int Function(
  ffi.Pointer<HDC__> hdc,
  int dir,
);

typedef _c_SetMiterLimit = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Float limit,
  ffi.Pointer<ffi.Float> old,
);

typedef _dart_SetMiterLimit = int Function(
  ffi.Pointer<HDC__> hdc,
  double limit,
  ffi.Pointer<ffi.Float> old,
);

typedef _c_StrokeAndFillPath = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_StrokeAndFillPath = int Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_StrokePath = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_StrokePath = int Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_WidenPath = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_WidenPath = int Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_ExtCreatePen = ffi.Pointer<HPEN__> Function(
  ffi.Uint64 iPenStyle,
  ffi.Uint64 cWidth,
  ffi.Pointer<LPLOGBRUSH> plbrush,
  ffi.Uint64 cStyle,
  ffi.Pointer<ffi.Uint64> pstyle,
);

typedef _dart_ExtCreatePen = ffi.Pointer<HPEN__> Function(
  int iPenStyle,
  int cWidth,
  ffi.Pointer<LPLOGBRUSH> plbrush,
  int cStyle,
  ffi.Pointer<ffi.Uint64> pstyle,
);

typedef _c_GetMiterLimit = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Float> plimit,
);

typedef _dart_GetMiterLimit = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Float> plimit,
);

typedef _c_GetArcDirection = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_GetArcDirection = int Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_GetObjectA = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> h,
  ffi.Int32 c,
  ffi.Pointer<ffi.Void> pv,
);

typedef _dart_GetObjectA = int Function(
  ffi.Pointer<ffi.Void> h,
  int c,
  ffi.Pointer<ffi.Void> pv,
);

typedef _c_GetObjectW = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> h,
  ffi.Int32 c,
  ffi.Pointer<ffi.Void> pv,
);

typedef _dart_GetObjectW = int Function(
  ffi.Pointer<ffi.Void> h,
  int c,
  ffi.Pointer<ffi.Void> pv,
);

typedef _c_MoveToEx = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Pointer<LPPOINT> lppt,
);

typedef _dart_MoveToEx = int Function(
  ffi.Pointer<HDC__> hdc,
  int x,
  int y,
  ffi.Pointer<LPPOINT> lppt,
);

typedef _c_TextOutA = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Pointer<ffi.Int8> lpString,
  ffi.Int32 c,
);

typedef _dart_TextOutA = int Function(
  ffi.Pointer<HDC__> hdc,
  int x,
  int y,
  ffi.Pointer<ffi.Int8> lpString,
  int c,
);

typedef _c_TextOutW = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Pointer<ffi.Uint16> lpString,
  ffi.Int32 c,
);

typedef _dart_TextOutW = int Function(
  ffi.Pointer<HDC__> hdc,
  int x,
  int y,
  ffi.Pointer<ffi.Uint16> lpString,
  int c,
);

typedef _c_ExtTextOutA = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Uint32 options,
  ffi.Pointer<LPRECT> lprect,
  ffi.Pointer<ffi.Int8> lpString,
  ffi.Uint32 c,
  ffi.Pointer<ffi.Int32> lpDx,
);

typedef _dart_ExtTextOutA = int Function(
  ffi.Pointer<HDC__> hdc,
  int x,
  int y,
  int options,
  ffi.Pointer<LPRECT> lprect,
  ffi.Pointer<ffi.Int8> lpString,
  int c,
  ffi.Pointer<ffi.Int32> lpDx,
);

typedef _c_ExtTextOutW = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Uint32 options,
  ffi.Pointer<LPRECT> lprect,
  ffi.Pointer<ffi.Uint16> lpString,
  ffi.Uint32 c,
  ffi.Pointer<ffi.Int32> lpDx,
);

typedef _dart_ExtTextOutW = int Function(
  ffi.Pointer<HDC__> hdc,
  int x,
  int y,
  int options,
  ffi.Pointer<LPRECT> lprect,
  ffi.Pointer<ffi.Uint16> lpString,
  int c,
  ffi.Pointer<ffi.Int32> lpDx,
);

typedef _c_PolyTextOutA = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPPOLYTEXTA> ppt,
  ffi.Int32 nstrings,
);

typedef _dart_PolyTextOutA = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPPOLYTEXTA> ppt,
  int nstrings,
);

typedef _c_PolyTextOutW = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPPOLYTEXTW> ppt,
  ffi.Int32 nstrings,
);

typedef _dart_PolyTextOutW = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPPOLYTEXTW> ppt,
  int nstrings,
);

typedef _c_CreatePolygonRgn = ffi.Pointer<HRGN__> Function(
  ffi.Pointer<LPPOINT> pptl,
  ffi.Int32 cPoint,
  ffi.Int32 iMode,
);

typedef _dart_CreatePolygonRgn = ffi.Pointer<HRGN__> Function(
  ffi.Pointer<LPPOINT> pptl,
  int cPoint,
  int iMode,
);

typedef _c_DPtoLP = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPPOINT> lppt,
  ffi.Int32 c,
);

typedef _dart_DPtoLP = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPPOINT> lppt,
  int c,
);

typedef _c_LPtoDP = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPPOINT> lppt,
  ffi.Int32 c,
);

typedef _dart_LPtoDP = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPPOINT> lppt,
  int c,
);

typedef _c_Polygon = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPPOINT> apt,
  ffi.Int32 cpt,
);

typedef _dart_Polygon = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPPOINT> apt,
  int cpt,
);

typedef _c_Polyline = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPPOINT> apt,
  ffi.Int32 cpt,
);

typedef _dart_Polyline = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPPOINT> apt,
  int cpt,
);

typedef _c_PolyBezier = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPPOINT> apt,
  ffi.Uint64 cpt,
);

typedef _dart_PolyBezier = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPPOINT> apt,
  int cpt,
);

typedef _c_PolyBezierTo = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPPOINT> apt,
  ffi.Uint64 cpt,
);

typedef _dart_PolyBezierTo = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPPOINT> apt,
  int cpt,
);

typedef _c_PolylineTo = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPPOINT> apt,
  ffi.Uint64 cpt,
);

typedef _dart_PolylineTo = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPPOINT> apt,
  int cpt,
);

typedef _c_SetViewportExtEx = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Pointer<LPSIZE> lpsz,
);

typedef _dart_SetViewportExtEx = int Function(
  ffi.Pointer<HDC__> hdc,
  int x,
  int y,
  ffi.Pointer<LPSIZE> lpsz,
);

typedef _c_SetViewportOrgEx = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Pointer<LPPOINT> lppt,
);

typedef _dart_SetViewportOrgEx = int Function(
  ffi.Pointer<HDC__> hdc,
  int x,
  int y,
  ffi.Pointer<LPPOINT> lppt,
);

typedef _c_SetWindowExtEx = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Pointer<LPSIZE> lpsz,
);

typedef _dart_SetWindowExtEx = int Function(
  ffi.Pointer<HDC__> hdc,
  int x,
  int y,
  ffi.Pointer<LPSIZE> lpsz,
);

typedef _c_SetWindowOrgEx = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Pointer<LPPOINT> lppt,
);

typedef _dart_SetWindowOrgEx = int Function(
  ffi.Pointer<HDC__> hdc,
  int x,
  int y,
  ffi.Pointer<LPPOINT> lppt,
);

typedef _c_OffsetViewportOrgEx = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Pointer<LPPOINT> lppt,
);

typedef _dart_OffsetViewportOrgEx = int Function(
  ffi.Pointer<HDC__> hdc,
  int x,
  int y,
  ffi.Pointer<LPPOINT> lppt,
);

typedef _c_OffsetWindowOrgEx = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Pointer<LPPOINT> lppt,
);

typedef _dart_OffsetWindowOrgEx = int Function(
  ffi.Pointer<HDC__> hdc,
  int x,
  int y,
  ffi.Pointer<LPPOINT> lppt,
);

typedef _c_ScaleViewportExtEx = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 xn,
  ffi.Int32 dx,
  ffi.Int32 yn,
  ffi.Int32 yd,
  ffi.Pointer<LPSIZE> lpsz,
);

typedef _dart_ScaleViewportExtEx = int Function(
  ffi.Pointer<HDC__> hdc,
  int xn,
  int dx,
  int yn,
  int yd,
  ffi.Pointer<LPSIZE> lpsz,
);

typedef _c_ScaleWindowExtEx = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 xn,
  ffi.Int32 xd,
  ffi.Int32 yn,
  ffi.Int32 yd,
  ffi.Pointer<LPSIZE> lpsz,
);

typedef _dart_ScaleWindowExtEx = int Function(
  ffi.Pointer<HDC__> hdc,
  int xn,
  int xd,
  int yn,
  int yd,
  ffi.Pointer<LPSIZE> lpsz,
);

typedef _c_SetBitmapDimensionEx = ffi.Int32 Function(
  ffi.Pointer<HBITMAP__> hbm,
  ffi.Int32 w,
  ffi.Int32 h,
  ffi.Pointer<LPSIZE> lpsz,
);

typedef _dart_SetBitmapDimensionEx = int Function(
  ffi.Pointer<HBITMAP__> hbm,
  int w,
  int h,
  ffi.Pointer<LPSIZE> lpsz,
);

typedef _c_SetBrushOrgEx = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Pointer<LPPOINT> lppt,
);

typedef _dart_SetBrushOrgEx = int Function(
  ffi.Pointer<HDC__> hdc,
  int x,
  int y,
  ffi.Pointer<LPPOINT> lppt,
);

typedef _c_GetTextFaceA = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 c,
  ffi.Pointer<ffi.Int8> lpName,
);

typedef _dart_GetTextFaceA = int Function(
  ffi.Pointer<HDC__> hdc,
  int c,
  ffi.Pointer<ffi.Int8> lpName,
);

typedef _c_GetTextFaceW = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 c,
  ffi.Pointer<ffi.Uint16> lpName,
);

typedef _dart_GetTextFaceW = int Function(
  ffi.Pointer<HDC__> hdc,
  int c,
  ffi.Pointer<ffi.Uint16> lpName,
);

typedef _c_GetKerningPairsA = ffi.Uint64 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Uint64 nPairs,
  ffi.Pointer<LPKERNINGPAIR> lpKernPair,
);

typedef _dart_GetKerningPairsA = int Function(
  ffi.Pointer<HDC__> hdc,
  int nPairs,
  ffi.Pointer<LPKERNINGPAIR> lpKernPair,
);

typedef _c_GetKerningPairsW = ffi.Uint64 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Uint64 nPairs,
  ffi.Pointer<LPKERNINGPAIR> lpKernPair,
);

typedef _dart_GetKerningPairsW = int Function(
  ffi.Pointer<HDC__> hdc,
  int nPairs,
  ffi.Pointer<LPKERNINGPAIR> lpKernPair,
);

typedef _c_GetDCOrgEx = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPPOINT> lppt,
);

typedef _dart_GetDCOrgEx = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPPOINT> lppt,
);

typedef _c_FixBrushOrgEx = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Pointer<LPPOINT> ptl,
);

typedef _dart_FixBrushOrgEx = int Function(
  ffi.Pointer<HDC__> hdc,
  int x,
  int y,
  ffi.Pointer<LPPOINT> ptl,
);

typedef _c_UnrealizeObject = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> h,
);

typedef _dart_UnrealizeObject = int Function(
  ffi.Pointer<ffi.Void> h,
);

typedef _c_GdiFlush = ffi.Int32 Function();

typedef _dart_GdiFlush = int Function();

typedef _c_GdiSetBatchLimit = ffi.Uint64 Function(
  ffi.Uint64 dw,
);

typedef _dart_GdiSetBatchLimit = int Function(
  int dw,
);

typedef _c_GdiGetBatchLimit = ffi.Uint64 Function();

typedef _dart_GdiGetBatchLimit = int Function();

typedef _c_SetICMMode = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 mode,
);

typedef _dart_SetICMMode = int Function(
  ffi.Pointer<HDC__> hdc,
  int mode,
);

typedef _c_CheckColorsInGamut = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPRGBTRIPLE> lpRGBTriple,
  ffi.Pointer<ffi.Void> dlpBuffer,
  ffi.Uint64 nCount,
);

typedef _dart_CheckColorsInGamut = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPRGBTRIPLE> lpRGBTriple,
  ffi.Pointer<ffi.Void> dlpBuffer,
  int nCount,
);

typedef _c_GetColorSpace = ffi.Pointer<HCOLORSPACE__> Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_GetColorSpace = ffi.Pointer<HCOLORSPACE__> Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_GetLogColorSpaceA = ffi.Int32 Function(
  ffi.Pointer<HCOLORSPACE__> hColorSpace,
  ffi.Pointer<LPLOGCOLORSPACEA> lpBuffer,
  ffi.Uint64 nSize,
);

typedef _dart_GetLogColorSpaceA = int Function(
  ffi.Pointer<HCOLORSPACE__> hColorSpace,
  ffi.Pointer<LPLOGCOLORSPACEA> lpBuffer,
  int nSize,
);

typedef _c_GetLogColorSpaceW = ffi.Int32 Function(
  ffi.Pointer<HCOLORSPACE__> hColorSpace,
  ffi.Pointer<LPLOGCOLORSPACEW> lpBuffer,
  ffi.Uint64 nSize,
);

typedef _dart_GetLogColorSpaceW = int Function(
  ffi.Pointer<HCOLORSPACE__> hColorSpace,
  ffi.Pointer<LPLOGCOLORSPACEW> lpBuffer,
  int nSize,
);

typedef _c_CreateColorSpaceA = ffi.Pointer<HCOLORSPACE__> Function(
  ffi.Pointer<LPLOGCOLORSPACEA> lplcs,
);

typedef _dart_CreateColorSpaceA = ffi.Pointer<HCOLORSPACE__> Function(
  ffi.Pointer<LPLOGCOLORSPACEA> lplcs,
);

typedef _c_CreateColorSpaceW = ffi.Pointer<HCOLORSPACE__> Function(
  ffi.Pointer<LPLOGCOLORSPACEW> lplcs,
);

typedef _dart_CreateColorSpaceW = ffi.Pointer<HCOLORSPACE__> Function(
  ffi.Pointer<LPLOGCOLORSPACEW> lplcs,
);

typedef _c_SetColorSpace = ffi.Pointer<HCOLORSPACE__> Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HCOLORSPACE__> hcs,
);

typedef _dart_SetColorSpace = ffi.Pointer<HCOLORSPACE__> Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HCOLORSPACE__> hcs,
);

typedef _c_DeleteColorSpace = ffi.Int32 Function(
  ffi.Pointer<HCOLORSPACE__> hcs,
);

typedef _dart_DeleteColorSpace = int Function(
  ffi.Pointer<HCOLORSPACE__> hcs,
);

typedef _c_GetICMProfileA = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Uint64> pBufSize,
  ffi.Pointer<ffi.Int8> pszFilename,
);

typedef _dart_GetICMProfileA = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Uint64> pBufSize,
  ffi.Pointer<ffi.Int8> pszFilename,
);

typedef _c_GetICMProfileW = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Uint64> pBufSize,
  ffi.Pointer<ffi.Uint16> pszFilename,
);

typedef _dart_GetICMProfileW = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Uint64> pBufSize,
  ffi.Pointer<ffi.Uint16> pszFilename,
);

typedef _c_SetICMProfileA = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Int8> lpFileName,
);

typedef _dart_SetICMProfileA = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Int8> lpFileName,
);

typedef _c_SetICMProfileW = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Uint16> lpFileName,
);

typedef _dart_SetICMProfileW = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Uint16> lpFileName,
);

typedef _c_GetDeviceGammaRamp = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Void> lpRamp,
);

typedef _dart_GetDeviceGammaRamp = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Void> lpRamp,
);

typedef _c_SetDeviceGammaRamp = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Void> lpRamp,
);

typedef _dart_SetDeviceGammaRamp = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Void> lpRamp,
);

typedef _c_ColorMatchToTarget = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HDC__> hdcTarget,
  ffi.Uint64 action,
);

typedef _dart_ColorMatchToTarget = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HDC__> hdcTarget,
  int action,
);

typedef ICMENUMPROCA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8>,
  ffi.Int64,
);

typedef _c_EnumICMProfilesA = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.NativeFunction<ICMENUMPROCA>> proc,
  ffi.Int64 param,
);

typedef _dart_EnumICMProfilesA = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.NativeFunction<ICMENUMPROCA>> proc,
  int param,
);

typedef ICMENUMPROCW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16>,
  ffi.Int64,
);

typedef _c_EnumICMProfilesW = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.NativeFunction<ICMENUMPROCW>> proc,
  ffi.Int64 param,
);

typedef _dart_EnumICMProfilesW = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.NativeFunction<ICMENUMPROCW>> proc,
  int param,
);

typedef _c_UpdateICMRegKeyA = ffi.Int32 Function(
  ffi.Uint64 reserved,
  ffi.Pointer<ffi.Int8> lpszCMID,
  ffi.Pointer<ffi.Int8> lpszFileName,
  ffi.Uint32 command,
);

typedef _dart_UpdateICMRegKeyA = int Function(
  int reserved,
  ffi.Pointer<ffi.Int8> lpszCMID,
  ffi.Pointer<ffi.Int8> lpszFileName,
  int command,
);

typedef _c_UpdateICMRegKeyW = ffi.Int32 Function(
  ffi.Uint64 reserved,
  ffi.Pointer<ffi.Uint16> lpszCMID,
  ffi.Pointer<ffi.Uint16> lpszFileName,
  ffi.Uint32 command,
);

typedef _dart_UpdateICMRegKeyW = int Function(
  int reserved,
  ffi.Pointer<ffi.Uint16> lpszCMID,
  ffi.Pointer<ffi.Uint16> lpszFileName,
  int command,
);

typedef _c_ColorCorrectPalette = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HPALETTE__> hPal,
  ffi.Uint64 deFirst,
  ffi.Uint64 num,
);

typedef _dart_ColorCorrectPalette = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HPALETTE__> hPal,
  int deFirst,
  int num,
);

typedef _c_wglCopyContext = ffi.Int32 Function(
  ffi.Pointer<HGLRC__> arg0,
  ffi.Pointer<HGLRC__> arg1,
  ffi.Uint32 arg2,
);

typedef _dart_wglCopyContext = int Function(
  ffi.Pointer<HGLRC__> arg0,
  ffi.Pointer<HGLRC__> arg1,
  int arg2,
);

typedef _c_wglCreateContext = ffi.Pointer<HGLRC__> Function(
  ffi.Pointer<HDC__> arg0,
);

typedef _dart_wglCreateContext = ffi.Pointer<HGLRC__> Function(
  ffi.Pointer<HDC__> arg0,
);

typedef _c_wglCreateLayerContext = ffi.Pointer<HGLRC__> Function(
  ffi.Pointer<HDC__> arg0,
  ffi.Int32 arg1,
);

typedef _dart_wglCreateLayerContext = ffi.Pointer<HGLRC__> Function(
  ffi.Pointer<HDC__> arg0,
  int arg1,
);

typedef _c_wglDeleteContext = ffi.Int32 Function(
  ffi.Pointer<HGLRC__> arg0,
);

typedef _dart_wglDeleteContext = int Function(
  ffi.Pointer<HGLRC__> arg0,
);

typedef _c_wglGetCurrentContext = ffi.Pointer<HGLRC__> Function();

typedef _dart_wglGetCurrentContext = ffi.Pointer<HGLRC__> Function();

typedef _c_wglGetCurrentDC = ffi.Pointer<HDC__> Function();

typedef _dart_wglGetCurrentDC = ffi.Pointer<HDC__> Function();

typedef PROC = ffi.Int64 Function();

typedef _c_wglGetProcAddress = ffi.Pointer<ffi.NativeFunction<PROC>> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_wglGetProcAddress = ffi.Pointer<ffi.NativeFunction<PROC>>
    Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_wglMakeCurrent = ffi.Int32 Function(
  ffi.Pointer<HDC__> arg0,
  ffi.Pointer<HGLRC__> arg1,
);

typedef _dart_wglMakeCurrent = int Function(
  ffi.Pointer<HDC__> arg0,
  ffi.Pointer<HGLRC__> arg1,
);

typedef _c_wglShareLists = ffi.Int32 Function(
  ffi.Pointer<HGLRC__> arg0,
  ffi.Pointer<HGLRC__> arg1,
);

typedef _dart_wglShareLists = int Function(
  ffi.Pointer<HGLRC__> arg0,
  ffi.Pointer<HGLRC__> arg1,
);

typedef _c_wglUseFontBitmapsA = ffi.Int32 Function(
  ffi.Pointer<HDC__> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Uint64 arg3,
);

typedef _dart_wglUseFontBitmapsA = int Function(
  ffi.Pointer<HDC__> arg0,
  int arg1,
  int arg2,
  int arg3,
);

typedef _c_wglUseFontBitmapsW = ffi.Int32 Function(
  ffi.Pointer<HDC__> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Uint64 arg3,
);

typedef _dart_wglUseFontBitmapsW = int Function(
  ffi.Pointer<HDC__> arg0,
  int arg1,
  int arg2,
  int arg3,
);

typedef _c_SwapBuffers = ffi.Int32 Function(
  ffi.Pointer<HDC__> arg0,
);

typedef _dart_SwapBuffers = int Function(
  ffi.Pointer<HDC__> arg0,
);

typedef _c_wglUseFontOutlinesA = ffi.Int32 Function(
  ffi.Pointer<HDC__> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Uint64 arg3,
  ffi.Float arg4,
  ffi.Float arg5,
  ffi.Int32 arg6,
  ffi.Pointer<LPGLYPHMETRICSFLOAT> arg7,
);

typedef _dart_wglUseFontOutlinesA = int Function(
  ffi.Pointer<HDC__> arg0,
  int arg1,
  int arg2,
  int arg3,
  double arg4,
  double arg5,
  int arg6,
  ffi.Pointer<LPGLYPHMETRICSFLOAT> arg7,
);

typedef _c_wglUseFontOutlinesW = ffi.Int32 Function(
  ffi.Pointer<HDC__> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Uint64 arg3,
  ffi.Float arg4,
  ffi.Float arg5,
  ffi.Int32 arg6,
  ffi.Pointer<LPGLYPHMETRICSFLOAT> arg7,
);

typedef _dart_wglUseFontOutlinesW = int Function(
  ffi.Pointer<HDC__> arg0,
  int arg1,
  int arg2,
  int arg3,
  double arg4,
  double arg5,
  int arg6,
  ffi.Pointer<LPGLYPHMETRICSFLOAT> arg7,
);

typedef _c_wglDescribeLayerPlane = ffi.Int32 Function(
  ffi.Pointer<HDC__> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Uint32 arg3,
  ffi.Pointer<LPLAYERPLANEDESCRIPTOR> arg4,
);

typedef _dart_wglDescribeLayerPlane = int Function(
  ffi.Pointer<HDC__> arg0,
  int arg1,
  int arg2,
  int arg3,
  ffi.Pointer<LPLAYERPLANEDESCRIPTOR> arg4,
);

typedef _c_wglSetLayerPaletteEntries = ffi.Int32 Function(
  ffi.Pointer<HDC__> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
  ffi.Pointer<ffi.Uint64> arg4,
);

typedef _dart_wglSetLayerPaletteEntries = int Function(
  ffi.Pointer<HDC__> arg0,
  int arg1,
  int arg2,
  int arg3,
  ffi.Pointer<ffi.Uint64> arg4,
);

typedef _c_wglGetLayerPaletteEntries = ffi.Int32 Function(
  ffi.Pointer<HDC__> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
  ffi.Pointer<ffi.Uint64> arg4,
);

typedef _dart_wglGetLayerPaletteEntries = int Function(
  ffi.Pointer<HDC__> arg0,
  int arg1,
  int arg2,
  int arg3,
  ffi.Pointer<ffi.Uint64> arg4,
);

typedef _c_wglRealizeLayerPalette = ffi.Int32 Function(
  ffi.Pointer<HDC__> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
);

typedef _dart_wglRealizeLayerPalette = int Function(
  ffi.Pointer<HDC__> arg0,
  int arg1,
  int arg2,
);

typedef _c_wglSwapLayerBuffers = ffi.Int32 Function(
  ffi.Pointer<HDC__> arg0,
  ffi.Uint32 arg1,
);

typedef _dart_wglSwapLayerBuffers = int Function(
  ffi.Pointer<HDC__> arg0,
  int arg1,
);

typedef _c_wglSwapMultipleBuffers = ffi.Uint64 Function(
  ffi.Uint32 arg0,
  ffi.Pointer<LPWGLSWAP> arg1,
);

typedef _dart_wglSwapMultipleBuffers = int Function(
  int arg0,
  ffi.Pointer<LPWGLSWAP> arg1,
);

typedef _c_wvsprintfA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int8> arglist,
);

typedef _dart_wvsprintfA = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int8> arglist,
);

typedef _c_wvsprintfW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> arg0,
  ffi.Pointer<ffi.Uint16> arg1,
  ffi.Pointer<ffi.Int8> arglist,
);

typedef _dart_wvsprintfW = int Function(
  ffi.Pointer<ffi.Uint16> arg0,
  ffi.Pointer<ffi.Uint16> arg1,
  ffi.Pointer<ffi.Int8> arglist,
);

typedef _c_wsprintfA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_wsprintfA = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_wsprintfW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> arg0,
  ffi.Pointer<ffi.Uint16> arg1,
);

typedef _dart_wsprintfW = int Function(
  ffi.Pointer<ffi.Uint16> arg0,
  ffi.Pointer<ffi.Uint16> arg1,
);

typedef _c_LoadKeyboardLayoutA = ffi.Pointer<HKL__> Function(
  ffi.Pointer<ffi.Int8> pwszKLID,
  ffi.Uint32 Flags,
);

typedef _dart_LoadKeyboardLayoutA = ffi.Pointer<HKL__> Function(
  ffi.Pointer<ffi.Int8> pwszKLID,
  int Flags,
);

typedef _c_LoadKeyboardLayoutW = ffi.Pointer<HKL__> Function(
  ffi.Pointer<ffi.Uint16> pwszKLID,
  ffi.Uint32 Flags,
);

typedef _dart_LoadKeyboardLayoutW = ffi.Pointer<HKL__> Function(
  ffi.Pointer<ffi.Uint16> pwszKLID,
  int Flags,
);

typedef _c_ActivateKeyboardLayout = ffi.Pointer<HKL__> Function(
  ffi.Pointer<HKL__> hkl,
  ffi.Uint32 Flags,
);

typedef _dart_ActivateKeyboardLayout = ffi.Pointer<HKL__> Function(
  ffi.Pointer<HKL__> hkl,
  int Flags,
);

typedef _c_ToUnicodeEx = ffi.Int32 Function(
  ffi.Uint32 wVirtKey,
  ffi.Uint32 wScanCode,
  ffi.Pointer<ffi.Uint8> lpKeyState,
  ffi.Pointer<ffi.Uint16> pwszBuff,
  ffi.Int32 cchBuff,
  ffi.Uint32 wFlags,
  ffi.Pointer<HKL__> dwhkl,
);

typedef _dart_ToUnicodeEx = int Function(
  int wVirtKey,
  int wScanCode,
  ffi.Pointer<ffi.Uint8> lpKeyState,
  ffi.Pointer<ffi.Uint16> pwszBuff,
  int cchBuff,
  int wFlags,
  ffi.Pointer<HKL__> dwhkl,
);

typedef _c_UnloadKeyboardLayout = ffi.Int32 Function(
  ffi.Pointer<HKL__> hkl,
);

typedef _dart_UnloadKeyboardLayout = int Function(
  ffi.Pointer<HKL__> hkl,
);

typedef _c_GetKeyboardLayoutNameA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> pwszKLID,
);

typedef _dart_GetKeyboardLayoutNameA = int Function(
  ffi.Pointer<ffi.Int8> pwszKLID,
);

typedef _c_GetKeyboardLayoutNameW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> pwszKLID,
);

typedef _dart_GetKeyboardLayoutNameW = int Function(
  ffi.Pointer<ffi.Uint16> pwszKLID,
);

typedef _c_GetKeyboardLayoutList = ffi.Int32 Function(
  ffi.Int32 nBuff,
  ffi.Pointer<ffi.Pointer<HKL__>> lpList,
);

typedef _dart_GetKeyboardLayoutList = int Function(
  int nBuff,
  ffi.Pointer<ffi.Pointer<HKL__>> lpList,
);

typedef _c_GetKeyboardLayout = ffi.Pointer<HKL__> Function(
  ffi.Uint64 idThread,
);

typedef _dart_GetKeyboardLayout = ffi.Pointer<HKL__> Function(
  int idThread,
);

typedef _c_GetMouseMovePointsEx = ffi.Int32 Function(
  ffi.Uint32 cbSize,
  ffi.Pointer<LPMOUSEMOVEPOINT> lppt,
  ffi.Pointer<LPMOUSEMOVEPOINT> lpptBuf,
  ffi.Int32 nBufPoints,
  ffi.Uint64 resolution,
);

typedef _dart_GetMouseMovePointsEx = int Function(
  int cbSize,
  ffi.Pointer<LPMOUSEMOVEPOINT> lppt,
  ffi.Pointer<LPMOUSEMOVEPOINT> lpptBuf,
  int nBufPoints,
  int resolution,
);

typedef _c_CreateDesktopA = ffi.Pointer<HDESK__> Function(
  ffi.Pointer<ffi.Int8> lpszDesktop,
  ffi.Pointer<ffi.Int8> lpszDevice,
  ffi.Pointer<LPDEVMODEA> pDevmode,
  ffi.Uint64 dwFlags,
  ffi.Uint64 dwDesiredAccess,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpsa,
);

typedef _dart_CreateDesktopA = ffi.Pointer<HDESK__> Function(
  ffi.Pointer<ffi.Int8> lpszDesktop,
  ffi.Pointer<ffi.Int8> lpszDevice,
  ffi.Pointer<LPDEVMODEA> pDevmode,
  int dwFlags,
  int dwDesiredAccess,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpsa,
);

typedef _c_CreateDesktopW = ffi.Pointer<HDESK__> Function(
  ffi.Pointer<ffi.Uint16> lpszDesktop,
  ffi.Pointer<ffi.Uint16> lpszDevice,
  ffi.Pointer<LPDEVMODEW> pDevmode,
  ffi.Uint64 dwFlags,
  ffi.Uint64 dwDesiredAccess,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpsa,
);

typedef _dart_CreateDesktopW = ffi.Pointer<HDESK__> Function(
  ffi.Pointer<ffi.Uint16> lpszDesktop,
  ffi.Pointer<ffi.Uint16> lpszDevice,
  ffi.Pointer<LPDEVMODEW> pDevmode,
  int dwFlags,
  int dwDesiredAccess,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpsa,
);

typedef _c_CreateDesktopExA = ffi.Pointer<HDESK__> Function(
  ffi.Pointer<ffi.Int8> lpszDesktop,
  ffi.Pointer<ffi.Int8> lpszDevice,
  ffi.Pointer<LPDEVMODEA> pDevmode,
  ffi.Uint64 dwFlags,
  ffi.Uint64 dwDesiredAccess,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpsa,
  ffi.Uint64 ulHeapSize,
  ffi.Pointer<ffi.Void> pvoid,
);

typedef _dart_CreateDesktopExA = ffi.Pointer<HDESK__> Function(
  ffi.Pointer<ffi.Int8> lpszDesktop,
  ffi.Pointer<ffi.Int8> lpszDevice,
  ffi.Pointer<LPDEVMODEA> pDevmode,
  int dwFlags,
  int dwDesiredAccess,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpsa,
  int ulHeapSize,
  ffi.Pointer<ffi.Void> pvoid,
);

typedef _c_CreateDesktopExW = ffi.Pointer<HDESK__> Function(
  ffi.Pointer<ffi.Uint16> lpszDesktop,
  ffi.Pointer<ffi.Uint16> lpszDevice,
  ffi.Pointer<LPDEVMODEW> pDevmode,
  ffi.Uint64 dwFlags,
  ffi.Uint64 dwDesiredAccess,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpsa,
  ffi.Uint64 ulHeapSize,
  ffi.Pointer<ffi.Void> pvoid,
);

typedef _dart_CreateDesktopExW = ffi.Pointer<HDESK__> Function(
  ffi.Pointer<ffi.Uint16> lpszDesktop,
  ffi.Pointer<ffi.Uint16> lpszDevice,
  ffi.Pointer<LPDEVMODEW> pDevmode,
  int dwFlags,
  int dwDesiredAccess,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpsa,
  int ulHeapSize,
  ffi.Pointer<ffi.Void> pvoid,
);

typedef _c_OpenDesktopA = ffi.Pointer<HDESK__> Function(
  ffi.Pointer<ffi.Int8> lpszDesktop,
  ffi.Uint64 dwFlags,
  ffi.Int32 fInherit,
  ffi.Uint64 dwDesiredAccess,
);

typedef _dart_OpenDesktopA = ffi.Pointer<HDESK__> Function(
  ffi.Pointer<ffi.Int8> lpszDesktop,
  int dwFlags,
  int fInherit,
  int dwDesiredAccess,
);

typedef _c_OpenDesktopW = ffi.Pointer<HDESK__> Function(
  ffi.Pointer<ffi.Uint16> lpszDesktop,
  ffi.Uint64 dwFlags,
  ffi.Int32 fInherit,
  ffi.Uint64 dwDesiredAccess,
);

typedef _dart_OpenDesktopW = ffi.Pointer<HDESK__> Function(
  ffi.Pointer<ffi.Uint16> lpszDesktop,
  int dwFlags,
  int fInherit,
  int dwDesiredAccess,
);

typedef _c_OpenInputDesktop = ffi.Pointer<HDESK__> Function(
  ffi.Uint64 dwFlags,
  ffi.Int32 fInherit,
  ffi.Uint64 dwDesiredAccess,
);

typedef _dart_OpenInputDesktop = ffi.Pointer<HDESK__> Function(
  int dwFlags,
  int fInherit,
  int dwDesiredAccess,
);

typedef DESKTOPENUMPROCA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8>,
  ffi.Int64,
);

typedef _c_EnumDesktopsA = ffi.Int32 Function(
  ffi.Pointer<HWINSTA__> hwinsta,
  ffi.Pointer<ffi.NativeFunction<DESKTOPENUMPROCA>> lpEnumFunc,
  ffi.Int64 lParam,
);

typedef _dart_EnumDesktopsA = int Function(
  ffi.Pointer<HWINSTA__> hwinsta,
  ffi.Pointer<ffi.NativeFunction<DESKTOPENUMPROCA>> lpEnumFunc,
  int lParam,
);

typedef DESKTOPENUMPROCW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16>,
  ffi.Int64,
);

typedef _c_EnumDesktopsW = ffi.Int32 Function(
  ffi.Pointer<HWINSTA__> hwinsta,
  ffi.Pointer<ffi.NativeFunction<DESKTOPENUMPROCW>> lpEnumFunc,
  ffi.Int64 lParam,
);

typedef _dart_EnumDesktopsW = int Function(
  ffi.Pointer<HWINSTA__> hwinsta,
  ffi.Pointer<ffi.NativeFunction<DESKTOPENUMPROCW>> lpEnumFunc,
  int lParam,
);

typedef WNDENUMPROC = ffi.Int32 Function(
  ffi.Pointer<HWND__>,
  ffi.Int64,
);

typedef _c_EnumDesktopWindows = ffi.Int32 Function(
  ffi.Pointer<HDESK__> hDesktop,
  ffi.Pointer<ffi.NativeFunction<WNDENUMPROC>> lpfn,
  ffi.Int64 lParam,
);

typedef _dart_EnumDesktopWindows = int Function(
  ffi.Pointer<HDESK__> hDesktop,
  ffi.Pointer<ffi.NativeFunction<WNDENUMPROC>> lpfn,
  int lParam,
);

typedef _c_SwitchDesktop = ffi.Int32 Function(
  ffi.Pointer<HDESK__> hDesktop,
);

typedef _dart_SwitchDesktop = int Function(
  ffi.Pointer<HDESK__> hDesktop,
);

typedef _c_SetThreadDesktop = ffi.Int32 Function(
  ffi.Pointer<HDESK__> hDesktop,
);

typedef _dart_SetThreadDesktop = int Function(
  ffi.Pointer<HDESK__> hDesktop,
);

typedef _c_CloseDesktop = ffi.Int32 Function(
  ffi.Pointer<HDESK__> hDesktop,
);

typedef _dart_CloseDesktop = int Function(
  ffi.Pointer<HDESK__> hDesktop,
);

typedef _c_GetThreadDesktop = ffi.Pointer<HDESK__> Function(
  ffi.Uint64 dwThreadId,
);

typedef _dart_GetThreadDesktop = ffi.Pointer<HDESK__> Function(
  int dwThreadId,
);

typedef _c_CreateWindowStationA = ffi.Pointer<HWINSTA__> Function(
  ffi.Pointer<ffi.Int8> lpwinsta,
  ffi.Uint64 dwFlags,
  ffi.Uint64 dwDesiredAccess,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpsa,
);

typedef _dart_CreateWindowStationA = ffi.Pointer<HWINSTA__> Function(
  ffi.Pointer<ffi.Int8> lpwinsta,
  int dwFlags,
  int dwDesiredAccess,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpsa,
);

typedef _c_CreateWindowStationW = ffi.Pointer<HWINSTA__> Function(
  ffi.Pointer<ffi.Uint16> lpwinsta,
  ffi.Uint64 dwFlags,
  ffi.Uint64 dwDesiredAccess,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpsa,
);

typedef _dart_CreateWindowStationW = ffi.Pointer<HWINSTA__> Function(
  ffi.Pointer<ffi.Uint16> lpwinsta,
  int dwFlags,
  int dwDesiredAccess,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpsa,
);

typedef _c_OpenWindowStationA = ffi.Pointer<HWINSTA__> Function(
  ffi.Pointer<ffi.Int8> lpszWinSta,
  ffi.Int32 fInherit,
  ffi.Uint64 dwDesiredAccess,
);

typedef _dart_OpenWindowStationA = ffi.Pointer<HWINSTA__> Function(
  ffi.Pointer<ffi.Int8> lpszWinSta,
  int fInherit,
  int dwDesiredAccess,
);

typedef _c_OpenWindowStationW = ffi.Pointer<HWINSTA__> Function(
  ffi.Pointer<ffi.Uint16> lpszWinSta,
  ffi.Int32 fInherit,
  ffi.Uint64 dwDesiredAccess,
);

typedef _dart_OpenWindowStationW = ffi.Pointer<HWINSTA__> Function(
  ffi.Pointer<ffi.Uint16> lpszWinSta,
  int fInherit,
  int dwDesiredAccess,
);

typedef WINSTAENUMPROCA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8>,
  ffi.Int64,
);

typedef _c_EnumWindowStationsA = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<WINSTAENUMPROCA>> lpEnumFunc,
  ffi.Int64 lParam,
);

typedef _dart_EnumWindowStationsA = int Function(
  ffi.Pointer<ffi.NativeFunction<WINSTAENUMPROCA>> lpEnumFunc,
  int lParam,
);

typedef WINSTAENUMPROCW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16>,
  ffi.Int64,
);

typedef _c_EnumWindowStationsW = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<WINSTAENUMPROCW>> lpEnumFunc,
  ffi.Int64 lParam,
);

typedef _dart_EnumWindowStationsW = int Function(
  ffi.Pointer<ffi.NativeFunction<WINSTAENUMPROCW>> lpEnumFunc,
  int lParam,
);

typedef _c_CloseWindowStation = ffi.Int32 Function(
  ffi.Pointer<HWINSTA__> hWinSta,
);

typedef _dart_CloseWindowStation = int Function(
  ffi.Pointer<HWINSTA__> hWinSta,
);

typedef _c_SetProcessWindowStation = ffi.Int32 Function(
  ffi.Pointer<HWINSTA__> hWinSta,
);

typedef _dart_SetProcessWindowStation = int Function(
  ffi.Pointer<HWINSTA__> hWinSta,
);

typedef _c_GetProcessWindowStation = ffi.Pointer<HWINSTA__> Function();

typedef _dart_GetProcessWindowStation = ffi.Pointer<HWINSTA__> Function();

typedef _c_SetUserObjectSecurity = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hObj,
  ffi.Pointer<ffi.Uint64> pSIRequested,
  ffi.Pointer<ffi.Void> pSID,
);

typedef _dart_SetUserObjectSecurity = int Function(
  ffi.Pointer<ffi.Void> hObj,
  ffi.Pointer<ffi.Uint64> pSIRequested,
  ffi.Pointer<ffi.Void> pSID,
);

typedef _c_GetUserObjectSecurity = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hObj,
  ffi.Pointer<ffi.Uint64> pSIRequested,
  ffi.Pointer<ffi.Void> pSID,
  ffi.Uint64 nLength,
  ffi.Pointer<ffi.Uint64> lpnLengthNeeded,
);

typedef _dart_GetUserObjectSecurity = int Function(
  ffi.Pointer<ffi.Void> hObj,
  ffi.Pointer<ffi.Uint64> pSIRequested,
  ffi.Pointer<ffi.Void> pSID,
  int nLength,
  ffi.Pointer<ffi.Uint64> lpnLengthNeeded,
);

typedef _c_GetUserObjectInformationA = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hObj,
  ffi.Int32 nIndex,
  ffi.Pointer<ffi.Void> pvInfo,
  ffi.Uint64 nLength,
  ffi.Pointer<ffi.Uint64> lpnLengthNeeded,
);

typedef _dart_GetUserObjectInformationA = int Function(
  ffi.Pointer<ffi.Void> hObj,
  int nIndex,
  ffi.Pointer<ffi.Void> pvInfo,
  int nLength,
  ffi.Pointer<ffi.Uint64> lpnLengthNeeded,
);

typedef _c_GetUserObjectInformationW = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hObj,
  ffi.Int32 nIndex,
  ffi.Pointer<ffi.Void> pvInfo,
  ffi.Uint64 nLength,
  ffi.Pointer<ffi.Uint64> lpnLengthNeeded,
);

typedef _dart_GetUserObjectInformationW = int Function(
  ffi.Pointer<ffi.Void> hObj,
  int nIndex,
  ffi.Pointer<ffi.Void> pvInfo,
  int nLength,
  ffi.Pointer<ffi.Uint64> lpnLengthNeeded,
);

typedef _c_SetUserObjectInformationA = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hObj,
  ffi.Int32 nIndex,
  ffi.Pointer<ffi.Void> pvInfo,
  ffi.Uint64 nLength,
);

typedef _dart_SetUserObjectInformationA = int Function(
  ffi.Pointer<ffi.Void> hObj,
  int nIndex,
  ffi.Pointer<ffi.Void> pvInfo,
  int nLength,
);

typedef _c_SetUserObjectInformationW = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hObj,
  ffi.Int32 nIndex,
  ffi.Pointer<ffi.Void> pvInfo,
  ffi.Uint64 nLength,
);

typedef _dart_SetUserObjectInformationW = int Function(
  ffi.Pointer<ffi.Void> hObj,
  int nIndex,
  ffi.Pointer<ffi.Void> pvInfo,
  int nLength,
);

typedef _c_IsHungAppWindow = ffi.Int32 Function(
  ffi.Pointer<HWND__> hwnd,
);

typedef _dart_IsHungAppWindow = int Function(
  ffi.Pointer<HWND__> hwnd,
);

typedef _c_DisableProcessWindowsGhosting = ffi.Void Function();

typedef _dart_DisableProcessWindowsGhosting = void Function();

typedef _c_RegisterWindowMessageA = ffi.Uint32 Function(
  ffi.Pointer<ffi.Int8> lpString,
);

typedef _dart_RegisterWindowMessageA = int Function(
  ffi.Pointer<ffi.Int8> lpString,
);

typedef _c_RegisterWindowMessageW = ffi.Uint32 Function(
  ffi.Pointer<ffi.Uint16> lpString,
);

typedef _dart_RegisterWindowMessageW = int Function(
  ffi.Pointer<ffi.Uint16> lpString,
);

typedef _c_TrackMouseEvent = ffi.Int32 Function(
  ffi.Pointer<LPTRACKMOUSEEVENT> lpEventTrack,
);

typedef _dart_TrackMouseEvent = int Function(
  ffi.Pointer<LPTRACKMOUSEEVENT> lpEventTrack,
);

typedef _c_DrawEdge = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPRECT> qrc,
  ffi.Uint32 edge,
  ffi.Uint32 grfFlags,
);

typedef _dart_DrawEdge = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPRECT> qrc,
  int edge,
  int grfFlags,
);

typedef _c_DrawFrameControl = ffi.Int32 Function(
  ffi.Pointer<HDC__> arg0,
  ffi.Pointer<LPRECT> arg1,
  ffi.Uint32 arg2,
  ffi.Uint32 arg3,
);

typedef _dart_DrawFrameControl = int Function(
  ffi.Pointer<HDC__> arg0,
  ffi.Pointer<LPRECT> arg1,
  int arg2,
  int arg3,
);

typedef _c_DrawCaption = ffi.Int32 Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPRECT> lprect,
  ffi.Uint32 flags,
);

typedef _dart_DrawCaption = int Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPRECT> lprect,
  int flags,
);

typedef _c_DrawAnimatedRects = ffi.Int32 Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Int32 idAni,
  ffi.Pointer<LPRECT> lprcFrom,
  ffi.Pointer<LPRECT> lprcTo,
);

typedef _dart_DrawAnimatedRects = int Function(
  ffi.Pointer<HWND__> hwnd,
  int idAni,
  ffi.Pointer<LPRECT> lprcFrom,
  ffi.Pointer<LPRECT> lprcTo,
);

typedef _c_GetMessageA = ffi.Int32 Function(
  ffi.Pointer<LPMSG> lpMsg,
  ffi.Pointer<HWND__> hWnd,
  ffi.Uint32 wMsgFilterMin,
  ffi.Uint32 wMsgFilterMax,
);

typedef _dart_GetMessageA = int Function(
  ffi.Pointer<LPMSG> lpMsg,
  ffi.Pointer<HWND__> hWnd,
  int wMsgFilterMin,
  int wMsgFilterMax,
);

typedef _c_GetMessageW = ffi.Int32 Function(
  ffi.Pointer<LPMSG> lpMsg,
  ffi.Pointer<HWND__> hWnd,
  ffi.Uint32 wMsgFilterMin,
  ffi.Uint32 wMsgFilterMax,
);

typedef _dart_GetMessageW = int Function(
  ffi.Pointer<LPMSG> lpMsg,
  ffi.Pointer<HWND__> hWnd,
  int wMsgFilterMin,
  int wMsgFilterMax,
);

typedef _c_TranslateMessage = ffi.Int32 Function(
  ffi.Pointer<LPMSG> lpMsg,
);

typedef _dart_TranslateMessage = int Function(
  ffi.Pointer<LPMSG> lpMsg,
);

typedef _c_DispatchMessageA = ffi.Int64 Function(
  ffi.Pointer<LPMSG> lpMsg,
);

typedef _dart_DispatchMessageA = int Function(
  ffi.Pointer<LPMSG> lpMsg,
);

typedef _c_DispatchMessageW = ffi.Int64 Function(
  ffi.Pointer<LPMSG> lpMsg,
);

typedef _dart_DispatchMessageW = int Function(
  ffi.Pointer<LPMSG> lpMsg,
);

typedef _c_SetMessageQueue = ffi.Int32 Function(
  ffi.Int32 cMessagesMax,
);

typedef _dart_SetMessageQueue = int Function(
  int cMessagesMax,
);

typedef _c_PeekMessageA = ffi.Int32 Function(
  ffi.Pointer<LPMSG> lpMsg,
  ffi.Pointer<HWND__> hWnd,
  ffi.Uint32 wMsgFilterMin,
  ffi.Uint32 wMsgFilterMax,
  ffi.Uint32 wRemoveMsg,
);

typedef _dart_PeekMessageA = int Function(
  ffi.Pointer<LPMSG> lpMsg,
  ffi.Pointer<HWND__> hWnd,
  int wMsgFilterMin,
  int wMsgFilterMax,
  int wRemoveMsg,
);

typedef _c_PeekMessageW = ffi.Int32 Function(
  ffi.Pointer<LPMSG> lpMsg,
  ffi.Pointer<HWND__> hWnd,
  ffi.Uint32 wMsgFilterMin,
  ffi.Uint32 wMsgFilterMax,
  ffi.Uint32 wRemoveMsg,
);

typedef _dart_PeekMessageW = int Function(
  ffi.Pointer<LPMSG> lpMsg,
  ffi.Pointer<HWND__> hWnd,
  int wMsgFilterMin,
  int wMsgFilterMax,
  int wRemoveMsg,
);

typedef _c_RegisterHotKey = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Int32 id,
  ffi.Uint32 fsModifiers,
  ffi.Uint32 vk,
);

typedef _dart_RegisterHotKey = int Function(
  ffi.Pointer<HWND__> hWnd,
  int id,
  int fsModifiers,
  int vk,
);

typedef _c_UnregisterHotKey = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Int32 id,
);

typedef _dart_UnregisterHotKey = int Function(
  ffi.Pointer<HWND__> hWnd,
  int id,
);

typedef _c_ExitWindowsEx = ffi.Int32 Function(
  ffi.Uint32 uFlags,
  ffi.Uint64 dwReason,
);

typedef _dart_ExitWindowsEx = int Function(
  int uFlags,
  int dwReason,
);

typedef _c_SwapMouseButton = ffi.Int32 Function(
  ffi.Int32 fSwap,
);

typedef _dart_SwapMouseButton = int Function(
  int fSwap,
);

typedef _c_GetMessagePos = ffi.Uint64 Function();

typedef _dart_GetMessagePos = int Function();

typedef _c_GetMessageTime = ffi.Int64 Function();

typedef _dart_GetMessageTime = int Function();

typedef _c_GetMessageExtraInfo = ffi.Int64 Function();

typedef _dart_GetMessageExtraInfo = int Function();

typedef _c_GetUnpredictedMessagePos = ffi.Uint64 Function();

typedef _dart_GetUnpredictedMessagePos = int Function();

typedef _c_IsWow64Message = ffi.Int32 Function();

typedef _dart_IsWow64Message = int Function();

typedef _c_SetMessageExtraInfo = ffi.Int64 Function(
  ffi.Int64 lParam,
);

typedef _dart_SetMessageExtraInfo = int Function(
  int lParam,
);

typedef _c_SendMessageA = ffi.Int64 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Uint32 Msg,
  ffi.Uint64 wParam,
  ffi.Int64 lParam,
);

typedef _dart_SendMessageA = int Function(
  ffi.Pointer<HWND__> hWnd,
  int Msg,
  int wParam,
  int lParam,
);

typedef _c_SendMessageW = ffi.Int64 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Uint32 Msg,
  ffi.Uint64 wParam,
  ffi.Int64 lParam,
);

typedef _dart_SendMessageW = int Function(
  ffi.Pointer<HWND__> hWnd,
  int Msg,
  int wParam,
  int lParam,
);

typedef _c_SendMessageTimeoutA = ffi.Int64 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Uint32 Msg,
  ffi.Uint64 wParam,
  ffi.Int64 lParam,
  ffi.Uint32 fuFlags,
  ffi.Uint32 uTimeout,
  ffi.Pointer<ffi.Uint64> lpdwResult,
);

typedef _dart_SendMessageTimeoutA = int Function(
  ffi.Pointer<HWND__> hWnd,
  int Msg,
  int wParam,
  int lParam,
  int fuFlags,
  int uTimeout,
  ffi.Pointer<ffi.Uint64> lpdwResult,
);

typedef _c_SendMessageTimeoutW = ffi.Int64 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Uint32 Msg,
  ffi.Uint64 wParam,
  ffi.Int64 lParam,
  ffi.Uint32 fuFlags,
  ffi.Uint32 uTimeout,
  ffi.Pointer<ffi.Uint64> lpdwResult,
);

typedef _dart_SendMessageTimeoutW = int Function(
  ffi.Pointer<HWND__> hWnd,
  int Msg,
  int wParam,
  int lParam,
  int fuFlags,
  int uTimeout,
  ffi.Pointer<ffi.Uint64> lpdwResult,
);

typedef _c_SendNotifyMessageA = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Uint32 Msg,
  ffi.Uint64 wParam,
  ffi.Int64 lParam,
);

typedef _dart_SendNotifyMessageA = int Function(
  ffi.Pointer<HWND__> hWnd,
  int Msg,
  int wParam,
  int lParam,
);

typedef _c_SendNotifyMessageW = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Uint32 Msg,
  ffi.Uint64 wParam,
  ffi.Int64 lParam,
);

typedef _dart_SendNotifyMessageW = int Function(
  ffi.Pointer<HWND__> hWnd,
  int Msg,
  int wParam,
  int lParam,
);

typedef SENDASYNCPROC = ffi.Void Function(
  ffi.Pointer<HWND__>,
  ffi.Uint32,
  ffi.Uint64,
  ffi.Int64,
);

typedef _c_SendMessageCallbackA = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Uint32 Msg,
  ffi.Uint64 wParam,
  ffi.Int64 lParam,
  ffi.Pointer<ffi.NativeFunction<SENDASYNCPROC>> lpResultCallBack,
  ffi.Uint64 dwData,
);

typedef _dart_SendMessageCallbackA = int Function(
  ffi.Pointer<HWND__> hWnd,
  int Msg,
  int wParam,
  int lParam,
  ffi.Pointer<ffi.NativeFunction<SENDASYNCPROC>> lpResultCallBack,
  int dwData,
);

typedef _c_SendMessageCallbackW = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Uint32 Msg,
  ffi.Uint64 wParam,
  ffi.Int64 lParam,
  ffi.Pointer<ffi.NativeFunction<SENDASYNCPROC>> lpResultCallBack,
  ffi.Uint64 dwData,
);

typedef _dart_SendMessageCallbackW = int Function(
  ffi.Pointer<HWND__> hWnd,
  int Msg,
  int wParam,
  int lParam,
  ffi.Pointer<ffi.NativeFunction<SENDASYNCPROC>> lpResultCallBack,
  int dwData,
);

typedef _c_BroadcastSystemMessageExA = ffi.Int64 Function(
  ffi.Uint64 flags,
  ffi.Pointer<ffi.Uint64> lpInfo,
  ffi.Uint32 Msg,
  ffi.Uint64 wParam,
  ffi.Int64 lParam,
  ffi.Pointer<PBSMINFO> pbsmInfo,
);

typedef _dart_BroadcastSystemMessageExA = int Function(
  int flags,
  ffi.Pointer<ffi.Uint64> lpInfo,
  int Msg,
  int wParam,
  int lParam,
  ffi.Pointer<PBSMINFO> pbsmInfo,
);

typedef _c_BroadcastSystemMessageExW = ffi.Int64 Function(
  ffi.Uint64 flags,
  ffi.Pointer<ffi.Uint64> lpInfo,
  ffi.Uint32 Msg,
  ffi.Uint64 wParam,
  ffi.Int64 lParam,
  ffi.Pointer<PBSMINFO> pbsmInfo,
);

typedef _dart_BroadcastSystemMessageExW = int Function(
  int flags,
  ffi.Pointer<ffi.Uint64> lpInfo,
  int Msg,
  int wParam,
  int lParam,
  ffi.Pointer<PBSMINFO> pbsmInfo,
);

typedef _c_BroadcastSystemMessageA = ffi.Int64 Function(
  ffi.Uint64 flags,
  ffi.Pointer<ffi.Uint64> lpInfo,
  ffi.Uint32 Msg,
  ffi.Uint64 wParam,
  ffi.Int64 lParam,
);

typedef _dart_BroadcastSystemMessageA = int Function(
  int flags,
  ffi.Pointer<ffi.Uint64> lpInfo,
  int Msg,
  int wParam,
  int lParam,
);

typedef _c_BroadcastSystemMessageW = ffi.Int64 Function(
  ffi.Uint64 flags,
  ffi.Pointer<ffi.Uint64> lpInfo,
  ffi.Uint32 Msg,
  ffi.Uint64 wParam,
  ffi.Int64 lParam,
);

typedef _dart_BroadcastSystemMessageW = int Function(
  int flags,
  ffi.Pointer<ffi.Uint64> lpInfo,
  int Msg,
  int wParam,
  int lParam,
);

typedef _c_RegisterDeviceNotificationA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hRecipient,
  ffi.Pointer<ffi.Void> NotificationFilter,
  ffi.Uint64 Flags,
);

typedef _dart_RegisterDeviceNotificationA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hRecipient,
  ffi.Pointer<ffi.Void> NotificationFilter,
  int Flags,
);

typedef _c_RegisterDeviceNotificationW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hRecipient,
  ffi.Pointer<ffi.Void> NotificationFilter,
  ffi.Uint64 Flags,
);

typedef _dart_RegisterDeviceNotificationW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hRecipient,
  ffi.Pointer<ffi.Void> NotificationFilter,
  int Flags,
);

typedef _c_UnregisterDeviceNotification = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> Handle,
);

typedef _dart_UnregisterDeviceNotification = int Function(
  ffi.Pointer<ffi.Void> Handle,
);

typedef _c_RegisterPowerSettingNotification = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hRecipient,
  ffi.Pointer<GUID> PowerSettingGuid,
  ffi.Uint64 Flags,
);

typedef _dart_RegisterPowerSettingNotification = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hRecipient,
  ffi.Pointer<GUID> PowerSettingGuid,
  int Flags,
);

typedef _c_UnregisterPowerSettingNotification = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> Handle,
);

typedef _dart_UnregisterPowerSettingNotification = int Function(
  ffi.Pointer<ffi.Void> Handle,
);

typedef _c_RegisterSuspendResumeNotification = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hRecipient,
  ffi.Uint64 Flags,
);

typedef _dart_RegisterSuspendResumeNotification = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<ffi.Void> hRecipient,
  int Flags,
);

typedef _c_UnregisterSuspendResumeNotification = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> Handle,
);

typedef _dart_UnregisterSuspendResumeNotification = int Function(
  ffi.Pointer<ffi.Void> Handle,
);

typedef _c_PostMessageA = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Uint32 Msg,
  ffi.Uint64 wParam,
  ffi.Int64 lParam,
);

typedef _dart_PostMessageA = int Function(
  ffi.Pointer<HWND__> hWnd,
  int Msg,
  int wParam,
  int lParam,
);

typedef _c_PostMessageW = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Uint32 Msg,
  ffi.Uint64 wParam,
  ffi.Int64 lParam,
);

typedef _dart_PostMessageW = int Function(
  ffi.Pointer<HWND__> hWnd,
  int Msg,
  int wParam,
  int lParam,
);

typedef _c_PostThreadMessageA = ffi.Int32 Function(
  ffi.Uint64 idThread,
  ffi.Uint32 Msg,
  ffi.Uint64 wParam,
  ffi.Int64 lParam,
);

typedef _dart_PostThreadMessageA = int Function(
  int idThread,
  int Msg,
  int wParam,
  int lParam,
);

typedef _c_PostThreadMessageW = ffi.Int32 Function(
  ffi.Uint64 idThread,
  ffi.Uint32 Msg,
  ffi.Uint64 wParam,
  ffi.Int64 lParam,
);

typedef _dart_PostThreadMessageW = int Function(
  int idThread,
  int Msg,
  int wParam,
  int lParam,
);

typedef _c_AttachThreadInput = ffi.Int32 Function(
  ffi.Uint64 idAttach,
  ffi.Uint64 idAttachTo,
  ffi.Int32 fAttach,
);

typedef _dart_AttachThreadInput = int Function(
  int idAttach,
  int idAttachTo,
  int fAttach,
);

typedef _c_ReplyMessage = ffi.Int32 Function(
  ffi.Int64 lResult,
);

typedef _dart_ReplyMessage = int Function(
  int lResult,
);

typedef _c_WaitMessage = ffi.Int32 Function();

typedef _dart_WaitMessage = int Function();

typedef _c_WaitForInputIdle = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Uint64 dwMilliseconds,
);

typedef _dart_WaitForInputIdle = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  int dwMilliseconds,
);

typedef _c_DefWindowProcA = ffi.Int64 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Uint32 Msg,
  ffi.Uint64 wParam,
  ffi.Int64 lParam,
);

typedef _dart_DefWindowProcA = int Function(
  ffi.Pointer<HWND__> hWnd,
  int Msg,
  int wParam,
  int lParam,
);

typedef _c_DefWindowProcW = ffi.Int64 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Uint32 Msg,
  ffi.Uint64 wParam,
  ffi.Int64 lParam,
);

typedef _dart_DefWindowProcW = int Function(
  ffi.Pointer<HWND__> hWnd,
  int Msg,
  int wParam,
  int lParam,
);

typedef _c_PostQuitMessage = ffi.Void Function(
  ffi.Int32 nExitCode,
);

typedef _dart_PostQuitMessage = void Function(
  int nExitCode,
);

typedef WNDPROC = ffi.Int64 Function(
  ffi.Pointer<HWND__>,
  ffi.Uint32,
  ffi.Uint64,
  ffi.Int64,
);

typedef _c_CallWindowProcA = ffi.Int64 Function(
  ffi.Pointer<ffi.NativeFunction<WNDPROC>> lpPrevWndFunc,
  ffi.Pointer<HWND__> hWnd,
  ffi.Uint32 Msg,
  ffi.Uint64 wParam,
  ffi.Int64 lParam,
);

typedef _dart_CallWindowProcA = int Function(
  ffi.Pointer<ffi.NativeFunction<WNDPROC>> lpPrevWndFunc,
  ffi.Pointer<HWND__> hWnd,
  int Msg,
  int wParam,
  int lParam,
);

typedef _c_CallWindowProcW = ffi.Int64 Function(
  ffi.Pointer<ffi.NativeFunction<WNDPROC>> lpPrevWndFunc,
  ffi.Pointer<HWND__> hWnd,
  ffi.Uint32 Msg,
  ffi.Uint64 wParam,
  ffi.Int64 lParam,
);

typedef _dart_CallWindowProcW = int Function(
  ffi.Pointer<ffi.NativeFunction<WNDPROC>> lpPrevWndFunc,
  ffi.Pointer<HWND__> hWnd,
  int Msg,
  int wParam,
  int lParam,
);

typedef _c_InSendMessage = ffi.Int32 Function();

typedef _dart_InSendMessage = int Function();

typedef _c_InSendMessageEx = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> lpReserved,
);

typedef _dart_InSendMessageEx = int Function(
  ffi.Pointer<ffi.Void> lpReserved,
);

typedef _c_GetDoubleClickTime = ffi.Uint32 Function();

typedef _dart_GetDoubleClickTime = int Function();

typedef _c_SetDoubleClickTime = ffi.Int32 Function(
  ffi.Uint32 arg0,
);

typedef _dart_SetDoubleClickTime = int Function(
  int arg0,
);

typedef _c_RegisterClassA = ffi.Uint16 Function(
  ffi.Pointer<LPWNDCLASSA> lpWndClass,
);

typedef _dart_RegisterClassA = int Function(
  ffi.Pointer<LPWNDCLASSA> lpWndClass,
);

typedef _c_RegisterClassW = ffi.Uint16 Function(
  ffi.Pointer<LPWNDCLASSW> lpWndClass,
);

typedef _dart_RegisterClassW = int Function(
  ffi.Pointer<LPWNDCLASSW> lpWndClass,
);

typedef _c_UnregisterClassA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpClassName,
  ffi.Pointer<HINSTANCE__> hInstance,
);

typedef _dart_UnregisterClassA = int Function(
  ffi.Pointer<ffi.Int8> lpClassName,
  ffi.Pointer<HINSTANCE__> hInstance,
);

typedef _c_UnregisterClassW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpClassName,
  ffi.Pointer<HINSTANCE__> hInstance,
);

typedef _dart_UnregisterClassW = int Function(
  ffi.Pointer<ffi.Uint16> lpClassName,
  ffi.Pointer<HINSTANCE__> hInstance,
);

typedef _c_GetClassInfoA = ffi.Int32 Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<ffi.Int8> lpClassName,
  ffi.Pointer<LPWNDCLASSA> lpWndClass,
);

typedef _dart_GetClassInfoA = int Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<ffi.Int8> lpClassName,
  ffi.Pointer<LPWNDCLASSA> lpWndClass,
);

typedef _c_GetClassInfoW = ffi.Int32 Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<ffi.Uint16> lpClassName,
  ffi.Pointer<LPWNDCLASSW> lpWndClass,
);

typedef _dart_GetClassInfoW = int Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<ffi.Uint16> lpClassName,
  ffi.Pointer<LPWNDCLASSW> lpWndClass,
);

typedef _c_RegisterClassExA = ffi.Uint16 Function(
  ffi.Pointer<LPWNDCLASSEXA> arg0,
);

typedef _dart_RegisterClassExA = int Function(
  ffi.Pointer<LPWNDCLASSEXA> arg0,
);

typedef _c_RegisterClassExW = ffi.Uint16 Function(
  ffi.Pointer<LPWNDCLASSEXW> arg0,
);

typedef _dart_RegisterClassExW = int Function(
  ffi.Pointer<LPWNDCLASSEXW> arg0,
);

typedef _c_GetClassInfoExA = ffi.Int32 Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<ffi.Int8> lpszClass,
  ffi.Pointer<LPWNDCLASSEXA> lpwcx,
);

typedef _dart_GetClassInfoExA = int Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<ffi.Int8> lpszClass,
  ffi.Pointer<LPWNDCLASSEXA> lpwcx,
);

typedef _c_GetClassInfoExW = ffi.Int32 Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<ffi.Uint16> lpszClass,
  ffi.Pointer<LPWNDCLASSEXW> lpwcx,
);

typedef _dart_GetClassInfoExW = int Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<ffi.Uint16> lpszClass,
  ffi.Pointer<LPWNDCLASSEXW> lpwcx,
);

typedef _c_CreateWindowExA = ffi.Pointer<HWND__> Function(
  ffi.Uint64 dwExStyle,
  ffi.Pointer<ffi.Int8> lpClassName,
  ffi.Pointer<ffi.Int8> lpWindowName,
  ffi.Uint64 dwStyle,
  ffi.Int32 X,
  ffi.Int32 Y,
  ffi.Int32 nWidth,
  ffi.Int32 nHeight,
  ffi.Pointer<HWND__> hWndParent,
  ffi.Pointer<HMENU__> hMenu,
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<ffi.Void> lpParam,
);

typedef _dart_CreateWindowExA = ffi.Pointer<HWND__> Function(
  int dwExStyle,
  ffi.Pointer<ffi.Int8> lpClassName,
  ffi.Pointer<ffi.Int8> lpWindowName,
  int dwStyle,
  int X,
  int Y,
  int nWidth,
  int nHeight,
  ffi.Pointer<HWND__> hWndParent,
  ffi.Pointer<HMENU__> hMenu,
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<ffi.Void> lpParam,
);

typedef _c_CreateWindowExW = ffi.Pointer<HWND__> Function(
  ffi.Uint64 dwExStyle,
  ffi.Pointer<ffi.Uint16> lpClassName,
  ffi.Pointer<ffi.Uint16> lpWindowName,
  ffi.Uint64 dwStyle,
  ffi.Int32 X,
  ffi.Int32 Y,
  ffi.Int32 nWidth,
  ffi.Int32 nHeight,
  ffi.Pointer<HWND__> hWndParent,
  ffi.Pointer<HMENU__> hMenu,
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<ffi.Void> lpParam,
);

typedef _dart_CreateWindowExW = ffi.Pointer<HWND__> Function(
  int dwExStyle,
  ffi.Pointer<ffi.Uint16> lpClassName,
  ffi.Pointer<ffi.Uint16> lpWindowName,
  int dwStyle,
  int X,
  int Y,
  int nWidth,
  int nHeight,
  ffi.Pointer<HWND__> hWndParent,
  ffi.Pointer<HMENU__> hMenu,
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<ffi.Void> lpParam,
);

typedef _c_IsWindow = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _dart_IsWindow = int Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _c_IsMenu = ffi.Int32 Function(
  ffi.Pointer<HMENU__> hMenu,
);

typedef _dart_IsMenu = int Function(
  ffi.Pointer<HMENU__> hMenu,
);

typedef _c_IsChild = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWndParent,
  ffi.Pointer<HWND__> hWnd,
);

typedef _dart_IsChild = int Function(
  ffi.Pointer<HWND__> hWndParent,
  ffi.Pointer<HWND__> hWnd,
);

typedef _c_DestroyWindow = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _dart_DestroyWindow = int Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _c_ShowWindow = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Int32 nCmdShow,
);

typedef _dart_ShowWindow = int Function(
  ffi.Pointer<HWND__> hWnd,
  int nCmdShow,
);

typedef _c_AnimateWindow = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Uint64 dwTime,
  ffi.Uint64 dwFlags,
);

typedef _dart_AnimateWindow = int Function(
  ffi.Pointer<HWND__> hWnd,
  int dwTime,
  int dwFlags,
);

typedef _c_UpdateLayeredWindow = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<HDC__> hdcDst,
  ffi.Pointer<LPPOINT> pptDst,
  ffi.Pointer<LPSIZE> psize,
  ffi.Pointer<HDC__> hdcSrc,
  ffi.Pointer<LPPOINT> pptSrc,
  ffi.Uint64 crKey,
  ffi.Pointer<PBLENDFUNCTION> pblend,
  ffi.Uint64 dwFlags,
);

typedef _dart_UpdateLayeredWindow = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<HDC__> hdcDst,
  ffi.Pointer<LPPOINT> pptDst,
  ffi.Pointer<LPSIZE> psize,
  ffi.Pointer<HDC__> hdcSrc,
  ffi.Pointer<LPPOINT> pptSrc,
  int crKey,
  ffi.Pointer<PBLENDFUNCTION> pblend,
  int dwFlags,
);

typedef _c_UpdateLayeredWindowIndirect = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<PUPDATELAYEREDWINDOWINFO> pULWInfo,
);

typedef _dart_UpdateLayeredWindowIndirect = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<PUPDATELAYEREDWINDOWINFO> pULWInfo,
);

typedef _c_GetLayeredWindowAttributes = ffi.Int32 Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Pointer<ffi.Uint64> pcrKey,
  ffi.Pointer<ffi.Uint8> pbAlpha,
  ffi.Pointer<ffi.Uint64> pdwFlags,
);

typedef _dart_GetLayeredWindowAttributes = int Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Pointer<ffi.Uint64> pcrKey,
  ffi.Pointer<ffi.Uint8> pbAlpha,
  ffi.Pointer<ffi.Uint64> pdwFlags,
);

typedef _c_PrintWindow = ffi.Int32 Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Pointer<HDC__> hdcBlt,
  ffi.Uint32 nFlags,
);

typedef _dart_PrintWindow = int Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Pointer<HDC__> hdcBlt,
  int nFlags,
);

typedef _c_SetLayeredWindowAttributes = ffi.Int32 Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Uint64 crKey,
  ffi.Uint8 bAlpha,
  ffi.Uint64 dwFlags,
);

typedef _dart_SetLayeredWindowAttributes = int Function(
  ffi.Pointer<HWND__> hwnd,
  int crKey,
  int bAlpha,
  int dwFlags,
);

typedef _c_ShowWindowAsync = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Int32 nCmdShow,
);

typedef _dart_ShowWindowAsync = int Function(
  ffi.Pointer<HWND__> hWnd,
  int nCmdShow,
);

typedef _c_FlashWindow = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Int32 bInvert,
);

typedef _dart_FlashWindow = int Function(
  ffi.Pointer<HWND__> hWnd,
  int bInvert,
);

typedef _c_FlashWindowEx = ffi.Int32 Function(
  ffi.Pointer<PFLASHWINFO> pfwi,
);

typedef _dart_FlashWindowEx = int Function(
  ffi.Pointer<PFLASHWINFO> pfwi,
);

typedef _c_ShowOwnedPopups = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Int32 fShow,
);

typedef _dart_ShowOwnedPopups = int Function(
  ffi.Pointer<HWND__> hWnd,
  int fShow,
);

typedef _c_OpenIcon = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _dart_OpenIcon = int Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _c_CloseWindow = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _dart_CloseWindow = int Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _c_MoveWindow = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Int32 X,
  ffi.Int32 Y,
  ffi.Int32 nWidth,
  ffi.Int32 nHeight,
  ffi.Int32 bRepaint,
);

typedef _dart_MoveWindow = int Function(
  ffi.Pointer<HWND__> hWnd,
  int X,
  int Y,
  int nWidth,
  int nHeight,
  int bRepaint,
);

typedef _c_SetWindowPos = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<HWND__> hWndInsertAfter,
  ffi.Int32 X,
  ffi.Int32 Y,
  ffi.Int32 cx,
  ffi.Int32 cy,
  ffi.Uint32 uFlags,
);

typedef _dart_SetWindowPos = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<HWND__> hWndInsertAfter,
  int X,
  int Y,
  int cx,
  int cy,
  int uFlags,
);

typedef _c_GetWindowPlacement = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<WINDOWPLACEMENT> lpwndpl,
);

typedef _dart_GetWindowPlacement = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<WINDOWPLACEMENT> lpwndpl,
);

typedef _c_SetWindowPlacement = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<WINDOWPLACEMENT> lpwndpl,
);

typedef _dart_SetWindowPlacement = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<WINDOWPLACEMENT> lpwndpl,
);

typedef _c_GetWindowDisplayAffinity = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Uint64> pdwAffinity,
);

typedef _dart_GetWindowDisplayAffinity = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Uint64> pdwAffinity,
);

typedef _c_SetWindowDisplayAffinity = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Uint64 dwAffinity,
);

typedef _dart_SetWindowDisplayAffinity = int Function(
  ffi.Pointer<HWND__> hWnd,
  int dwAffinity,
);

typedef _c_BeginDeferWindowPos = ffi.Pointer<ffi.Void> Function(
  ffi.Int32 nNumWindows,
);

typedef _dart_BeginDeferWindowPos = ffi.Pointer<ffi.Void> Function(
  int nNumWindows,
);

typedef _c_DeferWindowPos = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hWinPosInfo,
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<HWND__> hWndInsertAfter,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Int32 cx,
  ffi.Int32 cy,
  ffi.Uint32 uFlags,
);

typedef _dart_DeferWindowPos = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hWinPosInfo,
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<HWND__> hWndInsertAfter,
  int x,
  int y,
  int cx,
  int cy,
  int uFlags,
);

typedef _c_EndDeferWindowPos = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hWinPosInfo,
);

typedef _dart_EndDeferWindowPos = int Function(
  ffi.Pointer<ffi.Void> hWinPosInfo,
);

typedef _c_IsWindowVisible = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _dart_IsWindowVisible = int Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _c_IsIconic = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _dart_IsIconic = int Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _c_AnyPopup = ffi.Int32 Function();

typedef _dart_AnyPopup = int Function();

typedef _c_BringWindowToTop = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _dart_BringWindowToTop = int Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _c_IsZoomed = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _dart_IsZoomed = int Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef DLGPROC = ffi.Int64 Function(
  ffi.Pointer<HWND__>,
  ffi.Uint32,
  ffi.Uint64,
  ffi.Int64,
);

typedef _c_CreateDialogParamA = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<ffi.Int8> lpTemplateName,
  ffi.Pointer<HWND__> hWndParent,
  ffi.Pointer<ffi.NativeFunction<DLGPROC>> lpDialogFunc,
  ffi.Int64 dwInitParam,
);

typedef _dart_CreateDialogParamA = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<ffi.Int8> lpTemplateName,
  ffi.Pointer<HWND__> hWndParent,
  ffi.Pointer<ffi.NativeFunction<DLGPROC>> lpDialogFunc,
  int dwInitParam,
);

typedef _c_CreateDialogParamW = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<ffi.Uint16> lpTemplateName,
  ffi.Pointer<HWND__> hWndParent,
  ffi.Pointer<ffi.NativeFunction<DLGPROC>> lpDialogFunc,
  ffi.Int64 dwInitParam,
);

typedef _dart_CreateDialogParamW = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<ffi.Uint16> lpTemplateName,
  ffi.Pointer<HWND__> hWndParent,
  ffi.Pointer<ffi.NativeFunction<DLGPROC>> lpDialogFunc,
  int dwInitParam,
);

typedef _c_CreateDialogIndirectParamA = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<DLGTEMPLATE> lpTemplate,
  ffi.Pointer<HWND__> hWndParent,
  ffi.Pointer<ffi.NativeFunction<DLGPROC>> lpDialogFunc,
  ffi.Int64 dwInitParam,
);

typedef _dart_CreateDialogIndirectParamA = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<DLGTEMPLATE> lpTemplate,
  ffi.Pointer<HWND__> hWndParent,
  ffi.Pointer<ffi.NativeFunction<DLGPROC>> lpDialogFunc,
  int dwInitParam,
);

typedef _c_CreateDialogIndirectParamW = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<DLGTEMPLATE> lpTemplate,
  ffi.Pointer<HWND__> hWndParent,
  ffi.Pointer<ffi.NativeFunction<DLGPROC>> lpDialogFunc,
  ffi.Int64 dwInitParam,
);

typedef _dart_CreateDialogIndirectParamW = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<DLGTEMPLATE> lpTemplate,
  ffi.Pointer<HWND__> hWndParent,
  ffi.Pointer<ffi.NativeFunction<DLGPROC>> lpDialogFunc,
  int dwInitParam,
);

typedef _c_DialogBoxParamA = ffi.Int64 Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<ffi.Int8> lpTemplateName,
  ffi.Pointer<HWND__> hWndParent,
  ffi.Pointer<ffi.NativeFunction<DLGPROC>> lpDialogFunc,
  ffi.Int64 dwInitParam,
);

typedef _dart_DialogBoxParamA = int Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<ffi.Int8> lpTemplateName,
  ffi.Pointer<HWND__> hWndParent,
  ffi.Pointer<ffi.NativeFunction<DLGPROC>> lpDialogFunc,
  int dwInitParam,
);

typedef _c_DialogBoxParamW = ffi.Int64 Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<ffi.Uint16> lpTemplateName,
  ffi.Pointer<HWND__> hWndParent,
  ffi.Pointer<ffi.NativeFunction<DLGPROC>> lpDialogFunc,
  ffi.Int64 dwInitParam,
);

typedef _dart_DialogBoxParamW = int Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<ffi.Uint16> lpTemplateName,
  ffi.Pointer<HWND__> hWndParent,
  ffi.Pointer<ffi.NativeFunction<DLGPROC>> lpDialogFunc,
  int dwInitParam,
);

typedef _c_DialogBoxIndirectParamA = ffi.Int64 Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<DLGTEMPLATE> hDialogTemplate,
  ffi.Pointer<HWND__> hWndParent,
  ffi.Pointer<ffi.NativeFunction<DLGPROC>> lpDialogFunc,
  ffi.Int64 dwInitParam,
);

typedef _dart_DialogBoxIndirectParamA = int Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<DLGTEMPLATE> hDialogTemplate,
  ffi.Pointer<HWND__> hWndParent,
  ffi.Pointer<ffi.NativeFunction<DLGPROC>> lpDialogFunc,
  int dwInitParam,
);

typedef _c_DialogBoxIndirectParamW = ffi.Int64 Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<DLGTEMPLATE> hDialogTemplate,
  ffi.Pointer<HWND__> hWndParent,
  ffi.Pointer<ffi.NativeFunction<DLGPROC>> lpDialogFunc,
  ffi.Int64 dwInitParam,
);

typedef _dart_DialogBoxIndirectParamW = int Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<DLGTEMPLATE> hDialogTemplate,
  ffi.Pointer<HWND__> hWndParent,
  ffi.Pointer<ffi.NativeFunction<DLGPROC>> lpDialogFunc,
  int dwInitParam,
);

typedef _c_EndDialog = ffi.Int32 Function(
  ffi.Pointer<HWND__> hDlg,
  ffi.Int64 nResult,
);

typedef _dart_EndDialog = int Function(
  ffi.Pointer<HWND__> hDlg,
  int nResult,
);

typedef _c_GetDlgItem = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HWND__> hDlg,
  ffi.Int32 nIDDlgItem,
);

typedef _dart_GetDlgItem = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HWND__> hDlg,
  int nIDDlgItem,
);

typedef _c_SetDlgItemInt = ffi.Int32 Function(
  ffi.Pointer<HWND__> hDlg,
  ffi.Int32 nIDDlgItem,
  ffi.Uint32 uValue,
  ffi.Int32 bSigned,
);

typedef _dart_SetDlgItemInt = int Function(
  ffi.Pointer<HWND__> hDlg,
  int nIDDlgItem,
  int uValue,
  int bSigned,
);

typedef _c_GetDlgItemInt = ffi.Uint32 Function(
  ffi.Pointer<HWND__> hDlg,
  ffi.Int32 nIDDlgItem,
  ffi.Pointer<ffi.Int32> lpTranslated,
  ffi.Int32 bSigned,
);

typedef _dart_GetDlgItemInt = int Function(
  ffi.Pointer<HWND__> hDlg,
  int nIDDlgItem,
  ffi.Pointer<ffi.Int32> lpTranslated,
  int bSigned,
);

typedef _c_SetDlgItemTextA = ffi.Int32 Function(
  ffi.Pointer<HWND__> hDlg,
  ffi.Int32 nIDDlgItem,
  ffi.Pointer<ffi.Int8> lpString,
);

typedef _dart_SetDlgItemTextA = int Function(
  ffi.Pointer<HWND__> hDlg,
  int nIDDlgItem,
  ffi.Pointer<ffi.Int8> lpString,
);

typedef _c_SetDlgItemTextW = ffi.Int32 Function(
  ffi.Pointer<HWND__> hDlg,
  ffi.Int32 nIDDlgItem,
  ffi.Pointer<ffi.Uint16> lpString,
);

typedef _dart_SetDlgItemTextW = int Function(
  ffi.Pointer<HWND__> hDlg,
  int nIDDlgItem,
  ffi.Pointer<ffi.Uint16> lpString,
);

typedef _c_GetDlgItemTextA = ffi.Uint32 Function(
  ffi.Pointer<HWND__> hDlg,
  ffi.Int32 nIDDlgItem,
  ffi.Pointer<ffi.Int8> lpString,
  ffi.Int32 cchMax,
);

typedef _dart_GetDlgItemTextA = int Function(
  ffi.Pointer<HWND__> hDlg,
  int nIDDlgItem,
  ffi.Pointer<ffi.Int8> lpString,
  int cchMax,
);

typedef _c_GetDlgItemTextW = ffi.Uint32 Function(
  ffi.Pointer<HWND__> hDlg,
  ffi.Int32 nIDDlgItem,
  ffi.Pointer<ffi.Uint16> lpString,
  ffi.Int32 cchMax,
);

typedef _dart_GetDlgItemTextW = int Function(
  ffi.Pointer<HWND__> hDlg,
  int nIDDlgItem,
  ffi.Pointer<ffi.Uint16> lpString,
  int cchMax,
);

typedef _c_CheckDlgButton = ffi.Int32 Function(
  ffi.Pointer<HWND__> hDlg,
  ffi.Int32 nIDButton,
  ffi.Uint32 uCheck,
);

typedef _dart_CheckDlgButton = int Function(
  ffi.Pointer<HWND__> hDlg,
  int nIDButton,
  int uCheck,
);

typedef _c_CheckRadioButton = ffi.Int32 Function(
  ffi.Pointer<HWND__> hDlg,
  ffi.Int32 nIDFirstButton,
  ffi.Int32 nIDLastButton,
  ffi.Int32 nIDCheckButton,
);

typedef _dart_CheckRadioButton = int Function(
  ffi.Pointer<HWND__> hDlg,
  int nIDFirstButton,
  int nIDLastButton,
  int nIDCheckButton,
);

typedef _c_IsDlgButtonChecked = ffi.Uint32 Function(
  ffi.Pointer<HWND__> hDlg,
  ffi.Int32 nIDButton,
);

typedef _dart_IsDlgButtonChecked = int Function(
  ffi.Pointer<HWND__> hDlg,
  int nIDButton,
);

typedef _c_SendDlgItemMessageA = ffi.Int64 Function(
  ffi.Pointer<HWND__> hDlg,
  ffi.Int32 nIDDlgItem,
  ffi.Uint32 Msg,
  ffi.Uint64 wParam,
  ffi.Int64 lParam,
);

typedef _dart_SendDlgItemMessageA = int Function(
  ffi.Pointer<HWND__> hDlg,
  int nIDDlgItem,
  int Msg,
  int wParam,
  int lParam,
);

typedef _c_SendDlgItemMessageW = ffi.Int64 Function(
  ffi.Pointer<HWND__> hDlg,
  ffi.Int32 nIDDlgItem,
  ffi.Uint32 Msg,
  ffi.Uint64 wParam,
  ffi.Int64 lParam,
);

typedef _dart_SendDlgItemMessageW = int Function(
  ffi.Pointer<HWND__> hDlg,
  int nIDDlgItem,
  int Msg,
  int wParam,
  int lParam,
);

typedef _c_GetNextDlgGroupItem = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HWND__> hDlg,
  ffi.Pointer<HWND__> hCtl,
  ffi.Int32 bPrevious,
);

typedef _dart_GetNextDlgGroupItem = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HWND__> hDlg,
  ffi.Pointer<HWND__> hCtl,
  int bPrevious,
);

typedef _c_GetNextDlgTabItem = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HWND__> hDlg,
  ffi.Pointer<HWND__> hCtl,
  ffi.Int32 bPrevious,
);

typedef _dart_GetNextDlgTabItem = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HWND__> hDlg,
  ffi.Pointer<HWND__> hCtl,
  int bPrevious,
);

typedef _c_GetDlgCtrlID = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _dart_GetDlgCtrlID = int Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _c_GetDialogBaseUnits = ffi.Int64 Function();

typedef _dart_GetDialogBaseUnits = int Function();

typedef _c_DefDlgProcA = ffi.Int64 Function(
  ffi.Pointer<HWND__> hDlg,
  ffi.Uint32 Msg,
  ffi.Uint64 wParam,
  ffi.Int64 lParam,
);

typedef _dart_DefDlgProcA = int Function(
  ffi.Pointer<HWND__> hDlg,
  int Msg,
  int wParam,
  int lParam,
);

typedef _c_DefDlgProcW = ffi.Int64 Function(
  ffi.Pointer<HWND__> hDlg,
  ffi.Uint32 Msg,
  ffi.Uint64 wParam,
  ffi.Int64 lParam,
);

typedef _dart_DefDlgProcW = int Function(
  ffi.Pointer<HWND__> hDlg,
  int Msg,
  int wParam,
  int lParam,
);

typedef _c_SetDialogControlDpiChangeBehavior = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Int32 mask,
  ffi.Int32 values,
);

typedef _dart_SetDialogControlDpiChangeBehavior = int Function(
  ffi.Pointer<HWND__> hWnd,
  int mask,
  int values,
);

typedef _c_GetDialogControlDpiChangeBehavior = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _dart_GetDialogControlDpiChangeBehavior = int Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _c_SetDialogDpiChangeBehavior = ffi.Int32 Function(
  ffi.Pointer<HWND__> hDlg,
  ffi.Int32 mask,
  ffi.Int32 values,
);

typedef _dart_SetDialogDpiChangeBehavior = int Function(
  ffi.Pointer<HWND__> hDlg,
  int mask,
  int values,
);

typedef _c_GetDialogDpiChangeBehavior = ffi.Int32 Function(
  ffi.Pointer<HWND__> hDlg,
);

typedef _dart_GetDialogDpiChangeBehavior = int Function(
  ffi.Pointer<HWND__> hDlg,
);

typedef _c_CallMsgFilterA = ffi.Int32 Function(
  ffi.Pointer<LPMSG> lpMsg,
  ffi.Int32 nCode,
);

typedef _dart_CallMsgFilterA = int Function(
  ffi.Pointer<LPMSG> lpMsg,
  int nCode,
);

typedef _c_CallMsgFilterW = ffi.Int32 Function(
  ffi.Pointer<LPMSG> lpMsg,
  ffi.Int32 nCode,
);

typedef _dart_CallMsgFilterW = int Function(
  ffi.Pointer<LPMSG> lpMsg,
  int nCode,
);

typedef _c_OpenClipboard = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWndNewOwner,
);

typedef _dart_OpenClipboard = int Function(
  ffi.Pointer<HWND__> hWndNewOwner,
);

typedef _c_CloseClipboard = ffi.Int32 Function();

typedef _dart_CloseClipboard = int Function();

typedef _c_GetClipboardSequenceNumber = ffi.Uint64 Function();

typedef _dart_GetClipboardSequenceNumber = int Function();

typedef _c_GetClipboardOwner = ffi.Pointer<HWND__> Function();

typedef _dart_GetClipboardOwner = ffi.Pointer<HWND__> Function();

typedef _c_SetClipboardViewer = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HWND__> hWndNewViewer,
);

typedef _dart_SetClipboardViewer = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HWND__> hWndNewViewer,
);

typedef _c_GetClipboardViewer = ffi.Pointer<HWND__> Function();

typedef _dart_GetClipboardViewer = ffi.Pointer<HWND__> Function();

typedef _c_ChangeClipboardChain = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWndRemove,
  ffi.Pointer<HWND__> hWndNewNext,
);

typedef _dart_ChangeClipboardChain = int Function(
  ffi.Pointer<HWND__> hWndRemove,
  ffi.Pointer<HWND__> hWndNewNext,
);

typedef _c_SetClipboardData = ffi.Pointer<ffi.Void> Function(
  ffi.Uint32 uFormat,
  ffi.Pointer<ffi.Void> hMem,
);

typedef _dart_SetClipboardData = ffi.Pointer<ffi.Void> Function(
  int uFormat,
  ffi.Pointer<ffi.Void> hMem,
);

typedef _c_GetClipboardData = ffi.Pointer<ffi.Void> Function(
  ffi.Uint32 uFormat,
);

typedef _dart_GetClipboardData = ffi.Pointer<ffi.Void> Function(
  int uFormat,
);

typedef _c_RegisterClipboardFormatA = ffi.Uint32 Function(
  ffi.Pointer<ffi.Int8> lpszFormat,
);

typedef _dart_RegisterClipboardFormatA = int Function(
  ffi.Pointer<ffi.Int8> lpszFormat,
);

typedef _c_RegisterClipboardFormatW = ffi.Uint32 Function(
  ffi.Pointer<ffi.Uint16> lpszFormat,
);

typedef _dart_RegisterClipboardFormatW = int Function(
  ffi.Pointer<ffi.Uint16> lpszFormat,
);

typedef _c_CountClipboardFormats = ffi.Int32 Function();

typedef _dart_CountClipboardFormats = int Function();

typedef _c_EnumClipboardFormats = ffi.Uint32 Function(
  ffi.Uint32 format,
);

typedef _dart_EnumClipboardFormats = int Function(
  int format,
);

typedef _c_GetClipboardFormatNameA = ffi.Int32 Function(
  ffi.Uint32 format,
  ffi.Pointer<ffi.Int8> lpszFormatName,
  ffi.Int32 cchMaxCount,
);

typedef _dart_GetClipboardFormatNameA = int Function(
  int format,
  ffi.Pointer<ffi.Int8> lpszFormatName,
  int cchMaxCount,
);

typedef _c_GetClipboardFormatNameW = ffi.Int32 Function(
  ffi.Uint32 format,
  ffi.Pointer<ffi.Uint16> lpszFormatName,
  ffi.Int32 cchMaxCount,
);

typedef _dart_GetClipboardFormatNameW = int Function(
  int format,
  ffi.Pointer<ffi.Uint16> lpszFormatName,
  int cchMaxCount,
);

typedef _c_EmptyClipboard = ffi.Int32 Function();

typedef _dart_EmptyClipboard = int Function();

typedef _c_IsClipboardFormatAvailable = ffi.Int32 Function(
  ffi.Uint32 format,
);

typedef _dart_IsClipboardFormatAvailable = int Function(
  int format,
);

typedef _c_GetPriorityClipboardFormat = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint32> paFormatPriorityList,
  ffi.Int32 cFormats,
);

typedef _dart_GetPriorityClipboardFormat = int Function(
  ffi.Pointer<ffi.Uint32> paFormatPriorityList,
  int cFormats,
);

typedef _c_GetOpenClipboardWindow = ffi.Pointer<HWND__> Function();

typedef _dart_GetOpenClipboardWindow = ffi.Pointer<HWND__> Function();

typedef _c_AddClipboardFormatListener = ffi.Int32 Function(
  ffi.Pointer<HWND__> hwnd,
);

typedef _dart_AddClipboardFormatListener = int Function(
  ffi.Pointer<HWND__> hwnd,
);

typedef _c_RemoveClipboardFormatListener = ffi.Int32 Function(
  ffi.Pointer<HWND__> hwnd,
);

typedef _dart_RemoveClipboardFormatListener = int Function(
  ffi.Pointer<HWND__> hwnd,
);

typedef _c_GetUpdatedClipboardFormats = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint32> lpuiFormats,
  ffi.Uint32 cFormats,
  ffi.Pointer<ffi.Uint32> pcFormatsOut,
);

typedef _dart_GetUpdatedClipboardFormats = int Function(
  ffi.Pointer<ffi.Uint32> lpuiFormats,
  int cFormats,
  ffi.Pointer<ffi.Uint32> pcFormatsOut,
);

typedef _c_CharToOemA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> pSrc,
  ffi.Pointer<ffi.Int8> pDst,
);

typedef _dart_CharToOemA = int Function(
  ffi.Pointer<ffi.Int8> pSrc,
  ffi.Pointer<ffi.Int8> pDst,
);

typedef _c_CharToOemW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> pSrc,
  ffi.Pointer<ffi.Int8> pDst,
);

typedef _dart_CharToOemW = int Function(
  ffi.Pointer<ffi.Uint16> pSrc,
  ffi.Pointer<ffi.Int8> pDst,
);

typedef _c_OemToCharA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> pSrc,
  ffi.Pointer<ffi.Int8> pDst,
);

typedef _dart_OemToCharA = int Function(
  ffi.Pointer<ffi.Int8> pSrc,
  ffi.Pointer<ffi.Int8> pDst,
);

typedef _c_OemToCharW = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> pSrc,
  ffi.Pointer<ffi.Uint16> pDst,
);

typedef _dart_OemToCharW = int Function(
  ffi.Pointer<ffi.Int8> pSrc,
  ffi.Pointer<ffi.Uint16> pDst,
);

typedef _c_CharToOemBuffA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpszSrc,
  ffi.Pointer<ffi.Int8> lpszDst,
  ffi.Uint64 cchDstLength,
);

typedef _dart_CharToOemBuffA = int Function(
  ffi.Pointer<ffi.Int8> lpszSrc,
  ffi.Pointer<ffi.Int8> lpszDst,
  int cchDstLength,
);

typedef _c_CharToOemBuffW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpszSrc,
  ffi.Pointer<ffi.Int8> lpszDst,
  ffi.Uint64 cchDstLength,
);

typedef _dart_CharToOemBuffW = int Function(
  ffi.Pointer<ffi.Uint16> lpszSrc,
  ffi.Pointer<ffi.Int8> lpszDst,
  int cchDstLength,
);

typedef _c_OemToCharBuffA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpszSrc,
  ffi.Pointer<ffi.Int8> lpszDst,
  ffi.Uint64 cchDstLength,
);

typedef _dart_OemToCharBuffA = int Function(
  ffi.Pointer<ffi.Int8> lpszSrc,
  ffi.Pointer<ffi.Int8> lpszDst,
  int cchDstLength,
);

typedef _c_OemToCharBuffW = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpszSrc,
  ffi.Pointer<ffi.Uint16> lpszDst,
  ffi.Uint64 cchDstLength,
);

typedef _dart_OemToCharBuffW = int Function(
  ffi.Pointer<ffi.Int8> lpszSrc,
  ffi.Pointer<ffi.Uint16> lpszDst,
  int cchDstLength,
);

typedef _c_CharUpperA = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> lpsz,
);

typedef _dart_CharUpperA = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> lpsz,
);

typedef _c_CharUpperW = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> lpsz,
);

typedef _dart_CharUpperW = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> lpsz,
);

typedef _c_CharUpperBuffA = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> lpsz,
  ffi.Uint64 cchLength,
);

typedef _dart_CharUpperBuffA = int Function(
  ffi.Pointer<ffi.Int8> lpsz,
  int cchLength,
);

typedef _c_CharUpperBuffW = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> lpsz,
  ffi.Uint64 cchLength,
);

typedef _dart_CharUpperBuffW = int Function(
  ffi.Pointer<ffi.Uint16> lpsz,
  int cchLength,
);

typedef _c_CharLowerA = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> lpsz,
);

typedef _dart_CharLowerA = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> lpsz,
);

typedef _c_CharLowerW = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> lpsz,
);

typedef _dart_CharLowerW = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> lpsz,
);

typedef _c_CharLowerBuffA = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> lpsz,
  ffi.Uint64 cchLength,
);

typedef _dart_CharLowerBuffA = int Function(
  ffi.Pointer<ffi.Int8> lpsz,
  int cchLength,
);

typedef _c_CharLowerBuffW = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> lpsz,
  ffi.Uint64 cchLength,
);

typedef _dart_CharLowerBuffW = int Function(
  ffi.Pointer<ffi.Uint16> lpsz,
  int cchLength,
);

typedef _c_CharNextA = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> lpsz,
);

typedef _dart_CharNextA = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> lpsz,
);

typedef _c_CharNextW = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> lpsz,
);

typedef _dart_CharNextW = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> lpsz,
);

typedef _c_CharPrevA = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> lpszStart,
  ffi.Pointer<ffi.Int8> lpszCurrent,
);

typedef _dart_CharPrevA = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> lpszStart,
  ffi.Pointer<ffi.Int8> lpszCurrent,
);

typedef _c_CharPrevW = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> lpszStart,
  ffi.Pointer<ffi.Uint16> lpszCurrent,
);

typedef _dart_CharPrevW = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> lpszStart,
  ffi.Pointer<ffi.Uint16> lpszCurrent,
);

typedef _c_CharNextExA = ffi.Pointer<ffi.Int8> Function(
  ffi.Uint16 CodePage,
  ffi.Pointer<ffi.Int8> lpCurrentChar,
  ffi.Uint64 dwFlags,
);

typedef _dart_CharNextExA = ffi.Pointer<ffi.Int8> Function(
  int CodePage,
  ffi.Pointer<ffi.Int8> lpCurrentChar,
  int dwFlags,
);

typedef _c_CharPrevExA = ffi.Pointer<ffi.Int8> Function(
  ffi.Uint16 CodePage,
  ffi.Pointer<ffi.Int8> lpStart,
  ffi.Pointer<ffi.Int8> lpCurrentChar,
  ffi.Uint64 dwFlags,
);

typedef _dart_CharPrevExA = ffi.Pointer<ffi.Int8> Function(
  int CodePage,
  ffi.Pointer<ffi.Int8> lpStart,
  ffi.Pointer<ffi.Int8> lpCurrentChar,
  int dwFlags,
);

typedef _c_IsCharAlphaA = ffi.Int32 Function(
  ffi.Int8 ch,
);

typedef _dart_IsCharAlphaA = int Function(
  int ch,
);

typedef _c_IsCharAlphaW = ffi.Int32 Function(
  ffi.Uint16 ch,
);

typedef _dart_IsCharAlphaW = int Function(
  int ch,
);

typedef _c_IsCharAlphaNumericA = ffi.Int32 Function(
  ffi.Int8 ch,
);

typedef _dart_IsCharAlphaNumericA = int Function(
  int ch,
);

typedef _c_IsCharAlphaNumericW = ffi.Int32 Function(
  ffi.Uint16 ch,
);

typedef _dart_IsCharAlphaNumericW = int Function(
  int ch,
);

typedef _c_IsCharUpperA = ffi.Int32 Function(
  ffi.Int8 ch,
);

typedef _dart_IsCharUpperA = int Function(
  int ch,
);

typedef _c_IsCharUpperW = ffi.Int32 Function(
  ffi.Uint16 ch,
);

typedef _dart_IsCharUpperW = int Function(
  int ch,
);

typedef _c_IsCharLowerA = ffi.Int32 Function(
  ffi.Int8 ch,
);

typedef _dart_IsCharLowerA = int Function(
  int ch,
);

typedef _c_IsCharLowerW = ffi.Int32 Function(
  ffi.Uint16 ch,
);

typedef _dart_IsCharLowerW = int Function(
  int ch,
);

typedef _c_SetFocus = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _dart_SetFocus = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _c_GetActiveWindow = ffi.Pointer<HWND__> Function();

typedef _dart_GetActiveWindow = ffi.Pointer<HWND__> Function();

typedef _c_GetFocus = ffi.Pointer<HWND__> Function();

typedef _dart_GetFocus = ffi.Pointer<HWND__> Function();

typedef _c_GetKBCodePage = ffi.Uint32 Function();

typedef _dart_GetKBCodePage = int Function();

typedef _c_GetKeyState = ffi.Int16 Function(
  ffi.Int32 nVirtKey,
);

typedef _dart_GetKeyState = int Function(
  int nVirtKey,
);

typedef _c_GetAsyncKeyState = ffi.Int16 Function(
  ffi.Int32 vKey,
);

typedef _dart_GetAsyncKeyState = int Function(
  int vKey,
);

typedef _c_GetKeyboardState = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> lpKeyState,
);

typedef _dart_GetKeyboardState = int Function(
  ffi.Pointer<ffi.Uint8> lpKeyState,
);

typedef _c_SetKeyboardState = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> lpKeyState,
);

typedef _dart_SetKeyboardState = int Function(
  ffi.Pointer<ffi.Uint8> lpKeyState,
);

typedef _c_GetKeyNameTextA = ffi.Int32 Function(
  ffi.Int64 lParam,
  ffi.Pointer<ffi.Int8> lpString,
  ffi.Int32 cchSize,
);

typedef _dart_GetKeyNameTextA = int Function(
  int lParam,
  ffi.Pointer<ffi.Int8> lpString,
  int cchSize,
);

typedef _c_GetKeyNameTextW = ffi.Int32 Function(
  ffi.Int64 lParam,
  ffi.Pointer<ffi.Uint16> lpString,
  ffi.Int32 cchSize,
);

typedef _dart_GetKeyNameTextW = int Function(
  int lParam,
  ffi.Pointer<ffi.Uint16> lpString,
  int cchSize,
);

typedef _c_GetKeyboardType = ffi.Int32 Function(
  ffi.Int32 nTypeFlag,
);

typedef _dart_GetKeyboardType = int Function(
  int nTypeFlag,
);

typedef _c_ToAscii = ffi.Int32 Function(
  ffi.Uint32 uVirtKey,
  ffi.Uint32 uScanCode,
  ffi.Pointer<ffi.Uint8> lpKeyState,
  ffi.Pointer<ffi.Uint16> lpChar,
  ffi.Uint32 uFlags,
);

typedef _dart_ToAscii = int Function(
  int uVirtKey,
  int uScanCode,
  ffi.Pointer<ffi.Uint8> lpKeyState,
  ffi.Pointer<ffi.Uint16> lpChar,
  int uFlags,
);

typedef _c_ToAsciiEx = ffi.Int32 Function(
  ffi.Uint32 uVirtKey,
  ffi.Uint32 uScanCode,
  ffi.Pointer<ffi.Uint8> lpKeyState,
  ffi.Pointer<ffi.Uint16> lpChar,
  ffi.Uint32 uFlags,
  ffi.Pointer<HKL__> dwhkl,
);

typedef _dart_ToAsciiEx = int Function(
  int uVirtKey,
  int uScanCode,
  ffi.Pointer<ffi.Uint8> lpKeyState,
  ffi.Pointer<ffi.Uint16> lpChar,
  int uFlags,
  ffi.Pointer<HKL__> dwhkl,
);

typedef _c_ToUnicode = ffi.Int32 Function(
  ffi.Uint32 wVirtKey,
  ffi.Uint32 wScanCode,
  ffi.Pointer<ffi.Uint8> lpKeyState,
  ffi.Pointer<ffi.Uint16> pwszBuff,
  ffi.Int32 cchBuff,
  ffi.Uint32 wFlags,
);

typedef _dart_ToUnicode = int Function(
  int wVirtKey,
  int wScanCode,
  ffi.Pointer<ffi.Uint8> lpKeyState,
  ffi.Pointer<ffi.Uint16> pwszBuff,
  int cchBuff,
  int wFlags,
);

typedef _c_OemKeyScan = ffi.Uint64 Function(
  ffi.Uint16 wOemChar,
);

typedef _dart_OemKeyScan = int Function(
  int wOemChar,
);

typedef _c_VkKeyScanA = ffi.Int16 Function(
  ffi.Int8 ch,
);

typedef _dart_VkKeyScanA = int Function(
  int ch,
);

typedef _c_VkKeyScanW = ffi.Int16 Function(
  ffi.Uint16 ch,
);

typedef _dart_VkKeyScanW = int Function(
  int ch,
);

typedef _c_VkKeyScanExA = ffi.Int16 Function(
  ffi.Int8 ch,
  ffi.Pointer<HKL__> dwhkl,
);

typedef _dart_VkKeyScanExA = int Function(
  int ch,
  ffi.Pointer<HKL__> dwhkl,
);

typedef _c_VkKeyScanExW = ffi.Int16 Function(
  ffi.Uint16 ch,
  ffi.Pointer<HKL__> dwhkl,
);

typedef _dart_VkKeyScanExW = int Function(
  int ch,
  ffi.Pointer<HKL__> dwhkl,
);

typedef _c_keybd_event = ffi.Void Function(
  ffi.Uint8 bVk,
  ffi.Uint8 bScan,
  ffi.Uint64 dwFlags,
  ffi.Uint64 dwExtraInfo,
);

typedef _dart_keybd_event = void Function(
  int bVk,
  int bScan,
  int dwFlags,
  int dwExtraInfo,
);

typedef _c_mouse_event = ffi.Void Function(
  ffi.Uint64 dwFlags,
  ffi.Uint64 dx,
  ffi.Uint64 dy,
  ffi.Uint64 dwData,
  ffi.Uint64 dwExtraInfo,
);

typedef _dart_mouse_event = void Function(
  int dwFlags,
  int dx,
  int dy,
  int dwData,
  int dwExtraInfo,
);

typedef _c_SendInput = ffi.Uint32 Function(
  ffi.Uint32 cInputs,
  ffi.Pointer<LPINPUT> pInputs,
  ffi.Int32 cbSize,
);

typedef _dart_SendInput = int Function(
  int cInputs,
  ffi.Pointer<LPINPUT> pInputs,
  int cbSize,
);

typedef _c_GetTouchInputInfo = ffi.Int32 Function(
  ffi.Pointer<HTOUCHINPUT__> hTouchInput,
  ffi.Uint32 cInputs,
  ffi.Pointer<PTOUCHINPUT> pInputs,
  ffi.Int32 cbSize,
);

typedef _dart_GetTouchInputInfo = int Function(
  ffi.Pointer<HTOUCHINPUT__> hTouchInput,
  int cInputs,
  ffi.Pointer<PTOUCHINPUT> pInputs,
  int cbSize,
);

typedef _c_CloseTouchInputHandle = ffi.Int32 Function(
  ffi.Pointer<HTOUCHINPUT__> hTouchInput,
);

typedef _dart_CloseTouchInputHandle = int Function(
  ffi.Pointer<HTOUCHINPUT__> hTouchInput,
);

typedef _c_RegisterTouchWindow = ffi.Int32 Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Uint64 ulFlags,
);

typedef _dart_RegisterTouchWindow = int Function(
  ffi.Pointer<HWND__> hwnd,
  int ulFlags,
);

typedef _c_UnregisterTouchWindow = ffi.Int32 Function(
  ffi.Pointer<HWND__> hwnd,
);

typedef _dart_UnregisterTouchWindow = int Function(
  ffi.Pointer<HWND__> hwnd,
);

typedef _c_IsTouchWindow = ffi.Int32 Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Pointer<ffi.Uint64> pulFlags,
);

typedef _dart_IsTouchWindow = int Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Pointer<ffi.Uint64> pulFlags,
);

typedef _c_InitializeTouchInjection = ffi.Int32 Function(
  ffi.Uint32 maxCount,
  ffi.Uint64 dwMode,
);

typedef _dart_InitializeTouchInjection = int Function(
  int maxCount,
  int dwMode,
);

typedef _c_InjectTouchInput = ffi.Int32 Function(
  ffi.Uint32 count,
  ffi.Pointer<POINTER_TOUCH_INFO> contacts,
);

typedef _dart_InjectTouchInput = int Function(
  int count,
  ffi.Pointer<POINTER_TOUCH_INFO> contacts,
);

typedef _c_GetPointerType = ffi.Int32 Function(
  ffi.Uint32 pointerId,
  ffi.Pointer<ffi.Uint64> pointerType,
);

typedef _dart_GetPointerType = int Function(
  int pointerId,
  ffi.Pointer<ffi.Uint64> pointerType,
);

typedef _c_GetPointerCursorId = ffi.Int32 Function(
  ffi.Uint32 pointerId,
  ffi.Pointer<ffi.Uint32> cursorId,
);

typedef _dart_GetPointerCursorId = int Function(
  int pointerId,
  ffi.Pointer<ffi.Uint32> cursorId,
);

typedef _c_GetPointerInfo = ffi.Int32 Function(
  ffi.Uint32 pointerId,
  ffi.Pointer<POINTER_INFO> pointerInfo,
);

typedef _dart_GetPointerInfo = int Function(
  int pointerId,
  ffi.Pointer<POINTER_INFO> pointerInfo,
);

typedef _c_GetPointerInfoHistory = ffi.Int32 Function(
  ffi.Uint32 pointerId,
  ffi.Pointer<ffi.Uint32> entriesCount,
  ffi.Pointer<POINTER_INFO> pointerInfo,
);

typedef _dart_GetPointerInfoHistory = int Function(
  int pointerId,
  ffi.Pointer<ffi.Uint32> entriesCount,
  ffi.Pointer<POINTER_INFO> pointerInfo,
);

typedef _c_GetPointerFrameInfo = ffi.Int32 Function(
  ffi.Uint32 pointerId,
  ffi.Pointer<ffi.Uint32> pointerCount,
  ffi.Pointer<POINTER_INFO> pointerInfo,
);

typedef _dart_GetPointerFrameInfo = int Function(
  int pointerId,
  ffi.Pointer<ffi.Uint32> pointerCount,
  ffi.Pointer<POINTER_INFO> pointerInfo,
);

typedef _c_GetPointerFrameInfoHistory = ffi.Int32 Function(
  ffi.Uint32 pointerId,
  ffi.Pointer<ffi.Uint32> entriesCount,
  ffi.Pointer<ffi.Uint32> pointerCount,
  ffi.Pointer<POINTER_INFO> pointerInfo,
);

typedef _dart_GetPointerFrameInfoHistory = int Function(
  int pointerId,
  ffi.Pointer<ffi.Uint32> entriesCount,
  ffi.Pointer<ffi.Uint32> pointerCount,
  ffi.Pointer<POINTER_INFO> pointerInfo,
);

typedef _c_GetPointerTouchInfo = ffi.Int32 Function(
  ffi.Uint32 pointerId,
  ffi.Pointer<POINTER_TOUCH_INFO> touchInfo,
);

typedef _dart_GetPointerTouchInfo = int Function(
  int pointerId,
  ffi.Pointer<POINTER_TOUCH_INFO> touchInfo,
);

typedef _c_GetPointerTouchInfoHistory = ffi.Int32 Function(
  ffi.Uint32 pointerId,
  ffi.Pointer<ffi.Uint32> entriesCount,
  ffi.Pointer<POINTER_TOUCH_INFO> touchInfo,
);

typedef _dart_GetPointerTouchInfoHistory = int Function(
  int pointerId,
  ffi.Pointer<ffi.Uint32> entriesCount,
  ffi.Pointer<POINTER_TOUCH_INFO> touchInfo,
);

typedef _c_GetPointerFrameTouchInfo = ffi.Int32 Function(
  ffi.Uint32 pointerId,
  ffi.Pointer<ffi.Uint32> pointerCount,
  ffi.Pointer<POINTER_TOUCH_INFO> touchInfo,
);

typedef _dart_GetPointerFrameTouchInfo = int Function(
  int pointerId,
  ffi.Pointer<ffi.Uint32> pointerCount,
  ffi.Pointer<POINTER_TOUCH_INFO> touchInfo,
);

typedef _c_GetPointerFrameTouchInfoHistory = ffi.Int32 Function(
  ffi.Uint32 pointerId,
  ffi.Pointer<ffi.Uint32> entriesCount,
  ffi.Pointer<ffi.Uint32> pointerCount,
  ffi.Pointer<POINTER_TOUCH_INFO> touchInfo,
);

typedef _dart_GetPointerFrameTouchInfoHistory = int Function(
  int pointerId,
  ffi.Pointer<ffi.Uint32> entriesCount,
  ffi.Pointer<ffi.Uint32> pointerCount,
  ffi.Pointer<POINTER_TOUCH_INFO> touchInfo,
);

typedef _c_GetPointerPenInfo = ffi.Int32 Function(
  ffi.Uint32 pointerId,
  ffi.Pointer<POINTER_PEN_INFO> penInfo,
);

typedef _dart_GetPointerPenInfo = int Function(
  int pointerId,
  ffi.Pointer<POINTER_PEN_INFO> penInfo,
);

typedef _c_GetPointerPenInfoHistory = ffi.Int32 Function(
  ffi.Uint32 pointerId,
  ffi.Pointer<ffi.Uint32> entriesCount,
  ffi.Pointer<POINTER_PEN_INFO> penInfo,
);

typedef _dart_GetPointerPenInfoHistory = int Function(
  int pointerId,
  ffi.Pointer<ffi.Uint32> entriesCount,
  ffi.Pointer<POINTER_PEN_INFO> penInfo,
);

typedef _c_GetPointerFramePenInfo = ffi.Int32 Function(
  ffi.Uint32 pointerId,
  ffi.Pointer<ffi.Uint32> pointerCount,
  ffi.Pointer<POINTER_PEN_INFO> penInfo,
);

typedef _dart_GetPointerFramePenInfo = int Function(
  int pointerId,
  ffi.Pointer<ffi.Uint32> pointerCount,
  ffi.Pointer<POINTER_PEN_INFO> penInfo,
);

typedef _c_GetPointerFramePenInfoHistory = ffi.Int32 Function(
  ffi.Uint32 pointerId,
  ffi.Pointer<ffi.Uint32> entriesCount,
  ffi.Pointer<ffi.Uint32> pointerCount,
  ffi.Pointer<POINTER_PEN_INFO> penInfo,
);

typedef _dart_GetPointerFramePenInfoHistory = int Function(
  int pointerId,
  ffi.Pointer<ffi.Uint32> entriesCount,
  ffi.Pointer<ffi.Uint32> pointerCount,
  ffi.Pointer<POINTER_PEN_INFO> penInfo,
);

typedef _c_SkipPointerFrameMessages = ffi.Int32 Function(
  ffi.Uint32 pointerId,
);

typedef _dart_SkipPointerFrameMessages = int Function(
  int pointerId,
);

typedef _c_RegisterPointerInputTarget = ffi.Int32 Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Uint64 pointerType,
);

typedef _dart_RegisterPointerInputTarget = int Function(
  ffi.Pointer<HWND__> hwnd,
  int pointerType,
);

typedef _c_UnregisterPointerInputTarget = ffi.Int32 Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Uint64 pointerType,
);

typedef _dart_UnregisterPointerInputTarget = int Function(
  ffi.Pointer<HWND__> hwnd,
  int pointerType,
);

typedef _c_RegisterPointerInputTargetEx = ffi.Int32 Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Uint64 pointerType,
  ffi.Int32 fObserve,
);

typedef _dart_RegisterPointerInputTargetEx = int Function(
  ffi.Pointer<HWND__> hwnd,
  int pointerType,
  int fObserve,
);

typedef _c_UnregisterPointerInputTargetEx = ffi.Int32 Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Uint64 pointerType,
);

typedef _dart_UnregisterPointerInputTargetEx = int Function(
  ffi.Pointer<HWND__> hwnd,
  int pointerType,
);

typedef _c_CreateSyntheticPointerDevice = ffi.Pointer<HSYNTHETICPOINTERDEVICE__>
    Function(
  ffi.Uint64 pointerType,
  ffi.Uint64 maxCount,
  ffi.Int32 mode,
);

typedef _dart_CreateSyntheticPointerDevice
    = ffi.Pointer<HSYNTHETICPOINTERDEVICE__> Function(
  int pointerType,
  int maxCount,
  int mode,
);

typedef _c_InjectSyntheticPointerInput = ffi.Int32 Function(
  ffi.Pointer<HSYNTHETICPOINTERDEVICE__> device,
  ffi.Pointer<PPOINTER_TYPE_INFO> pointerInfo,
  ffi.Uint32 count,
);

typedef _dart_InjectSyntheticPointerInput = int Function(
  ffi.Pointer<HSYNTHETICPOINTERDEVICE__> device,
  ffi.Pointer<PPOINTER_TYPE_INFO> pointerInfo,
  int count,
);

typedef _c_DestroySyntheticPointerDevice = ffi.Void Function(
  ffi.Pointer<HSYNTHETICPOINTERDEVICE__> device,
);

typedef _dart_DestroySyntheticPointerDevice = void Function(
  ffi.Pointer<HSYNTHETICPOINTERDEVICE__> device,
);

typedef _c_EnableMouseInPointer = ffi.Int32 Function(
  ffi.Int32 fEnable,
);

typedef _dart_EnableMouseInPointer = int Function(
  int fEnable,
);

typedef _c_IsMouseInPointerEnabled = ffi.Int32 Function();

typedef _dart_IsMouseInPointerEnabled = int Function();

typedef _c_EnableMouseInPointerForThread = ffi.Int32 Function();

typedef _dart_EnableMouseInPointerForThread = int Function();

typedef _c_RegisterTouchHitTestingWindow = ffi.Int32 Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Uint64 value,
);

typedef _dart_RegisterTouchHitTestingWindow = int Function(
  ffi.Pointer<HWND__> hwnd,
  int value,
);

typedef _c_EvaluateProximityToRect = ffi.Int32 Function(
  ffi.Pointer<LPRECT> controlBoundingBox,
  ffi.Pointer<PTOUCH_HIT_TESTING_INPUT> pHitTestingInput,
  ffi.Pointer<PTOUCH_HIT_TESTING_PROXIMITY_EVALUATION> pProximityEval,
);

typedef _dart_EvaluateProximityToRect = int Function(
  ffi.Pointer<LPRECT> controlBoundingBox,
  ffi.Pointer<PTOUCH_HIT_TESTING_INPUT> pHitTestingInput,
  ffi.Pointer<PTOUCH_HIT_TESTING_PROXIMITY_EVALUATION> pProximityEval,
);

typedef _c_EvaluateProximityToPolygon = ffi.Int32 Function(
  ffi.Uint32 numVertices,
  ffi.Pointer<LPPOINT> controlPolygon,
  ffi.Pointer<PTOUCH_HIT_TESTING_INPUT> pHitTestingInput,
  ffi.Pointer<PTOUCH_HIT_TESTING_PROXIMITY_EVALUATION> pProximityEval,
);

typedef _dart_EvaluateProximityToPolygon = int Function(
  int numVertices,
  ffi.Pointer<LPPOINT> controlPolygon,
  ffi.Pointer<PTOUCH_HIT_TESTING_INPUT> pHitTestingInput,
  ffi.Pointer<PTOUCH_HIT_TESTING_PROXIMITY_EVALUATION> pProximityEval,
);

typedef _c_PackTouchHitTestingProximityEvaluation = ffi.Int64 Function(
  ffi.Pointer<PTOUCH_HIT_TESTING_INPUT> pHitTestingInput,
  ffi.Pointer<PTOUCH_HIT_TESTING_PROXIMITY_EVALUATION> pProximityEval,
);

typedef _dart_PackTouchHitTestingProximityEvaluation = int Function(
  ffi.Pointer<PTOUCH_HIT_TESTING_INPUT> pHitTestingInput,
  ffi.Pointer<PTOUCH_HIT_TESTING_PROXIMITY_EVALUATION> pProximityEval,
);

typedef _c_GetWindowFeedbackSetting = ffi.Int32 Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Int32 feedback,
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Uint32> pSize,
  ffi.Pointer<ffi.Void> config,
);

typedef _dart_GetWindowFeedbackSetting = int Function(
  ffi.Pointer<HWND__> hwnd,
  int feedback,
  int dwFlags,
  ffi.Pointer<ffi.Uint32> pSize,
  ffi.Pointer<ffi.Void> config,
);

typedef _c_SetWindowFeedbackSetting = ffi.Int32 Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Int32 feedback,
  ffi.Uint64 dwFlags,
  ffi.Uint32 size,
  ffi.Pointer<ffi.Void> configuration,
);

typedef _dart_SetWindowFeedbackSetting = int Function(
  ffi.Pointer<HWND__> hwnd,
  int feedback,
  int dwFlags,
  int size,
  ffi.Pointer<ffi.Void> configuration,
);

typedef _c_GetPointerInputTransform = ffi.Int32 Function(
  ffi.Uint32 pointerId,
  ffi.Uint32 historyCount,
  ffi.Pointer<INPUT_TRANSFORM> inputTransform,
);

typedef _dart_GetPointerInputTransform = int Function(
  int pointerId,
  int historyCount,
  ffi.Pointer<INPUT_TRANSFORM> inputTransform,
);

typedef _c_GetLastInputInfo = ffi.Int32 Function(
  ffi.Pointer<PLASTINPUTINFO> plii,
);

typedef _dart_GetLastInputInfo = int Function(
  ffi.Pointer<PLASTINPUTINFO> plii,
);

typedef _c_MapVirtualKeyA = ffi.Uint32 Function(
  ffi.Uint32 uCode,
  ffi.Uint32 uMapType,
);

typedef _dart_MapVirtualKeyA = int Function(
  int uCode,
  int uMapType,
);

typedef _c_MapVirtualKeyW = ffi.Uint32 Function(
  ffi.Uint32 uCode,
  ffi.Uint32 uMapType,
);

typedef _dart_MapVirtualKeyW = int Function(
  int uCode,
  int uMapType,
);

typedef _c_MapVirtualKeyExA = ffi.Uint32 Function(
  ffi.Uint32 uCode,
  ffi.Uint32 uMapType,
  ffi.Pointer<HKL__> dwhkl,
);

typedef _dart_MapVirtualKeyExA = int Function(
  int uCode,
  int uMapType,
  ffi.Pointer<HKL__> dwhkl,
);

typedef _c_MapVirtualKeyExW = ffi.Uint32 Function(
  ffi.Uint32 uCode,
  ffi.Uint32 uMapType,
  ffi.Pointer<HKL__> dwhkl,
);

typedef _dart_MapVirtualKeyExW = int Function(
  int uCode,
  int uMapType,
  ffi.Pointer<HKL__> dwhkl,
);

typedef _c_GetInputState = ffi.Int32 Function();

typedef _dart_GetInputState = int Function();

typedef _c_GetQueueStatus = ffi.Uint64 Function(
  ffi.Uint32 flags,
);

typedef _dart_GetQueueStatus = int Function(
  int flags,
);

typedef _c_GetCapture = ffi.Pointer<HWND__> Function();

typedef _dart_GetCapture = ffi.Pointer<HWND__> Function();

typedef _c_SetCapture = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _dart_SetCapture = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _c_ReleaseCapture = ffi.Int32 Function();

typedef _dart_ReleaseCapture = int Function();

typedef _c_MsgWaitForMultipleObjects = ffi.Uint64 Function(
  ffi.Uint64 nCount,
  ffi.Pointer<ffi.Pointer<ffi.Void>> pHandles,
  ffi.Int32 fWaitAll,
  ffi.Uint64 dwMilliseconds,
  ffi.Uint64 dwWakeMask,
);

typedef _dart_MsgWaitForMultipleObjects = int Function(
  int nCount,
  ffi.Pointer<ffi.Pointer<ffi.Void>> pHandles,
  int fWaitAll,
  int dwMilliseconds,
  int dwWakeMask,
);

typedef _c_MsgWaitForMultipleObjectsEx = ffi.Uint64 Function(
  ffi.Uint64 nCount,
  ffi.Pointer<ffi.Pointer<ffi.Void>> pHandles,
  ffi.Uint64 dwMilliseconds,
  ffi.Uint64 dwWakeMask,
  ffi.Uint64 dwFlags,
);

typedef _dart_MsgWaitForMultipleObjectsEx = int Function(
  int nCount,
  ffi.Pointer<ffi.Pointer<ffi.Void>> pHandles,
  int dwMilliseconds,
  int dwWakeMask,
  int dwFlags,
);

typedef TIMERPROC = ffi.Void Function(
  ffi.Pointer<HWND__>,
  ffi.Uint32,
  ffi.Uint64,
  ffi.Uint64,
);

typedef _c_SetTimer = ffi.Uint64 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Uint64 nIDEvent,
  ffi.Uint32 uElapse,
  ffi.Pointer<ffi.NativeFunction<TIMERPROC>> lpTimerFunc,
);

typedef _dart_SetTimer = int Function(
  ffi.Pointer<HWND__> hWnd,
  int nIDEvent,
  int uElapse,
  ffi.Pointer<ffi.NativeFunction<TIMERPROC>> lpTimerFunc,
);

typedef _c_SetCoalescableTimer = ffi.Uint64 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Uint64 nIDEvent,
  ffi.Uint32 uElapse,
  ffi.Pointer<ffi.NativeFunction<TIMERPROC>> lpTimerFunc,
  ffi.Uint64 uToleranceDelay,
);

typedef _dart_SetCoalescableTimer = int Function(
  ffi.Pointer<HWND__> hWnd,
  int nIDEvent,
  int uElapse,
  ffi.Pointer<ffi.NativeFunction<TIMERPROC>> lpTimerFunc,
  int uToleranceDelay,
);

typedef _c_KillTimer = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Uint64 uIDEvent,
);

typedef _dart_KillTimer = int Function(
  ffi.Pointer<HWND__> hWnd,
  int uIDEvent,
);

typedef _c_IsWindowUnicode = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _dart_IsWindowUnicode = int Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _c_EnableWindow = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Int32 bEnable,
);

typedef _dart_EnableWindow = int Function(
  ffi.Pointer<HWND__> hWnd,
  int bEnable,
);

typedef _c_IsWindowEnabled = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _dart_IsWindowEnabled = int Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _c_LoadAcceleratorsA = ffi.Pointer<HACCEL__> Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<ffi.Int8> lpTableName,
);

typedef _dart_LoadAcceleratorsA = ffi.Pointer<HACCEL__> Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<ffi.Int8> lpTableName,
);

typedef _c_LoadAcceleratorsW = ffi.Pointer<HACCEL__> Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<ffi.Uint16> lpTableName,
);

typedef _dart_LoadAcceleratorsW = ffi.Pointer<HACCEL__> Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<ffi.Uint16> lpTableName,
);

typedef _c_CreateAcceleratorTableA = ffi.Pointer<HACCEL__> Function(
  ffi.Pointer<LPACCEL> paccel,
  ffi.Int32 cAccel,
);

typedef _dart_CreateAcceleratorTableA = ffi.Pointer<HACCEL__> Function(
  ffi.Pointer<LPACCEL> paccel,
  int cAccel,
);

typedef _c_CreateAcceleratorTableW = ffi.Pointer<HACCEL__> Function(
  ffi.Pointer<LPACCEL> paccel,
  ffi.Int32 cAccel,
);

typedef _dart_CreateAcceleratorTableW = ffi.Pointer<HACCEL__> Function(
  ffi.Pointer<LPACCEL> paccel,
  int cAccel,
);

typedef _c_DestroyAcceleratorTable = ffi.Int32 Function(
  ffi.Pointer<HACCEL__> hAccel,
);

typedef _dart_DestroyAcceleratorTable = int Function(
  ffi.Pointer<HACCEL__> hAccel,
);

typedef _c_CopyAcceleratorTableA = ffi.Int32 Function(
  ffi.Pointer<HACCEL__> hAccelSrc,
  ffi.Pointer<LPACCEL> lpAccelDst,
  ffi.Int32 cAccelEntries,
);

typedef _dart_CopyAcceleratorTableA = int Function(
  ffi.Pointer<HACCEL__> hAccelSrc,
  ffi.Pointer<LPACCEL> lpAccelDst,
  int cAccelEntries,
);

typedef _c_CopyAcceleratorTableW = ffi.Int32 Function(
  ffi.Pointer<HACCEL__> hAccelSrc,
  ffi.Pointer<LPACCEL> lpAccelDst,
  ffi.Int32 cAccelEntries,
);

typedef _dart_CopyAcceleratorTableW = int Function(
  ffi.Pointer<HACCEL__> hAccelSrc,
  ffi.Pointer<LPACCEL> lpAccelDst,
  int cAccelEntries,
);

typedef _c_TranslateAcceleratorA = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<HACCEL__> hAccTable,
  ffi.Pointer<LPMSG> lpMsg,
);

typedef _dart_TranslateAcceleratorA = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<HACCEL__> hAccTable,
  ffi.Pointer<LPMSG> lpMsg,
);

typedef _c_TranslateAcceleratorW = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<HACCEL__> hAccTable,
  ffi.Pointer<LPMSG> lpMsg,
);

typedef _dart_TranslateAcceleratorW = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<HACCEL__> hAccTable,
  ffi.Pointer<LPMSG> lpMsg,
);

typedef _c_GetSystemMetrics = ffi.Int32 Function(
  ffi.Int32 nIndex,
);

typedef _dart_GetSystemMetrics = int Function(
  int nIndex,
);

typedef _c_GetSystemMetricsForDpi = ffi.Int32 Function(
  ffi.Int32 nIndex,
  ffi.Uint32 dpi,
);

typedef _dart_GetSystemMetricsForDpi = int Function(
  int nIndex,
  int dpi,
);

typedef _c_LoadMenuA = ffi.Pointer<HMENU__> Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<ffi.Int8> lpMenuName,
);

typedef _dart_LoadMenuA = ffi.Pointer<HMENU__> Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<ffi.Int8> lpMenuName,
);

typedef _c_LoadMenuW = ffi.Pointer<HMENU__> Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<ffi.Uint16> lpMenuName,
);

typedef _dart_LoadMenuW = ffi.Pointer<HMENU__> Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<ffi.Uint16> lpMenuName,
);

typedef _c_LoadMenuIndirectA = ffi.Pointer<HMENU__> Function(
  ffi.Pointer<ffi.Void> lpMenuTemplate,
);

typedef _dart_LoadMenuIndirectA = ffi.Pointer<HMENU__> Function(
  ffi.Pointer<ffi.Void> lpMenuTemplate,
);

typedef _c_LoadMenuIndirectW = ffi.Pointer<HMENU__> Function(
  ffi.Pointer<ffi.Void> lpMenuTemplate,
);

typedef _dart_LoadMenuIndirectW = ffi.Pointer<HMENU__> Function(
  ffi.Pointer<ffi.Void> lpMenuTemplate,
);

typedef _c_GetMenu = ffi.Pointer<HMENU__> Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _dart_GetMenu = ffi.Pointer<HMENU__> Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _c_SetMenu = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<HMENU__> hMenu,
);

typedef _dart_SetMenu = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<HMENU__> hMenu,
);

typedef _c_ChangeMenuA = ffi.Int32 Function(
  ffi.Pointer<HMENU__> hMenu,
  ffi.Uint32 cmd,
  ffi.Pointer<ffi.Int8> lpszNewItem,
  ffi.Uint32 cmdInsert,
  ffi.Uint32 flags,
);

typedef _dart_ChangeMenuA = int Function(
  ffi.Pointer<HMENU__> hMenu,
  int cmd,
  ffi.Pointer<ffi.Int8> lpszNewItem,
  int cmdInsert,
  int flags,
);

typedef _c_ChangeMenuW = ffi.Int32 Function(
  ffi.Pointer<HMENU__> hMenu,
  ffi.Uint32 cmd,
  ffi.Pointer<ffi.Uint16> lpszNewItem,
  ffi.Uint32 cmdInsert,
  ffi.Uint32 flags,
);

typedef _dart_ChangeMenuW = int Function(
  ffi.Pointer<HMENU__> hMenu,
  int cmd,
  ffi.Pointer<ffi.Uint16> lpszNewItem,
  int cmdInsert,
  int flags,
);

typedef _c_HiliteMenuItem = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<HMENU__> hMenu,
  ffi.Uint32 uIDHiliteItem,
  ffi.Uint32 uHilite,
);

typedef _dart_HiliteMenuItem = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<HMENU__> hMenu,
  int uIDHiliteItem,
  int uHilite,
);

typedef _c_GetMenuStringA = ffi.Int32 Function(
  ffi.Pointer<HMENU__> hMenu,
  ffi.Uint32 uIDItem,
  ffi.Pointer<ffi.Int8> lpString,
  ffi.Int32 cchMax,
  ffi.Uint32 flags,
);

typedef _dart_GetMenuStringA = int Function(
  ffi.Pointer<HMENU__> hMenu,
  int uIDItem,
  ffi.Pointer<ffi.Int8> lpString,
  int cchMax,
  int flags,
);

typedef _c_GetMenuStringW = ffi.Int32 Function(
  ffi.Pointer<HMENU__> hMenu,
  ffi.Uint32 uIDItem,
  ffi.Pointer<ffi.Uint16> lpString,
  ffi.Int32 cchMax,
  ffi.Uint32 flags,
);

typedef _dart_GetMenuStringW = int Function(
  ffi.Pointer<HMENU__> hMenu,
  int uIDItem,
  ffi.Pointer<ffi.Uint16> lpString,
  int cchMax,
  int flags,
);

typedef _c_GetMenuState = ffi.Uint32 Function(
  ffi.Pointer<HMENU__> hMenu,
  ffi.Uint32 uId,
  ffi.Uint32 uFlags,
);

typedef _dart_GetMenuState = int Function(
  ffi.Pointer<HMENU__> hMenu,
  int uId,
  int uFlags,
);

typedef _c_DrawMenuBar = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _dart_DrawMenuBar = int Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _c_GetSystemMenu = ffi.Pointer<HMENU__> Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Int32 bRevert,
);

typedef _dart_GetSystemMenu = ffi.Pointer<HMENU__> Function(
  ffi.Pointer<HWND__> hWnd,
  int bRevert,
);

typedef _c_CreateMenu = ffi.Pointer<HMENU__> Function();

typedef _dart_CreateMenu = ffi.Pointer<HMENU__> Function();

typedef _c_CreatePopupMenu = ffi.Pointer<HMENU__> Function();

typedef _dart_CreatePopupMenu = ffi.Pointer<HMENU__> Function();

typedef _c_DestroyMenu = ffi.Int32 Function(
  ffi.Pointer<HMENU__> hMenu,
);

typedef _dart_DestroyMenu = int Function(
  ffi.Pointer<HMENU__> hMenu,
);

typedef _c_CheckMenuItem = ffi.Uint64 Function(
  ffi.Pointer<HMENU__> hMenu,
  ffi.Uint32 uIDCheckItem,
  ffi.Uint32 uCheck,
);

typedef _dart_CheckMenuItem = int Function(
  ffi.Pointer<HMENU__> hMenu,
  int uIDCheckItem,
  int uCheck,
);

typedef _c_EnableMenuItem = ffi.Int32 Function(
  ffi.Pointer<HMENU__> hMenu,
  ffi.Uint32 uIDEnableItem,
  ffi.Uint32 uEnable,
);

typedef _dart_EnableMenuItem = int Function(
  ffi.Pointer<HMENU__> hMenu,
  int uIDEnableItem,
  int uEnable,
);

typedef _c_GetSubMenu = ffi.Pointer<HMENU__> Function(
  ffi.Pointer<HMENU__> hMenu,
  ffi.Int32 nPos,
);

typedef _dart_GetSubMenu = ffi.Pointer<HMENU__> Function(
  ffi.Pointer<HMENU__> hMenu,
  int nPos,
);

typedef _c_GetMenuItemID = ffi.Uint32 Function(
  ffi.Pointer<HMENU__> hMenu,
  ffi.Int32 nPos,
);

typedef _dart_GetMenuItemID = int Function(
  ffi.Pointer<HMENU__> hMenu,
  int nPos,
);

typedef _c_GetMenuItemCount = ffi.Int32 Function(
  ffi.Pointer<HMENU__> hMenu,
);

typedef _dart_GetMenuItemCount = int Function(
  ffi.Pointer<HMENU__> hMenu,
);

typedef _c_InsertMenuA = ffi.Int32 Function(
  ffi.Pointer<HMENU__> hMenu,
  ffi.Uint32 uPosition,
  ffi.Uint32 uFlags,
  ffi.Uint64 uIDNewItem,
  ffi.Pointer<ffi.Int8> lpNewItem,
);

typedef _dart_InsertMenuA = int Function(
  ffi.Pointer<HMENU__> hMenu,
  int uPosition,
  int uFlags,
  int uIDNewItem,
  ffi.Pointer<ffi.Int8> lpNewItem,
);

typedef _c_InsertMenuW = ffi.Int32 Function(
  ffi.Pointer<HMENU__> hMenu,
  ffi.Uint32 uPosition,
  ffi.Uint32 uFlags,
  ffi.Uint64 uIDNewItem,
  ffi.Pointer<ffi.Uint16> lpNewItem,
);

typedef _dart_InsertMenuW = int Function(
  ffi.Pointer<HMENU__> hMenu,
  int uPosition,
  int uFlags,
  int uIDNewItem,
  ffi.Pointer<ffi.Uint16> lpNewItem,
);

typedef _c_AppendMenuA = ffi.Int32 Function(
  ffi.Pointer<HMENU__> hMenu,
  ffi.Uint32 uFlags,
  ffi.Uint64 uIDNewItem,
  ffi.Pointer<ffi.Int8> lpNewItem,
);

typedef _dart_AppendMenuA = int Function(
  ffi.Pointer<HMENU__> hMenu,
  int uFlags,
  int uIDNewItem,
  ffi.Pointer<ffi.Int8> lpNewItem,
);

typedef _c_AppendMenuW = ffi.Int32 Function(
  ffi.Pointer<HMENU__> hMenu,
  ffi.Uint32 uFlags,
  ffi.Uint64 uIDNewItem,
  ffi.Pointer<ffi.Uint16> lpNewItem,
);

typedef _dart_AppendMenuW = int Function(
  ffi.Pointer<HMENU__> hMenu,
  int uFlags,
  int uIDNewItem,
  ffi.Pointer<ffi.Uint16> lpNewItem,
);

typedef _c_ModifyMenuA = ffi.Int32 Function(
  ffi.Pointer<HMENU__> hMnu,
  ffi.Uint32 uPosition,
  ffi.Uint32 uFlags,
  ffi.Uint64 uIDNewItem,
  ffi.Pointer<ffi.Int8> lpNewItem,
);

typedef _dart_ModifyMenuA = int Function(
  ffi.Pointer<HMENU__> hMnu,
  int uPosition,
  int uFlags,
  int uIDNewItem,
  ffi.Pointer<ffi.Int8> lpNewItem,
);

typedef _c_ModifyMenuW = ffi.Int32 Function(
  ffi.Pointer<HMENU__> hMnu,
  ffi.Uint32 uPosition,
  ffi.Uint32 uFlags,
  ffi.Uint64 uIDNewItem,
  ffi.Pointer<ffi.Uint16> lpNewItem,
);

typedef _dart_ModifyMenuW = int Function(
  ffi.Pointer<HMENU__> hMnu,
  int uPosition,
  int uFlags,
  int uIDNewItem,
  ffi.Pointer<ffi.Uint16> lpNewItem,
);

typedef _c_RemoveMenu = ffi.Int32 Function(
  ffi.Pointer<HMENU__> hMenu,
  ffi.Uint32 uPosition,
  ffi.Uint32 uFlags,
);

typedef _dart_RemoveMenu = int Function(
  ffi.Pointer<HMENU__> hMenu,
  int uPosition,
  int uFlags,
);

typedef _c_DeleteMenu = ffi.Int32 Function(
  ffi.Pointer<HMENU__> hMenu,
  ffi.Uint32 uPosition,
  ffi.Uint32 uFlags,
);

typedef _dart_DeleteMenu = int Function(
  ffi.Pointer<HMENU__> hMenu,
  int uPosition,
  int uFlags,
);

typedef _c_SetMenuItemBitmaps = ffi.Int32 Function(
  ffi.Pointer<HMENU__> hMenu,
  ffi.Uint32 uPosition,
  ffi.Uint32 uFlags,
  ffi.Pointer<HBITMAP__> hBitmapUnchecked,
  ffi.Pointer<HBITMAP__> hBitmapChecked,
);

typedef _dart_SetMenuItemBitmaps = int Function(
  ffi.Pointer<HMENU__> hMenu,
  int uPosition,
  int uFlags,
  ffi.Pointer<HBITMAP__> hBitmapUnchecked,
  ffi.Pointer<HBITMAP__> hBitmapChecked,
);

typedef _c_GetMenuCheckMarkDimensions = ffi.Int64 Function();

typedef _dart_GetMenuCheckMarkDimensions = int Function();

typedef _c_TrackPopupMenu = ffi.Int32 Function(
  ffi.Pointer<HMENU__> hMenu,
  ffi.Uint32 uFlags,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Int32 nReserved,
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<LPRECT> prcRect,
);

typedef _dart_TrackPopupMenu = int Function(
  ffi.Pointer<HMENU__> hMenu,
  int uFlags,
  int x,
  int y,
  int nReserved,
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<LPRECT> prcRect,
);

typedef _c_TrackPopupMenuEx = ffi.Int32 Function(
  ffi.Pointer<HMENU__> hMenu,
  ffi.Uint32 uFlags,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Pointer<HWND__> hwnd,
  ffi.Pointer<TPMPARAMS> lptpm,
);

typedef _dart_TrackPopupMenuEx = int Function(
  ffi.Pointer<HMENU__> hMenu,
  int uFlags,
  int x,
  int y,
  ffi.Pointer<HWND__> hwnd,
  ffi.Pointer<TPMPARAMS> lptpm,
);

typedef _c_CalculatePopupWindowPosition = ffi.Int32 Function(
  ffi.Pointer<LPPOINT> anchorPoint,
  ffi.Pointer<LPSIZE> windowSize,
  ffi.Uint32 flags,
  ffi.Pointer<LPRECT> excludeRect,
  ffi.Pointer<LPRECT> popupWindowPosition,
);

typedef _dart_CalculatePopupWindowPosition = int Function(
  ffi.Pointer<LPPOINT> anchorPoint,
  ffi.Pointer<LPSIZE> windowSize,
  int flags,
  ffi.Pointer<LPRECT> excludeRect,
  ffi.Pointer<LPRECT> popupWindowPosition,
);

typedef _c_GetMenuInfo = ffi.Int32 Function(
  ffi.Pointer<HMENU__> arg0,
  ffi.Pointer<LPMENUINFO> arg1,
);

typedef _dart_GetMenuInfo = int Function(
  ffi.Pointer<HMENU__> arg0,
  ffi.Pointer<LPMENUINFO> arg1,
);

typedef _c_SetMenuInfo = ffi.Int32 Function(
  ffi.Pointer<HMENU__> arg0,
  ffi.Pointer<LPMENUINFO> arg1,
);

typedef _dart_SetMenuInfo = int Function(
  ffi.Pointer<HMENU__> arg0,
  ffi.Pointer<LPMENUINFO> arg1,
);

typedef _c_EndMenu = ffi.Int32 Function();

typedef _dart_EndMenu = int Function();

typedef _c_InsertMenuItemA = ffi.Int32 Function(
  ffi.Pointer<HMENU__> hmenu,
  ffi.Uint32 item,
  ffi.Int32 fByPosition,
  ffi.Pointer<LPMENUITEMINFOA> lpmi,
);

typedef _dart_InsertMenuItemA = int Function(
  ffi.Pointer<HMENU__> hmenu,
  int item,
  int fByPosition,
  ffi.Pointer<LPMENUITEMINFOA> lpmi,
);

typedef _c_InsertMenuItemW = ffi.Int32 Function(
  ffi.Pointer<HMENU__> hmenu,
  ffi.Uint32 item,
  ffi.Int32 fByPosition,
  ffi.Pointer<LPMENUITEMINFOW> lpmi,
);

typedef _dart_InsertMenuItemW = int Function(
  ffi.Pointer<HMENU__> hmenu,
  int item,
  int fByPosition,
  ffi.Pointer<LPMENUITEMINFOW> lpmi,
);

typedef _c_GetMenuItemInfoA = ffi.Int32 Function(
  ffi.Pointer<HMENU__> hmenu,
  ffi.Uint32 item,
  ffi.Int32 fByPosition,
  ffi.Pointer<LPMENUITEMINFOA> lpmii,
);

typedef _dart_GetMenuItemInfoA = int Function(
  ffi.Pointer<HMENU__> hmenu,
  int item,
  int fByPosition,
  ffi.Pointer<LPMENUITEMINFOA> lpmii,
);

typedef _c_GetMenuItemInfoW = ffi.Int32 Function(
  ffi.Pointer<HMENU__> hmenu,
  ffi.Uint32 item,
  ffi.Int32 fByPosition,
  ffi.Pointer<LPMENUITEMINFOW> lpmii,
);

typedef _dart_GetMenuItemInfoW = int Function(
  ffi.Pointer<HMENU__> hmenu,
  int item,
  int fByPosition,
  ffi.Pointer<LPMENUITEMINFOW> lpmii,
);

typedef _c_SetMenuItemInfoA = ffi.Int32 Function(
  ffi.Pointer<HMENU__> hmenu,
  ffi.Uint32 item,
  ffi.Int32 fByPositon,
  ffi.Pointer<LPMENUITEMINFOA> lpmii,
);

typedef _dart_SetMenuItemInfoA = int Function(
  ffi.Pointer<HMENU__> hmenu,
  int item,
  int fByPositon,
  ffi.Pointer<LPMENUITEMINFOA> lpmii,
);

typedef _c_SetMenuItemInfoW = ffi.Int32 Function(
  ffi.Pointer<HMENU__> hmenu,
  ffi.Uint32 item,
  ffi.Int32 fByPositon,
  ffi.Pointer<LPMENUITEMINFOW> lpmii,
);

typedef _dart_SetMenuItemInfoW = int Function(
  ffi.Pointer<HMENU__> hmenu,
  int item,
  int fByPositon,
  ffi.Pointer<LPMENUITEMINFOW> lpmii,
);

typedef _c_GetMenuDefaultItem = ffi.Uint32 Function(
  ffi.Pointer<HMENU__> hMenu,
  ffi.Uint32 fByPos,
  ffi.Uint32 gmdiFlags,
);

typedef _dart_GetMenuDefaultItem = int Function(
  ffi.Pointer<HMENU__> hMenu,
  int fByPos,
  int gmdiFlags,
);

typedef _c_SetMenuDefaultItem = ffi.Int32 Function(
  ffi.Pointer<HMENU__> hMenu,
  ffi.Uint32 uItem,
  ffi.Uint32 fByPos,
);

typedef _dart_SetMenuDefaultItem = int Function(
  ffi.Pointer<HMENU__> hMenu,
  int uItem,
  int fByPos,
);

typedef _c_GetMenuItemRect = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<HMENU__> hMenu,
  ffi.Uint32 uItem,
  ffi.Pointer<LPRECT> lprcItem,
);

typedef _dart_GetMenuItemRect = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<HMENU__> hMenu,
  int uItem,
  ffi.Pointer<LPRECT> lprcItem,
);

typedef _c_DragObject = ffi.Uint64 Function(
  ffi.Pointer<HWND__> hwndParent,
  ffi.Pointer<HWND__> hwndFrom,
  ffi.Uint32 fmt,
  ffi.Uint64 data,
  ffi.Pointer<HICON__> hcur,
);

typedef _dart_DragObject = int Function(
  ffi.Pointer<HWND__> hwndParent,
  ffi.Pointer<HWND__> hwndFrom,
  int fmt,
  int data,
  ffi.Pointer<HICON__> hcur,
);

typedef _c_DrawIcon = ffi.Int32 Function(
  ffi.Pointer<HDC__> hDC,
  ffi.Int32 X,
  ffi.Int32 Y,
  ffi.Pointer<HICON__> hIcon,
);

typedef _dart_DrawIcon = int Function(
  ffi.Pointer<HDC__> hDC,
  int X,
  int Y,
  ffi.Pointer<HICON__> hIcon,
);

typedef _c_DrawTextA = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Int8> lpchText,
  ffi.Int32 cchText,
  ffi.Pointer<LPRECT> lprc,
  ffi.Uint32 format,
);

typedef _dart_DrawTextA = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Int8> lpchText,
  int cchText,
  ffi.Pointer<LPRECT> lprc,
  int format,
);

typedef _c_DrawTextW = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Uint16> lpchText,
  ffi.Int32 cchText,
  ffi.Pointer<LPRECT> lprc,
  ffi.Uint32 format,
);

typedef _dart_DrawTextW = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Uint16> lpchText,
  int cchText,
  ffi.Pointer<LPRECT> lprc,
  int format,
);

typedef _c_DrawTextExA = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Int8> lpchText,
  ffi.Int32 cchText,
  ffi.Pointer<LPRECT> lprc,
  ffi.Uint32 format,
  ffi.Pointer<LPDRAWTEXTPARAMS> lpdtp,
);

typedef _dart_DrawTextExA = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Int8> lpchText,
  int cchText,
  ffi.Pointer<LPRECT> lprc,
  int format,
  ffi.Pointer<LPDRAWTEXTPARAMS> lpdtp,
);

typedef _c_DrawTextExW = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Uint16> lpchText,
  ffi.Int32 cchText,
  ffi.Pointer<LPRECT> lprc,
  ffi.Uint32 format,
  ffi.Pointer<LPDRAWTEXTPARAMS> lpdtp,
);

typedef _dart_DrawTextExW = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Uint16> lpchText,
  int cchText,
  ffi.Pointer<LPRECT> lprc,
  int format,
  ffi.Pointer<LPDRAWTEXTPARAMS> lpdtp,
);

typedef GRAYSTRINGPROC = ffi.Int32 Function(
  ffi.Pointer<HDC__>,
  ffi.Int64,
  ffi.Int32,
);

typedef _c_GrayStringA = ffi.Int32 Function(
  ffi.Pointer<HDC__> hDC,
  ffi.Pointer<HBRUSH__> hBrush,
  ffi.Pointer<ffi.NativeFunction<GRAYSTRINGPROC>> lpOutputFunc,
  ffi.Int64 lpData,
  ffi.Int32 nCount,
  ffi.Int32 X,
  ffi.Int32 Y,
  ffi.Int32 nWidth,
  ffi.Int32 nHeight,
);

typedef _dart_GrayStringA = int Function(
  ffi.Pointer<HDC__> hDC,
  ffi.Pointer<HBRUSH__> hBrush,
  ffi.Pointer<ffi.NativeFunction<GRAYSTRINGPROC>> lpOutputFunc,
  int lpData,
  int nCount,
  int X,
  int Y,
  int nWidth,
  int nHeight,
);

typedef _c_GrayStringW = ffi.Int32 Function(
  ffi.Pointer<HDC__> hDC,
  ffi.Pointer<HBRUSH__> hBrush,
  ffi.Pointer<ffi.NativeFunction<GRAYSTRINGPROC>> lpOutputFunc,
  ffi.Int64 lpData,
  ffi.Int32 nCount,
  ffi.Int32 X,
  ffi.Int32 Y,
  ffi.Int32 nWidth,
  ffi.Int32 nHeight,
);

typedef _dart_GrayStringW = int Function(
  ffi.Pointer<HDC__> hDC,
  ffi.Pointer<HBRUSH__> hBrush,
  ffi.Pointer<ffi.NativeFunction<GRAYSTRINGPROC>> lpOutputFunc,
  int lpData,
  int nCount,
  int X,
  int Y,
  int nWidth,
  int nHeight,
);

typedef DRAWSTATEPROC = ffi.Int32 Function(
  ffi.Pointer<HDC__>,
  ffi.Int64,
  ffi.Uint64,
  ffi.Int32,
  ffi.Int32,
);

typedef _c_DrawStateA = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HBRUSH__> hbrFore,
  ffi.Pointer<ffi.NativeFunction<DRAWSTATEPROC>> qfnCallBack,
  ffi.Int64 lData,
  ffi.Uint64 wData,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Int32 cx,
  ffi.Int32 cy,
  ffi.Uint32 uFlags,
);

typedef _dart_DrawStateA = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HBRUSH__> hbrFore,
  ffi.Pointer<ffi.NativeFunction<DRAWSTATEPROC>> qfnCallBack,
  int lData,
  int wData,
  int x,
  int y,
  int cx,
  int cy,
  int uFlags,
);

typedef _c_DrawStateW = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HBRUSH__> hbrFore,
  ffi.Pointer<ffi.NativeFunction<DRAWSTATEPROC>> qfnCallBack,
  ffi.Int64 lData,
  ffi.Uint64 wData,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Int32 cx,
  ffi.Int32 cy,
  ffi.Uint32 uFlags,
);

typedef _dart_DrawStateW = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<HBRUSH__> hbrFore,
  ffi.Pointer<ffi.NativeFunction<DRAWSTATEPROC>> qfnCallBack,
  int lData,
  int wData,
  int x,
  int y,
  int cx,
  int cy,
  int uFlags,
);

typedef _c_TabbedTextOutA = ffi.Int64 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Pointer<ffi.Int8> lpString,
  ffi.Int32 chCount,
  ffi.Int32 nTabPositions,
  ffi.Pointer<ffi.Int32> lpnTabStopPositions,
  ffi.Int32 nTabOrigin,
);

typedef _dart_TabbedTextOutA = int Function(
  ffi.Pointer<HDC__> hdc,
  int x,
  int y,
  ffi.Pointer<ffi.Int8> lpString,
  int chCount,
  int nTabPositions,
  ffi.Pointer<ffi.Int32> lpnTabStopPositions,
  int nTabOrigin,
);

typedef _c_TabbedTextOutW = ffi.Int64 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Pointer<ffi.Uint16> lpString,
  ffi.Int32 chCount,
  ffi.Int32 nTabPositions,
  ffi.Pointer<ffi.Int32> lpnTabStopPositions,
  ffi.Int32 nTabOrigin,
);

typedef _dart_TabbedTextOutW = int Function(
  ffi.Pointer<HDC__> hdc,
  int x,
  int y,
  ffi.Pointer<ffi.Uint16> lpString,
  int chCount,
  int nTabPositions,
  ffi.Pointer<ffi.Int32> lpnTabStopPositions,
  int nTabOrigin,
);

typedef _c_GetTabbedTextExtentA = ffi.Uint64 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Int8> lpString,
  ffi.Int32 chCount,
  ffi.Int32 nTabPositions,
  ffi.Pointer<ffi.Int32> lpnTabStopPositions,
);

typedef _dart_GetTabbedTextExtentA = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Int8> lpString,
  int chCount,
  int nTabPositions,
  ffi.Pointer<ffi.Int32> lpnTabStopPositions,
);

typedef _c_GetTabbedTextExtentW = ffi.Uint64 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Uint16> lpString,
  ffi.Int32 chCount,
  ffi.Int32 nTabPositions,
  ffi.Pointer<ffi.Int32> lpnTabStopPositions,
);

typedef _dart_GetTabbedTextExtentW = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<ffi.Uint16> lpString,
  int chCount,
  int nTabPositions,
  ffi.Pointer<ffi.Int32> lpnTabStopPositions,
);

typedef _c_UpdateWindow = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _dart_UpdateWindow = int Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _c_SetActiveWindow = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _dart_SetActiveWindow = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _c_GetForegroundWindow = ffi.Pointer<HWND__> Function();

typedef _dart_GetForegroundWindow = ffi.Pointer<HWND__> Function();

typedef _c_PaintDesktop = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _dart_PaintDesktop = int Function(
  ffi.Pointer<HDC__> hdc,
);

typedef _c_SwitchToThisWindow = ffi.Void Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Int32 fUnknown,
);

typedef _dart_SwitchToThisWindow = void Function(
  ffi.Pointer<HWND__> hwnd,
  int fUnknown,
);

typedef _c_SetForegroundWindow = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _dart_SetForegroundWindow = int Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _c_AllowSetForegroundWindow = ffi.Int32 Function(
  ffi.Uint64 dwProcessId,
);

typedef _dart_AllowSetForegroundWindow = int Function(
  int dwProcessId,
);

typedef _c_LockSetForegroundWindow = ffi.Int32 Function(
  ffi.Uint32 uLockCode,
);

typedef _dart_LockSetForegroundWindow = int Function(
  int uLockCode,
);

typedef _c_WindowFromDC = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HDC__> hDC,
);

typedef _dart_WindowFromDC = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HDC__> hDC,
);

typedef _c_GetDC = ffi.Pointer<HDC__> Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _dart_GetDC = ffi.Pointer<HDC__> Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _c_GetDCEx = ffi.Pointer<HDC__> Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<HRGN__> hrgnClip,
  ffi.Uint64 flags,
);

typedef _dart_GetDCEx = ffi.Pointer<HDC__> Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<HRGN__> hrgnClip,
  int flags,
);

typedef _c_GetWindowDC = ffi.Pointer<HDC__> Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _dart_GetWindowDC = ffi.Pointer<HDC__> Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _c_ReleaseDC = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<HDC__> hDC,
);

typedef _dart_ReleaseDC = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<HDC__> hDC,
);

typedef _c_BeginPaint = ffi.Pointer<HDC__> Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<LPPAINTSTRUCT> lpPaint,
);

typedef _dart_BeginPaint = ffi.Pointer<HDC__> Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<LPPAINTSTRUCT> lpPaint,
);

typedef _c_EndPaint = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<LPPAINTSTRUCT> lpPaint,
);

typedef _dart_EndPaint = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<LPPAINTSTRUCT> lpPaint,
);

typedef _c_GetUpdateRect = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<LPRECT> lpRect,
  ffi.Int32 bErase,
);

typedef _dart_GetUpdateRect = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<LPRECT> lpRect,
  int bErase,
);

typedef _c_GetUpdateRgn = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<HRGN__> hRgn,
  ffi.Int32 bErase,
);

typedef _dart_GetUpdateRgn = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<HRGN__> hRgn,
  int bErase,
);

typedef _c_SetWindowRgn = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<HRGN__> hRgn,
  ffi.Int32 bRedraw,
);

typedef _dart_SetWindowRgn = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<HRGN__> hRgn,
  int bRedraw,
);

typedef _c_GetWindowRgn = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<HRGN__> hRgn,
);

typedef _dart_GetWindowRgn = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<HRGN__> hRgn,
);

typedef _c_GetWindowRgnBox = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<LPRECT> lprc,
);

typedef _dart_GetWindowRgnBox = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<LPRECT> lprc,
);

typedef _c_ExcludeUpdateRgn = ffi.Int32 Function(
  ffi.Pointer<HDC__> hDC,
  ffi.Pointer<HWND__> hWnd,
);

typedef _dart_ExcludeUpdateRgn = int Function(
  ffi.Pointer<HDC__> hDC,
  ffi.Pointer<HWND__> hWnd,
);

typedef _c_InvalidateRect = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<LPRECT> lpRect,
  ffi.Int32 bErase,
);

typedef _dart_InvalidateRect = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<LPRECT> lpRect,
  int bErase,
);

typedef _c_ValidateRect = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<LPRECT> lpRect,
);

typedef _dart_ValidateRect = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<LPRECT> lpRect,
);

typedef _c_InvalidateRgn = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<HRGN__> hRgn,
  ffi.Int32 bErase,
);

typedef _dart_InvalidateRgn = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<HRGN__> hRgn,
  int bErase,
);

typedef _c_ValidateRgn = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<HRGN__> hRgn,
);

typedef _dart_ValidateRgn = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<HRGN__> hRgn,
);

typedef _c_RedrawWindow = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<LPRECT> lprcUpdate,
  ffi.Pointer<HRGN__> hrgnUpdate,
  ffi.Uint32 flags,
);

typedef _dart_RedrawWindow = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<LPRECT> lprcUpdate,
  ffi.Pointer<HRGN__> hrgnUpdate,
  int flags,
);

typedef _c_LockWindowUpdate = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWndLock,
);

typedef _dart_LockWindowUpdate = int Function(
  ffi.Pointer<HWND__> hWndLock,
);

typedef _c_ScrollWindow = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Int32 XAmount,
  ffi.Int32 YAmount,
  ffi.Pointer<LPRECT> lpRect,
  ffi.Pointer<LPRECT> lpClipRect,
);

typedef _dart_ScrollWindow = int Function(
  ffi.Pointer<HWND__> hWnd,
  int XAmount,
  int YAmount,
  ffi.Pointer<LPRECT> lpRect,
  ffi.Pointer<LPRECT> lpClipRect,
);

typedef _c_ScrollDC = ffi.Int32 Function(
  ffi.Pointer<HDC__> hDC,
  ffi.Int32 dx,
  ffi.Int32 dy,
  ffi.Pointer<LPRECT> lprcScroll,
  ffi.Pointer<LPRECT> lprcClip,
  ffi.Pointer<HRGN__> hrgnUpdate,
  ffi.Pointer<LPRECT> lprcUpdate,
);

typedef _dart_ScrollDC = int Function(
  ffi.Pointer<HDC__> hDC,
  int dx,
  int dy,
  ffi.Pointer<LPRECT> lprcScroll,
  ffi.Pointer<LPRECT> lprcClip,
  ffi.Pointer<HRGN__> hrgnUpdate,
  ffi.Pointer<LPRECT> lprcUpdate,
);

typedef _c_ScrollWindowEx = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Int32 dx,
  ffi.Int32 dy,
  ffi.Pointer<LPRECT> prcScroll,
  ffi.Pointer<LPRECT> prcClip,
  ffi.Pointer<HRGN__> hrgnUpdate,
  ffi.Pointer<LPRECT> prcUpdate,
  ffi.Uint32 flags,
);

typedef _dart_ScrollWindowEx = int Function(
  ffi.Pointer<HWND__> hWnd,
  int dx,
  int dy,
  ffi.Pointer<LPRECT> prcScroll,
  ffi.Pointer<LPRECT> prcClip,
  ffi.Pointer<HRGN__> hrgnUpdate,
  ffi.Pointer<LPRECT> prcUpdate,
  int flags,
);

typedef _c_SetScrollPos = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Int32 nBar,
  ffi.Int32 nPos,
  ffi.Int32 bRedraw,
);

typedef _dart_SetScrollPos = int Function(
  ffi.Pointer<HWND__> hWnd,
  int nBar,
  int nPos,
  int bRedraw,
);

typedef _c_GetScrollPos = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Int32 nBar,
);

typedef _dart_GetScrollPos = int Function(
  ffi.Pointer<HWND__> hWnd,
  int nBar,
);

typedef _c_SetScrollRange = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Int32 nBar,
  ffi.Int32 nMinPos,
  ffi.Int32 nMaxPos,
  ffi.Int32 bRedraw,
);

typedef _dart_SetScrollRange = int Function(
  ffi.Pointer<HWND__> hWnd,
  int nBar,
  int nMinPos,
  int nMaxPos,
  int bRedraw,
);

typedef _c_GetScrollRange = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Int32 nBar,
  ffi.Pointer<ffi.Int32> lpMinPos,
  ffi.Pointer<ffi.Int32> lpMaxPos,
);

typedef _dart_GetScrollRange = int Function(
  ffi.Pointer<HWND__> hWnd,
  int nBar,
  ffi.Pointer<ffi.Int32> lpMinPos,
  ffi.Pointer<ffi.Int32> lpMaxPos,
);

typedef _c_ShowScrollBar = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Int32 wBar,
  ffi.Int32 bShow,
);

typedef _dart_ShowScrollBar = int Function(
  ffi.Pointer<HWND__> hWnd,
  int wBar,
  int bShow,
);

typedef _c_EnableScrollBar = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Uint32 wSBflags,
  ffi.Uint32 wArrows,
);

typedef _dart_EnableScrollBar = int Function(
  ffi.Pointer<HWND__> hWnd,
  int wSBflags,
  int wArrows,
);

typedef _c_SetPropA = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Int8> lpString,
  ffi.Pointer<ffi.Void> hData,
);

typedef _dart_SetPropA = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Int8> lpString,
  ffi.Pointer<ffi.Void> hData,
);

typedef _c_SetPropW = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Uint16> lpString,
  ffi.Pointer<ffi.Void> hData,
);

typedef _dart_SetPropW = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Uint16> lpString,
  ffi.Pointer<ffi.Void> hData,
);

typedef _c_GetPropA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Int8> lpString,
);

typedef _dart_GetPropA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Int8> lpString,
);

typedef _c_GetPropW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Uint16> lpString,
);

typedef _dart_GetPropW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Uint16> lpString,
);

typedef _c_RemovePropA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Int8> lpString,
);

typedef _dart_RemovePropA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Int8> lpString,
);

typedef _c_RemovePropW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Uint16> lpString,
);

typedef _dart_RemovePropW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Uint16> lpString,
);

typedef PROPENUMPROCEXA = ffi.Int32 Function(
  ffi.Pointer<HWND__>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
);

typedef _c_EnumPropsExA = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.NativeFunction<PROPENUMPROCEXA>> lpEnumFunc,
  ffi.Int64 lParam,
);

typedef _dart_EnumPropsExA = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.NativeFunction<PROPENUMPROCEXA>> lpEnumFunc,
  int lParam,
);

typedef PROPENUMPROCEXW = ffi.Int32 Function(
  ffi.Pointer<HWND__>,
  ffi.Pointer<ffi.Uint16>,
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
);

typedef _c_EnumPropsExW = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.NativeFunction<PROPENUMPROCEXW>> lpEnumFunc,
  ffi.Int64 lParam,
);

typedef _dart_EnumPropsExW = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.NativeFunction<PROPENUMPROCEXW>> lpEnumFunc,
  int lParam,
);

typedef PROPENUMPROCA = ffi.Int32 Function(
  ffi.Pointer<HWND__>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_EnumPropsA = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.NativeFunction<PROPENUMPROCA>> lpEnumFunc,
);

typedef _dart_EnumPropsA = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.NativeFunction<PROPENUMPROCA>> lpEnumFunc,
);

typedef PROPENUMPROCW = ffi.Int32 Function(
  ffi.Pointer<HWND__>,
  ffi.Pointer<ffi.Uint16>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_EnumPropsW = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.NativeFunction<PROPENUMPROCW>> lpEnumFunc,
);

typedef _dart_EnumPropsW = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.NativeFunction<PROPENUMPROCW>> lpEnumFunc,
);

typedef _c_SetWindowTextA = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Int8> lpString,
);

typedef _dart_SetWindowTextA = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Int8> lpString,
);

typedef _c_SetWindowTextW = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Uint16> lpString,
);

typedef _dart_SetWindowTextW = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Uint16> lpString,
);

typedef _c_GetWindowTextA = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Int8> lpString,
  ffi.Int32 nMaxCount,
);

typedef _dart_GetWindowTextA = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Int8> lpString,
  int nMaxCount,
);

typedef _c_GetWindowTextW = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Uint16> lpString,
  ffi.Int32 nMaxCount,
);

typedef _dart_GetWindowTextW = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Uint16> lpString,
  int nMaxCount,
);

typedef _c_GetWindowTextLengthA = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _dart_GetWindowTextLengthA = int Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _c_GetWindowTextLengthW = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _dart_GetWindowTextLengthW = int Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _c_GetClientRect = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<LPRECT> lpRect,
);

typedef _dart_GetClientRect = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<LPRECT> lpRect,
);

typedef _c_GetWindowRect = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<LPRECT> lpRect,
);

typedef _dart_GetWindowRect = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<LPRECT> lpRect,
);

typedef _c_AdjustWindowRect = ffi.Int32 Function(
  ffi.Pointer<LPRECT> lpRect,
  ffi.Uint64 dwStyle,
  ffi.Int32 bMenu,
);

typedef _dart_AdjustWindowRect = int Function(
  ffi.Pointer<LPRECT> lpRect,
  int dwStyle,
  int bMenu,
);

typedef _c_AdjustWindowRectEx = ffi.Int32 Function(
  ffi.Pointer<LPRECT> lpRect,
  ffi.Uint64 dwStyle,
  ffi.Int32 bMenu,
  ffi.Uint64 dwExStyle,
);

typedef _dart_AdjustWindowRectEx = int Function(
  ffi.Pointer<LPRECT> lpRect,
  int dwStyle,
  int bMenu,
  int dwExStyle,
);

typedef _c_AdjustWindowRectExForDpi = ffi.Int32 Function(
  ffi.Pointer<LPRECT> lpRect,
  ffi.Uint64 dwStyle,
  ffi.Int32 bMenu,
  ffi.Uint64 dwExStyle,
  ffi.Uint32 dpi,
);

typedef _dart_AdjustWindowRectExForDpi = int Function(
  ffi.Pointer<LPRECT> lpRect,
  int dwStyle,
  int bMenu,
  int dwExStyle,
  int dpi,
);

typedef _c_SetWindowContextHelpId = ffi.Int32 Function(
  ffi.Pointer<HWND__> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_SetWindowContextHelpId = int Function(
  ffi.Pointer<HWND__> arg0,
  int arg1,
);

typedef _c_GetWindowContextHelpId = ffi.Uint64 Function(
  ffi.Pointer<HWND__> arg0,
);

typedef _dart_GetWindowContextHelpId = int Function(
  ffi.Pointer<HWND__> arg0,
);

typedef _c_SetMenuContextHelpId = ffi.Int32 Function(
  ffi.Pointer<HMENU__> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_SetMenuContextHelpId = int Function(
  ffi.Pointer<HMENU__> arg0,
  int arg1,
);

typedef _c_GetMenuContextHelpId = ffi.Uint64 Function(
  ffi.Pointer<HMENU__> arg0,
);

typedef _dart_GetMenuContextHelpId = int Function(
  ffi.Pointer<HMENU__> arg0,
);

typedef _c_MessageBoxA = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Int8> lpText,
  ffi.Pointer<ffi.Int8> lpCaption,
  ffi.Uint32 uType,
);

typedef _dart_MessageBoxA = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Int8> lpText,
  ffi.Pointer<ffi.Int8> lpCaption,
  int uType,
);

typedef _c_MessageBoxW = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Uint16> lpText,
  ffi.Pointer<ffi.Uint16> lpCaption,
  ffi.Uint32 uType,
);

typedef _dart_MessageBoxW = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Uint16> lpText,
  ffi.Pointer<ffi.Uint16> lpCaption,
  int uType,
);

typedef _c_MessageBoxExA = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Int8> lpText,
  ffi.Pointer<ffi.Int8> lpCaption,
  ffi.Uint32 uType,
  ffi.Uint16 wLanguageId,
);

typedef _dart_MessageBoxExA = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Int8> lpText,
  ffi.Pointer<ffi.Int8> lpCaption,
  int uType,
  int wLanguageId,
);

typedef _c_MessageBoxExW = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Uint16> lpText,
  ffi.Pointer<ffi.Uint16> lpCaption,
  ffi.Uint32 uType,
  ffi.Uint16 wLanguageId,
);

typedef _dart_MessageBoxExW = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Uint16> lpText,
  ffi.Pointer<ffi.Uint16> lpCaption,
  int uType,
  int wLanguageId,
);

typedef _c_MessageBoxIndirectA = ffi.Int32 Function(
  ffi.Pointer<LPMSGBOXPARAMSA> lpmbp,
);

typedef _dart_MessageBoxIndirectA = int Function(
  ffi.Pointer<LPMSGBOXPARAMSA> lpmbp,
);

typedef _c_MessageBoxIndirectW = ffi.Int32 Function(
  ffi.Pointer<LPMSGBOXPARAMSW> lpmbp,
);

typedef _dart_MessageBoxIndirectW = int Function(
  ffi.Pointer<LPMSGBOXPARAMSW> lpmbp,
);

typedef _c_MessageBeep = ffi.Int32 Function(
  ffi.Uint32 uType,
);

typedef _dart_MessageBeep = int Function(
  int uType,
);

typedef _c_ShowCursor = ffi.Int32 Function(
  ffi.Int32 bShow,
);

typedef _dart_ShowCursor = int Function(
  int bShow,
);

typedef _c_SetCursorPos = ffi.Int32 Function(
  ffi.Int32 X,
  ffi.Int32 Y,
);

typedef _dart_SetCursorPos = int Function(
  int X,
  int Y,
);

typedef _c_SetPhysicalCursorPos = ffi.Int32 Function(
  ffi.Int32 X,
  ffi.Int32 Y,
);

typedef _dart_SetPhysicalCursorPos = int Function(
  int X,
  int Y,
);

typedef _c_SetCursor = ffi.Pointer<HICON__> Function(
  ffi.Pointer<HICON__> hCursor,
);

typedef _dart_SetCursor = ffi.Pointer<HICON__> Function(
  ffi.Pointer<HICON__> hCursor,
);

typedef _c_GetCursorPos = ffi.Int32 Function(
  ffi.Pointer<LPPOINT> lpPoint,
);

typedef _dart_GetCursorPos = int Function(
  ffi.Pointer<LPPOINT> lpPoint,
);

typedef _c_GetPhysicalCursorPos = ffi.Int32 Function(
  ffi.Pointer<LPPOINT> lpPoint,
);

typedef _dart_GetPhysicalCursorPos = int Function(
  ffi.Pointer<LPPOINT> lpPoint,
);

typedef _c_GetClipCursor = ffi.Int32 Function(
  ffi.Pointer<LPRECT> lpRect,
);

typedef _dart_GetClipCursor = int Function(
  ffi.Pointer<LPRECT> lpRect,
);

typedef _c_GetCursor = ffi.Pointer<HICON__> Function();

typedef _dart_GetCursor = ffi.Pointer<HICON__> Function();

typedef _c_CreateCaret = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<HBITMAP__> hBitmap,
  ffi.Int32 nWidth,
  ffi.Int32 nHeight,
);

typedef _dart_CreateCaret = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<HBITMAP__> hBitmap,
  int nWidth,
  int nHeight,
);

typedef _c_GetCaretBlinkTime = ffi.Uint32 Function();

typedef _dart_GetCaretBlinkTime = int Function();

typedef _c_SetCaretBlinkTime = ffi.Int32 Function(
  ffi.Uint32 uMSeconds,
);

typedef _dart_SetCaretBlinkTime = int Function(
  int uMSeconds,
);

typedef _c_DestroyCaret = ffi.Int32 Function();

typedef _dart_DestroyCaret = int Function();

typedef _c_HideCaret = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _dart_HideCaret = int Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _c_ShowCaret = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _dart_ShowCaret = int Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _c_SetCaretPos = ffi.Int32 Function(
  ffi.Int32 X,
  ffi.Int32 Y,
);

typedef _dart_SetCaretPos = int Function(
  int X,
  int Y,
);

typedef _c_GetCaretPos = ffi.Int32 Function(
  ffi.Pointer<LPPOINT> lpPoint,
);

typedef _dart_GetCaretPos = int Function(
  ffi.Pointer<LPPOINT> lpPoint,
);

typedef _c_ClientToScreen = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<LPPOINT> lpPoint,
);

typedef _dart_ClientToScreen = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<LPPOINT> lpPoint,
);

typedef _c_ScreenToClient = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<LPPOINT> lpPoint,
);

typedef _dart_ScreenToClient = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<LPPOINT> lpPoint,
);

typedef _c_LogicalToPhysicalPoint = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<LPPOINT> lpPoint,
);

typedef _dart_LogicalToPhysicalPoint = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<LPPOINT> lpPoint,
);

typedef _c_PhysicalToLogicalPoint = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<LPPOINT> lpPoint,
);

typedef _dart_PhysicalToLogicalPoint = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<LPPOINT> lpPoint,
);

typedef _c_LogicalToPhysicalPointForPerMonitorDPI = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<LPPOINT> lpPoint,
);

typedef _dart_LogicalToPhysicalPointForPerMonitorDPI = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<LPPOINT> lpPoint,
);

typedef _c_PhysicalToLogicalPointForPerMonitorDPI = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<LPPOINT> lpPoint,
);

typedef _dart_PhysicalToLogicalPointForPerMonitorDPI = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<LPPOINT> lpPoint,
);

typedef _c_MapWindowPoints = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWndFrom,
  ffi.Pointer<HWND__> hWndTo,
  ffi.Pointer<LPPOINT> lpPoints,
  ffi.Uint32 cPoints,
);

typedef _dart_MapWindowPoints = int Function(
  ffi.Pointer<HWND__> hWndFrom,
  ffi.Pointer<HWND__> hWndTo,
  ffi.Pointer<LPPOINT> lpPoints,
  int cPoints,
);

typedef _c_ClipCursor = ffi.Int32 Function(
  ffi.Pointer<LPRECT> lpRect,
);

typedef _dart_ClipCursor = int Function(
  ffi.Pointer<LPRECT> lpRect,
);

typedef _c_GetSysColor = ffi.Uint64 Function(
  ffi.Int32 nIndex,
);

typedef _dart_GetSysColor = int Function(
  int nIndex,
);

typedef _c_GetSysColorBrush = ffi.Pointer<HBRUSH__> Function(
  ffi.Int32 nIndex,
);

typedef _dart_GetSysColorBrush = ffi.Pointer<HBRUSH__> Function(
  int nIndex,
);

typedef _c_SetSysColors = ffi.Int32 Function(
  ffi.Int32 cElements,
  ffi.Pointer<ffi.Int32> lpaElements,
  ffi.Pointer<ffi.Uint64> lpaRgbValues,
);

typedef _dart_SetSysColors = int Function(
  int cElements,
  ffi.Pointer<ffi.Int32> lpaElements,
  ffi.Pointer<ffi.Uint64> lpaRgbValues,
);

typedef _c_DrawFocusRect = ffi.Int32 Function(
  ffi.Pointer<HDC__> hDC,
  ffi.Pointer<LPRECT> lprc,
);

typedef _dart_DrawFocusRect = int Function(
  ffi.Pointer<HDC__> hDC,
  ffi.Pointer<LPRECT> lprc,
);

typedef _c_FillRect = ffi.Int32 Function(
  ffi.Pointer<HDC__> hDC,
  ffi.Pointer<LPRECT> lprc,
  ffi.Pointer<HBRUSH__> hbr,
);

typedef _dart_FillRect = int Function(
  ffi.Pointer<HDC__> hDC,
  ffi.Pointer<LPRECT> lprc,
  ffi.Pointer<HBRUSH__> hbr,
);

typedef _c_FrameRect = ffi.Int32 Function(
  ffi.Pointer<HDC__> hDC,
  ffi.Pointer<LPRECT> lprc,
  ffi.Pointer<HBRUSH__> hbr,
);

typedef _dart_FrameRect = int Function(
  ffi.Pointer<HDC__> hDC,
  ffi.Pointer<LPRECT> lprc,
  ffi.Pointer<HBRUSH__> hbr,
);

typedef _c_InvertRect = ffi.Int32 Function(
  ffi.Pointer<HDC__> hDC,
  ffi.Pointer<LPRECT> lprc,
);

typedef _dart_InvertRect = int Function(
  ffi.Pointer<HDC__> hDC,
  ffi.Pointer<LPRECT> lprc,
);

typedef _c_SetRect = ffi.Int32 Function(
  ffi.Pointer<LPRECT> lprc,
  ffi.Int32 xLeft,
  ffi.Int32 yTop,
  ffi.Int32 xRight,
  ffi.Int32 yBottom,
);

typedef _dart_SetRect = int Function(
  ffi.Pointer<LPRECT> lprc,
  int xLeft,
  int yTop,
  int xRight,
  int yBottom,
);

typedef _c_SetRectEmpty = ffi.Int32 Function(
  ffi.Pointer<LPRECT> lprc,
);

typedef _dart_SetRectEmpty = int Function(
  ffi.Pointer<LPRECT> lprc,
);

typedef _c_CopyRect = ffi.Int32 Function(
  ffi.Pointer<LPRECT> lprcDst,
  ffi.Pointer<LPRECT> lprcSrc,
);

typedef _dart_CopyRect = int Function(
  ffi.Pointer<LPRECT> lprcDst,
  ffi.Pointer<LPRECT> lprcSrc,
);

typedef _c_InflateRect = ffi.Int32 Function(
  ffi.Pointer<LPRECT> lprc,
  ffi.Int32 dx,
  ffi.Int32 dy,
);

typedef _dart_InflateRect = int Function(
  ffi.Pointer<LPRECT> lprc,
  int dx,
  int dy,
);

typedef _c_IntersectRect = ffi.Int32 Function(
  ffi.Pointer<LPRECT> lprcDst,
  ffi.Pointer<LPRECT> lprcSrc1,
  ffi.Pointer<LPRECT> lprcSrc2,
);

typedef _dart_IntersectRect = int Function(
  ffi.Pointer<LPRECT> lprcDst,
  ffi.Pointer<LPRECT> lprcSrc1,
  ffi.Pointer<LPRECT> lprcSrc2,
);

typedef _c_UnionRect = ffi.Int32 Function(
  ffi.Pointer<LPRECT> lprcDst,
  ffi.Pointer<LPRECT> lprcSrc1,
  ffi.Pointer<LPRECT> lprcSrc2,
);

typedef _dart_UnionRect = int Function(
  ffi.Pointer<LPRECT> lprcDst,
  ffi.Pointer<LPRECT> lprcSrc1,
  ffi.Pointer<LPRECT> lprcSrc2,
);

typedef _c_SubtractRect = ffi.Int32 Function(
  ffi.Pointer<LPRECT> lprcDst,
  ffi.Pointer<LPRECT> lprcSrc1,
  ffi.Pointer<LPRECT> lprcSrc2,
);

typedef _dart_SubtractRect = int Function(
  ffi.Pointer<LPRECT> lprcDst,
  ffi.Pointer<LPRECT> lprcSrc1,
  ffi.Pointer<LPRECT> lprcSrc2,
);

typedef _c_OffsetRect = ffi.Int32 Function(
  ffi.Pointer<LPRECT> lprc,
  ffi.Int32 dx,
  ffi.Int32 dy,
);

typedef _dart_OffsetRect = int Function(
  ffi.Pointer<LPRECT> lprc,
  int dx,
  int dy,
);

typedef _c_IsRectEmpty = ffi.Int32 Function(
  ffi.Pointer<LPRECT> lprc,
);

typedef _dart_IsRectEmpty = int Function(
  ffi.Pointer<LPRECT> lprc,
);

typedef _c_EqualRect = ffi.Int32 Function(
  ffi.Pointer<LPRECT> lprc1,
  ffi.Pointer<LPRECT> lprc2,
);

typedef _dart_EqualRect = int Function(
  ffi.Pointer<LPRECT> lprc1,
  ffi.Pointer<LPRECT> lprc2,
);

typedef _c_GetWindowWord = ffi.Uint16 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Int32 nIndex,
);

typedef _dart_GetWindowWord = int Function(
  ffi.Pointer<HWND__> hWnd,
  int nIndex,
);

typedef _c_SetWindowWord = ffi.Uint16 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Int32 nIndex,
  ffi.Uint16 wNewWord,
);

typedef _dart_SetWindowWord = int Function(
  ffi.Pointer<HWND__> hWnd,
  int nIndex,
  int wNewWord,
);

typedef _c_GetWindowLongA = ffi.Int64 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Int32 nIndex,
);

typedef _dart_GetWindowLongA = int Function(
  ffi.Pointer<HWND__> hWnd,
  int nIndex,
);

typedef _c_GetWindowLongW = ffi.Int64 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Int32 nIndex,
);

typedef _dart_GetWindowLongW = int Function(
  ffi.Pointer<HWND__> hWnd,
  int nIndex,
);

typedef _c_SetWindowLongA = ffi.Int64 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Int32 nIndex,
  ffi.Int64 dwNewLong,
);

typedef _dart_SetWindowLongA = int Function(
  ffi.Pointer<HWND__> hWnd,
  int nIndex,
  int dwNewLong,
);

typedef _c_SetWindowLongW = ffi.Int64 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Int32 nIndex,
  ffi.Int64 dwNewLong,
);

typedef _dart_SetWindowLongW = int Function(
  ffi.Pointer<HWND__> hWnd,
  int nIndex,
  int dwNewLong,
);

typedef _c_GetWindowLongPtrA = ffi.Int64 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Int32 nIndex,
);

typedef _dart_GetWindowLongPtrA = int Function(
  ffi.Pointer<HWND__> hWnd,
  int nIndex,
);

typedef _c_GetWindowLongPtrW = ffi.Int64 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Int32 nIndex,
);

typedef _dart_GetWindowLongPtrW = int Function(
  ffi.Pointer<HWND__> hWnd,
  int nIndex,
);

typedef _c_SetWindowLongPtrA = ffi.Int64 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Int32 nIndex,
  ffi.Int64 dwNewLong,
);

typedef _dart_SetWindowLongPtrA = int Function(
  ffi.Pointer<HWND__> hWnd,
  int nIndex,
  int dwNewLong,
);

typedef _c_SetWindowLongPtrW = ffi.Int64 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Int32 nIndex,
  ffi.Int64 dwNewLong,
);

typedef _dart_SetWindowLongPtrW = int Function(
  ffi.Pointer<HWND__> hWnd,
  int nIndex,
  int dwNewLong,
);

typedef _c_GetClassWord = ffi.Uint16 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Int32 nIndex,
);

typedef _dart_GetClassWord = int Function(
  ffi.Pointer<HWND__> hWnd,
  int nIndex,
);

typedef _c_SetClassWord = ffi.Uint16 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Int32 nIndex,
  ffi.Uint16 wNewWord,
);

typedef _dart_SetClassWord = int Function(
  ffi.Pointer<HWND__> hWnd,
  int nIndex,
  int wNewWord,
);

typedef _c_GetClassLongA = ffi.Uint64 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Int32 nIndex,
);

typedef _dart_GetClassLongA = int Function(
  ffi.Pointer<HWND__> hWnd,
  int nIndex,
);

typedef _c_GetClassLongW = ffi.Uint64 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Int32 nIndex,
);

typedef _dart_GetClassLongW = int Function(
  ffi.Pointer<HWND__> hWnd,
  int nIndex,
);

typedef _c_SetClassLongA = ffi.Uint64 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Int32 nIndex,
  ffi.Int64 dwNewLong,
);

typedef _dart_SetClassLongA = int Function(
  ffi.Pointer<HWND__> hWnd,
  int nIndex,
  int dwNewLong,
);

typedef _c_SetClassLongW = ffi.Uint64 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Int32 nIndex,
  ffi.Int64 dwNewLong,
);

typedef _dart_SetClassLongW = int Function(
  ffi.Pointer<HWND__> hWnd,
  int nIndex,
  int dwNewLong,
);

typedef _c_GetClassLongPtrA = ffi.Uint64 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Int32 nIndex,
);

typedef _dart_GetClassLongPtrA = int Function(
  ffi.Pointer<HWND__> hWnd,
  int nIndex,
);

typedef _c_GetClassLongPtrW = ffi.Uint64 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Int32 nIndex,
);

typedef _dart_GetClassLongPtrW = int Function(
  ffi.Pointer<HWND__> hWnd,
  int nIndex,
);

typedef _c_SetClassLongPtrA = ffi.Uint64 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Int32 nIndex,
  ffi.Int64 dwNewLong,
);

typedef _dart_SetClassLongPtrA = int Function(
  ffi.Pointer<HWND__> hWnd,
  int nIndex,
  int dwNewLong,
);

typedef _c_SetClassLongPtrW = ffi.Uint64 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Int32 nIndex,
  ffi.Int64 dwNewLong,
);

typedef _dart_SetClassLongPtrW = int Function(
  ffi.Pointer<HWND__> hWnd,
  int nIndex,
  int dwNewLong,
);

typedef _c_GetProcessDefaultLayout = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> pdwDefaultLayout,
);

typedef _dart_GetProcessDefaultLayout = int Function(
  ffi.Pointer<ffi.Uint64> pdwDefaultLayout,
);

typedef _c_SetProcessDefaultLayout = ffi.Int32 Function(
  ffi.Uint64 dwDefaultLayout,
);

typedef _dart_SetProcessDefaultLayout = int Function(
  int dwDefaultLayout,
);

typedef _c_GetDesktopWindow = ffi.Pointer<HWND__> Function();

typedef _dart_GetDesktopWindow = ffi.Pointer<HWND__> Function();

typedef _c_GetParent = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _dart_GetParent = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _c_SetParent = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HWND__> hWndChild,
  ffi.Pointer<HWND__> hWndNewParent,
);

typedef _dart_SetParent = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HWND__> hWndChild,
  ffi.Pointer<HWND__> hWndNewParent,
);

typedef _c_EnumChildWindows = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWndParent,
  ffi.Pointer<ffi.NativeFunction<WNDENUMPROC>> lpEnumFunc,
  ffi.Int64 lParam,
);

typedef _dart_EnumChildWindows = int Function(
  ffi.Pointer<HWND__> hWndParent,
  ffi.Pointer<ffi.NativeFunction<WNDENUMPROC>> lpEnumFunc,
  int lParam,
);

typedef _c_FindWindowA = ffi.Pointer<HWND__> Function(
  ffi.Pointer<ffi.Int8> lpClassName,
  ffi.Pointer<ffi.Int8> lpWindowName,
);

typedef _dart_FindWindowA = ffi.Pointer<HWND__> Function(
  ffi.Pointer<ffi.Int8> lpClassName,
  ffi.Pointer<ffi.Int8> lpWindowName,
);

typedef _c_FindWindowW = ffi.Pointer<HWND__> Function(
  ffi.Pointer<ffi.Uint16> lpClassName,
  ffi.Pointer<ffi.Uint16> lpWindowName,
);

typedef _dart_FindWindowW = ffi.Pointer<HWND__> Function(
  ffi.Pointer<ffi.Uint16> lpClassName,
  ffi.Pointer<ffi.Uint16> lpWindowName,
);

typedef _c_FindWindowExA = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HWND__> hWndParent,
  ffi.Pointer<HWND__> hWndChildAfter,
  ffi.Pointer<ffi.Int8> lpszClass,
  ffi.Pointer<ffi.Int8> lpszWindow,
);

typedef _dart_FindWindowExA = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HWND__> hWndParent,
  ffi.Pointer<HWND__> hWndChildAfter,
  ffi.Pointer<ffi.Int8> lpszClass,
  ffi.Pointer<ffi.Int8> lpszWindow,
);

typedef _c_FindWindowExW = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HWND__> hWndParent,
  ffi.Pointer<HWND__> hWndChildAfter,
  ffi.Pointer<ffi.Uint16> lpszClass,
  ffi.Pointer<ffi.Uint16> lpszWindow,
);

typedef _dart_FindWindowExW = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HWND__> hWndParent,
  ffi.Pointer<HWND__> hWndChildAfter,
  ffi.Pointer<ffi.Uint16> lpszClass,
  ffi.Pointer<ffi.Uint16> lpszWindow,
);

typedef _c_GetShellWindow = ffi.Pointer<HWND__> Function();

typedef _dart_GetShellWindow = ffi.Pointer<HWND__> Function();

typedef _c_RegisterShellHookWindow = ffi.Int32 Function(
  ffi.Pointer<HWND__> hwnd,
);

typedef _dart_RegisterShellHookWindow = int Function(
  ffi.Pointer<HWND__> hwnd,
);

typedef _c_DeregisterShellHookWindow = ffi.Int32 Function(
  ffi.Pointer<HWND__> hwnd,
);

typedef _dart_DeregisterShellHookWindow = int Function(
  ffi.Pointer<HWND__> hwnd,
);

typedef _c_EnumWindows = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<WNDENUMPROC>> lpEnumFunc,
  ffi.Int64 lParam,
);

typedef _dart_EnumWindows = int Function(
  ffi.Pointer<ffi.NativeFunction<WNDENUMPROC>> lpEnumFunc,
  int lParam,
);

typedef _c_EnumThreadWindows = ffi.Int32 Function(
  ffi.Uint64 dwThreadId,
  ffi.Pointer<ffi.NativeFunction<WNDENUMPROC>> lpfn,
  ffi.Int64 lParam,
);

typedef _dart_EnumThreadWindows = int Function(
  int dwThreadId,
  ffi.Pointer<ffi.NativeFunction<WNDENUMPROC>> lpfn,
  int lParam,
);

typedef _c_GetClassNameA = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Int8> lpClassName,
  ffi.Int32 nMaxCount,
);

typedef _dart_GetClassNameA = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Int8> lpClassName,
  int nMaxCount,
);

typedef _c_GetClassNameW = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Uint16> lpClassName,
  ffi.Int32 nMaxCount,
);

typedef _dart_GetClassNameW = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Uint16> lpClassName,
  int nMaxCount,
);

typedef _c_GetTopWindow = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _dart_GetTopWindow = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _c_GetWindowThreadProcessId = ffi.Uint64 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Uint64> lpdwProcessId,
);

typedef _dart_GetWindowThreadProcessId = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Uint64> lpdwProcessId,
);

typedef _c_IsGUIThread = ffi.Int32 Function(
  ffi.Int32 bConvert,
);

typedef _dart_IsGUIThread = int Function(
  int bConvert,
);

typedef _c_GetLastActivePopup = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _dart_GetLastActivePopup = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _c_GetWindow = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Uint32 uCmd,
);

typedef _dart_GetWindow = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HWND__> hWnd,
  int uCmd,
);

typedef HOOKPROC = ffi.Int64 Function(
  ffi.Int32,
  ffi.Uint64,
  ffi.Int64,
);

typedef _c_SetWindowsHookA = ffi.Pointer<HHOOK__> Function(
  ffi.Int32 nFilterType,
  ffi.Pointer<ffi.NativeFunction<HOOKPROC>> pfnFilterProc,
);

typedef _dart_SetWindowsHookA = ffi.Pointer<HHOOK__> Function(
  int nFilterType,
  ffi.Pointer<ffi.NativeFunction<HOOKPROC>> pfnFilterProc,
);

typedef _c_SetWindowsHookW = ffi.Pointer<HHOOK__> Function(
  ffi.Int32 nFilterType,
  ffi.Pointer<ffi.NativeFunction<HOOKPROC>> pfnFilterProc,
);

typedef _dart_SetWindowsHookW = ffi.Pointer<HHOOK__> Function(
  int nFilterType,
  ffi.Pointer<ffi.NativeFunction<HOOKPROC>> pfnFilterProc,
);

typedef _c_UnhookWindowsHook = ffi.Int32 Function(
  ffi.Int32 nCode,
  ffi.Pointer<ffi.NativeFunction<HOOKPROC>> pfnFilterProc,
);

typedef _dart_UnhookWindowsHook = int Function(
  int nCode,
  ffi.Pointer<ffi.NativeFunction<HOOKPROC>> pfnFilterProc,
);

typedef _c_SetWindowsHookExA = ffi.Pointer<HHOOK__> Function(
  ffi.Int32 idHook,
  ffi.Pointer<ffi.NativeFunction<HOOKPROC>> lpfn,
  ffi.Pointer<HINSTANCE__> hmod,
  ffi.Uint64 dwThreadId,
);

typedef _dart_SetWindowsHookExA = ffi.Pointer<HHOOK__> Function(
  int idHook,
  ffi.Pointer<ffi.NativeFunction<HOOKPROC>> lpfn,
  ffi.Pointer<HINSTANCE__> hmod,
  int dwThreadId,
);

typedef _c_SetWindowsHookExW = ffi.Pointer<HHOOK__> Function(
  ffi.Int32 idHook,
  ffi.Pointer<ffi.NativeFunction<HOOKPROC>> lpfn,
  ffi.Pointer<HINSTANCE__> hmod,
  ffi.Uint64 dwThreadId,
);

typedef _dart_SetWindowsHookExW = ffi.Pointer<HHOOK__> Function(
  int idHook,
  ffi.Pointer<ffi.NativeFunction<HOOKPROC>> lpfn,
  ffi.Pointer<HINSTANCE__> hmod,
  int dwThreadId,
);

typedef _c_UnhookWindowsHookEx = ffi.Int32 Function(
  ffi.Pointer<HHOOK__> hhk,
);

typedef _dart_UnhookWindowsHookEx = int Function(
  ffi.Pointer<HHOOK__> hhk,
);

typedef _c_CallNextHookEx = ffi.Int64 Function(
  ffi.Pointer<HHOOK__> hhk,
  ffi.Int32 nCode,
  ffi.Uint64 wParam,
  ffi.Int64 lParam,
);

typedef _dart_CallNextHookEx = int Function(
  ffi.Pointer<HHOOK__> hhk,
  int nCode,
  int wParam,
  int lParam,
);

typedef _c_CheckMenuRadioItem = ffi.Int32 Function(
  ffi.Pointer<HMENU__> hmenu,
  ffi.Uint32 first,
  ffi.Uint32 last,
  ffi.Uint32 check,
  ffi.Uint32 flags,
);

typedef _dart_CheckMenuRadioItem = int Function(
  ffi.Pointer<HMENU__> hmenu,
  int first,
  int last,
  int check,
  int flags,
);

typedef _c_LoadBitmapA = ffi.Pointer<HBITMAP__> Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<ffi.Int8> lpBitmapName,
);

typedef _dart_LoadBitmapA = ffi.Pointer<HBITMAP__> Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<ffi.Int8> lpBitmapName,
);

typedef _c_LoadBitmapW = ffi.Pointer<HBITMAP__> Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<ffi.Uint16> lpBitmapName,
);

typedef _dart_LoadBitmapW = ffi.Pointer<HBITMAP__> Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<ffi.Uint16> lpBitmapName,
);

typedef _c_LoadCursorA = ffi.Pointer<HICON__> Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<ffi.Int8> lpCursorName,
);

typedef _dart_LoadCursorA = ffi.Pointer<HICON__> Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<ffi.Int8> lpCursorName,
);

typedef _c_LoadCursorW = ffi.Pointer<HICON__> Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<ffi.Uint16> lpCursorName,
);

typedef _dart_LoadCursorW = ffi.Pointer<HICON__> Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<ffi.Uint16> lpCursorName,
);

typedef _c_LoadCursorFromFileA = ffi.Pointer<HICON__> Function(
  ffi.Pointer<ffi.Int8> lpFileName,
);

typedef _dart_LoadCursorFromFileA = ffi.Pointer<HICON__> Function(
  ffi.Pointer<ffi.Int8> lpFileName,
);

typedef _c_LoadCursorFromFileW = ffi.Pointer<HICON__> Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
);

typedef _dart_LoadCursorFromFileW = ffi.Pointer<HICON__> Function(
  ffi.Pointer<ffi.Uint16> lpFileName,
);

typedef _c_CreateCursor = ffi.Pointer<HICON__> Function(
  ffi.Pointer<HINSTANCE__> hInst,
  ffi.Int32 xHotSpot,
  ffi.Int32 yHotSpot,
  ffi.Int32 nWidth,
  ffi.Int32 nHeight,
  ffi.Pointer<ffi.Void> pvANDPlane,
  ffi.Pointer<ffi.Void> pvXORPlane,
);

typedef _dart_CreateCursor = ffi.Pointer<HICON__> Function(
  ffi.Pointer<HINSTANCE__> hInst,
  int xHotSpot,
  int yHotSpot,
  int nWidth,
  int nHeight,
  ffi.Pointer<ffi.Void> pvANDPlane,
  ffi.Pointer<ffi.Void> pvXORPlane,
);

typedef _c_DestroyCursor = ffi.Int32 Function(
  ffi.Pointer<HICON__> hCursor,
);

typedef _dart_DestroyCursor = int Function(
  ffi.Pointer<HICON__> hCursor,
);

typedef _c_SetSystemCursor = ffi.Int32 Function(
  ffi.Pointer<HICON__> hcur,
  ffi.Uint64 id,
);

typedef _dart_SetSystemCursor = int Function(
  ffi.Pointer<HICON__> hcur,
  int id,
);

typedef _c_LoadIconA = ffi.Pointer<HICON__> Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<ffi.Int8> lpIconName,
);

typedef _dart_LoadIconA = ffi.Pointer<HICON__> Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<ffi.Int8> lpIconName,
);

typedef _c_LoadIconW = ffi.Pointer<HICON__> Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<ffi.Uint16> lpIconName,
);

typedef _dart_LoadIconW = ffi.Pointer<HICON__> Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Pointer<ffi.Uint16> lpIconName,
);

typedef _c_PrivateExtractIconsA = ffi.Uint32 Function(
  ffi.Pointer<ffi.Int8> szFileName,
  ffi.Int32 nIconIndex,
  ffi.Int32 cxIcon,
  ffi.Int32 cyIcon,
  ffi.Pointer<ffi.Pointer<HICON__>> phicon,
  ffi.Pointer<ffi.Uint32> piconid,
  ffi.Uint32 nIcons,
  ffi.Uint32 flags,
);

typedef _dart_PrivateExtractIconsA = int Function(
  ffi.Pointer<ffi.Int8> szFileName,
  int nIconIndex,
  int cxIcon,
  int cyIcon,
  ffi.Pointer<ffi.Pointer<HICON__>> phicon,
  ffi.Pointer<ffi.Uint32> piconid,
  int nIcons,
  int flags,
);

typedef _c_PrivateExtractIconsW = ffi.Uint32 Function(
  ffi.Pointer<ffi.Uint16> szFileName,
  ffi.Int32 nIconIndex,
  ffi.Int32 cxIcon,
  ffi.Int32 cyIcon,
  ffi.Pointer<ffi.Pointer<HICON__>> phicon,
  ffi.Pointer<ffi.Uint32> piconid,
  ffi.Uint32 nIcons,
  ffi.Uint32 flags,
);

typedef _dart_PrivateExtractIconsW = int Function(
  ffi.Pointer<ffi.Uint16> szFileName,
  int nIconIndex,
  int cxIcon,
  int cyIcon,
  ffi.Pointer<ffi.Pointer<HICON__>> phicon,
  ffi.Pointer<ffi.Uint32> piconid,
  int nIcons,
  int flags,
);

typedef _c_CreateIcon = ffi.Pointer<HICON__> Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Int32 nWidth,
  ffi.Int32 nHeight,
  ffi.Uint8 cPlanes,
  ffi.Uint8 cBitsPixel,
  ffi.Pointer<ffi.Uint8> lpbANDbits,
  ffi.Pointer<ffi.Uint8> lpbXORbits,
);

typedef _dart_CreateIcon = ffi.Pointer<HICON__> Function(
  ffi.Pointer<HINSTANCE__> hInstance,
  int nWidth,
  int nHeight,
  int cPlanes,
  int cBitsPixel,
  ffi.Pointer<ffi.Uint8> lpbANDbits,
  ffi.Pointer<ffi.Uint8> lpbXORbits,
);

typedef _c_DestroyIcon = ffi.Int32 Function(
  ffi.Pointer<HICON__> hIcon,
);

typedef _dart_DestroyIcon = int Function(
  ffi.Pointer<HICON__> hIcon,
);

typedef _c_LookupIconIdFromDirectory = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> presbits,
  ffi.Int32 fIcon,
);

typedef _dart_LookupIconIdFromDirectory = int Function(
  ffi.Pointer<ffi.Uint8> presbits,
  int fIcon,
);

typedef _c_LookupIconIdFromDirectoryEx = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> presbits,
  ffi.Int32 fIcon,
  ffi.Int32 cxDesired,
  ffi.Int32 cyDesired,
  ffi.Uint32 Flags,
);

typedef _dart_LookupIconIdFromDirectoryEx = int Function(
  ffi.Pointer<ffi.Uint8> presbits,
  int fIcon,
  int cxDesired,
  int cyDesired,
  int Flags,
);

typedef _c_CreateIconFromResource = ffi.Pointer<HICON__> Function(
  ffi.Pointer<ffi.Uint8> presbits,
  ffi.Uint64 dwResSize,
  ffi.Int32 fIcon,
  ffi.Uint64 dwVer,
);

typedef _dart_CreateIconFromResource = ffi.Pointer<HICON__> Function(
  ffi.Pointer<ffi.Uint8> presbits,
  int dwResSize,
  int fIcon,
  int dwVer,
);

typedef _c_CreateIconFromResourceEx = ffi.Pointer<HICON__> Function(
  ffi.Pointer<ffi.Uint8> presbits,
  ffi.Uint64 dwResSize,
  ffi.Int32 fIcon,
  ffi.Uint64 dwVer,
  ffi.Int32 cxDesired,
  ffi.Int32 cyDesired,
  ffi.Uint32 Flags,
);

typedef _dart_CreateIconFromResourceEx = ffi.Pointer<HICON__> Function(
  ffi.Pointer<ffi.Uint8> presbits,
  int dwResSize,
  int fIcon,
  int dwVer,
  int cxDesired,
  int cyDesired,
  int Flags,
);

typedef _c_LoadImageA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<HINSTANCE__> hInst,
  ffi.Pointer<ffi.Int8> name,
  ffi.Uint32 type,
  ffi.Int32 cx,
  ffi.Int32 cy,
  ffi.Uint32 fuLoad,
);

typedef _dart_LoadImageA = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<HINSTANCE__> hInst,
  ffi.Pointer<ffi.Int8> name,
  int type,
  int cx,
  int cy,
  int fuLoad,
);

typedef _c_LoadImageW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<HINSTANCE__> hInst,
  ffi.Pointer<ffi.Uint16> name,
  ffi.Uint32 type,
  ffi.Int32 cx,
  ffi.Int32 cy,
  ffi.Uint32 fuLoad,
);

typedef _dart_LoadImageW = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<HINSTANCE__> hInst,
  ffi.Pointer<ffi.Uint16> name,
  int type,
  int cx,
  int cy,
  int fuLoad,
);

typedef _c_CopyImage = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> h,
  ffi.Uint32 type,
  ffi.Int32 cx,
  ffi.Int32 cy,
  ffi.Uint32 flags,
);

typedef _dart_CopyImage = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> h,
  int type,
  int cx,
  int cy,
  int flags,
);

typedef _c_DrawIconEx = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Int32 xLeft,
  ffi.Int32 yTop,
  ffi.Pointer<HICON__> hIcon,
  ffi.Int32 cxWidth,
  ffi.Int32 cyWidth,
  ffi.Uint32 istepIfAniCur,
  ffi.Pointer<HBRUSH__> hbrFlickerFreeDraw,
  ffi.Uint32 diFlags,
);

typedef _dart_DrawIconEx = int Function(
  ffi.Pointer<HDC__> hdc,
  int xLeft,
  int yTop,
  ffi.Pointer<HICON__> hIcon,
  int cxWidth,
  int cyWidth,
  int istepIfAniCur,
  ffi.Pointer<HBRUSH__> hbrFlickerFreeDraw,
  int diFlags,
);

typedef _c_CreateIconIndirect = ffi.Pointer<HICON__> Function(
  ffi.Pointer<ICONINFO> piconinfo,
);

typedef _dart_CreateIconIndirect = ffi.Pointer<HICON__> Function(
  ffi.Pointer<ICONINFO> piconinfo,
);

typedef _c_CopyIcon = ffi.Pointer<HICON__> Function(
  ffi.Pointer<HICON__> hIcon,
);

typedef _dart_CopyIcon = ffi.Pointer<HICON__> Function(
  ffi.Pointer<HICON__> hIcon,
);

typedef _c_GetIconInfo = ffi.Int32 Function(
  ffi.Pointer<HICON__> hIcon,
  ffi.Pointer<ICONINFO> piconinfo,
);

typedef _dart_GetIconInfo = int Function(
  ffi.Pointer<HICON__> hIcon,
  ffi.Pointer<ICONINFO> piconinfo,
);

typedef _c_GetIconInfoExA = ffi.Int32 Function(
  ffi.Pointer<HICON__> hicon,
  ffi.Pointer<PICONINFOEXA> piconinfo,
);

typedef _dart_GetIconInfoExA = int Function(
  ffi.Pointer<HICON__> hicon,
  ffi.Pointer<PICONINFOEXA> piconinfo,
);

typedef _c_GetIconInfoExW = ffi.Int32 Function(
  ffi.Pointer<HICON__> hicon,
  ffi.Pointer<PICONINFOEXW> piconinfo,
);

typedef _dart_GetIconInfoExW = int Function(
  ffi.Pointer<HICON__> hicon,
  ffi.Pointer<PICONINFOEXW> piconinfo,
);

typedef _c_IsDialogMessageA = ffi.Int32 Function(
  ffi.Pointer<HWND__> hDlg,
  ffi.Pointer<LPMSG> lpMsg,
);

typedef _dart_IsDialogMessageA = int Function(
  ffi.Pointer<HWND__> hDlg,
  ffi.Pointer<LPMSG> lpMsg,
);

typedef _c_IsDialogMessageW = ffi.Int32 Function(
  ffi.Pointer<HWND__> hDlg,
  ffi.Pointer<LPMSG> lpMsg,
);

typedef _dart_IsDialogMessageW = int Function(
  ffi.Pointer<HWND__> hDlg,
  ffi.Pointer<LPMSG> lpMsg,
);

typedef _c_MapDialogRect = ffi.Int32 Function(
  ffi.Pointer<HWND__> hDlg,
  ffi.Pointer<LPRECT> lpRect,
);

typedef _dart_MapDialogRect = int Function(
  ffi.Pointer<HWND__> hDlg,
  ffi.Pointer<LPRECT> lpRect,
);

typedef _c_DlgDirListA = ffi.Int32 Function(
  ffi.Pointer<HWND__> hDlg,
  ffi.Pointer<ffi.Int8> lpPathSpec,
  ffi.Int32 nIDListBox,
  ffi.Int32 nIDStaticPath,
  ffi.Uint32 uFileType,
);

typedef _dart_DlgDirListA = int Function(
  ffi.Pointer<HWND__> hDlg,
  ffi.Pointer<ffi.Int8> lpPathSpec,
  int nIDListBox,
  int nIDStaticPath,
  int uFileType,
);

typedef _c_DlgDirListW = ffi.Int32 Function(
  ffi.Pointer<HWND__> hDlg,
  ffi.Pointer<ffi.Uint16> lpPathSpec,
  ffi.Int32 nIDListBox,
  ffi.Int32 nIDStaticPath,
  ffi.Uint32 uFileType,
);

typedef _dart_DlgDirListW = int Function(
  ffi.Pointer<HWND__> hDlg,
  ffi.Pointer<ffi.Uint16> lpPathSpec,
  int nIDListBox,
  int nIDStaticPath,
  int uFileType,
);

typedef _c_DlgDirSelectExA = ffi.Int32 Function(
  ffi.Pointer<HWND__> hwndDlg,
  ffi.Pointer<ffi.Int8> lpString,
  ffi.Int32 chCount,
  ffi.Int32 idListBox,
);

typedef _dart_DlgDirSelectExA = int Function(
  ffi.Pointer<HWND__> hwndDlg,
  ffi.Pointer<ffi.Int8> lpString,
  int chCount,
  int idListBox,
);

typedef _c_DlgDirSelectExW = ffi.Int32 Function(
  ffi.Pointer<HWND__> hwndDlg,
  ffi.Pointer<ffi.Uint16> lpString,
  ffi.Int32 chCount,
  ffi.Int32 idListBox,
);

typedef _dart_DlgDirSelectExW = int Function(
  ffi.Pointer<HWND__> hwndDlg,
  ffi.Pointer<ffi.Uint16> lpString,
  int chCount,
  int idListBox,
);

typedef _c_DlgDirListComboBoxA = ffi.Int32 Function(
  ffi.Pointer<HWND__> hDlg,
  ffi.Pointer<ffi.Int8> lpPathSpec,
  ffi.Int32 nIDComboBox,
  ffi.Int32 nIDStaticPath,
  ffi.Uint32 uFiletype,
);

typedef _dart_DlgDirListComboBoxA = int Function(
  ffi.Pointer<HWND__> hDlg,
  ffi.Pointer<ffi.Int8> lpPathSpec,
  int nIDComboBox,
  int nIDStaticPath,
  int uFiletype,
);

typedef _c_DlgDirListComboBoxW = ffi.Int32 Function(
  ffi.Pointer<HWND__> hDlg,
  ffi.Pointer<ffi.Uint16> lpPathSpec,
  ffi.Int32 nIDComboBox,
  ffi.Int32 nIDStaticPath,
  ffi.Uint32 uFiletype,
);

typedef _dart_DlgDirListComboBoxW = int Function(
  ffi.Pointer<HWND__> hDlg,
  ffi.Pointer<ffi.Uint16> lpPathSpec,
  int nIDComboBox,
  int nIDStaticPath,
  int uFiletype,
);

typedef _c_DlgDirSelectComboBoxExA = ffi.Int32 Function(
  ffi.Pointer<HWND__> hwndDlg,
  ffi.Pointer<ffi.Int8> lpString,
  ffi.Int32 cchOut,
  ffi.Int32 idComboBox,
);

typedef _dart_DlgDirSelectComboBoxExA = int Function(
  ffi.Pointer<HWND__> hwndDlg,
  ffi.Pointer<ffi.Int8> lpString,
  int cchOut,
  int idComboBox,
);

typedef _c_DlgDirSelectComboBoxExW = ffi.Int32 Function(
  ffi.Pointer<HWND__> hwndDlg,
  ffi.Pointer<ffi.Uint16> lpString,
  ffi.Int32 cchOut,
  ffi.Int32 idComboBox,
);

typedef _dart_DlgDirSelectComboBoxExW = int Function(
  ffi.Pointer<HWND__> hwndDlg,
  ffi.Pointer<ffi.Uint16> lpString,
  int cchOut,
  int idComboBox,
);

typedef _c_SetScrollInfo = ffi.Int32 Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Int32 nBar,
  ffi.Pointer<LPSCROLLINFO> lpsi,
  ffi.Int32 redraw,
);

typedef _dart_SetScrollInfo = int Function(
  ffi.Pointer<HWND__> hwnd,
  int nBar,
  ffi.Pointer<LPSCROLLINFO> lpsi,
  int redraw,
);

typedef _c_GetScrollInfo = ffi.Int32 Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Int32 nBar,
  ffi.Pointer<LPSCROLLINFO> lpsi,
);

typedef _dart_GetScrollInfo = int Function(
  ffi.Pointer<HWND__> hwnd,
  int nBar,
  ffi.Pointer<LPSCROLLINFO> lpsi,
);

typedef _c_DefFrameProcA = ffi.Int64 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<HWND__> hWndMDIClient,
  ffi.Uint32 uMsg,
  ffi.Uint64 wParam,
  ffi.Int64 lParam,
);

typedef _dart_DefFrameProcA = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<HWND__> hWndMDIClient,
  int uMsg,
  int wParam,
  int lParam,
);

typedef _c_DefFrameProcW = ffi.Int64 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<HWND__> hWndMDIClient,
  ffi.Uint32 uMsg,
  ffi.Uint64 wParam,
  ffi.Int64 lParam,
);

typedef _dart_DefFrameProcW = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<HWND__> hWndMDIClient,
  int uMsg,
  int wParam,
  int lParam,
);

typedef _c_DefMDIChildProcA = ffi.Int64 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Uint32 uMsg,
  ffi.Uint64 wParam,
  ffi.Int64 lParam,
);

typedef _dart_DefMDIChildProcA = int Function(
  ffi.Pointer<HWND__> hWnd,
  int uMsg,
  int wParam,
  int lParam,
);

typedef _c_DefMDIChildProcW = ffi.Int64 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Uint32 uMsg,
  ffi.Uint64 wParam,
  ffi.Int64 lParam,
);

typedef _dart_DefMDIChildProcW = int Function(
  ffi.Pointer<HWND__> hWnd,
  int uMsg,
  int wParam,
  int lParam,
);

typedef _c_TranslateMDISysAccel = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWndClient,
  ffi.Pointer<LPMSG> lpMsg,
);

typedef _dart_TranslateMDISysAccel = int Function(
  ffi.Pointer<HWND__> hWndClient,
  ffi.Pointer<LPMSG> lpMsg,
);

typedef _c_ArrangeIconicWindows = ffi.Uint32 Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _dart_ArrangeIconicWindows = int Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _c_CreateMDIWindowA = ffi.Pointer<HWND__> Function(
  ffi.Pointer<ffi.Int8> lpClassName,
  ffi.Pointer<ffi.Int8> lpWindowName,
  ffi.Uint64 dwStyle,
  ffi.Int32 X,
  ffi.Int32 Y,
  ffi.Int32 nWidth,
  ffi.Int32 nHeight,
  ffi.Pointer<HWND__> hWndParent,
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Int64 lParam,
);

typedef _dart_CreateMDIWindowA = ffi.Pointer<HWND__> Function(
  ffi.Pointer<ffi.Int8> lpClassName,
  ffi.Pointer<ffi.Int8> lpWindowName,
  int dwStyle,
  int X,
  int Y,
  int nWidth,
  int nHeight,
  ffi.Pointer<HWND__> hWndParent,
  ffi.Pointer<HINSTANCE__> hInstance,
  int lParam,
);

typedef _c_CreateMDIWindowW = ffi.Pointer<HWND__> Function(
  ffi.Pointer<ffi.Uint16> lpClassName,
  ffi.Pointer<ffi.Uint16> lpWindowName,
  ffi.Uint64 dwStyle,
  ffi.Int32 X,
  ffi.Int32 Y,
  ffi.Int32 nWidth,
  ffi.Int32 nHeight,
  ffi.Pointer<HWND__> hWndParent,
  ffi.Pointer<HINSTANCE__> hInstance,
  ffi.Int64 lParam,
);

typedef _dart_CreateMDIWindowW = ffi.Pointer<HWND__> Function(
  ffi.Pointer<ffi.Uint16> lpClassName,
  ffi.Pointer<ffi.Uint16> lpWindowName,
  int dwStyle,
  int X,
  int Y,
  int nWidth,
  int nHeight,
  ffi.Pointer<HWND__> hWndParent,
  ffi.Pointer<HINSTANCE__> hInstance,
  int lParam,
);

typedef _c_TileWindows = ffi.Uint16 Function(
  ffi.Pointer<HWND__> hwndParent,
  ffi.Uint32 wHow,
  ffi.Pointer<LPRECT> lpRect,
  ffi.Uint32 cKids,
  ffi.Pointer<ffi.Pointer<HWND__>> lpKids,
);

typedef _dart_TileWindows = int Function(
  ffi.Pointer<HWND__> hwndParent,
  int wHow,
  ffi.Pointer<LPRECT> lpRect,
  int cKids,
  ffi.Pointer<ffi.Pointer<HWND__>> lpKids,
);

typedef _c_CascadeWindows = ffi.Uint16 Function(
  ffi.Pointer<HWND__> hwndParent,
  ffi.Uint32 wHow,
  ffi.Pointer<LPRECT> lpRect,
  ffi.Uint32 cKids,
  ffi.Pointer<ffi.Pointer<HWND__>> lpKids,
);

typedef _dart_CascadeWindows = int Function(
  ffi.Pointer<HWND__> hwndParent,
  int wHow,
  ffi.Pointer<LPRECT> lpRect,
  int cKids,
  ffi.Pointer<ffi.Pointer<HWND__>> lpKids,
);

typedef _c_WinHelpA = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWndMain,
  ffi.Pointer<ffi.Int8> lpszHelp,
  ffi.Uint32 uCommand,
  ffi.Uint64 dwData,
);

typedef _dart_WinHelpA = int Function(
  ffi.Pointer<HWND__> hWndMain,
  ffi.Pointer<ffi.Int8> lpszHelp,
  int uCommand,
  int dwData,
);

typedef _c_WinHelpW = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWndMain,
  ffi.Pointer<ffi.Uint16> lpszHelp,
  ffi.Uint32 uCommand,
  ffi.Uint64 dwData,
);

typedef _dart_WinHelpW = int Function(
  ffi.Pointer<HWND__> hWndMain,
  ffi.Pointer<ffi.Uint16> lpszHelp,
  int uCommand,
  int dwData,
);

typedef _c_GetGuiResources = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> hProcess,
  ffi.Uint64 uiFlags,
);

typedef _dart_GetGuiResources = int Function(
  ffi.Pointer<ffi.Void> hProcess,
  int uiFlags,
);

typedef _c_ChangeDisplaySettingsA = ffi.Int64 Function(
  ffi.Pointer<LPDEVMODEA> lpDevMode,
  ffi.Uint64 dwFlags,
);

typedef _dart_ChangeDisplaySettingsA = int Function(
  ffi.Pointer<LPDEVMODEA> lpDevMode,
  int dwFlags,
);

typedef _c_ChangeDisplaySettingsW = ffi.Int64 Function(
  ffi.Pointer<LPDEVMODEW> lpDevMode,
  ffi.Uint64 dwFlags,
);

typedef _dart_ChangeDisplaySettingsW = int Function(
  ffi.Pointer<LPDEVMODEW> lpDevMode,
  int dwFlags,
);

typedef _c_ChangeDisplaySettingsExA = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> lpszDeviceName,
  ffi.Pointer<LPDEVMODEA> lpDevMode,
  ffi.Pointer<HWND__> hwnd,
  ffi.Uint64 dwflags,
  ffi.Pointer<ffi.Void> lParam,
);

typedef _dart_ChangeDisplaySettingsExA = int Function(
  ffi.Pointer<ffi.Int8> lpszDeviceName,
  ffi.Pointer<LPDEVMODEA> lpDevMode,
  ffi.Pointer<HWND__> hwnd,
  int dwflags,
  ffi.Pointer<ffi.Void> lParam,
);

typedef _c_ChangeDisplaySettingsExW = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> lpszDeviceName,
  ffi.Pointer<LPDEVMODEW> lpDevMode,
  ffi.Pointer<HWND__> hwnd,
  ffi.Uint64 dwflags,
  ffi.Pointer<ffi.Void> lParam,
);

typedef _dart_ChangeDisplaySettingsExW = int Function(
  ffi.Pointer<ffi.Uint16> lpszDeviceName,
  ffi.Pointer<LPDEVMODEW> lpDevMode,
  ffi.Pointer<HWND__> hwnd,
  int dwflags,
  ffi.Pointer<ffi.Void> lParam,
);

typedef _c_EnumDisplaySettingsA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpszDeviceName,
  ffi.Uint64 iModeNum,
  ffi.Pointer<LPDEVMODEA> lpDevMode,
);

typedef _dart_EnumDisplaySettingsA = int Function(
  ffi.Pointer<ffi.Int8> lpszDeviceName,
  int iModeNum,
  ffi.Pointer<LPDEVMODEA> lpDevMode,
);

typedef _c_EnumDisplaySettingsW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpszDeviceName,
  ffi.Uint64 iModeNum,
  ffi.Pointer<LPDEVMODEW> lpDevMode,
);

typedef _dart_EnumDisplaySettingsW = int Function(
  ffi.Pointer<ffi.Uint16> lpszDeviceName,
  int iModeNum,
  ffi.Pointer<LPDEVMODEW> lpDevMode,
);

typedef _c_EnumDisplaySettingsExA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpszDeviceName,
  ffi.Uint64 iModeNum,
  ffi.Pointer<LPDEVMODEA> lpDevMode,
  ffi.Uint64 dwFlags,
);

typedef _dart_EnumDisplaySettingsExA = int Function(
  ffi.Pointer<ffi.Int8> lpszDeviceName,
  int iModeNum,
  ffi.Pointer<LPDEVMODEA> lpDevMode,
  int dwFlags,
);

typedef _c_EnumDisplaySettingsExW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpszDeviceName,
  ffi.Uint64 iModeNum,
  ffi.Pointer<LPDEVMODEW> lpDevMode,
  ffi.Uint64 dwFlags,
);

typedef _dart_EnumDisplaySettingsExW = int Function(
  ffi.Pointer<ffi.Uint16> lpszDeviceName,
  int iModeNum,
  ffi.Pointer<LPDEVMODEW> lpDevMode,
  int dwFlags,
);

typedef _c_EnumDisplayDevicesA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpDevice,
  ffi.Uint64 iDevNum,
  ffi.Pointer<LPDISPLAY_DEVICEA> lpDisplayDevice,
  ffi.Uint64 dwFlags,
);

typedef _dart_EnumDisplayDevicesA = int Function(
  ffi.Pointer<ffi.Int8> lpDevice,
  int iDevNum,
  ffi.Pointer<LPDISPLAY_DEVICEA> lpDisplayDevice,
  int dwFlags,
);

typedef _c_EnumDisplayDevicesW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpDevice,
  ffi.Uint64 iDevNum,
  ffi.Pointer<LPDISPLAY_DEVICEW> lpDisplayDevice,
  ffi.Uint64 dwFlags,
);

typedef _dart_EnumDisplayDevicesW = int Function(
  ffi.Pointer<ffi.Uint16> lpDevice,
  int iDevNum,
  ffi.Pointer<LPDISPLAY_DEVICEW> lpDisplayDevice,
  int dwFlags,
);

typedef _c_GetDisplayConfigBufferSizes = ffi.Int64 Function(
  ffi.Uint32 flags,
  ffi.Pointer<ffi.Uint32> numPathArrayElements,
  ffi.Pointer<ffi.Uint32> numModeInfoArrayElements,
);

typedef _dart_GetDisplayConfigBufferSizes = int Function(
  int flags,
  ffi.Pointer<ffi.Uint32> numPathArrayElements,
  ffi.Pointer<ffi.Uint32> numModeInfoArrayElements,
);

typedef _c_SetDisplayConfig = ffi.Int64 Function(
  ffi.Uint32 numPathArrayElements,
  ffi.Pointer<DISPLAYCONFIG_PATH_INFO> pathArray,
  ffi.Uint32 numModeInfoArrayElements,
  ffi.Pointer<DISPLAYCONFIG_MODE_INFO> modeInfoArray,
  ffi.Uint32 flags,
);

typedef _dart_SetDisplayConfig = int Function(
  int numPathArrayElements,
  ffi.Pointer<DISPLAYCONFIG_PATH_INFO> pathArray,
  int numModeInfoArrayElements,
  ffi.Pointer<DISPLAYCONFIG_MODE_INFO> modeInfoArray,
  int flags,
);

typedef _c_QueryDisplayConfig = ffi.Int64 Function(
  ffi.Uint32 flags,
  ffi.Pointer<ffi.Uint32> numPathArrayElements,
  ffi.Pointer<DISPLAYCONFIG_PATH_INFO> pathArray,
  ffi.Pointer<ffi.Uint32> numModeInfoArrayElements,
  ffi.Pointer<DISPLAYCONFIG_MODE_INFO> modeInfoArray,
  ffi.Pointer<ffi.Int32> currentTopologyId,
);

typedef _dart_QueryDisplayConfig = int Function(
  int flags,
  ffi.Pointer<ffi.Uint32> numPathArrayElements,
  ffi.Pointer<DISPLAYCONFIG_PATH_INFO> pathArray,
  ffi.Pointer<ffi.Uint32> numModeInfoArrayElements,
  ffi.Pointer<DISPLAYCONFIG_MODE_INFO> modeInfoArray,
  ffi.Pointer<ffi.Int32> currentTopologyId,
);

typedef _c_DisplayConfigGetDeviceInfo = ffi.Int64 Function(
  ffi.Pointer<DISPLAYCONFIG_DEVICE_INFO_HEADER> requestPacket,
);

typedef _dart_DisplayConfigGetDeviceInfo = int Function(
  ffi.Pointer<DISPLAYCONFIG_DEVICE_INFO_HEADER> requestPacket,
);

typedef _c_DisplayConfigSetDeviceInfo = ffi.Int64 Function(
  ffi.Pointer<DISPLAYCONFIG_DEVICE_INFO_HEADER> setPacket,
);

typedef _dart_DisplayConfigSetDeviceInfo = int Function(
  ffi.Pointer<DISPLAYCONFIG_DEVICE_INFO_HEADER> setPacket,
);

typedef _c_SystemParametersInfoA = ffi.Int32 Function(
  ffi.Uint32 uiAction,
  ffi.Uint32 uiParam,
  ffi.Pointer<ffi.Void> pvParam,
  ffi.Uint32 fWinIni,
);

typedef _dart_SystemParametersInfoA = int Function(
  int uiAction,
  int uiParam,
  ffi.Pointer<ffi.Void> pvParam,
  int fWinIni,
);

typedef _c_SystemParametersInfoW = ffi.Int32 Function(
  ffi.Uint32 uiAction,
  ffi.Uint32 uiParam,
  ffi.Pointer<ffi.Void> pvParam,
  ffi.Uint32 fWinIni,
);

typedef _dart_SystemParametersInfoW = int Function(
  int uiAction,
  int uiParam,
  ffi.Pointer<ffi.Void> pvParam,
  int fWinIni,
);

typedef _c_SystemParametersInfoForDpi = ffi.Int32 Function(
  ffi.Uint32 uiAction,
  ffi.Uint32 uiParam,
  ffi.Pointer<ffi.Void> pvParam,
  ffi.Uint32 fWinIni,
  ffi.Uint32 dpi,
);

typedef _dart_SystemParametersInfoForDpi = int Function(
  int uiAction,
  int uiParam,
  ffi.Pointer<ffi.Void> pvParam,
  int fWinIni,
  int dpi,
);

typedef _c_SoundSentry = ffi.Int32 Function();

typedef _dart_SoundSentry = int Function();

typedef _c_SetDebugErrorLevel = ffi.Void Function(
  ffi.Uint64 dwLevel,
);

typedef _dart_SetDebugErrorLevel = void Function(
  int dwLevel,
);

typedef _c_SetLastErrorEx = ffi.Void Function(
  ffi.Uint64 dwErrCode,
  ffi.Uint64 dwType,
);

typedef _dart_SetLastErrorEx = void Function(
  int dwErrCode,
  int dwType,
);

typedef _c_InternalGetWindowText = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Uint16> pString,
  ffi.Int32 cchMaxCount,
);

typedef _dart_InternalGetWindowText = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Uint16> pString,
  int cchMaxCount,
);

typedef _c_CancelShutdown = ffi.Int32 Function();

typedef _dart_CancelShutdown = int Function();

typedef _c_MonitorFromRect = ffi.Pointer<HMONITOR__> Function(
  ffi.Pointer<LPRECT> lprc,
  ffi.Uint64 dwFlags,
);

typedef _dart_MonitorFromRect = ffi.Pointer<HMONITOR__> Function(
  ffi.Pointer<LPRECT> lprc,
  int dwFlags,
);

typedef _c_MonitorFromWindow = ffi.Pointer<HMONITOR__> Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Uint64 dwFlags,
);

typedef _dart_MonitorFromWindow = ffi.Pointer<HMONITOR__> Function(
  ffi.Pointer<HWND__> hwnd,
  int dwFlags,
);

typedef _c_GetMonitorInfoA = ffi.Int32 Function(
  ffi.Pointer<HMONITOR__> hMonitor,
  ffi.Pointer<LPMONITORINFO> lpmi,
);

typedef _dart_GetMonitorInfoA = int Function(
  ffi.Pointer<HMONITOR__> hMonitor,
  ffi.Pointer<LPMONITORINFO> lpmi,
);

typedef _c_GetMonitorInfoW = ffi.Int32 Function(
  ffi.Pointer<HMONITOR__> hMonitor,
  ffi.Pointer<LPMONITORINFO> lpmi,
);

typedef _dart_GetMonitorInfoW = int Function(
  ffi.Pointer<HMONITOR__> hMonitor,
  ffi.Pointer<LPMONITORINFO> lpmi,
);

typedef MONITORENUMPROC = ffi.Int32 Function(
  ffi.Pointer<HMONITOR__>,
  ffi.Pointer<HDC__>,
  ffi.Pointer<LPRECT>,
  ffi.Int64,
);

typedef _c_EnumDisplayMonitors = ffi.Int32 Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPRECT> lprcClip,
  ffi.Pointer<ffi.NativeFunction<MONITORENUMPROC>> lpfnEnum,
  ffi.Int64 dwData,
);

typedef _dart_EnumDisplayMonitors = int Function(
  ffi.Pointer<HDC__> hdc,
  ffi.Pointer<LPRECT> lprcClip,
  ffi.Pointer<ffi.NativeFunction<MONITORENUMPROC>> lpfnEnum,
  int dwData,
);

typedef _c_NotifyWinEvent = ffi.Void Function(
  ffi.Uint64 event,
  ffi.Pointer<HWND__> hwnd,
  ffi.Int64 idObject,
  ffi.Int64 idChild,
);

typedef _dart_NotifyWinEvent = void Function(
  int event,
  ffi.Pointer<HWND__> hwnd,
  int idObject,
  int idChild,
);

typedef WINEVENTPROC = ffi.Void Function(
  ffi.Pointer<HWINEVENTHOOK__>,
  ffi.Uint64,
  ffi.Pointer<HWND__>,
  ffi.Int64,
  ffi.Int64,
  ffi.Uint64,
  ffi.Uint64,
);

typedef _c_SetWinEventHook = ffi.Pointer<HWINEVENTHOOK__> Function(
  ffi.Uint64 eventMin,
  ffi.Uint64 eventMax,
  ffi.Pointer<HINSTANCE__> hmodWinEventProc,
  ffi.Pointer<ffi.NativeFunction<WINEVENTPROC>> pfnWinEventProc,
  ffi.Uint64 idProcess,
  ffi.Uint64 idThread,
  ffi.Uint64 dwFlags,
);

typedef _dart_SetWinEventHook = ffi.Pointer<HWINEVENTHOOK__> Function(
  int eventMin,
  int eventMax,
  ffi.Pointer<HINSTANCE__> hmodWinEventProc,
  ffi.Pointer<ffi.NativeFunction<WINEVENTPROC>> pfnWinEventProc,
  int idProcess,
  int idThread,
  int dwFlags,
);

typedef _c_IsWinEventHookInstalled = ffi.Int32 Function(
  ffi.Uint64 event,
);

typedef _dart_IsWinEventHookInstalled = int Function(
  int event,
);

typedef _c_UnhookWinEvent = ffi.Int32 Function(
  ffi.Pointer<HWINEVENTHOOK__> hWinEventHook,
);

typedef _dart_UnhookWinEvent = int Function(
  ffi.Pointer<HWINEVENTHOOK__> hWinEventHook,
);

typedef _c_GetGUIThreadInfo = ffi.Int32 Function(
  ffi.Uint64 idThread,
  ffi.Pointer<LPGUITHREADINFO> pgui,
);

typedef _dart_GetGUIThreadInfo = int Function(
  int idThread,
  ffi.Pointer<LPGUITHREADINFO> pgui,
);

typedef _c_BlockInput = ffi.Int32 Function(
  ffi.Int32 fBlockIt,
);

typedef _dart_BlockInput = int Function(
  int fBlockIt,
);

typedef _c_SetProcessDPIAware = ffi.Int32 Function();

typedef _dart_SetProcessDPIAware = int Function();

typedef _c_IsProcessDPIAware = ffi.Int32 Function();

typedef _dart_IsProcessDPIAware = int Function();

typedef _c_SetThreadDpiAwarenessContext = ffi.Pointer<DPI_AWARENESS_CONTEXT__>
    Function(
  ffi.Pointer<DPI_AWARENESS_CONTEXT__> dpiContext,
);

typedef _dart_SetThreadDpiAwarenessContext
    = ffi.Pointer<DPI_AWARENESS_CONTEXT__> Function(
  ffi.Pointer<DPI_AWARENESS_CONTEXT__> dpiContext,
);

typedef _c_GetThreadDpiAwarenessContext = ffi.Pointer<DPI_AWARENESS_CONTEXT__>
    Function();

typedef _dart_GetThreadDpiAwarenessContext
    = ffi.Pointer<DPI_AWARENESS_CONTEXT__> Function();

typedef _c_GetWindowDpiAwarenessContext = ffi.Pointer<DPI_AWARENESS_CONTEXT__>
    Function(
  ffi.Pointer<HWND__> hwnd,
);

typedef _dart_GetWindowDpiAwarenessContext
    = ffi.Pointer<DPI_AWARENESS_CONTEXT__> Function(
  ffi.Pointer<HWND__> hwnd,
);

typedef _c_GetAwarenessFromDpiAwarenessContext = ffi.Int32 Function(
  ffi.Pointer<DPI_AWARENESS_CONTEXT__> value,
);

typedef _dart_GetAwarenessFromDpiAwarenessContext = int Function(
  ffi.Pointer<DPI_AWARENESS_CONTEXT__> value,
);

typedef _c_GetDpiFromDpiAwarenessContext = ffi.Uint32 Function(
  ffi.Pointer<DPI_AWARENESS_CONTEXT__> value,
);

typedef _dart_GetDpiFromDpiAwarenessContext = int Function(
  ffi.Pointer<DPI_AWARENESS_CONTEXT__> value,
);

typedef _c_AreDpiAwarenessContextsEqual = ffi.Int32 Function(
  ffi.Pointer<DPI_AWARENESS_CONTEXT__> dpiContextA,
  ffi.Pointer<DPI_AWARENESS_CONTEXT__> dpiContextB,
);

typedef _dart_AreDpiAwarenessContextsEqual = int Function(
  ffi.Pointer<DPI_AWARENESS_CONTEXT__> dpiContextA,
  ffi.Pointer<DPI_AWARENESS_CONTEXT__> dpiContextB,
);

typedef _c_IsValidDpiAwarenessContext = ffi.Int32 Function(
  ffi.Pointer<DPI_AWARENESS_CONTEXT__> value,
);

typedef _dart_IsValidDpiAwarenessContext = int Function(
  ffi.Pointer<DPI_AWARENESS_CONTEXT__> value,
);

typedef _c_GetDpiForWindow = ffi.Uint32 Function(
  ffi.Pointer<HWND__> hwnd,
);

typedef _dart_GetDpiForWindow = int Function(
  ffi.Pointer<HWND__> hwnd,
);

typedef _c_GetDpiForSystem = ffi.Uint32 Function();

typedef _dart_GetDpiForSystem = int Function();

typedef _c_GetSystemDpiForProcess = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> hProcess,
);

typedef _dart_GetSystemDpiForProcess = int Function(
  ffi.Pointer<ffi.Void> hProcess,
);

typedef _c_EnableNonClientDpiScaling = ffi.Int32 Function(
  ffi.Pointer<HWND__> hwnd,
);

typedef _dart_EnableNonClientDpiScaling = int Function(
  ffi.Pointer<HWND__> hwnd,
);

typedef _c_InheritWindowMonitor = ffi.Int32 Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Pointer<HWND__> hwndInherit,
);

typedef _dart_InheritWindowMonitor = int Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Pointer<HWND__> hwndInherit,
);

typedef _c_SetProcessDpiAwarenessContext = ffi.Int32 Function(
  ffi.Pointer<DPI_AWARENESS_CONTEXT__> value,
);

typedef _dart_SetProcessDpiAwarenessContext = int Function(
  ffi.Pointer<DPI_AWARENESS_CONTEXT__> value,
);

typedef _c_GetDpiAwarenessContextForProcess
    = ffi.Pointer<DPI_AWARENESS_CONTEXT__> Function(
  ffi.Pointer<ffi.Void> hProcess,
);

typedef _dart_GetDpiAwarenessContextForProcess
    = ffi.Pointer<DPI_AWARENESS_CONTEXT__> Function(
  ffi.Pointer<ffi.Void> hProcess,
);

typedef _c_SetThreadDpiHostingBehavior = ffi.Int32 Function(
  ffi.Int32 value,
);

typedef _dart_SetThreadDpiHostingBehavior = int Function(
  int value,
);

typedef _c_GetThreadDpiHostingBehavior = ffi.Int32 Function();

typedef _dart_GetThreadDpiHostingBehavior = int Function();

typedef _c_GetWindowDpiHostingBehavior = ffi.Int32 Function(
  ffi.Pointer<HWND__> hwnd,
);

typedef _dart_GetWindowDpiHostingBehavior = int Function(
  ffi.Pointer<HWND__> hwnd,
);

typedef _c_GetWindowModuleFileNameA = ffi.Uint32 Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Pointer<ffi.Int8> pszFileName,
  ffi.Uint32 cchFileNameMax,
);

typedef _dart_GetWindowModuleFileNameA = int Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Pointer<ffi.Int8> pszFileName,
  int cchFileNameMax,
);

typedef _c_GetWindowModuleFileNameW = ffi.Uint32 Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Pointer<ffi.Uint16> pszFileName,
  ffi.Uint32 cchFileNameMax,
);

typedef _dart_GetWindowModuleFileNameW = int Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Pointer<ffi.Uint16> pszFileName,
  int cchFileNameMax,
);

typedef _c_GetCursorInfo = ffi.Int32 Function(
  ffi.Pointer<LPCURSORINFO> pci,
);

typedef _dart_GetCursorInfo = int Function(
  ffi.Pointer<LPCURSORINFO> pci,
);

typedef _c_GetWindowInfo = ffi.Int32 Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Pointer<LPWINDOWINFO> pwi,
);

typedef _dart_GetWindowInfo = int Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Pointer<LPWINDOWINFO> pwi,
);

typedef _c_GetTitleBarInfo = ffi.Int32 Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Pointer<LPTITLEBARINFO> pti,
);

typedef _dart_GetTitleBarInfo = int Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Pointer<LPTITLEBARINFO> pti,
);

typedef _c_GetMenuBarInfo = ffi.Int32 Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Int64 idObject,
  ffi.Int64 idItem,
  ffi.Pointer<LPMENUBARINFO> pmbi,
);

typedef _dart_GetMenuBarInfo = int Function(
  ffi.Pointer<HWND__> hwnd,
  int idObject,
  int idItem,
  ffi.Pointer<LPMENUBARINFO> pmbi,
);

typedef _c_GetScrollBarInfo = ffi.Int32 Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Int64 idObject,
  ffi.Pointer<LPSCROLLBARINFO> psbi,
);

typedef _dart_GetScrollBarInfo = int Function(
  ffi.Pointer<HWND__> hwnd,
  int idObject,
  ffi.Pointer<LPSCROLLBARINFO> psbi,
);

typedef _c_GetComboBoxInfo = ffi.Int32 Function(
  ffi.Pointer<HWND__> hwndCombo,
  ffi.Pointer<LPCOMBOBOXINFO> pcbi,
);

typedef _dart_GetComboBoxInfo = int Function(
  ffi.Pointer<HWND__> hwndCombo,
  ffi.Pointer<LPCOMBOBOXINFO> pcbi,
);

typedef _c_GetAncestor = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Uint32 gaFlags,
);

typedef _dart_GetAncestor = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HWND__> hwnd,
  int gaFlags,
);

typedef _c_RealGetWindowClassA = ffi.Uint32 Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Pointer<ffi.Int8> ptszClassName,
  ffi.Uint32 cchClassNameMax,
);

typedef _dart_RealGetWindowClassA = int Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Pointer<ffi.Int8> ptszClassName,
  int cchClassNameMax,
);

typedef _c_RealGetWindowClassW = ffi.Uint32 Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Pointer<ffi.Uint16> ptszClassName,
  ffi.Uint32 cchClassNameMax,
);

typedef _dart_RealGetWindowClassW = int Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Pointer<ffi.Uint16> ptszClassName,
  int cchClassNameMax,
);

typedef _c_GetAltTabInfoA = ffi.Int32 Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Int32 iItem,
  ffi.Pointer<LPALTTABINFO> pati,
  ffi.Pointer<ffi.Int8> pszItemText,
  ffi.Uint32 cchItemText,
);

typedef _dart_GetAltTabInfoA = int Function(
  ffi.Pointer<HWND__> hwnd,
  int iItem,
  ffi.Pointer<LPALTTABINFO> pati,
  ffi.Pointer<ffi.Int8> pszItemText,
  int cchItemText,
);

typedef _c_GetAltTabInfoW = ffi.Int32 Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Int32 iItem,
  ffi.Pointer<LPALTTABINFO> pati,
  ffi.Pointer<ffi.Uint16> pszItemText,
  ffi.Uint32 cchItemText,
);

typedef _dart_GetAltTabInfoW = int Function(
  ffi.Pointer<HWND__> hwnd,
  int iItem,
  ffi.Pointer<LPALTTABINFO> pati,
  ffi.Pointer<ffi.Uint16> pszItemText,
  int cchItemText,
);

typedef _c_GetListBoxInfo = ffi.Uint64 Function(
  ffi.Pointer<HWND__> hwnd,
);

typedef _dart_GetListBoxInfo = int Function(
  ffi.Pointer<HWND__> hwnd,
);

typedef _c_LockWorkStation = ffi.Int32 Function();

typedef _dart_LockWorkStation = int Function();

typedef _c_UserHandleGrantAccess = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hUserHandle,
  ffi.Pointer<ffi.Void> hJob,
  ffi.Int32 bGrant,
);

typedef _dart_UserHandleGrantAccess = int Function(
  ffi.Pointer<ffi.Void> hUserHandle,
  ffi.Pointer<ffi.Void> hJob,
  int bGrant,
);

typedef _c_GetRawInputData = ffi.Uint32 Function(
  ffi.Pointer<HRAWINPUT__> hRawInput,
  ffi.Uint32 uiCommand,
  ffi.Pointer<ffi.Void> pData,
  ffi.Pointer<ffi.Uint32> pcbSize,
  ffi.Uint32 cbSizeHeader,
);

typedef _dart_GetRawInputData = int Function(
  ffi.Pointer<HRAWINPUT__> hRawInput,
  int uiCommand,
  ffi.Pointer<ffi.Void> pData,
  ffi.Pointer<ffi.Uint32> pcbSize,
  int cbSizeHeader,
);

typedef _c_GetRawInputDeviceInfoA = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> hDevice,
  ffi.Uint32 uiCommand,
  ffi.Pointer<ffi.Void> pData,
  ffi.Pointer<ffi.Uint32> pcbSize,
);

typedef _dart_GetRawInputDeviceInfoA = int Function(
  ffi.Pointer<ffi.Void> hDevice,
  int uiCommand,
  ffi.Pointer<ffi.Void> pData,
  ffi.Pointer<ffi.Uint32> pcbSize,
);

typedef _c_GetRawInputDeviceInfoW = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void> hDevice,
  ffi.Uint32 uiCommand,
  ffi.Pointer<ffi.Void> pData,
  ffi.Pointer<ffi.Uint32> pcbSize,
);

typedef _dart_GetRawInputDeviceInfoW = int Function(
  ffi.Pointer<ffi.Void> hDevice,
  int uiCommand,
  ffi.Pointer<ffi.Void> pData,
  ffi.Pointer<ffi.Uint32> pcbSize,
);

typedef _c_GetRawInputBuffer = ffi.Uint32 Function(
  ffi.Pointer<LPRAWINPUT> pData,
  ffi.Pointer<ffi.Uint32> pcbSize,
  ffi.Uint32 cbSizeHeader,
);

typedef _dart_GetRawInputBuffer = int Function(
  ffi.Pointer<LPRAWINPUT> pData,
  ffi.Pointer<ffi.Uint32> pcbSize,
  int cbSizeHeader,
);

typedef _c_RegisterRawInputDevices = ffi.Int32 Function(
  ffi.Pointer<LPRAWINPUTDEVICE> pRawInputDevices,
  ffi.Uint32 uiNumDevices,
  ffi.Uint32 cbSize,
);

typedef _dart_RegisterRawInputDevices = int Function(
  ffi.Pointer<LPRAWINPUTDEVICE> pRawInputDevices,
  int uiNumDevices,
  int cbSize,
);

typedef _c_GetRegisteredRawInputDevices = ffi.Uint32 Function(
  ffi.Pointer<LPRAWINPUTDEVICE> pRawInputDevices,
  ffi.Pointer<ffi.Uint32> puiNumDevices,
  ffi.Uint32 cbSize,
);

typedef _dart_GetRegisteredRawInputDevices = int Function(
  ffi.Pointer<LPRAWINPUTDEVICE> pRawInputDevices,
  ffi.Pointer<ffi.Uint32> puiNumDevices,
  int cbSize,
);

typedef _c_GetRawInputDeviceList = ffi.Uint32 Function(
  ffi.Pointer<PRAWINPUTDEVICELIST> pRawInputDeviceList,
  ffi.Pointer<ffi.Uint32> puiNumDevices,
  ffi.Uint32 cbSize,
);

typedef _dart_GetRawInputDeviceList = int Function(
  ffi.Pointer<PRAWINPUTDEVICELIST> pRawInputDeviceList,
  ffi.Pointer<ffi.Uint32> puiNumDevices,
  int cbSize,
);

typedef _c_DefRawInputProc = ffi.Int64 Function(
  ffi.Pointer<ffi.Pointer<LPRAWINPUT>> paRawInput,
  ffi.Int32 nInput,
  ffi.Uint32 cbSizeHeader,
);

typedef _dart_DefRawInputProc = int Function(
  ffi.Pointer<ffi.Pointer<LPRAWINPUT>> paRawInput,
  int nInput,
  int cbSizeHeader,
);

typedef _c_GetPointerDevices = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint32> deviceCount,
  ffi.Pointer<POINTER_DEVICE_INFO> pointerDevices,
);

typedef _dart_GetPointerDevices = int Function(
  ffi.Pointer<ffi.Uint32> deviceCount,
  ffi.Pointer<POINTER_DEVICE_INFO> pointerDevices,
);

typedef _c_GetPointerDevice = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> device,
  ffi.Pointer<POINTER_DEVICE_INFO> pointerDevice,
);

typedef _dart_GetPointerDevice = int Function(
  ffi.Pointer<ffi.Void> device,
  ffi.Pointer<POINTER_DEVICE_INFO> pointerDevice,
);

typedef _c_GetPointerDeviceProperties = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> device,
  ffi.Pointer<ffi.Uint32> propertyCount,
  ffi.Pointer<POINTER_DEVICE_PROPERTY> pointerProperties,
);

typedef _dart_GetPointerDeviceProperties = int Function(
  ffi.Pointer<ffi.Void> device,
  ffi.Pointer<ffi.Uint32> propertyCount,
  ffi.Pointer<POINTER_DEVICE_PROPERTY> pointerProperties,
);

typedef _c_RegisterPointerDeviceNotifications = ffi.Int32 Function(
  ffi.Pointer<HWND__> window,
  ffi.Int32 notifyRange,
);

typedef _dart_RegisterPointerDeviceNotifications = int Function(
  ffi.Pointer<HWND__> window,
  int notifyRange,
);

typedef _c_GetPointerDeviceRects = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> device,
  ffi.Pointer<LPRECT> pointerDeviceRect,
  ffi.Pointer<LPRECT> displayRect,
);

typedef _dart_GetPointerDeviceRects = int Function(
  ffi.Pointer<ffi.Void> device,
  ffi.Pointer<LPRECT> pointerDeviceRect,
  ffi.Pointer<LPRECT> displayRect,
);

typedef _c_GetPointerDeviceCursors = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> device,
  ffi.Pointer<ffi.Uint32> cursorCount,
  ffi.Pointer<POINTER_DEVICE_CURSOR_INFO> deviceCursors,
);

typedef _dart_GetPointerDeviceCursors = int Function(
  ffi.Pointer<ffi.Void> device,
  ffi.Pointer<ffi.Uint32> cursorCount,
  ffi.Pointer<POINTER_DEVICE_CURSOR_INFO> deviceCursors,
);

typedef _c_GetRawPointerDeviceData = ffi.Int32 Function(
  ffi.Uint32 pointerId,
  ffi.Uint32 historyCount,
  ffi.Uint32 propertiesCount,
  ffi.Pointer<POINTER_DEVICE_PROPERTY> pProperties,
  ffi.Pointer<ffi.Int64> pValues,
);

typedef _dart_GetRawPointerDeviceData = int Function(
  int pointerId,
  int historyCount,
  int propertiesCount,
  ffi.Pointer<POINTER_DEVICE_PROPERTY> pProperties,
  ffi.Pointer<ffi.Int64> pValues,
);

typedef _c_ChangeWindowMessageFilter = ffi.Int32 Function(
  ffi.Uint32 message,
  ffi.Uint64 dwFlag,
);

typedef _dart_ChangeWindowMessageFilter = int Function(
  int message,
  int dwFlag,
);

typedef _c_ChangeWindowMessageFilterEx = ffi.Int32 Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Uint32 message,
  ffi.Uint64 action,
  ffi.Pointer<PCHANGEFILTERSTRUCT> pChangeFilterStruct,
);

typedef _dart_ChangeWindowMessageFilterEx = int Function(
  ffi.Pointer<HWND__> hwnd,
  int message,
  int action,
  ffi.Pointer<PCHANGEFILTERSTRUCT> pChangeFilterStruct,
);

typedef _c_GetGestureInfo = ffi.Int32 Function(
  ffi.Pointer<HGESTUREINFO__> hGestureInfo,
  ffi.Pointer<PGESTUREINFO> pGestureInfo,
);

typedef _dart_GetGestureInfo = int Function(
  ffi.Pointer<HGESTUREINFO__> hGestureInfo,
  ffi.Pointer<PGESTUREINFO> pGestureInfo,
);

typedef _c_GetGestureExtraArgs = ffi.Int32 Function(
  ffi.Pointer<HGESTUREINFO__> hGestureInfo,
  ffi.Uint32 cbExtraArgs,
  ffi.Pointer<ffi.Uint8> pExtraArgs,
);

typedef _dart_GetGestureExtraArgs = int Function(
  ffi.Pointer<HGESTUREINFO__> hGestureInfo,
  int cbExtraArgs,
  ffi.Pointer<ffi.Uint8> pExtraArgs,
);

typedef _c_CloseGestureInfoHandle = ffi.Int32 Function(
  ffi.Pointer<HGESTUREINFO__> hGestureInfo,
);

typedef _dart_CloseGestureInfoHandle = int Function(
  ffi.Pointer<HGESTUREINFO__> hGestureInfo,
);

typedef _c_SetGestureConfig = ffi.Int32 Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Uint64 dwReserved,
  ffi.Uint32 cIDs,
  ffi.Pointer<PGESTURECONFIG> pGestureConfig,
  ffi.Uint32 cbSize,
);

typedef _dart_SetGestureConfig = int Function(
  ffi.Pointer<HWND__> hwnd,
  int dwReserved,
  int cIDs,
  ffi.Pointer<PGESTURECONFIG> pGestureConfig,
  int cbSize,
);

typedef _c_GetGestureConfig = ffi.Int32 Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Uint64 dwReserved,
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Uint32> pcIDs,
  ffi.Pointer<PGESTURECONFIG> pGestureConfig,
  ffi.Uint32 cbSize,
);

typedef _dart_GetGestureConfig = int Function(
  ffi.Pointer<HWND__> hwnd,
  int dwReserved,
  int dwFlags,
  ffi.Pointer<ffi.Uint32> pcIDs,
  ffi.Pointer<PGESTURECONFIG> pGestureConfig,
  int cbSize,
);

typedef _c_ShutdownBlockReasonCreate = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Uint16> pwszReason,
);

typedef _dart_ShutdownBlockReasonCreate = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Uint16> pwszReason,
);

typedef _c_ShutdownBlockReasonQuery = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Uint16> pwszBuff,
  ffi.Pointer<ffi.Uint64> pcchBuff,
);

typedef _dart_ShutdownBlockReasonQuery = int Function(
  ffi.Pointer<HWND__> hWnd,
  ffi.Pointer<ffi.Uint16> pwszBuff,
  ffi.Pointer<ffi.Uint64> pcchBuff,
);

typedef _c_ShutdownBlockReasonDestroy = ffi.Int32 Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _dart_ShutdownBlockReasonDestroy = int Function(
  ffi.Pointer<HWND__> hWnd,
);

typedef _c_GetCurrentInputMessageSource = ffi.Int32 Function(
  ffi.Pointer<INPUT_MESSAGE_SOURCE> inputMessageSource,
);

typedef _dart_GetCurrentInputMessageSource = int Function(
  ffi.Pointer<INPUT_MESSAGE_SOURCE> inputMessageSource,
);

typedef _c_GetCIMSSM = ffi.Int32 Function(
  ffi.Pointer<INPUT_MESSAGE_SOURCE> inputMessageSource,
);

typedef _dart_GetCIMSSM = int Function(
  ffi.Pointer<INPUT_MESSAGE_SOURCE> inputMessageSource,
);

typedef _c_GetAutoRotationState = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> pState,
);

typedef _dart_GetAutoRotationState = int Function(
  ffi.Pointer<ffi.Int32> pState,
);

typedef _c_GetDisplayAutoRotationPreferences = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> pOrientation,
);

typedef _dart_GetDisplayAutoRotationPreferences = int Function(
  ffi.Pointer<ffi.Int32> pOrientation,
);

typedef _c_GetDisplayAutoRotationPreferencesByProcessId = ffi.Int32 Function(
  ffi.Uint64 dwProcessId,
  ffi.Pointer<ffi.Int32> pOrientation,
  ffi.Pointer<ffi.Int32> fRotateScreen,
);

typedef _dart_GetDisplayAutoRotationPreferencesByProcessId = int Function(
  int dwProcessId,
  ffi.Pointer<ffi.Int32> pOrientation,
  ffi.Pointer<ffi.Int32> fRotateScreen,
);

typedef _c_SetDisplayAutoRotationPreferences = ffi.Int32 Function(
  ffi.Int32 orientation,
);

typedef _dart_SetDisplayAutoRotationPreferences = int Function(
  int orientation,
);

typedef _c_IsImmersiveProcess = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hProcess,
);

typedef _dart_IsImmersiveProcess = int Function(
  ffi.Pointer<ffi.Void> hProcess,
);

typedef _c_SetProcessRestrictionExemption = ffi.Int32 Function(
  ffi.Int32 fEnableExemption,
);

typedef _dart_SetProcessRestrictionExemption = int Function(
  int fEnableExemption,
);

typedef _c_GetDateFormatA = ffi.Int32 Function(
  ffi.Uint64 Locale,
  ffi.Uint64 dwFlags,
  ffi.Pointer<LPSYSTEMTIME> lpDate,
  ffi.Pointer<ffi.Int8> lpFormat,
  ffi.Pointer<ffi.Int8> lpDateStr,
  ffi.Int32 cchDate,
);

typedef _dart_GetDateFormatA = int Function(
  int Locale,
  int dwFlags,
  ffi.Pointer<LPSYSTEMTIME> lpDate,
  ffi.Pointer<ffi.Int8> lpFormat,
  ffi.Pointer<ffi.Int8> lpDateStr,
  int cchDate,
);

typedef _c_GetDateFormatW = ffi.Int32 Function(
  ffi.Uint64 Locale,
  ffi.Uint64 dwFlags,
  ffi.Pointer<LPSYSTEMTIME> lpDate,
  ffi.Pointer<ffi.Uint16> lpFormat,
  ffi.Pointer<ffi.Uint16> lpDateStr,
  ffi.Int32 cchDate,
);

typedef _dart_GetDateFormatW = int Function(
  int Locale,
  int dwFlags,
  ffi.Pointer<LPSYSTEMTIME> lpDate,
  ffi.Pointer<ffi.Uint16> lpFormat,
  ffi.Pointer<ffi.Uint16> lpDateStr,
  int cchDate,
);

typedef _c_GetTimeFormatA = ffi.Int32 Function(
  ffi.Uint64 Locale,
  ffi.Uint64 dwFlags,
  ffi.Pointer<LPSYSTEMTIME> lpTime,
  ffi.Pointer<ffi.Int8> lpFormat,
  ffi.Pointer<ffi.Int8> lpTimeStr,
  ffi.Int32 cchTime,
);

typedef _dart_GetTimeFormatA = int Function(
  int Locale,
  int dwFlags,
  ffi.Pointer<LPSYSTEMTIME> lpTime,
  ffi.Pointer<ffi.Int8> lpFormat,
  ffi.Pointer<ffi.Int8> lpTimeStr,
  int cchTime,
);

typedef _c_GetTimeFormatW = ffi.Int32 Function(
  ffi.Uint64 Locale,
  ffi.Uint64 dwFlags,
  ffi.Pointer<LPSYSTEMTIME> lpTime,
  ffi.Pointer<ffi.Uint16> lpFormat,
  ffi.Pointer<ffi.Uint16> lpTimeStr,
  ffi.Int32 cchTime,
);

typedef _dart_GetTimeFormatW = int Function(
  int Locale,
  int dwFlags,
  ffi.Pointer<LPSYSTEMTIME> lpTime,
  ffi.Pointer<ffi.Uint16> lpFormat,
  ffi.Pointer<ffi.Uint16> lpTimeStr,
  int cchTime,
);

typedef _c_GetTimeFormatEx = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpLocaleName,
  ffi.Uint64 dwFlags,
  ffi.Pointer<LPSYSTEMTIME> lpTime,
  ffi.Pointer<ffi.Uint16> lpFormat,
  ffi.Pointer<ffi.Uint16> lpTimeStr,
  ffi.Int32 cchTime,
);

typedef _dart_GetTimeFormatEx = int Function(
  ffi.Pointer<ffi.Uint16> lpLocaleName,
  int dwFlags,
  ffi.Pointer<LPSYSTEMTIME> lpTime,
  ffi.Pointer<ffi.Uint16> lpFormat,
  ffi.Pointer<ffi.Uint16> lpTimeStr,
  int cchTime,
);

typedef _c_GetDateFormatEx = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpLocaleName,
  ffi.Uint64 dwFlags,
  ffi.Pointer<LPSYSTEMTIME> lpDate,
  ffi.Pointer<ffi.Uint16> lpFormat,
  ffi.Pointer<ffi.Uint16> lpDateStr,
  ffi.Int32 cchDate,
  ffi.Pointer<ffi.Uint16> lpCalendar,
);

typedef _dart_GetDateFormatEx = int Function(
  ffi.Pointer<ffi.Uint16> lpLocaleName,
  int dwFlags,
  ffi.Pointer<LPSYSTEMTIME> lpDate,
  ffi.Pointer<ffi.Uint16> lpFormat,
  ffi.Pointer<ffi.Uint16> lpDateStr,
  int cchDate,
  ffi.Pointer<ffi.Uint16> lpCalendar,
);

typedef _c_GetDurationFormatEx = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpLocaleName,
  ffi.Uint64 dwFlags,
  ffi.Pointer<LPSYSTEMTIME> lpDuration,
  ffi.Uint64 ullDuration,
  ffi.Pointer<ffi.Uint16> lpFormat,
  ffi.Pointer<ffi.Uint16> lpDurationStr,
  ffi.Int32 cchDuration,
);

typedef _dart_GetDurationFormatEx = int Function(
  ffi.Pointer<ffi.Uint16> lpLocaleName,
  int dwFlags,
  ffi.Pointer<LPSYSTEMTIME> lpDuration,
  int ullDuration,
  ffi.Pointer<ffi.Uint16> lpFormat,
  ffi.Pointer<ffi.Uint16> lpDurationStr,
  int cchDuration,
);

typedef _c_CompareStringEx = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpLocaleName,
  ffi.Uint64 dwCmpFlags,
  ffi.Pointer<ffi.Uint16> lpString1,
  ffi.Int32 cchCount1,
  ffi.Pointer<ffi.Uint16> lpString2,
  ffi.Int32 cchCount2,
  ffi.Pointer<LPNLSVERSIONINFO> lpVersionInformation,
  ffi.Pointer<ffi.Void> lpReserved,
  ffi.Int64 lParam,
);

typedef _dart_CompareStringEx = int Function(
  ffi.Pointer<ffi.Uint16> lpLocaleName,
  int dwCmpFlags,
  ffi.Pointer<ffi.Uint16> lpString1,
  int cchCount1,
  ffi.Pointer<ffi.Uint16> lpString2,
  int cchCount2,
  ffi.Pointer<LPNLSVERSIONINFO> lpVersionInformation,
  ffi.Pointer<ffi.Void> lpReserved,
  int lParam,
);

typedef _c_CompareStringOrdinal = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpString1,
  ffi.Int32 cchCount1,
  ffi.Pointer<ffi.Uint16> lpString2,
  ffi.Int32 cchCount2,
  ffi.Int32 bIgnoreCase,
);

typedef _dart_CompareStringOrdinal = int Function(
  ffi.Pointer<ffi.Uint16> lpString1,
  int cchCount1,
  ffi.Pointer<ffi.Uint16> lpString2,
  int cchCount2,
  int bIgnoreCase,
);

typedef _c_CompareStringW = ffi.Int32 Function(
  ffi.Uint64 Locale,
  ffi.Uint64 dwCmpFlags,
  ffi.Pointer<ffi.Uint16> lpString1,
  ffi.Int32 cchCount1,
  ffi.Pointer<ffi.Uint16> lpString2,
  ffi.Int32 cchCount2,
);

typedef _dart_CompareStringW = int Function(
  int Locale,
  int dwCmpFlags,
  ffi.Pointer<ffi.Uint16> lpString1,
  int cchCount1,
  ffi.Pointer<ffi.Uint16> lpString2,
  int cchCount2,
);

typedef _c_FoldStringW = ffi.Int32 Function(
  ffi.Uint64 dwMapFlags,
  ffi.Pointer<ffi.Uint16> lpSrcStr,
  ffi.Int32 cchSrc,
  ffi.Pointer<ffi.Uint16> lpDestStr,
  ffi.Int32 cchDest,
);

typedef _dart_FoldStringW = int Function(
  int dwMapFlags,
  ffi.Pointer<ffi.Uint16> lpSrcStr,
  int cchSrc,
  ffi.Pointer<ffi.Uint16> lpDestStr,
  int cchDest,
);

typedef _c_GetStringTypeExW = ffi.Int32 Function(
  ffi.Uint64 Locale,
  ffi.Uint64 dwInfoType,
  ffi.Pointer<ffi.Uint16> lpSrcStr,
  ffi.Int32 cchSrc,
  ffi.Pointer<ffi.Uint16> lpCharType,
);

typedef _dart_GetStringTypeExW = int Function(
  int Locale,
  int dwInfoType,
  ffi.Pointer<ffi.Uint16> lpSrcStr,
  int cchSrc,
  ffi.Pointer<ffi.Uint16> lpCharType,
);

typedef _c_GetStringTypeW = ffi.Int32 Function(
  ffi.Uint64 dwInfoType,
  ffi.Pointer<ffi.Uint16> lpSrcStr,
  ffi.Int32 cchSrc,
  ffi.Pointer<ffi.Uint16> lpCharType,
);

typedef _dart_GetStringTypeW = int Function(
  int dwInfoType,
  ffi.Pointer<ffi.Uint16> lpSrcStr,
  int cchSrc,
  ffi.Pointer<ffi.Uint16> lpCharType,
);

typedef _c_MultiByteToWideChar = ffi.Int32 Function(
  ffi.Uint32 CodePage,
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Int8> lpMultiByteStr,
  ffi.Int32 cbMultiByte,
  ffi.Pointer<ffi.Uint16> lpWideCharStr,
  ffi.Int32 cchWideChar,
);

typedef _dart_MultiByteToWideChar = int Function(
  int CodePage,
  int dwFlags,
  ffi.Pointer<ffi.Int8> lpMultiByteStr,
  int cbMultiByte,
  ffi.Pointer<ffi.Uint16> lpWideCharStr,
  int cchWideChar,
);

typedef _c_WideCharToMultiByte = ffi.Int32 Function(
  ffi.Uint32 CodePage,
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Uint16> lpWideCharStr,
  ffi.Int32 cchWideChar,
  ffi.Pointer<ffi.Int8> lpMultiByteStr,
  ffi.Int32 cbMultiByte,
  ffi.Pointer<ffi.Int8> lpDefaultChar,
  ffi.Pointer<ffi.Int32> lpUsedDefaultChar,
);

typedef _dart_WideCharToMultiByte = int Function(
  int CodePage,
  int dwFlags,
  ffi.Pointer<ffi.Uint16> lpWideCharStr,
  int cchWideChar,
  ffi.Pointer<ffi.Int8> lpMultiByteStr,
  int cbMultiByte,
  ffi.Pointer<ffi.Int8> lpDefaultChar,
  ffi.Pointer<ffi.Int32> lpUsedDefaultChar,
);

typedef _c_IsValidCodePage = ffi.Int32 Function(
  ffi.Uint32 CodePage,
);

typedef _dart_IsValidCodePage = int Function(
  int CodePage,
);

typedef _c_GetACP = ffi.Uint32 Function();

typedef _dart_GetACP = int Function();

typedef _c_GetOEMCP = ffi.Uint32 Function();

typedef _dart_GetOEMCP = int Function();

typedef _c_GetCPInfo = ffi.Int32 Function(
  ffi.Uint32 CodePage,
  ffi.Pointer<LPCPINFO> lpCPInfo,
);

typedef _dart_GetCPInfo = int Function(
  int CodePage,
  ffi.Pointer<LPCPINFO> lpCPInfo,
);

typedef _c_GetCPInfoExA = ffi.Int32 Function(
  ffi.Uint32 CodePage,
  ffi.Uint64 dwFlags,
  ffi.Pointer<LPCPINFOEXA> lpCPInfoEx,
);

typedef _dart_GetCPInfoExA = int Function(
  int CodePage,
  int dwFlags,
  ffi.Pointer<LPCPINFOEXA> lpCPInfoEx,
);

typedef _c_GetCPInfoExW = ffi.Int32 Function(
  ffi.Uint32 CodePage,
  ffi.Uint64 dwFlags,
  ffi.Pointer<LPCPINFOEXW> lpCPInfoEx,
);

typedef _dart_GetCPInfoExW = int Function(
  int CodePage,
  int dwFlags,
  ffi.Pointer<LPCPINFOEXW> lpCPInfoEx,
);

typedef _c_CompareStringA = ffi.Int32 Function(
  ffi.Uint64 Locale,
  ffi.Uint64 dwCmpFlags,
  ffi.Pointer<ffi.Int8> lpString1,
  ffi.Int32 cchCount1,
  ffi.Pointer<ffi.Int8> lpString2,
  ffi.Int32 cchCount2,
);

typedef _dart_CompareStringA = int Function(
  int Locale,
  int dwCmpFlags,
  ffi.Pointer<ffi.Int8> lpString1,
  int cchCount1,
  ffi.Pointer<ffi.Int8> lpString2,
  int cchCount2,
);

typedef _c_FindNLSString = ffi.Int32 Function(
  ffi.Uint64 Locale,
  ffi.Uint64 dwFindNLSStringFlags,
  ffi.Pointer<ffi.Uint16> lpStringSource,
  ffi.Int32 cchSource,
  ffi.Pointer<ffi.Uint16> lpStringValue,
  ffi.Int32 cchValue,
  ffi.Pointer<ffi.Int32> pcchFound,
);

typedef _dart_FindNLSString = int Function(
  int Locale,
  int dwFindNLSStringFlags,
  ffi.Pointer<ffi.Uint16> lpStringSource,
  int cchSource,
  ffi.Pointer<ffi.Uint16> lpStringValue,
  int cchValue,
  ffi.Pointer<ffi.Int32> pcchFound,
);

typedef _c_LCMapStringW = ffi.Int32 Function(
  ffi.Uint64 Locale,
  ffi.Uint64 dwMapFlags,
  ffi.Pointer<ffi.Uint16> lpSrcStr,
  ffi.Int32 cchSrc,
  ffi.Pointer<ffi.Uint16> lpDestStr,
  ffi.Int32 cchDest,
);

typedef _dart_LCMapStringW = int Function(
  int Locale,
  int dwMapFlags,
  ffi.Pointer<ffi.Uint16> lpSrcStr,
  int cchSrc,
  ffi.Pointer<ffi.Uint16> lpDestStr,
  int cchDest,
);

typedef _c_LCMapStringA = ffi.Int32 Function(
  ffi.Uint64 Locale,
  ffi.Uint64 dwMapFlags,
  ffi.Pointer<ffi.Int8> lpSrcStr,
  ffi.Int32 cchSrc,
  ffi.Pointer<ffi.Int8> lpDestStr,
  ffi.Int32 cchDest,
);

typedef _dart_LCMapStringA = int Function(
  int Locale,
  int dwMapFlags,
  ffi.Pointer<ffi.Int8> lpSrcStr,
  int cchSrc,
  ffi.Pointer<ffi.Int8> lpDestStr,
  int cchDest,
);

typedef _c_GetLocaleInfoW = ffi.Int32 Function(
  ffi.Uint64 Locale,
  ffi.Uint64 LCType,
  ffi.Pointer<ffi.Uint16> lpLCData,
  ffi.Int32 cchData,
);

typedef _dart_GetLocaleInfoW = int Function(
  int Locale,
  int LCType,
  ffi.Pointer<ffi.Uint16> lpLCData,
  int cchData,
);

typedef _c_GetLocaleInfoA = ffi.Int32 Function(
  ffi.Uint64 Locale,
  ffi.Uint64 LCType,
  ffi.Pointer<ffi.Int8> lpLCData,
  ffi.Int32 cchData,
);

typedef _dart_GetLocaleInfoA = int Function(
  int Locale,
  int LCType,
  ffi.Pointer<ffi.Int8> lpLCData,
  int cchData,
);

typedef _c_SetLocaleInfoA = ffi.Int32 Function(
  ffi.Uint64 Locale,
  ffi.Uint64 LCType,
  ffi.Pointer<ffi.Int8> lpLCData,
);

typedef _dart_SetLocaleInfoA = int Function(
  int Locale,
  int LCType,
  ffi.Pointer<ffi.Int8> lpLCData,
);

typedef _c_SetLocaleInfoW = ffi.Int32 Function(
  ffi.Uint64 Locale,
  ffi.Uint64 LCType,
  ffi.Pointer<ffi.Uint16> lpLCData,
);

typedef _dart_SetLocaleInfoW = int Function(
  int Locale,
  int LCType,
  ffi.Pointer<ffi.Uint16> lpLCData,
);

typedef _c_GetCalendarInfoA = ffi.Int32 Function(
  ffi.Uint64 Locale,
  ffi.Uint64 Calendar,
  ffi.Uint64 CalType,
  ffi.Pointer<ffi.Int8> lpCalData,
  ffi.Int32 cchData,
  ffi.Pointer<ffi.Uint64> lpValue,
);

typedef _dart_GetCalendarInfoA = int Function(
  int Locale,
  int Calendar,
  int CalType,
  ffi.Pointer<ffi.Int8> lpCalData,
  int cchData,
  ffi.Pointer<ffi.Uint64> lpValue,
);

typedef _c_GetCalendarInfoW = ffi.Int32 Function(
  ffi.Uint64 Locale,
  ffi.Uint64 Calendar,
  ffi.Uint64 CalType,
  ffi.Pointer<ffi.Uint16> lpCalData,
  ffi.Int32 cchData,
  ffi.Pointer<ffi.Uint64> lpValue,
);

typedef _dart_GetCalendarInfoW = int Function(
  int Locale,
  int Calendar,
  int CalType,
  ffi.Pointer<ffi.Uint16> lpCalData,
  int cchData,
  ffi.Pointer<ffi.Uint64> lpValue,
);

typedef _c_SetCalendarInfoA = ffi.Int32 Function(
  ffi.Uint64 Locale,
  ffi.Uint64 Calendar,
  ffi.Uint64 CalType,
  ffi.Pointer<ffi.Int8> lpCalData,
);

typedef _dart_SetCalendarInfoA = int Function(
  int Locale,
  int Calendar,
  int CalType,
  ffi.Pointer<ffi.Int8> lpCalData,
);

typedef _c_SetCalendarInfoW = ffi.Int32 Function(
  ffi.Uint64 Locale,
  ffi.Uint64 Calendar,
  ffi.Uint64 CalType,
  ffi.Pointer<ffi.Uint16> lpCalData,
);

typedef _dart_SetCalendarInfoW = int Function(
  int Locale,
  int Calendar,
  int CalType,
  ffi.Pointer<ffi.Uint16> lpCalData,
);

typedef _c_LoadStringByReference = ffi.Int32 Function(
  ffi.Uint64 Flags,
  ffi.Pointer<ffi.Uint16> Language,
  ffi.Pointer<ffi.Uint16> SourceString,
  ffi.Pointer<ffi.Uint16> Buffer,
  ffi.Uint64 cchBuffer,
  ffi.Pointer<ffi.Uint16> Directory,
  ffi.Pointer<ffi.Uint64> pcchBufferOut,
);

typedef _dart_LoadStringByReference = int Function(
  int Flags,
  ffi.Pointer<ffi.Uint16> Language,
  ffi.Pointer<ffi.Uint16> SourceString,
  ffi.Pointer<ffi.Uint16> Buffer,
  int cchBuffer,
  ffi.Pointer<ffi.Uint16> Directory,
  ffi.Pointer<ffi.Uint64> pcchBufferOut,
);

typedef _c_IsDBCSLeadByte = ffi.Int32 Function(
  ffi.Uint8 TestChar,
);

typedef _dart_IsDBCSLeadByte = int Function(
  int TestChar,
);

typedef _c_IsDBCSLeadByteEx = ffi.Int32 Function(
  ffi.Uint32 CodePage,
  ffi.Uint8 TestChar,
);

typedef _dart_IsDBCSLeadByteEx = int Function(
  int CodePage,
  int TestChar,
);

typedef _c_LocaleNameToLCID = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Uint64 dwFlags,
);

typedef _dart_LocaleNameToLCID = int Function(
  ffi.Pointer<ffi.Uint16> lpName,
  int dwFlags,
);

typedef _c_LCIDToLocaleName = ffi.Int32 Function(
  ffi.Uint64 Locale,
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Int32 cchName,
  ffi.Uint64 dwFlags,
);

typedef _dart_LCIDToLocaleName = int Function(
  int Locale,
  ffi.Pointer<ffi.Uint16> lpName,
  int cchName,
  int dwFlags,
);

typedef _c_GetDurationFormat = ffi.Int32 Function(
  ffi.Uint64 Locale,
  ffi.Uint64 dwFlags,
  ffi.Pointer<LPSYSTEMTIME> lpDuration,
  ffi.Uint64 ullDuration,
  ffi.Pointer<ffi.Uint16> lpFormat,
  ffi.Pointer<ffi.Uint16> lpDurationStr,
  ffi.Int32 cchDuration,
);

typedef _dart_GetDurationFormat = int Function(
  int Locale,
  int dwFlags,
  ffi.Pointer<LPSYSTEMTIME> lpDuration,
  int ullDuration,
  ffi.Pointer<ffi.Uint16> lpFormat,
  ffi.Pointer<ffi.Uint16> lpDurationStr,
  int cchDuration,
);

typedef _c_GetNumberFormatA = ffi.Int32 Function(
  ffi.Uint64 Locale,
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Int8> lpValue,
  ffi.Pointer<LPNUMBERFMTA> lpFormat,
  ffi.Pointer<ffi.Int8> lpNumberStr,
  ffi.Int32 cchNumber,
);

typedef _dart_GetNumberFormatA = int Function(
  int Locale,
  int dwFlags,
  ffi.Pointer<ffi.Int8> lpValue,
  ffi.Pointer<LPNUMBERFMTA> lpFormat,
  ffi.Pointer<ffi.Int8> lpNumberStr,
  int cchNumber,
);

typedef _c_GetNumberFormatW = ffi.Int32 Function(
  ffi.Uint64 Locale,
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Uint16> lpValue,
  ffi.Pointer<LPNUMBERFMTW> lpFormat,
  ffi.Pointer<ffi.Uint16> lpNumberStr,
  ffi.Int32 cchNumber,
);

typedef _dart_GetNumberFormatW = int Function(
  int Locale,
  int dwFlags,
  ffi.Pointer<ffi.Uint16> lpValue,
  ffi.Pointer<LPNUMBERFMTW> lpFormat,
  ffi.Pointer<ffi.Uint16> lpNumberStr,
  int cchNumber,
);

typedef _c_GetCurrencyFormatA = ffi.Int32 Function(
  ffi.Uint64 Locale,
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Int8> lpValue,
  ffi.Pointer<LPCURRENCYFMTA> lpFormat,
  ffi.Pointer<ffi.Int8> lpCurrencyStr,
  ffi.Int32 cchCurrency,
);

typedef _dart_GetCurrencyFormatA = int Function(
  int Locale,
  int dwFlags,
  ffi.Pointer<ffi.Int8> lpValue,
  ffi.Pointer<LPCURRENCYFMTA> lpFormat,
  ffi.Pointer<ffi.Int8> lpCurrencyStr,
  int cchCurrency,
);

typedef _c_GetCurrencyFormatW = ffi.Int32 Function(
  ffi.Uint64 Locale,
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Uint16> lpValue,
  ffi.Pointer<LPCURRENCYFMTW> lpFormat,
  ffi.Pointer<ffi.Uint16> lpCurrencyStr,
  ffi.Int32 cchCurrency,
);

typedef _dart_GetCurrencyFormatW = int Function(
  int Locale,
  int dwFlags,
  ffi.Pointer<ffi.Uint16> lpValue,
  ffi.Pointer<LPCURRENCYFMTW> lpFormat,
  ffi.Pointer<ffi.Uint16> lpCurrencyStr,
  int cchCurrency,
);

typedef CALINFO_ENUMPROCA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8>,
);

typedef _c_EnumCalendarInfoA = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<CALINFO_ENUMPROCA>> lpCalInfoEnumProc,
  ffi.Uint64 Locale,
  ffi.Uint64 Calendar,
  ffi.Uint64 CalType,
);

typedef _dart_EnumCalendarInfoA = int Function(
  ffi.Pointer<ffi.NativeFunction<CALINFO_ENUMPROCA>> lpCalInfoEnumProc,
  int Locale,
  int Calendar,
  int CalType,
);

typedef CALINFO_ENUMPROCW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16>,
);

typedef _c_EnumCalendarInfoW = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<CALINFO_ENUMPROCW>> lpCalInfoEnumProc,
  ffi.Uint64 Locale,
  ffi.Uint64 Calendar,
  ffi.Uint64 CalType,
);

typedef _dart_EnumCalendarInfoW = int Function(
  ffi.Pointer<ffi.NativeFunction<CALINFO_ENUMPROCW>> lpCalInfoEnumProc,
  int Locale,
  int Calendar,
  int CalType,
);

typedef CALINFO_ENUMPROCEXA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8>,
  ffi.Uint64,
);

typedef _c_EnumCalendarInfoExA = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<CALINFO_ENUMPROCEXA>> lpCalInfoEnumProcEx,
  ffi.Uint64 Locale,
  ffi.Uint64 Calendar,
  ffi.Uint64 CalType,
);

typedef _dart_EnumCalendarInfoExA = int Function(
  ffi.Pointer<ffi.NativeFunction<CALINFO_ENUMPROCEXA>> lpCalInfoEnumProcEx,
  int Locale,
  int Calendar,
  int CalType,
);

typedef CALINFO_ENUMPROCEXW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16>,
  ffi.Uint64,
);

typedef _c_EnumCalendarInfoExW = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<CALINFO_ENUMPROCEXW>> lpCalInfoEnumProcEx,
  ffi.Uint64 Locale,
  ffi.Uint64 Calendar,
  ffi.Uint64 CalType,
);

typedef _dart_EnumCalendarInfoExW = int Function(
  ffi.Pointer<ffi.NativeFunction<CALINFO_ENUMPROCEXW>> lpCalInfoEnumProcEx,
  int Locale,
  int Calendar,
  int CalType,
);

typedef TIMEFMT_ENUMPROCA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8>,
);

typedef _c_EnumTimeFormatsA = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<TIMEFMT_ENUMPROCA>> lpTimeFmtEnumProc,
  ffi.Uint64 Locale,
  ffi.Uint64 dwFlags,
);

typedef _dart_EnumTimeFormatsA = int Function(
  ffi.Pointer<ffi.NativeFunction<TIMEFMT_ENUMPROCA>> lpTimeFmtEnumProc,
  int Locale,
  int dwFlags,
);

typedef TIMEFMT_ENUMPROCW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16>,
);

typedef _c_EnumTimeFormatsW = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<TIMEFMT_ENUMPROCW>> lpTimeFmtEnumProc,
  ffi.Uint64 Locale,
  ffi.Uint64 dwFlags,
);

typedef _dart_EnumTimeFormatsW = int Function(
  ffi.Pointer<ffi.NativeFunction<TIMEFMT_ENUMPROCW>> lpTimeFmtEnumProc,
  int Locale,
  int dwFlags,
);

typedef DATEFMT_ENUMPROCA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8>,
);

typedef _c_EnumDateFormatsA = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<DATEFMT_ENUMPROCA>> lpDateFmtEnumProc,
  ffi.Uint64 Locale,
  ffi.Uint64 dwFlags,
);

typedef _dart_EnumDateFormatsA = int Function(
  ffi.Pointer<ffi.NativeFunction<DATEFMT_ENUMPROCA>> lpDateFmtEnumProc,
  int Locale,
  int dwFlags,
);

typedef DATEFMT_ENUMPROCW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16>,
);

typedef _c_EnumDateFormatsW = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<DATEFMT_ENUMPROCW>> lpDateFmtEnumProc,
  ffi.Uint64 Locale,
  ffi.Uint64 dwFlags,
);

typedef _dart_EnumDateFormatsW = int Function(
  ffi.Pointer<ffi.NativeFunction<DATEFMT_ENUMPROCW>> lpDateFmtEnumProc,
  int Locale,
  int dwFlags,
);

typedef DATEFMT_ENUMPROCEXA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8>,
  ffi.Uint64,
);

typedef _c_EnumDateFormatsExA = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<DATEFMT_ENUMPROCEXA>> lpDateFmtEnumProcEx,
  ffi.Uint64 Locale,
  ffi.Uint64 dwFlags,
);

typedef _dart_EnumDateFormatsExA = int Function(
  ffi.Pointer<ffi.NativeFunction<DATEFMT_ENUMPROCEXA>> lpDateFmtEnumProcEx,
  int Locale,
  int dwFlags,
);

typedef DATEFMT_ENUMPROCEXW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16>,
  ffi.Uint64,
);

typedef _c_EnumDateFormatsExW = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<DATEFMT_ENUMPROCEXW>> lpDateFmtEnumProcEx,
  ffi.Uint64 Locale,
  ffi.Uint64 dwFlags,
);

typedef _dart_EnumDateFormatsExW = int Function(
  ffi.Pointer<ffi.NativeFunction<DATEFMT_ENUMPROCEXW>> lpDateFmtEnumProcEx,
  int Locale,
  int dwFlags,
);

typedef _c_IsValidLanguageGroup = ffi.Int32 Function(
  ffi.Uint64 LanguageGroup,
  ffi.Uint64 dwFlags,
);

typedef _dart_IsValidLanguageGroup = int Function(
  int LanguageGroup,
  int dwFlags,
);

typedef _c_GetNLSVersion = ffi.Int32 Function(
  ffi.Uint64 Function_1,
  ffi.Uint64 Locale,
  ffi.Pointer<LPNLSVERSIONINFO> lpVersionInformation,
);

typedef _dart_GetNLSVersion = int Function(
  int Function_1,
  int Locale,
  ffi.Pointer<LPNLSVERSIONINFO> lpVersionInformation,
);

typedef _c_IsValidLocale = ffi.Int32 Function(
  ffi.Uint64 Locale,
  ffi.Uint64 dwFlags,
);

typedef _dart_IsValidLocale = int Function(
  int Locale,
  int dwFlags,
);

typedef _c_GetGeoInfoA = ffi.Int32 Function(
  ffi.Int64 Location,
  ffi.Uint64 GeoType,
  ffi.Pointer<ffi.Int8> lpGeoData,
  ffi.Int32 cchData,
  ffi.Uint16 LangId,
);

typedef _dart_GetGeoInfoA = int Function(
  int Location,
  int GeoType,
  ffi.Pointer<ffi.Int8> lpGeoData,
  int cchData,
  int LangId,
);

typedef _c_GetGeoInfoW = ffi.Int32 Function(
  ffi.Int64 Location,
  ffi.Uint64 GeoType,
  ffi.Pointer<ffi.Uint16> lpGeoData,
  ffi.Int32 cchData,
  ffi.Uint16 LangId,
);

typedef _dart_GetGeoInfoW = int Function(
  int Location,
  int GeoType,
  ffi.Pointer<ffi.Uint16> lpGeoData,
  int cchData,
  int LangId,
);

typedef _c_GetGeoInfoEx = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> location,
  ffi.Uint64 geoType,
  ffi.Pointer<ffi.Uint16> geoData,
  ffi.Int32 geoDataCount,
);

typedef _dart_GetGeoInfoEx = int Function(
  ffi.Pointer<ffi.Uint16> location,
  int geoType,
  ffi.Pointer<ffi.Uint16> geoData,
  int geoDataCount,
);

typedef GEO_ENUMPROC = ffi.Int32 Function(
  ffi.Int64,
);

typedef _c_EnumSystemGeoID = ffi.Int32 Function(
  ffi.Uint64 GeoClass,
  ffi.Int64 ParentGeoId,
  ffi.Pointer<ffi.NativeFunction<GEO_ENUMPROC>> lpGeoEnumProc,
);

typedef _dart_EnumSystemGeoID = int Function(
  int GeoClass,
  int ParentGeoId,
  ffi.Pointer<ffi.NativeFunction<GEO_ENUMPROC>> lpGeoEnumProc,
);

typedef GEO_ENUMNAMEPROC = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16>,
  ffi.Int64,
);

typedef _c_EnumSystemGeoNames = ffi.Int32 Function(
  ffi.Uint64 geoClass,
  ffi.Pointer<ffi.NativeFunction<GEO_ENUMNAMEPROC>> geoEnumProc,
  ffi.Int64 data,
);

typedef _dart_EnumSystemGeoNames = int Function(
  int geoClass,
  ffi.Pointer<ffi.NativeFunction<GEO_ENUMNAMEPROC>> geoEnumProc,
  int data,
);

typedef _c_GetUserGeoID = ffi.Int64 Function(
  ffi.Uint64 GeoClass,
);

typedef _dart_GetUserGeoID = int Function(
  int GeoClass,
);

typedef _c_GetUserDefaultGeoName = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> geoName,
  ffi.Int32 geoNameCount,
);

typedef _dart_GetUserDefaultGeoName = int Function(
  ffi.Pointer<ffi.Uint16> geoName,
  int geoNameCount,
);

typedef _c_SetUserGeoID = ffi.Int32 Function(
  ffi.Int64 GeoId,
);

typedef _dart_SetUserGeoID = int Function(
  int GeoId,
);

typedef _c_SetUserGeoName = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> geoName,
);

typedef _dart_SetUserGeoName = int Function(
  ffi.Pointer<ffi.Uint16> geoName,
);

typedef _c_ConvertDefaultLocale = ffi.Uint64 Function(
  ffi.Uint64 Locale,
);

typedef _dart_ConvertDefaultLocale = int Function(
  int Locale,
);

typedef _c_GetSystemDefaultUILanguage = ffi.Uint16 Function();

typedef _dart_GetSystemDefaultUILanguage = int Function();

typedef _c_GetThreadLocale = ffi.Uint64 Function();

typedef _dart_GetThreadLocale = int Function();

typedef _c_SetThreadLocale = ffi.Int32 Function(
  ffi.Uint64 Locale,
);

typedef _dart_SetThreadLocale = int Function(
  int Locale,
);

typedef _c_GetUserDefaultUILanguage = ffi.Uint16 Function();

typedef _dart_GetUserDefaultUILanguage = int Function();

typedef _c_GetUserDefaultLangID = ffi.Uint16 Function();

typedef _dart_GetUserDefaultLangID = int Function();

typedef _c_GetSystemDefaultLangID = ffi.Uint16 Function();

typedef _dart_GetSystemDefaultLangID = int Function();

typedef _c_GetSystemDefaultLCID = ffi.Uint64 Function();

typedef _dart_GetSystemDefaultLCID = int Function();

typedef _c_GetUserDefaultLCID = ffi.Uint64 Function();

typedef _dart_GetUserDefaultLCID = int Function();

typedef _c_SetThreadUILanguage = ffi.Uint16 Function(
  ffi.Uint16 LangId,
);

typedef _dart_SetThreadUILanguage = int Function(
  int LangId,
);

typedef _c_GetThreadUILanguage = ffi.Uint16 Function();

typedef _dart_GetThreadUILanguage = int Function();

typedef _c_GetProcessPreferredUILanguages = ffi.Int32 Function(
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Uint64> pulNumLanguages,
  ffi.Pointer<ffi.Uint16> pwszLanguagesBuffer,
  ffi.Pointer<ffi.Uint64> pcchLanguagesBuffer,
);

typedef _dart_GetProcessPreferredUILanguages = int Function(
  int dwFlags,
  ffi.Pointer<ffi.Uint64> pulNumLanguages,
  ffi.Pointer<ffi.Uint16> pwszLanguagesBuffer,
  ffi.Pointer<ffi.Uint64> pcchLanguagesBuffer,
);

typedef _c_SetProcessPreferredUILanguages = ffi.Int32 Function(
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Uint16> pwszLanguagesBuffer,
  ffi.Pointer<ffi.Uint64> pulNumLanguages,
);

typedef _dart_SetProcessPreferredUILanguages = int Function(
  int dwFlags,
  ffi.Pointer<ffi.Uint16> pwszLanguagesBuffer,
  ffi.Pointer<ffi.Uint64> pulNumLanguages,
);

typedef _c_GetUserPreferredUILanguages = ffi.Int32 Function(
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Uint64> pulNumLanguages,
  ffi.Pointer<ffi.Uint16> pwszLanguagesBuffer,
  ffi.Pointer<ffi.Uint64> pcchLanguagesBuffer,
);

typedef _dart_GetUserPreferredUILanguages = int Function(
  int dwFlags,
  ffi.Pointer<ffi.Uint64> pulNumLanguages,
  ffi.Pointer<ffi.Uint16> pwszLanguagesBuffer,
  ffi.Pointer<ffi.Uint64> pcchLanguagesBuffer,
);

typedef _c_GetSystemPreferredUILanguages = ffi.Int32 Function(
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Uint64> pulNumLanguages,
  ffi.Pointer<ffi.Uint16> pwszLanguagesBuffer,
  ffi.Pointer<ffi.Uint64> pcchLanguagesBuffer,
);

typedef _dart_GetSystemPreferredUILanguages = int Function(
  int dwFlags,
  ffi.Pointer<ffi.Uint64> pulNumLanguages,
  ffi.Pointer<ffi.Uint16> pwszLanguagesBuffer,
  ffi.Pointer<ffi.Uint64> pcchLanguagesBuffer,
);

typedef _c_GetThreadPreferredUILanguages = ffi.Int32 Function(
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Uint64> pulNumLanguages,
  ffi.Pointer<ffi.Uint16> pwszLanguagesBuffer,
  ffi.Pointer<ffi.Uint64> pcchLanguagesBuffer,
);

typedef _dart_GetThreadPreferredUILanguages = int Function(
  int dwFlags,
  ffi.Pointer<ffi.Uint64> pulNumLanguages,
  ffi.Pointer<ffi.Uint16> pwszLanguagesBuffer,
  ffi.Pointer<ffi.Uint64> pcchLanguagesBuffer,
);

typedef _c_SetThreadPreferredUILanguages = ffi.Int32 Function(
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Uint16> pwszLanguagesBuffer,
  ffi.Pointer<ffi.Uint64> pulNumLanguages,
);

typedef _dart_SetThreadPreferredUILanguages = int Function(
  int dwFlags,
  ffi.Pointer<ffi.Uint16> pwszLanguagesBuffer,
  ffi.Pointer<ffi.Uint64> pulNumLanguages,
);

typedef _c_GetFileMUIInfo = ffi.Int32 Function(
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Uint16> pcwszFilePath,
  ffi.Pointer<PFILEMUIINFO> pFileMUIInfo,
  ffi.Pointer<ffi.Uint64> pcbFileMUIInfo,
);

typedef _dart_GetFileMUIInfo = int Function(
  int dwFlags,
  ffi.Pointer<ffi.Uint16> pcwszFilePath,
  ffi.Pointer<PFILEMUIINFO> pFileMUIInfo,
  ffi.Pointer<ffi.Uint64> pcbFileMUIInfo,
);

typedef _c_GetFileMUIPath = ffi.Int32 Function(
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Uint16> pcwszFilePath,
  ffi.Pointer<ffi.Uint16> pwszLanguage,
  ffi.Pointer<ffi.Uint64> pcchLanguage,
  ffi.Pointer<ffi.Uint16> pwszFileMUIPath,
  ffi.Pointer<ffi.Uint64> pcchFileMUIPath,
  ffi.Pointer<ffi.Uint64> pululEnumerator,
);

typedef _dart_GetFileMUIPath = int Function(
  int dwFlags,
  ffi.Pointer<ffi.Uint16> pcwszFilePath,
  ffi.Pointer<ffi.Uint16> pwszLanguage,
  ffi.Pointer<ffi.Uint64> pcchLanguage,
  ffi.Pointer<ffi.Uint16> pwszFileMUIPath,
  ffi.Pointer<ffi.Uint64> pcchFileMUIPath,
  ffi.Pointer<ffi.Uint64> pululEnumerator,
);

typedef _c_GetUILanguageInfo = ffi.Int32 Function(
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Uint16> pwmszLanguage,
  ffi.Pointer<ffi.Uint16> pwszFallbackLanguages,
  ffi.Pointer<ffi.Uint64> pcchFallbackLanguages,
  ffi.Pointer<ffi.Uint64> pAttributes,
);

typedef _dart_GetUILanguageInfo = int Function(
  int dwFlags,
  ffi.Pointer<ffi.Uint16> pwmszLanguage,
  ffi.Pointer<ffi.Uint16> pwszFallbackLanguages,
  ffi.Pointer<ffi.Uint64> pcchFallbackLanguages,
  ffi.Pointer<ffi.Uint64> pAttributes,
);

typedef _c_SetThreadPreferredUILanguages2 = ffi.Int32 Function(
  ffi.Uint64 flags,
  ffi.Pointer<ffi.Uint16> languages,
  ffi.Pointer<ffi.Uint64> numLanguagesSet,
  ffi.Pointer<ffi.Pointer<HSAVEDUILANGUAGES__>> snapshot,
);

typedef _dart_SetThreadPreferredUILanguages2 = int Function(
  int flags,
  ffi.Pointer<ffi.Uint16> languages,
  ffi.Pointer<ffi.Uint64> numLanguagesSet,
  ffi.Pointer<ffi.Pointer<HSAVEDUILANGUAGES__>> snapshot,
);

typedef _c_RestoreThreadPreferredUILanguages = ffi.Void Function(
  ffi.Pointer<HSAVEDUILANGUAGES__> snapshot,
);

typedef _dart_RestoreThreadPreferredUILanguages = void Function(
  ffi.Pointer<HSAVEDUILANGUAGES__> snapshot,
);

typedef _c_NotifyUILanguageChange = ffi.Int32 Function(
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Uint16> pcwstrNewLanguage,
  ffi.Pointer<ffi.Uint16> pcwstrPreviousLanguage,
  ffi.Uint64 dwReserved,
  ffi.Pointer<ffi.Uint64> pdwStatusRtrn,
);

typedef _dart_NotifyUILanguageChange = int Function(
  int dwFlags,
  ffi.Pointer<ffi.Uint16> pcwstrNewLanguage,
  ffi.Pointer<ffi.Uint16> pcwstrPreviousLanguage,
  int dwReserved,
  ffi.Pointer<ffi.Uint64> pdwStatusRtrn,
);

typedef _c_GetStringTypeExA = ffi.Int32 Function(
  ffi.Uint64 Locale,
  ffi.Uint64 dwInfoType,
  ffi.Pointer<ffi.Int8> lpSrcStr,
  ffi.Int32 cchSrc,
  ffi.Pointer<ffi.Uint16> lpCharType,
);

typedef _dart_GetStringTypeExA = int Function(
  int Locale,
  int dwInfoType,
  ffi.Pointer<ffi.Int8> lpSrcStr,
  int cchSrc,
  ffi.Pointer<ffi.Uint16> lpCharType,
);

typedef _c_GetStringTypeA = ffi.Int32 Function(
  ffi.Uint64 Locale,
  ffi.Uint64 dwInfoType,
  ffi.Pointer<ffi.Int8> lpSrcStr,
  ffi.Int32 cchSrc,
  ffi.Pointer<ffi.Uint16> lpCharType,
);

typedef _dart_GetStringTypeA = int Function(
  int Locale,
  int dwInfoType,
  ffi.Pointer<ffi.Int8> lpSrcStr,
  int cchSrc,
  ffi.Pointer<ffi.Uint16> lpCharType,
);

typedef _c_FoldStringA = ffi.Int32 Function(
  ffi.Uint64 dwMapFlags,
  ffi.Pointer<ffi.Int8> lpSrcStr,
  ffi.Int32 cchSrc,
  ffi.Pointer<ffi.Int8> lpDestStr,
  ffi.Int32 cchDest,
);

typedef _dart_FoldStringA = int Function(
  int dwMapFlags,
  ffi.Pointer<ffi.Int8> lpSrcStr,
  int cchSrc,
  ffi.Pointer<ffi.Int8> lpDestStr,
  int cchDest,
);

typedef LOCALE_ENUMPROCA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8>,
);

typedef _c_EnumSystemLocalesA = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<LOCALE_ENUMPROCA>> lpLocaleEnumProc,
  ffi.Uint64 dwFlags,
);

typedef _dart_EnumSystemLocalesA = int Function(
  ffi.Pointer<ffi.NativeFunction<LOCALE_ENUMPROCA>> lpLocaleEnumProc,
  int dwFlags,
);

typedef LOCALE_ENUMPROCW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16>,
);

typedef _c_EnumSystemLocalesW = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<LOCALE_ENUMPROCW>> lpLocaleEnumProc,
  ffi.Uint64 dwFlags,
);

typedef _dart_EnumSystemLocalesW = int Function(
  ffi.Pointer<ffi.NativeFunction<LOCALE_ENUMPROCW>> lpLocaleEnumProc,
  int dwFlags,
);

typedef LANGUAGEGROUP_ENUMPROCA = ffi.Int32 Function(
  ffi.Uint64,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
  ffi.Uint64,
  ffi.Int64,
);

typedef _c_EnumSystemLanguageGroupsA = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<LANGUAGEGROUP_ENUMPROCA>>
      lpLanguageGroupEnumProc,
  ffi.Uint64 dwFlags,
  ffi.Int64 lParam,
);

typedef _dart_EnumSystemLanguageGroupsA = int Function(
  ffi.Pointer<ffi.NativeFunction<LANGUAGEGROUP_ENUMPROCA>>
      lpLanguageGroupEnumProc,
  int dwFlags,
  int lParam,
);

typedef LANGUAGEGROUP_ENUMPROCW = ffi.Int32 Function(
  ffi.Uint64,
  ffi.Pointer<ffi.Uint16>,
  ffi.Pointer<ffi.Uint16>,
  ffi.Uint64,
  ffi.Int64,
);

typedef _c_EnumSystemLanguageGroupsW = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<LANGUAGEGROUP_ENUMPROCW>>
      lpLanguageGroupEnumProc,
  ffi.Uint64 dwFlags,
  ffi.Int64 lParam,
);

typedef _dart_EnumSystemLanguageGroupsW = int Function(
  ffi.Pointer<ffi.NativeFunction<LANGUAGEGROUP_ENUMPROCW>>
      lpLanguageGroupEnumProc,
  int dwFlags,
  int lParam,
);

typedef LANGGROUPLOCALE_ENUMPROCA = ffi.Int32 Function(
  ffi.Uint64,
  ffi.Uint64,
  ffi.Pointer<ffi.Int8>,
  ffi.Int64,
);

typedef _c_EnumLanguageGroupLocalesA = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<LANGGROUPLOCALE_ENUMPROCA>>
      lpLangGroupLocaleEnumProc,
  ffi.Uint64 LanguageGroup,
  ffi.Uint64 dwFlags,
  ffi.Int64 lParam,
);

typedef _dart_EnumLanguageGroupLocalesA = int Function(
  ffi.Pointer<ffi.NativeFunction<LANGGROUPLOCALE_ENUMPROCA>>
      lpLangGroupLocaleEnumProc,
  int LanguageGroup,
  int dwFlags,
  int lParam,
);

typedef LANGGROUPLOCALE_ENUMPROCW = ffi.Int32 Function(
  ffi.Uint64,
  ffi.Uint64,
  ffi.Pointer<ffi.Uint16>,
  ffi.Int64,
);

typedef _c_EnumLanguageGroupLocalesW = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<LANGGROUPLOCALE_ENUMPROCW>>
      lpLangGroupLocaleEnumProc,
  ffi.Uint64 LanguageGroup,
  ffi.Uint64 dwFlags,
  ffi.Int64 lParam,
);

typedef _dart_EnumLanguageGroupLocalesW = int Function(
  ffi.Pointer<ffi.NativeFunction<LANGGROUPLOCALE_ENUMPROCW>>
      lpLangGroupLocaleEnumProc,
  int LanguageGroup,
  int dwFlags,
  int lParam,
);

typedef UILANGUAGE_ENUMPROCA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8>,
  ffi.Int64,
);

typedef _c_EnumUILanguagesA = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<UILANGUAGE_ENUMPROCA>> lpUILanguageEnumProc,
  ffi.Uint64 dwFlags,
  ffi.Int64 lParam,
);

typedef _dart_EnumUILanguagesA = int Function(
  ffi.Pointer<ffi.NativeFunction<UILANGUAGE_ENUMPROCA>> lpUILanguageEnumProc,
  int dwFlags,
  int lParam,
);

typedef UILANGUAGE_ENUMPROCW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16>,
  ffi.Int64,
);

typedef _c_EnumUILanguagesW = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<UILANGUAGE_ENUMPROCW>> lpUILanguageEnumProc,
  ffi.Uint64 dwFlags,
  ffi.Int64 lParam,
);

typedef _dart_EnumUILanguagesW = int Function(
  ffi.Pointer<ffi.NativeFunction<UILANGUAGE_ENUMPROCW>> lpUILanguageEnumProc,
  int dwFlags,
  int lParam,
);

typedef CODEPAGE_ENUMPROCA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8>,
);

typedef _c_EnumSystemCodePagesA = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<CODEPAGE_ENUMPROCA>> lpCodePageEnumProc,
  ffi.Uint64 dwFlags,
);

typedef _dart_EnumSystemCodePagesA = int Function(
  ffi.Pointer<ffi.NativeFunction<CODEPAGE_ENUMPROCA>> lpCodePageEnumProc,
  int dwFlags,
);

typedef CODEPAGE_ENUMPROCW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16>,
);

typedef _c_EnumSystemCodePagesW = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<CODEPAGE_ENUMPROCW>> lpCodePageEnumProc,
  ffi.Uint64 dwFlags,
);

typedef _dart_EnumSystemCodePagesW = int Function(
  ffi.Pointer<ffi.NativeFunction<CODEPAGE_ENUMPROCW>> lpCodePageEnumProc,
  int dwFlags,
);

typedef _c_IdnToAscii = ffi.Int32 Function(
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Uint16> lpUnicodeCharStr,
  ffi.Int32 cchUnicodeChar,
  ffi.Pointer<ffi.Uint16> lpASCIICharStr,
  ffi.Int32 cchASCIIChar,
);

typedef _dart_IdnToAscii = int Function(
  int dwFlags,
  ffi.Pointer<ffi.Uint16> lpUnicodeCharStr,
  int cchUnicodeChar,
  ffi.Pointer<ffi.Uint16> lpASCIICharStr,
  int cchASCIIChar,
);

typedef _c_IdnToUnicode = ffi.Int32 Function(
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Uint16> lpASCIICharStr,
  ffi.Int32 cchASCIIChar,
  ffi.Pointer<ffi.Uint16> lpUnicodeCharStr,
  ffi.Int32 cchUnicodeChar,
);

typedef _dart_IdnToUnicode = int Function(
  int dwFlags,
  ffi.Pointer<ffi.Uint16> lpASCIICharStr,
  int cchASCIIChar,
  ffi.Pointer<ffi.Uint16> lpUnicodeCharStr,
  int cchUnicodeChar,
);

typedef _c_IdnToNameprepUnicode = ffi.Int32 Function(
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Uint16> lpUnicodeCharStr,
  ffi.Int32 cchUnicodeChar,
  ffi.Pointer<ffi.Uint16> lpNameprepCharStr,
  ffi.Int32 cchNameprepChar,
);

typedef _dart_IdnToNameprepUnicode = int Function(
  int dwFlags,
  ffi.Pointer<ffi.Uint16> lpUnicodeCharStr,
  int cchUnicodeChar,
  ffi.Pointer<ffi.Uint16> lpNameprepCharStr,
  int cchNameprepChar,
);

typedef _c_NormalizeString = ffi.Int32 Function(
  ffi.Int32 NormForm,
  ffi.Pointer<ffi.Uint16> lpSrcString,
  ffi.Int32 cwSrcLength,
  ffi.Pointer<ffi.Uint16> lpDstString,
  ffi.Int32 cwDstLength,
);

typedef _dart_NormalizeString = int Function(
  int NormForm,
  ffi.Pointer<ffi.Uint16> lpSrcString,
  int cwSrcLength,
  ffi.Pointer<ffi.Uint16> lpDstString,
  int cwDstLength,
);

typedef _c_IsNormalizedString = ffi.Int32 Function(
  ffi.Int32 NormForm,
  ffi.Pointer<ffi.Uint16> lpString,
  ffi.Int32 cwLength,
);

typedef _dart_IsNormalizedString = int Function(
  int NormForm,
  ffi.Pointer<ffi.Uint16> lpString,
  int cwLength,
);

typedef _c_VerifyScripts = ffi.Int32 Function(
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Uint16> lpLocaleScripts,
  ffi.Int32 cchLocaleScripts,
  ffi.Pointer<ffi.Uint16> lpTestScripts,
  ffi.Int32 cchTestScripts,
);

typedef _dart_VerifyScripts = int Function(
  int dwFlags,
  ffi.Pointer<ffi.Uint16> lpLocaleScripts,
  int cchLocaleScripts,
  ffi.Pointer<ffi.Uint16> lpTestScripts,
  int cchTestScripts,
);

typedef _c_GetStringScripts = ffi.Int32 Function(
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Uint16> lpString,
  ffi.Int32 cchString,
  ffi.Pointer<ffi.Uint16> lpScripts,
  ffi.Int32 cchScripts,
);

typedef _dart_GetStringScripts = int Function(
  int dwFlags,
  ffi.Pointer<ffi.Uint16> lpString,
  int cchString,
  ffi.Pointer<ffi.Uint16> lpScripts,
  int cchScripts,
);

typedef _c_GetLocaleInfoEx = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpLocaleName,
  ffi.Uint64 LCType,
  ffi.Pointer<ffi.Uint16> lpLCData,
  ffi.Int32 cchData,
);

typedef _dart_GetLocaleInfoEx = int Function(
  ffi.Pointer<ffi.Uint16> lpLocaleName,
  int LCType,
  ffi.Pointer<ffi.Uint16> lpLCData,
  int cchData,
);

typedef _c_GetCalendarInfoEx = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpLocaleName,
  ffi.Uint64 Calendar,
  ffi.Pointer<ffi.Uint16> lpReserved,
  ffi.Uint64 CalType,
  ffi.Pointer<ffi.Uint16> lpCalData,
  ffi.Int32 cchData,
  ffi.Pointer<ffi.Uint64> lpValue,
);

typedef _dart_GetCalendarInfoEx = int Function(
  ffi.Pointer<ffi.Uint16> lpLocaleName,
  int Calendar,
  ffi.Pointer<ffi.Uint16> lpReserved,
  int CalType,
  ffi.Pointer<ffi.Uint16> lpCalData,
  int cchData,
  ffi.Pointer<ffi.Uint64> lpValue,
);

typedef _c_GetNumberFormatEx = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpLocaleName,
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Uint16> lpValue,
  ffi.Pointer<LPNUMBERFMTW> lpFormat,
  ffi.Pointer<ffi.Uint16> lpNumberStr,
  ffi.Int32 cchNumber,
);

typedef _dart_GetNumberFormatEx = int Function(
  ffi.Pointer<ffi.Uint16> lpLocaleName,
  int dwFlags,
  ffi.Pointer<ffi.Uint16> lpValue,
  ffi.Pointer<LPNUMBERFMTW> lpFormat,
  ffi.Pointer<ffi.Uint16> lpNumberStr,
  int cchNumber,
);

typedef _c_GetCurrencyFormatEx = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpLocaleName,
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Uint16> lpValue,
  ffi.Pointer<LPCURRENCYFMTW> lpFormat,
  ffi.Pointer<ffi.Uint16> lpCurrencyStr,
  ffi.Int32 cchCurrency,
);

typedef _dart_GetCurrencyFormatEx = int Function(
  ffi.Pointer<ffi.Uint16> lpLocaleName,
  int dwFlags,
  ffi.Pointer<ffi.Uint16> lpValue,
  ffi.Pointer<LPCURRENCYFMTW> lpFormat,
  ffi.Pointer<ffi.Uint16> lpCurrencyStr,
  int cchCurrency,
);

typedef _c_GetUserDefaultLocaleName = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpLocaleName,
  ffi.Int32 cchLocaleName,
);

typedef _dart_GetUserDefaultLocaleName = int Function(
  ffi.Pointer<ffi.Uint16> lpLocaleName,
  int cchLocaleName,
);

typedef _c_GetSystemDefaultLocaleName = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpLocaleName,
  ffi.Int32 cchLocaleName,
);

typedef _dart_GetSystemDefaultLocaleName = int Function(
  ffi.Pointer<ffi.Uint16> lpLocaleName,
  int cchLocaleName,
);

typedef _c_IsNLSDefinedString = ffi.Int32 Function(
  ffi.Uint64 Function_1,
  ffi.Uint64 dwFlags,
  ffi.Pointer<LPNLSVERSIONINFO> lpVersionInformation,
  ffi.Pointer<ffi.Uint16> lpString,
  ffi.Int32 cchStr,
);

typedef _dart_IsNLSDefinedString = int Function(
  int Function_1,
  int dwFlags,
  ffi.Pointer<LPNLSVERSIONINFO> lpVersionInformation,
  ffi.Pointer<ffi.Uint16> lpString,
  int cchStr,
);

typedef _c_GetNLSVersionEx = ffi.Int32 Function(
  ffi.Uint64 function,
  ffi.Pointer<ffi.Uint16> lpLocaleName,
  ffi.Pointer<LPNLSVERSIONINFOEX> lpVersionInformation,
);

typedef _dart_GetNLSVersionEx = int Function(
  int function,
  ffi.Pointer<ffi.Uint16> lpLocaleName,
  ffi.Pointer<LPNLSVERSIONINFOEX> lpVersionInformation,
);

typedef _c_IsValidNLSVersion = ffi.Uint64 Function(
  ffi.Uint64 function,
  ffi.Pointer<ffi.Uint16> lpLocaleName,
  ffi.Pointer<LPNLSVERSIONINFOEX> lpVersionInformation,
);

typedef _dart_IsValidNLSVersion = int Function(
  int function,
  ffi.Pointer<ffi.Uint16> lpLocaleName,
  ffi.Pointer<LPNLSVERSIONINFOEX> lpVersionInformation,
);

typedef _c_FindNLSStringEx = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpLocaleName,
  ffi.Uint64 dwFindNLSStringFlags,
  ffi.Pointer<ffi.Uint16> lpStringSource,
  ffi.Int32 cchSource,
  ffi.Pointer<ffi.Uint16> lpStringValue,
  ffi.Int32 cchValue,
  ffi.Pointer<ffi.Int32> pcchFound,
  ffi.Pointer<LPNLSVERSIONINFO> lpVersionInformation,
  ffi.Pointer<ffi.Void> lpReserved,
  ffi.Int64 sortHandle,
);

typedef _dart_FindNLSStringEx = int Function(
  ffi.Pointer<ffi.Uint16> lpLocaleName,
  int dwFindNLSStringFlags,
  ffi.Pointer<ffi.Uint16> lpStringSource,
  int cchSource,
  ffi.Pointer<ffi.Uint16> lpStringValue,
  int cchValue,
  ffi.Pointer<ffi.Int32> pcchFound,
  ffi.Pointer<LPNLSVERSIONINFO> lpVersionInformation,
  ffi.Pointer<ffi.Void> lpReserved,
  int sortHandle,
);

typedef _c_LCMapStringEx = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpLocaleName,
  ffi.Uint64 dwMapFlags,
  ffi.Pointer<ffi.Uint16> lpSrcStr,
  ffi.Int32 cchSrc,
  ffi.Pointer<ffi.Uint16> lpDestStr,
  ffi.Int32 cchDest,
  ffi.Pointer<LPNLSVERSIONINFO> lpVersionInformation,
  ffi.Pointer<ffi.Void> lpReserved,
  ffi.Int64 sortHandle,
);

typedef _dart_LCMapStringEx = int Function(
  ffi.Pointer<ffi.Uint16> lpLocaleName,
  int dwMapFlags,
  ffi.Pointer<ffi.Uint16> lpSrcStr,
  int cchSrc,
  ffi.Pointer<ffi.Uint16> lpDestStr,
  int cchDest,
  ffi.Pointer<LPNLSVERSIONINFO> lpVersionInformation,
  ffi.Pointer<ffi.Void> lpReserved,
  int sortHandle,
);

typedef _c_IsValidLocaleName = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpLocaleName,
);

typedef _dart_IsValidLocaleName = int Function(
  ffi.Pointer<ffi.Uint16> lpLocaleName,
);

typedef CALINFO_ENUMPROCEXEX = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16>,
  ffi.Uint64,
  ffi.Pointer<ffi.Uint16>,
  ffi.Int64,
);

typedef _c_EnumCalendarInfoExEx = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<CALINFO_ENUMPROCEXEX>> pCalInfoEnumProcExEx,
  ffi.Pointer<ffi.Uint16> lpLocaleName,
  ffi.Uint64 Calendar,
  ffi.Pointer<ffi.Uint16> lpReserved,
  ffi.Uint64 CalType,
  ffi.Int64 lParam,
);

typedef _dart_EnumCalendarInfoExEx = int Function(
  ffi.Pointer<ffi.NativeFunction<CALINFO_ENUMPROCEXEX>> pCalInfoEnumProcExEx,
  ffi.Pointer<ffi.Uint16> lpLocaleName,
  int Calendar,
  ffi.Pointer<ffi.Uint16> lpReserved,
  int CalType,
  int lParam,
);

typedef DATEFMT_ENUMPROCEXEX = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16>,
  ffi.Uint64,
  ffi.Int64,
);

typedef _c_EnumDateFormatsExEx = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<DATEFMT_ENUMPROCEXEX>> lpDateFmtEnumProcExEx,
  ffi.Pointer<ffi.Uint16> lpLocaleName,
  ffi.Uint64 dwFlags,
  ffi.Int64 lParam,
);

typedef _dart_EnumDateFormatsExEx = int Function(
  ffi.Pointer<ffi.NativeFunction<DATEFMT_ENUMPROCEXEX>> lpDateFmtEnumProcExEx,
  ffi.Pointer<ffi.Uint16> lpLocaleName,
  int dwFlags,
  int lParam,
);

typedef TIMEFMT_ENUMPROCEX = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16>,
  ffi.Int64,
);

typedef _c_EnumTimeFormatsEx = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<TIMEFMT_ENUMPROCEX>> lpTimeFmtEnumProcEx,
  ffi.Pointer<ffi.Uint16> lpLocaleName,
  ffi.Uint64 dwFlags,
  ffi.Int64 lParam,
);

typedef _dart_EnumTimeFormatsEx = int Function(
  ffi.Pointer<ffi.NativeFunction<TIMEFMT_ENUMPROCEX>> lpTimeFmtEnumProcEx,
  ffi.Pointer<ffi.Uint16> lpLocaleName,
  int dwFlags,
  int lParam,
);

typedef LOCALE_ENUMPROCEX = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16>,
  ffi.Uint64,
  ffi.Int64,
);

typedef _c_EnumSystemLocalesEx = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<LOCALE_ENUMPROCEX>> lpLocaleEnumProcEx,
  ffi.Uint64 dwFlags,
  ffi.Int64 lParam,
  ffi.Pointer<ffi.Void> lpReserved,
);

typedef _dart_EnumSystemLocalesEx = int Function(
  ffi.Pointer<ffi.NativeFunction<LOCALE_ENUMPROCEX>> lpLocaleEnumProcEx,
  int dwFlags,
  int lParam,
  ffi.Pointer<ffi.Void> lpReserved,
);

typedef _c_ResolveLocaleName = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpNameToResolve,
  ffi.Pointer<ffi.Uint16> lpLocaleName,
  ffi.Int32 cchLocaleName,
);

typedef _dart_ResolveLocaleName = int Function(
  ffi.Pointer<ffi.Uint16> lpNameToResolve,
  ffi.Pointer<ffi.Uint16> lpLocaleName,
  int cchLocaleName,
);

typedef _c_AllocConsole = ffi.Int32 Function();

typedef _dart_AllocConsole = int Function();

typedef _c_FreeConsole = ffi.Int32 Function();

typedef _dart_FreeConsole = int Function();

typedef _c_AttachConsole = ffi.Int32 Function(
  ffi.Uint64 dwProcessId,
);

typedef _dart_AttachConsole = int Function(
  int dwProcessId,
);

typedef _c_GetConsoleCP = ffi.Uint32 Function();

typedef _dart_GetConsoleCP = int Function();

typedef _c_GetConsoleOutputCP = ffi.Uint32 Function();

typedef _dart_GetConsoleOutputCP = int Function();

typedef _c_GetConsoleMode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hConsoleHandle,
  ffi.Pointer<ffi.Uint64> lpMode,
);

typedef _dart_GetConsoleMode = int Function(
  ffi.Pointer<ffi.Void> hConsoleHandle,
  ffi.Pointer<ffi.Uint64> lpMode,
);

typedef _c_SetConsoleMode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hConsoleHandle,
  ffi.Uint64 dwMode,
);

typedef _dart_SetConsoleMode = int Function(
  ffi.Pointer<ffi.Void> hConsoleHandle,
  int dwMode,
);

typedef _c_GetNumberOfConsoleInputEvents = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hConsoleInput,
  ffi.Pointer<ffi.Uint64> lpNumberOfEvents,
);

typedef _dart_GetNumberOfConsoleInputEvents = int Function(
  ffi.Pointer<ffi.Void> hConsoleInput,
  ffi.Pointer<ffi.Uint64> lpNumberOfEvents,
);

typedef _c_ReadConsoleInputA = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hConsoleInput,
  ffi.Pointer<PINPUT_RECORD> lpBuffer,
  ffi.Uint64 nLength,
  ffi.Pointer<ffi.Uint64> lpNumberOfEventsRead,
);

typedef _dart_ReadConsoleInputA = int Function(
  ffi.Pointer<ffi.Void> hConsoleInput,
  ffi.Pointer<PINPUT_RECORD> lpBuffer,
  int nLength,
  ffi.Pointer<ffi.Uint64> lpNumberOfEventsRead,
);

typedef _c_ReadConsoleInputW = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hConsoleInput,
  ffi.Pointer<PINPUT_RECORD> lpBuffer,
  ffi.Uint64 nLength,
  ffi.Pointer<ffi.Uint64> lpNumberOfEventsRead,
);

typedef _dart_ReadConsoleInputW = int Function(
  ffi.Pointer<ffi.Void> hConsoleInput,
  ffi.Pointer<PINPUT_RECORD> lpBuffer,
  int nLength,
  ffi.Pointer<ffi.Uint64> lpNumberOfEventsRead,
);

typedef _c_PeekConsoleInputA = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hConsoleInput,
  ffi.Pointer<PINPUT_RECORD> lpBuffer,
  ffi.Uint64 nLength,
  ffi.Pointer<ffi.Uint64> lpNumberOfEventsRead,
);

typedef _dart_PeekConsoleInputA = int Function(
  ffi.Pointer<ffi.Void> hConsoleInput,
  ffi.Pointer<PINPUT_RECORD> lpBuffer,
  int nLength,
  ffi.Pointer<ffi.Uint64> lpNumberOfEventsRead,
);

typedef _c_PeekConsoleInputW = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hConsoleInput,
  ffi.Pointer<PINPUT_RECORD> lpBuffer,
  ffi.Uint64 nLength,
  ffi.Pointer<ffi.Uint64> lpNumberOfEventsRead,
);

typedef _dart_PeekConsoleInputW = int Function(
  ffi.Pointer<ffi.Void> hConsoleInput,
  ffi.Pointer<PINPUT_RECORD> lpBuffer,
  int nLength,
  ffi.Pointer<ffi.Uint64> lpNumberOfEventsRead,
);

typedef _c_ReadConsoleA = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hConsoleInput,
  ffi.Pointer<ffi.Void> lpBuffer,
  ffi.Uint64 nNumberOfCharsToRead,
  ffi.Pointer<ffi.Uint64> lpNumberOfCharsRead,
  ffi.Pointer<PCONSOLE_READCONSOLE_CONTROL> pInputControl,
);

typedef _dart_ReadConsoleA = int Function(
  ffi.Pointer<ffi.Void> hConsoleInput,
  ffi.Pointer<ffi.Void> lpBuffer,
  int nNumberOfCharsToRead,
  ffi.Pointer<ffi.Uint64> lpNumberOfCharsRead,
  ffi.Pointer<PCONSOLE_READCONSOLE_CONTROL> pInputControl,
);

typedef _c_ReadConsoleW = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hConsoleInput,
  ffi.Pointer<ffi.Void> lpBuffer,
  ffi.Uint64 nNumberOfCharsToRead,
  ffi.Pointer<ffi.Uint64> lpNumberOfCharsRead,
  ffi.Pointer<PCONSOLE_READCONSOLE_CONTROL> pInputControl,
);

typedef _dart_ReadConsoleW = int Function(
  ffi.Pointer<ffi.Void> hConsoleInput,
  ffi.Pointer<ffi.Void> lpBuffer,
  int nNumberOfCharsToRead,
  ffi.Pointer<ffi.Uint64> lpNumberOfCharsRead,
  ffi.Pointer<PCONSOLE_READCONSOLE_CONTROL> pInputControl,
);

typedef _c_WriteConsoleA = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hConsoleOutput,
  ffi.Pointer<ffi.Void> lpBuffer,
  ffi.Uint64 nNumberOfCharsToWrite,
  ffi.Pointer<ffi.Uint64> lpNumberOfCharsWritten,
  ffi.Pointer<ffi.Void> lpReserved,
);

typedef _dart_WriteConsoleA = int Function(
  ffi.Pointer<ffi.Void> hConsoleOutput,
  ffi.Pointer<ffi.Void> lpBuffer,
  int nNumberOfCharsToWrite,
  ffi.Pointer<ffi.Uint64> lpNumberOfCharsWritten,
  ffi.Pointer<ffi.Void> lpReserved,
);

typedef _c_WriteConsoleW = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hConsoleOutput,
  ffi.Pointer<ffi.Void> lpBuffer,
  ffi.Uint64 nNumberOfCharsToWrite,
  ffi.Pointer<ffi.Uint64> lpNumberOfCharsWritten,
  ffi.Pointer<ffi.Void> lpReserved,
);

typedef _dart_WriteConsoleW = int Function(
  ffi.Pointer<ffi.Void> hConsoleOutput,
  ffi.Pointer<ffi.Void> lpBuffer,
  int nNumberOfCharsToWrite,
  ffi.Pointer<ffi.Uint64> lpNumberOfCharsWritten,
  ffi.Pointer<ffi.Void> lpReserved,
);

typedef PHANDLER_ROUTINE = ffi.Int32 Function(
  ffi.Uint64,
);

typedef _c_SetConsoleCtrlHandler = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<PHANDLER_ROUTINE>> HandlerRoutine,
  ffi.Int32 Add,
);

typedef _dart_SetConsoleCtrlHandler = int Function(
  ffi.Pointer<ffi.NativeFunction<PHANDLER_ROUTINE>> HandlerRoutine,
  int Add,
);

typedef _c_ClosePseudoConsole = ffi.Void Function(
  ffi.Pointer<ffi.Void> hPC,
);

typedef _dart_ClosePseudoConsole = void Function(
  ffi.Pointer<ffi.Void> hPC,
);

typedef _c_GenerateConsoleCtrlEvent = ffi.Int32 Function(
  ffi.Uint64 dwCtrlEvent,
  ffi.Uint64 dwProcessGroupId,
);

typedef _dart_GenerateConsoleCtrlEvent = int Function(
  int dwCtrlEvent,
  int dwProcessGroupId,
);

typedef _c_CreateConsoleScreenBuffer = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 dwDesiredAccess,
  ffi.Uint64 dwShareMode,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Void> lpScreenBufferData,
);

typedef _dart_CreateConsoleScreenBuffer = ffi.Pointer<ffi.Void> Function(
  int dwDesiredAccess,
  int dwShareMode,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  int dwFlags,
  ffi.Pointer<ffi.Void> lpScreenBufferData,
);

typedef _c_SetConsoleActiveScreenBuffer = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hConsoleOutput,
);

typedef _dart_SetConsoleActiveScreenBuffer = int Function(
  ffi.Pointer<ffi.Void> hConsoleOutput,
);

typedef _c_FlushConsoleInputBuffer = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hConsoleInput,
);

typedef _dart_FlushConsoleInputBuffer = int Function(
  ffi.Pointer<ffi.Void> hConsoleInput,
);

typedef _c_SetConsoleCP = ffi.Int32 Function(
  ffi.Uint32 wCodePageID,
);

typedef _dart_SetConsoleCP = int Function(
  int wCodePageID,
);

typedef _c_SetConsoleOutputCP = ffi.Int32 Function(
  ffi.Uint32 wCodePageID,
);

typedef _dart_SetConsoleOutputCP = int Function(
  int wCodePageID,
);

typedef _c_GetConsoleCursorInfo = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hConsoleOutput,
  ffi.Pointer<PCONSOLE_CURSOR_INFO> lpConsoleCursorInfo,
);

typedef _dart_GetConsoleCursorInfo = int Function(
  ffi.Pointer<ffi.Void> hConsoleOutput,
  ffi.Pointer<PCONSOLE_CURSOR_INFO> lpConsoleCursorInfo,
);

typedef _c_SetConsoleCursorInfo = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hConsoleOutput,
  ffi.Pointer<PCONSOLE_CURSOR_INFO> lpConsoleCursorInfo,
);

typedef _dart_SetConsoleCursorInfo = int Function(
  ffi.Pointer<ffi.Void> hConsoleOutput,
  ffi.Pointer<PCONSOLE_CURSOR_INFO> lpConsoleCursorInfo,
);

typedef _c_GetConsoleScreenBufferInfo = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hConsoleOutput,
  ffi.Pointer<PCONSOLE_SCREEN_BUFFER_INFO> lpConsoleScreenBufferInfo,
);

typedef _dart_GetConsoleScreenBufferInfo = int Function(
  ffi.Pointer<ffi.Void> hConsoleOutput,
  ffi.Pointer<PCONSOLE_SCREEN_BUFFER_INFO> lpConsoleScreenBufferInfo,
);

typedef _c_GetConsoleScreenBufferInfoEx = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hConsoleOutput,
  ffi.Pointer<PCONSOLE_SCREEN_BUFFER_INFOEX> lpConsoleScreenBufferInfoEx,
);

typedef _dart_GetConsoleScreenBufferInfoEx = int Function(
  ffi.Pointer<ffi.Void> hConsoleOutput,
  ffi.Pointer<PCONSOLE_SCREEN_BUFFER_INFOEX> lpConsoleScreenBufferInfoEx,
);

typedef _c_SetConsoleScreenBufferInfoEx = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hConsoleOutput,
  ffi.Pointer<PCONSOLE_SCREEN_BUFFER_INFOEX> lpConsoleScreenBufferInfoEx,
);

typedef _dart_SetConsoleScreenBufferInfoEx = int Function(
  ffi.Pointer<ffi.Void> hConsoleOutput,
  ffi.Pointer<PCONSOLE_SCREEN_BUFFER_INFOEX> lpConsoleScreenBufferInfoEx,
);

typedef _c_SetConsoleTextAttribute = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hConsoleOutput,
  ffi.Uint16 wAttributes,
);

typedef _dart_SetConsoleTextAttribute = int Function(
  ffi.Pointer<ffi.Void> hConsoleOutput,
  int wAttributes,
);

typedef _c_SetConsoleWindowInfo = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hConsoleOutput,
  ffi.Int32 bAbsolute,
  ffi.Pointer<PSMALL_RECT> lpConsoleWindow,
);

typedef _dart_SetConsoleWindowInfo = int Function(
  ffi.Pointer<ffi.Void> hConsoleOutput,
  int bAbsolute,
  ffi.Pointer<PSMALL_RECT> lpConsoleWindow,
);

typedef _c_WriteConsoleInputA = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hConsoleInput,
  ffi.Pointer<PINPUT_RECORD> lpBuffer,
  ffi.Uint64 nLength,
  ffi.Pointer<ffi.Uint64> lpNumberOfEventsWritten,
);

typedef _dart_WriteConsoleInputA = int Function(
  ffi.Pointer<ffi.Void> hConsoleInput,
  ffi.Pointer<PINPUT_RECORD> lpBuffer,
  int nLength,
  ffi.Pointer<ffi.Uint64> lpNumberOfEventsWritten,
);

typedef _c_WriteConsoleInputW = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hConsoleInput,
  ffi.Pointer<PINPUT_RECORD> lpBuffer,
  ffi.Uint64 nLength,
  ffi.Pointer<ffi.Uint64> lpNumberOfEventsWritten,
);

typedef _dart_WriteConsoleInputW = int Function(
  ffi.Pointer<ffi.Void> hConsoleInput,
  ffi.Pointer<PINPUT_RECORD> lpBuffer,
  int nLength,
  ffi.Pointer<ffi.Uint64> lpNumberOfEventsWritten,
);

typedef _c_GetConsoleTitleA = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> lpConsoleTitle,
  ffi.Uint64 nSize,
);

typedef _dart_GetConsoleTitleA = int Function(
  ffi.Pointer<ffi.Int8> lpConsoleTitle,
  int nSize,
);

typedef _c_GetConsoleTitleW = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> lpConsoleTitle,
  ffi.Uint64 nSize,
);

typedef _dart_GetConsoleTitleW = int Function(
  ffi.Pointer<ffi.Uint16> lpConsoleTitle,
  int nSize,
);

typedef _c_GetConsoleOriginalTitleA = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> lpConsoleTitle,
  ffi.Uint64 nSize,
);

typedef _dart_GetConsoleOriginalTitleA = int Function(
  ffi.Pointer<ffi.Int8> lpConsoleTitle,
  int nSize,
);

typedef _c_GetConsoleOriginalTitleW = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> lpConsoleTitle,
  ffi.Uint64 nSize,
);

typedef _dart_GetConsoleOriginalTitleW = int Function(
  ffi.Pointer<ffi.Uint16> lpConsoleTitle,
  int nSize,
);

typedef _c_SetConsoleTitleA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpConsoleTitle,
);

typedef _dart_SetConsoleTitleA = int Function(
  ffi.Pointer<ffi.Int8> lpConsoleTitle,
);

typedef _c_SetConsoleTitleW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpConsoleTitle,
);

typedef _dart_SetConsoleTitleW = int Function(
  ffi.Pointer<ffi.Uint16> lpConsoleTitle,
);

typedef _c_GetNumberOfConsoleMouseButtons = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> lpNumberOfMouseButtons,
);

typedef _dart_GetNumberOfConsoleMouseButtons = int Function(
  ffi.Pointer<ffi.Uint64> lpNumberOfMouseButtons,
);

typedef _c_GetCurrentConsoleFont = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hConsoleOutput,
  ffi.Int32 bMaximumWindow,
  ffi.Pointer<PCONSOLE_FONT_INFO> lpConsoleCurrentFont,
);

typedef _dart_GetCurrentConsoleFont = int Function(
  ffi.Pointer<ffi.Void> hConsoleOutput,
  int bMaximumWindow,
  ffi.Pointer<PCONSOLE_FONT_INFO> lpConsoleCurrentFont,
);

typedef _c_GetCurrentConsoleFontEx = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hConsoleOutput,
  ffi.Int32 bMaximumWindow,
  ffi.Pointer<PCONSOLE_FONT_INFOEX> lpConsoleCurrentFontEx,
);

typedef _dart_GetCurrentConsoleFontEx = int Function(
  ffi.Pointer<ffi.Void> hConsoleOutput,
  int bMaximumWindow,
  ffi.Pointer<PCONSOLE_FONT_INFOEX> lpConsoleCurrentFontEx,
);

typedef _c_SetCurrentConsoleFontEx = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hConsoleOutput,
  ffi.Int32 bMaximumWindow,
  ffi.Pointer<PCONSOLE_FONT_INFOEX> lpConsoleCurrentFontEx,
);

typedef _dart_SetCurrentConsoleFontEx = int Function(
  ffi.Pointer<ffi.Void> hConsoleOutput,
  int bMaximumWindow,
  ffi.Pointer<PCONSOLE_FONT_INFOEX> lpConsoleCurrentFontEx,
);

typedef _c_GetConsoleSelectionInfo = ffi.Int32 Function(
  ffi.Pointer<PCONSOLE_SELECTION_INFO> lpConsoleSelectionInfo,
);

typedef _dart_GetConsoleSelectionInfo = int Function(
  ffi.Pointer<PCONSOLE_SELECTION_INFO> lpConsoleSelectionInfo,
);

typedef _c_GetConsoleHistoryInfo = ffi.Int32 Function(
  ffi.Pointer<PCONSOLE_HISTORY_INFO> lpConsoleHistoryInfo,
);

typedef _dart_GetConsoleHistoryInfo = int Function(
  ffi.Pointer<PCONSOLE_HISTORY_INFO> lpConsoleHistoryInfo,
);

typedef _c_SetConsoleHistoryInfo = ffi.Int32 Function(
  ffi.Pointer<PCONSOLE_HISTORY_INFO> lpConsoleHistoryInfo,
);

typedef _dart_SetConsoleHistoryInfo = int Function(
  ffi.Pointer<PCONSOLE_HISTORY_INFO> lpConsoleHistoryInfo,
);

typedef _c_GetConsoleDisplayMode = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> lpModeFlags,
);

typedef _dart_GetConsoleDisplayMode = int Function(
  ffi.Pointer<ffi.Uint64> lpModeFlags,
);

typedef _c_SetConsoleDisplayMode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> hConsoleOutput,
  ffi.Uint64 dwFlags,
  ffi.Pointer<PCOORD> lpNewScreenBufferDimensions,
);

typedef _dart_SetConsoleDisplayMode = int Function(
  ffi.Pointer<ffi.Void> hConsoleOutput,
  int dwFlags,
  ffi.Pointer<PCOORD> lpNewScreenBufferDimensions,
);

typedef _c_GetConsoleWindow = ffi.Pointer<HWND__> Function();

typedef _dart_GetConsoleWindow = ffi.Pointer<HWND__> Function();

typedef _c_AddConsoleAliasA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> Source,
  ffi.Pointer<ffi.Int8> Target,
  ffi.Pointer<ffi.Int8> ExeName,
);

typedef _dart_AddConsoleAliasA = int Function(
  ffi.Pointer<ffi.Int8> Source,
  ffi.Pointer<ffi.Int8> Target,
  ffi.Pointer<ffi.Int8> ExeName,
);

typedef _c_AddConsoleAliasW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> Source,
  ffi.Pointer<ffi.Uint16> Target,
  ffi.Pointer<ffi.Uint16> ExeName,
);

typedef _dart_AddConsoleAliasW = int Function(
  ffi.Pointer<ffi.Uint16> Source,
  ffi.Pointer<ffi.Uint16> Target,
  ffi.Pointer<ffi.Uint16> ExeName,
);

typedef _c_GetConsoleAliasA = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> Source,
  ffi.Pointer<ffi.Int8> TargetBuffer,
  ffi.Uint64 TargetBufferLength,
  ffi.Pointer<ffi.Int8> ExeName,
);

typedef _dart_GetConsoleAliasA = int Function(
  ffi.Pointer<ffi.Int8> Source,
  ffi.Pointer<ffi.Int8> TargetBuffer,
  int TargetBufferLength,
  ffi.Pointer<ffi.Int8> ExeName,
);

typedef _c_GetConsoleAliasW = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> Source,
  ffi.Pointer<ffi.Uint16> TargetBuffer,
  ffi.Uint64 TargetBufferLength,
  ffi.Pointer<ffi.Uint16> ExeName,
);

typedef _dart_GetConsoleAliasW = int Function(
  ffi.Pointer<ffi.Uint16> Source,
  ffi.Pointer<ffi.Uint16> TargetBuffer,
  int TargetBufferLength,
  ffi.Pointer<ffi.Uint16> ExeName,
);

typedef _c_GetConsoleAliasesLengthA = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> ExeName,
);

typedef _dart_GetConsoleAliasesLengthA = int Function(
  ffi.Pointer<ffi.Int8> ExeName,
);

typedef _c_GetConsoleAliasesLengthW = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> ExeName,
);

typedef _dart_GetConsoleAliasesLengthW = int Function(
  ffi.Pointer<ffi.Uint16> ExeName,
);

typedef _c_GetConsoleAliasExesLengthA = ffi.Uint64 Function();

typedef _dart_GetConsoleAliasExesLengthA = int Function();

typedef _c_GetConsoleAliasExesLengthW = ffi.Uint64 Function();

typedef _dart_GetConsoleAliasExesLengthW = int Function();

typedef _c_GetConsoleAliasesA = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> AliasBuffer,
  ffi.Uint64 AliasBufferLength,
  ffi.Pointer<ffi.Int8> ExeName,
);

typedef _dart_GetConsoleAliasesA = int Function(
  ffi.Pointer<ffi.Int8> AliasBuffer,
  int AliasBufferLength,
  ffi.Pointer<ffi.Int8> ExeName,
);

typedef _c_GetConsoleAliasesW = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> AliasBuffer,
  ffi.Uint64 AliasBufferLength,
  ffi.Pointer<ffi.Uint16> ExeName,
);

typedef _dart_GetConsoleAliasesW = int Function(
  ffi.Pointer<ffi.Uint16> AliasBuffer,
  int AliasBufferLength,
  ffi.Pointer<ffi.Uint16> ExeName,
);

typedef _c_GetConsoleAliasExesA = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> ExeNameBuffer,
  ffi.Uint64 ExeNameBufferLength,
);

typedef _dart_GetConsoleAliasExesA = int Function(
  ffi.Pointer<ffi.Int8> ExeNameBuffer,
  int ExeNameBufferLength,
);

typedef _c_GetConsoleAliasExesW = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> ExeNameBuffer,
  ffi.Uint64 ExeNameBufferLength,
);

typedef _dart_GetConsoleAliasExesW = int Function(
  ffi.Pointer<ffi.Uint16> ExeNameBuffer,
  int ExeNameBufferLength,
);

typedef _c_ExpungeConsoleCommandHistoryA = ffi.Void Function(
  ffi.Pointer<ffi.Int8> ExeName,
);

typedef _dart_ExpungeConsoleCommandHistoryA = void Function(
  ffi.Pointer<ffi.Int8> ExeName,
);

typedef _c_ExpungeConsoleCommandHistoryW = ffi.Void Function(
  ffi.Pointer<ffi.Uint16> ExeName,
);

typedef _dart_ExpungeConsoleCommandHistoryW = void Function(
  ffi.Pointer<ffi.Uint16> ExeName,
);

typedef _c_SetConsoleNumberOfCommandsA = ffi.Int32 Function(
  ffi.Uint64 Number,
  ffi.Pointer<ffi.Int8> ExeName,
);

typedef _dart_SetConsoleNumberOfCommandsA = int Function(
  int Number,
  ffi.Pointer<ffi.Int8> ExeName,
);

typedef _c_SetConsoleNumberOfCommandsW = ffi.Int32 Function(
  ffi.Uint64 Number,
  ffi.Pointer<ffi.Uint16> ExeName,
);

typedef _dart_SetConsoleNumberOfCommandsW = int Function(
  int Number,
  ffi.Pointer<ffi.Uint16> ExeName,
);

typedef _c_GetConsoleCommandHistoryLengthA = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> ExeName,
);

typedef _dart_GetConsoleCommandHistoryLengthA = int Function(
  ffi.Pointer<ffi.Int8> ExeName,
);

typedef _c_GetConsoleCommandHistoryLengthW = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> ExeName,
);

typedef _dart_GetConsoleCommandHistoryLengthW = int Function(
  ffi.Pointer<ffi.Uint16> ExeName,
);

typedef _c_GetConsoleCommandHistoryA = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> Commands,
  ffi.Uint64 CommandBufferLength,
  ffi.Pointer<ffi.Int8> ExeName,
);

typedef _dart_GetConsoleCommandHistoryA = int Function(
  ffi.Pointer<ffi.Int8> Commands,
  int CommandBufferLength,
  ffi.Pointer<ffi.Int8> ExeName,
);

typedef _c_GetConsoleCommandHistoryW = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> Commands,
  ffi.Uint64 CommandBufferLength,
  ffi.Pointer<ffi.Uint16> ExeName,
);

typedef _dart_GetConsoleCommandHistoryW = int Function(
  ffi.Pointer<ffi.Uint16> Commands,
  int CommandBufferLength,
  ffi.Pointer<ffi.Uint16> ExeName,
);

typedef _c_GetConsoleProcessList = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint64> lpdwProcessList,
  ffi.Uint64 dwProcessCount,
);

typedef _dart_GetConsoleProcessList = int Function(
  ffi.Pointer<ffi.Uint64> lpdwProcessList,
  int dwProcessCount,
);

typedef _c_VerFindFileA = ffi.Uint64 Function(
  ffi.Uint64 uFlags,
  ffi.Pointer<ffi.Int8> szFileName,
  ffi.Pointer<ffi.Int8> szWinDir,
  ffi.Pointer<ffi.Int8> szAppDir,
  ffi.Pointer<ffi.Int8> szCurDir,
  ffi.Pointer<ffi.Uint32> puCurDirLen,
  ffi.Pointer<ffi.Int8> szDestDir,
  ffi.Pointer<ffi.Uint32> puDestDirLen,
);

typedef _dart_VerFindFileA = int Function(
  int uFlags,
  ffi.Pointer<ffi.Int8> szFileName,
  ffi.Pointer<ffi.Int8> szWinDir,
  ffi.Pointer<ffi.Int8> szAppDir,
  ffi.Pointer<ffi.Int8> szCurDir,
  ffi.Pointer<ffi.Uint32> puCurDirLen,
  ffi.Pointer<ffi.Int8> szDestDir,
  ffi.Pointer<ffi.Uint32> puDestDirLen,
);

typedef _c_VerFindFileW = ffi.Uint64 Function(
  ffi.Uint64 uFlags,
  ffi.Pointer<ffi.Uint16> szFileName,
  ffi.Pointer<ffi.Uint16> szWinDir,
  ffi.Pointer<ffi.Uint16> szAppDir,
  ffi.Pointer<ffi.Uint16> szCurDir,
  ffi.Pointer<ffi.Uint32> puCurDirLen,
  ffi.Pointer<ffi.Uint16> szDestDir,
  ffi.Pointer<ffi.Uint32> puDestDirLen,
);

typedef _dart_VerFindFileW = int Function(
  int uFlags,
  ffi.Pointer<ffi.Uint16> szFileName,
  ffi.Pointer<ffi.Uint16> szWinDir,
  ffi.Pointer<ffi.Uint16> szAppDir,
  ffi.Pointer<ffi.Uint16> szCurDir,
  ffi.Pointer<ffi.Uint32> puCurDirLen,
  ffi.Pointer<ffi.Uint16> szDestDir,
  ffi.Pointer<ffi.Uint32> puDestDirLen,
);

typedef _c_VerInstallFileA = ffi.Uint64 Function(
  ffi.Uint64 uFlags,
  ffi.Pointer<ffi.Int8> szSrcFileName,
  ffi.Pointer<ffi.Int8> szDestFileName,
  ffi.Pointer<ffi.Int8> szSrcDir,
  ffi.Pointer<ffi.Int8> szDestDir,
  ffi.Pointer<ffi.Int8> szCurDir,
  ffi.Pointer<ffi.Int8> szTmpFile,
  ffi.Pointer<ffi.Uint32> puTmpFileLen,
);

typedef _dart_VerInstallFileA = int Function(
  int uFlags,
  ffi.Pointer<ffi.Int8> szSrcFileName,
  ffi.Pointer<ffi.Int8> szDestFileName,
  ffi.Pointer<ffi.Int8> szSrcDir,
  ffi.Pointer<ffi.Int8> szDestDir,
  ffi.Pointer<ffi.Int8> szCurDir,
  ffi.Pointer<ffi.Int8> szTmpFile,
  ffi.Pointer<ffi.Uint32> puTmpFileLen,
);

typedef _c_VerInstallFileW = ffi.Uint64 Function(
  ffi.Uint64 uFlags,
  ffi.Pointer<ffi.Uint16> szSrcFileName,
  ffi.Pointer<ffi.Uint16> szDestFileName,
  ffi.Pointer<ffi.Uint16> szSrcDir,
  ffi.Pointer<ffi.Uint16> szDestDir,
  ffi.Pointer<ffi.Uint16> szCurDir,
  ffi.Pointer<ffi.Uint16> szTmpFile,
  ffi.Pointer<ffi.Uint32> puTmpFileLen,
);

typedef _dart_VerInstallFileW = int Function(
  int uFlags,
  ffi.Pointer<ffi.Uint16> szSrcFileName,
  ffi.Pointer<ffi.Uint16> szDestFileName,
  ffi.Pointer<ffi.Uint16> szSrcDir,
  ffi.Pointer<ffi.Uint16> szDestDir,
  ffi.Pointer<ffi.Uint16> szCurDir,
  ffi.Pointer<ffi.Uint16> szTmpFile,
  ffi.Pointer<ffi.Uint32> puTmpFileLen,
);

typedef _c_GetFileVersionInfoSizeA = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> lptstrFilename,
  ffi.Pointer<ffi.Uint64> lpdwHandle,
);

typedef _dart_GetFileVersionInfoSizeA = int Function(
  ffi.Pointer<ffi.Int8> lptstrFilename,
  ffi.Pointer<ffi.Uint64> lpdwHandle,
);

typedef _c_GetFileVersionInfoSizeW = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> lptstrFilename,
  ffi.Pointer<ffi.Uint64> lpdwHandle,
);

typedef _dart_GetFileVersionInfoSizeW = int Function(
  ffi.Pointer<ffi.Uint16> lptstrFilename,
  ffi.Pointer<ffi.Uint64> lpdwHandle,
);

typedef _c_GetFileVersionInfoA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lptstrFilename,
  ffi.Uint64 dwHandle,
  ffi.Uint64 dwLen,
  ffi.Pointer<ffi.Void> lpData,
);

typedef _dart_GetFileVersionInfoA = int Function(
  ffi.Pointer<ffi.Int8> lptstrFilename,
  int dwHandle,
  int dwLen,
  ffi.Pointer<ffi.Void> lpData,
);

typedef _c_GetFileVersionInfoW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lptstrFilename,
  ffi.Uint64 dwHandle,
  ffi.Uint64 dwLen,
  ffi.Pointer<ffi.Void> lpData,
);

typedef _dart_GetFileVersionInfoW = int Function(
  ffi.Pointer<ffi.Uint16> lptstrFilename,
  int dwHandle,
  int dwLen,
  ffi.Pointer<ffi.Void> lpData,
);

typedef _c_GetFileVersionInfoSizeExA = ffi.Uint64 Function(
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Int8> lpwstrFilename,
  ffi.Pointer<ffi.Uint64> lpdwHandle,
);

typedef _dart_GetFileVersionInfoSizeExA = int Function(
  int dwFlags,
  ffi.Pointer<ffi.Int8> lpwstrFilename,
  ffi.Pointer<ffi.Uint64> lpdwHandle,
);

typedef _c_GetFileVersionInfoSizeExW = ffi.Uint64 Function(
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Uint16> lpwstrFilename,
  ffi.Pointer<ffi.Uint64> lpdwHandle,
);

typedef _dart_GetFileVersionInfoSizeExW = int Function(
  int dwFlags,
  ffi.Pointer<ffi.Uint16> lpwstrFilename,
  ffi.Pointer<ffi.Uint64> lpdwHandle,
);

typedef _c_GetFileVersionInfoExA = ffi.Int32 Function(
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Int8> lpwstrFilename,
  ffi.Uint64 dwHandle,
  ffi.Uint64 dwLen,
  ffi.Pointer<ffi.Void> lpData,
);

typedef _dart_GetFileVersionInfoExA = int Function(
  int dwFlags,
  ffi.Pointer<ffi.Int8> lpwstrFilename,
  int dwHandle,
  int dwLen,
  ffi.Pointer<ffi.Void> lpData,
);

typedef _c_GetFileVersionInfoExW = ffi.Int32 Function(
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Uint16> lpwstrFilename,
  ffi.Uint64 dwHandle,
  ffi.Uint64 dwLen,
  ffi.Pointer<ffi.Void> lpData,
);

typedef _dart_GetFileVersionInfoExW = int Function(
  int dwFlags,
  ffi.Pointer<ffi.Uint16> lpwstrFilename,
  int dwHandle,
  int dwLen,
  ffi.Pointer<ffi.Void> lpData,
);

typedef _c_VerLanguageNameA = ffi.Uint64 Function(
  ffi.Uint64 wLang,
  ffi.Pointer<ffi.Int8> szLang,
  ffi.Uint64 cchLang,
);

typedef _dart_VerLanguageNameA = int Function(
  int wLang,
  ffi.Pointer<ffi.Int8> szLang,
  int cchLang,
);

typedef _c_VerLanguageNameW = ffi.Uint64 Function(
  ffi.Uint64 wLang,
  ffi.Pointer<ffi.Uint16> szLang,
  ffi.Uint64 cchLang,
);

typedef _dart_VerLanguageNameW = int Function(
  int wLang,
  ffi.Pointer<ffi.Uint16> szLang,
  int cchLang,
);

typedef _c_VerQueryValueA = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pBlock,
  ffi.Pointer<ffi.Int8> lpSubBlock,
  ffi.Pointer<ffi.Pointer<ffi.Void>> lplpBuffer,
  ffi.Pointer<ffi.Uint32> puLen,
);

typedef _dart_VerQueryValueA = int Function(
  ffi.Pointer<ffi.Void> pBlock,
  ffi.Pointer<ffi.Int8> lpSubBlock,
  ffi.Pointer<ffi.Pointer<ffi.Void>> lplpBuffer,
  ffi.Pointer<ffi.Uint32> puLen,
);

typedef _c_VerQueryValueW = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pBlock,
  ffi.Pointer<ffi.Uint16> lpSubBlock,
  ffi.Pointer<ffi.Pointer<ffi.Void>> lplpBuffer,
  ffi.Pointer<ffi.Uint32> puLen,
);

typedef _dart_VerQueryValueW = int Function(
  ffi.Pointer<ffi.Void> pBlock,
  ffi.Pointer<ffi.Uint16> lpSubBlock,
  ffi.Pointer<ffi.Pointer<ffi.Void>> lplpBuffer,
  ffi.Pointer<ffi.Uint32> puLen,
);

typedef _c_RegCloseKey = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
);

typedef _dart_RegCloseKey = int Function(
  ffi.Pointer<HKEY__> hKey,
);

typedef _c_RegOverridePredefKey = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<HKEY__> hNewHKey,
);

typedef _dart_RegOverridePredefKey = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<HKEY__> hNewHKey,
);

typedef _c_RegOpenUserClassesRoot = ffi.Int64 Function(
  ffi.Pointer<ffi.Void> hToken,
  ffi.Uint64 dwOptions,
  ffi.Uint64 samDesired,
  ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
);

typedef _dart_RegOpenUserClassesRoot = int Function(
  ffi.Pointer<ffi.Void> hToken,
  int dwOptions,
  int samDesired,
  ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
);

typedef _c_RegOpenCurrentUser = ffi.Int64 Function(
  ffi.Uint64 samDesired,
  ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
);

typedef _dart_RegOpenCurrentUser = int Function(
  int samDesired,
  ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
);

typedef _c_RegDisablePredefinedCache = ffi.Int64 Function();

typedef _dart_RegDisablePredefinedCache = int Function();

typedef _c_RegDisablePredefinedCacheEx = ffi.Int64 Function();

typedef _dart_RegDisablePredefinedCacheEx = int Function();

typedef _c_RegConnectRegistryA = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> lpMachineName,
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
);

typedef _dart_RegConnectRegistryA = int Function(
  ffi.Pointer<ffi.Int8> lpMachineName,
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
);

typedef _c_RegConnectRegistryW = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> lpMachineName,
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
);

typedef _dart_RegConnectRegistryW = int Function(
  ffi.Pointer<ffi.Uint16> lpMachineName,
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
);

typedef _c_RegConnectRegistryExA = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> lpMachineName,
  ffi.Pointer<HKEY__> hKey,
  ffi.Uint64 Flags,
  ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
);

typedef _dart_RegConnectRegistryExA = int Function(
  ffi.Pointer<ffi.Int8> lpMachineName,
  ffi.Pointer<HKEY__> hKey,
  int Flags,
  ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
);

typedef _c_RegConnectRegistryExW = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> lpMachineName,
  ffi.Pointer<HKEY__> hKey,
  ffi.Uint64 Flags,
  ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
);

typedef _dart_RegConnectRegistryExW = int Function(
  ffi.Pointer<ffi.Uint16> lpMachineName,
  ffi.Pointer<HKEY__> hKey,
  int Flags,
  ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
);

typedef _c_RegCreateKeyA = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpSubKey,
  ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
);

typedef _dart_RegCreateKeyA = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpSubKey,
  ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
);

typedef _c_RegCreateKeyW = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpSubKey,
  ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
);

typedef _dart_RegCreateKeyW = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpSubKey,
  ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
);

typedef _c_RegCreateKeyExA = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpSubKey,
  ffi.Uint64 Reserved,
  ffi.Pointer<ffi.Int8> lpClass,
  ffi.Uint64 dwOptions,
  ffi.Uint64 samDesired,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
  ffi.Pointer<ffi.Uint64> lpdwDisposition,
);

typedef _dart_RegCreateKeyExA = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpSubKey,
  int Reserved,
  ffi.Pointer<ffi.Int8> lpClass,
  int dwOptions,
  int samDesired,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
  ffi.Pointer<ffi.Uint64> lpdwDisposition,
);

typedef _c_RegCreateKeyExW = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpSubKey,
  ffi.Uint64 Reserved,
  ffi.Pointer<ffi.Uint16> lpClass,
  ffi.Uint64 dwOptions,
  ffi.Uint64 samDesired,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
  ffi.Pointer<ffi.Uint64> lpdwDisposition,
);

typedef _dart_RegCreateKeyExW = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpSubKey,
  int Reserved,
  ffi.Pointer<ffi.Uint16> lpClass,
  int dwOptions,
  int samDesired,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
  ffi.Pointer<ffi.Uint64> lpdwDisposition,
);

typedef _c_RegCreateKeyTransactedA = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpSubKey,
  ffi.Uint64 Reserved,
  ffi.Pointer<ffi.Int8> lpClass,
  ffi.Uint64 dwOptions,
  ffi.Uint64 samDesired,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
  ffi.Pointer<ffi.Uint64> lpdwDisposition,
  ffi.Pointer<ffi.Void> hTransaction,
  ffi.Pointer<ffi.Void> pExtendedParemeter,
);

typedef _dart_RegCreateKeyTransactedA = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpSubKey,
  int Reserved,
  ffi.Pointer<ffi.Int8> lpClass,
  int dwOptions,
  int samDesired,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
  ffi.Pointer<ffi.Uint64> lpdwDisposition,
  ffi.Pointer<ffi.Void> hTransaction,
  ffi.Pointer<ffi.Void> pExtendedParemeter,
);

typedef _c_RegCreateKeyTransactedW = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpSubKey,
  ffi.Uint64 Reserved,
  ffi.Pointer<ffi.Uint16> lpClass,
  ffi.Uint64 dwOptions,
  ffi.Uint64 samDesired,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
  ffi.Pointer<ffi.Uint64> lpdwDisposition,
  ffi.Pointer<ffi.Void> hTransaction,
  ffi.Pointer<ffi.Void> pExtendedParemeter,
);

typedef _dart_RegCreateKeyTransactedW = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpSubKey,
  int Reserved,
  ffi.Pointer<ffi.Uint16> lpClass,
  int dwOptions,
  int samDesired,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
  ffi.Pointer<ffi.Uint64> lpdwDisposition,
  ffi.Pointer<ffi.Void> hTransaction,
  ffi.Pointer<ffi.Void> pExtendedParemeter,
);

typedef _c_RegDeleteKeyA = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpSubKey,
);

typedef _dart_RegDeleteKeyA = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpSubKey,
);

typedef _c_RegDeleteKeyW = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpSubKey,
);

typedef _dart_RegDeleteKeyW = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpSubKey,
);

typedef _c_RegDeleteKeyExA = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpSubKey,
  ffi.Uint64 samDesired,
  ffi.Uint64 Reserved,
);

typedef _dart_RegDeleteKeyExA = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpSubKey,
  int samDesired,
  int Reserved,
);

typedef _c_RegDeleteKeyExW = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpSubKey,
  ffi.Uint64 samDesired,
  ffi.Uint64 Reserved,
);

typedef _dart_RegDeleteKeyExW = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpSubKey,
  int samDesired,
  int Reserved,
);

typedef _c_RegDeleteKeyTransactedA = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpSubKey,
  ffi.Uint64 samDesired,
  ffi.Uint64 Reserved,
  ffi.Pointer<ffi.Void> hTransaction,
  ffi.Pointer<ffi.Void> pExtendedParameter,
);

typedef _dart_RegDeleteKeyTransactedA = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpSubKey,
  int samDesired,
  int Reserved,
  ffi.Pointer<ffi.Void> hTransaction,
  ffi.Pointer<ffi.Void> pExtendedParameter,
);

typedef _c_RegDeleteKeyTransactedW = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpSubKey,
  ffi.Uint64 samDesired,
  ffi.Uint64 Reserved,
  ffi.Pointer<ffi.Void> hTransaction,
  ffi.Pointer<ffi.Void> pExtendedParameter,
);

typedef _dart_RegDeleteKeyTransactedW = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpSubKey,
  int samDesired,
  int Reserved,
  ffi.Pointer<ffi.Void> hTransaction,
  ffi.Pointer<ffi.Void> pExtendedParameter,
);

typedef _c_RegDisableReflectionKey = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hBase,
);

typedef _dart_RegDisableReflectionKey = int Function(
  ffi.Pointer<HKEY__> hBase,
);

typedef _c_RegEnableReflectionKey = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hBase,
);

typedef _dart_RegEnableReflectionKey = int Function(
  ffi.Pointer<HKEY__> hBase,
);

typedef _c_RegQueryReflectionKey = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hBase,
  ffi.Pointer<ffi.Int32> bIsReflectionDisabled,
);

typedef _dart_RegQueryReflectionKey = int Function(
  ffi.Pointer<HKEY__> hBase,
  ffi.Pointer<ffi.Int32> bIsReflectionDisabled,
);

typedef _c_RegDeleteValueA = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpValueName,
);

typedef _dart_RegDeleteValueA = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpValueName,
);

typedef _c_RegDeleteValueW = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpValueName,
);

typedef _dart_RegDeleteValueW = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpValueName,
);

typedef _c_RegEnumKeyA = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Uint64 dwIndex,
  ffi.Pointer<ffi.Int8> lpName,
  ffi.Uint64 cchName,
);

typedef _dart_RegEnumKeyA = int Function(
  ffi.Pointer<HKEY__> hKey,
  int dwIndex,
  ffi.Pointer<ffi.Int8> lpName,
  int cchName,
);

typedef _c_RegEnumKeyW = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Uint64 dwIndex,
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Uint64 cchName,
);

typedef _dart_RegEnumKeyW = int Function(
  ffi.Pointer<HKEY__> hKey,
  int dwIndex,
  ffi.Pointer<ffi.Uint16> lpName,
  int cchName,
);

typedef _c_RegEnumKeyExA = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Uint64 dwIndex,
  ffi.Pointer<ffi.Int8> lpName,
  ffi.Pointer<ffi.Uint64> lpcchName,
  ffi.Pointer<ffi.Uint64> lpReserved,
  ffi.Pointer<ffi.Int8> lpClass,
  ffi.Pointer<ffi.Uint64> lpcchClass,
  ffi.Pointer<LPFILETIME> lpftLastWriteTime,
);

typedef _dart_RegEnumKeyExA = int Function(
  ffi.Pointer<HKEY__> hKey,
  int dwIndex,
  ffi.Pointer<ffi.Int8> lpName,
  ffi.Pointer<ffi.Uint64> lpcchName,
  ffi.Pointer<ffi.Uint64> lpReserved,
  ffi.Pointer<ffi.Int8> lpClass,
  ffi.Pointer<ffi.Uint64> lpcchClass,
  ffi.Pointer<LPFILETIME> lpftLastWriteTime,
);

typedef _c_RegEnumKeyExW = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Uint64 dwIndex,
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Pointer<ffi.Uint64> lpcchName,
  ffi.Pointer<ffi.Uint64> lpReserved,
  ffi.Pointer<ffi.Uint16> lpClass,
  ffi.Pointer<ffi.Uint64> lpcchClass,
  ffi.Pointer<LPFILETIME> lpftLastWriteTime,
);

typedef _dart_RegEnumKeyExW = int Function(
  ffi.Pointer<HKEY__> hKey,
  int dwIndex,
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Pointer<ffi.Uint64> lpcchName,
  ffi.Pointer<ffi.Uint64> lpReserved,
  ffi.Pointer<ffi.Uint16> lpClass,
  ffi.Pointer<ffi.Uint64> lpcchClass,
  ffi.Pointer<LPFILETIME> lpftLastWriteTime,
);

typedef _c_RegEnumValueA = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Uint64 dwIndex,
  ffi.Pointer<ffi.Int8> lpValueName,
  ffi.Pointer<ffi.Uint64> lpcchValueName,
  ffi.Pointer<ffi.Uint64> lpReserved,
  ffi.Pointer<ffi.Uint64> lpType,
  ffi.Pointer<ffi.Uint8> lpData,
  ffi.Pointer<ffi.Uint64> lpcbData,
);

typedef _dart_RegEnumValueA = int Function(
  ffi.Pointer<HKEY__> hKey,
  int dwIndex,
  ffi.Pointer<ffi.Int8> lpValueName,
  ffi.Pointer<ffi.Uint64> lpcchValueName,
  ffi.Pointer<ffi.Uint64> lpReserved,
  ffi.Pointer<ffi.Uint64> lpType,
  ffi.Pointer<ffi.Uint8> lpData,
  ffi.Pointer<ffi.Uint64> lpcbData,
);

typedef _c_RegEnumValueW = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Uint64 dwIndex,
  ffi.Pointer<ffi.Uint16> lpValueName,
  ffi.Pointer<ffi.Uint64> lpcchValueName,
  ffi.Pointer<ffi.Uint64> lpReserved,
  ffi.Pointer<ffi.Uint64> lpType,
  ffi.Pointer<ffi.Uint8> lpData,
  ffi.Pointer<ffi.Uint64> lpcbData,
);

typedef _dart_RegEnumValueW = int Function(
  ffi.Pointer<HKEY__> hKey,
  int dwIndex,
  ffi.Pointer<ffi.Uint16> lpValueName,
  ffi.Pointer<ffi.Uint64> lpcchValueName,
  ffi.Pointer<ffi.Uint64> lpReserved,
  ffi.Pointer<ffi.Uint64> lpType,
  ffi.Pointer<ffi.Uint8> lpData,
  ffi.Pointer<ffi.Uint64> lpcbData,
);

typedef _c_RegFlushKey = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
);

typedef _dart_RegFlushKey = int Function(
  ffi.Pointer<HKEY__> hKey,
);

typedef _c_RegGetKeySecurity = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Uint64 SecurityInformation,
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
  ffi.Pointer<ffi.Uint64> lpcbSecurityDescriptor,
);

typedef _dart_RegGetKeySecurity = int Function(
  ffi.Pointer<HKEY__> hKey,
  int SecurityInformation,
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
  ffi.Pointer<ffi.Uint64> lpcbSecurityDescriptor,
);

typedef _c_RegLoadKeyA = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpSubKey,
  ffi.Pointer<ffi.Int8> lpFile,
);

typedef _dart_RegLoadKeyA = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpSubKey,
  ffi.Pointer<ffi.Int8> lpFile,
);

typedef _c_RegLoadKeyW = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpSubKey,
  ffi.Pointer<ffi.Uint16> lpFile,
);

typedef _dart_RegLoadKeyW = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpSubKey,
  ffi.Pointer<ffi.Uint16> lpFile,
);

typedef _c_RegNotifyChangeKeyValue = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Int32 bWatchSubtree,
  ffi.Uint64 dwNotifyFilter,
  ffi.Pointer<ffi.Void> hEvent,
  ffi.Int32 fAsynchronous,
);

typedef _dart_RegNotifyChangeKeyValue = int Function(
  ffi.Pointer<HKEY__> hKey,
  int bWatchSubtree,
  int dwNotifyFilter,
  ffi.Pointer<ffi.Void> hEvent,
  int fAsynchronous,
);

typedef _c_RegOpenKeyA = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpSubKey,
  ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
);

typedef _dart_RegOpenKeyA = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpSubKey,
  ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
);

typedef _c_RegOpenKeyW = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpSubKey,
  ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
);

typedef _dart_RegOpenKeyW = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpSubKey,
  ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
);

typedef _c_RegOpenKeyExA = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpSubKey,
  ffi.Uint64 ulOptions,
  ffi.Uint64 samDesired,
  ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
);

typedef _dart_RegOpenKeyExA = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpSubKey,
  int ulOptions,
  int samDesired,
  ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
);

typedef _c_RegOpenKeyExW = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpSubKey,
  ffi.Uint64 ulOptions,
  ffi.Uint64 samDesired,
  ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
);

typedef _dart_RegOpenKeyExW = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpSubKey,
  int ulOptions,
  int samDesired,
  ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
);

typedef _c_RegOpenKeyTransactedA = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpSubKey,
  ffi.Uint64 ulOptions,
  ffi.Uint64 samDesired,
  ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
  ffi.Pointer<ffi.Void> hTransaction,
  ffi.Pointer<ffi.Void> pExtendedParemeter,
);

typedef _dart_RegOpenKeyTransactedA = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpSubKey,
  int ulOptions,
  int samDesired,
  ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
  ffi.Pointer<ffi.Void> hTransaction,
  ffi.Pointer<ffi.Void> pExtendedParemeter,
);

typedef _c_RegOpenKeyTransactedW = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpSubKey,
  ffi.Uint64 ulOptions,
  ffi.Uint64 samDesired,
  ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
  ffi.Pointer<ffi.Void> hTransaction,
  ffi.Pointer<ffi.Void> pExtendedParemeter,
);

typedef _dart_RegOpenKeyTransactedW = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpSubKey,
  int ulOptions,
  int samDesired,
  ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
  ffi.Pointer<ffi.Void> hTransaction,
  ffi.Pointer<ffi.Void> pExtendedParemeter,
);

typedef _c_RegQueryInfoKeyA = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpClass,
  ffi.Pointer<ffi.Uint64> lpcchClass,
  ffi.Pointer<ffi.Uint64> lpReserved,
  ffi.Pointer<ffi.Uint64> lpcSubKeys,
  ffi.Pointer<ffi.Uint64> lpcbMaxSubKeyLen,
  ffi.Pointer<ffi.Uint64> lpcbMaxClassLen,
  ffi.Pointer<ffi.Uint64> lpcValues,
  ffi.Pointer<ffi.Uint64> lpcbMaxValueNameLen,
  ffi.Pointer<ffi.Uint64> lpcbMaxValueLen,
  ffi.Pointer<ffi.Uint64> lpcbSecurityDescriptor,
  ffi.Pointer<LPFILETIME> lpftLastWriteTime,
);

typedef _dart_RegQueryInfoKeyA = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpClass,
  ffi.Pointer<ffi.Uint64> lpcchClass,
  ffi.Pointer<ffi.Uint64> lpReserved,
  ffi.Pointer<ffi.Uint64> lpcSubKeys,
  ffi.Pointer<ffi.Uint64> lpcbMaxSubKeyLen,
  ffi.Pointer<ffi.Uint64> lpcbMaxClassLen,
  ffi.Pointer<ffi.Uint64> lpcValues,
  ffi.Pointer<ffi.Uint64> lpcbMaxValueNameLen,
  ffi.Pointer<ffi.Uint64> lpcbMaxValueLen,
  ffi.Pointer<ffi.Uint64> lpcbSecurityDescriptor,
  ffi.Pointer<LPFILETIME> lpftLastWriteTime,
);

typedef _c_RegQueryInfoKeyW = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpClass,
  ffi.Pointer<ffi.Uint64> lpcchClass,
  ffi.Pointer<ffi.Uint64> lpReserved,
  ffi.Pointer<ffi.Uint64> lpcSubKeys,
  ffi.Pointer<ffi.Uint64> lpcbMaxSubKeyLen,
  ffi.Pointer<ffi.Uint64> lpcbMaxClassLen,
  ffi.Pointer<ffi.Uint64> lpcValues,
  ffi.Pointer<ffi.Uint64> lpcbMaxValueNameLen,
  ffi.Pointer<ffi.Uint64> lpcbMaxValueLen,
  ffi.Pointer<ffi.Uint64> lpcbSecurityDescriptor,
  ffi.Pointer<LPFILETIME> lpftLastWriteTime,
);

typedef _dart_RegQueryInfoKeyW = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpClass,
  ffi.Pointer<ffi.Uint64> lpcchClass,
  ffi.Pointer<ffi.Uint64> lpReserved,
  ffi.Pointer<ffi.Uint64> lpcSubKeys,
  ffi.Pointer<ffi.Uint64> lpcbMaxSubKeyLen,
  ffi.Pointer<ffi.Uint64> lpcbMaxClassLen,
  ffi.Pointer<ffi.Uint64> lpcValues,
  ffi.Pointer<ffi.Uint64> lpcbMaxValueNameLen,
  ffi.Pointer<ffi.Uint64> lpcbMaxValueLen,
  ffi.Pointer<ffi.Uint64> lpcbSecurityDescriptor,
  ffi.Pointer<LPFILETIME> lpftLastWriteTime,
);

typedef _c_RegQueryValueA = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpSubKey,
  ffi.Pointer<ffi.Int8> lpData,
  ffi.Pointer<ffi.Int64> lpcbData,
);

typedef _dart_RegQueryValueA = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpSubKey,
  ffi.Pointer<ffi.Int8> lpData,
  ffi.Pointer<ffi.Int64> lpcbData,
);

typedef _c_RegQueryValueW = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpSubKey,
  ffi.Pointer<ffi.Uint16> lpData,
  ffi.Pointer<ffi.Int64> lpcbData,
);

typedef _dart_RegQueryValueW = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpSubKey,
  ffi.Pointer<ffi.Uint16> lpData,
  ffi.Pointer<ffi.Int64> lpcbData,
);

typedef _c_RegQueryMultipleValuesA = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<PVALENTA> val_list,
  ffi.Uint64 num_vals,
  ffi.Pointer<ffi.Int8> lpValueBuf,
  ffi.Pointer<ffi.Uint64> ldwTotsize,
);

typedef _dart_RegQueryMultipleValuesA = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<PVALENTA> val_list,
  int num_vals,
  ffi.Pointer<ffi.Int8> lpValueBuf,
  ffi.Pointer<ffi.Uint64> ldwTotsize,
);

typedef _c_RegQueryMultipleValuesW = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<PVALENTW> val_list,
  ffi.Uint64 num_vals,
  ffi.Pointer<ffi.Uint16> lpValueBuf,
  ffi.Pointer<ffi.Uint64> ldwTotsize,
);

typedef _dart_RegQueryMultipleValuesW = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<PVALENTW> val_list,
  int num_vals,
  ffi.Pointer<ffi.Uint16> lpValueBuf,
  ffi.Pointer<ffi.Uint64> ldwTotsize,
);

typedef _c_RegQueryValueExA = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpValueName,
  ffi.Pointer<ffi.Uint64> lpReserved,
  ffi.Pointer<ffi.Uint64> lpType,
  ffi.Pointer<ffi.Uint8> lpData,
  ffi.Pointer<ffi.Uint64> lpcbData,
);

typedef _dart_RegQueryValueExA = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpValueName,
  ffi.Pointer<ffi.Uint64> lpReserved,
  ffi.Pointer<ffi.Uint64> lpType,
  ffi.Pointer<ffi.Uint8> lpData,
  ffi.Pointer<ffi.Uint64> lpcbData,
);

typedef _c_RegQueryValueExW = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpValueName,
  ffi.Pointer<ffi.Uint64> lpReserved,
  ffi.Pointer<ffi.Uint64> lpType,
  ffi.Pointer<ffi.Uint8> lpData,
  ffi.Pointer<ffi.Uint64> lpcbData,
);

typedef _dart_RegQueryValueExW = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpValueName,
  ffi.Pointer<ffi.Uint64> lpReserved,
  ffi.Pointer<ffi.Uint64> lpType,
  ffi.Pointer<ffi.Uint8> lpData,
  ffi.Pointer<ffi.Uint64> lpcbData,
);

typedef _c_RegReplaceKeyA = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpSubKey,
  ffi.Pointer<ffi.Int8> lpNewFile,
  ffi.Pointer<ffi.Int8> lpOldFile,
);

typedef _dart_RegReplaceKeyA = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpSubKey,
  ffi.Pointer<ffi.Int8> lpNewFile,
  ffi.Pointer<ffi.Int8> lpOldFile,
);

typedef _c_RegReplaceKeyW = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpSubKey,
  ffi.Pointer<ffi.Uint16> lpNewFile,
  ffi.Pointer<ffi.Uint16> lpOldFile,
);

typedef _dart_RegReplaceKeyW = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpSubKey,
  ffi.Pointer<ffi.Uint16> lpNewFile,
  ffi.Pointer<ffi.Uint16> lpOldFile,
);

typedef _c_RegRestoreKeyA = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpFile,
  ffi.Uint64 dwFlags,
);

typedef _dart_RegRestoreKeyA = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpFile,
  int dwFlags,
);

typedef _c_RegRestoreKeyW = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpFile,
  ffi.Uint64 dwFlags,
);

typedef _dart_RegRestoreKeyW = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpFile,
  int dwFlags,
);

typedef _c_RegRenameKey = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpSubKeyName,
  ffi.Pointer<ffi.Uint16> lpNewKeyName,
);

typedef _dart_RegRenameKey = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpSubKeyName,
  ffi.Pointer<ffi.Uint16> lpNewKeyName,
);

typedef _c_RegSaveKeyA = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpFile,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
);

typedef _dart_RegSaveKeyA = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpFile,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
);

typedef _c_RegSaveKeyW = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpFile,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
);

typedef _dart_RegSaveKeyW = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpFile,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
);

typedef _c_RegSetKeySecurity = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Uint64 SecurityInformation,
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
);

typedef _dart_RegSetKeySecurity = int Function(
  ffi.Pointer<HKEY__> hKey,
  int SecurityInformation,
  ffi.Pointer<ffi.Void> pSecurityDescriptor,
);

typedef _c_RegSetValueA = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpSubKey,
  ffi.Uint64 dwType,
  ffi.Pointer<ffi.Int8> lpData,
  ffi.Uint64 cbData,
);

typedef _dart_RegSetValueA = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpSubKey,
  int dwType,
  ffi.Pointer<ffi.Int8> lpData,
  int cbData,
);

typedef _c_RegSetValueW = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpSubKey,
  ffi.Uint64 dwType,
  ffi.Pointer<ffi.Uint16> lpData,
  ffi.Uint64 cbData,
);

typedef _dart_RegSetValueW = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpSubKey,
  int dwType,
  ffi.Pointer<ffi.Uint16> lpData,
  int cbData,
);

typedef _c_RegSetValueExA = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpValueName,
  ffi.Uint64 Reserved,
  ffi.Uint64 dwType,
  ffi.Pointer<ffi.Uint8> lpData,
  ffi.Uint64 cbData,
);

typedef _dart_RegSetValueExA = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpValueName,
  int Reserved,
  int dwType,
  ffi.Pointer<ffi.Uint8> lpData,
  int cbData,
);

typedef _c_RegSetValueExW = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpValueName,
  ffi.Uint64 Reserved,
  ffi.Uint64 dwType,
  ffi.Pointer<ffi.Uint8> lpData,
  ffi.Uint64 cbData,
);

typedef _dart_RegSetValueExW = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpValueName,
  int Reserved,
  int dwType,
  ffi.Pointer<ffi.Uint8> lpData,
  int cbData,
);

typedef _c_RegUnLoadKeyA = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpSubKey,
);

typedef _dart_RegUnLoadKeyA = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpSubKey,
);

typedef _c_RegUnLoadKeyW = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpSubKey,
);

typedef _dart_RegUnLoadKeyW = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpSubKey,
);

typedef _c_RegDeleteKeyValueA = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpSubKey,
  ffi.Pointer<ffi.Int8> lpValueName,
);

typedef _dart_RegDeleteKeyValueA = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpSubKey,
  ffi.Pointer<ffi.Int8> lpValueName,
);

typedef _c_RegDeleteKeyValueW = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpSubKey,
  ffi.Pointer<ffi.Uint16> lpValueName,
);

typedef _dart_RegDeleteKeyValueW = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpSubKey,
  ffi.Pointer<ffi.Uint16> lpValueName,
);

typedef _c_RegSetKeyValueA = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpSubKey,
  ffi.Pointer<ffi.Int8> lpValueName,
  ffi.Uint64 dwType,
  ffi.Pointer<ffi.Void> lpData,
  ffi.Uint64 cbData,
);

typedef _dart_RegSetKeyValueA = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpSubKey,
  ffi.Pointer<ffi.Int8> lpValueName,
  int dwType,
  ffi.Pointer<ffi.Void> lpData,
  int cbData,
);

typedef _c_RegSetKeyValueW = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpSubKey,
  ffi.Pointer<ffi.Uint16> lpValueName,
  ffi.Uint64 dwType,
  ffi.Pointer<ffi.Void> lpData,
  ffi.Uint64 cbData,
);

typedef _dart_RegSetKeyValueW = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpSubKey,
  ffi.Pointer<ffi.Uint16> lpValueName,
  int dwType,
  ffi.Pointer<ffi.Void> lpData,
  int cbData,
);

typedef _c_RegDeleteTreeA = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpSubKey,
);

typedef _dart_RegDeleteTreeA = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpSubKey,
);

typedef _c_RegDeleteTreeW = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpSubKey,
);

typedef _dart_RegDeleteTreeW = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpSubKey,
);

typedef _c_RegCopyTreeA = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKeySrc,
  ffi.Pointer<ffi.Int8> lpSubKey,
  ffi.Pointer<HKEY__> hKeyDest,
);

typedef _dart_RegCopyTreeA = int Function(
  ffi.Pointer<HKEY__> hKeySrc,
  ffi.Pointer<ffi.Int8> lpSubKey,
  ffi.Pointer<HKEY__> hKeyDest,
);

typedef _c_RegGetValueA = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hkey,
  ffi.Pointer<ffi.Int8> lpSubKey,
  ffi.Pointer<ffi.Int8> lpValue,
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Uint64> pdwType,
  ffi.Pointer<ffi.Void> pvData,
  ffi.Pointer<ffi.Uint64> pcbData,
);

typedef _dart_RegGetValueA = int Function(
  ffi.Pointer<HKEY__> hkey,
  ffi.Pointer<ffi.Int8> lpSubKey,
  ffi.Pointer<ffi.Int8> lpValue,
  int dwFlags,
  ffi.Pointer<ffi.Uint64> pdwType,
  ffi.Pointer<ffi.Void> pvData,
  ffi.Pointer<ffi.Uint64> pcbData,
);

typedef _c_RegGetValueW = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hkey,
  ffi.Pointer<ffi.Uint16> lpSubKey,
  ffi.Pointer<ffi.Uint16> lpValue,
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Uint64> pdwType,
  ffi.Pointer<ffi.Void> pvData,
  ffi.Pointer<ffi.Uint64> pcbData,
);

typedef _dart_RegGetValueW = int Function(
  ffi.Pointer<HKEY__> hkey,
  ffi.Pointer<ffi.Uint16> lpSubKey,
  ffi.Pointer<ffi.Uint16> lpValue,
  int dwFlags,
  ffi.Pointer<ffi.Uint64> pdwType,
  ffi.Pointer<ffi.Void> pvData,
  ffi.Pointer<ffi.Uint64> pcbData,
);

typedef _c_RegCopyTreeW = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKeySrc,
  ffi.Pointer<ffi.Uint16> lpSubKey,
  ffi.Pointer<HKEY__> hKeyDest,
);

typedef _dart_RegCopyTreeW = int Function(
  ffi.Pointer<HKEY__> hKeySrc,
  ffi.Pointer<ffi.Uint16> lpSubKey,
  ffi.Pointer<HKEY__> hKeyDest,
);

typedef _c_RegLoadMUIStringA = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> pszValue,
  ffi.Pointer<ffi.Int8> pszOutBuf,
  ffi.Uint64 cbOutBuf,
  ffi.Pointer<ffi.Uint64> pcbData,
  ffi.Uint64 Flags,
  ffi.Pointer<ffi.Int8> pszDirectory,
);

typedef _dart_RegLoadMUIStringA = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> pszValue,
  ffi.Pointer<ffi.Int8> pszOutBuf,
  int cbOutBuf,
  ffi.Pointer<ffi.Uint64> pcbData,
  int Flags,
  ffi.Pointer<ffi.Int8> pszDirectory,
);

typedef _c_RegLoadMUIStringW = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> pszValue,
  ffi.Pointer<ffi.Uint16> pszOutBuf,
  ffi.Uint64 cbOutBuf,
  ffi.Pointer<ffi.Uint64> pcbData,
  ffi.Uint64 Flags,
  ffi.Pointer<ffi.Uint16> pszDirectory,
);

typedef _dart_RegLoadMUIStringW = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> pszValue,
  ffi.Pointer<ffi.Uint16> pszOutBuf,
  int cbOutBuf,
  ffi.Pointer<ffi.Uint64> pcbData,
  int Flags,
  ffi.Pointer<ffi.Uint16> pszDirectory,
);

typedef _c_RegLoadAppKeyA = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> lpFile,
  ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
  ffi.Uint64 samDesired,
  ffi.Uint64 dwOptions,
  ffi.Uint64 Reserved,
);

typedef _dart_RegLoadAppKeyA = int Function(
  ffi.Pointer<ffi.Int8> lpFile,
  ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
  int samDesired,
  int dwOptions,
  int Reserved,
);

typedef _c_RegLoadAppKeyW = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> lpFile,
  ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
  ffi.Uint64 samDesired,
  ffi.Uint64 dwOptions,
  ffi.Uint64 Reserved,
);

typedef _dart_RegLoadAppKeyW = int Function(
  ffi.Pointer<ffi.Uint16> lpFile,
  ffi.Pointer<ffi.Pointer<HKEY__>> phkResult,
  int samDesired,
  int dwOptions,
  int Reserved,
);

typedef _c_InitiateSystemShutdownA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpMachineName,
  ffi.Pointer<ffi.Int8> lpMessage,
  ffi.Uint64 dwTimeout,
  ffi.Int32 bForceAppsClosed,
  ffi.Int32 bRebootAfterShutdown,
);

typedef _dart_InitiateSystemShutdownA = int Function(
  ffi.Pointer<ffi.Int8> lpMachineName,
  ffi.Pointer<ffi.Int8> lpMessage,
  int dwTimeout,
  int bForceAppsClosed,
  int bRebootAfterShutdown,
);

typedef _c_InitiateSystemShutdownW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpMachineName,
  ffi.Pointer<ffi.Uint16> lpMessage,
  ffi.Uint64 dwTimeout,
  ffi.Int32 bForceAppsClosed,
  ffi.Int32 bRebootAfterShutdown,
);

typedef _dart_InitiateSystemShutdownW = int Function(
  ffi.Pointer<ffi.Uint16> lpMachineName,
  ffi.Pointer<ffi.Uint16> lpMessage,
  int dwTimeout,
  int bForceAppsClosed,
  int bRebootAfterShutdown,
);

typedef _c_AbortSystemShutdownA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpMachineName,
);

typedef _dart_AbortSystemShutdownA = int Function(
  ffi.Pointer<ffi.Int8> lpMachineName,
);

typedef _c_AbortSystemShutdownW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpMachineName,
);

typedef _dart_AbortSystemShutdownW = int Function(
  ffi.Pointer<ffi.Uint16> lpMachineName,
);

typedef _c_InitiateSystemShutdownExA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lpMachineName,
  ffi.Pointer<ffi.Int8> lpMessage,
  ffi.Uint64 dwTimeout,
  ffi.Int32 bForceAppsClosed,
  ffi.Int32 bRebootAfterShutdown,
  ffi.Uint64 dwReason,
);

typedef _dart_InitiateSystemShutdownExA = int Function(
  ffi.Pointer<ffi.Int8> lpMachineName,
  ffi.Pointer<ffi.Int8> lpMessage,
  int dwTimeout,
  int bForceAppsClosed,
  int bRebootAfterShutdown,
  int dwReason,
);

typedef _c_InitiateSystemShutdownExW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> lpMachineName,
  ffi.Pointer<ffi.Uint16> lpMessage,
  ffi.Uint64 dwTimeout,
  ffi.Int32 bForceAppsClosed,
  ffi.Int32 bRebootAfterShutdown,
  ffi.Uint64 dwReason,
);

typedef _dart_InitiateSystemShutdownExW = int Function(
  ffi.Pointer<ffi.Uint16> lpMachineName,
  ffi.Pointer<ffi.Uint16> lpMessage,
  int dwTimeout,
  int bForceAppsClosed,
  int bRebootAfterShutdown,
  int dwReason,
);

typedef _c_InitiateShutdownA = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> lpMachineName,
  ffi.Pointer<ffi.Int8> lpMessage,
  ffi.Uint64 dwGracePeriod,
  ffi.Uint64 dwShutdownFlags,
  ffi.Uint64 dwReason,
);

typedef _dart_InitiateShutdownA = int Function(
  ffi.Pointer<ffi.Int8> lpMachineName,
  ffi.Pointer<ffi.Int8> lpMessage,
  int dwGracePeriod,
  int dwShutdownFlags,
  int dwReason,
);

typedef _c_InitiateShutdownW = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> lpMachineName,
  ffi.Pointer<ffi.Uint16> lpMessage,
  ffi.Uint64 dwGracePeriod,
  ffi.Uint64 dwShutdownFlags,
  ffi.Uint64 dwReason,
);

typedef _dart_InitiateShutdownW = int Function(
  ffi.Pointer<ffi.Uint16> lpMachineName,
  ffi.Pointer<ffi.Uint16> lpMessage,
  int dwGracePeriod,
  int dwShutdownFlags,
  int dwReason,
);

typedef _c_CheckForHiberboot = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint8> pHiberboot,
  ffi.Uint8 bClearFlag,
);

typedef _dart_CheckForHiberboot = int Function(
  ffi.Pointer<ffi.Uint8> pHiberboot,
  int bClearFlag,
);

typedef _c_RegSaveKeyExA = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpFile,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  ffi.Uint64 Flags,
);

typedef _dart_RegSaveKeyExA = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Int8> lpFile,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  int Flags,
);

typedef _c_RegSaveKeyExW = ffi.Int64 Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpFile,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  ffi.Uint64 Flags,
);

typedef _dart_RegSaveKeyExW = int Function(
  ffi.Pointer<HKEY__> hKey,
  ffi.Pointer<ffi.Uint16> lpFile,
  ffi.Pointer<LPSECURITY_ATTRIBUTES> lpSecurityAttributes,
  int Flags,
);

typedef _c_WNetAddConnectionA = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> lpRemoteName,
  ffi.Pointer<ffi.Int8> lpPassword,
  ffi.Pointer<ffi.Int8> lpLocalName,
);

typedef _dart_WNetAddConnectionA = int Function(
  ffi.Pointer<ffi.Int8> lpRemoteName,
  ffi.Pointer<ffi.Int8> lpPassword,
  ffi.Pointer<ffi.Int8> lpLocalName,
);

typedef _c_WNetAddConnectionW = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> lpRemoteName,
  ffi.Pointer<ffi.Uint16> lpPassword,
  ffi.Pointer<ffi.Uint16> lpLocalName,
);

typedef _dart_WNetAddConnectionW = int Function(
  ffi.Pointer<ffi.Uint16> lpRemoteName,
  ffi.Pointer<ffi.Uint16> lpPassword,
  ffi.Pointer<ffi.Uint16> lpLocalName,
);

typedef _c_WNetAddConnection2A = ffi.Uint64 Function(
  ffi.Pointer<LPNETRESOURCEA> lpNetResource,
  ffi.Pointer<ffi.Int8> lpPassword,
  ffi.Pointer<ffi.Int8> lpUserName,
  ffi.Uint64 dwFlags,
);

typedef _dart_WNetAddConnection2A = int Function(
  ffi.Pointer<LPNETRESOURCEA> lpNetResource,
  ffi.Pointer<ffi.Int8> lpPassword,
  ffi.Pointer<ffi.Int8> lpUserName,
  int dwFlags,
);

typedef _c_WNetAddConnection2W = ffi.Uint64 Function(
  ffi.Pointer<LPNETRESOURCEW> lpNetResource,
  ffi.Pointer<ffi.Uint16> lpPassword,
  ffi.Pointer<ffi.Uint16> lpUserName,
  ffi.Uint64 dwFlags,
);

typedef _dart_WNetAddConnection2W = int Function(
  ffi.Pointer<LPNETRESOURCEW> lpNetResource,
  ffi.Pointer<ffi.Uint16> lpPassword,
  ffi.Pointer<ffi.Uint16> lpUserName,
  int dwFlags,
);

typedef _c_WNetAddConnection3A = ffi.Uint64 Function(
  ffi.Pointer<HWND__> hwndOwner,
  ffi.Pointer<LPNETRESOURCEA> lpNetResource,
  ffi.Pointer<ffi.Int8> lpPassword,
  ffi.Pointer<ffi.Int8> lpUserName,
  ffi.Uint64 dwFlags,
);

typedef _dart_WNetAddConnection3A = int Function(
  ffi.Pointer<HWND__> hwndOwner,
  ffi.Pointer<LPNETRESOURCEA> lpNetResource,
  ffi.Pointer<ffi.Int8> lpPassword,
  ffi.Pointer<ffi.Int8> lpUserName,
  int dwFlags,
);

typedef _c_WNetAddConnection3W = ffi.Uint64 Function(
  ffi.Pointer<HWND__> hwndOwner,
  ffi.Pointer<LPNETRESOURCEW> lpNetResource,
  ffi.Pointer<ffi.Uint16> lpPassword,
  ffi.Pointer<ffi.Uint16> lpUserName,
  ffi.Uint64 dwFlags,
);

typedef _dart_WNetAddConnection3W = int Function(
  ffi.Pointer<HWND__> hwndOwner,
  ffi.Pointer<LPNETRESOURCEW> lpNetResource,
  ffi.Pointer<ffi.Uint16> lpPassword,
  ffi.Pointer<ffi.Uint16> lpUserName,
  int dwFlags,
);

typedef _c_WNetAddConnection4A = ffi.Uint64 Function(
  ffi.Pointer<HWND__> hwndOwner,
  ffi.Pointer<LPNETRESOURCEA> lpNetResource,
  ffi.Pointer<ffi.Void> pAuthBuffer,
  ffi.Uint64 cbAuthBuffer,
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Uint8> lpUseOptions,
  ffi.Uint64 cbUseOptions,
);

typedef _dart_WNetAddConnection4A = int Function(
  ffi.Pointer<HWND__> hwndOwner,
  ffi.Pointer<LPNETRESOURCEA> lpNetResource,
  ffi.Pointer<ffi.Void> pAuthBuffer,
  int cbAuthBuffer,
  int dwFlags,
  ffi.Pointer<ffi.Uint8> lpUseOptions,
  int cbUseOptions,
);

typedef _c_WNetAddConnection4W = ffi.Uint64 Function(
  ffi.Pointer<HWND__> hwndOwner,
  ffi.Pointer<LPNETRESOURCEW> lpNetResource,
  ffi.Pointer<ffi.Void> pAuthBuffer,
  ffi.Uint64 cbAuthBuffer,
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Uint8> lpUseOptions,
  ffi.Uint64 cbUseOptions,
);

typedef _dart_WNetAddConnection4W = int Function(
  ffi.Pointer<HWND__> hwndOwner,
  ffi.Pointer<LPNETRESOURCEW> lpNetResource,
  ffi.Pointer<ffi.Void> pAuthBuffer,
  int cbAuthBuffer,
  int dwFlags,
  ffi.Pointer<ffi.Uint8> lpUseOptions,
  int cbUseOptions,
);

typedef _c_WNetCancelConnectionA = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> lpName,
  ffi.Int32 fForce,
);

typedef _dart_WNetCancelConnectionA = int Function(
  ffi.Pointer<ffi.Int8> lpName,
  int fForce,
);

typedef _c_WNetCancelConnectionW = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Int32 fForce,
);

typedef _dart_WNetCancelConnectionW = int Function(
  ffi.Pointer<ffi.Uint16> lpName,
  int fForce,
);

typedef _c_WNetCancelConnection2A = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> lpName,
  ffi.Uint64 dwFlags,
  ffi.Int32 fForce,
);

typedef _dart_WNetCancelConnection2A = int Function(
  ffi.Pointer<ffi.Int8> lpName,
  int dwFlags,
  int fForce,
);

typedef _c_WNetCancelConnection2W = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Uint64 dwFlags,
  ffi.Int32 fForce,
);

typedef _dart_WNetCancelConnection2W = int Function(
  ffi.Pointer<ffi.Uint16> lpName,
  int dwFlags,
  int fForce,
);

typedef _c_WNetGetConnectionA = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> lpLocalName,
  ffi.Pointer<ffi.Int8> lpRemoteName,
  ffi.Pointer<ffi.Uint64> lpnLength,
);

typedef _dart_WNetGetConnectionA = int Function(
  ffi.Pointer<ffi.Int8> lpLocalName,
  ffi.Pointer<ffi.Int8> lpRemoteName,
  ffi.Pointer<ffi.Uint64> lpnLength,
);

typedef _c_WNetGetConnectionW = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> lpLocalName,
  ffi.Pointer<ffi.Uint16> lpRemoteName,
  ffi.Pointer<ffi.Uint64> lpnLength,
);

typedef _dart_WNetGetConnectionW = int Function(
  ffi.Pointer<ffi.Uint16> lpLocalName,
  ffi.Pointer<ffi.Uint16> lpRemoteName,
  ffi.Pointer<ffi.Uint64> lpnLength,
);

typedef _c_WNetRestoreSingleConnectionW = ffi.Uint64 Function(
  ffi.Pointer<HWND__> hwndParent,
  ffi.Pointer<ffi.Uint16> lpDevice,
  ffi.Int32 fUseUI,
);

typedef _dart_WNetRestoreSingleConnectionW = int Function(
  ffi.Pointer<HWND__> hwndParent,
  ffi.Pointer<ffi.Uint16> lpDevice,
  int fUseUI,
);

typedef _c_WNetUseConnectionA = ffi.Uint64 Function(
  ffi.Pointer<HWND__> hwndOwner,
  ffi.Pointer<LPNETRESOURCEA> lpNetResource,
  ffi.Pointer<ffi.Int8> lpPassword,
  ffi.Pointer<ffi.Int8> lpUserId,
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Int8> lpAccessName,
  ffi.Pointer<ffi.Uint64> lpBufferSize,
  ffi.Pointer<ffi.Uint64> lpResult,
);

typedef _dart_WNetUseConnectionA = int Function(
  ffi.Pointer<HWND__> hwndOwner,
  ffi.Pointer<LPNETRESOURCEA> lpNetResource,
  ffi.Pointer<ffi.Int8> lpPassword,
  ffi.Pointer<ffi.Int8> lpUserId,
  int dwFlags,
  ffi.Pointer<ffi.Int8> lpAccessName,
  ffi.Pointer<ffi.Uint64> lpBufferSize,
  ffi.Pointer<ffi.Uint64> lpResult,
);

typedef _c_WNetUseConnectionW = ffi.Uint64 Function(
  ffi.Pointer<HWND__> hwndOwner,
  ffi.Pointer<LPNETRESOURCEW> lpNetResource,
  ffi.Pointer<ffi.Uint16> lpPassword,
  ffi.Pointer<ffi.Uint16> lpUserId,
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Uint16> lpAccessName,
  ffi.Pointer<ffi.Uint64> lpBufferSize,
  ffi.Pointer<ffi.Uint64> lpResult,
);

typedef _dart_WNetUseConnectionW = int Function(
  ffi.Pointer<HWND__> hwndOwner,
  ffi.Pointer<LPNETRESOURCEW> lpNetResource,
  ffi.Pointer<ffi.Uint16> lpPassword,
  ffi.Pointer<ffi.Uint16> lpUserId,
  int dwFlags,
  ffi.Pointer<ffi.Uint16> lpAccessName,
  ffi.Pointer<ffi.Uint64> lpBufferSize,
  ffi.Pointer<ffi.Uint64> lpResult,
);

typedef _c_WNetUseConnection4A = ffi.Uint64 Function(
  ffi.Pointer<HWND__> hwndOwner,
  ffi.Pointer<LPNETRESOURCEA> lpNetResource,
  ffi.Pointer<ffi.Void> pAuthBuffer,
  ffi.Uint64 cbAuthBuffer,
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Uint8> lpUseOptions,
  ffi.Uint64 cbUseOptions,
  ffi.Pointer<ffi.Int8> lpAccessName,
  ffi.Pointer<ffi.Uint64> lpBufferSize,
  ffi.Pointer<ffi.Uint64> lpResult,
);

typedef _dart_WNetUseConnection4A = int Function(
  ffi.Pointer<HWND__> hwndOwner,
  ffi.Pointer<LPNETRESOURCEA> lpNetResource,
  ffi.Pointer<ffi.Void> pAuthBuffer,
  int cbAuthBuffer,
  int dwFlags,
  ffi.Pointer<ffi.Uint8> lpUseOptions,
  int cbUseOptions,
  ffi.Pointer<ffi.Int8> lpAccessName,
  ffi.Pointer<ffi.Uint64> lpBufferSize,
  ffi.Pointer<ffi.Uint64> lpResult,
);

typedef _c_WNetUseConnection4W = ffi.Uint64 Function(
  ffi.Pointer<HWND__> hwndOwner,
  ffi.Pointer<LPNETRESOURCEW> lpNetResource,
  ffi.Pointer<ffi.Void> pAuthBuffer,
  ffi.Uint64 cbAuthBuffer,
  ffi.Uint64 dwFlags,
  ffi.Pointer<ffi.Uint8> lpUseOptions,
  ffi.Uint64 cbUseOptions,
  ffi.Pointer<ffi.Uint16> lpAccessName,
  ffi.Pointer<ffi.Uint64> lpBufferSize,
  ffi.Pointer<ffi.Uint64> lpResult,
);

typedef _dart_WNetUseConnection4W = int Function(
  ffi.Pointer<HWND__> hwndOwner,
  ffi.Pointer<LPNETRESOURCEW> lpNetResource,
  ffi.Pointer<ffi.Void> pAuthBuffer,
  int cbAuthBuffer,
  int dwFlags,
  ffi.Pointer<ffi.Uint8> lpUseOptions,
  int cbUseOptions,
  ffi.Pointer<ffi.Uint16> lpAccessName,
  ffi.Pointer<ffi.Uint64> lpBufferSize,
  ffi.Pointer<ffi.Uint64> lpResult,
);

typedef _c_WNetConnectionDialog = ffi.Uint64 Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Uint64 dwType,
);

typedef _dart_WNetConnectionDialog = int Function(
  ffi.Pointer<HWND__> hwnd,
  int dwType,
);

typedef _c_WNetDisconnectDialog = ffi.Uint64 Function(
  ffi.Pointer<HWND__> hwnd,
  ffi.Uint64 dwType,
);

typedef _dart_WNetDisconnectDialog = int Function(
  ffi.Pointer<HWND__> hwnd,
  int dwType,
);

typedef _c_WNetConnectionDialog1A = ffi.Uint64 Function(
  ffi.Pointer<LPCONNECTDLGSTRUCTA> lpConnDlgStruct,
);

typedef _dart_WNetConnectionDialog1A = int Function(
  ffi.Pointer<LPCONNECTDLGSTRUCTA> lpConnDlgStruct,
);

typedef _c_WNetConnectionDialog1W = ffi.Uint64 Function(
  ffi.Pointer<LPCONNECTDLGSTRUCTW> lpConnDlgStruct,
);

typedef _dart_WNetConnectionDialog1W = int Function(
  ffi.Pointer<LPCONNECTDLGSTRUCTW> lpConnDlgStruct,
);

typedef _c_WNetDisconnectDialog1A = ffi.Uint64 Function(
  ffi.Pointer<LPDISCDLGSTRUCTA> lpConnDlgStruct,
);

typedef _dart_WNetDisconnectDialog1A = int Function(
  ffi.Pointer<LPDISCDLGSTRUCTA> lpConnDlgStruct,
);

typedef _c_WNetDisconnectDialog1W = ffi.Uint64 Function(
  ffi.Pointer<LPDISCDLGSTRUCTW> lpConnDlgStruct,
);

typedef _dart_WNetDisconnectDialog1W = int Function(
  ffi.Pointer<LPDISCDLGSTRUCTW> lpConnDlgStruct,
);

typedef _c_WNetOpenEnumA = ffi.Uint64 Function(
  ffi.Uint64 dwScope,
  ffi.Uint64 dwType,
  ffi.Uint64 dwUsage,
  ffi.Pointer<LPNETRESOURCEA> lpNetResource,
  ffi.Pointer<ffi.Pointer<ffi.Void>> lphEnum,
);

typedef _dart_WNetOpenEnumA = int Function(
  int dwScope,
  int dwType,
  int dwUsage,
  ffi.Pointer<LPNETRESOURCEA> lpNetResource,
  ffi.Pointer<ffi.Pointer<ffi.Void>> lphEnum,
);

typedef _c_WNetOpenEnumW = ffi.Uint64 Function(
  ffi.Uint64 dwScope,
  ffi.Uint64 dwType,
  ffi.Uint64 dwUsage,
  ffi.Pointer<LPNETRESOURCEW> lpNetResource,
  ffi.Pointer<ffi.Pointer<ffi.Void>> lphEnum,
);

typedef _dart_WNetOpenEnumW = int Function(
  int dwScope,
  int dwType,
  int dwUsage,
  ffi.Pointer<LPNETRESOURCEW> lpNetResource,
  ffi.Pointer<ffi.Pointer<ffi.Void>> lphEnum,
);

typedef _c_WNetEnumResourceA = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> hEnum,
  ffi.Pointer<ffi.Uint64> lpcCount,
  ffi.Pointer<ffi.Void> lpBuffer,
  ffi.Pointer<ffi.Uint64> lpBufferSize,
);

typedef _dart_WNetEnumResourceA = int Function(
  ffi.Pointer<ffi.Void> hEnum,
  ffi.Pointer<ffi.Uint64> lpcCount,
  ffi.Pointer<ffi.Void> lpBuffer,
  ffi.Pointer<ffi.Uint64> lpBufferSize,
);

typedef _c_WNetEnumResourceW = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> hEnum,
  ffi.Pointer<ffi.Uint64> lpcCount,
  ffi.Pointer<ffi.Void> lpBuffer,
  ffi.Pointer<ffi.Uint64> lpBufferSize,
);

typedef _dart_WNetEnumResourceW = int Function(
  ffi.Pointer<ffi.Void> hEnum,
  ffi.Pointer<ffi.Uint64> lpcCount,
  ffi.Pointer<ffi.Void> lpBuffer,
  ffi.Pointer<ffi.Uint64> lpBufferSize,
);

typedef _c_WNetCloseEnum = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> hEnum,
);

typedef _dart_WNetCloseEnum = int Function(
  ffi.Pointer<ffi.Void> hEnum,
);

typedef _c_WNetGetResourceParentA = ffi.Uint64 Function(
  ffi.Pointer<LPNETRESOURCEA> lpNetResource,
  ffi.Pointer<ffi.Void> lpBuffer,
  ffi.Pointer<ffi.Uint64> lpcbBuffer,
);

typedef _dart_WNetGetResourceParentA = int Function(
  ffi.Pointer<LPNETRESOURCEA> lpNetResource,
  ffi.Pointer<ffi.Void> lpBuffer,
  ffi.Pointer<ffi.Uint64> lpcbBuffer,
);

typedef _c_WNetGetResourceParentW = ffi.Uint64 Function(
  ffi.Pointer<LPNETRESOURCEW> lpNetResource,
  ffi.Pointer<ffi.Void> lpBuffer,
  ffi.Pointer<ffi.Uint64> lpcbBuffer,
);

typedef _dart_WNetGetResourceParentW = int Function(
  ffi.Pointer<LPNETRESOURCEW> lpNetResource,
  ffi.Pointer<ffi.Void> lpBuffer,
  ffi.Pointer<ffi.Uint64> lpcbBuffer,
);

typedef _c_WNetGetResourceInformationA = ffi.Uint64 Function(
  ffi.Pointer<LPNETRESOURCEA> lpNetResource,
  ffi.Pointer<ffi.Void> lpBuffer,
  ffi.Pointer<ffi.Uint64> lpcbBuffer,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> lplpSystem,
);

typedef _dart_WNetGetResourceInformationA = int Function(
  ffi.Pointer<LPNETRESOURCEA> lpNetResource,
  ffi.Pointer<ffi.Void> lpBuffer,
  ffi.Pointer<ffi.Uint64> lpcbBuffer,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> lplpSystem,
);

typedef _c_WNetGetResourceInformationW = ffi.Uint64 Function(
  ffi.Pointer<LPNETRESOURCEW> lpNetResource,
  ffi.Pointer<ffi.Void> lpBuffer,
  ffi.Pointer<ffi.Uint64> lpcbBuffer,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> lplpSystem,
);

typedef _dart_WNetGetResourceInformationW = int Function(
  ffi.Pointer<LPNETRESOURCEW> lpNetResource,
  ffi.Pointer<ffi.Void> lpBuffer,
  ffi.Pointer<ffi.Uint64> lpcbBuffer,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> lplpSystem,
);

typedef _c_WNetGetUniversalNameA = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> lpLocalPath,
  ffi.Uint64 dwInfoLevel,
  ffi.Pointer<ffi.Void> lpBuffer,
  ffi.Pointer<ffi.Uint64> lpBufferSize,
);

typedef _dart_WNetGetUniversalNameA = int Function(
  ffi.Pointer<ffi.Int8> lpLocalPath,
  int dwInfoLevel,
  ffi.Pointer<ffi.Void> lpBuffer,
  ffi.Pointer<ffi.Uint64> lpBufferSize,
);

typedef _c_WNetGetUniversalNameW = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> lpLocalPath,
  ffi.Uint64 dwInfoLevel,
  ffi.Pointer<ffi.Void> lpBuffer,
  ffi.Pointer<ffi.Uint64> lpBufferSize,
);

typedef _dart_WNetGetUniversalNameW = int Function(
  ffi.Pointer<ffi.Uint16> lpLocalPath,
  int dwInfoLevel,
  ffi.Pointer<ffi.Void> lpBuffer,
  ffi.Pointer<ffi.Uint64> lpBufferSize,
);

typedef _c_WNetGetUserA = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> lpName,
  ffi.Pointer<ffi.Int8> lpUserName,
  ffi.Pointer<ffi.Uint64> lpnLength,
);

typedef _dart_WNetGetUserA = int Function(
  ffi.Pointer<ffi.Int8> lpName,
  ffi.Pointer<ffi.Int8> lpUserName,
  ffi.Pointer<ffi.Uint64> lpnLength,
);

typedef _c_WNetGetUserW = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Pointer<ffi.Uint16> lpUserName,
  ffi.Pointer<ffi.Uint64> lpnLength,
);

typedef _dart_WNetGetUserW = int Function(
  ffi.Pointer<ffi.Uint16> lpName,
  ffi.Pointer<ffi.Uint16> lpUserName,
  ffi.Pointer<ffi.Uint64> lpnLength,
);

typedef _c_WNetGetProviderNameA = ffi.Uint64 Function(
  ffi.Uint64 dwNetType,
  ffi.Pointer<ffi.Int8> lpProviderName,
  ffi.Pointer<ffi.Uint64> lpBufferSize,
);

typedef _dart_WNetGetProviderNameA = int Function(
  int dwNetType,
  ffi.Pointer<ffi.Int8> lpProviderName,
  ffi.Pointer<ffi.Uint64> lpBufferSize,
);

typedef _c_WNetGetProviderNameW = ffi.Uint64 Function(
  ffi.Uint64 dwNetType,
  ffi.Pointer<ffi.Uint16> lpProviderName,
  ffi.Pointer<ffi.Uint64> lpBufferSize,
);

typedef _dart_WNetGetProviderNameW = int Function(
  int dwNetType,
  ffi.Pointer<ffi.Uint16> lpProviderName,
  ffi.Pointer<ffi.Uint64> lpBufferSize,
);

typedef _c_WNetGetNetworkInformationA = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> lpProvider,
  ffi.Pointer<LPNETINFOSTRUCT> lpNetInfoStruct,
);

typedef _dart_WNetGetNetworkInformationA = int Function(
  ffi.Pointer<ffi.Int8> lpProvider,
  ffi.Pointer<LPNETINFOSTRUCT> lpNetInfoStruct,
);

typedef _c_WNetGetNetworkInformationW = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> lpProvider,
  ffi.Pointer<LPNETINFOSTRUCT> lpNetInfoStruct,
);

typedef _dart_WNetGetNetworkInformationW = int Function(
  ffi.Pointer<ffi.Uint16> lpProvider,
  ffi.Pointer<LPNETINFOSTRUCT> lpNetInfoStruct,
);

typedef _c_WNetGetLastErrorA = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint64> lpError,
  ffi.Pointer<ffi.Int8> lpErrorBuf,
  ffi.Uint64 nErrorBufSize,
  ffi.Pointer<ffi.Int8> lpNameBuf,
  ffi.Uint64 nNameBufSize,
);

typedef _dart_WNetGetLastErrorA = int Function(
  ffi.Pointer<ffi.Uint64> lpError,
  ffi.Pointer<ffi.Int8> lpErrorBuf,
  int nErrorBufSize,
  ffi.Pointer<ffi.Int8> lpNameBuf,
  int nNameBufSize,
);

typedef _c_WNetGetLastErrorW = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint64> lpError,
  ffi.Pointer<ffi.Uint16> lpErrorBuf,
  ffi.Uint64 nErrorBufSize,
  ffi.Pointer<ffi.Uint16> lpNameBuf,
  ffi.Uint64 nNameBufSize,
);

typedef _dart_WNetGetLastErrorW = int Function(
  ffi.Pointer<ffi.Uint64> lpError,
  ffi.Pointer<ffi.Uint16> lpErrorBuf,
  int nErrorBufSize,
  ffi.Pointer<ffi.Uint16> lpNameBuf,
  int nNameBufSize,
);

typedef _c_MultinetGetConnectionPerformanceA = ffi.Uint64 Function(
  ffi.Pointer<LPNETRESOURCEA> lpNetResource,
  ffi.Pointer<LPNETCONNECTINFOSTRUCT> lpNetConnectInfoStruct,
);

typedef _dart_MultinetGetConnectionPerformanceA = int Function(
  ffi.Pointer<LPNETRESOURCEA> lpNetResource,
  ffi.Pointer<LPNETCONNECTINFOSTRUCT> lpNetConnectInfoStruct,
);

typedef _c_MultinetGetConnectionPerformanceW = ffi.Uint64 Function(
  ffi.Pointer<LPNETRESOURCEW> lpNetResource,
  ffi.Pointer<LPNETCONNECTINFOSTRUCT> lpNetConnectInfoStruct,
);

typedef _dart_MultinetGetConnectionPerformanceW = int Function(
  ffi.Pointer<LPNETRESOURCEW> lpNetResource,
  ffi.Pointer<LPNETCONNECTINFOSTRUCT> lpNetConnectInfoStruct,
);

typedef _c_uaw_CharUpperW = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> String,
);

typedef _dart_uaw_CharUpperW = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> String,
);

typedef _c_uaw_lstrcmpW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> String1,
  ffi.Pointer<ffi.Uint16> String2,
);

typedef _dart_uaw_lstrcmpW = int Function(
  ffi.Pointer<ffi.Uint16> String1,
  ffi.Pointer<ffi.Uint16> String2,
);

typedef _c_uaw_lstrcmpiW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> String1,
  ffi.Pointer<ffi.Uint16> String2,
);

typedef _dart_uaw_lstrcmpiW = int Function(
  ffi.Pointer<ffi.Uint16> String1,
  ffi.Pointer<ffi.Uint16> String2,
);

typedef _c_uaw_lstrlenW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> String,
);

typedef _dart_uaw_lstrlenW = int Function(
  ffi.Pointer<ffi.Uint16> String,
);

typedef _c_uaw_wcschr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> String,
  ffi.Uint16 Character,
);

typedef _dart_uaw_wcschr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> String,
  int Character,
);

typedef _c_uaw_wcscpy = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> Destination,
  ffi.Pointer<ffi.Uint16> Source,
);

typedef _dart_uaw_wcscpy = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> Destination,
  ffi.Pointer<ffi.Uint16> Source,
);

typedef _c_uaw_wcsicmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> String1,
  ffi.Pointer<ffi.Uint16> String2,
);

typedef _dart_uaw_wcsicmp = int Function(
  ffi.Pointer<ffi.Uint16> String1,
  ffi.Pointer<ffi.Uint16> String2,
);

typedef _c_uaw_wcslen = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> String,
);

typedef _dart_uaw_wcslen = int Function(
  ffi.Pointer<ffi.Uint16> String,
);

typedef _c_uaw_wcsrchr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> String,
  ffi.Uint16 Character,
);

typedef _dart_uaw_wcsrchr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> String,
  int Character,
);

typedef _c_ua_CharUpperW = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> String,
);

typedef _dart_ua_CharUpperW = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> String,
);

typedef _c_ua_lstrcmpW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> String1,
  ffi.Pointer<ffi.Uint16> String2,
);

typedef _dart_ua_lstrcmpW = int Function(
  ffi.Pointer<ffi.Uint16> String1,
  ffi.Pointer<ffi.Uint16> String2,
);

typedef _c_ua_lstrcmpiW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> String1,
  ffi.Pointer<ffi.Uint16> String2,
);

typedef _dart_ua_lstrcmpiW = int Function(
  ffi.Pointer<ffi.Uint16> String1,
  ffi.Pointer<ffi.Uint16> String2,
);

typedef _c_ua_lstrlenW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> String,
);

typedef _dart_ua_lstrlenW = int Function(
  ffi.Pointer<ffi.Uint16> String,
);

typedef _c_ua_wcschr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> String,
  ffi.Uint16 Character,
);

typedef _dart_ua_wcschr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> String,
  int Character,
);

typedef _c_ua_wcsrchr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> String,
  ffi.Uint16 Character,
);

typedef _dart_ua_wcsrchr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> String,
  int Character,
);

typedef _c_ua_wcscpy = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> Destination,
  ffi.Pointer<ffi.Uint16> Source,
);

typedef _dart_ua_wcscpy = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> Destination,
  ffi.Pointer<ffi.Uint16> Source,
);

typedef _c_ua_wcscpy_s = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> Destination,
  ffi.Uint64 DestinationSize,
  ffi.Pointer<ffi.Uint16> Source,
);

typedef _dart_ua_wcscpy_s = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> Destination,
  int DestinationSize,
  ffi.Pointer<ffi.Uint16> Source,
);

typedef _c_ua_wcslen = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> String,
);

typedef _dart_ua_wcslen = int Function(
  ffi.Pointer<ffi.Uint16> String,
);

typedef _c_ua_wcsicmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> String1,
  ffi.Pointer<ffi.Uint16> String2,
);

typedef _dart_ua_wcsicmp = int Function(
  ffi.Pointer<ffi.Uint16> String1,
  ffi.Pointer<ffi.Uint16> String2,
);

typedef _c_ChangeServiceConfigA = ffi.Int32 Function(
  ffi.Pointer<SC_HANDLE__> hService,
  ffi.Uint64 dwServiceType,
  ffi.Uint64 dwStartType,
  ffi.Uint64 dwErrorControl,
  ffi.Pointer<ffi.Int8> lpBinaryPathName,
  ffi.Pointer<ffi.Int8> lpLoadOrderGroup,
  ffi.Pointer<ffi.Uint64> lpdwTagId,
  ffi.Pointer<ffi.Int8> lpDependencies,
  ffi.Pointer<ffi.Int8> lpServiceStartName,
  ffi.Pointer<ffi.Int8> lpPassword,
  ffi.Pointer<ffi.Int8> lpDisplayName,
);

typedef _dart_ChangeServiceConfigA = int Function(
  ffi.Pointer<SC_HANDLE__> hService,
  int dwServiceType,
  int dwStartType,
  int dwErrorControl,
  ffi.Pointer<ffi.Int8> lpBinaryPathName,
  ffi.Pointer<ffi.Int8> lpLoadOrderGroup,
  ffi.Pointer<ffi.Uint64> lpdwTagId,
  ffi.Pointer<ffi.Int8> lpDependencies,
  ffi.Pointer<ffi.Int8> lpServiceStartName,
  ffi.Pointer<ffi.Int8> lpPassword,
  ffi.Pointer<ffi.Int8> lpDisplayName,
);

typedef _c_ChangeServiceConfigW = ffi.Int32 Function(
  ffi.Pointer<SC_HANDLE__> hService,
  ffi.Uint64 dwServiceType,
  ffi.Uint64 dwStartType,
  ffi.Uint64 dwErrorControl,
  ffi.Pointer<ffi.Uint16> lpBinaryPathName,
  ffi.Pointer<ffi.Uint16> lpLoadOrderGroup,
  ffi.Pointer<ffi.Uint64> lpdwTagId,
  ffi.Pointer<ffi.Uint16> lpDependencies,
  ffi.Pointer<ffi.Uint16> lpServiceStartName,
  ffi.Pointer<ffi.Uint16> lpPassword,
  ffi.Pointer<ffi.Uint16> lpDisplayName,
);

typedef _dart_ChangeServiceConfigW = int Function(
  ffi.Pointer<SC_HANDLE__> hService,
  int dwServiceType,
  int dwStartType,
  int dwErrorControl,
  ffi.Pointer<ffi.Uint16> lpBinaryPathName,
  ffi.Pointer<ffi.Uint16> lpLoadOrderGroup,
  ffi.Pointer<ffi.Uint64> lpdwTagId,
  ffi.Pointer<ffi.Uint16> lpDependencies,
  ffi.Pointer<ffi.Uint16> lpServiceStartName,
  ffi.Pointer<ffi.Uint16> lpPassword,
  ffi.Pointer<ffi.Uint16> lpDisplayName,
);

typedef _c_ChangeServiceConfig2A = ffi.Int32 Function(
  ffi.Pointer<SC_HANDLE__> hService,
  ffi.Uint64 dwInfoLevel,
  ffi.Pointer<ffi.Void> lpInfo,
);

typedef _dart_ChangeServiceConfig2A = int Function(
  ffi.Pointer<SC_HANDLE__> hService,
  int dwInfoLevel,
  ffi.Pointer<ffi.Void> lpInfo,
);

typedef _c_ChangeServiceConfig2W = ffi.Int32 Function(
  ffi.Pointer<SC_HANDLE__> hService,
  ffi.Uint64 dwInfoLevel,
  ffi.Pointer<ffi.Void> lpInfo,
);

typedef _dart_ChangeServiceConfig2W = int Function(
  ffi.Pointer<SC_HANDLE__> hService,
  int dwInfoLevel,
  ffi.Pointer<ffi.Void> lpInfo,
);

typedef _c_CloseServiceHandle = ffi.Int32 Function(
  ffi.Pointer<SC_HANDLE__> hSCObject,
);

typedef _dart_CloseServiceHandle = int Function(
  ffi.Pointer<SC_HANDLE__> hSCObject,
);

typedef _c_ControlService = ffi.Int32 Function(
  ffi.Pointer<SC_HANDLE__> hService,
  ffi.Uint64 dwControl,
  ffi.Pointer<LPSERVICE_STATUS> lpServiceStatus,
);

typedef _dart_ControlService = int Function(
  ffi.Pointer<SC_HANDLE__> hService,
  int dwControl,
  ffi.Pointer<LPSERVICE_STATUS> lpServiceStatus,
);

typedef _c_CreateServiceA = ffi.Pointer<SC_HANDLE__> Function(
  ffi.Pointer<SC_HANDLE__> hSCManager,
  ffi.Pointer<ffi.Int8> lpServiceName,
  ffi.Pointer<ffi.Int8> lpDisplayName,
  ffi.Uint64 dwDesiredAccess,
  ffi.Uint64 dwServiceType,
  ffi.Uint64 dwStartType,
  ffi.Uint64 dwErrorControl,
  ffi.Pointer<ffi.Int8> lpBinaryPathName,
  ffi.Pointer<ffi.Int8> lpLoadOrderGroup,
  ffi.Pointer<ffi.Uint64> lpdwTagId,
  ffi.Pointer<ffi.Int8> lpDependencies,
  ffi.Pointer<ffi.Int8> lpServiceStartName,
  ffi.Pointer<ffi.Int8> lpPassword,
);

typedef _dart_CreateServiceA = ffi.Pointer<SC_HANDLE__> Function(
  ffi.Pointer<SC_HANDLE__> hSCManager,
  ffi.Pointer<ffi.Int8> lpServiceName,
  ffi.Pointer<ffi.Int8> lpDisplayName,
  int dwDesiredAccess,
  int dwServiceType,
  int dwStartType,
  int dwErrorControl,
  ffi.Pointer<ffi.Int8> lpBinaryPathName,
  ffi.Pointer<ffi.Int8> lpLoadOrderGroup,
  ffi.Pointer<ffi.Uint64> lpdwTagId,
  ffi.Pointer<ffi.Int8> lpDependencies,
  ffi.Pointer<ffi.Int8> lpServiceStartName,
  ffi.Pointer<ffi.Int8> lpPassword,
);

typedef _c_CreateServiceW = ffi.Pointer<SC_HANDLE__> Function(
  ffi.Pointer<SC_HANDLE__> hSCManager,
  ffi.Pointer<ffi.Uint16> lpServiceName,
  ffi.Pointer<ffi.Uint16> lpDisplayName,
  ffi.Uint64 dwDesiredAccess,
  ffi.Uint64 dwServiceType,
  ffi.Uint64 dwStartType,
  ffi.Uint64 dwErrorControl,
  ffi.Pointer<ffi.Uint16> lpBinaryPathName,
  ffi.Pointer<ffi.Uint16> lpLoadOrderGroup,
  ffi.Pointer<ffi.Uint64> lpdwTagId,
  ffi.Pointer<ffi.Uint16> lpDependencies,
  ffi.Pointer<ffi.Uint16> lpServiceStartName,
  ffi.Pointer<ffi.Uint16> lpPassword,
);

typedef _dart_CreateServiceW = ffi.Pointer<SC_HANDLE__> Function(
  ffi.Pointer<SC_HANDLE__> hSCManager,
  ffi.Pointer<ffi.Uint16> lpServiceName,
  ffi.Pointer<ffi.Uint16> lpDisplayName,
  int dwDesiredAccess,
  int dwServiceType,
  int dwStartType,
  int dwErrorControl,
  ffi.Pointer<ffi.Uint16> lpBinaryPathName,
  ffi.Pointer<ffi.Uint16> lpLoadOrderGroup,
  ffi.Pointer<ffi.Uint64> lpdwTagId,
  ffi.Pointer<ffi.Uint16> lpDependencies,
  ffi.Pointer<ffi.Uint16> lpServiceStartName,
  ffi.Pointer<ffi.Uint16> lpPassword,
);

typedef _c_DeleteService = ffi.Int32 Function(
  ffi.Pointer<SC_HANDLE__> hService,
);

typedef _dart_DeleteService = int Function(
  ffi.Pointer<SC_HANDLE__> hService,
);

typedef _c_EnumDependentServicesA = ffi.Int32 Function(
  ffi.Pointer<SC_HANDLE__> hService,
  ffi.Uint64 dwServiceState,
  ffi.Pointer<LPENUM_SERVICE_STATUSA> lpServices,
  ffi.Uint64 cbBufSize,
  ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
  ffi.Pointer<ffi.Uint64> lpServicesReturned,
);

typedef _dart_EnumDependentServicesA = int Function(
  ffi.Pointer<SC_HANDLE__> hService,
  int dwServiceState,
  ffi.Pointer<LPENUM_SERVICE_STATUSA> lpServices,
  int cbBufSize,
  ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
  ffi.Pointer<ffi.Uint64> lpServicesReturned,
);

typedef _c_EnumDependentServicesW = ffi.Int32 Function(
  ffi.Pointer<SC_HANDLE__> hService,
  ffi.Uint64 dwServiceState,
  ffi.Pointer<LPENUM_SERVICE_STATUSW> lpServices,
  ffi.Uint64 cbBufSize,
  ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
  ffi.Pointer<ffi.Uint64> lpServicesReturned,
);

typedef _dart_EnumDependentServicesW = int Function(
  ffi.Pointer<SC_HANDLE__> hService,
  int dwServiceState,
  ffi.Pointer<LPENUM_SERVICE_STATUSW> lpServices,
  int cbBufSize,
  ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
  ffi.Pointer<ffi.Uint64> lpServicesReturned,
);

typedef _c_EnumServicesStatusA = ffi.Int32 Function(
  ffi.Pointer<SC_HANDLE__> hSCManager,
  ffi.Uint64 dwServiceType,
  ffi.Uint64 dwServiceState,
  ffi.Pointer<LPENUM_SERVICE_STATUSA> lpServices,
  ffi.Uint64 cbBufSize,
  ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
  ffi.Pointer<ffi.Uint64> lpServicesReturned,
  ffi.Pointer<ffi.Uint64> lpResumeHandle,
);

typedef _dart_EnumServicesStatusA = int Function(
  ffi.Pointer<SC_HANDLE__> hSCManager,
  int dwServiceType,
  int dwServiceState,
  ffi.Pointer<LPENUM_SERVICE_STATUSA> lpServices,
  int cbBufSize,
  ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
  ffi.Pointer<ffi.Uint64> lpServicesReturned,
  ffi.Pointer<ffi.Uint64> lpResumeHandle,
);

typedef _c_EnumServicesStatusW = ffi.Int32 Function(
  ffi.Pointer<SC_HANDLE__> hSCManager,
  ffi.Uint64 dwServiceType,
  ffi.Uint64 dwServiceState,
  ffi.Pointer<LPENUM_SERVICE_STATUSW> lpServices,
  ffi.Uint64 cbBufSize,
  ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
  ffi.Pointer<ffi.Uint64> lpServicesReturned,
  ffi.Pointer<ffi.Uint64> lpResumeHandle,
);

typedef _dart_EnumServicesStatusW = int Function(
  ffi.Pointer<SC_HANDLE__> hSCManager,
  int dwServiceType,
  int dwServiceState,
  ffi.Pointer<LPENUM_SERVICE_STATUSW> lpServices,
  int cbBufSize,
  ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
  ffi.Pointer<ffi.Uint64> lpServicesReturned,
  ffi.Pointer<ffi.Uint64> lpResumeHandle,
);

typedef _c_EnumServicesStatusExA = ffi.Int32 Function(
  ffi.Pointer<SC_HANDLE__> hSCManager,
  ffi.Int32 InfoLevel,
  ffi.Uint64 dwServiceType,
  ffi.Uint64 dwServiceState,
  ffi.Pointer<ffi.Uint8> lpServices,
  ffi.Uint64 cbBufSize,
  ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
  ffi.Pointer<ffi.Uint64> lpServicesReturned,
  ffi.Pointer<ffi.Uint64> lpResumeHandle,
  ffi.Pointer<ffi.Int8> pszGroupName,
);

typedef _dart_EnumServicesStatusExA = int Function(
  ffi.Pointer<SC_HANDLE__> hSCManager,
  int InfoLevel,
  int dwServiceType,
  int dwServiceState,
  ffi.Pointer<ffi.Uint8> lpServices,
  int cbBufSize,
  ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
  ffi.Pointer<ffi.Uint64> lpServicesReturned,
  ffi.Pointer<ffi.Uint64> lpResumeHandle,
  ffi.Pointer<ffi.Int8> pszGroupName,
);

typedef _c_EnumServicesStatusExW = ffi.Int32 Function(
  ffi.Pointer<SC_HANDLE__> hSCManager,
  ffi.Int32 InfoLevel,
  ffi.Uint64 dwServiceType,
  ffi.Uint64 dwServiceState,
  ffi.Pointer<ffi.Uint8> lpServices,
  ffi.Uint64 cbBufSize,
  ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
  ffi.Pointer<ffi.Uint64> lpServicesReturned,
  ffi.Pointer<ffi.Uint64> lpResumeHandle,
  ffi.Pointer<ffi.Uint16> pszGroupName,
);

typedef _dart_EnumServicesStatusExW = int Function(
  ffi.Pointer<SC_HANDLE__> hSCManager,
  int InfoLevel,
  int dwServiceType,
  int dwServiceState,
  ffi.Pointer<ffi.Uint8> lpServices,
  int cbBufSize,
  ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
  ffi.Pointer<ffi.Uint64> lpServicesReturned,
  ffi.Pointer<ffi.Uint64> lpResumeHandle,
  ffi.Pointer<ffi.Uint16> pszGroupName,
);

typedef _c_GetServiceKeyNameA = ffi.Int32 Function(
  ffi.Pointer<SC_HANDLE__> hSCManager,
  ffi.Pointer<ffi.Int8> lpDisplayName,
  ffi.Pointer<ffi.Int8> lpServiceName,
  ffi.Pointer<ffi.Uint64> lpcchBuffer,
);

typedef _dart_GetServiceKeyNameA = int Function(
  ffi.Pointer<SC_HANDLE__> hSCManager,
  ffi.Pointer<ffi.Int8> lpDisplayName,
  ffi.Pointer<ffi.Int8> lpServiceName,
  ffi.Pointer<ffi.Uint64> lpcchBuffer,
);

typedef _c_GetServiceKeyNameW = ffi.Int32 Function(
  ffi.Pointer<SC_HANDLE__> hSCManager,
  ffi.Pointer<ffi.Uint16> lpDisplayName,
  ffi.Pointer<ffi.Uint16> lpServiceName,
  ffi.Pointer<ffi.Uint64> lpcchBuffer,
);

typedef _dart_GetServiceKeyNameW = int Function(
  ffi.Pointer<SC_HANDLE__> hSCManager,
  ffi.Pointer<ffi.Uint16> lpDisplayName,
  ffi.Pointer<ffi.Uint16> lpServiceName,
  ffi.Pointer<ffi.Uint64> lpcchBuffer,
);

typedef _c_GetServiceDisplayNameA = ffi.Int32 Function(
  ffi.Pointer<SC_HANDLE__> hSCManager,
  ffi.Pointer<ffi.Int8> lpServiceName,
  ffi.Pointer<ffi.Int8> lpDisplayName,
  ffi.Pointer<ffi.Uint64> lpcchBuffer,
);

typedef _dart_GetServiceDisplayNameA = int Function(
  ffi.Pointer<SC_HANDLE__> hSCManager,
  ffi.Pointer<ffi.Int8> lpServiceName,
  ffi.Pointer<ffi.Int8> lpDisplayName,
  ffi.Pointer<ffi.Uint64> lpcchBuffer,
);

typedef _c_GetServiceDisplayNameW = ffi.Int32 Function(
  ffi.Pointer<SC_HANDLE__> hSCManager,
  ffi.Pointer<ffi.Uint16> lpServiceName,
  ffi.Pointer<ffi.Uint16> lpDisplayName,
  ffi.Pointer<ffi.Uint64> lpcchBuffer,
);

typedef _dart_GetServiceDisplayNameW = int Function(
  ffi.Pointer<SC_HANDLE__> hSCManager,
  ffi.Pointer<ffi.Uint16> lpServiceName,
  ffi.Pointer<ffi.Uint16> lpDisplayName,
  ffi.Pointer<ffi.Uint64> lpcchBuffer,
);

typedef _c_LockServiceDatabase = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<SC_HANDLE__> hSCManager,
);

typedef _dart_LockServiceDatabase = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<SC_HANDLE__> hSCManager,
);

typedef _c_NotifyBootConfigStatus = ffi.Int32 Function(
  ffi.Int32 BootAcceptable,
);

typedef _dart_NotifyBootConfigStatus = int Function(
  int BootAcceptable,
);

typedef _c_OpenSCManagerA = ffi.Pointer<SC_HANDLE__> Function(
  ffi.Pointer<ffi.Int8> lpMachineName,
  ffi.Pointer<ffi.Int8> lpDatabaseName,
  ffi.Uint64 dwDesiredAccess,
);

typedef _dart_OpenSCManagerA = ffi.Pointer<SC_HANDLE__> Function(
  ffi.Pointer<ffi.Int8> lpMachineName,
  ffi.Pointer<ffi.Int8> lpDatabaseName,
  int dwDesiredAccess,
);

typedef _c_OpenSCManagerW = ffi.Pointer<SC_HANDLE__> Function(
  ffi.Pointer<ffi.Uint16> lpMachineName,
  ffi.Pointer<ffi.Uint16> lpDatabaseName,
  ffi.Uint64 dwDesiredAccess,
);

typedef _dart_OpenSCManagerW = ffi.Pointer<SC_HANDLE__> Function(
  ffi.Pointer<ffi.Uint16> lpMachineName,
  ffi.Pointer<ffi.Uint16> lpDatabaseName,
  int dwDesiredAccess,
);

typedef _c_OpenServiceA = ffi.Pointer<SC_HANDLE__> Function(
  ffi.Pointer<SC_HANDLE__> hSCManager,
  ffi.Pointer<ffi.Int8> lpServiceName,
  ffi.Uint64 dwDesiredAccess,
);

typedef _dart_OpenServiceA = ffi.Pointer<SC_HANDLE__> Function(
  ffi.Pointer<SC_HANDLE__> hSCManager,
  ffi.Pointer<ffi.Int8> lpServiceName,
  int dwDesiredAccess,
);

typedef _c_OpenServiceW = ffi.Pointer<SC_HANDLE__> Function(
  ffi.Pointer<SC_HANDLE__> hSCManager,
  ffi.Pointer<ffi.Uint16> lpServiceName,
  ffi.Uint64 dwDesiredAccess,
);

typedef _dart_OpenServiceW = ffi.Pointer<SC_HANDLE__> Function(
  ffi.Pointer<SC_HANDLE__> hSCManager,
  ffi.Pointer<ffi.Uint16> lpServiceName,
  int dwDesiredAccess,
);

typedef _c_QueryServiceConfigA = ffi.Int32 Function(
  ffi.Pointer<SC_HANDLE__> hService,
  ffi.Pointer<LPQUERY_SERVICE_CONFIGA> lpServiceConfig,
  ffi.Uint64 cbBufSize,
  ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
);

typedef _dart_QueryServiceConfigA = int Function(
  ffi.Pointer<SC_HANDLE__> hService,
  ffi.Pointer<LPQUERY_SERVICE_CONFIGA> lpServiceConfig,
  int cbBufSize,
  ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
);

typedef _c_QueryServiceConfigW = ffi.Int32 Function(
  ffi.Pointer<SC_HANDLE__> hService,
  ffi.Pointer<LPQUERY_SERVICE_CONFIGW> lpServiceConfig,
  ffi.Uint64 cbBufSize,
  ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
);

typedef _dart_QueryServiceConfigW = int Function(
  ffi.Pointer<SC_HANDLE__> hService,
  ffi.Pointer<LPQUERY_SERVICE_CONFIGW> lpServiceConfig,
  int cbBufSize,
  ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
);

typedef _c_QueryServiceConfig2A = ffi.Int32 Function(
  ffi.Pointer<SC_HANDLE__> hService,
  ffi.Uint64 dwInfoLevel,
  ffi.Pointer<ffi.Uint8> lpBuffer,
  ffi.Uint64 cbBufSize,
  ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
);

typedef _dart_QueryServiceConfig2A = int Function(
  ffi.Pointer<SC_HANDLE__> hService,
  int dwInfoLevel,
  ffi.Pointer<ffi.Uint8> lpBuffer,
  int cbBufSize,
  ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
);

typedef _c_QueryServiceConfig2W = ffi.Int32 Function(
  ffi.Pointer<SC_HANDLE__> hService,
  ffi.Uint64 dwInfoLevel,
  ffi.Pointer<ffi.Uint8> lpBuffer,
  ffi.Uint64 cbBufSize,
  ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
);

typedef _dart_QueryServiceConfig2W = int Function(
  ffi.Pointer<SC_HANDLE__> hService,
  int dwInfoLevel,
  ffi.Pointer<ffi.Uint8> lpBuffer,
  int cbBufSize,
  ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
);

typedef _c_QueryServiceLockStatusA = ffi.Int32 Function(
  ffi.Pointer<SC_HANDLE__> hSCManager,
  ffi.Pointer<LPQUERY_SERVICE_LOCK_STATUSA> lpLockStatus,
  ffi.Uint64 cbBufSize,
  ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
);

typedef _dart_QueryServiceLockStatusA = int Function(
  ffi.Pointer<SC_HANDLE__> hSCManager,
  ffi.Pointer<LPQUERY_SERVICE_LOCK_STATUSA> lpLockStatus,
  int cbBufSize,
  ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
);

typedef _c_QueryServiceLockStatusW = ffi.Int32 Function(
  ffi.Pointer<SC_HANDLE__> hSCManager,
  ffi.Pointer<LPQUERY_SERVICE_LOCK_STATUSW> lpLockStatus,
  ffi.Uint64 cbBufSize,
  ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
);

typedef _dart_QueryServiceLockStatusW = int Function(
  ffi.Pointer<SC_HANDLE__> hSCManager,
  ffi.Pointer<LPQUERY_SERVICE_LOCK_STATUSW> lpLockStatus,
  int cbBufSize,
  ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
);

typedef _c_QueryServiceObjectSecurity = ffi.Int32 Function(
  ffi.Pointer<SC_HANDLE__> hService,
  ffi.Uint64 dwSecurityInformation,
  ffi.Pointer<ffi.Void> lpSecurityDescriptor,
  ffi.Uint64 cbBufSize,
  ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
);

typedef _dart_QueryServiceObjectSecurity = int Function(
  ffi.Pointer<SC_HANDLE__> hService,
  int dwSecurityInformation,
  ffi.Pointer<ffi.Void> lpSecurityDescriptor,
  int cbBufSize,
  ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
);

typedef _c_QueryServiceStatus = ffi.Int32 Function(
  ffi.Pointer<SC_HANDLE__> hService,
  ffi.Pointer<LPSERVICE_STATUS> lpServiceStatus,
);

typedef _dart_QueryServiceStatus = int Function(
  ffi.Pointer<SC_HANDLE__> hService,
  ffi.Pointer<LPSERVICE_STATUS> lpServiceStatus,
);

typedef _c_QueryServiceStatusEx = ffi.Int32 Function(
  ffi.Pointer<SC_HANDLE__> hService,
  ffi.Int32 InfoLevel,
  ffi.Pointer<ffi.Uint8> lpBuffer,
  ffi.Uint64 cbBufSize,
  ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
);

typedef _dart_QueryServiceStatusEx = int Function(
  ffi.Pointer<SC_HANDLE__> hService,
  int InfoLevel,
  ffi.Pointer<ffi.Uint8> lpBuffer,
  int cbBufSize,
  ffi.Pointer<ffi.Uint64> pcbBytesNeeded,
);

typedef LPHANDLER_FUNCTION = ffi.Void Function(
  ffi.Uint64,
);

typedef _c_RegisterServiceCtrlHandlerA = ffi.Pointer<SERVICE_STATUS_HANDLE__>
    Function(
  ffi.Pointer<ffi.Int8> lpServiceName,
  ffi.Pointer<ffi.NativeFunction<LPHANDLER_FUNCTION>> lpHandlerProc,
);

typedef _dart_RegisterServiceCtrlHandlerA = ffi.Pointer<SERVICE_STATUS_HANDLE__>
    Function(
  ffi.Pointer<ffi.Int8> lpServiceName,
  ffi.Pointer<ffi.NativeFunction<LPHANDLER_FUNCTION>> lpHandlerProc,
);

typedef _c_RegisterServiceCtrlHandlerW = ffi.Pointer<SERVICE_STATUS_HANDLE__>
    Function(
  ffi.Pointer<ffi.Uint16> lpServiceName,
  ffi.Pointer<ffi.NativeFunction<LPHANDLER_FUNCTION>> lpHandlerProc,
);

typedef _dart_RegisterServiceCtrlHandlerW = ffi.Pointer<SERVICE_STATUS_HANDLE__>
    Function(
  ffi.Pointer<ffi.Uint16> lpServiceName,
  ffi.Pointer<ffi.NativeFunction<LPHANDLER_FUNCTION>> lpHandlerProc,
);

typedef LPHANDLER_FUNCTION_EX = ffi.Uint64 Function(
  ffi.Uint64,
  ffi.Uint64,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_RegisterServiceCtrlHandlerExA = ffi.Pointer<SERVICE_STATUS_HANDLE__>
    Function(
  ffi.Pointer<ffi.Int8> lpServiceName,
  ffi.Pointer<ffi.NativeFunction<LPHANDLER_FUNCTION_EX>> lpHandlerProc,
  ffi.Pointer<ffi.Void> lpContext,
);

typedef _dart_RegisterServiceCtrlHandlerExA
    = ffi.Pointer<SERVICE_STATUS_HANDLE__> Function(
  ffi.Pointer<ffi.Int8> lpServiceName,
  ffi.Pointer<ffi.NativeFunction<LPHANDLER_FUNCTION_EX>> lpHandlerProc,
  ffi.Pointer<ffi.Void> lpContext,
);

typedef _c_RegisterServiceCtrlHandlerExW = ffi.Pointer<SERVICE_STATUS_HANDLE__>
    Function(
  ffi.Pointer<ffi.Uint16> lpServiceName,
  ffi.Pointer<ffi.NativeFunction<LPHANDLER_FUNCTION_EX>> lpHandlerProc,
  ffi.Pointer<ffi.Void> lpContext,
);

typedef _dart_RegisterServiceCtrlHandlerExW
    = ffi.Pointer<SERVICE_STATUS_HANDLE__> Function(
  ffi.Pointer<ffi.Uint16> lpServiceName,
  ffi.Pointer<ffi.NativeFunction<LPHANDLER_FUNCTION_EX>> lpHandlerProc,
  ffi.Pointer<ffi.Void> lpContext,
);

typedef _c_SetServiceObjectSecurity = ffi.Int32 Function(
  ffi.Pointer<SC_HANDLE__> hService,
  ffi.Uint64 dwSecurityInformation,
  ffi.Pointer<ffi.Void> lpSecurityDescriptor,
);

typedef _dart_SetServiceObjectSecurity = int Function(
  ffi.Pointer<SC_HANDLE__> hService,
  int dwSecurityInformation,
  ffi.Pointer<ffi.Void> lpSecurityDescriptor,
);

typedef _c_SetServiceStatus = ffi.Int32 Function(
  ffi.Pointer<SERVICE_STATUS_HANDLE__> hServiceStatus,
  ffi.Pointer<LPSERVICE_STATUS> lpServiceStatus,
);

typedef _dart_SetServiceStatus = int Function(
  ffi.Pointer<SERVICE_STATUS_HANDLE__> hServiceStatus,
  ffi.Pointer<LPSERVICE_STATUS> lpServiceStatus,
);

typedef _c_StartServiceCtrlDispatcherA = ffi.Int32 Function(
  ffi.Pointer<LPSERVICE_TABLE_ENTRYA> lpServiceStartTable,
);

typedef _dart_StartServiceCtrlDispatcherA = int Function(
  ffi.Pointer<LPSERVICE_TABLE_ENTRYA> lpServiceStartTable,
);

typedef _c_StartServiceCtrlDispatcherW = ffi.Int32 Function(
  ffi.Pointer<LPSERVICE_TABLE_ENTRYW> lpServiceStartTable,
);

typedef _dart_StartServiceCtrlDispatcherW = int Function(
  ffi.Pointer<LPSERVICE_TABLE_ENTRYW> lpServiceStartTable,
);

typedef _c_StartServiceA = ffi.Int32 Function(
  ffi.Pointer<SC_HANDLE__> hService,
  ffi.Uint64 dwNumServiceArgs,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> lpServiceArgVectors,
);

typedef _dart_StartServiceA = int Function(
  ffi.Pointer<SC_HANDLE__> hService,
  int dwNumServiceArgs,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> lpServiceArgVectors,
);

typedef _c_StartServiceW = ffi.Int32 Function(
  ffi.Pointer<SC_HANDLE__> hService,
  ffi.Uint64 dwNumServiceArgs,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> lpServiceArgVectors,
);

typedef _dart_StartServiceW = int Function(
  ffi.Pointer<SC_HANDLE__> hService,
  int dwNumServiceArgs,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> lpServiceArgVectors,
);

typedef _c_UnlockServiceDatabase = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> ScLock,
);

typedef _dart_UnlockServiceDatabase = int Function(
  ffi.Pointer<ffi.Void> ScLock,
);

typedef _c_NotifyServiceStatusChangeA = ffi.Uint64 Function(
  ffi.Pointer<SC_HANDLE__> hService,
  ffi.Uint64 dwNotifyMask,
  ffi.Pointer<PSERVICE_NOTIFY_2A> pNotifyBuffer,
);

typedef _dart_NotifyServiceStatusChangeA = int Function(
  ffi.Pointer<SC_HANDLE__> hService,
  int dwNotifyMask,
  ffi.Pointer<PSERVICE_NOTIFY_2A> pNotifyBuffer,
);

typedef _c_NotifyServiceStatusChangeW = ffi.Uint64 Function(
  ffi.Pointer<SC_HANDLE__> hService,
  ffi.Uint64 dwNotifyMask,
  ffi.Pointer<PSERVICE_NOTIFY_2W> pNotifyBuffer,
);

typedef _dart_NotifyServiceStatusChangeW = int Function(
  ffi.Pointer<SC_HANDLE__> hService,
  int dwNotifyMask,
  ffi.Pointer<PSERVICE_NOTIFY_2W> pNotifyBuffer,
);

typedef _c_ControlServiceExA = ffi.Int32 Function(
  ffi.Pointer<SC_HANDLE__> hService,
  ffi.Uint64 dwControl,
  ffi.Uint64 dwInfoLevel,
  ffi.Pointer<ffi.Void> pControlParams,
);

typedef _dart_ControlServiceExA = int Function(
  ffi.Pointer<SC_HANDLE__> hService,
  int dwControl,
  int dwInfoLevel,
  ffi.Pointer<ffi.Void> pControlParams,
);

typedef _c_ControlServiceExW = ffi.Int32 Function(
  ffi.Pointer<SC_HANDLE__> hService,
  ffi.Uint64 dwControl,
  ffi.Uint64 dwInfoLevel,
  ffi.Pointer<ffi.Void> pControlParams,
);

typedef _dart_ControlServiceExW = int Function(
  ffi.Pointer<SC_HANDLE__> hService,
  int dwControl,
  int dwInfoLevel,
  ffi.Pointer<ffi.Void> pControlParams,
);

typedef _c_QueryServiceDynamicInformation = ffi.Int32 Function(
  ffi.Pointer<SERVICE_STATUS_HANDLE__> hServiceStatus,
  ffi.Uint64 dwInfoLevel,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppDynamicInfo,
);

typedef _dart_QueryServiceDynamicInformation = int Function(
  ffi.Pointer<SERVICE_STATUS_HANDLE__> hServiceStatus,
  int dwInfoLevel,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppDynamicInfo,
);

typedef PSC_NOTIFICATION_CALLBACK = ffi.Void Function(
  ffi.Uint64,
  ffi.Pointer<ffi.Void>,
);

typedef _c_SubscribeServiceChangeNotifications = ffi.Uint64 Function(
  ffi.Pointer<SC_HANDLE__> hService,
  ffi.Int32 eEventType,
  ffi.Pointer<ffi.NativeFunction<PSC_NOTIFICATION_CALLBACK>> pCallback,
  ffi.Pointer<ffi.Void> pCallbackContext,
  ffi.Pointer<ffi.Pointer<_SC_NOTIFICATION_REGISTRATION>> pSubscription,
);

typedef _dart_SubscribeServiceChangeNotifications = int Function(
  ffi.Pointer<SC_HANDLE__> hService,
  int eEventType,
  ffi.Pointer<ffi.NativeFunction<PSC_NOTIFICATION_CALLBACK>> pCallback,
  ffi.Pointer<ffi.Void> pCallbackContext,
  ffi.Pointer<ffi.Pointer<_SC_NOTIFICATION_REGISTRATION>> pSubscription,
);

typedef _c_UnsubscribeServiceChangeNotifications = ffi.Void Function(
  ffi.Pointer<_SC_NOTIFICATION_REGISTRATION> pSubscription,
);

typedef _dart_UnsubscribeServiceChangeNotifications = void Function(
  ffi.Pointer<_SC_NOTIFICATION_REGISTRATION> pSubscription,
);

typedef _c_WaitServiceState = ffi.Uint64 Function(
  ffi.Pointer<SC_HANDLE__> hService,
  ffi.Uint64 dwNotify,
  ffi.Uint64 dwTimeout,
  ffi.Pointer<ffi.Void> hCancelEvent,
);

typedef _dart_WaitServiceState = int Function(
  ffi.Pointer<SC_HANDLE__> hService,
  int dwNotify,
  int dwTimeout,
  ffi.Pointer<ffi.Void> hCancelEvent,
);

typedef _c_GetServiceRegistryStateKey = ffi.Uint64 Function(
  ffi.Pointer<SERVICE_STATUS_HANDLE__> ServiceStatusHandle,
  ffi.Int32 StateType,
  ffi.Uint64 AccessMask,
  ffi.Pointer<ffi.Pointer<HKEY__>> ServiceStateKey,
);

typedef _dart_GetServiceRegistryStateKey = int Function(
  ffi.Pointer<SERVICE_STATUS_HANDLE__> ServiceStatusHandle,
  int StateType,
  int AccessMask,
  ffi.Pointer<ffi.Pointer<HKEY__>> ServiceStateKey,
);

typedef _c_GetServiceDirectory = ffi.Uint64 Function(
  ffi.Pointer<SERVICE_STATUS_HANDLE__> hServiceStatus,
  ffi.Int32 eDirectoryType,
  ffi.Pointer<ffi.Uint16> lpPathBuffer,
  ffi.Uint64 cchPathBufferLength,
  ffi.Pointer<ffi.Uint64> lpcchRequiredBufferLength,
);

typedef _dart_GetServiceDirectory = int Function(
  ffi.Pointer<SERVICE_STATUS_HANDLE__> hServiceStatus,
  int eDirectoryType,
  ffi.Pointer<ffi.Uint16> lpPathBuffer,
  int cchPathBufferLength,
  ffi.Pointer<ffi.Uint64> lpcchRequiredBufferLength,
);

typedef _c_ImmInstallIMEA = ffi.Pointer<HKL__> Function(
  ffi.Pointer<ffi.Int8> lpszIMEFileName,
  ffi.Pointer<ffi.Int8> lpszLayoutText,
);

typedef _dart_ImmInstallIMEA = ffi.Pointer<HKL__> Function(
  ffi.Pointer<ffi.Int8> lpszIMEFileName,
  ffi.Pointer<ffi.Int8> lpszLayoutText,
);

typedef _c_ImmInstallIMEW = ffi.Pointer<HKL__> Function(
  ffi.Pointer<ffi.Uint16> lpszIMEFileName,
  ffi.Pointer<ffi.Uint16> lpszLayoutText,
);

typedef _dart_ImmInstallIMEW = ffi.Pointer<HKL__> Function(
  ffi.Pointer<ffi.Uint16> lpszIMEFileName,
  ffi.Pointer<ffi.Uint16> lpszLayoutText,
);

typedef _c_ImmGetDefaultIMEWnd = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HWND__> arg0,
);

typedef _dart_ImmGetDefaultIMEWnd = ffi.Pointer<HWND__> Function(
  ffi.Pointer<HWND__> arg0,
);

typedef _c_ImmGetDescriptionA = ffi.Uint32 Function(
  ffi.Pointer<HKL__> arg0,
  ffi.Pointer<ffi.Int8> lpszDescription,
  ffi.Uint32 uBufLen,
);

typedef _dart_ImmGetDescriptionA = int Function(
  ffi.Pointer<HKL__> arg0,
  ffi.Pointer<ffi.Int8> lpszDescription,
  int uBufLen,
);

typedef _c_ImmGetDescriptionW = ffi.Uint32 Function(
  ffi.Pointer<HKL__> arg0,
  ffi.Pointer<ffi.Uint16> lpszDescription,
  ffi.Uint32 uBufLen,
);

typedef _dart_ImmGetDescriptionW = int Function(
  ffi.Pointer<HKL__> arg0,
  ffi.Pointer<ffi.Uint16> lpszDescription,
  int uBufLen,
);

typedef _c_ImmGetIMEFileNameA = ffi.Uint32 Function(
  ffi.Pointer<HKL__> arg0,
  ffi.Pointer<ffi.Int8> lpszFileName,
  ffi.Uint32 uBufLen,
);

typedef _dart_ImmGetIMEFileNameA = int Function(
  ffi.Pointer<HKL__> arg0,
  ffi.Pointer<ffi.Int8> lpszFileName,
  int uBufLen,
);

typedef _c_ImmGetIMEFileNameW = ffi.Uint32 Function(
  ffi.Pointer<HKL__> arg0,
  ffi.Pointer<ffi.Uint16> lpszFileName,
  ffi.Uint32 uBufLen,
);

typedef _dart_ImmGetIMEFileNameW = int Function(
  ffi.Pointer<HKL__> arg0,
  ffi.Pointer<ffi.Uint16> lpszFileName,
  int uBufLen,
);

typedef _c_ImmGetProperty = ffi.Uint64 Function(
  ffi.Pointer<HKL__> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_ImmGetProperty = int Function(
  ffi.Pointer<HKL__> arg0,
  int arg1,
);

typedef _c_ImmIsIME = ffi.Int32 Function(
  ffi.Pointer<HKL__> arg0,
);

typedef _dart_ImmIsIME = int Function(
  ffi.Pointer<HKL__> arg0,
);

typedef _c_ImmSimulateHotKey = ffi.Int32 Function(
  ffi.Pointer<HWND__> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_ImmSimulateHotKey = int Function(
  ffi.Pointer<HWND__> arg0,
  int arg1,
);

typedef _c_ImmCreateContext = ffi.Pointer<HIMC__> Function();

typedef _dart_ImmCreateContext = ffi.Pointer<HIMC__> Function();

typedef _c_ImmDestroyContext = ffi.Int32 Function(
  ffi.Pointer<HIMC__> arg0,
);

typedef _dart_ImmDestroyContext = int Function(
  ffi.Pointer<HIMC__> arg0,
);

typedef _c_ImmGetContext = ffi.Pointer<HIMC__> Function(
  ffi.Pointer<HWND__> arg0,
);

typedef _dart_ImmGetContext = ffi.Pointer<HIMC__> Function(
  ffi.Pointer<HWND__> arg0,
);

typedef _c_ImmReleaseContext = ffi.Int32 Function(
  ffi.Pointer<HWND__> arg0,
  ffi.Pointer<HIMC__> arg1,
);

typedef _dart_ImmReleaseContext = int Function(
  ffi.Pointer<HWND__> arg0,
  ffi.Pointer<HIMC__> arg1,
);

typedef _c_ImmAssociateContext = ffi.Pointer<HIMC__> Function(
  ffi.Pointer<HWND__> arg0,
  ffi.Pointer<HIMC__> arg1,
);

typedef _dart_ImmAssociateContext = ffi.Pointer<HIMC__> Function(
  ffi.Pointer<HWND__> arg0,
  ffi.Pointer<HIMC__> arg1,
);

typedef _c_ImmAssociateContextEx = ffi.Int32 Function(
  ffi.Pointer<HWND__> arg0,
  ffi.Pointer<HIMC__> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_ImmAssociateContextEx = int Function(
  ffi.Pointer<HWND__> arg0,
  ffi.Pointer<HIMC__> arg1,
  int arg2,
);

typedef _c_ImmGetCompositionStringA = ffi.Int64 Function(
  ffi.Pointer<HIMC__> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Void> lpBuf,
  ffi.Uint64 dwBufLen,
);

typedef _dart_ImmGetCompositionStringA = int Function(
  ffi.Pointer<HIMC__> arg0,
  int arg1,
  ffi.Pointer<ffi.Void> lpBuf,
  int dwBufLen,
);

typedef _c_ImmGetCompositionStringW = ffi.Int64 Function(
  ffi.Pointer<HIMC__> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Void> lpBuf,
  ffi.Uint64 dwBufLen,
);

typedef _dart_ImmGetCompositionStringW = int Function(
  ffi.Pointer<HIMC__> arg0,
  int arg1,
  ffi.Pointer<ffi.Void> lpBuf,
  int dwBufLen,
);

typedef _c_ImmSetCompositionStringA = ffi.Int32 Function(
  ffi.Pointer<HIMC__> arg0,
  ffi.Uint64 dwIndex,
  ffi.Pointer<ffi.Void> lpComp,
  ffi.Uint64 dwCompLen,
  ffi.Pointer<ffi.Void> lpRead,
  ffi.Uint64 dwReadLen,
);

typedef _dart_ImmSetCompositionStringA = int Function(
  ffi.Pointer<HIMC__> arg0,
  int dwIndex,
  ffi.Pointer<ffi.Void> lpComp,
  int dwCompLen,
  ffi.Pointer<ffi.Void> lpRead,
  int dwReadLen,
);

typedef _c_ImmSetCompositionStringW = ffi.Int32 Function(
  ffi.Pointer<HIMC__> arg0,
  ffi.Uint64 dwIndex,
  ffi.Pointer<ffi.Void> lpComp,
  ffi.Uint64 dwCompLen,
  ffi.Pointer<ffi.Void> lpRead,
  ffi.Uint64 dwReadLen,
);

typedef _dart_ImmSetCompositionStringW = int Function(
  ffi.Pointer<HIMC__> arg0,
  int dwIndex,
  ffi.Pointer<ffi.Void> lpComp,
  int dwCompLen,
  ffi.Pointer<ffi.Void> lpRead,
  int dwReadLen,
);

typedef _c_ImmGetCandidateListCountA = ffi.Uint64 Function(
  ffi.Pointer<HIMC__> arg0,
  ffi.Pointer<ffi.Uint64> lpdwListCount,
);

typedef _dart_ImmGetCandidateListCountA = int Function(
  ffi.Pointer<HIMC__> arg0,
  ffi.Pointer<ffi.Uint64> lpdwListCount,
);

typedef _c_ImmGetCandidateListCountW = ffi.Uint64 Function(
  ffi.Pointer<HIMC__> arg0,
  ffi.Pointer<ffi.Uint64> lpdwListCount,
);

typedef _dart_ImmGetCandidateListCountW = int Function(
  ffi.Pointer<HIMC__> arg0,
  ffi.Pointer<ffi.Uint64> lpdwListCount,
);

typedef _c_ImmGetCandidateListA = ffi.Uint64 Function(
  ffi.Pointer<HIMC__> arg0,
  ffi.Uint64 deIndex,
  ffi.Pointer<LPCANDIDATELIST> lpCandList,
  ffi.Uint64 dwBufLen,
);

typedef _dart_ImmGetCandidateListA = int Function(
  ffi.Pointer<HIMC__> arg0,
  int deIndex,
  ffi.Pointer<LPCANDIDATELIST> lpCandList,
  int dwBufLen,
);

typedef _c_ImmGetCandidateListW = ffi.Uint64 Function(
  ffi.Pointer<HIMC__> arg0,
  ffi.Uint64 deIndex,
  ffi.Pointer<LPCANDIDATELIST> lpCandList,
  ffi.Uint64 dwBufLen,
);

typedef _dart_ImmGetCandidateListW = int Function(
  ffi.Pointer<HIMC__> arg0,
  int deIndex,
  ffi.Pointer<LPCANDIDATELIST> lpCandList,
  int dwBufLen,
);

typedef _c_ImmGetGuideLineA = ffi.Uint64 Function(
  ffi.Pointer<HIMC__> arg0,
  ffi.Uint64 dwIndex,
  ffi.Pointer<ffi.Int8> lpBuf,
  ffi.Uint64 dwBufLen,
);

typedef _dart_ImmGetGuideLineA = int Function(
  ffi.Pointer<HIMC__> arg0,
  int dwIndex,
  ffi.Pointer<ffi.Int8> lpBuf,
  int dwBufLen,
);

typedef _c_ImmGetGuideLineW = ffi.Uint64 Function(
  ffi.Pointer<HIMC__> arg0,
  ffi.Uint64 dwIndex,
  ffi.Pointer<ffi.Uint16> lpBuf,
  ffi.Uint64 dwBufLen,
);

typedef _dart_ImmGetGuideLineW = int Function(
  ffi.Pointer<HIMC__> arg0,
  int dwIndex,
  ffi.Pointer<ffi.Uint16> lpBuf,
  int dwBufLen,
);

typedef _c_ImmGetConversionStatus = ffi.Int32 Function(
  ffi.Pointer<HIMC__> arg0,
  ffi.Pointer<ffi.Uint64> lpfdwConversion,
  ffi.Pointer<ffi.Uint64> lpfdwSentence,
);

typedef _dart_ImmGetConversionStatus = int Function(
  ffi.Pointer<HIMC__> arg0,
  ffi.Pointer<ffi.Uint64> lpfdwConversion,
  ffi.Pointer<ffi.Uint64> lpfdwSentence,
);

typedef _c_ImmSetConversionStatus = ffi.Int32 Function(
  ffi.Pointer<HIMC__> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
);

typedef _dart_ImmSetConversionStatus = int Function(
  ffi.Pointer<HIMC__> arg0,
  int arg1,
  int arg2,
);

typedef _c_ImmGetOpenStatus = ffi.Int32 Function(
  ffi.Pointer<HIMC__> arg0,
);

typedef _dart_ImmGetOpenStatus = int Function(
  ffi.Pointer<HIMC__> arg0,
);

typedef _c_ImmSetOpenStatus = ffi.Int32 Function(
  ffi.Pointer<HIMC__> arg0,
  ffi.Int32 arg1,
);

typedef _dart_ImmSetOpenStatus = int Function(
  ffi.Pointer<HIMC__> arg0,
  int arg1,
);

typedef _c_ImmGetCompositionFontA = ffi.Int32 Function(
  ffi.Pointer<HIMC__> arg0,
  ffi.Pointer<LPLOGFONTA> lplf,
);

typedef _dart_ImmGetCompositionFontA = int Function(
  ffi.Pointer<HIMC__> arg0,
  ffi.Pointer<LPLOGFONTA> lplf,
);

typedef _c_ImmGetCompositionFontW = ffi.Int32 Function(
  ffi.Pointer<HIMC__> arg0,
  ffi.Pointer<LPLOGFONTW> lplf,
);

typedef _dart_ImmGetCompositionFontW = int Function(
  ffi.Pointer<HIMC__> arg0,
  ffi.Pointer<LPLOGFONTW> lplf,
);

typedef _c_ImmSetCompositionFontA = ffi.Int32 Function(
  ffi.Pointer<HIMC__> arg0,
  ffi.Pointer<LPLOGFONTA> lplf,
);

typedef _dart_ImmSetCompositionFontA = int Function(
  ffi.Pointer<HIMC__> arg0,
  ffi.Pointer<LPLOGFONTA> lplf,
);

typedef _c_ImmSetCompositionFontW = ffi.Int32 Function(
  ffi.Pointer<HIMC__> arg0,
  ffi.Pointer<LPLOGFONTW> lplf,
);

typedef _dart_ImmSetCompositionFontW = int Function(
  ffi.Pointer<HIMC__> arg0,
  ffi.Pointer<LPLOGFONTW> lplf,
);

typedef _c_ImmConfigureIMEA = ffi.Int32 Function(
  ffi.Pointer<HKL__> arg0,
  ffi.Pointer<HWND__> arg1,
  ffi.Uint64 arg2,
  ffi.Pointer<ffi.Void> arg3,
);

typedef _dart_ImmConfigureIMEA = int Function(
  ffi.Pointer<HKL__> arg0,
  ffi.Pointer<HWND__> arg1,
  int arg2,
  ffi.Pointer<ffi.Void> arg3,
);

typedef _c_ImmConfigureIMEW = ffi.Int32 Function(
  ffi.Pointer<HKL__> arg0,
  ffi.Pointer<HWND__> arg1,
  ffi.Uint64 arg2,
  ffi.Pointer<ffi.Void> arg3,
);

typedef _dart_ImmConfigureIMEW = int Function(
  ffi.Pointer<HKL__> arg0,
  ffi.Pointer<HWND__> arg1,
  int arg2,
  ffi.Pointer<ffi.Void> arg3,
);

typedef _c_ImmEscapeA = ffi.Int64 Function(
  ffi.Pointer<HKL__> arg0,
  ffi.Pointer<HIMC__> arg1,
  ffi.Uint32 arg2,
  ffi.Pointer<ffi.Void> arg3,
);

typedef _dart_ImmEscapeA = int Function(
  ffi.Pointer<HKL__> arg0,
  ffi.Pointer<HIMC__> arg1,
  int arg2,
  ffi.Pointer<ffi.Void> arg3,
);

typedef _c_ImmEscapeW = ffi.Int64 Function(
  ffi.Pointer<HKL__> arg0,
  ffi.Pointer<HIMC__> arg1,
  ffi.Uint32 arg2,
  ffi.Pointer<ffi.Void> arg3,
);

typedef _dart_ImmEscapeW = int Function(
  ffi.Pointer<HKL__> arg0,
  ffi.Pointer<HIMC__> arg1,
  int arg2,
  ffi.Pointer<ffi.Void> arg3,
);

typedef _c_ImmGetConversionListA = ffi.Uint64 Function(
  ffi.Pointer<HKL__> arg0,
  ffi.Pointer<HIMC__> arg1,
  ffi.Pointer<ffi.Int8> lpSrc,
  ffi.Pointer<LPCANDIDATELIST> lpDst,
  ffi.Uint64 dwBufLen,
  ffi.Uint32 uFlag,
);

typedef _dart_ImmGetConversionListA = int Function(
  ffi.Pointer<HKL__> arg0,
  ffi.Pointer<HIMC__> arg1,
  ffi.Pointer<ffi.Int8> lpSrc,
  ffi.Pointer<LPCANDIDATELIST> lpDst,
  int dwBufLen,
  int uFlag,
);

typedef _c_ImmGetConversionListW = ffi.Uint64 Function(
  ffi.Pointer<HKL__> arg0,
  ffi.Pointer<HIMC__> arg1,
  ffi.Pointer<ffi.Uint16> lpSrc,
  ffi.Pointer<LPCANDIDATELIST> lpDst,
  ffi.Uint64 dwBufLen,
  ffi.Uint32 uFlag,
);

typedef _dart_ImmGetConversionListW = int Function(
  ffi.Pointer<HKL__> arg0,
  ffi.Pointer<HIMC__> arg1,
  ffi.Pointer<ffi.Uint16> lpSrc,
  ffi.Pointer<LPCANDIDATELIST> lpDst,
  int dwBufLen,
  int uFlag,
);

typedef _c_ImmNotifyIME = ffi.Int32 Function(
  ffi.Pointer<HIMC__> arg0,
  ffi.Uint64 dwAction,
  ffi.Uint64 dwIndex,
  ffi.Uint64 dwValue,
);

typedef _dart_ImmNotifyIME = int Function(
  ffi.Pointer<HIMC__> arg0,
  int dwAction,
  int dwIndex,
  int dwValue,
);

typedef _c_ImmGetStatusWindowPos = ffi.Int32 Function(
  ffi.Pointer<HIMC__> arg0,
  ffi.Pointer<LPPOINT> lpptPos,
);

typedef _dart_ImmGetStatusWindowPos = int Function(
  ffi.Pointer<HIMC__> arg0,
  ffi.Pointer<LPPOINT> lpptPos,
);

typedef _c_ImmSetStatusWindowPos = ffi.Int32 Function(
  ffi.Pointer<HIMC__> arg0,
  ffi.Pointer<LPPOINT> lpptPos,
);

typedef _dart_ImmSetStatusWindowPos = int Function(
  ffi.Pointer<HIMC__> arg0,
  ffi.Pointer<LPPOINT> lpptPos,
);

typedef _c_ImmGetCompositionWindow = ffi.Int32 Function(
  ffi.Pointer<HIMC__> arg0,
  ffi.Pointer<LPCOMPOSITIONFORM> lpCompForm,
);

typedef _dart_ImmGetCompositionWindow = int Function(
  ffi.Pointer<HIMC__> arg0,
  ffi.Pointer<LPCOMPOSITIONFORM> lpCompForm,
);

typedef _c_ImmSetCompositionWindow = ffi.Int32 Function(
  ffi.Pointer<HIMC__> arg0,
  ffi.Pointer<LPCOMPOSITIONFORM> lpCompForm,
);

typedef _dart_ImmSetCompositionWindow = int Function(
  ffi.Pointer<HIMC__> arg0,
  ffi.Pointer<LPCOMPOSITIONFORM> lpCompForm,
);

typedef _c_ImmGetCandidateWindow = ffi.Int32 Function(
  ffi.Pointer<HIMC__> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<LPCANDIDATEFORM> lpCandidate,
);

typedef _dart_ImmGetCandidateWindow = int Function(
  ffi.Pointer<HIMC__> arg0,
  int arg1,
  ffi.Pointer<LPCANDIDATEFORM> lpCandidate,
);

typedef _c_ImmSetCandidateWindow = ffi.Int32 Function(
  ffi.Pointer<HIMC__> arg0,
  ffi.Pointer<LPCANDIDATEFORM> lpCandidate,
);

typedef _dart_ImmSetCandidateWindow = int Function(
  ffi.Pointer<HIMC__> arg0,
  ffi.Pointer<LPCANDIDATEFORM> lpCandidate,
);

typedef _c_ImmIsUIMessageA = ffi.Int32 Function(
  ffi.Pointer<HWND__> arg0,
  ffi.Uint32 arg1,
  ffi.Uint64 arg2,
  ffi.Int64 arg3,
);

typedef _dart_ImmIsUIMessageA = int Function(
  ffi.Pointer<HWND__> arg0,
  int arg1,
  int arg2,
  int arg3,
);

typedef _c_ImmIsUIMessageW = ffi.Int32 Function(
  ffi.Pointer<HWND__> arg0,
  ffi.Uint32 arg1,
  ffi.Uint64 arg2,
  ffi.Int64 arg3,
);

typedef _dart_ImmIsUIMessageW = int Function(
  ffi.Pointer<HWND__> arg0,
  int arg1,
  int arg2,
  int arg3,
);

typedef _c_ImmGetVirtualKey = ffi.Uint32 Function(
  ffi.Pointer<HWND__> arg0,
);

typedef _dart_ImmGetVirtualKey = int Function(
  ffi.Pointer<HWND__> arg0,
);

typedef _c_ImmRegisterWordA = ffi.Int32 Function(
  ffi.Pointer<HKL__> arg0,
  ffi.Pointer<ffi.Int8> lpszReading,
  ffi.Uint64 arg2,
  ffi.Pointer<ffi.Int8> lpszRegister,
);

typedef _dart_ImmRegisterWordA = int Function(
  ffi.Pointer<HKL__> arg0,
  ffi.Pointer<ffi.Int8> lpszReading,
  int arg2,
  ffi.Pointer<ffi.Int8> lpszRegister,
);

typedef _c_ImmRegisterWordW = ffi.Int32 Function(
  ffi.Pointer<HKL__> arg0,
  ffi.Pointer<ffi.Uint16> lpszReading,
  ffi.Uint64 arg2,
  ffi.Pointer<ffi.Uint16> lpszRegister,
);

typedef _dart_ImmRegisterWordW = int Function(
  ffi.Pointer<HKL__> arg0,
  ffi.Pointer<ffi.Uint16> lpszReading,
  int arg2,
  ffi.Pointer<ffi.Uint16> lpszRegister,
);

typedef _c_ImmUnregisterWordA = ffi.Int32 Function(
  ffi.Pointer<HKL__> arg0,
  ffi.Pointer<ffi.Int8> lpszReading,
  ffi.Uint64 arg2,
  ffi.Pointer<ffi.Int8> lpszUnregister,
);

typedef _dart_ImmUnregisterWordA = int Function(
  ffi.Pointer<HKL__> arg0,
  ffi.Pointer<ffi.Int8> lpszReading,
  int arg2,
  ffi.Pointer<ffi.Int8> lpszUnregister,
);

typedef _c_ImmUnregisterWordW = ffi.Int32 Function(
  ffi.Pointer<HKL__> arg0,
  ffi.Pointer<ffi.Uint16> lpszReading,
  ffi.Uint64 arg2,
  ffi.Pointer<ffi.Uint16> lpszUnregister,
);

typedef _dart_ImmUnregisterWordW = int Function(
  ffi.Pointer<HKL__> arg0,
  ffi.Pointer<ffi.Uint16> lpszReading,
  int arg2,
  ffi.Pointer<ffi.Uint16> lpszUnregister,
);

typedef _c_ImmGetRegisterWordStyleA = ffi.Uint32 Function(
  ffi.Pointer<HKL__> arg0,
  ffi.Uint32 nItem,
  ffi.Pointer<LPSTYLEBUFA> lpStyleBuf,
);

typedef _dart_ImmGetRegisterWordStyleA = int Function(
  ffi.Pointer<HKL__> arg0,
  int nItem,
  ffi.Pointer<LPSTYLEBUFA> lpStyleBuf,
);

typedef _c_ImmGetRegisterWordStyleW = ffi.Uint32 Function(
  ffi.Pointer<HKL__> arg0,
  ffi.Uint32 nItem,
  ffi.Pointer<LPSTYLEBUFW> lpStyleBuf,
);

typedef _dart_ImmGetRegisterWordStyleW = int Function(
  ffi.Pointer<HKL__> arg0,
  int nItem,
  ffi.Pointer<LPSTYLEBUFW> lpStyleBuf,
);

typedef REGISTERWORDENUMPROCA = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8>,
  ffi.Uint64,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_ImmEnumRegisterWordA = ffi.Uint32 Function(
  ffi.Pointer<HKL__> arg0,
  ffi.Pointer<ffi.NativeFunction<REGISTERWORDENUMPROCA>> arg1,
  ffi.Pointer<ffi.Int8> lpszReading,
  ffi.Uint64 arg3,
  ffi.Pointer<ffi.Int8> lpszRegister,
  ffi.Pointer<ffi.Void> arg5,
);

typedef _dart_ImmEnumRegisterWordA = int Function(
  ffi.Pointer<HKL__> arg0,
  ffi.Pointer<ffi.NativeFunction<REGISTERWORDENUMPROCA>> arg1,
  ffi.Pointer<ffi.Int8> lpszReading,
  int arg3,
  ffi.Pointer<ffi.Int8> lpszRegister,
  ffi.Pointer<ffi.Void> arg5,
);

typedef REGISTERWORDENUMPROCW = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16>,
  ffi.Uint64,
  ffi.Pointer<ffi.Uint16>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_ImmEnumRegisterWordW = ffi.Uint32 Function(
  ffi.Pointer<HKL__> arg0,
  ffi.Pointer<ffi.NativeFunction<REGISTERWORDENUMPROCW>> arg1,
  ffi.Pointer<ffi.Uint16> lpszReading,
  ffi.Uint64 arg3,
  ffi.Pointer<ffi.Uint16> lpszRegister,
  ffi.Pointer<ffi.Void> arg5,
);

typedef _dart_ImmEnumRegisterWordW = int Function(
  ffi.Pointer<HKL__> arg0,
  ffi.Pointer<ffi.NativeFunction<REGISTERWORDENUMPROCW>> arg1,
  ffi.Pointer<ffi.Uint16> lpszReading,
  int arg3,
  ffi.Pointer<ffi.Uint16> lpszRegister,
  ffi.Pointer<ffi.Void> arg5,
);

typedef _c_ImmDisableIME = ffi.Int32 Function(
  ffi.Uint64 arg0,
);

typedef _dart_ImmDisableIME = int Function(
  int arg0,
);

typedef IMCENUMPROC = ffi.Int32 Function(
  ffi.Pointer<HIMC__>,
  ffi.Int64,
);

typedef _c_ImmEnumInputContext = ffi.Int32 Function(
  ffi.Uint64 idThread,
  ffi.Pointer<ffi.NativeFunction<IMCENUMPROC>> lpfn,
  ffi.Int64 lParam,
);

typedef _dart_ImmEnumInputContext = int Function(
  int idThread,
  ffi.Pointer<ffi.NativeFunction<IMCENUMPROC>> lpfn,
  int lParam,
);

typedef _c_ImmGetImeMenuItemsA = ffi.Uint64 Function(
  ffi.Pointer<HIMC__> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Pointer<LPIMEMENUITEMINFOA> lpImeParentMenu,
  ffi.Pointer<LPIMEMENUITEMINFOA> lpImeMenu,
  ffi.Uint64 dwSize,
);

typedef _dart_ImmGetImeMenuItemsA = int Function(
  ffi.Pointer<HIMC__> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<LPIMEMENUITEMINFOA> lpImeParentMenu,
  ffi.Pointer<LPIMEMENUITEMINFOA> lpImeMenu,
  int dwSize,
);

typedef _c_ImmGetImeMenuItemsW = ffi.Uint64 Function(
  ffi.Pointer<HIMC__> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Pointer<LPIMEMENUITEMINFOW> lpImeParentMenu,
  ffi.Pointer<LPIMEMENUITEMINFOW> lpImeMenu,
  ffi.Uint64 dwSize,
);

typedef _dart_ImmGetImeMenuItemsW = int Function(
  ffi.Pointer<HIMC__> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<LPIMEMENUITEMINFOW> lpImeParentMenu,
  ffi.Pointer<LPIMEMENUITEMINFOW> lpImeMenu,
  int dwSize,
);

typedef _c_ImmDisableTextFrameService = ffi.Int32 Function(
  ffi.Uint64 idThread,
);

typedef _dart_ImmDisableTextFrameService = int Function(
  int idThread,
);

typedef _c_ImmDisableLegacyIME = ffi.Int32 Function();

typedef _dart_ImmDisableLegacyIME = int Function();

typedef _c__fperrraise = ffi.Void Function(
  ffi.Int32 _Except,
);

typedef _dart__fperrraise = void Function(
  int _Except,
);

typedef _c__dclass = ffi.Int16 Function(
  ffi.Double _X,
);

typedef _dart__dclass = int Function(
  double _X,
);

typedef _c__fdclass = ffi.Int16 Function(
  ffi.Float _X,
);

typedef _dart__fdclass = int Function(
  double _X,
);

typedef _c__dsign = ffi.Int32 Function(
  ffi.Double _X,
);

typedef _dart__dsign = int Function(
  double _X,
);

typedef _c__fdsign = ffi.Int32 Function(
  ffi.Float _X,
);

typedef _dart__fdsign = int Function(
  double _X,
);

typedef _c__dpcomp = ffi.Int32 Function(
  ffi.Double _X,
  ffi.Double _Y,
);

typedef _dart__dpcomp = int Function(
  double _X,
  double _Y,
);

typedef _c__fdpcomp = ffi.Int32 Function(
  ffi.Float _X,
  ffi.Float _Y,
);

typedef _dart__fdpcomp = int Function(
  double _X,
  double _Y,
);

typedef _c__dtest = ffi.Int16 Function(
  ffi.Pointer<ffi.Double> _Px,
);

typedef _dart__dtest = int Function(
  ffi.Pointer<ffi.Double> _Px,
);

typedef _c__fdtest = ffi.Int16 Function(
  ffi.Pointer<ffi.Float> _Px,
);

typedef _dart__fdtest = int Function(
  ffi.Pointer<ffi.Float> _Px,
);

typedef _c__d_int = ffi.Int16 Function(
  ffi.Pointer<ffi.Double> _Px,
  ffi.Int16 _Xexp,
);

typedef _dart__d_int = int Function(
  ffi.Pointer<ffi.Double> _Px,
  int _Xexp,
);

typedef _c__fd_int = ffi.Int16 Function(
  ffi.Pointer<ffi.Float> _Px,
  ffi.Int16 _Xexp,
);

typedef _dart__fd_int = int Function(
  ffi.Pointer<ffi.Float> _Px,
  int _Xexp,
);

typedef _c__dscale = ffi.Int16 Function(
  ffi.Pointer<ffi.Double> _Px,
  ffi.Int64 _Lexp,
);

typedef _dart__dscale = int Function(
  ffi.Pointer<ffi.Double> _Px,
  int _Lexp,
);

typedef _c__fdscale = ffi.Int16 Function(
  ffi.Pointer<ffi.Float> _Px,
  ffi.Int64 _Lexp,
);

typedef _dart__fdscale = int Function(
  ffi.Pointer<ffi.Float> _Px,
  int _Lexp,
);

typedef _c__dunscale = ffi.Int16 Function(
  ffi.Pointer<ffi.Int16> _Pex,
  ffi.Pointer<ffi.Double> _Px,
);

typedef _dart__dunscale = int Function(
  ffi.Pointer<ffi.Int16> _Pex,
  ffi.Pointer<ffi.Double> _Px,
);

typedef _c__fdunscale = ffi.Int16 Function(
  ffi.Pointer<ffi.Int16> _Pex,
  ffi.Pointer<ffi.Float> _Px,
);

typedef _dart__fdunscale = int Function(
  ffi.Pointer<ffi.Int16> _Pex,
  ffi.Pointer<ffi.Float> _Px,
);

typedef _c__dexp = ffi.Int16 Function(
  ffi.Pointer<ffi.Double> _Px,
  ffi.Double _Y,
  ffi.Int64 _Eoff,
);

typedef _dart__dexp = int Function(
  ffi.Pointer<ffi.Double> _Px,
  double _Y,
  int _Eoff,
);

typedef _c__fdexp = ffi.Int16 Function(
  ffi.Pointer<ffi.Float> _Px,
  ffi.Float _Y,
  ffi.Int64 _Eoff,
);

typedef _dart__fdexp = int Function(
  ffi.Pointer<ffi.Float> _Px,
  double _Y,
  int _Eoff,
);

typedef _c__dnorm = ffi.Int16 Function(
  ffi.Pointer<ffi.Uint16> _Ps,
);

typedef _dart__dnorm = int Function(
  ffi.Pointer<ffi.Uint16> _Ps,
);

typedef _c__fdnorm = ffi.Int16 Function(
  ffi.Pointer<ffi.Uint16> _Ps,
);

typedef _dart__fdnorm = int Function(
  ffi.Pointer<ffi.Uint16> _Ps,
);

typedef _c__dpoly = ffi.Double Function(
  ffi.Double _X,
  ffi.Pointer<ffi.Double> _Tab,
  ffi.Int32 _N,
);

typedef _dart__dpoly = double Function(
  double _X,
  ffi.Pointer<ffi.Double> _Tab,
  int _N,
);

typedef _c__fdpoly = ffi.Float Function(
  ffi.Float _X,
  ffi.Pointer<ffi.Float> _Tab,
  ffi.Int32 _N,
);

typedef _dart__fdpoly = double Function(
  double _X,
  ffi.Pointer<ffi.Float> _Tab,
  int _N,
);

typedef _c__dlog = ffi.Double Function(
  ffi.Double _X,
  ffi.Int32 _Baseflag,
);

typedef _dart__dlog = double Function(
  double _X,
  int _Baseflag,
);

typedef _c__fdlog = ffi.Float Function(
  ffi.Float _X,
  ffi.Int32 _Baseflag,
);

typedef _dart__fdlog = double Function(
  double _X,
  int _Baseflag,
);

typedef _c__dsin = ffi.Double Function(
  ffi.Double _X,
  ffi.Uint32 _Qoff,
);

typedef _dart__dsin = double Function(
  double _X,
  int _Qoff,
);

typedef _c__fdsin = ffi.Float Function(
  ffi.Float _X,
  ffi.Uint32 _Qoff,
);

typedef _dart__fdsin = double Function(
  double _X,
  int _Qoff,
);

typedef _c_abs = ffi.Int32 Function(
  ffi.Int32 _X,
);

typedef _dart_abs = int Function(
  int _X,
);

typedef _c_labs = ffi.Int64 Function(
  ffi.Int64 _X,
);

typedef _dart_labs = int Function(
  int _X,
);

typedef _c_llabs = ffi.Int64 Function(
  ffi.Int64 _X,
);

typedef _dart_llabs = int Function(
  int _X,
);

typedef _c_acos = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_acos = double Function(
  double _X,
);

typedef _c_asin = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_asin = double Function(
  double _X,
);

typedef _c_atan = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_atan = double Function(
  double _X,
);

typedef _c_atan2 = ffi.Double Function(
  ffi.Double _Y,
  ffi.Double _X,
);

typedef _dart_atan2 = double Function(
  double _Y,
  double _X,
);

typedef _c_cos = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_cos = double Function(
  double _X,
);

typedef _c_cosh = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_cosh = double Function(
  double _X,
);

typedef _c_exp = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_exp = double Function(
  double _X,
);

typedef _c_fabs = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_fabs = double Function(
  double _X,
);

typedef _c_fmod = ffi.Double Function(
  ffi.Double _X,
  ffi.Double _Y,
);

typedef _dart_fmod = double Function(
  double _X,
  double _Y,
);

typedef _c_log = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_log = double Function(
  double _X,
);

typedef _c_log10 = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_log10 = double Function(
  double _X,
);

typedef _c_pow = ffi.Double Function(
  ffi.Double _X,
  ffi.Double _Y,
);

typedef _dart_pow = double Function(
  double _X,
  double _Y,
);

typedef _c_sin = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_sin = double Function(
  double _X,
);

typedef _c_sinh = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_sinh = double Function(
  double _X,
);

typedef _c_sqrt = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_sqrt = double Function(
  double _X,
);

typedef _c_tan = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_tan = double Function(
  double _X,
);

typedef _c_tanh = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_tanh = double Function(
  double _X,
);

typedef _c_acosh = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_acosh = double Function(
  double _X,
);

typedef _c_asinh = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_asinh = double Function(
  double _X,
);

typedef _c_atanh = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_atanh = double Function(
  double _X,
);

typedef _c_atof = ffi.Double Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _dart_atof = double Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _c__atof_l = ffi.Double Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__atof_l = double Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_cbrt = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_cbrt = double Function(
  double _X,
);

typedef _c_ceil = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_ceil = double Function(
  double _X,
);

typedef _c__chgsign = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart__chgsign = double Function(
  double _X,
);

typedef _c_copysign = ffi.Double Function(
  ffi.Double _Number,
  ffi.Double _Sign,
);

typedef _dart_copysign = double Function(
  double _Number,
  double _Sign,
);

typedef _c__copysign = ffi.Double Function(
  ffi.Double _Number,
  ffi.Double _Sign,
);

typedef _dart__copysign = double Function(
  double _Number,
  double _Sign,
);

typedef _c_erf = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_erf = double Function(
  double _X,
);

typedef _c_erfc = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_erfc = double Function(
  double _X,
);

typedef _c_exp2 = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_exp2 = double Function(
  double _X,
);

typedef _c_expm1 = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_expm1 = double Function(
  double _X,
);

typedef _c_fdim = ffi.Double Function(
  ffi.Double _X,
  ffi.Double _Y,
);

typedef _dart_fdim = double Function(
  double _X,
  double _Y,
);

typedef _c_floor = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_floor = double Function(
  double _X,
);

typedef _c_fma = ffi.Double Function(
  ffi.Double _X,
  ffi.Double _Y,
  ffi.Double _Z,
);

typedef _dart_fma = double Function(
  double _X,
  double _Y,
  double _Z,
);

typedef _c_fmax = ffi.Double Function(
  ffi.Double _X,
  ffi.Double _Y,
);

typedef _dart_fmax = double Function(
  double _X,
  double _Y,
);

typedef _c_fmin = ffi.Double Function(
  ffi.Double _X,
  ffi.Double _Y,
);

typedef _dart_fmin = double Function(
  double _X,
  double _Y,
);

typedef _c_frexp = ffi.Double Function(
  ffi.Double _X,
  ffi.Pointer<ffi.Int32> _Y,
);

typedef _dart_frexp = double Function(
  double _X,
  ffi.Pointer<ffi.Int32> _Y,
);

typedef _c_hypot = ffi.Double Function(
  ffi.Double _X,
  ffi.Double _Y,
);

typedef _dart_hypot = double Function(
  double _X,
  double _Y,
);

typedef _c__hypot = ffi.Double Function(
  ffi.Double _X,
  ffi.Double _Y,
);

typedef _dart__hypot = double Function(
  double _X,
  double _Y,
);

typedef _c_ilogb = ffi.Int32 Function(
  ffi.Double _X,
);

typedef _dart_ilogb = int Function(
  double _X,
);

typedef _c_ldexp = ffi.Double Function(
  ffi.Double _X,
  ffi.Int32 _Y,
);

typedef _dart_ldexp = double Function(
  double _X,
  int _Y,
);

typedef _c_lgamma = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_lgamma = double Function(
  double _X,
);

typedef _c_llrint = ffi.Int64 Function(
  ffi.Double _X,
);

typedef _dart_llrint = int Function(
  double _X,
);

typedef _c_llround = ffi.Int64 Function(
  ffi.Double _X,
);

typedef _dart_llround = int Function(
  double _X,
);

typedef _c_log1p = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_log1p = double Function(
  double _X,
);

typedef _c_log2 = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_log2 = double Function(
  double _X,
);

typedef _c_logb = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_logb = double Function(
  double _X,
);

typedef _c_lrint = ffi.Int64 Function(
  ffi.Double _X,
);

typedef _dart_lrint = int Function(
  double _X,
);

typedef _c_lround = ffi.Int64 Function(
  ffi.Double _X,
);

typedef _dart_lround = int Function(
  double _X,
);

typedef _c__matherr = ffi.Int32 Function(
  ffi.Pointer<_exception> _Except,
);

typedef _dart__matherr = int Function(
  ffi.Pointer<_exception> _Except,
);

typedef _c_modf = ffi.Double Function(
  ffi.Double _X,
  ffi.Pointer<ffi.Double> _Y,
);

typedef _dart_modf = double Function(
  double _X,
  ffi.Pointer<ffi.Double> _Y,
);

typedef _c_nan = ffi.Double Function(
  ffi.Pointer<ffi.Int8> _X,
);

typedef _dart_nan = double Function(
  ffi.Pointer<ffi.Int8> _X,
);

typedef _c_nearbyint = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_nearbyint = double Function(
  double _X,
);

typedef _c_nextafter = ffi.Double Function(
  ffi.Double _X,
  ffi.Double _Y,
);

typedef _dart_nextafter = double Function(
  double _X,
  double _Y,
);

typedef _c_remainder = ffi.Double Function(
  ffi.Double _X,
  ffi.Double _Y,
);

typedef _dart_remainder = double Function(
  double _X,
  double _Y,
);

typedef _c_remquo = ffi.Double Function(
  ffi.Double _X,
  ffi.Double _Y,
  ffi.Pointer<ffi.Int32> _Z,
);

typedef _dart_remquo = double Function(
  double _X,
  double _Y,
  ffi.Pointer<ffi.Int32> _Z,
);

typedef _c_rint = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_rint = double Function(
  double _X,
);

typedef _c_round = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_round = double Function(
  double _X,
);

typedef _c_scalbln = ffi.Double Function(
  ffi.Double _X,
  ffi.Int64 _Y,
);

typedef _dart_scalbln = double Function(
  double _X,
  int _Y,
);

typedef _c_scalbn = ffi.Double Function(
  ffi.Double _X,
  ffi.Int32 _Y,
);

typedef _dart_scalbn = double Function(
  double _X,
  int _Y,
);

typedef _c_tgamma = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_tgamma = double Function(
  double _X,
);

typedef _c_trunc = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_trunc = double Function(
  double _X,
);

typedef _c__j0 = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart__j0 = double Function(
  double _X,
);

typedef _c__j1 = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart__j1 = double Function(
  double _X,
);

typedef _c__jn = ffi.Double Function(
  ffi.Int32 _X,
  ffi.Double _Y,
);

typedef _dart__jn = double Function(
  int _X,
  double _Y,
);

typedef _c__y0 = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart__y0 = double Function(
  double _X,
);

typedef _c__y1 = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart__y1 = double Function(
  double _X,
);

typedef _c__yn = ffi.Double Function(
  ffi.Int32 _X,
  ffi.Double _Y,
);

typedef _dart__yn = double Function(
  int _X,
  double _Y,
);

typedef _c_acoshf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_acoshf = double Function(
  double _X,
);

typedef _c_asinhf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_asinhf = double Function(
  double _X,
);

typedef _c_atanhf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_atanhf = double Function(
  double _X,
);

typedef _c_cbrtf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_cbrtf = double Function(
  double _X,
);

typedef _c__chgsignf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart__chgsignf = double Function(
  double _X,
);

typedef _c_copysignf = ffi.Float Function(
  ffi.Float _Number,
  ffi.Float _Sign,
);

typedef _dart_copysignf = double Function(
  double _Number,
  double _Sign,
);

typedef _c__copysignf = ffi.Float Function(
  ffi.Float _Number,
  ffi.Float _Sign,
);

typedef _dart__copysignf = double Function(
  double _Number,
  double _Sign,
);

typedef _c_erff = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_erff = double Function(
  double _X,
);

typedef _c_erfcf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_erfcf = double Function(
  double _X,
);

typedef _c_expm1f = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_expm1f = double Function(
  double _X,
);

typedef _c_exp2f = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_exp2f = double Function(
  double _X,
);

typedef _c_fdimf = ffi.Float Function(
  ffi.Float _X,
  ffi.Float _Y,
);

typedef _dart_fdimf = double Function(
  double _X,
  double _Y,
);

typedef _c_fmaf = ffi.Float Function(
  ffi.Float _X,
  ffi.Float _Y,
  ffi.Float _Z,
);

typedef _dart_fmaf = double Function(
  double _X,
  double _Y,
  double _Z,
);

typedef _c_fmaxf = ffi.Float Function(
  ffi.Float _X,
  ffi.Float _Y,
);

typedef _dart_fmaxf = double Function(
  double _X,
  double _Y,
);

typedef _c_fminf = ffi.Float Function(
  ffi.Float _X,
  ffi.Float _Y,
);

typedef _dart_fminf = double Function(
  double _X,
  double _Y,
);

typedef _c__hypotf = ffi.Float Function(
  ffi.Float _X,
  ffi.Float _Y,
);

typedef _dart__hypotf = double Function(
  double _X,
  double _Y,
);

typedef _c_ilogbf = ffi.Int32 Function(
  ffi.Float _X,
);

typedef _dart_ilogbf = int Function(
  double _X,
);

typedef _c_lgammaf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_lgammaf = double Function(
  double _X,
);

typedef _c_llrintf = ffi.Int64 Function(
  ffi.Float _X,
);

typedef _dart_llrintf = int Function(
  double _X,
);

typedef _c_llroundf = ffi.Int64 Function(
  ffi.Float _X,
);

typedef _dart_llroundf = int Function(
  double _X,
);

typedef _c_log1pf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_log1pf = double Function(
  double _X,
);

typedef _c_log2f = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_log2f = double Function(
  double _X,
);

typedef _c_logbf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_logbf = double Function(
  double _X,
);

typedef _c_lrintf = ffi.Int64 Function(
  ffi.Float _X,
);

typedef _dart_lrintf = int Function(
  double _X,
);

typedef _c_lroundf = ffi.Int64 Function(
  ffi.Float _X,
);

typedef _dart_lroundf = int Function(
  double _X,
);

typedef _c_nanf = ffi.Float Function(
  ffi.Pointer<ffi.Int8> _X,
);

typedef _dart_nanf = double Function(
  ffi.Pointer<ffi.Int8> _X,
);

typedef _c_nearbyintf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_nearbyintf = double Function(
  double _X,
);

typedef _c_nextafterf = ffi.Float Function(
  ffi.Float _X,
  ffi.Float _Y,
);

typedef _dart_nextafterf = double Function(
  double _X,
  double _Y,
);

typedef _c_remainderf = ffi.Float Function(
  ffi.Float _X,
  ffi.Float _Y,
);

typedef _dart_remainderf = double Function(
  double _X,
  double _Y,
);

typedef _c_remquof = ffi.Float Function(
  ffi.Float _X,
  ffi.Float _Y,
  ffi.Pointer<ffi.Int32> _Z,
);

typedef _dart_remquof = double Function(
  double _X,
  double _Y,
  ffi.Pointer<ffi.Int32> _Z,
);

typedef _c_rintf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_rintf = double Function(
  double _X,
);

typedef _c_roundf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_roundf = double Function(
  double _X,
);

typedef _c_scalblnf = ffi.Float Function(
  ffi.Float _X,
  ffi.Int64 _Y,
);

typedef _dart_scalblnf = double Function(
  double _X,
  int _Y,
);

typedef _c_scalbnf = ffi.Float Function(
  ffi.Float _X,
  ffi.Int32 _Y,
);

typedef _dart_scalbnf = double Function(
  double _X,
  int _Y,
);

typedef _c_tgammaf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_tgammaf = double Function(
  double _X,
);

typedef _c_truncf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_truncf = double Function(
  double _X,
);

typedef _c__logbf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart__logbf = double Function(
  double _X,
);

typedef _c__nextafterf = ffi.Float Function(
  ffi.Float _X,
  ffi.Float _Y,
);

typedef _dart__nextafterf = double Function(
  double _X,
  double _Y,
);

typedef _c__finitef = ffi.Int32 Function(
  ffi.Float _X,
);

typedef _dart__finitef = int Function(
  double _X,
);

typedef _c__isnanf = ffi.Int32 Function(
  ffi.Float _X,
);

typedef _dart__isnanf = int Function(
  double _X,
);

typedef _c__fpclassf = ffi.Int32 Function(
  ffi.Float _X,
);

typedef _dart__fpclassf = int Function(
  double _X,
);

typedef _c__set_FMA3_enable = ffi.Int32 Function(
  ffi.Int32 _Flag,
);

typedef _dart__set_FMA3_enable = int Function(
  int _Flag,
);

typedef _c__get_FMA3_enable = ffi.Int32 Function();

typedef _dart__get_FMA3_enable = int Function();

typedef _c_acosf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_acosf = double Function(
  double _X,
);

typedef _c_asinf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_asinf = double Function(
  double _X,
);

typedef _c_atan2f = ffi.Float Function(
  ffi.Float _Y,
  ffi.Float _X,
);

typedef _dart_atan2f = double Function(
  double _Y,
  double _X,
);

typedef _c_atanf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_atanf = double Function(
  double _X,
);

typedef _c_ceilf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_ceilf = double Function(
  double _X,
);

typedef _c_cosf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_cosf = double Function(
  double _X,
);

typedef _c_coshf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_coshf = double Function(
  double _X,
);

typedef _c_expf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_expf = double Function(
  double _X,
);

typedef _c_fabsf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_fabsf = double Function(
  double _X,
);

typedef _c_floorf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_floorf = double Function(
  double _X,
);

typedef _c_fmodf = ffi.Float Function(
  ffi.Float _X,
  ffi.Float _Y,
);

typedef _dart_fmodf = double Function(
  double _X,
  double _Y,
);

typedef _c_frexpf = ffi.Float Function(
  ffi.Float _X,
  ffi.Pointer<ffi.Int32> _Y,
);

typedef _dart_frexpf = double Function(
  double _X,
  ffi.Pointer<ffi.Int32> _Y,
);

typedef _c_hypotf = ffi.Float Function(
  ffi.Float _X,
  ffi.Float _Y,
);

typedef _dart_hypotf = double Function(
  double _X,
  double _Y,
);

typedef _c_ldexpf = ffi.Float Function(
  ffi.Float _X,
  ffi.Int32 _Y,
);

typedef _dart_ldexpf = double Function(
  double _X,
  int _Y,
);

typedef _c_log10f = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_log10f = double Function(
  double _X,
);

typedef _c_logf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_logf = double Function(
  double _X,
);

typedef _c_modff = ffi.Float Function(
  ffi.Float _X,
  ffi.Pointer<ffi.Float> _Y,
);

typedef _dart_modff = double Function(
  double _X,
  ffi.Pointer<ffi.Float> _Y,
);

typedef _c_powf = ffi.Float Function(
  ffi.Float _X,
  ffi.Float _Y,
);

typedef _dart_powf = double Function(
  double _X,
  double _Y,
);

typedef _c_sinf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_sinf = double Function(
  double _X,
);

typedef _c_sinhf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_sinhf = double Function(
  double _X,
);

typedef _c_sqrtf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_sqrtf = double Function(
  double _X,
);

typedef _c_tanf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_tanf = double Function(
  double _X,
);

typedef _c_tanhf = ffi.Float Function(
  ffi.Float _X,
);

typedef _dart_tanhf = double Function(
  double _X,
);

typedef _c_j0 = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_j0 = double Function(
  double _X,
);

typedef _c_j1 = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_j1 = double Function(
  double _X,
);

typedef _c_jn = ffi.Double Function(
  ffi.Int32 _X,
  ffi.Double _Y,
);

typedef _dart_jn = double Function(
  int _X,
  double _Y,
);

typedef _c_y0 = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_y0 = double Function(
  double _X,
);

typedef _c_y1 = ffi.Double Function(
  ffi.Double _X,
);

typedef _dart_y1 = double Function(
  double _X,
);

typedef _c_yn = ffi.Double Function(
  ffi.Int32 _X,
  ffi.Double _Y,
);

typedef _dart_yn = double Function(
  int _X,
  double _Y,
);

typedef _c__calloc_base = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 _Count,
  ffi.Uint64 _Size,
);

typedef _dart__calloc_base = ffi.Pointer<ffi.Void> Function(
  int _Count,
  int _Size,
);

typedef _c_calloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 _Count,
  ffi.Uint64 _Size,
);

typedef _dart_calloc = ffi.Pointer<ffi.Void> Function(
  int _Count,
  int _Size,
);

typedef _c__callnewh = ffi.Int32 Function(
  ffi.Uint64 _Size,
);

typedef _dart__callnewh = int Function(
  int _Size,
);

typedef _c__expand = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Block,
  ffi.Uint64 _Size,
);

typedef _dart__expand = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Block,
  int _Size,
);

typedef _c__free_base = ffi.Void Function(
  ffi.Pointer<ffi.Void> _Block,
);

typedef _dart__free_base = void Function(
  ffi.Pointer<ffi.Void> _Block,
);

typedef _c_free = ffi.Void Function(
  ffi.Pointer<ffi.Void> _Block,
);

typedef _dart_free = void Function(
  ffi.Pointer<ffi.Void> _Block,
);

typedef _c__malloc_base = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 _Size,
);

typedef _dart__malloc_base = ffi.Pointer<ffi.Void> Function(
  int _Size,
);

typedef _c_malloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 _Size,
);

typedef _dart_malloc = ffi.Pointer<ffi.Void> Function(
  int _Size,
);

typedef _c__msize_base = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> _Block,
);

typedef _dart__msize_base = int Function(
  ffi.Pointer<ffi.Void> _Block,
);

typedef _c__msize = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> _Block,
);

typedef _dart__msize = int Function(
  ffi.Pointer<ffi.Void> _Block,
);

typedef _c__realloc_base = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Block,
  ffi.Uint64 _Size,
);

typedef _dart__realloc_base = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Block,
  int _Size,
);

typedef _c_realloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Block,
  ffi.Uint64 _Size,
);

typedef _dart_realloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Block,
  int _Size,
);

typedef _c__recalloc_base = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Block,
  ffi.Uint64 _Count,
  ffi.Uint64 _Size,
);

typedef _dart__recalloc_base = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Block,
  int _Count,
  int _Size,
);

typedef _c__recalloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Block,
  ffi.Uint64 _Count,
  ffi.Uint64 _Size,
);

typedef _dart__recalloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Block,
  int _Count,
  int _Size,
);

typedef _c__aligned_free = ffi.Void Function(
  ffi.Pointer<ffi.Void> _Block,
);

typedef _dart__aligned_free = void Function(
  ffi.Pointer<ffi.Void> _Block,
);

typedef _c__aligned_malloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 _Size,
  ffi.Uint64 _Alignment,
);

typedef _dart__aligned_malloc = ffi.Pointer<ffi.Void> Function(
  int _Size,
  int _Alignment,
);

typedef _c__aligned_offset_malloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 _Size,
  ffi.Uint64 _Alignment,
  ffi.Uint64 _Offset,
);

typedef _dart__aligned_offset_malloc = ffi.Pointer<ffi.Void> Function(
  int _Size,
  int _Alignment,
  int _Offset,
);

typedef _c__aligned_msize = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> _Block,
  ffi.Uint64 _Alignment,
  ffi.Uint64 _Offset,
);

typedef _dart__aligned_msize = int Function(
  ffi.Pointer<ffi.Void> _Block,
  int _Alignment,
  int _Offset,
);

typedef _c__aligned_offset_realloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Block,
  ffi.Uint64 _Size,
  ffi.Uint64 _Alignment,
  ffi.Uint64 _Offset,
);

typedef _dart__aligned_offset_realloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Block,
  int _Size,
  int _Alignment,
  int _Offset,
);

typedef _c__aligned_offset_recalloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Block,
  ffi.Uint64 _Count,
  ffi.Uint64 _Size,
  ffi.Uint64 _Alignment,
  ffi.Uint64 _Offset,
);

typedef _dart__aligned_offset_recalloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Block,
  int _Count,
  int _Size,
  int _Alignment,
  int _Offset,
);

typedef _c__aligned_realloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Block,
  ffi.Uint64 _Size,
  ffi.Uint64 _Alignment,
);

typedef _dart__aligned_realloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Block,
  int _Size,
  int _Alignment,
);

typedef _c__aligned_recalloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Block,
  ffi.Uint64 _Count,
  ffi.Uint64 _Size,
  ffi.Uint64 _Alignment,
);

typedef _dart__aligned_recalloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Block,
  int _Count,
  int _Size,
  int _Alignment,
);

typedef _c___threadid = ffi.Uint64 Function();

typedef _dart___threadid = int Function();

typedef _c___threadhandle = ffi.Uint64 Function();

typedef _dart___threadhandle = int Function();

typedef _CoreCrtSecureSearchSortCompareFunction = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_bsearch_s = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Key,
  ffi.Pointer<ffi.Void> _Base,
  ffi.Uint64 _NumOfElements,
  ffi.Uint64 _SizeOfElements,
  ffi.Pointer<ffi.NativeFunction<_CoreCrtSecureSearchSortCompareFunction>>
      _CompareFunction,
  ffi.Pointer<ffi.Void> _Context,
);

typedef _dart_bsearch_s = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Key,
  ffi.Pointer<ffi.Void> _Base,
  int _NumOfElements,
  int _SizeOfElements,
  ffi.Pointer<ffi.NativeFunction<_CoreCrtSecureSearchSortCompareFunction>>
      _CompareFunction,
  ffi.Pointer<ffi.Void> _Context,
);

typedef _c_qsort_s = ffi.Void Function(
  ffi.Pointer<ffi.Void> _Base,
  ffi.Uint64 _NumOfElements,
  ffi.Uint64 _SizeOfElements,
  ffi.Pointer<ffi.NativeFunction<_CoreCrtSecureSearchSortCompareFunction>>
      _CompareFunction,
  ffi.Pointer<ffi.Void> _Context,
);

typedef _dart_qsort_s = void Function(
  ffi.Pointer<ffi.Void> _Base,
  int _NumOfElements,
  int _SizeOfElements,
  ffi.Pointer<ffi.NativeFunction<_CoreCrtSecureSearchSortCompareFunction>>
      _CompareFunction,
  ffi.Pointer<ffi.Void> _Context,
);

typedef _CoreCrtNonSecureSearchSortCompareFunction = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_bsearch = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Key,
  ffi.Pointer<ffi.Void> _Base,
  ffi.Uint64 _NumOfElements,
  ffi.Uint64 _SizeOfElements,
  ffi.Pointer<ffi.NativeFunction<_CoreCrtNonSecureSearchSortCompareFunction>>
      _CompareFunction,
);

typedef _dart_bsearch = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Key,
  ffi.Pointer<ffi.Void> _Base,
  int _NumOfElements,
  int _SizeOfElements,
  ffi.Pointer<ffi.NativeFunction<_CoreCrtNonSecureSearchSortCompareFunction>>
      _CompareFunction,
);

typedef _c_qsort = ffi.Void Function(
  ffi.Pointer<ffi.Void> _Base,
  ffi.Uint64 _NumOfElements,
  ffi.Uint64 _SizeOfElements,
  ffi.Pointer<ffi.NativeFunction<_CoreCrtNonSecureSearchSortCompareFunction>>
      _CompareFunction,
);

typedef _dart_qsort = void Function(
  ffi.Pointer<ffi.Void> _Base,
  int _NumOfElements,
  int _SizeOfElements,
  ffi.Pointer<ffi.NativeFunction<_CoreCrtNonSecureSearchSortCompareFunction>>
      _CompareFunction,
);

typedef _c__lfind_s = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Key,
  ffi.Pointer<ffi.Void> _Base,
  ffi.Pointer<ffi.Uint32> _NumOfElements,
  ffi.Uint64 _SizeOfElements,
  ffi.Pointer<ffi.NativeFunction<_CoreCrtSecureSearchSortCompareFunction>>
      _CompareFunction,
  ffi.Pointer<ffi.Void> _Context,
);

typedef _dart__lfind_s = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Key,
  ffi.Pointer<ffi.Void> _Base,
  ffi.Pointer<ffi.Uint32> _NumOfElements,
  int _SizeOfElements,
  ffi.Pointer<ffi.NativeFunction<_CoreCrtSecureSearchSortCompareFunction>>
      _CompareFunction,
  ffi.Pointer<ffi.Void> _Context,
);

typedef _c__lfind = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Key,
  ffi.Pointer<ffi.Void> _Base,
  ffi.Pointer<ffi.Uint32> _NumOfElements,
  ffi.Uint32 _SizeOfElements,
  ffi.Pointer<ffi.NativeFunction<_CoreCrtNonSecureSearchSortCompareFunction>>
      _CompareFunction,
);

typedef _dart__lfind = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Key,
  ffi.Pointer<ffi.Void> _Base,
  ffi.Pointer<ffi.Uint32> _NumOfElements,
  int _SizeOfElements,
  ffi.Pointer<ffi.NativeFunction<_CoreCrtNonSecureSearchSortCompareFunction>>
      _CompareFunction,
);

typedef _c__lsearch_s = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Key,
  ffi.Pointer<ffi.Void> _Base,
  ffi.Pointer<ffi.Uint32> _NumOfElements,
  ffi.Uint64 _SizeOfElements,
  ffi.Pointer<ffi.NativeFunction<_CoreCrtSecureSearchSortCompareFunction>>
      _CompareFunction,
  ffi.Pointer<ffi.Void> _Context,
);

typedef _dart__lsearch_s = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Key,
  ffi.Pointer<ffi.Void> _Base,
  ffi.Pointer<ffi.Uint32> _NumOfElements,
  int _SizeOfElements,
  ffi.Pointer<ffi.NativeFunction<_CoreCrtSecureSearchSortCompareFunction>>
      _CompareFunction,
  ffi.Pointer<ffi.Void> _Context,
);

typedef _c__lsearch = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Key,
  ffi.Pointer<ffi.Void> _Base,
  ffi.Pointer<ffi.Uint32> _NumOfElements,
  ffi.Uint32 _SizeOfElements,
  ffi.Pointer<ffi.NativeFunction<_CoreCrtNonSecureSearchSortCompareFunction>>
      _CompareFunction,
);

typedef _dart__lsearch = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Key,
  ffi.Pointer<ffi.Void> _Base,
  ffi.Pointer<ffi.Uint32> _NumOfElements,
  int _SizeOfElements,
  ffi.Pointer<ffi.NativeFunction<_CoreCrtNonSecureSearchSortCompareFunction>>
      _CompareFunction,
);

typedef _c_lfind = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Key,
  ffi.Pointer<ffi.Void> _Base,
  ffi.Pointer<ffi.Uint32> _NumOfElements,
  ffi.Uint32 _SizeOfElements,
  ffi.Pointer<ffi.NativeFunction<_CoreCrtNonSecureSearchSortCompareFunction>>
      _CompareFunction,
);

typedef _dart_lfind = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Key,
  ffi.Pointer<ffi.Void> _Base,
  ffi.Pointer<ffi.Uint32> _NumOfElements,
  int _SizeOfElements,
  ffi.Pointer<ffi.NativeFunction<_CoreCrtNonSecureSearchSortCompareFunction>>
      _CompareFunction,
);

typedef _c_lsearch = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Key,
  ffi.Pointer<ffi.Void> _Base,
  ffi.Pointer<ffi.Uint32> _NumOfElements,
  ffi.Uint32 _SizeOfElements,
  ffi.Pointer<ffi.NativeFunction<_CoreCrtNonSecureSearchSortCompareFunction>>
      _CompareFunction,
);

typedef _dart_lsearch = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Key,
  ffi.Pointer<ffi.Void> _Base,
  ffi.Pointer<ffi.Uint32> _NumOfElements,
  int _SizeOfElements,
  ffi.Pointer<ffi.NativeFunction<_CoreCrtNonSecureSearchSortCompareFunction>>
      _CompareFunction,
);

typedef _c__itow_s = ffi.Int32 Function(
  ffi.Int32 _Value,
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Int32 _Radix,
);

typedef _dart__itow_s = int Function(
  int _Value,
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _BufferCount,
  int _Radix,
);

typedef _c__itow = ffi.Pointer<ffi.Uint16> Function(
  ffi.Int32 _Value,
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Int32 _Radix,
);

typedef _dart__itow = ffi.Pointer<ffi.Uint16> Function(
  int _Value,
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _Radix,
);

typedef _c__ltow_s = ffi.Int32 Function(
  ffi.Int64 _Value,
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Int32 _Radix,
);

typedef _dart__ltow_s = int Function(
  int _Value,
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _BufferCount,
  int _Radix,
);

typedef _c__ltow = ffi.Pointer<ffi.Uint16> Function(
  ffi.Int64 _Value,
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Int32 _Radix,
);

typedef _dart__ltow = ffi.Pointer<ffi.Uint16> Function(
  int _Value,
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _Radix,
);

typedef _c__ultow_s = ffi.Int32 Function(
  ffi.Uint64 _Value,
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Int32 _Radix,
);

typedef _dart__ultow_s = int Function(
  int _Value,
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _BufferCount,
  int _Radix,
);

typedef _c__ultow = ffi.Pointer<ffi.Uint16> Function(
  ffi.Uint64 _Value,
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Int32 _Radix,
);

typedef _dart__ultow = ffi.Pointer<ffi.Uint16> Function(
  int _Value,
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _Radix,
);

typedef _c_wcstod = ffi.Double Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
);

typedef _dart_wcstod = double Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
);

typedef _c__wcstod_l = ffi.Double Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcstod_l = double Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_wcstol = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  ffi.Int32 _Radix,
);

typedef _dart_wcstol = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  int _Radix,
);

typedef _c__wcstol_l = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  ffi.Int32 _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcstol_l = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  int _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_wcstoll = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  ffi.Int32 _Radix,
);

typedef _dart_wcstoll = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  int _Radix,
);

typedef _c__wcstoll_l = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  ffi.Int32 _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcstoll_l = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  int _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_wcstoul = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  ffi.Int32 _Radix,
);

typedef _dart_wcstoul = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  int _Radix,
);

typedef _c__wcstoul_l = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  ffi.Int32 _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcstoul_l = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  int _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_wcstoull = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  ffi.Int32 _Radix,
);

typedef _dart_wcstoull = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  int _Radix,
);

typedef _c__wcstoull_l = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  ffi.Int32 _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcstoull_l = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  int _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_wcstof = ffi.Float Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
);

typedef _dart_wcstof = double Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
);

typedef _c__wcstof_l = ffi.Float Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcstof_l = double Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__wtof = ffi.Double Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _dart__wtof = double Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _c__wtof_l = ffi.Double Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wtof_l = double Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__wtoi = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _dart__wtoi = int Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _c__wtoi_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wtoi_l = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__wtol = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _dart__wtol = int Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _c__wtol_l = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wtol_l = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__wtoll = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _dart__wtoll = int Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _c__wtoll_l = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wtoll_l = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__i64tow_s = ffi.Int32 Function(
  ffi.Int64 _Value,
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Int32 _Radix,
);

typedef _dart__i64tow_s = int Function(
  int _Value,
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _BufferCount,
  int _Radix,
);

typedef _c__i64tow = ffi.Pointer<ffi.Uint16> Function(
  ffi.Int64 _Value,
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Int32 _Radix,
);

typedef _dart__i64tow = ffi.Pointer<ffi.Uint16> Function(
  int _Value,
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _Radix,
);

typedef _c__ui64tow_s = ffi.Int32 Function(
  ffi.Uint64 _Value,
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Int32 _Radix,
);

typedef _dart__ui64tow_s = int Function(
  int _Value,
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _BufferCount,
  int _Radix,
);

typedef _c__ui64tow = ffi.Pointer<ffi.Uint16> Function(
  ffi.Uint64 _Value,
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Int32 _Radix,
);

typedef _dart__ui64tow = ffi.Pointer<ffi.Uint16> Function(
  int _Value,
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _Radix,
);

typedef _c__wtoi64 = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _dart__wtoi64 = int Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _c__wtoi64_l = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wtoi64_l = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__wcstoi64 = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  ffi.Int32 _Radix,
);

typedef _dart__wcstoi64 = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  int _Radix,
);

typedef _c__wcstoi64_l = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  ffi.Int32 _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcstoi64_l = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  int _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__wcstoui64 = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  ffi.Int32 _Radix,
);

typedef _dart__wcstoui64 = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  int _Radix,
);

typedef _c__wcstoui64_l = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  ffi.Int32 _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcstoui64_l = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _EndPtr,
  int _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__wfullpath = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Pointer<ffi.Uint16> _Path,
  ffi.Uint64 _BufferCount,
);

typedef _dart__wfullpath = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Pointer<ffi.Uint16> _Path,
  int _BufferCount,
);

typedef _c__wmakepath_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Pointer<ffi.Uint16> _Drive,
  ffi.Pointer<ffi.Uint16> _Dir,
  ffi.Pointer<ffi.Uint16> _Filename,
  ffi.Pointer<ffi.Uint16> _Ext,
);

typedef _dart__wmakepath_s = int Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _BufferCount,
  ffi.Pointer<ffi.Uint16> _Drive,
  ffi.Pointer<ffi.Uint16> _Dir,
  ffi.Pointer<ffi.Uint16> _Filename,
  ffi.Pointer<ffi.Uint16> _Ext,
);

typedef _c__wmakepath = ffi.Void Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Pointer<ffi.Uint16> _Drive,
  ffi.Pointer<ffi.Uint16> _Dir,
  ffi.Pointer<ffi.Uint16> _Filename,
  ffi.Pointer<ffi.Uint16> _Ext,
);

typedef _dart__wmakepath = void Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Pointer<ffi.Uint16> _Drive,
  ffi.Pointer<ffi.Uint16> _Dir,
  ffi.Pointer<ffi.Uint16> _Filename,
  ffi.Pointer<ffi.Uint16> _Ext,
);

typedef _c__wperror = ffi.Void Function(
  ffi.Pointer<ffi.Uint16> _ErrorMessage,
);

typedef _dart__wperror = void Function(
  ffi.Pointer<ffi.Uint16> _ErrorMessage,
);

typedef _c__wsplitpath = ffi.Void Function(
  ffi.Pointer<ffi.Uint16> _FullPath,
  ffi.Pointer<ffi.Uint16> _Drive,
  ffi.Pointer<ffi.Uint16> _Dir,
  ffi.Pointer<ffi.Uint16> _Filename,
  ffi.Pointer<ffi.Uint16> _Ext,
);

typedef _dart__wsplitpath = void Function(
  ffi.Pointer<ffi.Uint16> _FullPath,
  ffi.Pointer<ffi.Uint16> _Drive,
  ffi.Pointer<ffi.Uint16> _Dir,
  ffi.Pointer<ffi.Uint16> _Filename,
  ffi.Pointer<ffi.Uint16> _Ext,
);

typedef _c__wsplitpath_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _FullPath,
  ffi.Pointer<ffi.Uint16> _Drive,
  ffi.Uint64 _DriveCount,
  ffi.Pointer<ffi.Uint16> _Dir,
  ffi.Uint64 _DirCount,
  ffi.Pointer<ffi.Uint16> _Filename,
  ffi.Uint64 _FilenameCount,
  ffi.Pointer<ffi.Uint16> _Ext,
  ffi.Uint64 _ExtCount,
);

typedef _dart__wsplitpath_s = int Function(
  ffi.Pointer<ffi.Uint16> _FullPath,
  ffi.Pointer<ffi.Uint16> _Drive,
  int _DriveCount,
  ffi.Pointer<ffi.Uint16> _Dir,
  int _DirCount,
  ffi.Pointer<ffi.Uint16> _Filename,
  int _FilenameCount,
  ffi.Pointer<ffi.Uint16> _Ext,
  int _ExtCount,
);

typedef _c__wdupenv_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Buffer,
  ffi.Pointer<ffi.Uint64> _BufferCount,
  ffi.Pointer<ffi.Uint16> _VarName,
);

typedef _dart__wdupenv_s = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Buffer,
  ffi.Pointer<ffi.Uint64> _BufferCount,
  ffi.Pointer<ffi.Uint16> _VarName,
);

typedef _c__wgetenv = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _VarName,
);

typedef _dart__wgetenv = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _VarName,
);

typedef _c__wgetenv_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> _RequiredCount,
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Pointer<ffi.Uint16> _VarName,
);

typedef _dart__wgetenv_s = int Function(
  ffi.Pointer<ffi.Uint64> _RequiredCount,
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _BufferCount,
  ffi.Pointer<ffi.Uint16> _VarName,
);

typedef _c__wputenv = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _EnvString,
);

typedef _dart__wputenv = int Function(
  ffi.Pointer<ffi.Uint16> _EnvString,
);

typedef _c__wputenv_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Name,
  ffi.Pointer<ffi.Uint16> _Value,
);

typedef _dart__wputenv_s = int Function(
  ffi.Pointer<ffi.Uint16> _Name,
  ffi.Pointer<ffi.Uint16> _Value,
);

typedef _c__wsearchenv_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Filename,
  ffi.Pointer<ffi.Uint16> _VarName,
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _BufferCount,
);

typedef _dart__wsearchenv_s = int Function(
  ffi.Pointer<ffi.Uint16> _Filename,
  ffi.Pointer<ffi.Uint16> _VarName,
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _BufferCount,
);

typedef _c__wsearchenv = ffi.Void Function(
  ffi.Pointer<ffi.Uint16> _Filename,
  ffi.Pointer<ffi.Uint16> _VarName,
  ffi.Pointer<ffi.Uint16> _ResultPath,
);

typedef _dart__wsearchenv = void Function(
  ffi.Pointer<ffi.Uint16> _Filename,
  ffi.Pointer<ffi.Uint16> _VarName,
  ffi.Pointer<ffi.Uint16> _ResultPath,
);

typedef _c__wsystem = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Command,
);

typedef _dart__wsystem = int Function(
  ffi.Pointer<ffi.Uint16> _Command,
);

typedef _c__swab = ffi.Void Function(
  ffi.Pointer<ffi.Int8> _Buf1,
  ffi.Pointer<ffi.Int8> _Buf2,
  ffi.Int32 _SizeInBytes,
);

typedef _dart__swab = void Function(
  ffi.Pointer<ffi.Int8> _Buf1,
  ffi.Pointer<ffi.Int8> _Buf2,
  int _SizeInBytes,
);

typedef _c_exit = ffi.Void Function(
  ffi.Int32 _Code,
);

typedef _dart_exit = void Function(
  int _Code,
);

typedef _c__exit = ffi.Void Function(
  ffi.Int32 _Code,
);

typedef _dart__exit = void Function(
  int _Code,
);

typedef _c__Exit = ffi.Void Function(
  ffi.Int32 _Code,
);

typedef _dart__Exit = void Function(
  int _Code,
);

typedef _c_quick_exit = ffi.Void Function(
  ffi.Int32 _Code,
);

typedef _dart_quick_exit = void Function(
  int _Code,
);

typedef _c_abort = ffi.Void Function();

typedef _dart_abort = void Function();

typedef _c__set_abort_behavior = ffi.Uint32 Function(
  ffi.Uint32 _Flags,
  ffi.Uint32 _Mask,
);

typedef _dart__set_abort_behavior = int Function(
  int _Flags,
  int _Mask,
);

typedef _typedefC_1 = ffi.Void Function();

typedef _c_atexit = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_1>> arg0,
);

typedef _dart_atexit = int Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_1>> arg0,
);

typedef _onexit_t = ffi.Int32 Function();

typedef _c__onexit = ffi.Pointer<ffi.NativeFunction<_onexit_t>> Function(
  ffi.Pointer<ffi.NativeFunction<_onexit_t>> _Func,
);

typedef _dart__onexit = ffi.Pointer<ffi.NativeFunction<_onexit_t>> Function(
  ffi.Pointer<ffi.NativeFunction<_onexit_t>> _Func,
);

typedef _typedefC_2 = ffi.Void Function();

typedef _c_at_quick_exit = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_2>> arg0,
);

typedef _dart_at_quick_exit = int Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_2>> arg0,
);

typedef _purecall_handler = ffi.Void Function();

typedef _c__set_purecall_handler
    = ffi.Pointer<ffi.NativeFunction<_purecall_handler>> Function(
  ffi.Pointer<ffi.NativeFunction<_purecall_handler>> _Handler,
);

typedef _dart__set_purecall_handler
    = ffi.Pointer<ffi.NativeFunction<_purecall_handler>> Function(
  ffi.Pointer<ffi.NativeFunction<_purecall_handler>> _Handler,
);

typedef _c__get_purecall_handler
    = ffi.Pointer<ffi.NativeFunction<_purecall_handler>> Function();

typedef _dart__get_purecall_handler
    = ffi.Pointer<ffi.NativeFunction<_purecall_handler>> Function();

typedef _invalid_parameter_handler = ffi.Void Function(
  ffi.Pointer<ffi.Uint16>,
  ffi.Pointer<ffi.Uint16>,
  ffi.Pointer<ffi.Uint16>,
  ffi.Uint32,
  ffi.Uint64,
);

typedef _c__set_invalid_parameter_handler
    = ffi.Pointer<ffi.NativeFunction<_invalid_parameter_handler>> Function(
  ffi.Pointer<ffi.NativeFunction<_invalid_parameter_handler>> _Handler,
);

typedef _dart__set_invalid_parameter_handler
    = ffi.Pointer<ffi.NativeFunction<_invalid_parameter_handler>> Function(
  ffi.Pointer<ffi.NativeFunction<_invalid_parameter_handler>> _Handler,
);

typedef _c__get_invalid_parameter_handler
    = ffi.Pointer<ffi.NativeFunction<_invalid_parameter_handler>> Function();

typedef _dart__get_invalid_parameter_handler
    = ffi.Pointer<ffi.NativeFunction<_invalid_parameter_handler>> Function();

typedef _c__set_thread_local_invalid_parameter_handler
    = ffi.Pointer<ffi.NativeFunction<_invalid_parameter_handler>> Function(
  ffi.Pointer<ffi.NativeFunction<_invalid_parameter_handler>> _Handler,
);

typedef _dart__set_thread_local_invalid_parameter_handler
    = ffi.Pointer<ffi.NativeFunction<_invalid_parameter_handler>> Function(
  ffi.Pointer<ffi.NativeFunction<_invalid_parameter_handler>> _Handler,
);

typedef _c__get_thread_local_invalid_parameter_handler
    = ffi.Pointer<ffi.NativeFunction<_invalid_parameter_handler>> Function();

typedef _dart__get_thread_local_invalid_parameter_handler
    = ffi.Pointer<ffi.NativeFunction<_invalid_parameter_handler>> Function();

typedef _c__set_error_mode = ffi.Int32 Function(
  ffi.Int32 _Mode,
);

typedef _dart__set_error_mode = int Function(
  int _Mode,
);

typedef _c___sys_errlist = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function();

typedef _dart___sys_errlist = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function();

typedef _c___sys_nerr = ffi.Pointer<ffi.Int32> Function();

typedef _dart___sys_nerr = ffi.Pointer<ffi.Int32> Function();

typedef _c_perror = ffi.Void Function(
  ffi.Pointer<ffi.Int8> _ErrMsg,
);

typedef _dart_perror = void Function(
  ffi.Pointer<ffi.Int8> _ErrMsg,
);

typedef _c___p__pgmptr = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function();

typedef _dart___p__pgmptr = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function();

typedef _c___p__wpgmptr = ffi.Pointer<ffi.Pointer<ffi.Uint16>> Function();

typedef _dart___p__wpgmptr = ffi.Pointer<ffi.Pointer<ffi.Uint16>> Function();

typedef _c___p__fmode = ffi.Pointer<ffi.Int32> Function();

typedef _dart___p__fmode = ffi.Pointer<ffi.Int32> Function();

typedef _c__get_pgmptr = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Value,
);

typedef _dart__get_pgmptr = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Value,
);

typedef _c__get_wpgmptr = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Value,
);

typedef _dart__get_wpgmptr = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Value,
);

typedef _c__set_fmode = ffi.Int32 Function(
  ffi.Int32 _Mode,
);

typedef _dart__set_fmode = int Function(
  int _Mode,
);

typedef _c__get_fmode = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> _PMode,
);

typedef _dart__get_fmode = int Function(
  ffi.Pointer<ffi.Int32> _PMode,
);

typedef _c__abs64 = ffi.Int64 Function(
  ffi.Int64 _Number,
);

typedef _dart__abs64 = int Function(
  int _Number,
);

typedef _c__byteswap_ushort = ffi.Uint16 Function(
  ffi.Uint16 _Number,
);

typedef _dart__byteswap_ushort = int Function(
  int _Number,
);

typedef _c__byteswap_ulong = ffi.Uint64 Function(
  ffi.Uint64 _Number,
);

typedef _dart__byteswap_ulong = int Function(
  int _Number,
);

typedef _c__byteswap_uint64 = ffi.Uint64 Function(
  ffi.Uint64 _Number,
);

typedef _dart__byteswap_uint64 = int Function(
  int _Number,
);

typedef _c__lrotl = ffi.Uint64 Function(
  ffi.Uint64 _Value,
  ffi.Int32 _Shift,
);

typedef _dart__lrotl = int Function(
  int _Value,
  int _Shift,
);

typedef _c__lrotr = ffi.Uint64 Function(
  ffi.Uint64 _Value,
  ffi.Int32 _Shift,
);

typedef _dart__lrotr = int Function(
  int _Value,
  int _Shift,
);

typedef _c_srand = ffi.Void Function(
  ffi.Uint32 _Seed,
);

typedef _dart_srand = void Function(
  int _Seed,
);

typedef _c_rand = ffi.Int32 Function();

typedef _dart_rand = int Function();

typedef _c_atoi = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _dart_atoi = int Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _c_atol = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _dart_atol = int Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _c_atoll = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _dart_atoll = int Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _c__atoi64 = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _dart__atoi64 = int Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _c__atoi_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__atoi_l = int Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__atol_l = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__atol_l = int Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__atoll_l = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__atoll_l = int Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__atoi64_l = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__atoi64_l = int Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__atoflt = ffi.Int32 Function(
  ffi.Pointer<_CRT_FLOAT> _Result,
  ffi.Pointer<ffi.Int8> _String,
);

typedef _dart__atoflt = int Function(
  ffi.Pointer<_CRT_FLOAT> _Result,
  ffi.Pointer<ffi.Int8> _String,
);

typedef _c__atodbl = ffi.Int32 Function(
  ffi.Pointer<_CRT_DOUBLE> _Result,
  ffi.Pointer<ffi.Int8> _String,
);

typedef _dart__atodbl = int Function(
  ffi.Pointer<_CRT_DOUBLE> _Result,
  ffi.Pointer<ffi.Int8> _String,
);

typedef _c__atoldbl = ffi.Int32 Function(
  ffi.Pointer<_LDOUBLE> _Result,
  ffi.Pointer<ffi.Int8> _String,
);

typedef _dart__atoldbl = int Function(
  ffi.Pointer<_LDOUBLE> _Result,
  ffi.Pointer<ffi.Int8> _String,
);

typedef _c__atoflt_l = ffi.Int32 Function(
  ffi.Pointer<_CRT_FLOAT> _Result,
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__atoflt_l = int Function(
  ffi.Pointer<_CRT_FLOAT> _Result,
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__atodbl_l = ffi.Int32 Function(
  ffi.Pointer<_CRT_DOUBLE> _Result,
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__atodbl_l = int Function(
  ffi.Pointer<_CRT_DOUBLE> _Result,
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__atoldbl_l = ffi.Int32 Function(
  ffi.Pointer<_LDOUBLE> _Result,
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__atoldbl_l = int Function(
  ffi.Pointer<_LDOUBLE> _Result,
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_strtof = ffi.Float Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
);

typedef _dart_strtof = double Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
);

typedef _c__strtof_l = ffi.Float Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strtof_l = double Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_strtod = ffi.Double Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
);

typedef _dart_strtod = double Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
);

typedef _c__strtod_l = ffi.Double Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strtod_l = double Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_strtol = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  ffi.Int32 _Radix,
);

typedef _dart_strtol = int Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  int _Radix,
);

typedef _c__strtol_l = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  ffi.Int32 _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strtol_l = int Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  int _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_strtoll = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  ffi.Int32 _Radix,
);

typedef _dart_strtoll = int Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  int _Radix,
);

typedef _c__strtoll_l = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  ffi.Int32 _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strtoll_l = int Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  int _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_strtoul = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  ffi.Int32 _Radix,
);

typedef _dart_strtoul = int Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  int _Radix,
);

typedef _c__strtoul_l = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  ffi.Int32 _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strtoul_l = int Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  int _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_strtoull = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  ffi.Int32 _Radix,
);

typedef _dart_strtoull = int Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  int _Radix,
);

typedef _c__strtoull_l = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  ffi.Int32 _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strtoull_l = int Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  int _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__strtoi64 = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  ffi.Int32 _Radix,
);

typedef _dart__strtoi64 = int Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  int _Radix,
);

typedef _c__strtoi64_l = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  ffi.Int32 _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strtoi64_l = int Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  int _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__strtoui64 = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  ffi.Int32 _Radix,
);

typedef _dart__strtoui64 = int Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  int _Radix,
);

typedef _c__strtoui64_l = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  ffi.Int32 _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strtoui64_l = int Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  int _Radix,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__itoa_s = ffi.Int32 Function(
  ffi.Int32 _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Int32 _Radix,
);

typedef _dart__itoa_s = int Function(
  int _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  int _BufferCount,
  int _Radix,
);

typedef _c__itoa = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Int32 _Radix,
);

typedef _dart__itoa = ffi.Pointer<ffi.Int8> Function(
  int _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  int _Radix,
);

typedef _c__ltoa_s = ffi.Int32 Function(
  ffi.Int64 _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Int32 _Radix,
);

typedef _dart__ltoa_s = int Function(
  int _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  int _BufferCount,
  int _Radix,
);

typedef _c__ltoa = ffi.Pointer<ffi.Int8> Function(
  ffi.Int64 _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Int32 _Radix,
);

typedef _dart__ltoa = ffi.Pointer<ffi.Int8> Function(
  int _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  int _Radix,
);

typedef _c__ultoa_s = ffi.Int32 Function(
  ffi.Uint64 _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Int32 _Radix,
);

typedef _dart__ultoa_s = int Function(
  int _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  int _BufferCount,
  int _Radix,
);

typedef _c__ultoa = ffi.Pointer<ffi.Int8> Function(
  ffi.Uint64 _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Int32 _Radix,
);

typedef _dart__ultoa = ffi.Pointer<ffi.Int8> Function(
  int _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  int _Radix,
);

typedef _c__i64toa_s = ffi.Int32 Function(
  ffi.Int64 _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Int32 _Radix,
);

typedef _dart__i64toa_s = int Function(
  int _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  int _BufferCount,
  int _Radix,
);

typedef _c__i64toa = ffi.Pointer<ffi.Int8> Function(
  ffi.Int64 _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Int32 _Radix,
);

typedef _dart__i64toa = ffi.Pointer<ffi.Int8> Function(
  int _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  int _Radix,
);

typedef _c__ui64toa_s = ffi.Int32 Function(
  ffi.Uint64 _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Int32 _Radix,
);

typedef _dart__ui64toa_s = int Function(
  int _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  int _BufferCount,
  int _Radix,
);

typedef _c__ui64toa = ffi.Pointer<ffi.Int8> Function(
  ffi.Uint64 _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Int32 _Radix,
);

typedef _dart__ui64toa = ffi.Pointer<ffi.Int8> Function(
  int _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  int _Radix,
);

typedef _c__ecvt_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Double _Value,
  ffi.Int32 _DigitCount,
  ffi.Pointer<ffi.Int32> _PtDec,
  ffi.Pointer<ffi.Int32> _PtSign,
);

typedef _dart__ecvt_s = int Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  int _BufferCount,
  double _Value,
  int _DigitCount,
  ffi.Pointer<ffi.Int32> _PtDec,
  ffi.Pointer<ffi.Int32> _PtSign,
);

typedef _c__ecvt = ffi.Pointer<ffi.Int8> Function(
  ffi.Double _Value,
  ffi.Int32 _DigitCount,
  ffi.Pointer<ffi.Int32> _PtDec,
  ffi.Pointer<ffi.Int32> _PtSign,
);

typedef _dart__ecvt = ffi.Pointer<ffi.Int8> Function(
  double _Value,
  int _DigitCount,
  ffi.Pointer<ffi.Int32> _PtDec,
  ffi.Pointer<ffi.Int32> _PtSign,
);

typedef _c__fcvt_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Double _Value,
  ffi.Int32 _FractionalDigitCount,
  ffi.Pointer<ffi.Int32> _PtDec,
  ffi.Pointer<ffi.Int32> _PtSign,
);

typedef _dart__fcvt_s = int Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  int _BufferCount,
  double _Value,
  int _FractionalDigitCount,
  ffi.Pointer<ffi.Int32> _PtDec,
  ffi.Pointer<ffi.Int32> _PtSign,
);

typedef _c__fcvt = ffi.Pointer<ffi.Int8> Function(
  ffi.Double _Value,
  ffi.Int32 _FractionalDigitCount,
  ffi.Pointer<ffi.Int32> _PtDec,
  ffi.Pointer<ffi.Int32> _PtSign,
);

typedef _dart__fcvt = ffi.Pointer<ffi.Int8> Function(
  double _Value,
  int _FractionalDigitCount,
  ffi.Pointer<ffi.Int32> _PtDec,
  ffi.Pointer<ffi.Int32> _PtSign,
);

typedef _c__gcvt_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Double _Value,
  ffi.Int32 _DigitCount,
);

typedef _dart__gcvt_s = int Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  int _BufferCount,
  double _Value,
  int _DigitCount,
);

typedef _c__gcvt = ffi.Pointer<ffi.Int8> Function(
  ffi.Double _Value,
  ffi.Int32 _DigitCount,
  ffi.Pointer<ffi.Int8> _Buffer,
);

typedef _dart__gcvt = ffi.Pointer<ffi.Int8> Function(
  double _Value,
  int _DigitCount,
  ffi.Pointer<ffi.Int8> _Buffer,
);

typedef _c_mblen = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Ch,
  ffi.Uint64 _MaxCount,
);

typedef _dart_mblen = int Function(
  ffi.Pointer<ffi.Int8> _Ch,
  int _MaxCount,
);

typedef _c__mblen_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Ch,
  ffi.Uint64 _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__mblen_l = int Function(
  ffi.Pointer<ffi.Int8> _Ch,
  int _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__mbstrlen = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _dart__mbstrlen = int Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _c__mbstrlen_l = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__mbstrlen_l = int Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__mbstrnlen = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Uint64 _MaxCount,
);

typedef _dart__mbstrnlen = int Function(
  ffi.Pointer<ffi.Int8> _String,
  int _MaxCount,
);

typedef _c__mbstrnlen_l = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Uint64 _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__mbstrnlen_l = int Function(
  ffi.Pointer<ffi.Int8> _String,
  int _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_mbtowc = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _DstCh,
  ffi.Pointer<ffi.Int8> _SrcCh,
  ffi.Uint64 _SrcSizeInBytes,
);

typedef _dart_mbtowc = int Function(
  ffi.Pointer<ffi.Uint16> _DstCh,
  ffi.Pointer<ffi.Int8> _SrcCh,
  int _SrcSizeInBytes,
);

typedef _c__mbtowc_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _DstCh,
  ffi.Pointer<ffi.Int8> _SrcCh,
  ffi.Uint64 _SrcSizeInBytes,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__mbtowc_l = int Function(
  ffi.Pointer<ffi.Uint16> _DstCh,
  ffi.Pointer<ffi.Int8> _SrcCh,
  int _SrcSizeInBytes,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_mbstowcs_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> _PtNumOfCharConverted,
  ffi.Pointer<ffi.Uint16> _DstBuf,
  ffi.Uint64 _SizeInWords,
  ffi.Pointer<ffi.Int8> _SrcBuf,
  ffi.Uint64 _MaxCount,
);

typedef _dart_mbstowcs_s = int Function(
  ffi.Pointer<ffi.Uint64> _PtNumOfCharConverted,
  ffi.Pointer<ffi.Uint16> _DstBuf,
  int _SizeInWords,
  ffi.Pointer<ffi.Int8> _SrcBuf,
  int _MaxCount,
);

typedef _c_mbstowcs = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _Dest,
  ffi.Pointer<ffi.Int8> _Source,
  ffi.Uint64 _MaxCount,
);

typedef _dart_mbstowcs = int Function(
  ffi.Pointer<ffi.Uint16> _Dest,
  ffi.Pointer<ffi.Int8> _Source,
  int _MaxCount,
);

typedef _c__mbstowcs_s_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> _PtNumOfCharConverted,
  ffi.Pointer<ffi.Uint16> _DstBuf,
  ffi.Uint64 _SizeInWords,
  ffi.Pointer<ffi.Int8> _SrcBuf,
  ffi.Uint64 _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__mbstowcs_s_l = int Function(
  ffi.Pointer<ffi.Uint64> _PtNumOfCharConverted,
  ffi.Pointer<ffi.Uint16> _DstBuf,
  int _SizeInWords,
  ffi.Pointer<ffi.Int8> _SrcBuf,
  int _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__mbstowcs_l = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _Dest,
  ffi.Pointer<ffi.Int8> _Source,
  ffi.Uint64 _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__mbstowcs_l = int Function(
  ffi.Pointer<ffi.Uint16> _Dest,
  ffi.Pointer<ffi.Int8> _Source,
  int _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_wctomb = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _MbCh,
  ffi.Uint16 _WCh,
);

typedef _dart_wctomb = int Function(
  ffi.Pointer<ffi.Int8> _MbCh,
  int _WCh,
);

typedef _c__wctomb_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _MbCh,
  ffi.Uint16 _WCh,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wctomb_l = int Function(
  ffi.Pointer<ffi.Int8> _MbCh,
  int _WCh,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_wctomb_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> _SizeConverted,
  ffi.Pointer<ffi.Int8> _MbCh,
  ffi.Uint64 _SizeInBytes,
  ffi.Uint16 _WCh,
);

typedef _dart_wctomb_s = int Function(
  ffi.Pointer<ffi.Int32> _SizeConverted,
  ffi.Pointer<ffi.Int8> _MbCh,
  int _SizeInBytes,
  int _WCh,
);

typedef _c__wctomb_s_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> _SizeConverted,
  ffi.Pointer<ffi.Int8> _MbCh,
  ffi.Uint64 _SizeInBytes,
  ffi.Uint16 _WCh,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wctomb_s_l = int Function(
  ffi.Pointer<ffi.Int32> _SizeConverted,
  ffi.Pointer<ffi.Int8> _MbCh,
  int _SizeInBytes,
  int _WCh,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_wcstombs_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> _PtNumOfCharConverted,
  ffi.Pointer<ffi.Int8> _Dst,
  ffi.Uint64 _DstSizeInBytes,
  ffi.Pointer<ffi.Uint16> _Src,
  ffi.Uint64 _MaxCountInBytes,
);

typedef _dart_wcstombs_s = int Function(
  ffi.Pointer<ffi.Uint64> _PtNumOfCharConverted,
  ffi.Pointer<ffi.Int8> _Dst,
  int _DstSizeInBytes,
  ffi.Pointer<ffi.Uint16> _Src,
  int _MaxCountInBytes,
);

typedef _c_wcstombs = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _Dest,
  ffi.Pointer<ffi.Uint16> _Source,
  ffi.Uint64 _MaxCount,
);

typedef _dart_wcstombs = int Function(
  ffi.Pointer<ffi.Int8> _Dest,
  ffi.Pointer<ffi.Uint16> _Source,
  int _MaxCount,
);

typedef _c__wcstombs_s_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> _PtNumOfCharConverted,
  ffi.Pointer<ffi.Int8> _Dst,
  ffi.Uint64 _DstSizeInBytes,
  ffi.Pointer<ffi.Uint16> _Src,
  ffi.Uint64 _MaxCountInBytes,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcstombs_s_l = int Function(
  ffi.Pointer<ffi.Uint64> _PtNumOfCharConverted,
  ffi.Pointer<ffi.Int8> _Dst,
  int _DstSizeInBytes,
  ffi.Pointer<ffi.Uint16> _Src,
  int _MaxCountInBytes,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__wcstombs_l = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _Dest,
  ffi.Pointer<ffi.Uint16> _Source,
  ffi.Uint64 _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcstombs_l = int Function(
  ffi.Pointer<ffi.Int8> _Dest,
  ffi.Pointer<ffi.Uint16> _Source,
  int _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__fullpath = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Pointer<ffi.Int8> _Path,
  ffi.Uint64 _BufferCount,
);

typedef _dart__fullpath = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Pointer<ffi.Int8> _Path,
  int _BufferCount,
);

typedef _c__makepath_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Pointer<ffi.Int8> _Drive,
  ffi.Pointer<ffi.Int8> _Dir,
  ffi.Pointer<ffi.Int8> _Filename,
  ffi.Pointer<ffi.Int8> _Ext,
);

typedef _dart__makepath_s = int Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  int _BufferCount,
  ffi.Pointer<ffi.Int8> _Drive,
  ffi.Pointer<ffi.Int8> _Dir,
  ffi.Pointer<ffi.Int8> _Filename,
  ffi.Pointer<ffi.Int8> _Ext,
);

typedef _c__makepath = ffi.Void Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Pointer<ffi.Int8> _Drive,
  ffi.Pointer<ffi.Int8> _Dir,
  ffi.Pointer<ffi.Int8> _Filename,
  ffi.Pointer<ffi.Int8> _Ext,
);

typedef _dart__makepath = void Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Pointer<ffi.Int8> _Drive,
  ffi.Pointer<ffi.Int8> _Dir,
  ffi.Pointer<ffi.Int8> _Filename,
  ffi.Pointer<ffi.Int8> _Ext,
);

typedef _c__splitpath = ffi.Void Function(
  ffi.Pointer<ffi.Int8> _FullPath,
  ffi.Pointer<ffi.Int8> _Drive,
  ffi.Pointer<ffi.Int8> _Dir,
  ffi.Pointer<ffi.Int8> _Filename,
  ffi.Pointer<ffi.Int8> _Ext,
);

typedef _dart__splitpath = void Function(
  ffi.Pointer<ffi.Int8> _FullPath,
  ffi.Pointer<ffi.Int8> _Drive,
  ffi.Pointer<ffi.Int8> _Dir,
  ffi.Pointer<ffi.Int8> _Filename,
  ffi.Pointer<ffi.Int8> _Ext,
);

typedef _c__splitpath_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _FullPath,
  ffi.Pointer<ffi.Int8> _Drive,
  ffi.Uint64 _DriveCount,
  ffi.Pointer<ffi.Int8> _Dir,
  ffi.Uint64 _DirCount,
  ffi.Pointer<ffi.Int8> _Filename,
  ffi.Uint64 _FilenameCount,
  ffi.Pointer<ffi.Int8> _Ext,
  ffi.Uint64 _ExtCount,
);

typedef _dart__splitpath_s = int Function(
  ffi.Pointer<ffi.Int8> _FullPath,
  ffi.Pointer<ffi.Int8> _Drive,
  int _DriveCount,
  ffi.Pointer<ffi.Int8> _Dir,
  int _DirCount,
  ffi.Pointer<ffi.Int8> _Filename,
  int _FilenameCount,
  ffi.Pointer<ffi.Int8> _Ext,
  int _ExtCount,
);

typedef _c_getenv_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> _RequiredCount,
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _BufferCount,
  ffi.Pointer<ffi.Int8> _VarName,
);

typedef _dart_getenv_s = int Function(
  ffi.Pointer<ffi.Uint64> _RequiredCount,
  ffi.Pointer<ffi.Int8> _Buffer,
  int _BufferCount,
  ffi.Pointer<ffi.Int8> _VarName,
);

typedef _c___p___argc = ffi.Pointer<ffi.Int32> Function();

typedef _dart___p___argc = ffi.Pointer<ffi.Int32> Function();

typedef _c___p___argv = ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>>
    Function();

typedef _dart___p___argv = ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>>
    Function();

typedef _c___p___wargv = ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Uint16>>>
    Function();

typedef _dart___p___wargv = ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Uint16>>>
    Function();

typedef _c___p__environ = ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>>
    Function();

typedef _dart___p__environ = ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>>
    Function();

typedef _c___p__wenviron = ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Uint16>>>
    Function();

typedef _dart___p__wenviron = ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Uint16>>>
    Function();

typedef _c_getenv = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _VarName,
);

typedef _dart_getenv = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _VarName,
);

typedef _c__dupenv_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Buffer,
  ffi.Pointer<ffi.Uint64> _BufferCount,
  ffi.Pointer<ffi.Int8> _VarName,
);

typedef _dart__dupenv_s = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Buffer,
  ffi.Pointer<ffi.Uint64> _BufferCount,
  ffi.Pointer<ffi.Int8> _VarName,
);

typedef _c_system = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Command,
);

typedef _dart_system = int Function(
  ffi.Pointer<ffi.Int8> _Command,
);

typedef _c__putenv = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _EnvString,
);

typedef _dart__putenv = int Function(
  ffi.Pointer<ffi.Int8> _EnvString,
);

typedef _c__putenv_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Name,
  ffi.Pointer<ffi.Int8> _Value,
);

typedef _dart__putenv_s = int Function(
  ffi.Pointer<ffi.Int8> _Name,
  ffi.Pointer<ffi.Int8> _Value,
);

typedef _c__searchenv_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Filename,
  ffi.Pointer<ffi.Int8> _VarName,
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _BufferCount,
);

typedef _dart__searchenv_s = int Function(
  ffi.Pointer<ffi.Int8> _Filename,
  ffi.Pointer<ffi.Int8> _VarName,
  ffi.Pointer<ffi.Int8> _Buffer,
  int _BufferCount,
);

typedef _c__searchenv = ffi.Void Function(
  ffi.Pointer<ffi.Int8> _Filename,
  ffi.Pointer<ffi.Int8> _VarName,
  ffi.Pointer<ffi.Int8> _Buffer,
);

typedef _dart__searchenv = void Function(
  ffi.Pointer<ffi.Int8> _Filename,
  ffi.Pointer<ffi.Int8> _VarName,
  ffi.Pointer<ffi.Int8> _Buffer,
);

typedef _c__seterrormode = ffi.Void Function(
  ffi.Int32 _Mode,
);

typedef _dart__seterrormode = void Function(
  int _Mode,
);

typedef _c__beep = ffi.Void Function(
  ffi.Uint32 _Frequency,
  ffi.Uint32 _Duration,
);

typedef _dart__beep = void Function(
  int _Frequency,
  int _Duration,
);

typedef _c__sleep = ffi.Void Function(
  ffi.Uint64 _Duration,
);

typedef _dart__sleep = void Function(
  int _Duration,
);

typedef _c_ecvt = ffi.Pointer<ffi.Int8> Function(
  ffi.Double _Value,
  ffi.Int32 _DigitCount,
  ffi.Pointer<ffi.Int32> _PtDec,
  ffi.Pointer<ffi.Int32> _PtSign,
);

typedef _dart_ecvt = ffi.Pointer<ffi.Int8> Function(
  double _Value,
  int _DigitCount,
  ffi.Pointer<ffi.Int32> _PtDec,
  ffi.Pointer<ffi.Int32> _PtSign,
);

typedef _c_fcvt = ffi.Pointer<ffi.Int8> Function(
  ffi.Double _Value,
  ffi.Int32 _FractionalDigitCount,
  ffi.Pointer<ffi.Int32> _PtDec,
  ffi.Pointer<ffi.Int32> _PtSign,
);

typedef _dart_fcvt = ffi.Pointer<ffi.Int8> Function(
  double _Value,
  int _FractionalDigitCount,
  ffi.Pointer<ffi.Int32> _PtDec,
  ffi.Pointer<ffi.Int32> _PtSign,
);

typedef _c_gcvt = ffi.Pointer<ffi.Int8> Function(
  ffi.Double _Value,
  ffi.Int32 _DigitCount,
  ffi.Pointer<ffi.Int8> _DstBuf,
);

typedef _dart_gcvt = ffi.Pointer<ffi.Int8> Function(
  double _Value,
  int _DigitCount,
  ffi.Pointer<ffi.Int8> _DstBuf,
);

typedef _c_itoa = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Int32 _Radix,
);

typedef _dart_itoa = ffi.Pointer<ffi.Int8> Function(
  int _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  int _Radix,
);

typedef _c_ltoa = ffi.Pointer<ffi.Int8> Function(
  ffi.Int64 _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Int32 _Radix,
);

typedef _dart_ltoa = ffi.Pointer<ffi.Int8> Function(
  int _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  int _Radix,
);

typedef _c_swab = ffi.Void Function(
  ffi.Pointer<ffi.Int8> _Buf1,
  ffi.Pointer<ffi.Int8> _Buf2,
  ffi.Int32 _SizeInBytes,
);

typedef _dart_swab = void Function(
  ffi.Pointer<ffi.Int8> _Buf1,
  ffi.Pointer<ffi.Int8> _Buf2,
  int _SizeInBytes,
);

typedef _c_ultoa = ffi.Pointer<ffi.Int8> Function(
  ffi.Uint64 _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Int32 _Radix,
);

typedef _dart_ultoa = ffi.Pointer<ffi.Int8> Function(
  int _Value,
  ffi.Pointer<ffi.Int8> _Buffer,
  int _Radix,
);

typedef _c_putenv = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _EnvString,
);

typedef _dart_putenv = int Function(
  ffi.Pointer<ffi.Int8> _EnvString,
);

typedef _c_onexit = ffi.Pointer<ffi.NativeFunction<_onexit_t>> Function(
  ffi.Pointer<ffi.NativeFunction<_onexit_t>> _Func,
);

typedef _dart_onexit = ffi.Pointer<ffi.NativeFunction<_onexit_t>> Function(
  ffi.Pointer<ffi.NativeFunction<_onexit_t>> _Func,
);

typedef EGLAPIENTRYP = ffi.Pointer<ffi.Void> Function(
  ffi.Int32,
  ffi.Int32,
  ffi.Pointer<ffi.Int32>,
);

typedef EGLint = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<EGLAPIENTRYP>>,
);

typedef PUMS_SCHEDULER_ENTRY_POINT = ffi.Void Function(
  ffi.Int32,
  ffi.Uint64,
  ffi.Pointer<ffi.Void>,
);

typedef PCOPYFILE2_PROGRESS_ROUTINE = ffi.Int32 Function(
  ffi.Pointer<COPYFILE2_MESSAGE>,
  ffi.Pointer<ffi.Void>,
);

typedef MSGBOXCALLBACK = ffi.Void Function(
  ffi.Pointer<LPHELPINFO>,
);

typedef PQUERYHANDLER = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<val_context>,
  ffi.Uint64,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Uint64>,
  ffi.Uint64,
);

typedef LPSERVICE_MAIN_FUNCTIONA = ffi.Void Function(
  ffi.Uint64,
  ffi.Pointer<ffi.Pointer<ffi.Int8>>,
);

typedef LPSERVICE_MAIN_FUNCTIONW = ffi.Void Function(
  ffi.Uint64,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>>,
);
